
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9fc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  0800dbe0  0800dbe0  0000ebe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e124  0800e124  00010378  2**0
                  CONTENTS
  4 .ARM          00000008  0800e124  0800e124  0000f124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e12c  0800e12c  00010378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e12c  0800e12c  0000f12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e130  0800e130  0000f130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  0800e134  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  20000378  0800e4ac  00010378  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000888  0800e4ac  00010888  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010378  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad03  00000000  00000000  000103a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000370e  00000000  00000000  0002b0ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  0002e7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001134  00000000  00000000  0002fe00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a356  00000000  00000000  00030f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a74d  00000000  00000000  0005b28a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114690  00000000  00000000  000759d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018a067  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007470  00000000  00000000  0018a0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  0019151c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000378 	.word	0x20000378
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800dbc4 	.word	0x0800dbc4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000037c 	.word	0x2000037c
 800021c:	0800dbc4 	.word	0x0800dbc4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d0c:	f000 b9a0 	b.w	8001050 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d14e      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da0:	4694      	mov	ip, r2
 8000da2:	458c      	cmp	ip, r1
 8000da4:	4686      	mov	lr, r0
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	d962      	bls.n	8000e72 <__udivmoddi4+0xde>
 8000dac:	b14a      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	4091      	lsls	r1, r2
 8000db4:	fa20 f303 	lsr.w	r3, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f f68c 	uxth.w	r6, ip
 8000dca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb04 f106 	mul.w	r1, r4, r6
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dea:	f080 8112 	bcs.w	8001012 <__udivmoddi4+0x27e>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 810f 	bls.w	8001012 <__udivmoddi4+0x27e>
 8000df4:	3c02      	subs	r4, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a59      	subs	r1, r3, r1
 8000dfa:	fa1f f38e 	uxth.w	r3, lr
 8000dfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e02:	fb07 1110 	mls	r1, r7, r0, r1
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f606 	mul.w	r6, r0, r6
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x94>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000e1a:	f080 80fc 	bcs.w	8001016 <__udivmoddi4+0x282>
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	f240 80f9 	bls.w	8001016 <__udivmoddi4+0x282>
 8000e24:	4463      	add	r3, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11d      	cbz	r5, 8000e3a <__udivmoddi4+0xa6>
 8000e32:	40d3      	lsrs	r3, r2
 8000e34:	2200      	movs	r2, #0
 8000e36:	e9c5 3200 	strd	r3, r2, [r5]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d905      	bls.n	8000e4e <__udivmoddi4+0xba>
 8000e42:	b10d      	cbz	r5, 8000e48 <__udivmoddi4+0xb4>
 8000e44:	e9c5 0100 	strd	r0, r1, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e7f5      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e4e:	fab3 f183 	clz	r1, r3
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d146      	bne.n	8000ee4 <__udivmoddi4+0x150>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d302      	bcc.n	8000e60 <__udivmoddi4+0xcc>
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	f0c0 80f0 	bcc.w	8001040 <__udivmoddi4+0x2ac>
 8000e60:	1a86      	subs	r6, r0, r2
 8000e62:	eb64 0303 	sbc.w	r3, r4, r3
 8000e66:	2001      	movs	r0, #1
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d0e6      	beq.n	8000e3a <__udivmoddi4+0xa6>
 8000e6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e70:	e7e3      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	f040 8090 	bne.w	8000f98 <__udivmoddi4+0x204>
 8000e78:	eba1 040c 	sub.w	r4, r1, ip
 8000e7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e80:	fa1f f78c 	uxth.w	r7, ip
 8000e84:	2101      	movs	r1, #1
 8000e86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e96:	fb07 f006 	mul.w	r0, r7, r6
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x11c>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x11a>
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	f200 80cd 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000eae:	4626      	mov	r6, r4
 8000eb0:	1a1c      	subs	r4, r3, r0
 8000eb2:	fa1f f38e 	uxth.w	r3, lr
 8000eb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eba:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec2:	fb00 f707 	mul.w	r7, r0, r7
 8000ec6:	429f      	cmp	r7, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x148>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x146>
 8000ed4:	429f      	cmp	r7, r3
 8000ed6:	f200 80b0 	bhi.w	800103a <__udivmoddi4+0x2a6>
 8000eda:	4620      	mov	r0, r4
 8000edc:	1bdb      	subs	r3, r3, r7
 8000ede:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ee2:	e7a5      	b.n	8000e30 <__udivmoddi4+0x9c>
 8000ee4:	f1c1 0620 	rsb	r6, r1, #32
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	fa22 f706 	lsr.w	r7, r2, r6
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ef4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ef8:	ea43 030c 	orr.w	r3, r3, ip
 8000efc:	40f4      	lsrs	r4, r6
 8000efe:	fa00 f801 	lsl.w	r8, r0, r1
 8000f02:	0c38      	lsrs	r0, r7, #16
 8000f04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f08:	fbb4 fef0 	udiv	lr, r4, r0
 8000f0c:	fa1f fc87 	uxth.w	ip, r7
 8000f10:	fb00 441e 	mls	r4, r0, lr, r4
 8000f14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f18:	fb0e f90c 	mul.w	r9, lr, ip
 8000f1c:	45a1      	cmp	r9, r4
 8000f1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f22:	d90a      	bls.n	8000f3a <__udivmoddi4+0x1a6>
 8000f24:	193c      	adds	r4, r7, r4
 8000f26:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f2a:	f080 8084 	bcs.w	8001036 <__udivmoddi4+0x2a2>
 8000f2e:	45a1      	cmp	r9, r4
 8000f30:	f240 8081 	bls.w	8001036 <__udivmoddi4+0x2a2>
 8000f34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	eba4 0409 	sub.w	r4, r4, r9
 8000f3e:	fa1f f983 	uxth.w	r9, r3
 8000f42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f46:	fb00 4413 	mls	r4, r0, r3, r4
 8000f4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f52:	45a4      	cmp	ip, r4
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x1d2>
 8000f56:	193c      	adds	r4, r7, r4
 8000f58:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f5c:	d267      	bcs.n	800102e <__udivmoddi4+0x29a>
 8000f5e:	45a4      	cmp	ip, r4
 8000f60:	d965      	bls.n	800102e <__udivmoddi4+0x29a>
 8000f62:	3b02      	subs	r3, #2
 8000f64:	443c      	add	r4, r7
 8000f66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f6e:	eba4 040c 	sub.w	r4, r4, ip
 8000f72:	429c      	cmp	r4, r3
 8000f74:	46ce      	mov	lr, r9
 8000f76:	469c      	mov	ip, r3
 8000f78:	d351      	bcc.n	800101e <__udivmoddi4+0x28a>
 8000f7a:	d04e      	beq.n	800101a <__udivmoddi4+0x286>
 8000f7c:	b155      	cbz	r5, 8000f94 <__udivmoddi4+0x200>
 8000f7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f82:	eb64 040c 	sbc.w	r4, r4, ip
 8000f86:	fa04 f606 	lsl.w	r6, r4, r6
 8000f8a:	40cb      	lsrs	r3, r1
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	e9c5 6400 	strd	r6, r4, [r5]
 8000f94:	2100      	movs	r1, #0
 8000f96:	e750      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000f98:	f1c2 0320 	rsb	r3, r2, #32
 8000f9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000fa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fa8:	4094      	lsls	r4, r2
 8000faa:	430c      	orrs	r4, r1
 8000fac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fb4:	fa1f f78c 	uxth.w	r7, ip
 8000fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fc0:	0c23      	lsrs	r3, r4, #16
 8000fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc6:	fb00 f107 	mul.w	r1, r0, r7
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	d908      	bls.n	8000fe0 <__udivmoddi4+0x24c>
 8000fce:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fd6:	d22c      	bcs.n	8001032 <__udivmoddi4+0x29e>
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d92a      	bls.n	8001032 <__udivmoddi4+0x29e>
 8000fdc:	3802      	subs	r0, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	b2a4      	uxth	r4, r4
 8000fe4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fe8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ff0:	fb01 f307 	mul.w	r3, r1, r7
 8000ff4:	42a3      	cmp	r3, r4
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x276>
 8000ff8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ffc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001000:	d213      	bcs.n	800102a <__udivmoddi4+0x296>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d911      	bls.n	800102a <__udivmoddi4+0x296>
 8001006:	3902      	subs	r1, #2
 8001008:	4464      	add	r4, ip
 800100a:	1ae4      	subs	r4, r4, r3
 800100c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001010:	e739      	b.n	8000e86 <__udivmoddi4+0xf2>
 8001012:	4604      	mov	r4, r0
 8001014:	e6f0      	b.n	8000df8 <__udivmoddi4+0x64>
 8001016:	4608      	mov	r0, r1
 8001018:	e706      	b.n	8000e28 <__udivmoddi4+0x94>
 800101a:	45c8      	cmp	r8, r9
 800101c:	d2ae      	bcs.n	8000f7c <__udivmoddi4+0x1e8>
 800101e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001022:	eb63 0c07 	sbc.w	ip, r3, r7
 8001026:	3801      	subs	r0, #1
 8001028:	e7a8      	b.n	8000f7c <__udivmoddi4+0x1e8>
 800102a:	4631      	mov	r1, r6
 800102c:	e7ed      	b.n	800100a <__udivmoddi4+0x276>
 800102e:	4603      	mov	r3, r0
 8001030:	e799      	b.n	8000f66 <__udivmoddi4+0x1d2>
 8001032:	4630      	mov	r0, r6
 8001034:	e7d4      	b.n	8000fe0 <__udivmoddi4+0x24c>
 8001036:	46d6      	mov	lr, sl
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1a6>
 800103a:	4463      	add	r3, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e74d      	b.n	8000edc <__udivmoddi4+0x148>
 8001040:	4606      	mov	r6, r0
 8001042:	4623      	mov	r3, r4
 8001044:	4608      	mov	r0, r1
 8001046:	e70f      	b.n	8000e68 <__udivmoddi4+0xd4>
 8001048:	3e02      	subs	r6, #2
 800104a:	4463      	add	r3, ip
 800104c:	e730      	b.n	8000eb0 <__udivmoddi4+0x11c>
 800104e:	bf00      	nop

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	@ 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800105a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2220      	movs	r2, #32
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f009 fffa 	bl	800b066 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001072:	4b32      	ldr	r3, [pc, #200]	@ (800113c <MX_ADC1_Init+0xe8>)
 8001074:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001078:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800107a:	4b30      	ldr	r3, [pc, #192]	@ (800113c <MX_ADC1_Init+0xe8>)
 800107c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001080:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001082:	4b2e      	ldr	r3, [pc, #184]	@ (800113c <MX_ADC1_Init+0xe8>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001088:	4b2c      	ldr	r3, [pc, #176]	@ (800113c <MX_ADC1_Init+0xe8>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800108e:	4b2b      	ldr	r3, [pc, #172]	@ (800113c <MX_ADC1_Init+0xe8>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001094:	4b29      	ldr	r3, [pc, #164]	@ (800113c <MX_ADC1_Init+0xe8>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109a:	4b28      	ldr	r3, [pc, #160]	@ (800113c <MX_ADC1_Init+0xe8>)
 800109c:	2204      	movs	r2, #4
 800109e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010a0:	4b26      	ldr	r3, [pc, #152]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010a6:	4b25      	ldr	r3, [pc, #148]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010ac:	4b23      	ldr	r3, [pc, #140]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b2:	4b22      	ldr	r3, [pc, #136]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ba:	4b20      	ldr	r3, [pc, #128]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c0:	4b1e      	ldr	r3, [pc, #120]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ce:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010d4:	4b19      	ldr	r3, [pc, #100]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010dc:	4817      	ldr	r0, [pc, #92]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010de:	f001 fd3d 	bl	8002b5c <HAL_ADC_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010e8:	f000 fbea 	bl	80018c0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f4:	4619      	mov	r1, r3
 80010f6:	4811      	ldr	r0, [pc, #68]	@ (800113c <MX_ADC1_Init+0xe8>)
 80010f8:	f002 fea0 	bl	8003e3c <HAL_ADCEx_MultiModeConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001102:	f000 fbdd 	bl	80018c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001108:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110a:	2306      	movs	r3, #6
 800110c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001112:	237f      	movs	r3, #127	@ 0x7f
 8001114:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001116:	2304      	movs	r3, #4
 8001118:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4619      	mov	r1, r3
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <MX_ADC1_Init+0xe8>)
 8001124:	f002 f8d4 	bl	80032d0 <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800112e:	f000 fbc7 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	3730      	adds	r7, #48	@ 0x30
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000394 	.word	0x20000394
 8001140:	21800100 	.word	0x21800100

08001144 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800114a:	463b      	mov	r3, r7
 800114c:	2220      	movs	r2, #32
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f009 ff88 	bl	800b066 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001156:	4b2b      	ldr	r3, [pc, #172]	@ (8001204 <MX_ADC2_Init+0xc0>)
 8001158:	4a2b      	ldr	r2, [pc, #172]	@ (8001208 <MX_ADC2_Init+0xc4>)
 800115a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800115c:	4b29      	ldr	r3, [pc, #164]	@ (8001204 <MX_ADC2_Init+0xc0>)
 800115e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001162:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001164:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <MX_ADC2_Init+0xc0>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800116a:	4b26      	ldr	r3, [pc, #152]	@ (8001204 <MX_ADC2_Init+0xc0>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001170:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <MX_ADC2_Init+0xc0>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001176:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <MX_ADC2_Init+0xc0>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800117c:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <MX_ADC2_Init+0xc0>)
 800117e:	2204      	movs	r2, #4
 8001180:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001182:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <MX_ADC2_Init+0xc0>)
 8001184:	2200      	movs	r2, #0
 8001186:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001188:	4b1e      	ldr	r3, [pc, #120]	@ (8001204 <MX_ADC2_Init+0xc0>)
 800118a:	2200      	movs	r2, #0
 800118c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800118e:	4b1d      	ldr	r3, [pc, #116]	@ (8001204 <MX_ADC2_Init+0xc0>)
 8001190:	2201      	movs	r2, #1
 8001192:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001194:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <MX_ADC2_Init+0xc0>)
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800119c:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <MX_ADC2_Init+0xc0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a2:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <MX_ADC2_Init+0xc0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011a8:	4b16      	ldr	r3, [pc, #88]	@ (8001204 <MX_ADC2_Init+0xc0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011b0:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <MX_ADC2_Init+0xc0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011b6:	4b13      	ldr	r3, [pc, #76]	@ (8001204 <MX_ADC2_Init+0xc0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011be:	4811      	ldr	r0, [pc, #68]	@ (8001204 <MX_ADC2_Init+0xc0>)
 80011c0:	f001 fccc 	bl	8002b5c <HAL_ADC_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011ca:	f000 fb79 	bl	80018c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011ce:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <MX_ADC2_Init+0xc8>)
 80011d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d2:	2306      	movs	r3, #6
 80011d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011da:	237f      	movs	r3, #127	@ 0x7f
 80011dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011de:	2304      	movs	r3, #4
 80011e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011e6:	463b      	mov	r3, r7
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	@ (8001204 <MX_ADC2_Init+0xc0>)
 80011ec:	f002 f870 	bl	80032d0 <HAL_ADC_ConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011f6:	f000 fb63 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	3720      	adds	r7, #32
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000400 	.word	0x20000400
 8001208:	50000100 	.word	0x50000100
 800120c:	19200040 	.word	0x19200040

08001210 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b0a4      	sub	sp, #144	@ 0x90
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001228:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800122c:	2254      	movs	r2, #84	@ 0x54
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f009 ff18 	bl	800b066 <memset>
  if(adcHandle->Instance==ADC1)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800123e:	d174      	bne.n	800132a <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001240:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001244:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001246:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800124a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800124c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001250:	4618      	mov	r0, r3
 8001252:	f004 f873 	bl	800533c <HAL_RCCEx_PeriphCLKConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800125c:	f000 fb30 	bl	80018c0 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001260:	4b63      	ldr	r3, [pc, #396]	@ (80013f0 <HAL_ADC_MspInit+0x1e0>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	4a62      	ldr	r2, [pc, #392]	@ (80013f0 <HAL_ADC_MspInit+0x1e0>)
 8001268:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800126a:	4b61      	ldr	r3, [pc, #388]	@ (80013f0 <HAL_ADC_MspInit+0x1e0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d10b      	bne.n	800128a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001272:	4b60      	ldr	r3, [pc, #384]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	4a5f      	ldr	r2, [pc, #380]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 8001278:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800127c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127e:	4b5d      	ldr	r3, [pc, #372]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
 8001288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	4b5a      	ldr	r3, [pc, #360]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	4a59      	ldr	r2, [pc, #356]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001296:	4b57      	ldr	r3, [pc, #348]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	623b      	str	r3, [r7, #32]
 80012a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b54      	ldr	r3, [pc, #336]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	4a53      	ldr	r2, [pc, #332]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ae:	4b51      	ldr	r3, [pc, #324]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	4b4e      	ldr	r3, [pc, #312]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	4a4d      	ldr	r2, [pc, #308]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c6:	4b4b      	ldr	r3, [pc, #300]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	61bb      	str	r3, [r7, #24]
 80012d0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 80012d2:	2304      	movs	r3, #4
 80012d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d6:	2303      	movs	r3, #3
 80012d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80012e2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012e6:	4619      	mov	r1, r3
 80012e8:	4843      	ldr	r0, [pc, #268]	@ (80013f8 <HAL_ADC_MspInit+0x1e8>)
 80012ea:	f003 f84f 	bl	800438c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80012ee:	2302      	movs	r3, #2
 80012f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f2:	2303      	movs	r3, #3
 80012f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001308:	f003 f840 	bl	800438c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800130c:	2303      	movs	r3, #3
 800130e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001310:	2303      	movs	r3, #3
 8001312:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001320:	4619      	mov	r1, r3
 8001322:	4836      	ldr	r0, [pc, #216]	@ (80013fc <HAL_ADC_MspInit+0x1ec>)
 8001324:	f003 f832 	bl	800438c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001328:	e05e      	b.n	80013e8 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a34      	ldr	r2, [pc, #208]	@ (8001400 <HAL_ADC_MspInit+0x1f0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d159      	bne.n	80013e8 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001334:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001338:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800133a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800133e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001340:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001344:	4618      	mov	r0, r3
 8001346:	f003 fff9 	bl	800533c <HAL_RCCEx_PeriphCLKConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 8001350:	f000 fab6 	bl	80018c0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001354:	4b26      	ldr	r3, [pc, #152]	@ (80013f0 <HAL_ADC_MspInit+0x1e0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	4a25      	ldr	r2, [pc, #148]	@ (80013f0 <HAL_ADC_MspInit+0x1e0>)
 800135c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800135e:	4b24      	ldr	r3, [pc, #144]	@ (80013f0 <HAL_ADC_MspInit+0x1e0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d10b      	bne.n	800137e <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001366:	4b23      	ldr	r3, [pc, #140]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	4a22      	ldr	r2, [pc, #136]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 800136c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001372:	4b20      	ldr	r3, [pc, #128]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	4a1c      	ldr	r2, [pc, #112]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138a:	4b1a      	ldr	r3, [pc, #104]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4b17      	ldr	r3, [pc, #92]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	4a16      	ldr	r2, [pc, #88]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a2:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <HAL_ADC_MspInit+0x1e4>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80013ae:	230b      	movs	r3, #11
 80013b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b2:	2303      	movs	r3, #3
 80013b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013be:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80013c2:	4619      	mov	r1, r3
 80013c4:	480c      	ldr	r0, [pc, #48]	@ (80013f8 <HAL_ADC_MspInit+0x1e8>)
 80013c6:	f002 ffe1 	bl	800438c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80013ca:	2301      	movs	r3, #1
 80013cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ce:	2303      	movs	r3, #3
 80013d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80013de:	4619      	mov	r1, r3
 80013e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013e4:	f002 ffd2 	bl	800438c <HAL_GPIO_Init>
}
 80013e8:	bf00      	nop
 80013ea:	3790      	adds	r7, #144	@ 0x90
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	2000046c 	.word	0x2000046c
 80013f4:	40021000 	.word	0x40021000
 80013f8:	48000800 	.word	0x48000800
 80013fc:	48000400 	.word	0x48000400
 8001400:	50000100 	.word	0x50000100

08001404 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	@ 0x28
 8001408:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	4b3f      	ldr	r3, [pc, #252]	@ (8001518 <MX_GPIO_Init+0x114>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141e:	4a3e      	ldr	r2, [pc, #248]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001426:	4b3c      	ldr	r3, [pc, #240]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001432:	4b39      	ldr	r3, [pc, #228]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001436:	4a38      	ldr	r2, [pc, #224]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001438:	f043 0320 	orr.w	r3, r3, #32
 800143c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800143e:	4b36      	ldr	r3, [pc, #216]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001442:	f003 0320 	and.w	r3, r3, #32
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	4b33      	ldr	r3, [pc, #204]	@ (8001518 <MX_GPIO_Init+0x114>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144e:	4a32      	ldr	r2, [pc, #200]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001456:	4b30      	ldr	r3, [pc, #192]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	4b2d      	ldr	r3, [pc, #180]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001466:	4a2c      	ldr	r2, [pc, #176]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146e:	4b2a      	ldr	r3, [pc, #168]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147a:	4b27      	ldr	r3, [pc, #156]	@ (8001518 <MX_GPIO_Init+0x114>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	4a26      	ldr	r2, [pc, #152]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001480:	f043 0308 	orr.w	r3, r3, #8
 8001484:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001486:	4b24      	ldr	r3, [pc, #144]	@ (8001518 <MX_GPIO_Init+0x114>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2120      	movs	r1, #32
 8001496:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800149a:	f003 f8f9 	bl	8004690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2104      	movs	r1, #4
 80014a2:	481e      	ldr	r0, [pc, #120]	@ (800151c <MX_GPIO_Init+0x118>)
 80014a4:	f003 f8f4 	bl	8004690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 80014a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	4818      	ldr	r0, [pc, #96]	@ (8001520 <MX_GPIO_Init+0x11c>)
 80014c0:	f002 ff64 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 80014c4:	2320      	movs	r3, #32
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c8:	2301      	movs	r3, #1
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d0:	2300      	movs	r3, #0
 80014d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014de:	f002 ff55 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 80014e2:	2304      	movs	r3, #4
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	4808      	ldr	r0, [pc, #32]	@ (800151c <MX_GPIO_Init+0x118>)
 80014fa:	f002 ff47 	bl	800438c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	2028      	movs	r0, #40	@ 0x28
 8001504:	f002 fe5a 	bl	80041bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001508:	2028      	movs	r0, #40	@ 0x28
 800150a:	f002 fe71 	bl	80041f0 <HAL_NVIC_EnableIRQ>

}
 800150e:	bf00      	nop
 8001510:	3728      	adds	r7, #40	@ 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000
 800151c:	48000c00 	.word	0x48000c00
 8001520:	48000800 	.word	0x48000800

08001524 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001528:	f3bf 8f4f 	dsb	sy
}
 800152c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800152e:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <__NVIC_SystemReset+0x24>)
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001536:	4904      	ldr	r1, [pc, #16]	@ (8001548 <__NVIC_SystemReset+0x24>)
 8001538:	4b04      	ldr	r3, [pc, #16]	@ (800154c <__NVIC_SystemReset+0x28>)
 800153a:	4313      	orrs	r3, r2
 800153c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800153e:	f3bf 8f4f 	dsb	sy
}
 8001542:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <__NVIC_SystemReset+0x20>
 8001548:	e000ed00 	.word	0xe000ed00
 800154c:	05fa0004 	.word	0x05fa0004

08001550 <__io_putchar>:
 * @brief Sends a character via UART (overwrites the default character transmission).
 * @param ch Character to send
 * @return The sent character
 */
int __io_putchar(int ch)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001558:	1d39      	adds	r1, r7, #4
 800155a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800155e:	2201      	movs	r2, #1
 8001560:	4803      	ldr	r0, [pc, #12]	@ (8001570 <__io_putchar+0x20>)
 8001562:	f005 ff12 	bl	800738a <HAL_UART_Transmit>
	return ch;
 8001566:	687b      	ldr	r3, [r7, #4]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	2000055c 	.word	0x2000055c

08001574 <set_PWM>:
 * @brief Adjusts PWM pulse for TIM1 channels recursively at a defined rate.
 * @param pulse Desired PWM pulse width
 * @attention The global variable current_speed_PWM must be initialized.
 */
void set_PWM(int pulse)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	if (pulse < current_speed_PWM)
 800157c:	4b21      	ldr	r3, [pc, #132]	@ (8001604 <set_PWM+0x90>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	429a      	cmp	r2, r3
 8001584:	da1a      	bge.n	80015bc <set_PWM+0x48>
	{
		current_speed_PWM -= 1;
 8001586:	4b1f      	ldr	r3, [pc, #124]	@ (8001604 <set_PWM+0x90>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	3b01      	subs	r3, #1
 800158c:	4a1d      	ldr	r2, [pc, #116]	@ (8001604 <set_PWM+0x90>)
 800158e:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,
 8001590:	4b1c      	ldr	r3, [pc, #112]	@ (8001604 <set_PWM+0x90>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b1c      	ldr	r3, [pc, #112]	@ (8001608 <set_PWM+0x94>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	635a      	str	r2, [r3, #52]	@ 0x34
				current_speed_PWM);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,
 800159a:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <set_PWM+0x94>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015a0:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <set_PWM+0x90>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <set_PWM+0x94>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	1a52      	subs	r2, r2, r1
 80015ac:	639a      	str	r2, [r3, #56]	@ 0x38
				__HAL_TIM_GET_AUTORELOAD(&htim1) - current_speed_PWM);

		HAL_Delay(PWM_VARIATION_RATE);
 80015ae:	200f      	movs	r0, #15
 80015b0:	f001 f85c 	bl	800266c <HAL_Delay>
		set_PWM(pulse);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ffdd 	bl	8001574 <set_PWM>
				__HAL_TIM_GET_AUTORELOAD(&htim1) - current_speed_PWM);

		HAL_Delay(PWM_VARIATION_RATE);
		set_PWM(pulse);
	}
}
 80015ba:	e01e      	b.n	80015fa <set_PWM+0x86>
	else if (pulse > current_speed_PWM)
 80015bc:	4b11      	ldr	r3, [pc, #68]	@ (8001604 <set_PWM+0x90>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	dd19      	ble.n	80015fa <set_PWM+0x86>
		current_speed_PWM += 1;
 80015c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <set_PWM+0x90>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001604 <set_PWM+0x90>)
 80015ce:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,
 80015d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <set_PWM+0x90>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <set_PWM+0x94>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,
 80015da:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <set_PWM+0x94>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015e0:	4b08      	ldr	r3, [pc, #32]	@ (8001604 <set_PWM+0x90>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <set_PWM+0x94>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	1a52      	subs	r2, r2, r1
 80015ec:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(PWM_VARIATION_RATE);
 80015ee:	200f      	movs	r0, #15
 80015f0:	f001 f83c 	bl	800266c <HAL_Delay>
		set_PWM(pulse);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ffbd 	bl	8001574 <set_PWM>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000470 	.word	0x20000470
 8001608:	200004c4 	.word	0x200004c4
 800160c:	00000000 	.word	0x00000000

08001610 <set_PWM_ratio>:
/**
 * @brief Sets the PWM duty cycle ratio for TIM1 channels.
 * @param ratio Duty cycle ratio (0.0 to 1.0) with 12-bit resolution
 */
void set_PWM_ratio(double ratio)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	ed87 0b00 	vstr	d0, [r7]
	if (ratio < 1 && ratio > 0)
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <set_PWM_ratio+0x70>)
 8001620:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001624:	f7ff fa92 	bl	8000b4c <__aeabi_dcmplt>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d100      	bne.n	8001630 <set_PWM_ratio+0x20>
		int speed = (int)(ratio * PWM_MAX_VAL);

		// Set main PWM pulse width for Channel 1 and Channel 2
		set_PWM(speed);
	}
}
 800162e:	e01d      	b.n	800166c <set_PWM_ratio+0x5c>
	if (ratio < 1 && ratio > 0)
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	e9d7 0100 	ldrd	r0, r1, [r7]
 800163c:	f7ff faa4 	bl	8000b88 <__aeabi_dcmpgt>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d100      	bne.n	8001648 <set_PWM_ratio+0x38>
}
 8001646:	e011      	b.n	800166c <set_PWM_ratio+0x5c>
		int speed = (int)(ratio * PWM_MAX_VAL);
 8001648:	a30b      	add	r3, pc, #44	@ (adr r3, 8001678 <set_PWM_ratio+0x68>)
 800164a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001652:	f7ff f809 	bl	8000668 <__aeabi_dmul>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	f7ff fab3 	bl	8000bc8 <__aeabi_d2iz>
 8001662:	4603      	mov	r3, r0
 8001664:	60fb      	str	r3, [r7, #12]
		set_PWM(speed);
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f7ff ff84 	bl	8001574 <set_PWM>
}
 800166c:	bf00      	nop
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	f3af 8000 	nop.w
 8001678:	00000000 	.word	0x00000000
 800167c:	40b09a00 	.word	0x40b09a00
 8001680:	3ff00000 	.word	0x3ff00000

08001684 <set_PWM_speed>:
/**
 * @brief Sets a specific PWM pulse width for TIM1 channels.
 * @param speed Desired PWM pulse width (0 to PWM_MAX_VAL)
 */
void set_PWM_speed(int speed)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	if (speed < PWM_MAX_VAL && speed > 0)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f241 0299 	movw	r2, #4249	@ 0x1099
 8001692:	4293      	cmp	r3, r2
 8001694:	dc05      	bgt.n	80016a2 <set_PWM_speed+0x1e>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	dd02      	ble.n	80016a2 <set_PWM_speed+0x1e>
	{
		// Set main PWM pulse width for Channel 1 and Channel 2
		set_PWM(speed);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ff69 	bl	8001574 <set_PWM>
	}
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	0000      	movs	r0, r0
 80016ac:	0000      	movs	r0, r0
	...

080016b0 <start_PWM>:

/**
 * @brief Starts PWM on TIM1 channels. Initial base speed set to 0.5 duty cycle.
 */
void start_PWM()
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	// TIM1 Channel 1 Initialisation
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016b4:	2100      	movs	r1, #0
 80016b6:	480e      	ldr	r0, [pc, #56]	@ (80016f0 <start_PWM+0x40>)
 80016b8:	f004 f9c0 	bl	8005a3c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80016bc:	2100      	movs	r1, #0
 80016be:	480c      	ldr	r0, [pc, #48]	@ (80016f0 <start_PWM+0x40>)
 80016c0:	f005 fb40 	bl	8006d44 <HAL_TIMEx_PWMN_Start>

	// TIM1 Channel 2 Initialisation
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80016c4:	2104      	movs	r1, #4
 80016c6:	480a      	ldr	r0, [pc, #40]	@ (80016f0 <start_PWM+0x40>)
 80016c8:	f004 f9b8 	bl	8005a3c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80016cc:	2104      	movs	r1, #4
 80016ce:	4808      	ldr	r0, [pc, #32]	@ (80016f0 <start_PWM+0x40>)
 80016d0:	f005 fb38 	bl	8006d44 <HAL_TIMEx_PWMN_Start>

	current_speed_PWM = (int)(PWM_MAX_VAL/2)+1; // We initialize the base speed to 0 (cyclic rate 0.5)
 80016d4:	4b07      	ldr	r3, [pc, #28]	@ (80016f4 <start_PWM+0x44>)
 80016d6:	f640 024e 	movw	r2, #2126	@ 0x84e
 80016da:	601a      	str	r2, [r3, #0]
	set_PWM_ratio(0.5);
 80016dc:	ed9f 0b02 	vldr	d0, [pc, #8]	@ 80016e8 <start_PWM+0x38>
 80016e0:	f7ff ff96 	bl	8001610 <set_PWM_ratio>
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	00000000 	.word	0x00000000
 80016ec:	3fe00000 	.word	0x3fe00000
 80016f0:	200004c4 	.word	0x200004c4
 80016f4:	20000470 	.word	0x20000470

080016f8 <stop_PWM>:

/**
 * @brief Stops PWM on TIM1 channels.
 */
void stop_PWM()
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	// We disable Tim1 channel 1
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80016fc:	2100      	movs	r1, #0
 80016fe:	4808      	ldr	r0, [pc, #32]	@ (8001720 <stop_PWM+0x28>)
 8001700:	f004 faae 	bl	8005c60 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001704:	2100      	movs	r1, #0
 8001706:	4806      	ldr	r0, [pc, #24]	@ (8001720 <stop_PWM+0x28>)
 8001708:	f005 fbde 	bl	8006ec8 <HAL_TIMEx_PWMN_Stop>

	// We disable Tim1 channel 2
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800170c:	2104      	movs	r1, #4
 800170e:	4804      	ldr	r0, [pc, #16]	@ (8001720 <stop_PWM+0x28>)
 8001710:	f004 faa6 	bl	8005c60 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001714:	2104      	movs	r1, #4
 8001716:	4802      	ldr	r0, [pc, #8]	@ (8001720 <stop_PWM+0x28>)
 8001718:	f005 fbd6 	bl	8006ec8 <HAL_TIMEx_PWMN_Stop>
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}
 8001720:	200004c4 	.word	0x200004c4

08001724 <reset_inverter>:

/**
 * @brief Resets the microcontroller.
 */
void reset_inverter()
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	// Reset le microcontroller
	NVIC_SystemReset();
 8001728:	f7ff fefc 	bl	8001524 <__NVIC_SystemReset>
 800172c:	0000      	movs	r0, r0
	...

08001730 <read_current>:
}


void read_current()
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
	uint32_t adc_value = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
	double current = 0;
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	e9c7 2300 	strd	r2, r3, [r7]

	HAL_ADC_Start(&hadc1);
 8001746:	481c      	ldr	r0, [pc, #112]	@ (80017b8 <read_current+0x88>)
 8001748:	f001 fbca 	bl	8002ee0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100);
 800174c:	2164      	movs	r1, #100	@ 0x64
 800174e:	481a      	ldr	r0, [pc, #104]	@ (80017b8 <read_current+0x88>)
 8001750:	f001 fcaa 	bl	80030a8 <HAL_ADC_PollForConversion>
	adc_value = HAL_ADC_GetValue(&hadc1);
 8001754:	4818      	ldr	r0, [pc, #96]	@ (80017b8 <read_current+0x88>)
 8001756:	f001 fdad 	bl	80032b4 <HAL_ADC_GetValue>
 800175a:	60f8      	str	r0, [r7, #12]

	printf("\r\nRAW adc: %d\r\n", (int)adc_value);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4619      	mov	r1, r3
 8001760:	4816      	ldr	r0, [pc, #88]	@ (80017bc <read_current+0x8c>)
 8001762:	f009 fc0b 	bl	800af7c <iprintf>

	// Convertion taking into account the offset due to the unsigned ADC measure
	current = -3.3/2 + adc_value*0.05;
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f7fe ff04 	bl	8000574 <__aeabi_ui2d>
 800176c:	a30e      	add	r3, pc, #56	@ (adr r3, 80017a8 <read_current+0x78>)
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	f7fe ff79 	bl	8000668 <__aeabi_dmul>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	a30c      	add	r3, pc, #48	@ (adr r3, 80017b0 <read_current+0x80>)
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	f7fe fdb8 	bl	80002f8 <__aeabi_dsub>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	e9c7 2300 	strd	r2, r3, [r7]

	printf("\r\nMeasured current: %.4f\r\n", current);
 8001790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001794:	480a      	ldr	r0, [pc, #40]	@ (80017c0 <read_current+0x90>)
 8001796:	f009 fbf1 	bl	800af7c <iprintf>
}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	f3af 8000 	nop.w
 80017a8:	9999999a 	.word	0x9999999a
 80017ac:	3fa99999 	.word	0x3fa99999
 80017b0:	66666666 	.word	0x66666666
 80017b4:	3ffa6666 	.word	0x3ffa6666
 80017b8:	20000394 	.word	0x20000394
 80017bc:	0800dbe0 	.word	0x0800dbe0
 80017c0:	0800dbf0 	.word	0x0800dbf0

080017c4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80017c8:	f000 ff19 	bl	80025fe <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80017cc:	f000 f81c 	bl	8001808 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80017d0:	f7ff fe18 	bl	8001404 <MX_GPIO_Init>
	MX_ADC2_Init();
 80017d4:	f7ff fcb6 	bl	8001144 <MX_ADC2_Init>
	MX_ADC1_Init();
 80017d8:	f7ff fc3c 	bl	8001054 <MX_ADC1_Init>
	MX_TIM1_Init();
 80017dc:	f000 fa34 	bl	8001c48 <MX_TIM1_Init>
	MX_TIM3_Init();
 80017e0:	f000 fae4 	bl	8001dac <MX_TIM3_Init>
	MX_USART2_UART_Init();
 80017e4:	f000 fc18 	bl	8002018 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80017e8:	f000 fc62 	bl	80020b0 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80017ec:	217f      	movs	r1, #127	@ 0x7f
 80017ee:	4805      	ldr	r0, [pc, #20]	@ (8001804 <main+0x40>)
 80017f0:	f002 fac2 	bl	8003d78 <HAL_ADCEx_Calibration_Start>

	start_PWM();
 80017f4:	f7ff ff5c 	bl	80016b0 <start_PWM>

	Shell_Init();
 80017f8:	f000 fd4e 	bl	8002298 <Shell_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 80017fc:	f000 fd8c 	bl	8002318 <Shell_Loop>
 8001800:	e7fc      	b.n	80017fc <main+0x38>
 8001802:	bf00      	nop
 8001804:	20000394 	.word	0x20000394

08001808 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b094      	sub	sp, #80	@ 0x50
 800180c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180e:	f107 0318 	add.w	r3, r7, #24
 8001812:	2238      	movs	r2, #56	@ 0x38
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f009 fc25 	bl	800b066 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800182a:	2000      	movs	r0, #0
 800182c:	f002 ff6c 	bl	8004708 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001830:	2301      	movs	r3, #1
 8001832:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001834:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001838:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800183a:	2302      	movs	r3, #2
 800183c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800183e:	2303      	movs	r3, #3
 8001840:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001842:	2306      	movs	r3, #6
 8001844:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001846:	2355      	movs	r3, #85	@ 0x55
 8001848:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800184a:	2302      	movs	r3, #2
 800184c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800184e:	2302      	movs	r3, #2
 8001850:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001852:	2302      	movs	r3, #2
 8001854:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001856:	f107 0318 	add.w	r3, r7, #24
 800185a:	4618      	mov	r0, r3
 800185c:	f003 f808 	bl	8004870 <HAL_RCC_OscConfig>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <SystemClock_Config+0x62>
	{
		Error_Handler();
 8001866:	f000 f82b 	bl	80018c0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800186a:	230f      	movs	r3, #15
 800186c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800186e:	2303      	movs	r3, #3
 8001870:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	2104      	movs	r1, #4
 8001882:	4618      	mov	r0, r3
 8001884:	f003 fb0c 	bl	8004ea0 <HAL_RCC_ClockConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 800188e:	f000 f817 	bl	80018c0 <Error_Handler>
	}
}
 8001892:	bf00      	nop
 8001894:	3750      	adds	r7, #80	@ 0x50
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a04      	ldr	r2, [pc, #16]	@ (80018bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d101      	bne.n	80018b2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80018ae:	f000 febf 	bl	8002630 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40001000 	.word	0x40001000

080018c0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018c4:	b672      	cpsid	i
}
 80018c6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <Error_Handler+0x8>

080018cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <HAL_MspInit+0x44>)
 80018d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001910 <HAL_MspInit+0x44>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80018de:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <HAL_MspInit+0x44>)
 80018e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_MspInit+0x44>)
 80018ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ee:	4a08      	ldr	r2, [pc, #32]	@ (8001910 <HAL_MspInit+0x44>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <HAL_MspInit+0x44>)
 80018f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001902:	f002 ffa5 	bl	8004850 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000

08001914 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08c      	sub	sp, #48	@ 0x30
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001924:	4b2c      	ldr	r3, [pc, #176]	@ (80019d8 <HAL_InitTick+0xc4>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001928:	4a2b      	ldr	r2, [pc, #172]	@ (80019d8 <HAL_InitTick+0xc4>)
 800192a:	f043 0310 	orr.w	r3, r3, #16
 800192e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001930:	4b29      	ldr	r3, [pc, #164]	@ (80019d8 <HAL_InitTick+0xc4>)
 8001932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001934:	f003 0310 	and.w	r3, r3, #16
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800193c:	f107 020c 	add.w	r2, r7, #12
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f003 fc80 	bl	800524c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800194c:	f003 fc52 	bl	80051f4 <HAL_RCC_GetPCLK1Freq>
 8001950:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001954:	4a21      	ldr	r2, [pc, #132]	@ (80019dc <HAL_InitTick+0xc8>)
 8001956:	fba2 2303 	umull	r2, r3, r2, r3
 800195a:	0c9b      	lsrs	r3, r3, #18
 800195c:	3b01      	subs	r3, #1
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001960:	4b1f      	ldr	r3, [pc, #124]	@ (80019e0 <HAL_InitTick+0xcc>)
 8001962:	4a20      	ldr	r2, [pc, #128]	@ (80019e4 <HAL_InitTick+0xd0>)
 8001964:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001966:	4b1e      	ldr	r3, [pc, #120]	@ (80019e0 <HAL_InitTick+0xcc>)
 8001968:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800196c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800196e:	4a1c      	ldr	r2, [pc, #112]	@ (80019e0 <HAL_InitTick+0xcc>)
 8001970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001972:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001974:	4b1a      	ldr	r3, [pc, #104]	@ (80019e0 <HAL_InitTick+0xcc>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197a:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <HAL_InitTick+0xcc>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001980:	4817      	ldr	r0, [pc, #92]	@ (80019e0 <HAL_InitTick+0xcc>)
 8001982:	f003 ff29 	bl	80057d8 <HAL_TIM_Base_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800198c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001990:	2b00      	cmp	r3, #0
 8001992:	d11b      	bne.n	80019cc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001994:	4812      	ldr	r0, [pc, #72]	@ (80019e0 <HAL_InitTick+0xcc>)
 8001996:	f003 ff81 	bl	800589c <HAL_TIM_Base_Start_IT>
 800199a:	4603      	mov	r3, r0
 800199c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80019a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d111      	bne.n	80019cc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019a8:	2036      	movs	r0, #54	@ 0x36
 80019aa:	f002 fc21 	bl	80041f0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d808      	bhi.n	80019c6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80019b4:	2200      	movs	r2, #0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	2036      	movs	r0, #54	@ 0x36
 80019ba:	f002 fbff 	bl	80041bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019be:	4a0a      	ldr	r2, [pc, #40]	@ (80019e8 <HAL_InitTick+0xd4>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e002      	b.n	80019cc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80019cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3730      	adds	r7, #48	@ 0x30
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40021000 	.word	0x40021000
 80019dc:	431bde83 	.word	0x431bde83
 80019e0:	20000474 	.word	0x20000474
 80019e4:	40001000 	.word	0x40001000
 80019e8:	200001a8 	.word	0x200001a8

080019ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <NMI_Handler+0x4>

080019f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <HardFault_Handler+0x4>

080019fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <MemManage_Handler+0x4>

08001a04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <BusFault_Handler+0x4>

08001a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <UsageFault_Handler+0x4>

08001a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a50:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <USART2_IRQHandler+0x10>)
 8001a52:	f005 fd87 	bl	8007564 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000055c 	.word	0x2000055c

08001a60 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a64:	4802      	ldr	r0, [pc, #8]	@ (8001a70 <USART3_IRQHandler+0x10>)
 8001a66:	f005 fd7d 	bl	8007564 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200005ec 	.word	0x200005ec

08001a74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001a78:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a7c:	f002 fe20 	bl	80046c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a88:	4802      	ldr	r0, [pc, #8]	@ (8001a94 <TIM6_DAC_IRQHandler+0x10>)
 8001a8a:	f004 f985 	bl	8005d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000474 	.word	0x20000474

08001a98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return 1;
 8001a9c:	2301      	movs	r3, #1
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <_kill>:

int _kill(int pid, int sig)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ab2:	f009 fb99 	bl	800b1e8 <__errno>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2216      	movs	r2, #22
 8001aba:	601a      	str	r2, [r3, #0]
  return -1;
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <_exit>:

void _exit (int status)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ad0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ffe7 	bl	8001aa8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ada:	bf00      	nop
 8001adc:	e7fd      	b.n	8001ada <_exit+0x12>

08001ade <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	e00a      	b.n	8001b06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001af0:	f3af 8000 	nop.w
 8001af4:	4601      	mov	r1, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	60ba      	str	r2, [r7, #8]
 8001afc:	b2ca      	uxtb	r2, r1
 8001afe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	3301      	adds	r3, #1
 8001b04:	617b      	str	r3, [r7, #20]
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	dbf0      	blt.n	8001af0 <_read+0x12>
  }

  return len;
 8001b0e:	687b      	ldr	r3, [r7, #4]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	e009      	b.n	8001b3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	60ba      	str	r2, [r7, #8]
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fd0c 	bl	8001550 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	dbf1      	blt.n	8001b2a <_write+0x12>
  }
  return len;
 8001b46:	687b      	ldr	r3, [r7, #4]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <_close>:

int _close(int file)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b78:	605a      	str	r2, [r3, #4]
  return 0;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <_isatty>:

int _isatty(int file)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b90:	2301      	movs	r3, #1
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b085      	sub	sp, #20
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc0:	4a14      	ldr	r2, [pc, #80]	@ (8001c14 <_sbrk+0x5c>)
 8001bc2:	4b15      	ldr	r3, [pc, #84]	@ (8001c18 <_sbrk+0x60>)
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bcc:	4b13      	ldr	r3, [pc, #76]	@ (8001c1c <_sbrk+0x64>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d102      	bne.n	8001bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <_sbrk+0x64>)
 8001bd6:	4a12      	ldr	r2, [pc, #72]	@ (8001c20 <_sbrk+0x68>)
 8001bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bda:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <_sbrk+0x64>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d207      	bcs.n	8001bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be8:	f009 fafe 	bl	800b1e8 <__errno>
 8001bec:	4603      	mov	r3, r0
 8001bee:	220c      	movs	r2, #12
 8001bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bf6:	e009      	b.n	8001c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf8:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <_sbrk+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bfe:	4b07      	ldr	r3, [pc, #28]	@ (8001c1c <_sbrk+0x64>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	4a05      	ldr	r2, [pc, #20]	@ (8001c1c <_sbrk+0x64>)
 8001c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20020000 	.word	0x20020000
 8001c18:	00000400 	.word	0x00000400
 8001c1c:	200004c0 	.word	0x200004c0
 8001c20:	20000888 	.word	0x20000888

08001c24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c28:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <SystemInit+0x20>)
 8001c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c2e:	4a05      	ldr	r2, [pc, #20]	@ (8001c44 <SystemInit+0x20>)
 8001c30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b098      	sub	sp, #96	@ 0x60
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c4e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
 8001c68:	611a      	str	r2, [r3, #16]
 8001c6a:	615a      	str	r2, [r3, #20]
 8001c6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	2234      	movs	r2, #52	@ 0x34
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f009 f9f6 	bl	800b066 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8001da4 <MX_TIM1_Init+0x15c>)
 8001c7c:	4a4a      	ldr	r2, [pc, #296]	@ (8001da8 <MX_TIM1_Init+0x160>)
 8001c7e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c80:	4b48      	ldr	r3, [pc, #288]	@ (8001da4 <MX_TIM1_Init+0x15c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001c86:	4b47      	ldr	r3, [pc, #284]	@ (8001da4 <MX_TIM1_Init+0x15c>)
 8001c88:	2220      	movs	r2, #32
 8001c8a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4249;
 8001c8c:	4b45      	ldr	r3, [pc, #276]	@ (8001da4 <MX_TIM1_Init+0x15c>)
 8001c8e:	f241 0299 	movw	r2, #4249	@ 0x1099
 8001c92:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c94:	4b43      	ldr	r3, [pc, #268]	@ (8001da4 <MX_TIM1_Init+0x15c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c9a:	4b42      	ldr	r3, [pc, #264]	@ (8001da4 <MX_TIM1_Init+0x15c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca0:	4b40      	ldr	r3, [pc, #256]	@ (8001da4 <MX_TIM1_Init+0x15c>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ca6:	483f      	ldr	r0, [pc, #252]	@ (8001da4 <MX_TIM1_Init+0x15c>)
 8001ca8:	f003 fe70 	bl	800598c <HAL_TIM_PWM_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001cb2:	f7ff fe05 	bl	80018c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cc2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4836      	ldr	r0, [pc, #216]	@ (8001da4 <MX_TIM1_Init+0x15c>)
 8001cca:	f005 f95b 	bl	8006f84 <HAL_TIMEx_MasterConfigSynchronization>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001cd4:	f7ff fdf4 	bl	80018c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cd8:	2360      	movs	r3, #96	@ 0x60
 8001cda:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 3000;
 8001cdc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cf6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4829      	ldr	r0, [pc, #164]	@ (8001da4 <MX_TIM1_Init+0x15c>)
 8001d00:	f004 f9ca 	bl	8006098 <HAL_TIM_PWM_ConfigChannel>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001d0a:	f7ff fdd9 	bl	80018c0 <Error_Handler>
  }
  sConfigOC.Pulse = 5000;
 8001d0e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d14:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d18:	2204      	movs	r2, #4
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4821      	ldr	r0, [pc, #132]	@ (8001da4 <MX_TIM1_Init+0x15c>)
 8001d1e:	f004 f9bb 	bl	8006098 <HAL_TIM_PWM_ConfigChannel>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8001d28:	f7ff fdca 	bl	80018c0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d30:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d34:	2208      	movs	r2, #8
 8001d36:	4619      	mov	r1, r3
 8001d38:	481a      	ldr	r0, [pc, #104]	@ (8001da4 <MX_TIM1_Init+0x15c>)
 8001d3a:	f004 f9ad 	bl	8006098 <HAL_TIM_PWM_ConfigChannel>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001d44:	f7ff fdbc 	bl	80018c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 34;
 8001d54:	2322      	movs	r3, #34	@ 0x22
 8001d56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d66:	2300      	movs	r3, #0
 8001d68:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d72:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	4619      	mov	r1, r3
 8001d84:	4807      	ldr	r0, [pc, #28]	@ (8001da4 <MX_TIM1_Init+0x15c>)
 8001d86:	f005 f993 	bl	80070b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8001d90:	f7ff fd96 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d94:	4803      	ldr	r0, [pc, #12]	@ (8001da4 <MX_TIM1_Init+0x15c>)
 8001d96:	f000 f8d7 	bl	8001f48 <HAL_TIM_MspPostInit>

}
 8001d9a:	bf00      	nop
 8001d9c:	3760      	adds	r7, #96	@ 0x60
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200004c4 	.word	0x200004c4
 8001da8:	40012c00 	.word	0x40012c00

08001dac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001db2:	f107 0310 	add.w	r3, r7, #16
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dca:	4b1c      	ldr	r3, [pc, #112]	@ (8001e3c <MX_TIM3_Init+0x90>)
 8001dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8001e40 <MX_TIM3_Init+0x94>)
 8001dce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <MX_TIM3_Init+0x90>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <MX_TIM3_Init+0x90>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <MX_TIM3_Init+0x90>)
 8001dde:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001de2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de4:	4b15      	ldr	r3, [pc, #84]	@ (8001e3c <MX_TIM3_Init+0x90>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dea:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <MX_TIM3_Init+0x90>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001e00:	f107 0310 	add.w	r3, r7, #16
 8001e04:	4619      	mov	r1, r3
 8001e06:	480d      	ldr	r0, [pc, #52]	@ (8001e3c <MX_TIM3_Init+0x90>)
 8001e08:	f004 feed 	bl	8006be6 <HAL_TIMEx_HallSensor_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001e12:	f7ff fd55 	bl	80018c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001e16:	2350      	movs	r3, #80	@ 0x50
 8001e18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	4619      	mov	r1, r3
 8001e22:	4806      	ldr	r0, [pc, #24]	@ (8001e3c <MX_TIM3_Init+0x90>)
 8001e24:	f005 f8ae 	bl	8006f84 <HAL_TIMEx_MasterConfigSynchronization>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001e2e:	f7ff fd47 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e32:	bf00      	nop
 8001e34:	3720      	adds	r7, #32
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000510 	.word	0x20000510
 8001e40:	40000400 	.word	0x40000400

08001e44 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <HAL_TIM_PWM_MspInit+0x38>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d10b      	bne.n	8001e6e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e56:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e5a:	4a09      	ldr	r2, [pc, #36]	@ (8001e80 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e60:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e62:	4b07      	ldr	r3, [pc, #28]	@ (8001e80 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40012c00 	.word	0x40012c00
 8001e80:	40021000 	.word	0x40021000

08001e84 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	@ 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a26      	ldr	r2, [pc, #152]	@ (8001f3c <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d145      	bne.n	8001f32 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ea6:	4b26      	ldr	r3, [pc, #152]	@ (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eaa:	4a25      	ldr	r2, [pc, #148]	@ (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eb2:	4b23      	ldr	r3, [pc, #140]	@ (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	4b20      	ldr	r3, [pc, #128]	@ (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eca:	4b1d      	ldr	r3, [pc, #116]	@ (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eda:	4a19      	ldr	r2, [pc, #100]	@ (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ee2:	4b17      	ldr	r3, [pc, #92]	@ (8001f40 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001eee:	2350      	movs	r3, #80	@ 0x50
 8001ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001efe:	2302      	movs	r3, #2
 8001f00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	4619      	mov	r1, r3
 8001f08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f0c:	f002 fa3e 	bl	800438c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f22:	2302      	movs	r3, #2
 8001f24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4805      	ldr	r0, [pc, #20]	@ (8001f44 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001f2e:	f002 fa2d 	bl	800438c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f32:	bf00      	nop
 8001f34:	3728      	adds	r7, #40	@ 0x28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40000400 	.word	0x40000400
 8001f40:	40021000 	.word	0x40021000
 8001f44:	48000800 	.word	0x48000800

08001f48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	@ 0x28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a29      	ldr	r2, [pc, #164]	@ (800200c <HAL_TIM_MspPostInit+0xc4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d14b      	bne.n	8002002 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6a:	4b29      	ldr	r3, [pc, #164]	@ (8002010 <HAL_TIM_MspPostInit+0xc8>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6e:	4a28      	ldr	r2, [pc, #160]	@ (8002010 <HAL_TIM_MspPostInit+0xc8>)
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f76:	4b26      	ldr	r3, [pc, #152]	@ (8002010 <HAL_TIM_MspPostInit+0xc8>)
 8001f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	4b23      	ldr	r3, [pc, #140]	@ (8002010 <HAL_TIM_MspPostInit+0xc8>)
 8001f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f86:	4a22      	ldr	r2, [pc, #136]	@ (8002010 <HAL_TIM_MspPostInit+0xc8>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f8e:	4b20      	ldr	r3, [pc, #128]	@ (8002010 <HAL_TIM_MspPostInit+0xc8>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001f9a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001fac:	2306      	movs	r3, #6
 8001fae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4817      	ldr	r0, [pc, #92]	@ (8002014 <HAL_TIM_MspPostInit+0xcc>)
 8001fb8:	f002 f9e8 	bl	800438c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001fbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001fce:	2304      	movs	r3, #4
 8001fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001fd2:	f107 0314 	add.w	r3, r7, #20
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	480e      	ldr	r0, [pc, #56]	@ (8002014 <HAL_TIM_MspPostInit+0xcc>)
 8001fda:	f002 f9d7 	bl	800438c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001fde:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ff0:	2306      	movs	r3, #6
 8001ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ffe:	f002 f9c5 	bl	800438c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002002:	bf00      	nop
 8002004:	3728      	adds	r7, #40	@ 0x28
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40012c00 	.word	0x40012c00
 8002010:	40021000 	.word	0x40021000
 8002014:	48000400 	.word	0x48000400

08002018 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800201c:	4b22      	ldr	r3, [pc, #136]	@ (80020a8 <MX_USART2_UART_Init+0x90>)
 800201e:	4a23      	ldr	r2, [pc, #140]	@ (80020ac <MX_USART2_UART_Init+0x94>)
 8002020:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002022:	4b21      	ldr	r3, [pc, #132]	@ (80020a8 <MX_USART2_UART_Init+0x90>)
 8002024:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002028:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800202a:	4b1f      	ldr	r3, [pc, #124]	@ (80020a8 <MX_USART2_UART_Init+0x90>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002030:	4b1d      	ldr	r3, [pc, #116]	@ (80020a8 <MX_USART2_UART_Init+0x90>)
 8002032:	2200      	movs	r2, #0
 8002034:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002036:	4b1c      	ldr	r3, [pc, #112]	@ (80020a8 <MX_USART2_UART_Init+0x90>)
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800203c:	4b1a      	ldr	r3, [pc, #104]	@ (80020a8 <MX_USART2_UART_Init+0x90>)
 800203e:	220c      	movs	r2, #12
 8002040:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002042:	4b19      	ldr	r3, [pc, #100]	@ (80020a8 <MX_USART2_UART_Init+0x90>)
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002048:	4b17      	ldr	r3, [pc, #92]	@ (80020a8 <MX_USART2_UART_Init+0x90>)
 800204a:	2200      	movs	r2, #0
 800204c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800204e:	4b16      	ldr	r3, [pc, #88]	@ (80020a8 <MX_USART2_UART_Init+0x90>)
 8002050:	2200      	movs	r2, #0
 8002052:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002054:	4b14      	ldr	r3, [pc, #80]	@ (80020a8 <MX_USART2_UART_Init+0x90>)
 8002056:	2200      	movs	r2, #0
 8002058:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800205a:	4b13      	ldr	r3, [pc, #76]	@ (80020a8 <MX_USART2_UART_Init+0x90>)
 800205c:	2200      	movs	r2, #0
 800205e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002060:	4811      	ldr	r0, [pc, #68]	@ (80020a8 <MX_USART2_UART_Init+0x90>)
 8002062:	f005 f942 	bl	80072ea <HAL_UART_Init>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800206c:	f7ff fc28 	bl	80018c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002070:	2100      	movs	r1, #0
 8002072:	480d      	ldr	r0, [pc, #52]	@ (80020a8 <MX_USART2_UART_Init+0x90>)
 8002074:	f007 f8e5 	bl	8009242 <HAL_UARTEx_SetTxFifoThreshold>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800207e:	f7ff fc1f 	bl	80018c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002082:	2100      	movs	r1, #0
 8002084:	4808      	ldr	r0, [pc, #32]	@ (80020a8 <MX_USART2_UART_Init+0x90>)
 8002086:	f007 f91a 	bl	80092be <HAL_UARTEx_SetRxFifoThreshold>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002090:	f7ff fc16 	bl	80018c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002094:	4804      	ldr	r0, [pc, #16]	@ (80020a8 <MX_USART2_UART_Init+0x90>)
 8002096:	f007 f89b 	bl	80091d0 <HAL_UARTEx_DisableFifoMode>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80020a0:	f7ff fc0e 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	2000055c 	.word	0x2000055c
 80020ac:	40004400 	.word	0x40004400

080020b0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020b4:	4b22      	ldr	r3, [pc, #136]	@ (8002140 <MX_USART3_UART_Init+0x90>)
 80020b6:	4a23      	ldr	r2, [pc, #140]	@ (8002144 <MX_USART3_UART_Init+0x94>)
 80020b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020ba:	4b21      	ldr	r3, [pc, #132]	@ (8002140 <MX_USART3_UART_Init+0x90>)
 80020bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002140 <MX_USART3_UART_Init+0x90>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002140 <MX_USART3_UART_Init+0x90>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002140 <MX_USART3_UART_Init+0x90>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002140 <MX_USART3_UART_Init+0x90>)
 80020d6:	220c      	movs	r2, #12
 80020d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020da:	4b19      	ldr	r3, [pc, #100]	@ (8002140 <MX_USART3_UART_Init+0x90>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e0:	4b17      	ldr	r3, [pc, #92]	@ (8002140 <MX_USART3_UART_Init+0x90>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020e6:	4b16      	ldr	r3, [pc, #88]	@ (8002140 <MX_USART3_UART_Init+0x90>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020ec:	4b14      	ldr	r3, [pc, #80]	@ (8002140 <MX_USART3_UART_Init+0x90>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020f2:	4b13      	ldr	r3, [pc, #76]	@ (8002140 <MX_USART3_UART_Init+0x90>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020f8:	4811      	ldr	r0, [pc, #68]	@ (8002140 <MX_USART3_UART_Init+0x90>)
 80020fa:	f005 f8f6 	bl	80072ea <HAL_UART_Init>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002104:	f7ff fbdc 	bl	80018c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002108:	2100      	movs	r1, #0
 800210a:	480d      	ldr	r0, [pc, #52]	@ (8002140 <MX_USART3_UART_Init+0x90>)
 800210c:	f007 f899 	bl	8009242 <HAL_UARTEx_SetTxFifoThreshold>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002116:	f7ff fbd3 	bl	80018c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800211a:	2100      	movs	r1, #0
 800211c:	4808      	ldr	r0, [pc, #32]	@ (8002140 <MX_USART3_UART_Init+0x90>)
 800211e:	f007 f8ce 	bl	80092be <HAL_UARTEx_SetRxFifoThreshold>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002128:	f7ff fbca 	bl	80018c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800212c:	4804      	ldr	r0, [pc, #16]	@ (8002140 <MX_USART3_UART_Init+0x90>)
 800212e:	f007 f84f 	bl	80091d0 <HAL_UARTEx_DisableFifoMode>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002138:	f7ff fbc2 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}
 8002140:	200005ec 	.word	0x200005ec
 8002144:	40004800 	.word	0x40004800

08002148 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b0a0      	sub	sp, #128	@ 0x80
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002160:	f107 0318 	add.w	r3, r7, #24
 8002164:	2254      	movs	r2, #84	@ 0x54
 8002166:	2100      	movs	r1, #0
 8002168:	4618      	mov	r0, r3
 800216a:	f008 ff7c 	bl	800b066 <memset>
  if(uartHandle->Instance==USART2)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a45      	ldr	r2, [pc, #276]	@ (8002288 <HAL_UART_MspInit+0x140>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d13f      	bne.n	80021f8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002178:	2302      	movs	r3, #2
 800217a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800217c:	2300      	movs	r3, #0
 800217e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002180:	f107 0318 	add.w	r3, r7, #24
 8002184:	4618      	mov	r0, r3
 8002186:	f003 f8d9 	bl	800533c <HAL_RCCEx_PeriphCLKConfig>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002190:	f7ff fb96 	bl	80018c0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002194:	4b3d      	ldr	r3, [pc, #244]	@ (800228c <HAL_UART_MspInit+0x144>)
 8002196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002198:	4a3c      	ldr	r2, [pc, #240]	@ (800228c <HAL_UART_MspInit+0x144>)
 800219a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800219e:	6593      	str	r3, [r2, #88]	@ 0x58
 80021a0:	4b3a      	ldr	r3, [pc, #232]	@ (800228c <HAL_UART_MspInit+0x144>)
 80021a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ac:	4b37      	ldr	r3, [pc, #220]	@ (800228c <HAL_UART_MspInit+0x144>)
 80021ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b0:	4a36      	ldr	r2, [pc, #216]	@ (800228c <HAL_UART_MspInit+0x144>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021b8:	4b34      	ldr	r3, [pc, #208]	@ (800228c <HAL_UART_MspInit+0x144>)
 80021ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021c4:	230c      	movs	r3, #12
 80021c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c8:	2302      	movs	r3, #2
 80021ca:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d0:	2300      	movs	r3, #0
 80021d2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021d4:	2307      	movs	r3, #7
 80021d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80021dc:	4619      	mov	r1, r3
 80021de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021e2:	f002 f8d3 	bl	800438c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2100      	movs	r1, #0
 80021ea:	2026      	movs	r0, #38	@ 0x26
 80021ec:	f001 ffe6 	bl	80041bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021f0:	2026      	movs	r0, #38	@ 0x26
 80021f2:	f001 fffd 	bl	80041f0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021f6:	e043      	b.n	8002280 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a24      	ldr	r2, [pc, #144]	@ (8002290 <HAL_UART_MspInit+0x148>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d13e      	bne.n	8002280 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002202:	2304      	movs	r3, #4
 8002204:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002206:	2300      	movs	r3, #0
 8002208:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800220a:	f107 0318 	add.w	r3, r7, #24
 800220e:	4618      	mov	r0, r3
 8002210:	f003 f894 	bl	800533c <HAL_RCCEx_PeriphCLKConfig>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800221a:	f7ff fb51 	bl	80018c0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800221e:	4b1b      	ldr	r3, [pc, #108]	@ (800228c <HAL_UART_MspInit+0x144>)
 8002220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002222:	4a1a      	ldr	r2, [pc, #104]	@ (800228c <HAL_UART_MspInit+0x144>)
 8002224:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002228:	6593      	str	r3, [r2, #88]	@ 0x58
 800222a:	4b18      	ldr	r3, [pc, #96]	@ (800228c <HAL_UART_MspInit+0x144>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002236:	4b15      	ldr	r3, [pc, #84]	@ (800228c <HAL_UART_MspInit+0x144>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223a:	4a14      	ldr	r2, [pc, #80]	@ (800228c <HAL_UART_MspInit+0x144>)
 800223c:	f043 0304 	orr.w	r3, r3, #4
 8002240:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002242:	4b12      	ldr	r3, [pc, #72]	@ (800228c <HAL_UART_MspInit+0x144>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800224e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002252:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225c:	2300      	movs	r3, #0
 800225e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002260:	2307      	movs	r3, #7
 8002262:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002264:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002268:	4619      	mov	r1, r3
 800226a:	480a      	ldr	r0, [pc, #40]	@ (8002294 <HAL_UART_MspInit+0x14c>)
 800226c:	f002 f88e 	bl	800438c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002270:	2200      	movs	r2, #0
 8002272:	2100      	movs	r1, #0
 8002274:	2027      	movs	r0, #39	@ 0x27
 8002276:	f001 ffa1 	bl	80041bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800227a:	2027      	movs	r0, #39	@ 0x27
 800227c:	f001 ffb8 	bl	80041f0 <HAL_NVIC_EnableIRQ>
}
 8002280:	bf00      	nop
 8002282:	3780      	adds	r7, #128	@ 0x80
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40004400 	.word	0x40004400
 800228c:	40021000 	.word	0x40021000
 8002290:	40004800 	.word	0x40004800
 8002294:	48000800 	.word	0x48000800

08002298 <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 800229c:	2224      	movs	r2, #36	@ 0x24
 800229e:	2100      	movs	r1, #0
 80022a0:	4816      	ldr	r0, [pc, #88]	@ (80022fc <Shell_Init+0x64>)
 80022a2:	f008 fee0 	bl	800b066 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 80022a6:	2240      	movs	r2, #64	@ 0x40
 80022a8:	2100      	movs	r1, #0
 80022aa:	4815      	ldr	r0, [pc, #84]	@ (8002300 <Shell_Init+0x68>)
 80022ac:	f008 fedb 	bl	800b066 <memset>
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 80022b0:	4b14      	ldr	r3, [pc, #80]	@ (8002304 <Shell_Init+0x6c>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 80022b6:	2240      	movs	r2, #64	@ 0x40
 80022b8:	2100      	movs	r1, #0
 80022ba:	4813      	ldr	r0, [pc, #76]	@ (8002308 <Shell_Init+0x70>)
 80022bc:	f008 fed3 	bl	800b066 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80022c0:	2201      	movs	r2, #1
 80022c2:	4910      	ldr	r1, [pc, #64]	@ (8002304 <Shell_Init+0x6c>)
 80022c4:	4811      	ldr	r0, [pc, #68]	@ (800230c <Shell_Init+0x74>)
 80022c6:	f005 f8f7 	bl	80074b8 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 80022ca:	4811      	ldr	r0, [pc, #68]	@ (8002310 <Shell_Init+0x78>)
 80022cc:	f7fe f808 	bl	80002e0 <strlen>
 80022d0:	4603      	mov	r3, r0
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022d8:	490d      	ldr	r1, [pc, #52]	@ (8002310 <Shell_Init+0x78>)
 80022da:	480c      	ldr	r0, [pc, #48]	@ (800230c <Shell_Init+0x74>)
 80022dc:	f005 f855 	bl	800738a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 80022e0:	480c      	ldr	r0, [pc, #48]	@ (8002314 <Shell_Init+0x7c>)
 80022e2:	f7fd fffd 	bl	80002e0 <strlen>
 80022e6:	4603      	mov	r3, r0
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022ee:	4909      	ldr	r1, [pc, #36]	@ (8002314 <Shell_Init+0x7c>)
 80022f0:	4806      	ldr	r0, [pc, #24]	@ (800230c <Shell_Init+0x74>)
 80022f2:	f005 f84a 	bl	800738a <HAL_UART_Transmit>
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000708 	.word	0x20000708
 8002300:	200006c4 	.word	0x200006c4
 8002304:	20000680 	.word	0x20000680
 8002308:	20000684 	.word	0x20000684
 800230c:	2000055c 	.word	0x2000055c
 8002310:	20000020 	.word	0x20000020
 8002314:	20000004 	.word	0x20000004

08002318 <Shell_Loop>:

void Shell_Loop(void){
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 800231c:	4b80      	ldr	r3, [pc, #512]	@ (8002520 <Shell_Loop+0x208>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d05b      	beq.n	80023dc <Shell_Loop+0xc4>
		switch(uartRxBuffer[0]){
 8002324:	4b7f      	ldr	r3, [pc, #508]	@ (8002524 <Shell_Loop+0x20c>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b08      	cmp	r3, #8
 800232a:	d034      	beq.n	8002396 <Shell_Loop+0x7e>
 800232c:	2b0d      	cmp	r3, #13
 800232e:	d142      	bne.n	80023b6 <Shell_Loop+0x9e>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8002330:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002334:	2203      	movs	r2, #3
 8002336:	497c      	ldr	r1, [pc, #496]	@ (8002528 <Shell_Loop+0x210>)
 8002338:	487c      	ldr	r0, [pc, #496]	@ (800252c <Shell_Loop+0x214>)
 800233a:	f005 f826 	bl	800738a <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 800233e:	4b7c      	ldr	r3, [pc, #496]	@ (8002530 <Shell_Loop+0x218>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a7c      	ldr	r2, [pc, #496]	@ (8002534 <Shell_Loop+0x21c>)
 8002344:	2100      	movs	r1, #0
 8002346:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8002348:	4b7b      	ldr	r3, [pc, #492]	@ (8002538 <Shell_Loop+0x220>)
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 800234e:	497b      	ldr	r1, [pc, #492]	@ (800253c <Shell_Loop+0x224>)
 8002350:	4878      	ldr	r0, [pc, #480]	@ (8002534 <Shell_Loop+0x21c>)
 8002352:	f008 fea3 	bl	800b09c <strtok>
 8002356:	4603      	mov	r3, r0
 8002358:	4a79      	ldr	r2, [pc, #484]	@ (8002540 <Shell_Loop+0x228>)
 800235a:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800235c:	e010      	b.n	8002380 <Shell_Loop+0x68>
				argv[argc++] = token;
 800235e:	4b76      	ldr	r3, [pc, #472]	@ (8002538 <Shell_Loop+0x220>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	4974      	ldr	r1, [pc, #464]	@ (8002538 <Shell_Loop+0x220>)
 8002366:	600a      	str	r2, [r1, #0]
 8002368:	4a75      	ldr	r2, [pc, #468]	@ (8002540 <Shell_Loop+0x228>)
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	4975      	ldr	r1, [pc, #468]	@ (8002544 <Shell_Loop+0x22c>)
 800236e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8002372:	4972      	ldr	r1, [pc, #456]	@ (800253c <Shell_Loop+0x224>)
 8002374:	2000      	movs	r0, #0
 8002376:	f008 fe91 	bl	800b09c <strtok>
 800237a:	4603      	mov	r3, r0
 800237c:	4a70      	ldr	r2, [pc, #448]	@ (8002540 <Shell_Loop+0x228>)
 800237e:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8002380:	4b6f      	ldr	r3, [pc, #444]	@ (8002540 <Shell_Loop+0x228>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1ea      	bne.n	800235e <Shell_Loop+0x46>
			}
			idx_cmd = 0;
 8002388:	4b69      	ldr	r3, [pc, #420]	@ (8002530 <Shell_Loop+0x218>)
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 800238e:	4b6e      	ldr	r3, [pc, #440]	@ (8002548 <Shell_Loop+0x230>)
 8002390:	2201      	movs	r2, #1
 8002392:	601a      	str	r2, [r3, #0]
			break;
 8002394:	e01f      	b.n	80023d6 <Shell_Loop+0xbe>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8002396:	4b66      	ldr	r3, [pc, #408]	@ (8002530 <Shell_Loop+0x218>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	1e5a      	subs	r2, r3, #1
 800239c:	4964      	ldr	r1, [pc, #400]	@ (8002530 <Shell_Loop+0x218>)
 800239e:	600a      	str	r2, [r1, #0]
 80023a0:	4a64      	ldr	r2, [pc, #400]	@ (8002534 <Shell_Loop+0x21c>)
 80023a2:	2100      	movs	r1, #0
 80023a4:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023aa:	2204      	movs	r2, #4
 80023ac:	4967      	ldr	r1, [pc, #412]	@ (800254c <Shell_Loop+0x234>)
 80023ae:	485f      	ldr	r0, [pc, #380]	@ (800252c <Shell_Loop+0x214>)
 80023b0:	f004 ffeb 	bl	800738a <HAL_UART_Transmit>
			break;
 80023b4:	e00f      	b.n	80023d6 <Shell_Loop+0xbe>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80023b6:	4b5e      	ldr	r3, [pc, #376]	@ (8002530 <Shell_Loop+0x218>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	495c      	ldr	r1, [pc, #368]	@ (8002530 <Shell_Loop+0x218>)
 80023be:	600a      	str	r2, [r1, #0]
 80023c0:	4a58      	ldr	r2, [pc, #352]	@ (8002524 <Shell_Loop+0x20c>)
 80023c2:	7811      	ldrb	r1, [r2, #0]
 80023c4:	4a5b      	ldr	r2, [pc, #364]	@ (8002534 <Shell_Loop+0x21c>)
 80023c6:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80023c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023cc:	2201      	movs	r2, #1
 80023ce:	4955      	ldr	r1, [pc, #340]	@ (8002524 <Shell_Loop+0x20c>)
 80023d0:	4856      	ldr	r0, [pc, #344]	@ (800252c <Shell_Loop+0x214>)
 80023d2:	f004 ffda 	bl	800738a <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 80023d6:	4b52      	ldr	r3, [pc, #328]	@ (8002520 <Shell_Loop+0x208>)
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 80023dc:	4b5a      	ldr	r3, [pc, #360]	@ (8002548 <Shell_Loop+0x230>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 809b 	beq.w	800251c <Shell_Loop+0x204>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 80023e6:	4b57      	ldr	r3, [pc, #348]	@ (8002544 <Shell_Loop+0x22c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4959      	ldr	r1, [pc, #356]	@ (8002550 <Shell_Loop+0x238>)
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fd ff17 	bl	8000220 <strcmp>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d107      	bne.n	8002408 <Shell_Loop+0xf0>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 80023f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023fc:	221a      	movs	r2, #26
 80023fe:	4955      	ldr	r1, [pc, #340]	@ (8002554 <Shell_Loop+0x23c>)
 8002400:	484a      	ldr	r0, [pc, #296]	@ (800252c <Shell_Loop+0x214>)
 8002402:	f004 ffc2 	bl	800738a <HAL_UART_Transmit>
 8002406:	e07f      	b.n	8002508 <Shell_Loop+0x1f0>
		}
		else if(strcmp(argv[0],"help")==0){
 8002408:	4b4e      	ldr	r3, [pc, #312]	@ (8002544 <Shell_Loop+0x22c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4952      	ldr	r1, [pc, #328]	@ (8002558 <Shell_Loop+0x240>)
 800240e:	4618      	mov	r0, r3
 8002410:	f7fd ff06 	bl	8000220 <strcmp>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10b      	bne.n	8002432 <Shell_Loop+0x11a>
			HAL_UART_Transmit(&huart2, helpMessage, strlen((char *)helpMessage), HAL_MAX_DELAY);
 800241a:	4850      	ldr	r0, [pc, #320]	@ (800255c <Shell_Loop+0x244>)
 800241c:	f7fd ff60 	bl	80002e0 <strlen>
 8002420:	4603      	mov	r3, r0
 8002422:	b29a      	uxth	r2, r3
 8002424:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002428:	494c      	ldr	r1, [pc, #304]	@ (800255c <Shell_Loop+0x244>)
 800242a:	4840      	ldr	r0, [pc, #256]	@ (800252c <Shell_Loop+0x214>)
 800242c:	f004 ffad 	bl	800738a <HAL_UART_Transmit>
 8002430:	e06a      	b.n	8002508 <Shell_Loop+0x1f0>
		}
		else if(strcmp(argv[0],"ratio")==0){
 8002432:	4b44      	ldr	r3, [pc, #272]	@ (8002544 <Shell_Loop+0x22c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	494a      	ldr	r1, [pc, #296]	@ (8002560 <Shell_Loop+0x248>)
 8002438:	4618      	mov	r0, r3
 800243a:	f7fd fef1 	bl	8000220 <strcmp>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d113      	bne.n	800246c <Shell_Loop+0x154>
			if (argc > 1) {
 8002444:	4b3c      	ldr	r3, [pc, #240]	@ (8002538 <Shell_Loop+0x220>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b01      	cmp	r3, #1
 800244a:	dd5d      	ble.n	8002508 <Shell_Loop+0x1f0>
				set_PWM_ratio(atof(argv[1]));
 800244c:	4b3d      	ldr	r3, [pc, #244]	@ (8002544 <Shell_Loop+0x22c>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	4618      	mov	r0, r3
 8002452:	f006 ffc1 	bl	80093d8 <atof>
 8002456:	eeb0 7a40 	vmov.f32	s14, s0
 800245a:	eef0 7a60 	vmov.f32	s15, s1
 800245e:	eeb0 0a47 	vmov.f32	s0, s14
 8002462:	eef0 0a67 	vmov.f32	s1, s15
 8002466:	f7ff f8d3 	bl	8001610 <set_PWM_ratio>
 800246a:	e04d      	b.n	8002508 <Shell_Loop+0x1f0>
			}
		}
		else if(strcmp(argv[0],"speed")==0){
 800246c:	4b35      	ldr	r3, [pc, #212]	@ (8002544 <Shell_Loop+0x22c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	493c      	ldr	r1, [pc, #240]	@ (8002564 <Shell_Loop+0x24c>)
 8002472:	4618      	mov	r0, r3
 8002474:	f7fd fed4 	bl	8000220 <strcmp>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10d      	bne.n	800249a <Shell_Loop+0x182>
			if (argc > 1) {
 800247e:	4b2e      	ldr	r3, [pc, #184]	@ (8002538 <Shell_Loop+0x220>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b01      	cmp	r3, #1
 8002484:	dd40      	ble.n	8002508 <Shell_Loop+0x1f0>
				set_PWM_speed(atoi(argv[1]));
 8002486:	4b2f      	ldr	r3, [pc, #188]	@ (8002544 <Shell_Loop+0x22c>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4618      	mov	r0, r3
 800248c:	f006 ffa7 	bl	80093de <atoi>
 8002490:	4603      	mov	r3, r0
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff f8f6 	bl	8001684 <set_PWM_speed>
 8002498:	e036      	b.n	8002508 <Shell_Loop+0x1f0>
			}
		}
		else if(strcmp(argv[0],"start")==0){
 800249a:	4b2a      	ldr	r3, [pc, #168]	@ (8002544 <Shell_Loop+0x22c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4932      	ldr	r1, [pc, #200]	@ (8002568 <Shell_Loop+0x250>)
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fd febd 	bl	8000220 <strcmp>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d102      	bne.n	80024b2 <Shell_Loop+0x19a>
			start_PWM();
 80024ac:	f7ff f900 	bl	80016b0 <start_PWM>
 80024b0:	e02a      	b.n	8002508 <Shell_Loop+0x1f0>
		}
		else if(strcmp(argv[0],"stop")==0){
 80024b2:	4b24      	ldr	r3, [pc, #144]	@ (8002544 <Shell_Loop+0x22c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	492d      	ldr	r1, [pc, #180]	@ (800256c <Shell_Loop+0x254>)
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fd feb1 	bl	8000220 <strcmp>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <Shell_Loop+0x1b2>
			stop_PWM();
 80024c4:	f7ff f918 	bl	80016f8 <stop_PWM>
 80024c8:	e01e      	b.n	8002508 <Shell_Loop+0x1f0>
		}
		else if(strcmp(argv[0],"reset")==0){
 80024ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002544 <Shell_Loop+0x22c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4928      	ldr	r1, [pc, #160]	@ (8002570 <Shell_Loop+0x258>)
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fd fea5 	bl	8000220 <strcmp>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d102      	bne.n	80024e2 <Shell_Loop+0x1ca>
			reset_inverter();
 80024dc:	f7ff f922 	bl	8001724 <reset_inverter>
 80024e0:	e012      	b.n	8002508 <Shell_Loop+0x1f0>
		}
		else if(strcmp(argv[0],"current")==0){
 80024e2:	4b18      	ldr	r3, [pc, #96]	@ (8002544 <Shell_Loop+0x22c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4923      	ldr	r1, [pc, #140]	@ (8002574 <Shell_Loop+0x25c>)
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fd fe99 	bl	8000220 <strcmp>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <Shell_Loop+0x1e2>
			read_current();
 80024f4:	f7ff f91c 	bl	8001730 <read_current>
 80024f8:	e006      	b.n	8002508 <Shell_Loop+0x1f0>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80024fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024fe:	2214      	movs	r2, #20
 8002500:	491d      	ldr	r1, [pc, #116]	@ (8002578 <Shell_Loop+0x260>)
 8002502:	480a      	ldr	r0, [pc, #40]	@ (800252c <Shell_Loop+0x214>)
 8002504:	f004 ff41 	bl	800738a <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002508:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800250c:	221c      	movs	r2, #28
 800250e:	491b      	ldr	r1, [pc, #108]	@ (800257c <Shell_Loop+0x264>)
 8002510:	4806      	ldr	r0, [pc, #24]	@ (800252c <Shell_Loop+0x214>)
 8002512:	f004 ff3a 	bl	800738a <HAL_UART_Transmit>
		newCmdReady = 0;
 8002516:	4b0c      	ldr	r3, [pc, #48]	@ (8002548 <Shell_Loop+0x230>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
	}
}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}
 8002520:	2000067c 	.word	0x2000067c
 8002524:	20000680 	.word	0x20000680
 8002528:	20000088 	.word	0x20000088
 800252c:	2000055c 	.word	0x2000055c
 8002530:	20000704 	.word	0x20000704
 8002534:	200006c4 	.word	0x200006c4
 8002538:	2000072c 	.word	0x2000072c
 800253c:	0800dc0c 	.word	0x0800dc0c
 8002540:	20000730 	.word	0x20000730
 8002544:	20000708 	.word	0x20000708
 8002548:	20000734 	.word	0x20000734
 800254c:	2000008c 	.word	0x2000008c
 8002550:	0800dc10 	.word	0x0800dc10
 8002554:	200000a4 	.word	0x200000a4
 8002558:	0800dc20 	.word	0x0800dc20
 800255c:	200000c0 	.word	0x200000c0
 8002560:	0800dc28 	.word	0x0800dc28
 8002564:	0800dc30 	.word	0x0800dc30
 8002568:	0800dc38 	.word	0x0800dc38
 800256c:	0800dc40 	.word	0x0800dc40
 8002570:	0800dc48 	.word	0x0800dc48
 8002574:	0800dc50 	.word	0x0800dc50
 8002578:	20000090 	.word	0x20000090
 800257c:	20000004 	.word	0x20000004

08002580 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8002588:	4b05      	ldr	r3, [pc, #20]	@ (80025a0 <HAL_UART_RxCpltCallback+0x20>)
 800258a:	2201      	movs	r2, #1
 800258c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800258e:	2201      	movs	r2, #1
 8002590:	4904      	ldr	r1, [pc, #16]	@ (80025a4 <HAL_UART_RxCpltCallback+0x24>)
 8002592:	4805      	ldr	r0, [pc, #20]	@ (80025a8 <HAL_UART_RxCpltCallback+0x28>)
 8002594:	f004 ff90 	bl	80074b8 <HAL_UART_Receive_IT>
}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	2000067c 	.word	0x2000067c
 80025a4:	20000680 	.word	0x20000680
 80025a8:	2000055c 	.word	0x2000055c

080025ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025ac:	480d      	ldr	r0, [pc, #52]	@ (80025e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025b0:	480d      	ldr	r0, [pc, #52]	@ (80025e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80025b2:	490e      	ldr	r1, [pc, #56]	@ (80025ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80025b4:	4a0e      	ldr	r2, [pc, #56]	@ (80025f0 <LoopForever+0xe>)
  movs r3, #0
 80025b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80025b8:	e002      	b.n	80025c0 <LoopCopyDataInit>

080025ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025be:	3304      	adds	r3, #4

080025c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c4:	d3f9      	bcc.n	80025ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c6:	4a0b      	ldr	r2, [pc, #44]	@ (80025f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025c8:	4c0b      	ldr	r4, [pc, #44]	@ (80025f8 <LoopForever+0x16>)
  movs r3, #0
 80025ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025cc:	e001      	b.n	80025d2 <LoopFillZerobss>

080025ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d0:	3204      	adds	r2, #4

080025d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d4:	d3fb      	bcc.n	80025ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025d6:	f7ff fb25 	bl	8001c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025da:	f008 fe0b 	bl	800b1f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025de:	f7ff f8f1 	bl	80017c4 <main>

080025e2 <LoopForever>:

LoopForever:
    b LoopForever
 80025e2:	e7fe      	b.n	80025e2 <LoopForever>
  ldr   r0, =_estack
 80025e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025ec:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 80025f0:	0800e134 	.word	0x0800e134
  ldr r2, =_sbss
 80025f4:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 80025f8:	20000888 	.word	0x20000888

080025fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025fc:	e7fe      	b.n	80025fc <ADC1_2_IRQHandler>

080025fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002608:	2003      	movs	r0, #3
 800260a:	f001 fdcc 	bl	80041a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800260e:	200f      	movs	r0, #15
 8002610:	f7ff f980 	bl	8001914 <HAL_InitTick>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	71fb      	strb	r3, [r7, #7]
 800261e:	e001      	b.n	8002624 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002620:	f7ff f954 	bl	80018cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002624:	79fb      	ldrb	r3, [r7, #7]

}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002634:	4b05      	ldr	r3, [pc, #20]	@ (800264c <HAL_IncTick+0x1c>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b05      	ldr	r3, [pc, #20]	@ (8002650 <HAL_IncTick+0x20>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4413      	add	r3, r2
 800263e:	4a03      	ldr	r2, [pc, #12]	@ (800264c <HAL_IncTick+0x1c>)
 8002640:	6013      	str	r3, [r2, #0]
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	20000738 	.word	0x20000738
 8002650:	200001ac 	.word	0x200001ac

08002654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return uwTick;
 8002658:	4b03      	ldr	r3, [pc, #12]	@ (8002668 <HAL_GetTick+0x14>)
 800265a:	681b      	ldr	r3, [r3, #0]
}
 800265c:	4618      	mov	r0, r3
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	20000738 	.word	0x20000738

0800266c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002674:	f7ff ffee 	bl	8002654 <HAL_GetTick>
 8002678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002684:	d004      	beq.n	8002690 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002686:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <HAL_Delay+0x40>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4413      	add	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002690:	bf00      	nop
 8002692:	f7ff ffdf 	bl	8002654 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d8f7      	bhi.n	8002692 <HAL_Delay+0x26>
  {
  }
}
 80026a2:	bf00      	nop
 80026a4:	bf00      	nop
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	200001ac 	.word	0x200001ac

080026b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	609a      	str	r2, [r3, #8]
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	609a      	str	r2, [r3, #8]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002718:	b480      	push	{r7}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	3360      	adds	r3, #96	@ 0x60
 800272a:	461a      	mov	r2, r3
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b08      	ldr	r3, [pc, #32]	@ (800275c <LL_ADC_SetOffset+0x44>)
 800273a:	4013      	ands	r3, r2
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	4313      	orrs	r3, r2
 8002748:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002750:	bf00      	nop
 8002752:	371c      	adds	r7, #28
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	03fff000 	.word	0x03fff000

08002760 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3360      	adds	r3, #96	@ 0x60
 800276e:	461a      	mov	r2, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002780:	4618      	mov	r0, r3
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3360      	adds	r3, #96	@ 0x60
 800279c:	461a      	mov	r2, r3
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	431a      	orrs	r2, r3
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027b6:	bf00      	nop
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b087      	sub	sp, #28
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	3360      	adds	r3, #96	@ 0x60
 80027d2:	461a      	mov	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80027ec:	bf00      	nop
 80027ee:	371c      	adds	r7, #28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3360      	adds	r3, #96	@ 0x60
 8002808:	461a      	mov	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	431a      	orrs	r2, r3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002822:	bf00      	nop
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	615a      	str	r2, [r3, #20]
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800287a:	b480      	push	{r7}
 800287c:	b087      	sub	sp, #28
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	3330      	adds	r3, #48	@ 0x30
 800288a:	461a      	mov	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	4413      	add	r3, r2
 8002898:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	211f      	movs	r1, #31
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	401a      	ands	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	0e9b      	lsrs	r3, r3, #26
 80028b2:	f003 011f 	and.w	r1, r3, #31
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	fa01 f303 	lsl.w	r3, r1, r3
 80028c0:	431a      	orrs	r2, r3
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028c6:	bf00      	nop
 80028c8:	371c      	adds	r7, #28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b087      	sub	sp, #28
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	3314      	adds	r3, #20
 80028e2:	461a      	mov	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	0e5b      	lsrs	r3, r3, #25
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	4413      	add	r3, r2
 80028f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	0d1b      	lsrs	r3, r3, #20
 80028fa:	f003 031f 	and.w	r3, r3, #31
 80028fe:	2107      	movs	r1, #7
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	401a      	ands	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	0d1b      	lsrs	r3, r3, #20
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	fa01 f303 	lsl.w	r3, r1, r3
 8002916:	431a      	orrs	r2, r3
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800291c:	bf00      	nop
 800291e:	371c      	adds	r7, #28
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a0f      	ldr	r2, [pc, #60]	@ (8002974 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d10a      	bne.n	8002952 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002948:	431a      	orrs	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002950:	e00a      	b.n	8002968 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295e:	43db      	mvns	r3, r3
 8002960:	401a      	ands	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	407f0000 	.word	0x407f0000

08002978 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 031f 	and.w	r3, r3, #31
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80029c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6093      	str	r3, [r2, #8]
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029e8:	d101      	bne.n	80029ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002a0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a10:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a38:	d101      	bne.n	8002a3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a60:	f043 0201 	orr.w	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a88:	f043 0202 	orr.w	r2, r3, #2
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <LL_ADC_IsEnabled+0x18>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <LL_ADC_IsEnabled+0x1a>
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d101      	bne.n	8002ada <LL_ADC_IsDisableOngoing+0x18>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <LL_ADC_IsDisableOngoing+0x1a>
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002af8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002afc:	f043 0204 	orr.w	r2, r3, #4
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d101      	bne.n	8002b28 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d101      	bne.n	8002b4e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b089      	sub	sp, #36	@ 0x24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e1af      	b.n	8002ed6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d109      	bne.n	8002b98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7fe fb43 	bl	8001210 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ff19 	bl	80029d4 <LL_ADC_IsDeepPowerDownEnabled>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d004      	beq.n	8002bb2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff feff 	bl	80029b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff ff34 	bl	8002a24 <LL_ADC_IsInternalRegulatorEnabled>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d115      	bne.n	8002bee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff ff18 	bl	80029fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bcc:	4b9f      	ldr	r3, [pc, #636]	@ (8002e4c <HAL_ADC_Init+0x2f0>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	099b      	lsrs	r3, r3, #6
 8002bd2:	4a9f      	ldr	r2, [pc, #636]	@ (8002e50 <HAL_ADC_Init+0x2f4>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	099b      	lsrs	r3, r3, #6
 8002bda:	3301      	adds	r3, #1
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002be0:	e002      	b.n	8002be8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f9      	bne.n	8002be2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff ff16 	bl	8002a24 <LL_ADC_IsInternalRegulatorEnabled>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10d      	bne.n	8002c1a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c02:	f043 0210 	orr.w	r2, r3, #16
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c0e:	f043 0201 	orr.w	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff ff76 	bl	8002b10 <LL_ADC_REG_IsConversionOngoing>
 8002c24:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2a:	f003 0310 	and.w	r3, r3, #16
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f040 8148 	bne.w	8002ec4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f040 8144 	bne.w	8002ec4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c40:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002c44:	f043 0202 	orr.w	r2, r3, #2
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff ff23 	bl	8002a9c <LL_ADC_IsEnabled>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d141      	bne.n	8002ce0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c64:	d004      	beq.n	8002c70 <HAL_ADC_Init+0x114>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a7a      	ldr	r2, [pc, #488]	@ (8002e54 <HAL_ADC_Init+0x2f8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d10f      	bne.n	8002c90 <HAL_ADC_Init+0x134>
 8002c70:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c74:	f7ff ff12 	bl	8002a9c <LL_ADC_IsEnabled>
 8002c78:	4604      	mov	r4, r0
 8002c7a:	4876      	ldr	r0, [pc, #472]	@ (8002e54 <HAL_ADC_Init+0x2f8>)
 8002c7c:	f7ff ff0e 	bl	8002a9c <LL_ADC_IsEnabled>
 8002c80:	4603      	mov	r3, r0
 8002c82:	4323      	orrs	r3, r4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf0c      	ite	eq
 8002c88:	2301      	moveq	r3, #1
 8002c8a:	2300      	movne	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	e012      	b.n	8002cb6 <HAL_ADC_Init+0x15a>
 8002c90:	4871      	ldr	r0, [pc, #452]	@ (8002e58 <HAL_ADC_Init+0x2fc>)
 8002c92:	f7ff ff03 	bl	8002a9c <LL_ADC_IsEnabled>
 8002c96:	4604      	mov	r4, r0
 8002c98:	4870      	ldr	r0, [pc, #448]	@ (8002e5c <HAL_ADC_Init+0x300>)
 8002c9a:	f7ff feff 	bl	8002a9c <LL_ADC_IsEnabled>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	431c      	orrs	r4, r3
 8002ca2:	486f      	ldr	r0, [pc, #444]	@ (8002e60 <HAL_ADC_Init+0x304>)
 8002ca4:	f7ff fefa 	bl	8002a9c <LL_ADC_IsEnabled>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4323      	orrs	r3, r4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bf0c      	ite	eq
 8002cb0:	2301      	moveq	r3, #1
 8002cb2:	2300      	movne	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d012      	beq.n	8002ce0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cc2:	d004      	beq.n	8002cce <HAL_ADC_Init+0x172>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a62      	ldr	r2, [pc, #392]	@ (8002e54 <HAL_ADC_Init+0x2f8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADC_Init+0x176>
 8002cce:	4a65      	ldr	r2, [pc, #404]	@ (8002e64 <HAL_ADC_Init+0x308>)
 8002cd0:	e000      	b.n	8002cd4 <HAL_ADC_Init+0x178>
 8002cd2:	4a65      	ldr	r2, [pc, #404]	@ (8002e68 <HAL_ADC_Init+0x30c>)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4610      	mov	r0, r2
 8002cdc:	f7ff fce8 	bl	80026b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	7f5b      	ldrb	r3, [r3, #29]
 8002ce4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cea:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002cf0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002cf6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002cfe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d106      	bne.n	8002d1c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d12:	3b01      	subs	r3, #1
 8002d14:	045b      	lsls	r3, r3, #17
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d009      	beq.n	8002d38 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d28:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d30:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	4b4b      	ldr	r3, [pc, #300]	@ (8002e6c <HAL_ADC_Init+0x310>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	69b9      	ldr	r1, [r7, #24]
 8002d48:	430b      	orrs	r3, r1
 8002d4a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff fed2 	bl	8002b10 <LL_ADC_REG_IsConversionOngoing>
 8002d6c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fedf 	bl	8002b36 <LL_ADC_INJ_IsConversionOngoing>
 8002d78:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d17f      	bne.n	8002e80 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d17c      	bne.n	8002e80 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d8a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d92:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002da2:	f023 0302 	bic.w	r3, r3, #2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	69b9      	ldr	r1, [r7, #24]
 8002dac:	430b      	orrs	r3, r1
 8002dae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d017      	beq.n	8002de8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002dc6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002dd0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002dd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6911      	ldr	r1, [r2, #16]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	430b      	orrs	r3, r1
 8002de2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002de6:	e013      	b.n	8002e10 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	691a      	ldr	r2, [r3, #16]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002df6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e0c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d12a      	bne.n	8002e70 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002e24:	f023 0304 	bic.w	r3, r3, #4
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e30:	4311      	orrs	r1, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002e36:	4311      	orrs	r1, r2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0201 	orr.w	r2, r2, #1
 8002e48:	611a      	str	r2, [r3, #16]
 8002e4a:	e019      	b.n	8002e80 <HAL_ADC_Init+0x324>
 8002e4c:	20000000 	.word	0x20000000
 8002e50:	053e2d63 	.word	0x053e2d63
 8002e54:	50000100 	.word	0x50000100
 8002e58:	50000400 	.word	0x50000400
 8002e5c:	50000500 	.word	0x50000500
 8002e60:	50000600 	.word	0x50000600
 8002e64:	50000300 	.word	0x50000300
 8002e68:	50000700 	.word	0x50000700
 8002e6c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0201 	bic.w	r2, r2, #1
 8002e7e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d10c      	bne.n	8002ea2 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8e:	f023 010f 	bic.w	r1, r3, #15
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	1e5a      	subs	r2, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ea0:	e007      	b.n	8002eb2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 020f 	bic.w	r2, r2, #15
 8002eb0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb6:	f023 0303 	bic.w	r3, r3, #3
 8002eba:	f043 0201 	orr.w	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ec2:	e007      	b.n	8002ed4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec8:	f043 0210 	orr.w	r2, r3, #16
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ed4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3724      	adds	r7, #36	@ 0x24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd90      	pop	{r4, r7, pc}
 8002ede:	bf00      	nop

08002ee0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ef0:	d004      	beq.n	8002efc <HAL_ADC_Start+0x1c>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a67      	ldr	r2, [pc, #412]	@ (8003094 <HAL_ADC_Start+0x1b4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_Start+0x20>
 8002efc:	4b66      	ldr	r3, [pc, #408]	@ (8003098 <HAL_ADC_Start+0x1b8>)
 8002efe:	e000      	b.n	8002f02 <HAL_ADC_Start+0x22>
 8002f00:	4b66      	ldr	r3, [pc, #408]	@ (800309c <HAL_ADC_Start+0x1bc>)
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff fd38 	bl	8002978 <LL_ADC_GetMultimode>
 8002f08:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fdfe 	bl	8002b10 <LL_ADC_REG_IsConversionOngoing>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f040 80b4 	bne.w	8003084 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_ADC_Start+0x4a>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e0af      	b.n	800308a <HAL_ADC_Start+0x1aa>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fe0c 	bl	8003b50 <ADC_Enable>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f3c:	7dfb      	ldrb	r3, [r7, #23]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f040 809b 	bne.w	800307a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f48:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f4c:	f023 0301 	bic.w	r3, r3, #1
 8002f50:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a4d      	ldr	r2, [pc, #308]	@ (8003094 <HAL_ADC_Start+0x1b4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d009      	beq.n	8002f76 <HAL_ADC_Start+0x96>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a4e      	ldr	r2, [pc, #312]	@ (80030a0 <HAL_ADC_Start+0x1c0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d002      	beq.n	8002f72 <HAL_ADC_Start+0x92>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	e003      	b.n	8002f7a <HAL_ADC_Start+0x9a>
 8002f72:	4b4c      	ldr	r3, [pc, #304]	@ (80030a4 <HAL_ADC_Start+0x1c4>)
 8002f74:	e001      	b.n	8002f7a <HAL_ADC_Start+0x9a>
 8002f76:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6812      	ldr	r2, [r2, #0]
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d002      	beq.n	8002f88 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d105      	bne.n	8002f94 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fa0:	d106      	bne.n	8002fb0 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fa6:	f023 0206 	bic.w	r2, r3, #6
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	661a      	str	r2, [r3, #96]	@ 0x60
 8002fae:	e002      	b.n	8002fb6 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	221c      	movs	r2, #28
 8002fbc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a32      	ldr	r2, [pc, #200]	@ (8003094 <HAL_ADC_Start+0x1b4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d009      	beq.n	8002fe4 <HAL_ADC_Start+0x104>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a32      	ldr	r2, [pc, #200]	@ (80030a0 <HAL_ADC_Start+0x1c0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d002      	beq.n	8002fe0 <HAL_ADC_Start+0x100>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	e003      	b.n	8002fe8 <HAL_ADC_Start+0x108>
 8002fe0:	4b30      	ldr	r3, [pc, #192]	@ (80030a4 <HAL_ADC_Start+0x1c4>)
 8002fe2:	e001      	b.n	8002fe8 <HAL_ADC_Start+0x108>
 8002fe4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d008      	beq.n	8003002 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d005      	beq.n	8003002 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d002      	beq.n	8003002 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	2b09      	cmp	r3, #9
 8003000:	d114      	bne.n	800302c <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d007      	beq.n	8003020 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003014:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003018:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff fd5f 	bl	8002ae8 <LL_ADC_REG_StartConversion>
 800302a:	e02d      	b.n	8003088 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003030:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a15      	ldr	r2, [pc, #84]	@ (8003094 <HAL_ADC_Start+0x1b4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d009      	beq.n	8003056 <HAL_ADC_Start+0x176>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a16      	ldr	r2, [pc, #88]	@ (80030a0 <HAL_ADC_Start+0x1c0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d002      	beq.n	8003052 <HAL_ADC_Start+0x172>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	e003      	b.n	800305a <HAL_ADC_Start+0x17a>
 8003052:	4b14      	ldr	r3, [pc, #80]	@ (80030a4 <HAL_ADC_Start+0x1c4>)
 8003054:	e001      	b.n	800305a <HAL_ADC_Start+0x17a>
 8003056:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800305a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00f      	beq.n	8003088 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003070:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003078:	e006      	b.n	8003088 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003082:	e001      	b.n	8003088 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003084:	2302      	movs	r3, #2
 8003086:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003088:	7dfb      	ldrb	r3, [r7, #23]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	50000100 	.word	0x50000100
 8003098:	50000300 	.word	0x50000300
 800309c:	50000700 	.word	0x50000700
 80030a0:	50000500 	.word	0x50000500
 80030a4:	50000400 	.word	0x50000400

080030a8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030ba:	d004      	beq.n	80030c6 <HAL_ADC_PollForConversion+0x1e>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a77      	ldr	r2, [pc, #476]	@ (80032a0 <HAL_ADC_PollForConversion+0x1f8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d101      	bne.n	80030ca <HAL_ADC_PollForConversion+0x22>
 80030c6:	4b77      	ldr	r3, [pc, #476]	@ (80032a4 <HAL_ADC_PollForConversion+0x1fc>)
 80030c8:	e000      	b.n	80030cc <HAL_ADC_PollForConversion+0x24>
 80030ca:	4b77      	ldr	r3, [pc, #476]	@ (80032a8 <HAL_ADC_PollForConversion+0x200>)
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fc53 	bl	8002978 <LL_ADC_GetMultimode>
 80030d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d102      	bne.n	80030e2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80030dc:	2308      	movs	r3, #8
 80030de:	61fb      	str	r3, [r7, #28]
 80030e0:	e037      	b.n	8003152 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	2b05      	cmp	r3, #5
 80030ec:	d002      	beq.n	80030f4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2b09      	cmp	r3, #9
 80030f2:	d111      	bne.n	8003118 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d007      	beq.n	8003112 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003106:	f043 0220 	orr.w	r2, r3, #32
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e0c1      	b.n	8003296 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003112:	2304      	movs	r3, #4
 8003114:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003116:	e01c      	b.n	8003152 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003120:	d004      	beq.n	800312c <HAL_ADC_PollForConversion+0x84>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a5e      	ldr	r2, [pc, #376]	@ (80032a0 <HAL_ADC_PollForConversion+0x1f8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d101      	bne.n	8003130 <HAL_ADC_PollForConversion+0x88>
 800312c:	4b5d      	ldr	r3, [pc, #372]	@ (80032a4 <HAL_ADC_PollForConversion+0x1fc>)
 800312e:	e000      	b.n	8003132 <HAL_ADC_PollForConversion+0x8a>
 8003130:	4b5d      	ldr	r3, [pc, #372]	@ (80032a8 <HAL_ADC_PollForConversion+0x200>)
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff fc2e 	bl	8002994 <LL_ADC_GetMultiDMATransfer>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003142:	f043 0220 	orr.w	r2, r3, #32
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e0a3      	b.n	8003296 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800314e:	2304      	movs	r3, #4
 8003150:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003152:	f7ff fa7f 	bl	8002654 <HAL_GetTick>
 8003156:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003158:	e021      	b.n	800319e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003160:	d01d      	beq.n	800319e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003162:	f7ff fa77 	bl	8002654 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d302      	bcc.n	8003178 <HAL_ADC_PollForConversion+0xd0>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d112      	bne.n	800319e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	4013      	ands	r3, r2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10b      	bne.n	800319e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800318a:	f043 0204 	orr.w	r2, r3, #4
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e07b      	b.n	8003296 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0d6      	beq.n	800315a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fb49 	bl	8002854 <LL_ADC_REG_IsTriggerSourceSWStart>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01c      	beq.n	8003202 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7f5b      	ldrb	r3, [r3, #29]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d118      	bne.n	8003202 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d111      	bne.n	8003202 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d105      	bne.n	8003202 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031fa:	f043 0201 	orr.w	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a26      	ldr	r2, [pc, #152]	@ (80032a0 <HAL_ADC_PollForConversion+0x1f8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d009      	beq.n	8003220 <HAL_ADC_PollForConversion+0x178>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a26      	ldr	r2, [pc, #152]	@ (80032ac <HAL_ADC_PollForConversion+0x204>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d002      	beq.n	800321c <HAL_ADC_PollForConversion+0x174>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	e003      	b.n	8003224 <HAL_ADC_PollForConversion+0x17c>
 800321c:	4b24      	ldr	r3, [pc, #144]	@ (80032b0 <HAL_ADC_PollForConversion+0x208>)
 800321e:	e001      	b.n	8003224 <HAL_ADC_PollForConversion+0x17c>
 8003220:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	4293      	cmp	r3, r2
 800322a:	d008      	beq.n	800323e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d005      	beq.n	800323e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2b05      	cmp	r3, #5
 8003236:	d002      	beq.n	800323e <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	2b09      	cmp	r3, #9
 800323c:	d104      	bne.n	8003248 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	e014      	b.n	8003272 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a14      	ldr	r2, [pc, #80]	@ (80032a0 <HAL_ADC_PollForConversion+0x1f8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d009      	beq.n	8003266 <HAL_ADC_PollForConversion+0x1be>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a15      	ldr	r2, [pc, #84]	@ (80032ac <HAL_ADC_PollForConversion+0x204>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d002      	beq.n	8003262 <HAL_ADC_PollForConversion+0x1ba>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	e003      	b.n	800326a <HAL_ADC_PollForConversion+0x1c2>
 8003262:	4b13      	ldr	r3, [pc, #76]	@ (80032b0 <HAL_ADC_PollForConversion+0x208>)
 8003264:	e001      	b.n	800326a <HAL_ADC_PollForConversion+0x1c2>
 8003266:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800326a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	2b08      	cmp	r3, #8
 8003276:	d104      	bne.n	8003282 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2208      	movs	r2, #8
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	e008      	b.n	8003294 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d103      	bne.n	8003294 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	220c      	movs	r2, #12
 8003292:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	50000100 	.word	0x50000100
 80032a4:	50000300 	.word	0x50000300
 80032a8:	50000700 	.word	0x50000700
 80032ac:	50000500 	.word	0x50000500
 80032b0:	50000400 	.word	0x50000400

080032b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
	...

080032d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b0b6      	sub	sp, #216	@ 0xd8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d102      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x24>
 80032ee:	2302      	movs	r3, #2
 80032f0:	f000 bc13 	b.w	8003b1a <HAL_ADC_ConfigChannel+0x84a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff fc05 	bl	8002b10 <LL_ADC_REG_IsConversionOngoing>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	f040 83f3 	bne.w	8003af4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	6859      	ldr	r1, [r3, #4]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	f7ff faad 	bl	800287a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff fbf3 	bl	8002b10 <LL_ADC_REG_IsConversionOngoing>
 800332a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff fbff 	bl	8002b36 <LL_ADC_INJ_IsConversionOngoing>
 8003338:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800333c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003340:	2b00      	cmp	r3, #0
 8003342:	f040 81d9 	bne.w	80036f8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003346:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800334a:	2b00      	cmp	r3, #0
 800334c:	f040 81d4 	bne.w	80036f8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003358:	d10f      	bne.n	800337a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2200      	movs	r2, #0
 8003364:	4619      	mov	r1, r3
 8003366:	f7ff fab4 	bl	80028d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fa5b 	bl	800282e <LL_ADC_SetSamplingTimeCommonConfig>
 8003378:	e00e      	b.n	8003398 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6819      	ldr	r1, [r3, #0]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	461a      	mov	r2, r3
 8003388:	f7ff faa3 	bl	80028d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2100      	movs	r1, #0
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff fa4b 	bl	800282e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	695a      	ldr	r2, [r3, #20]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	08db      	lsrs	r3, r3, #3
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d022      	beq.n	8003400 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6919      	ldr	r1, [r3, #16]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80033ca:	f7ff f9a5 	bl	8002718 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6919      	ldr	r1, [r3, #16]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	461a      	mov	r2, r3
 80033dc:	f7ff f9f1 	bl	80027c2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	6919      	ldr	r1, [r3, #16]
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	7f1b      	ldrb	r3, [r3, #28]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d102      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x126>
 80033f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033f4:	e000      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x128>
 80033f6:	2300      	movs	r3, #0
 80033f8:	461a      	mov	r2, r3
 80033fa:	f7ff f9fd 	bl	80027f8 <LL_ADC_SetOffsetSaturation>
 80033fe:	e17b      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2100      	movs	r1, #0
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff f9aa 	bl	8002760 <LL_ADC_GetOffsetChannel>
 800340c:	4603      	mov	r3, r0
 800340e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10a      	bne.n	800342c <HAL_ADC_ConfigChannel+0x15c>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2100      	movs	r1, #0
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff f99f 	bl	8002760 <LL_ADC_GetOffsetChannel>
 8003422:	4603      	mov	r3, r0
 8003424:	0e9b      	lsrs	r3, r3, #26
 8003426:	f003 021f 	and.w	r2, r3, #31
 800342a:	e01e      	b.n	800346a <HAL_ADC_ConfigChannel+0x19a>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff f994 	bl	8002760 <LL_ADC_GetOffsetChannel>
 8003438:	4603      	mov	r3, r0
 800343a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003442:	fa93 f3a3 	rbit	r3, r3
 8003446:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800344a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800344e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003452:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800345a:	2320      	movs	r3, #32
 800345c:	e004      	b.n	8003468 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800345e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003462:	fab3 f383 	clz	r3, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003472:	2b00      	cmp	r3, #0
 8003474:	d105      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x1b2>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	0e9b      	lsrs	r3, r3, #26
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	e018      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x1e4>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800349a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800349e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80034a6:	2320      	movs	r3, #32
 80034a8:	e004      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80034aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80034ae:	fab3 f383 	clz	r3, r3
 80034b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d106      	bne.n	80034c6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2200      	movs	r2, #0
 80034be:	2100      	movs	r1, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff f963 	bl	800278c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2101      	movs	r1, #1
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff f947 	bl	8002760 <LL_ADC_GetOffsetChannel>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10a      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x222>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2101      	movs	r1, #1
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7ff f93c 	bl	8002760 <LL_ADC_GetOffsetChannel>
 80034e8:	4603      	mov	r3, r0
 80034ea:	0e9b      	lsrs	r3, r3, #26
 80034ec:	f003 021f 	and.w	r2, r3, #31
 80034f0:	e01e      	b.n	8003530 <HAL_ADC_ConfigChannel+0x260>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2101      	movs	r1, #1
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff f931 	bl	8002760 <LL_ADC_GetOffsetChannel>
 80034fe:	4603      	mov	r3, r0
 8003500:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003504:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003508:	fa93 f3a3 	rbit	r3, r3
 800350c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003510:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003514:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003518:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003520:	2320      	movs	r3, #32
 8003522:	e004      	b.n	800352e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003524:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003528:	fab3 f383 	clz	r3, r3
 800352c:	b2db      	uxtb	r3, r3
 800352e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003538:	2b00      	cmp	r3, #0
 800353a:	d105      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x278>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	0e9b      	lsrs	r3, r3, #26
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	e018      	b.n	800357a <HAL_ADC_ConfigChannel+0x2aa>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003550:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003554:	fa93 f3a3 	rbit	r3, r3
 8003558:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800355c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003560:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003564:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800356c:	2320      	movs	r3, #32
 800356e:	e004      	b.n	800357a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003570:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003574:	fab3 f383 	clz	r3, r3
 8003578:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800357a:	429a      	cmp	r2, r3
 800357c:	d106      	bne.n	800358c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2200      	movs	r2, #0
 8003584:	2101      	movs	r1, #1
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff f900 	bl	800278c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2102      	movs	r1, #2
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff f8e4 	bl	8002760 <LL_ADC_GetOffsetChannel>
 8003598:	4603      	mov	r3, r0
 800359a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10a      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x2e8>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2102      	movs	r1, #2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff f8d9 	bl	8002760 <LL_ADC_GetOffsetChannel>
 80035ae:	4603      	mov	r3, r0
 80035b0:	0e9b      	lsrs	r3, r3, #26
 80035b2:	f003 021f 	and.w	r2, r3, #31
 80035b6:	e01e      	b.n	80035f6 <HAL_ADC_ConfigChannel+0x326>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2102      	movs	r1, #2
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff f8ce 	bl	8002760 <LL_ADC_GetOffsetChannel>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035ce:	fa93 f3a3 	rbit	r3, r3
 80035d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80035d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80035de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80035e6:	2320      	movs	r3, #32
 80035e8:	e004      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80035ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d105      	bne.n	800360e <HAL_ADC_ConfigChannel+0x33e>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	0e9b      	lsrs	r3, r3, #26
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	e016      	b.n	800363c <HAL_ADC_ConfigChannel+0x36c>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800361a:	fa93 f3a3 	rbit	r3, r3
 800361e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003620:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003622:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003626:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800362e:	2320      	movs	r3, #32
 8003630:	e004      	b.n	800363c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003632:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800363c:	429a      	cmp	r2, r3
 800363e:	d106      	bne.n	800364e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2200      	movs	r2, #0
 8003646:	2102      	movs	r1, #2
 8003648:	4618      	mov	r0, r3
 800364a:	f7ff f89f 	bl	800278c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2103      	movs	r1, #3
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff f883 	bl	8002760 <LL_ADC_GetOffsetChannel>
 800365a:	4603      	mov	r3, r0
 800365c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <HAL_ADC_ConfigChannel+0x3aa>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2103      	movs	r1, #3
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff f878 	bl	8002760 <LL_ADC_GetOffsetChannel>
 8003670:	4603      	mov	r3, r0
 8003672:	0e9b      	lsrs	r3, r3, #26
 8003674:	f003 021f 	and.w	r2, r3, #31
 8003678:	e017      	b.n	80036aa <HAL_ADC_ConfigChannel+0x3da>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2103      	movs	r1, #3
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff f86d 	bl	8002760 <LL_ADC_GetOffsetChannel>
 8003686:	4603      	mov	r3, r0
 8003688:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800368c:	fa93 f3a3 	rbit	r3, r3
 8003690:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003692:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003694:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003696:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800369c:	2320      	movs	r3, #32
 800369e:	e003      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80036a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036a2:	fab3 f383 	clz	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d105      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x3f2>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	0e9b      	lsrs	r3, r3, #26
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	e011      	b.n	80036e6 <HAL_ADC_ConfigChannel+0x416>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036ca:	fa93 f3a3 	rbit	r3, r3
 80036ce:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80036d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80036d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80036da:	2320      	movs	r3, #32
 80036dc:	e003      	b.n	80036e6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80036de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036e0:	fab3 f383 	clz	r3, r3
 80036e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d106      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2200      	movs	r2, #0
 80036f0:	2103      	movs	r1, #3
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff f84a 	bl	800278c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff f9cd 	bl	8002a9c <LL_ADC_IsEnabled>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	f040 813d 	bne.w	8003984 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6819      	ldr	r1, [r3, #0]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	461a      	mov	r2, r3
 8003718:	f7ff f906 	bl	8002928 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	4aa2      	ldr	r2, [pc, #648]	@ (80039ac <HAL_ADC_ConfigChannel+0x6dc>)
 8003722:	4293      	cmp	r3, r2
 8003724:	f040 812e 	bne.w	8003984 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10b      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x480>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	0e9b      	lsrs	r3, r3, #26
 800373e:	3301      	adds	r3, #1
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	2b09      	cmp	r3, #9
 8003746:	bf94      	ite	ls
 8003748:	2301      	movls	r3, #1
 800374a:	2300      	movhi	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	e019      	b.n	8003784 <HAL_ADC_ConfigChannel+0x4b4>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003758:	fa93 f3a3 	rbit	r3, r3
 800375c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800375e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003760:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003762:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003768:	2320      	movs	r3, #32
 800376a:	e003      	b.n	8003774 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800376c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800376e:	fab3 f383 	clz	r3, r3
 8003772:	b2db      	uxtb	r3, r3
 8003774:	3301      	adds	r3, #1
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	2b09      	cmp	r3, #9
 800377c:	bf94      	ite	ls
 800377e:	2301      	movls	r3, #1
 8003780:	2300      	movhi	r3, #0
 8003782:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003784:	2b00      	cmp	r3, #0
 8003786:	d079      	beq.n	800387c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003790:	2b00      	cmp	r3, #0
 8003792:	d107      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x4d4>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	0e9b      	lsrs	r3, r3, #26
 800379a:	3301      	adds	r3, #1
 800379c:	069b      	lsls	r3, r3, #26
 800379e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037a2:	e015      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x500>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037ac:	fa93 f3a3 	rbit	r3, r3
 80037b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80037b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037b4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80037b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80037bc:	2320      	movs	r3, #32
 80037be:	e003      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80037c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	3301      	adds	r3, #1
 80037ca:	069b      	lsls	r3, r3, #26
 80037cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x520>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	0e9b      	lsrs	r3, r3, #26
 80037e2:	3301      	adds	r3, #1
 80037e4:	f003 031f 	and.w	r3, r3, #31
 80037e8:	2101      	movs	r1, #1
 80037ea:	fa01 f303 	lsl.w	r3, r1, r3
 80037ee:	e017      	b.n	8003820 <HAL_ADC_ConfigChannel+0x550>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037f8:	fa93 f3a3 	rbit	r3, r3
 80037fc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80037fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003800:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003802:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003808:	2320      	movs	r3, #32
 800380a:	e003      	b.n	8003814 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800380c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	3301      	adds	r3, #1
 8003816:	f003 031f 	and.w	r3, r3, #31
 800381a:	2101      	movs	r1, #1
 800381c:	fa01 f303 	lsl.w	r3, r1, r3
 8003820:	ea42 0103 	orr.w	r1, r2, r3
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10a      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x576>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	0e9b      	lsrs	r3, r3, #26
 8003836:	3301      	adds	r3, #1
 8003838:	f003 021f 	and.w	r2, r3, #31
 800383c:	4613      	mov	r3, r2
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	4413      	add	r3, r2
 8003842:	051b      	lsls	r3, r3, #20
 8003844:	e018      	b.n	8003878 <HAL_ADC_ConfigChannel+0x5a8>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800384e:	fa93 f3a3 	rbit	r3, r3
 8003852:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003856:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800385e:	2320      	movs	r3, #32
 8003860:	e003      	b.n	800386a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003864:	fab3 f383 	clz	r3, r3
 8003868:	b2db      	uxtb	r3, r3
 800386a:	3301      	adds	r3, #1
 800386c:	f003 021f 	and.w	r2, r3, #31
 8003870:	4613      	mov	r3, r2
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	4413      	add	r3, r2
 8003876:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003878:	430b      	orrs	r3, r1
 800387a:	e07e      	b.n	800397a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003884:	2b00      	cmp	r3, #0
 8003886:	d107      	bne.n	8003898 <HAL_ADC_ConfigChannel+0x5c8>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	0e9b      	lsrs	r3, r3, #26
 800388e:	3301      	adds	r3, #1
 8003890:	069b      	lsls	r3, r3, #26
 8003892:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003896:	e015      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x5f4>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a0:	fa93 f3a3 	rbit	r3, r3
 80038a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80038a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80038aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80038b0:	2320      	movs	r3, #32
 80038b2:	e003      	b.n	80038bc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80038b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b6:	fab3 f383 	clz	r3, r3
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	3301      	adds	r3, #1
 80038be:	069b      	lsls	r3, r3, #26
 80038c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d109      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x614>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	0e9b      	lsrs	r3, r3, #26
 80038d6:	3301      	adds	r3, #1
 80038d8:	f003 031f 	and.w	r3, r3, #31
 80038dc:	2101      	movs	r1, #1
 80038de:	fa01 f303 	lsl.w	r3, r1, r3
 80038e2:	e017      	b.n	8003914 <HAL_ADC_ConfigChannel+0x644>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	fa93 f3a3 	rbit	r3, r3
 80038f0:	61fb      	str	r3, [r7, #28]
  return result;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80038f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80038fc:	2320      	movs	r3, #32
 80038fe:	e003      	b.n	8003908 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	3301      	adds	r3, #1
 800390a:	f003 031f 	and.w	r3, r3, #31
 800390e:	2101      	movs	r1, #1
 8003910:	fa01 f303 	lsl.w	r3, r1, r3
 8003914:	ea42 0103 	orr.w	r1, r2, r3
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10d      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x670>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	0e9b      	lsrs	r3, r3, #26
 800392a:	3301      	adds	r3, #1
 800392c:	f003 021f 	and.w	r2, r3, #31
 8003930:	4613      	mov	r3, r2
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	4413      	add	r3, r2
 8003936:	3b1e      	subs	r3, #30
 8003938:	051b      	lsls	r3, r3, #20
 800393a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800393e:	e01b      	b.n	8003978 <HAL_ADC_ConfigChannel+0x6a8>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	fa93 f3a3 	rbit	r3, r3
 800394c:	613b      	str	r3, [r7, #16]
  return result;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003958:	2320      	movs	r3, #32
 800395a:	e003      	b.n	8003964 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	fab3 f383 	clz	r3, r3
 8003962:	b2db      	uxtb	r3, r3
 8003964:	3301      	adds	r3, #1
 8003966:	f003 021f 	and.w	r2, r3, #31
 800396a:	4613      	mov	r3, r2
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	4413      	add	r3, r2
 8003970:	3b1e      	subs	r3, #30
 8003972:	051b      	lsls	r3, r3, #20
 8003974:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003978:	430b      	orrs	r3, r1
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	6892      	ldr	r2, [r2, #8]
 800397e:	4619      	mov	r1, r3
 8003980:	f7fe ffa7 	bl	80028d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	4b09      	ldr	r3, [pc, #36]	@ (80039b0 <HAL_ADC_ConfigChannel+0x6e0>)
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 80be 	beq.w	8003b0e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800399a:	d004      	beq.n	80039a6 <HAL_ADC_ConfigChannel+0x6d6>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a04      	ldr	r2, [pc, #16]	@ (80039b4 <HAL_ADC_ConfigChannel+0x6e4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d10a      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x6ec>
 80039a6:	4b04      	ldr	r3, [pc, #16]	@ (80039b8 <HAL_ADC_ConfigChannel+0x6e8>)
 80039a8:	e009      	b.n	80039be <HAL_ADC_ConfigChannel+0x6ee>
 80039aa:	bf00      	nop
 80039ac:	407f0000 	.word	0x407f0000
 80039b0:	80080000 	.word	0x80080000
 80039b4:	50000100 	.word	0x50000100
 80039b8:	50000300 	.word	0x50000300
 80039bc:	4b59      	ldr	r3, [pc, #356]	@ (8003b24 <HAL_ADC_ConfigChannel+0x854>)
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fe fe9c 	bl	80026fc <LL_ADC_GetCommonPathInternalCh>
 80039c4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a56      	ldr	r2, [pc, #344]	@ (8003b28 <HAL_ADC_ConfigChannel+0x858>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <HAL_ADC_ConfigChannel+0x70c>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a55      	ldr	r2, [pc, #340]	@ (8003b2c <HAL_ADC_ConfigChannel+0x85c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d13a      	bne.n	8003a52 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d134      	bne.n	8003a52 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039f0:	d005      	beq.n	80039fe <HAL_ADC_ConfigChannel+0x72e>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a4e      	ldr	r2, [pc, #312]	@ (8003b30 <HAL_ADC_ConfigChannel+0x860>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	f040 8085 	bne.w	8003b08 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a06:	d004      	beq.n	8003a12 <HAL_ADC_ConfigChannel+0x742>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a49      	ldr	r2, [pc, #292]	@ (8003b34 <HAL_ADC_ConfigChannel+0x864>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d101      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x746>
 8003a12:	4a49      	ldr	r2, [pc, #292]	@ (8003b38 <HAL_ADC_ConfigChannel+0x868>)
 8003a14:	e000      	b.n	8003a18 <HAL_ADC_ConfigChannel+0x748>
 8003a16:	4a43      	ldr	r2, [pc, #268]	@ (8003b24 <HAL_ADC_ConfigChannel+0x854>)
 8003a18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a20:	4619      	mov	r1, r3
 8003a22:	4610      	mov	r0, r2
 8003a24:	f7fe fe57 	bl	80026d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a28:	4b44      	ldr	r3, [pc, #272]	@ (8003b3c <HAL_ADC_ConfigChannel+0x86c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	099b      	lsrs	r3, r3, #6
 8003a2e:	4a44      	ldr	r2, [pc, #272]	@ (8003b40 <HAL_ADC_ConfigChannel+0x870>)
 8003a30:	fba2 2303 	umull	r2, r3, r2, r3
 8003a34:	099b      	lsrs	r3, r3, #6
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	4613      	mov	r3, r2
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a42:	e002      	b.n	8003a4a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1f9      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a50:	e05a      	b.n	8003b08 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a3b      	ldr	r2, [pc, #236]	@ (8003b44 <HAL_ADC_ConfigChannel+0x874>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d125      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0x7d8>
 8003a5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d11f      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a31      	ldr	r2, [pc, #196]	@ (8003b34 <HAL_ADC_ConfigChannel+0x864>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d104      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x7ac>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a34      	ldr	r2, [pc, #208]	@ (8003b48 <HAL_ADC_ConfigChannel+0x878>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d047      	beq.n	8003b0c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a84:	d004      	beq.n	8003a90 <HAL_ADC_ConfigChannel+0x7c0>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a2a      	ldr	r2, [pc, #168]	@ (8003b34 <HAL_ADC_ConfigChannel+0x864>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d101      	bne.n	8003a94 <HAL_ADC_ConfigChannel+0x7c4>
 8003a90:	4a29      	ldr	r2, [pc, #164]	@ (8003b38 <HAL_ADC_ConfigChannel+0x868>)
 8003a92:	e000      	b.n	8003a96 <HAL_ADC_ConfigChannel+0x7c6>
 8003a94:	4a23      	ldr	r2, [pc, #140]	@ (8003b24 <HAL_ADC_ConfigChannel+0x854>)
 8003a96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	f7fe fe18 	bl	80026d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003aa6:	e031      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a27      	ldr	r2, [pc, #156]	@ (8003b4c <HAL_ADC_ConfigChannel+0x87c>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d12d      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ab2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d127      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8003b34 <HAL_ADC_ConfigChannel+0x864>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d022      	beq.n	8003b0e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ad0:	d004      	beq.n	8003adc <HAL_ADC_ConfigChannel+0x80c>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a17      	ldr	r2, [pc, #92]	@ (8003b34 <HAL_ADC_ConfigChannel+0x864>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d101      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x810>
 8003adc:	4a16      	ldr	r2, [pc, #88]	@ (8003b38 <HAL_ADC_ConfigChannel+0x868>)
 8003ade:	e000      	b.n	8003ae2 <HAL_ADC_ConfigChannel+0x812>
 8003ae0:	4a10      	ldr	r2, [pc, #64]	@ (8003b24 <HAL_ADC_ConfigChannel+0x854>)
 8003ae2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ae6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003aea:	4619      	mov	r1, r3
 8003aec:	4610      	mov	r0, r2
 8003aee:	f7fe fdf2 	bl	80026d6 <LL_ADC_SetCommonPathInternalCh>
 8003af2:	e00c      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af8:	f043 0220 	orr.w	r2, r3, #32
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003b06:	e002      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b08:	bf00      	nop
 8003b0a:	e000      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b0c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b16:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	37d8      	adds	r7, #216	@ 0xd8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	50000700 	.word	0x50000700
 8003b28:	c3210000 	.word	0xc3210000
 8003b2c:	90c00010 	.word	0x90c00010
 8003b30:	50000600 	.word	0x50000600
 8003b34:	50000100 	.word	0x50000100
 8003b38:	50000300 	.word	0x50000300
 8003b3c:	20000000 	.word	0x20000000
 8003b40:	053e2d63 	.word	0x053e2d63
 8003b44:	c7520000 	.word	0xc7520000
 8003b48:	50000500 	.word	0x50000500
 8003b4c:	cb840000 	.word	0xcb840000

08003b50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fe ff9d 	bl	8002a9c <LL_ADC_IsEnabled>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d14d      	bne.n	8003c04 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	4b28      	ldr	r3, [pc, #160]	@ (8003c10 <ADC_Enable+0xc0>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00d      	beq.n	8003b92 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7a:	f043 0210 	orr.w	r2, r3, #16
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b86:	f043 0201 	orr.w	r2, r3, #1
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e039      	b.n	8003c06 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fe ff58 	bl	8002a4c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b9c:	f7fe fd5a 	bl	8002654 <HAL_GetTick>
 8003ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ba2:	e028      	b.n	8003bf6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe ff77 	bl	8002a9c <LL_ADC_IsEnabled>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d104      	bne.n	8003bbe <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fe ff47 	bl	8002a4c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bbe:	f7fe fd49 	bl	8002654 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d914      	bls.n	8003bf6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d00d      	beq.n	8003bf6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bde:	f043 0210 	orr.w	r2, r3, #16
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bea:	f043 0201 	orr.w	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e007      	b.n	8003c06 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d1cf      	bne.n	8003ba4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	8000003f 	.word	0x8000003f

08003c14 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fe ff4e 	bl	8002ac2 <LL_ADC_IsDisableOngoing>
 8003c26:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fe ff35 	bl	8002a9c <LL_ADC_IsEnabled>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d047      	beq.n	8003cc8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d144      	bne.n	8003cc8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 030d 	and.w	r3, r3, #13
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d10c      	bne.n	8003c66 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fe ff0f 	bl	8002a74 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c5e:	f7fe fcf9 	bl	8002654 <HAL_GetTick>
 8003c62:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c64:	e029      	b.n	8003cba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c6a:	f043 0210 	orr.w	r2, r3, #16
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c76:	f043 0201 	orr.w	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e023      	b.n	8003cca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c82:	f7fe fce7 	bl	8002654 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d914      	bls.n	8003cba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00d      	beq.n	8003cba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca2:	f043 0210 	orr.w	r2, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cae:	f043 0201 	orr.w	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e007      	b.n	8003cca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1dc      	bne.n	8003c82 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <LL_ADC_IsEnabled>:
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <LL_ADC_IsEnabled+0x18>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <LL_ADC_IsEnabled+0x1a>
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <LL_ADC_StartCalibration>:
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003d0a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	609a      	str	r2, [r3, #8]
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <LL_ADC_IsCalibrationOnGoing>:
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b083      	sub	sp, #12
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d3e:	d101      	bne.n	8003d44 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <LL_ADC_REG_IsConversionOngoing>:
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d101      	bne.n	8003d6a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_ADCEx_Calibration_Start+0x1c>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e04d      	b.n	8003e30 <HAL_ADCEx_Calibration_Start+0xb8>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7ff ff39 	bl	8003c14 <ADC_Disable>
 8003da2:	4603      	mov	r3, r0
 8003da4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d136      	bne.n	8003e1a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003db4:	f023 0302 	bic.w	r3, r3, #2
 8003db8:	f043 0202 	orr.w	r2, r3, #2
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6839      	ldr	r1, [r7, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff ff96 	bl	8003cf8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003dcc:	e014      	b.n	8003df8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4a18      	ldr	r2, [pc, #96]	@ (8003e38 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d90d      	bls.n	8003df8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de0:	f023 0312 	bic.w	r3, r3, #18
 8003de4:	f043 0210 	orr.w	r2, r3, #16
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e01b      	b.n	8003e30 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff94 	bl	8003d2a <LL_ADC_IsCalibrationOnGoing>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e2      	bne.n	8003dce <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0c:	f023 0303 	bic.w	r3, r3, #3
 8003e10:	f043 0201 	orr.w	r2, r3, #1
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e18:	e005      	b.n	8003e26 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e1e:	f043 0210 	orr.w	r2, r3, #16
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	0004de01 	.word	0x0004de01

08003e3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003e3c:	b590      	push	{r4, r7, lr}
 8003e3e:	b0a1      	sub	sp, #132	@ 0x84
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e0e7      	b.n	800402a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003e62:	2300      	movs	r3, #0
 8003e64:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003e66:	2300      	movs	r3, #0
 8003e68:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e72:	d102      	bne.n	8003e7a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003e74:	4b6f      	ldr	r3, [pc, #444]	@ (8004034 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e76:	60bb      	str	r3, [r7, #8]
 8003e78:	e009      	b.n	8003e8e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a6e      	ldr	r2, [pc, #440]	@ (8004038 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d102      	bne.n	8003e8a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003e84:	4b6d      	ldr	r3, [pc, #436]	@ (800403c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003e86:	60bb      	str	r3, [r7, #8]
 8003e88:	e001      	b.n	8003e8e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10b      	bne.n	8003eac <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e98:	f043 0220 	orr.w	r2, r3, #32
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0be      	b.n	800402a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7ff ff4f 	bl	8003d52 <LL_ADC_REG_IsConversionOngoing>
 8003eb4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff ff49 	bl	8003d52 <LL_ADC_REG_IsConversionOngoing>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f040 80a0 	bne.w	8004008 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003ec8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f040 809c 	bne.w	8004008 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ed8:	d004      	beq.n	8003ee4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a55      	ldr	r2, [pc, #340]	@ (8004034 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d101      	bne.n	8003ee8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003ee4:	4b56      	ldr	r3, [pc, #344]	@ (8004040 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003ee6:	e000      	b.n	8003eea <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003ee8:	4b56      	ldr	r3, [pc, #344]	@ (8004044 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003eea:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d04b      	beq.n	8003f8c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003ef4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	6859      	ldr	r1, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f06:	035b      	lsls	r3, r3, #13
 8003f08:	430b      	orrs	r3, r1
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f0e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f18:	d004      	beq.n	8003f24 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a45      	ldr	r2, [pc, #276]	@ (8004034 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d10f      	bne.n	8003f44 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003f24:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003f28:	f7ff fed3 	bl	8003cd2 <LL_ADC_IsEnabled>
 8003f2c:	4604      	mov	r4, r0
 8003f2e:	4841      	ldr	r0, [pc, #260]	@ (8004034 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f30:	f7ff fecf 	bl	8003cd2 <LL_ADC_IsEnabled>
 8003f34:	4603      	mov	r3, r0
 8003f36:	4323      	orrs	r3, r4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2301      	moveq	r3, #1
 8003f3e:	2300      	movne	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	e012      	b.n	8003f6a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003f44:	483c      	ldr	r0, [pc, #240]	@ (8004038 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003f46:	f7ff fec4 	bl	8003cd2 <LL_ADC_IsEnabled>
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	483b      	ldr	r0, [pc, #236]	@ (800403c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003f4e:	f7ff fec0 	bl	8003cd2 <LL_ADC_IsEnabled>
 8003f52:	4603      	mov	r3, r0
 8003f54:	431c      	orrs	r4, r3
 8003f56:	483c      	ldr	r0, [pc, #240]	@ (8004048 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003f58:	f7ff febb 	bl	8003cd2 <LL_ADC_IsEnabled>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	4323      	orrs	r3, r4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	bf0c      	ite	eq
 8003f64:	2301      	moveq	r3, #1
 8003f66:	2300      	movne	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d056      	beq.n	800401c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003f76:	f023 030f 	bic.w	r3, r3, #15
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	6811      	ldr	r1, [r2, #0]
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	6892      	ldr	r2, [r2, #8]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	431a      	orrs	r2, r3
 8003f86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f88:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f8a:	e047      	b.n	800401c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f96:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fa0:	d004      	beq.n	8003fac <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a23      	ldr	r2, [pc, #140]	@ (8004034 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d10f      	bne.n	8003fcc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003fac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003fb0:	f7ff fe8f 	bl	8003cd2 <LL_ADC_IsEnabled>
 8003fb4:	4604      	mov	r4, r0
 8003fb6:	481f      	ldr	r0, [pc, #124]	@ (8004034 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003fb8:	f7ff fe8b 	bl	8003cd2 <LL_ADC_IsEnabled>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	4323      	orrs	r3, r4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	bf0c      	ite	eq
 8003fc4:	2301      	moveq	r3, #1
 8003fc6:	2300      	movne	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	e012      	b.n	8003ff2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003fcc:	481a      	ldr	r0, [pc, #104]	@ (8004038 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003fce:	f7ff fe80 	bl	8003cd2 <LL_ADC_IsEnabled>
 8003fd2:	4604      	mov	r4, r0
 8003fd4:	4819      	ldr	r0, [pc, #100]	@ (800403c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003fd6:	f7ff fe7c 	bl	8003cd2 <LL_ADC_IsEnabled>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	431c      	orrs	r4, r3
 8003fde:	481a      	ldr	r0, [pc, #104]	@ (8004048 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003fe0:	f7ff fe77 	bl	8003cd2 <LL_ADC_IsEnabled>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	4323      	orrs	r3, r4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	bf0c      	ite	eq
 8003fec:	2301      	moveq	r3, #1
 8003fee:	2300      	movne	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d012      	beq.n	800401c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ff6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003ffe:	f023 030f 	bic.w	r3, r3, #15
 8004002:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004004:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004006:	e009      	b.n	800401c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400c:	f043 0220 	orr.w	r2, r3, #32
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800401a:	e000      	b.n	800401e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800401c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004026:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800402a:	4618      	mov	r0, r3
 800402c:	3784      	adds	r7, #132	@ 0x84
 800402e:	46bd      	mov	sp, r7
 8004030:	bd90      	pop	{r4, r7, pc}
 8004032:	bf00      	nop
 8004034:	50000100 	.word	0x50000100
 8004038:	50000400 	.word	0x50000400
 800403c:	50000500 	.word	0x50000500
 8004040:	50000300 	.word	0x50000300
 8004044:	50000700 	.word	0x50000700
 8004048:	50000600 	.word	0x50000600

0800404c <__NVIC_SetPriorityGrouping>:
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800405c:	4b0c      	ldr	r3, [pc, #48]	@ (8004090 <__NVIC_SetPriorityGrouping+0x44>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004068:	4013      	ands	r3, r2
 800406a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004074:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800407c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800407e:	4a04      	ldr	r2, [pc, #16]	@ (8004090 <__NVIC_SetPriorityGrouping+0x44>)
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	60d3      	str	r3, [r2, #12]
}
 8004084:	bf00      	nop
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	e000ed00 	.word	0xe000ed00

08004094 <__NVIC_GetPriorityGrouping>:
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004098:	4b04      	ldr	r3, [pc, #16]	@ (80040ac <__NVIC_GetPriorityGrouping+0x18>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	0a1b      	lsrs	r3, r3, #8
 800409e:	f003 0307 	and.w	r3, r3, #7
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	e000ed00 	.word	0xe000ed00

080040b0 <__NVIC_EnableIRQ>:
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	db0b      	blt.n	80040da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	f003 021f 	and.w	r2, r3, #31
 80040c8:	4907      	ldr	r1, [pc, #28]	@ (80040e8 <__NVIC_EnableIRQ+0x38>)
 80040ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	2001      	movs	r0, #1
 80040d2:	fa00 f202 	lsl.w	r2, r0, r2
 80040d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	e000e100 	.word	0xe000e100

080040ec <__NVIC_SetPriority>:
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	6039      	str	r1, [r7, #0]
 80040f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	db0a      	blt.n	8004116 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	b2da      	uxtb	r2, r3
 8004104:	490c      	ldr	r1, [pc, #48]	@ (8004138 <__NVIC_SetPriority+0x4c>)
 8004106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410a:	0112      	lsls	r2, r2, #4
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	440b      	add	r3, r1
 8004110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004114:	e00a      	b.n	800412c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	b2da      	uxtb	r2, r3
 800411a:	4908      	ldr	r1, [pc, #32]	@ (800413c <__NVIC_SetPriority+0x50>)
 800411c:	79fb      	ldrb	r3, [r7, #7]
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	3b04      	subs	r3, #4
 8004124:	0112      	lsls	r2, r2, #4
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	440b      	add	r3, r1
 800412a:	761a      	strb	r2, [r3, #24]
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	e000e100 	.word	0xe000e100
 800413c:	e000ed00 	.word	0xe000ed00

08004140 <NVIC_EncodePriority>:
{
 8004140:	b480      	push	{r7}
 8004142:	b089      	sub	sp, #36	@ 0x24
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f1c3 0307 	rsb	r3, r3, #7
 800415a:	2b04      	cmp	r3, #4
 800415c:	bf28      	it	cs
 800415e:	2304      	movcs	r3, #4
 8004160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	3304      	adds	r3, #4
 8004166:	2b06      	cmp	r3, #6
 8004168:	d902      	bls.n	8004170 <NVIC_EncodePriority+0x30>
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	3b03      	subs	r3, #3
 800416e:	e000      	b.n	8004172 <NVIC_EncodePriority+0x32>
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004174:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	43da      	mvns	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	401a      	ands	r2, r3
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004188:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	fa01 f303 	lsl.w	r3, r1, r3
 8004192:	43d9      	mvns	r1, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004198:	4313      	orrs	r3, r2
}
 800419a:	4618      	mov	r0, r3
 800419c:	3724      	adds	r7, #36	@ 0x24
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b082      	sub	sp, #8
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7ff ff4c 	bl	800404c <__NVIC_SetPriorityGrouping>
}
 80041b4:	bf00      	nop
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	4603      	mov	r3, r0
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041ca:	f7ff ff63 	bl	8004094 <__NVIC_GetPriorityGrouping>
 80041ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	68b9      	ldr	r1, [r7, #8]
 80041d4:	6978      	ldr	r0, [r7, #20]
 80041d6:	f7ff ffb3 	bl	8004140 <NVIC_EncodePriority>
 80041da:	4602      	mov	r2, r0
 80041dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041e0:	4611      	mov	r1, r2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff ff82 	bl	80040ec <__NVIC_SetPriority>
}
 80041e8:	bf00      	nop
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff ff56 	bl	80040b0 <__NVIC_EnableIRQ>
}
 8004204:	bf00      	nop
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004214:	2300      	movs	r3, #0
 8004216:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d005      	beq.n	8004230 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2204      	movs	r2, #4
 8004228:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	73fb      	strb	r3, [r7, #15]
 800422e:	e037      	b.n	80042a0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 020e 	bic.w	r2, r2, #14
 800423e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800424a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800424e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0201 	bic.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004264:	f003 021f 	and.w	r2, r3, #31
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426c:	2101      	movs	r1, #1
 800426e:	fa01 f202 	lsl.w	r2, r1, r2
 8004272:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800427c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00c      	beq.n	80042a0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004290:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004294:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800429e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042c6:	2300      	movs	r3, #0
 80042c8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d00d      	beq.n	80042f2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2204      	movs	r2, #4
 80042da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	73fb      	strb	r3, [r7, #15]
 80042f0:	e047      	b.n	8004382 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 020e 	bic.w	r2, r2, #14
 8004300:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0201 	bic.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800431c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004320:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004326:	f003 021f 	and.w	r2, r3, #31
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432e:	2101      	movs	r1, #1
 8004330:	fa01 f202 	lsl.w	r2, r1, r2
 8004334:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800433e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00c      	beq.n	8004362 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004352:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004356:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004360:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	4798      	blx	r3
    }
  }
  return status;
 8004382:	7bfb      	ldrb	r3, [r7, #15]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004396:	2300      	movs	r3, #0
 8004398:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800439a:	e15a      	b.n	8004652 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	2101      	movs	r1, #1
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	fa01 f303 	lsl.w	r3, r1, r3
 80043a8:	4013      	ands	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 814c 	beq.w	800464c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f003 0303 	and.w	r3, r3, #3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d005      	beq.n	80043cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d130      	bne.n	800442e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	2203      	movs	r2, #3
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	43db      	mvns	r3, r3
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4013      	ands	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004402:	2201      	movs	r2, #1
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	fa02 f303 	lsl.w	r3, r2, r3
 800440a:	43db      	mvns	r3, r3
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4013      	ands	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	091b      	lsrs	r3, r3, #4
 8004418:	f003 0201 	and.w	r2, r3, #1
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	fa02 f303 	lsl.w	r3, r2, r3
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	2b03      	cmp	r3, #3
 8004438:	d017      	beq.n	800446a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	2203      	movs	r2, #3
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	43db      	mvns	r3, r3
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4013      	ands	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d123      	bne.n	80044be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	08da      	lsrs	r2, r3, #3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3208      	adds	r2, #8
 800447e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004482:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	220f      	movs	r2, #15
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	43db      	mvns	r3, r3
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	4013      	ands	r3, r2
 8004498:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	691a      	ldr	r2, [r3, #16]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	08da      	lsrs	r2, r3, #3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3208      	adds	r2, #8
 80044b8:	6939      	ldr	r1, [r7, #16]
 80044ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	2203      	movs	r2, #3
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	43db      	mvns	r3, r3
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4013      	ands	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f003 0203 	and.w	r2, r3, #3
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 80a6 	beq.w	800464c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004500:	4b5b      	ldr	r3, [pc, #364]	@ (8004670 <HAL_GPIO_Init+0x2e4>)
 8004502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004504:	4a5a      	ldr	r2, [pc, #360]	@ (8004670 <HAL_GPIO_Init+0x2e4>)
 8004506:	f043 0301 	orr.w	r3, r3, #1
 800450a:	6613      	str	r3, [r2, #96]	@ 0x60
 800450c:	4b58      	ldr	r3, [pc, #352]	@ (8004670 <HAL_GPIO_Init+0x2e4>)
 800450e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004518:	4a56      	ldr	r2, [pc, #344]	@ (8004674 <HAL_GPIO_Init+0x2e8>)
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	089b      	lsrs	r3, r3, #2
 800451e:	3302      	adds	r3, #2
 8004520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004524:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f003 0303 	and.w	r3, r3, #3
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	220f      	movs	r2, #15
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	43db      	mvns	r3, r3
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4013      	ands	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004542:	d01f      	beq.n	8004584 <HAL_GPIO_Init+0x1f8>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a4c      	ldr	r2, [pc, #304]	@ (8004678 <HAL_GPIO_Init+0x2ec>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d019      	beq.n	8004580 <HAL_GPIO_Init+0x1f4>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a4b      	ldr	r2, [pc, #300]	@ (800467c <HAL_GPIO_Init+0x2f0>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d013      	beq.n	800457c <HAL_GPIO_Init+0x1f0>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a4a      	ldr	r2, [pc, #296]	@ (8004680 <HAL_GPIO_Init+0x2f4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00d      	beq.n	8004578 <HAL_GPIO_Init+0x1ec>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a49      	ldr	r2, [pc, #292]	@ (8004684 <HAL_GPIO_Init+0x2f8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d007      	beq.n	8004574 <HAL_GPIO_Init+0x1e8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a48      	ldr	r2, [pc, #288]	@ (8004688 <HAL_GPIO_Init+0x2fc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d101      	bne.n	8004570 <HAL_GPIO_Init+0x1e4>
 800456c:	2305      	movs	r3, #5
 800456e:	e00a      	b.n	8004586 <HAL_GPIO_Init+0x1fa>
 8004570:	2306      	movs	r3, #6
 8004572:	e008      	b.n	8004586 <HAL_GPIO_Init+0x1fa>
 8004574:	2304      	movs	r3, #4
 8004576:	e006      	b.n	8004586 <HAL_GPIO_Init+0x1fa>
 8004578:	2303      	movs	r3, #3
 800457a:	e004      	b.n	8004586 <HAL_GPIO_Init+0x1fa>
 800457c:	2302      	movs	r3, #2
 800457e:	e002      	b.n	8004586 <HAL_GPIO_Init+0x1fa>
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <HAL_GPIO_Init+0x1fa>
 8004584:	2300      	movs	r3, #0
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	f002 0203 	and.w	r2, r2, #3
 800458c:	0092      	lsls	r2, r2, #2
 800458e:	4093      	lsls	r3, r2
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004596:	4937      	ldr	r1, [pc, #220]	@ (8004674 <HAL_GPIO_Init+0x2e8>)
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	089b      	lsrs	r3, r3, #2
 800459c:	3302      	adds	r3, #2
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045a4:	4b39      	ldr	r3, [pc, #228]	@ (800468c <HAL_GPIO_Init+0x300>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	43db      	mvns	r3, r3
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4013      	ands	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045c8:	4a30      	ldr	r2, [pc, #192]	@ (800468c <HAL_GPIO_Init+0x300>)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045ce:	4b2f      	ldr	r3, [pc, #188]	@ (800468c <HAL_GPIO_Init+0x300>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	43db      	mvns	r3, r3
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4013      	ands	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045f2:	4a26      	ldr	r2, [pc, #152]	@ (800468c <HAL_GPIO_Init+0x300>)
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80045f8:	4b24      	ldr	r3, [pc, #144]	@ (800468c <HAL_GPIO_Init+0x300>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	43db      	mvns	r3, r3
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4013      	ands	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800461c:	4a1b      	ldr	r2, [pc, #108]	@ (800468c <HAL_GPIO_Init+0x300>)
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004622:	4b1a      	ldr	r3, [pc, #104]	@ (800468c <HAL_GPIO_Init+0x300>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	43db      	mvns	r3, r3
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4013      	ands	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004646:	4a11      	ldr	r2, [pc, #68]	@ (800468c <HAL_GPIO_Init+0x300>)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	3301      	adds	r3, #1
 8004650:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	f47f ae9d 	bne.w	800439c <HAL_GPIO_Init+0x10>
  }
}
 8004662:	bf00      	nop
 8004664:	bf00      	nop
 8004666:	371c      	adds	r7, #28
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	40021000 	.word	0x40021000
 8004674:	40010000 	.word	0x40010000
 8004678:	48000400 	.word	0x48000400
 800467c:	48000800 	.word	0x48000800
 8004680:	48000c00 	.word	0x48000c00
 8004684:	48001000 	.word	0x48001000
 8004688:	48001400 	.word	0x48001400
 800468c:	40010400 	.word	0x40010400

08004690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	807b      	strh	r3, [r7, #2]
 800469c:	4613      	mov	r3, r2
 800469e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046a0:	787b      	ldrb	r3, [r7, #1]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046a6:	887a      	ldrh	r2, [r7, #2]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046ac:	e002      	b.n	80046b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046ae:	887a      	ldrh	r2, [r7, #2]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046ca:	4b08      	ldr	r3, [pc, #32]	@ (80046ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046cc:	695a      	ldr	r2, [r3, #20]
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	4013      	ands	r3, r2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d006      	beq.n	80046e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046d6:	4a05      	ldr	r2, [pc, #20]	@ (80046ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046d8:	88fb      	ldrh	r3, [r7, #6]
 80046da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 f806 	bl	80046f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80046e4:	bf00      	nop
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40010400 	.word	0x40010400

080046f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4603      	mov	r3, r0
 80046f8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
	...

08004708 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d141      	bne.n	800479a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004716:	4b4b      	ldr	r3, [pc, #300]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800471e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004722:	d131      	bne.n	8004788 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004724:	4b47      	ldr	r3, [pc, #284]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800472a:	4a46      	ldr	r2, [pc, #280]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800472c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004730:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004734:	4b43      	ldr	r3, [pc, #268]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800473c:	4a41      	ldr	r2, [pc, #260]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800473e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004742:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004744:	4b40      	ldr	r3, [pc, #256]	@ (8004848 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2232      	movs	r2, #50	@ 0x32
 800474a:	fb02 f303 	mul.w	r3, r2, r3
 800474e:	4a3f      	ldr	r2, [pc, #252]	@ (800484c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004750:	fba2 2303 	umull	r2, r3, r2, r3
 8004754:	0c9b      	lsrs	r3, r3, #18
 8004756:	3301      	adds	r3, #1
 8004758:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800475a:	e002      	b.n	8004762 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	3b01      	subs	r3, #1
 8004760:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004762:	4b38      	ldr	r3, [pc, #224]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800476a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800476e:	d102      	bne.n	8004776 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f2      	bne.n	800475c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004776:	4b33      	ldr	r3, [pc, #204]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800477e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004782:	d158      	bne.n	8004836 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e057      	b.n	8004838 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004788:	4b2e      	ldr	r3, [pc, #184]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800478a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800478e:	4a2d      	ldr	r2, [pc, #180]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004790:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004794:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004798:	e04d      	b.n	8004836 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047a0:	d141      	bne.n	8004826 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047a2:	4b28      	ldr	r3, [pc, #160]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ae:	d131      	bne.n	8004814 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047b0:	4b24      	ldr	r3, [pc, #144]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047b6:	4a23      	ldr	r2, [pc, #140]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047c0:	4b20      	ldr	r3, [pc, #128]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047c8:	4a1e      	ldr	r2, [pc, #120]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004848 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2232      	movs	r2, #50	@ 0x32
 80047d6:	fb02 f303 	mul.w	r3, r2, r3
 80047da:	4a1c      	ldr	r2, [pc, #112]	@ (800484c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047dc:	fba2 2303 	umull	r2, r3, r2, r3
 80047e0:	0c9b      	lsrs	r3, r3, #18
 80047e2:	3301      	adds	r3, #1
 80047e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047e6:	e002      	b.n	80047ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047ee:	4b15      	ldr	r3, [pc, #84]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047fa:	d102      	bne.n	8004802 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f2      	bne.n	80047e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004802:	4b10      	ldr	r3, [pc, #64]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800480a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800480e:	d112      	bne.n	8004836 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e011      	b.n	8004838 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004814:	4b0b      	ldr	r3, [pc, #44]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800481a:	4a0a      	ldr	r2, [pc, #40]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800481c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004820:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004824:	e007      	b.n	8004836 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004826:	4b07      	ldr	r3, [pc, #28]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800482e:	4a05      	ldr	r2, [pc, #20]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004830:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004834:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	40007000 	.word	0x40007000
 8004848:	20000000 	.word	0x20000000
 800484c:	431bde83 	.word	0x431bde83

08004850 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004854:	4b05      	ldr	r3, [pc, #20]	@ (800486c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	4a04      	ldr	r2, [pc, #16]	@ (800486c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800485a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800485e:	6093      	str	r3, [r2, #8]
}
 8004860:	bf00      	nop
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40007000 	.word	0x40007000

08004870 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e306      	b.n	8004e90 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d075      	beq.n	800497a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800488e:	4b97      	ldr	r3, [pc, #604]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 030c 	and.w	r3, r3, #12
 8004896:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004898:	4b94      	ldr	r3, [pc, #592]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	2b0c      	cmp	r3, #12
 80048a6:	d102      	bne.n	80048ae <HAL_RCC_OscConfig+0x3e>
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d002      	beq.n	80048b4 <HAL_RCC_OscConfig+0x44>
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d10b      	bne.n	80048cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b4:	4b8d      	ldr	r3, [pc, #564]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d05b      	beq.n	8004978 <HAL_RCC_OscConfig+0x108>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d157      	bne.n	8004978 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e2e1      	b.n	8004e90 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048d4:	d106      	bne.n	80048e4 <HAL_RCC_OscConfig+0x74>
 80048d6:	4b85      	ldr	r3, [pc, #532]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a84      	ldr	r2, [pc, #528]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 80048dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	e01d      	b.n	8004920 <HAL_RCC_OscConfig+0xb0>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048ec:	d10c      	bne.n	8004908 <HAL_RCC_OscConfig+0x98>
 80048ee:	4b7f      	ldr	r3, [pc, #508]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a7e      	ldr	r2, [pc, #504]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 80048f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	4b7c      	ldr	r3, [pc, #496]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a7b      	ldr	r2, [pc, #492]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	e00b      	b.n	8004920 <HAL_RCC_OscConfig+0xb0>
 8004908:	4b78      	ldr	r3, [pc, #480]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a77      	ldr	r2, [pc, #476]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 800490e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	4b75      	ldr	r3, [pc, #468]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a74      	ldr	r2, [pc, #464]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 800491a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800491e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d013      	beq.n	8004950 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004928:	f7fd fe94 	bl	8002654 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004930:	f7fd fe90 	bl	8002654 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b64      	cmp	r3, #100	@ 0x64
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e2a6      	b.n	8004e90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004942:	4b6a      	ldr	r3, [pc, #424]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0f0      	beq.n	8004930 <HAL_RCC_OscConfig+0xc0>
 800494e:	e014      	b.n	800497a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004950:	f7fd fe80 	bl	8002654 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004958:	f7fd fe7c 	bl	8002654 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b64      	cmp	r3, #100	@ 0x64
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e292      	b.n	8004e90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800496a:	4b60      	ldr	r3, [pc, #384]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0xe8>
 8004976:	e000      	b.n	800497a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d075      	beq.n	8004a72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004986:	4b59      	ldr	r3, [pc, #356]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 030c 	and.w	r3, r3, #12
 800498e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004990:	4b56      	ldr	r3, [pc, #344]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f003 0303 	and.w	r3, r3, #3
 8004998:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	2b0c      	cmp	r3, #12
 800499e:	d102      	bne.n	80049a6 <HAL_RCC_OscConfig+0x136>
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d002      	beq.n	80049ac <HAL_RCC_OscConfig+0x13c>
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d11f      	bne.n	80049ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049ac:	4b4f      	ldr	r3, [pc, #316]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <HAL_RCC_OscConfig+0x154>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e265      	b.n	8004e90 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c4:	4b49      	ldr	r3, [pc, #292]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	061b      	lsls	r3, r3, #24
 80049d2:	4946      	ldr	r1, [pc, #280]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80049d8:	4b45      	ldr	r3, [pc, #276]	@ (8004af0 <HAL_RCC_OscConfig+0x280>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fc ff99 	bl	8001914 <HAL_InitTick>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d043      	beq.n	8004a70 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e251      	b.n	8004e90 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d023      	beq.n	8004a3c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049f4:	4b3d      	ldr	r3, [pc, #244]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a3c      	ldr	r2, [pc, #240]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 80049fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a00:	f7fd fe28 	bl	8002654 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a08:	f7fd fe24 	bl	8002654 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e23a      	b.n	8004e90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a1a:	4b34      	ldr	r3, [pc, #208]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0f0      	beq.n	8004a08 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a26:	4b31      	ldr	r3, [pc, #196]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	061b      	lsls	r3, r3, #24
 8004a34:	492d      	ldr	r1, [pc, #180]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	604b      	str	r3, [r1, #4]
 8004a3a:	e01a      	b.n	8004a72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a2a      	ldr	r2, [pc, #168]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004a42:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a48:	f7fd fe04 	bl	8002654 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a50:	f7fd fe00 	bl	8002654 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e216      	b.n	8004e90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a62:	4b22      	ldr	r3, [pc, #136]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f0      	bne.n	8004a50 <HAL_RCC_OscConfig+0x1e0>
 8004a6e:	e000      	b.n	8004a72 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d041      	beq.n	8004b02 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d01c      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a86:	4b19      	ldr	r3, [pc, #100]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a8c:	4a17      	ldr	r2, [pc, #92]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004a8e:	f043 0301 	orr.w	r3, r3, #1
 8004a92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a96:	f7fd fddd 	bl	8002654 <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a9e:	f7fd fdd9 	bl	8002654 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e1ef      	b.n	8004e90 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0ef      	beq.n	8004a9e <HAL_RCC_OscConfig+0x22e>
 8004abe:	e020      	b.n	8004b02 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ac6:	4a09      	ldr	r2, [pc, #36]	@ (8004aec <HAL_RCC_OscConfig+0x27c>)
 8004ac8:	f023 0301 	bic.w	r3, r3, #1
 8004acc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad0:	f7fd fdc0 	bl	8002654 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ad6:	e00d      	b.n	8004af4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad8:	f7fd fdbc 	bl	8002654 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d906      	bls.n	8004af4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e1d2      	b.n	8004e90 <HAL_RCC_OscConfig+0x620>
 8004aea:	bf00      	nop
 8004aec:	40021000 	.word	0x40021000
 8004af0:	200001a8 	.word	0x200001a8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004af4:	4b8c      	ldr	r3, [pc, #560]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1ea      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 80a6 	beq.w	8004c5c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b10:	2300      	movs	r3, #0
 8004b12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b14:	4b84      	ldr	r3, [pc, #528]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_RCC_OscConfig+0x2b4>
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <HAL_RCC_OscConfig+0x2b6>
 8004b24:	2300      	movs	r3, #0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00d      	beq.n	8004b46 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b2a:	4b7f      	ldr	r3, [pc, #508]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b2e:	4a7e      	ldr	r2, [pc, #504]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b34:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b36:	4b7c      	ldr	r3, [pc, #496]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b42:	2301      	movs	r3, #1
 8004b44:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b46:	4b79      	ldr	r3, [pc, #484]	@ (8004d2c <HAL_RCC_OscConfig+0x4bc>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d118      	bne.n	8004b84 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b52:	4b76      	ldr	r3, [pc, #472]	@ (8004d2c <HAL_RCC_OscConfig+0x4bc>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a75      	ldr	r2, [pc, #468]	@ (8004d2c <HAL_RCC_OscConfig+0x4bc>)
 8004b58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b5e:	f7fd fd79 	bl	8002654 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b66:	f7fd fd75 	bl	8002654 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e18b      	b.n	8004e90 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b78:	4b6c      	ldr	r3, [pc, #432]	@ (8004d2c <HAL_RCC_OscConfig+0x4bc>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0f0      	beq.n	8004b66 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d108      	bne.n	8004b9e <HAL_RCC_OscConfig+0x32e>
 8004b8c:	4b66      	ldr	r3, [pc, #408]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b92:	4a65      	ldr	r2, [pc, #404]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004b94:	f043 0301 	orr.w	r3, r3, #1
 8004b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b9c:	e024      	b.n	8004be8 <HAL_RCC_OscConfig+0x378>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b05      	cmp	r3, #5
 8004ba4:	d110      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x358>
 8004ba6:	4b60      	ldr	r3, [pc, #384]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bac:	4a5e      	ldr	r2, [pc, #376]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004bae:	f043 0304 	orr.w	r3, r3, #4
 8004bb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bb6:	4b5c      	ldr	r3, [pc, #368]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bbc:	4a5a      	ldr	r2, [pc, #360]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004bbe:	f043 0301 	orr.w	r3, r3, #1
 8004bc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bc6:	e00f      	b.n	8004be8 <HAL_RCC_OscConfig+0x378>
 8004bc8:	4b57      	ldr	r3, [pc, #348]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bce:	4a56      	ldr	r2, [pc, #344]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004bd0:	f023 0301 	bic.w	r3, r3, #1
 8004bd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bd8:	4b53      	ldr	r3, [pc, #332]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bde:	4a52      	ldr	r2, [pc, #328]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004be0:	f023 0304 	bic.w	r3, r3, #4
 8004be4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d016      	beq.n	8004c1e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf0:	f7fd fd30 	bl	8002654 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bf6:	e00a      	b.n	8004c0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf8:	f7fd fd2c 	bl	8002654 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e140      	b.n	8004e90 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c0e:	4b46      	ldr	r3, [pc, #280]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0ed      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x388>
 8004c1c:	e015      	b.n	8004c4a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1e:	f7fd fd19 	bl	8002654 <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c24:	e00a      	b.n	8004c3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c26:	f7fd fd15 	bl	8002654 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e129      	b.n	8004e90 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c3c:	4b3a      	ldr	r3, [pc, #232]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1ed      	bne.n	8004c26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c4a:	7ffb      	ldrb	r3, [r7, #31]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d105      	bne.n	8004c5c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c50:	4b35      	ldr	r3, [pc, #212]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c54:	4a34      	ldr	r2, [pc, #208]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004c56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c5a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0320 	and.w	r3, r3, #32
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d03c      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d01c      	beq.n	8004caa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c70:	4b2d      	ldr	r3, [pc, #180]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004c72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c76:	4a2c      	ldr	r2, [pc, #176]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c80:	f7fd fce8 	bl	8002654 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c88:	f7fd fce4 	bl	8002654 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e0fa      	b.n	8004e90 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c9a:	4b23      	ldr	r3, [pc, #140]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004c9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0ef      	beq.n	8004c88 <HAL_RCC_OscConfig+0x418>
 8004ca8:	e01b      	b.n	8004ce2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004caa:	4b1f      	ldr	r3, [pc, #124]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004cac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004cb2:	f023 0301 	bic.w	r3, r3, #1
 8004cb6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cba:	f7fd fccb 	bl	8002654 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cc2:	f7fd fcc7 	bl	8002654 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e0dd      	b.n	8004e90 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cd4:	4b14      	ldr	r3, [pc, #80]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1ef      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 80d1 	beq.w	8004e8e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cec:	4b0e      	ldr	r3, [pc, #56]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f003 030c 	and.w	r3, r3, #12
 8004cf4:	2b0c      	cmp	r3, #12
 8004cf6:	f000 808b 	beq.w	8004e10 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d15e      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d02:	4b09      	ldr	r3, [pc, #36]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a08      	ldr	r2, [pc, #32]	@ (8004d28 <HAL_RCC_OscConfig+0x4b8>)
 8004d08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0e:	f7fd fca1 	bl	8002654 <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d14:	e00c      	b.n	8004d30 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d16:	f7fd fc9d 	bl	8002654 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d905      	bls.n	8004d30 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e0b3      	b.n	8004e90 <HAL_RCC_OscConfig+0x620>
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d30:	4b59      	ldr	r3, [pc, #356]	@ (8004e98 <HAL_RCC_OscConfig+0x628>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1ec      	bne.n	8004d16 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d3c:	4b56      	ldr	r3, [pc, #344]	@ (8004e98 <HAL_RCC_OscConfig+0x628>)
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	4b56      	ldr	r3, [pc, #344]	@ (8004e9c <HAL_RCC_OscConfig+0x62c>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6a11      	ldr	r1, [r2, #32]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d4c:	3a01      	subs	r2, #1
 8004d4e:	0112      	lsls	r2, r2, #4
 8004d50:	4311      	orrs	r1, r2
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004d56:	0212      	lsls	r2, r2, #8
 8004d58:	4311      	orrs	r1, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004d5e:	0852      	lsrs	r2, r2, #1
 8004d60:	3a01      	subs	r2, #1
 8004d62:	0552      	lsls	r2, r2, #21
 8004d64:	4311      	orrs	r1, r2
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d6a:	0852      	lsrs	r2, r2, #1
 8004d6c:	3a01      	subs	r2, #1
 8004d6e:	0652      	lsls	r2, r2, #25
 8004d70:	4311      	orrs	r1, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d76:	06d2      	lsls	r2, r2, #27
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	4947      	ldr	r1, [pc, #284]	@ (8004e98 <HAL_RCC_OscConfig+0x628>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d80:	4b45      	ldr	r3, [pc, #276]	@ (8004e98 <HAL_RCC_OscConfig+0x628>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a44      	ldr	r2, [pc, #272]	@ (8004e98 <HAL_RCC_OscConfig+0x628>)
 8004d86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d8a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d8c:	4b42      	ldr	r3, [pc, #264]	@ (8004e98 <HAL_RCC_OscConfig+0x628>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	4a41      	ldr	r2, [pc, #260]	@ (8004e98 <HAL_RCC_OscConfig+0x628>)
 8004d92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d98:	f7fd fc5c 	bl	8002654 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da0:	f7fd fc58 	bl	8002654 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e06e      	b.n	8004e90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004db2:	4b39      	ldr	r3, [pc, #228]	@ (8004e98 <HAL_RCC_OscConfig+0x628>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0x530>
 8004dbe:	e066      	b.n	8004e8e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc0:	4b35      	ldr	r3, [pc, #212]	@ (8004e98 <HAL_RCC_OscConfig+0x628>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a34      	ldr	r2, [pc, #208]	@ (8004e98 <HAL_RCC_OscConfig+0x628>)
 8004dc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dca:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004dcc:	4b32      	ldr	r3, [pc, #200]	@ (8004e98 <HAL_RCC_OscConfig+0x628>)
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	4a31      	ldr	r2, [pc, #196]	@ (8004e98 <HAL_RCC_OscConfig+0x628>)
 8004dd2:	f023 0303 	bic.w	r3, r3, #3
 8004dd6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004dd8:	4b2f      	ldr	r3, [pc, #188]	@ (8004e98 <HAL_RCC_OscConfig+0x628>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	4a2e      	ldr	r2, [pc, #184]	@ (8004e98 <HAL_RCC_OscConfig+0x628>)
 8004dde:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8004de2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004de6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7fd fc34 	bl	8002654 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df0:	f7fd fc30 	bl	8002654 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e046      	b.n	8004e90 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e02:	4b25      	ldr	r3, [pc, #148]	@ (8004e98 <HAL_RCC_OscConfig+0x628>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1f0      	bne.n	8004df0 <HAL_RCC_OscConfig+0x580>
 8004e0e:	e03e      	b.n	8004e8e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d101      	bne.n	8004e1c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e039      	b.n	8004e90 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8004e98 <HAL_RCC_OscConfig+0x628>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f003 0203 	and.w	r2, r3, #3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d12c      	bne.n	8004e8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d123      	bne.n	8004e8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d11b      	bne.n	8004e8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d113      	bne.n	8004e8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6c:	085b      	lsrs	r3, r3, #1
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d109      	bne.n	8004e8a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e80:	085b      	lsrs	r3, r3, #1
 8004e82:	3b01      	subs	r3, #1
 8004e84:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d001      	beq.n	8004e8e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3720      	adds	r7, #32
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	019f800c 	.word	0x019f800c

08004ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e11e      	b.n	80050f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb8:	4b91      	ldr	r3, [pc, #580]	@ (8005100 <HAL_RCC_ClockConfig+0x260>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d910      	bls.n	8004ee8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec6:	4b8e      	ldr	r3, [pc, #568]	@ (8005100 <HAL_RCC_ClockConfig+0x260>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f023 020f 	bic.w	r2, r3, #15
 8004ece:	498c      	ldr	r1, [pc, #560]	@ (8005100 <HAL_RCC_ClockConfig+0x260>)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed6:	4b8a      	ldr	r3, [pc, #552]	@ (8005100 <HAL_RCC_ClockConfig+0x260>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d001      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e106      	b.n	80050f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d073      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	d129      	bne.n	8004f50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004efc:	4b81      	ldr	r3, [pc, #516]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e0f4      	b.n	80050f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004f0c:	f000 f9d0 	bl	80052b0 <RCC_GetSysClockFreqFromPLLSource>
 8004f10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	4a7c      	ldr	r2, [pc, #496]	@ (8005108 <HAL_RCC_ClockConfig+0x268>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d93f      	bls.n	8004f9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f1a:	4b7a      	ldr	r3, [pc, #488]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d009      	beq.n	8004f3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d033      	beq.n	8004f9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d12f      	bne.n	8004f9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f3a:	4b72      	ldr	r3, [pc, #456]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f42:	4a70      	ldr	r2, [pc, #448]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 8004f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f4a:	2380      	movs	r3, #128	@ 0x80
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	e024      	b.n	8004f9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d107      	bne.n	8004f68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f58:	4b6a      	ldr	r3, [pc, #424]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d109      	bne.n	8004f78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e0c6      	b.n	80050f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f68:	4b66      	ldr	r3, [pc, #408]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e0be      	b.n	80050f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004f78:	f000 f8ce 	bl	8005118 <HAL_RCC_GetSysClockFreq>
 8004f7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	4a61      	ldr	r2, [pc, #388]	@ (8005108 <HAL_RCC_ClockConfig+0x268>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d909      	bls.n	8004f9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f86:	4b5f      	ldr	r3, [pc, #380]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f8e:	4a5d      	ldr	r2, [pc, #372]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 8004f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004f96:	2380      	movs	r3, #128	@ 0x80
 8004f98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f9a:	4b5a      	ldr	r3, [pc, #360]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f023 0203 	bic.w	r2, r3, #3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	4957      	ldr	r1, [pc, #348]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fac:	f7fd fb52 	bl	8002654 <HAL_GetTick>
 8004fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb2:	e00a      	b.n	8004fca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fb4:	f7fd fb4e 	bl	8002654 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e095      	b.n	80050f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fca:	4b4e      	ldr	r3, [pc, #312]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 020c 	and.w	r2, r3, #12
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d1eb      	bne.n	8004fb4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d023      	beq.n	8005030 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ff4:	4b43      	ldr	r3, [pc, #268]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	4a42      	ldr	r2, [pc, #264]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 8004ffa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004ffe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b00      	cmp	r3, #0
 800500a:	d007      	beq.n	800501c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800500c:	4b3d      	ldr	r3, [pc, #244]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005014:	4a3b      	ldr	r2, [pc, #236]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 8005016:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800501a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800501c:	4b39      	ldr	r3, [pc, #228]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	4936      	ldr	r1, [pc, #216]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 800502a:	4313      	orrs	r3, r2
 800502c:	608b      	str	r3, [r1, #8]
 800502e:	e008      	b.n	8005042 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2b80      	cmp	r3, #128	@ 0x80
 8005034:	d105      	bne.n	8005042 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005036:	4b33      	ldr	r3, [pc, #204]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	4a32      	ldr	r2, [pc, #200]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 800503c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005040:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005042:	4b2f      	ldr	r3, [pc, #188]	@ (8005100 <HAL_RCC_ClockConfig+0x260>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	429a      	cmp	r2, r3
 800504e:	d21d      	bcs.n	800508c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005050:	4b2b      	ldr	r3, [pc, #172]	@ (8005100 <HAL_RCC_ClockConfig+0x260>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f023 020f 	bic.w	r2, r3, #15
 8005058:	4929      	ldr	r1, [pc, #164]	@ (8005100 <HAL_RCC_ClockConfig+0x260>)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	4313      	orrs	r3, r2
 800505e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005060:	f7fd faf8 	bl	8002654 <HAL_GetTick>
 8005064:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005066:	e00a      	b.n	800507e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005068:	f7fd faf4 	bl	8002654 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005076:	4293      	cmp	r3, r2
 8005078:	d901      	bls.n	800507e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e03b      	b.n	80050f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800507e:	4b20      	ldr	r3, [pc, #128]	@ (8005100 <HAL_RCC_ClockConfig+0x260>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d1ed      	bne.n	8005068 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	d008      	beq.n	80050aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005098:	4b1a      	ldr	r3, [pc, #104]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	4917      	ldr	r1, [pc, #92]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0308 	and.w	r3, r3, #8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d009      	beq.n	80050ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050b6:	4b13      	ldr	r3, [pc, #76]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	490f      	ldr	r1, [pc, #60]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050ca:	f000 f825 	bl	8005118 <HAL_RCC_GetSysClockFreq>
 80050ce:	4602      	mov	r2, r0
 80050d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005104 <HAL_RCC_ClockConfig+0x264>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	091b      	lsrs	r3, r3, #4
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	490c      	ldr	r1, [pc, #48]	@ (800510c <HAL_RCC_ClockConfig+0x26c>)
 80050dc:	5ccb      	ldrb	r3, [r1, r3]
 80050de:	f003 031f 	and.w	r3, r3, #31
 80050e2:	fa22 f303 	lsr.w	r3, r2, r3
 80050e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005110 <HAL_RCC_ClockConfig+0x270>)
 80050e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80050ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005114 <HAL_RCC_ClockConfig+0x274>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fc fc10 	bl	8001914 <HAL_InitTick>
 80050f4:	4603      	mov	r3, r0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	40022000 	.word	0x40022000
 8005104:	40021000 	.word	0x40021000
 8005108:	04c4b400 	.word	0x04c4b400
 800510c:	0800dc58 	.word	0x0800dc58
 8005110:	20000000 	.word	0x20000000
 8005114:	200001a8 	.word	0x200001a8

08005118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800511e:	4b2c      	ldr	r3, [pc, #176]	@ (80051d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 030c 	and.w	r3, r3, #12
 8005126:	2b04      	cmp	r3, #4
 8005128:	d102      	bne.n	8005130 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800512a:	4b2a      	ldr	r3, [pc, #168]	@ (80051d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800512c:	613b      	str	r3, [r7, #16]
 800512e:	e047      	b.n	80051c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005130:	4b27      	ldr	r3, [pc, #156]	@ (80051d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 030c 	and.w	r3, r3, #12
 8005138:	2b08      	cmp	r3, #8
 800513a:	d102      	bne.n	8005142 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800513c:	4b26      	ldr	r3, [pc, #152]	@ (80051d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800513e:	613b      	str	r3, [r7, #16]
 8005140:	e03e      	b.n	80051c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005142:	4b23      	ldr	r3, [pc, #140]	@ (80051d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 030c 	and.w	r3, r3, #12
 800514a:	2b0c      	cmp	r3, #12
 800514c:	d136      	bne.n	80051bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800514e:	4b20      	ldr	r3, [pc, #128]	@ (80051d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005158:	4b1d      	ldr	r3, [pc, #116]	@ (80051d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	091b      	lsrs	r3, r3, #4
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	3301      	adds	r3, #1
 8005164:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2b03      	cmp	r3, #3
 800516a:	d10c      	bne.n	8005186 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800516c:	4a1a      	ldr	r2, [pc, #104]	@ (80051d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	fbb2 f3f3 	udiv	r3, r2, r3
 8005174:	4a16      	ldr	r2, [pc, #88]	@ (80051d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005176:	68d2      	ldr	r2, [r2, #12]
 8005178:	0a12      	lsrs	r2, r2, #8
 800517a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800517e:	fb02 f303 	mul.w	r3, r2, r3
 8005182:	617b      	str	r3, [r7, #20]
      break;
 8005184:	e00c      	b.n	80051a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005186:	4a13      	ldr	r2, [pc, #76]	@ (80051d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	fbb2 f3f3 	udiv	r3, r2, r3
 800518e:	4a10      	ldr	r2, [pc, #64]	@ (80051d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005190:	68d2      	ldr	r2, [r2, #12]
 8005192:	0a12      	lsrs	r2, r2, #8
 8005194:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005198:	fb02 f303 	mul.w	r3, r2, r3
 800519c:	617b      	str	r3, [r7, #20]
      break;
 800519e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051a0:	4b0b      	ldr	r3, [pc, #44]	@ (80051d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	0e5b      	lsrs	r3, r3, #25
 80051a6:	f003 0303 	and.w	r3, r3, #3
 80051aa:	3301      	adds	r3, #1
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b8:	613b      	str	r3, [r7, #16]
 80051ba:	e001      	b.n	80051c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80051c0:	693b      	ldr	r3, [r7, #16]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	371c      	adds	r7, #28
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40021000 	.word	0x40021000
 80051d4:	00f42400 	.word	0x00f42400
 80051d8:	016e3600 	.word	0x016e3600

080051dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051e0:	4b03      	ldr	r3, [pc, #12]	@ (80051f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80051e2:	681b      	ldr	r3, [r3, #0]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	20000000 	.word	0x20000000

080051f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051f8:	f7ff fff0 	bl	80051dc <HAL_RCC_GetHCLKFreq>
 80051fc:	4602      	mov	r2, r0
 80051fe:	4b06      	ldr	r3, [pc, #24]	@ (8005218 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	0a1b      	lsrs	r3, r3, #8
 8005204:	f003 0307 	and.w	r3, r3, #7
 8005208:	4904      	ldr	r1, [pc, #16]	@ (800521c <HAL_RCC_GetPCLK1Freq+0x28>)
 800520a:	5ccb      	ldrb	r3, [r1, r3]
 800520c:	f003 031f 	and.w	r3, r3, #31
 8005210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005214:	4618      	mov	r0, r3
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40021000 	.word	0x40021000
 800521c:	0800dc68 	.word	0x0800dc68

08005220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005224:	f7ff ffda 	bl	80051dc <HAL_RCC_GetHCLKFreq>
 8005228:	4602      	mov	r2, r0
 800522a:	4b06      	ldr	r3, [pc, #24]	@ (8005244 <HAL_RCC_GetPCLK2Freq+0x24>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	0adb      	lsrs	r3, r3, #11
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	4904      	ldr	r1, [pc, #16]	@ (8005248 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005236:	5ccb      	ldrb	r3, [r1, r3]
 8005238:	f003 031f 	and.w	r3, r3, #31
 800523c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005240:	4618      	mov	r0, r3
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40021000 	.word	0x40021000
 8005248:	0800dc68 	.word	0x0800dc68

0800524c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	220f      	movs	r2, #15
 800525a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800525c:	4b12      	ldr	r3, [pc, #72]	@ (80052a8 <HAL_RCC_GetClockConfig+0x5c>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 0203 	and.w	r2, r3, #3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005268:	4b0f      	ldr	r3, [pc, #60]	@ (80052a8 <HAL_RCC_GetClockConfig+0x5c>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005274:	4b0c      	ldr	r3, [pc, #48]	@ (80052a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005280:	4b09      	ldr	r3, [pc, #36]	@ (80052a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	08db      	lsrs	r3, r3, #3
 8005286:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800528e:	4b07      	ldr	r3, [pc, #28]	@ (80052ac <HAL_RCC_GetClockConfig+0x60>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 020f 	and.w	r2, r3, #15
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	601a      	str	r2, [r3, #0]
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40021000 	.word	0x40021000
 80052ac:	40022000 	.word	0x40022000

080052b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	091b      	lsrs	r3, r3, #4
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	3301      	adds	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d10c      	bne.n	80052ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052d4:	4a17      	ldr	r2, [pc, #92]	@ (8005334 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052dc:	4a14      	ldr	r2, [pc, #80]	@ (8005330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052de:	68d2      	ldr	r2, [r2, #12]
 80052e0:	0a12      	lsrs	r2, r2, #8
 80052e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052e6:	fb02 f303 	mul.w	r3, r2, r3
 80052ea:	617b      	str	r3, [r7, #20]
    break;
 80052ec:	e00c      	b.n	8005308 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052ee:	4a12      	ldr	r2, [pc, #72]	@ (8005338 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f6:	4a0e      	ldr	r2, [pc, #56]	@ (8005330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80052f8:	68d2      	ldr	r2, [r2, #12]
 80052fa:	0a12      	lsrs	r2, r2, #8
 80052fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005300:	fb02 f303 	mul.w	r3, r2, r3
 8005304:	617b      	str	r3, [r7, #20]
    break;
 8005306:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005308:	4b09      	ldr	r3, [pc, #36]	@ (8005330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	0e5b      	lsrs	r3, r3, #25
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	3301      	adds	r3, #1
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005320:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005322:	687b      	ldr	r3, [r7, #4]
}
 8005324:	4618      	mov	r0, r3
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	40021000 	.word	0x40021000
 8005334:	016e3600 	.word	0x016e3600
 8005338:	00f42400 	.word	0x00f42400

0800533c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005344:	2300      	movs	r3, #0
 8005346:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005348:	2300      	movs	r3, #0
 800534a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 8098 	beq.w	800548a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800535a:	2300      	movs	r3, #0
 800535c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800535e:	4b43      	ldr	r3, [pc, #268]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10d      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800536a:	4b40      	ldr	r3, [pc, #256]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800536c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800536e:	4a3f      	ldr	r2, [pc, #252]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005374:	6593      	str	r3, [r2, #88]	@ 0x58
 8005376:	4b3d      	ldr	r3, [pc, #244]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800537a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800537e:	60bb      	str	r3, [r7, #8]
 8005380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005382:	2301      	movs	r3, #1
 8005384:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005386:	4b3a      	ldr	r3, [pc, #232]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a39      	ldr	r2, [pc, #228]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800538c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005390:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005392:	f7fd f95f 	bl	8002654 <HAL_GetTick>
 8005396:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005398:	e009      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800539a:	f7fd f95b 	bl	8002654 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d902      	bls.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	74fb      	strb	r3, [r7, #19]
        break;
 80053ac:	e005      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053ae:	4b30      	ldr	r3, [pc, #192]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d0ef      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80053ba:	7cfb      	ldrb	r3, [r7, #19]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d159      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053c0:	4b2a      	ldr	r3, [pc, #168]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053ca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d01e      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d019      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053dc:	4b23      	ldr	r3, [pc, #140]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053e8:	4b20      	ldr	r3, [pc, #128]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053ee:	4a1f      	ldr	r2, [pc, #124]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053f8:	4b1c      	ldr	r3, [pc, #112]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053fe:	4a1b      	ldr	r2, [pc, #108]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005400:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005408:	4a18      	ldr	r2, [pc, #96]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d016      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541a:	f7fd f91b 	bl	8002654 <HAL_GetTick>
 800541e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005420:	e00b      	b.n	800543a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005422:	f7fd f917 	bl	8002654 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005430:	4293      	cmp	r3, r2
 8005432:	d902      	bls.n	800543a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	74fb      	strb	r3, [r7, #19]
            break;
 8005438:	e006      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800543a:	4b0c      	ldr	r3, [pc, #48]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800543c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0ec      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005448:	7cfb      	ldrb	r3, [r7, #19]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10b      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800544e:	4b07      	ldr	r3, [pc, #28]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005454:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800545c:	4903      	ldr	r1, [pc, #12]	@ (800546c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800545e:	4313      	orrs	r3, r2
 8005460:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005464:	e008      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005466:	7cfb      	ldrb	r3, [r7, #19]
 8005468:	74bb      	strb	r3, [r7, #18]
 800546a:	e005      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800546c:	40021000 	.word	0x40021000
 8005470:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005474:	7cfb      	ldrb	r3, [r7, #19]
 8005476:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005478:	7c7b      	ldrb	r3, [r7, #17]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d105      	bne.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800547e:	4ba7      	ldr	r3, [pc, #668]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005482:	4aa6      	ldr	r2, [pc, #664]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005484:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005488:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005496:	4ba1      	ldr	r3, [pc, #644]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800549c:	f023 0203 	bic.w	r2, r3, #3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	499d      	ldr	r1, [pc, #628]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054b8:	4b98      	ldr	r3, [pc, #608]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054be:	f023 020c 	bic.w	r2, r3, #12
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	4995      	ldr	r1, [pc, #596]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0304 	and.w	r3, r3, #4
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054da:	4b90      	ldr	r3, [pc, #576]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	498c      	ldr	r1, [pc, #560]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054fc:	4b87      	ldr	r3, [pc, #540]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005502:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	4984      	ldr	r1, [pc, #528]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800550c:	4313      	orrs	r3, r2
 800550e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0310 	and.w	r3, r3, #16
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800551e:	4b7f      	ldr	r3, [pc, #508]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005524:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	497b      	ldr	r1, [pc, #492]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0320 	and.w	r3, r3, #32
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005540:	4b76      	ldr	r3, [pc, #472]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005546:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	4973      	ldr	r1, [pc, #460]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005562:	4b6e      	ldr	r3, [pc, #440]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005568:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	496a      	ldr	r1, [pc, #424]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00a      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005584:	4b65      	ldr	r3, [pc, #404]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	4962      	ldr	r1, [pc, #392]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055a6:	4b5d      	ldr	r3, [pc, #372]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b4:	4959      	ldr	r1, [pc, #356]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00a      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055c8:	4b54      	ldr	r3, [pc, #336]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055ce:	f023 0203 	bic.w	r2, r3, #3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d6:	4951      	ldr	r1, [pc, #324]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055ea:	4b4c      	ldr	r3, [pc, #304]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f8:	4948      	ldr	r1, [pc, #288]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005608:	2b00      	cmp	r3, #0
 800560a:	d015      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800560c:	4b43      	ldr	r3, [pc, #268]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005612:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561a:	4940      	ldr	r1, [pc, #256]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005626:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800562a:	d105      	bne.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800562c:	4b3b      	ldr	r3, [pc, #236]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	4a3a      	ldr	r2, [pc, #232]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005632:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005636:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005640:	2b00      	cmp	r3, #0
 8005642:	d015      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005644:	4b35      	ldr	r3, [pc, #212]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800564a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005652:	4932      	ldr	r1, [pc, #200]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005654:	4313      	orrs	r3, r2
 8005656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800565e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005662:	d105      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005664:	4b2d      	ldr	r3, [pc, #180]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	4a2c      	ldr	r2, [pc, #176]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800566a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800566e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d015      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800567c:	4b27      	ldr	r3, [pc, #156]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800567e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005682:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800568a:	4924      	ldr	r1, [pc, #144]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800568c:	4313      	orrs	r3, r2
 800568e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005696:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800569a:	d105      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800569c:	4b1f      	ldr	r3, [pc, #124]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	4a1e      	ldr	r2, [pc, #120]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d015      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056b4:	4b19      	ldr	r3, [pc, #100]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c2:	4916      	ldr	r1, [pc, #88]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056d2:	d105      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056d4:	4b11      	ldr	r3, [pc, #68]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	4a10      	ldr	r2, [pc, #64]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d019      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056ec:	4b0b      	ldr	r3, [pc, #44]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fa:	4908      	ldr	r1, [pc, #32]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005706:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800570a:	d109      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800570c:	4b03      	ldr	r3, [pc, #12]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	4a02      	ldr	r2, [pc, #8]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005712:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005716:	60d3      	str	r3, [r2, #12]
 8005718:	e002      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800571a:	bf00      	nop
 800571c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d015      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800572c:	4b29      	ldr	r3, [pc, #164]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800572e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005732:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800573a:	4926      	ldr	r1, [pc, #152]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800573c:	4313      	orrs	r3, r2
 800573e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005746:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800574a:	d105      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800574c:	4b21      	ldr	r3, [pc, #132]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	4a20      	ldr	r2, [pc, #128]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005756:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d015      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005764:	4b1b      	ldr	r3, [pc, #108]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800576a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005772:	4918      	ldr	r1, [pc, #96]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005774:	4313      	orrs	r3, r2
 8005776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800577e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005782:	d105      	bne.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005784:	4b13      	ldr	r3, [pc, #76]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	4a12      	ldr	r2, [pc, #72]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800578a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800578e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d015      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800579c:	4b0d      	ldr	r3, [pc, #52]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800579e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057aa:	490a      	ldr	r1, [pc, #40]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80057ba:	d105      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057bc:	4b05      	ldr	r3, [pc, #20]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	4a04      	ldr	r2, [pc, #16]	@ (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80057c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	40021000 	.word	0x40021000

080057d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e049      	b.n	800587e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d106      	bne.n	8005804 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f841 	bl	8005886 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3304      	adds	r3, #4
 8005814:	4619      	mov	r1, r3
 8005816:	4610      	mov	r0, r2
 8005818:	f000 fd7a 	bl	8006310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr
	...

0800589c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d001      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e054      	b.n	800595e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f042 0201 	orr.w	r2, r2, #1
 80058ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a26      	ldr	r2, [pc, #152]	@ (800596c <HAL_TIM_Base_Start_IT+0xd0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d022      	beq.n	800591c <HAL_TIM_Base_Start_IT+0x80>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058de:	d01d      	beq.n	800591c <HAL_TIM_Base_Start_IT+0x80>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a22      	ldr	r2, [pc, #136]	@ (8005970 <HAL_TIM_Base_Start_IT+0xd4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d018      	beq.n	800591c <HAL_TIM_Base_Start_IT+0x80>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a21      	ldr	r2, [pc, #132]	@ (8005974 <HAL_TIM_Base_Start_IT+0xd8>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d013      	beq.n	800591c <HAL_TIM_Base_Start_IT+0x80>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005978 <HAL_TIM_Base_Start_IT+0xdc>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00e      	beq.n	800591c <HAL_TIM_Base_Start_IT+0x80>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a1e      	ldr	r2, [pc, #120]	@ (800597c <HAL_TIM_Base_Start_IT+0xe0>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d009      	beq.n	800591c <HAL_TIM_Base_Start_IT+0x80>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1c      	ldr	r2, [pc, #112]	@ (8005980 <HAL_TIM_Base_Start_IT+0xe4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d004      	beq.n	800591c <HAL_TIM_Base_Start_IT+0x80>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a1b      	ldr	r2, [pc, #108]	@ (8005984 <HAL_TIM_Base_Start_IT+0xe8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d115      	bne.n	8005948 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	4b19      	ldr	r3, [pc, #100]	@ (8005988 <HAL_TIM_Base_Start_IT+0xec>)
 8005924:	4013      	ands	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2b06      	cmp	r3, #6
 800592c:	d015      	beq.n	800595a <HAL_TIM_Base_Start_IT+0xbe>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005934:	d011      	beq.n	800595a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f042 0201 	orr.w	r2, r2, #1
 8005944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005946:	e008      	b.n	800595a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0201 	orr.w	r2, r2, #1
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	e000      	b.n	800595c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800595a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40012c00 	.word	0x40012c00
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800
 8005978:	40000c00 	.word	0x40000c00
 800597c:	40013400 	.word	0x40013400
 8005980:	40014000 	.word	0x40014000
 8005984:	40015000 	.word	0x40015000
 8005988:	00010007 	.word	0x00010007

0800598c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e049      	b.n	8005a32 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d106      	bne.n	80059b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7fc fa46 	bl	8001e44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	3304      	adds	r3, #4
 80059c8:	4619      	mov	r1, r3
 80059ca:	4610      	mov	r0, r2
 80059cc:	f000 fca0 	bl	8006310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d109      	bne.n	8005a60 <HAL_TIM_PWM_Start+0x24>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	bf14      	ite	ne
 8005a58:	2301      	movne	r3, #1
 8005a5a:	2300      	moveq	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	e03c      	b.n	8005ada <HAL_TIM_PWM_Start+0x9e>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d109      	bne.n	8005a7a <HAL_TIM_PWM_Start+0x3e>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	bf14      	ite	ne
 8005a72:	2301      	movne	r3, #1
 8005a74:	2300      	moveq	r3, #0
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	e02f      	b.n	8005ada <HAL_TIM_PWM_Start+0x9e>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d109      	bne.n	8005a94 <HAL_TIM_PWM_Start+0x58>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	bf14      	ite	ne
 8005a8c:	2301      	movne	r3, #1
 8005a8e:	2300      	moveq	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	e022      	b.n	8005ada <HAL_TIM_PWM_Start+0x9e>
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	2b0c      	cmp	r3, #12
 8005a98:	d109      	bne.n	8005aae <HAL_TIM_PWM_Start+0x72>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	bf14      	ite	ne
 8005aa6:	2301      	movne	r3, #1
 8005aa8:	2300      	moveq	r3, #0
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	e015      	b.n	8005ada <HAL_TIM_PWM_Start+0x9e>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b10      	cmp	r3, #16
 8005ab2:	d109      	bne.n	8005ac8 <HAL_TIM_PWM_Start+0x8c>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	bf14      	ite	ne
 8005ac0:	2301      	movne	r3, #1
 8005ac2:	2300      	moveq	r3, #0
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	e008      	b.n	8005ada <HAL_TIM_PWM_Start+0x9e>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	bf14      	ite	ne
 8005ad4:	2301      	movne	r3, #1
 8005ad6:	2300      	moveq	r3, #0
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e0a6      	b.n	8005c30 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d104      	bne.n	8005af2 <HAL_TIM_PWM_Start+0xb6>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005af0:	e023      	b.n	8005b3a <HAL_TIM_PWM_Start+0xfe>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	d104      	bne.n	8005b02 <HAL_TIM_PWM_Start+0xc6>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b00:	e01b      	b.n	8005b3a <HAL_TIM_PWM_Start+0xfe>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d104      	bne.n	8005b12 <HAL_TIM_PWM_Start+0xd6>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b10:	e013      	b.n	8005b3a <HAL_TIM_PWM_Start+0xfe>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b0c      	cmp	r3, #12
 8005b16:	d104      	bne.n	8005b22 <HAL_TIM_PWM_Start+0xe6>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b20:	e00b      	b.n	8005b3a <HAL_TIM_PWM_Start+0xfe>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b10      	cmp	r3, #16
 8005b26:	d104      	bne.n	8005b32 <HAL_TIM_PWM_Start+0xf6>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b30:	e003      	b.n	8005b3a <HAL_TIM_PWM_Start+0xfe>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2202      	movs	r2, #2
 8005b36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	6839      	ldr	r1, [r7, #0]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f001 f82a 	bl	8006b9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a3a      	ldr	r2, [pc, #232]	@ (8005c38 <HAL_TIM_PWM_Start+0x1fc>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d018      	beq.n	8005b84 <HAL_TIM_PWM_Start+0x148>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a39      	ldr	r2, [pc, #228]	@ (8005c3c <HAL_TIM_PWM_Start+0x200>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d013      	beq.n	8005b84 <HAL_TIM_PWM_Start+0x148>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a37      	ldr	r2, [pc, #220]	@ (8005c40 <HAL_TIM_PWM_Start+0x204>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00e      	beq.n	8005b84 <HAL_TIM_PWM_Start+0x148>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a36      	ldr	r2, [pc, #216]	@ (8005c44 <HAL_TIM_PWM_Start+0x208>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d009      	beq.n	8005b84 <HAL_TIM_PWM_Start+0x148>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a34      	ldr	r2, [pc, #208]	@ (8005c48 <HAL_TIM_PWM_Start+0x20c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d004      	beq.n	8005b84 <HAL_TIM_PWM_Start+0x148>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a33      	ldr	r2, [pc, #204]	@ (8005c4c <HAL_TIM_PWM_Start+0x210>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d101      	bne.n	8005b88 <HAL_TIM_PWM_Start+0x14c>
 8005b84:	2301      	movs	r3, #1
 8005b86:	e000      	b.n	8005b8a <HAL_TIM_PWM_Start+0x14e>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d007      	beq.n	8005b9e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b9c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a25      	ldr	r2, [pc, #148]	@ (8005c38 <HAL_TIM_PWM_Start+0x1fc>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d022      	beq.n	8005bee <HAL_TIM_PWM_Start+0x1b2>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bb0:	d01d      	beq.n	8005bee <HAL_TIM_PWM_Start+0x1b2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a26      	ldr	r2, [pc, #152]	@ (8005c50 <HAL_TIM_PWM_Start+0x214>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d018      	beq.n	8005bee <HAL_TIM_PWM_Start+0x1b2>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a24      	ldr	r2, [pc, #144]	@ (8005c54 <HAL_TIM_PWM_Start+0x218>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d013      	beq.n	8005bee <HAL_TIM_PWM_Start+0x1b2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a23      	ldr	r2, [pc, #140]	@ (8005c58 <HAL_TIM_PWM_Start+0x21c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00e      	beq.n	8005bee <HAL_TIM_PWM_Start+0x1b2>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a19      	ldr	r2, [pc, #100]	@ (8005c3c <HAL_TIM_PWM_Start+0x200>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d009      	beq.n	8005bee <HAL_TIM_PWM_Start+0x1b2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a18      	ldr	r2, [pc, #96]	@ (8005c40 <HAL_TIM_PWM_Start+0x204>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d004      	beq.n	8005bee <HAL_TIM_PWM_Start+0x1b2>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a18      	ldr	r2, [pc, #96]	@ (8005c4c <HAL_TIM_PWM_Start+0x210>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d115      	bne.n	8005c1a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	4b19      	ldr	r3, [pc, #100]	@ (8005c5c <HAL_TIM_PWM_Start+0x220>)
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b06      	cmp	r3, #6
 8005bfe:	d015      	beq.n	8005c2c <HAL_TIM_PWM_Start+0x1f0>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c06:	d011      	beq.n	8005c2c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0201 	orr.w	r2, r2, #1
 8005c16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c18:	e008      	b.n	8005c2c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f042 0201 	orr.w	r2, r2, #1
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	e000      	b.n	8005c2e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40012c00 	.word	0x40012c00
 8005c3c:	40013400 	.word	0x40013400
 8005c40:	40014000 	.word	0x40014000
 8005c44:	40014400 	.word	0x40014400
 8005c48:	40014800 	.word	0x40014800
 8005c4c:	40015000 	.word	0x40015000
 8005c50:	40000400 	.word	0x40000400
 8005c54:	40000800 	.word	0x40000800
 8005c58:	40000c00 	.word	0x40000c00
 8005c5c:	00010007 	.word	0x00010007

08005c60 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	6839      	ldr	r1, [r7, #0]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 ff92 	bl	8006b9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a40      	ldr	r2, [pc, #256]	@ (8005d80 <HAL_TIM_PWM_Stop+0x120>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d018      	beq.n	8005cb4 <HAL_TIM_PWM_Stop+0x54>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a3f      	ldr	r2, [pc, #252]	@ (8005d84 <HAL_TIM_PWM_Stop+0x124>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d013      	beq.n	8005cb4 <HAL_TIM_PWM_Stop+0x54>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a3d      	ldr	r2, [pc, #244]	@ (8005d88 <HAL_TIM_PWM_Stop+0x128>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d00e      	beq.n	8005cb4 <HAL_TIM_PWM_Stop+0x54>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a3c      	ldr	r2, [pc, #240]	@ (8005d8c <HAL_TIM_PWM_Stop+0x12c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d009      	beq.n	8005cb4 <HAL_TIM_PWM_Stop+0x54>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a3a      	ldr	r2, [pc, #232]	@ (8005d90 <HAL_TIM_PWM_Stop+0x130>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d004      	beq.n	8005cb4 <HAL_TIM_PWM_Stop+0x54>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a39      	ldr	r2, [pc, #228]	@ (8005d94 <HAL_TIM_PWM_Stop+0x134>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d101      	bne.n	8005cb8 <HAL_TIM_PWM_Stop+0x58>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e000      	b.n	8005cba <HAL_TIM_PWM_Stop+0x5a>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d017      	beq.n	8005cee <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6a1a      	ldr	r2, [r3, #32]
 8005cc4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005cc8:	4013      	ands	r3, r2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10f      	bne.n	8005cee <HAL_TIM_PWM_Stop+0x8e>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6a1a      	ldr	r2, [r3, #32]
 8005cd4:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005cd8:	4013      	ands	r3, r2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d107      	bne.n	8005cee <HAL_TIM_PWM_Stop+0x8e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005cec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6a1a      	ldr	r2, [r3, #32]
 8005cf4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10f      	bne.n	8005d1e <HAL_TIM_PWM_Stop+0xbe>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6a1a      	ldr	r2, [r3, #32]
 8005d04:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005d08:	4013      	ands	r3, r2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d107      	bne.n	8005d1e <HAL_TIM_PWM_Stop+0xbe>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0201 	bic.w	r2, r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d104      	bne.n	8005d2e <HAL_TIM_PWM_Stop+0xce>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d2c:	e023      	b.n	8005d76 <HAL_TIM_PWM_Stop+0x116>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2b04      	cmp	r3, #4
 8005d32:	d104      	bne.n	8005d3e <HAL_TIM_PWM_Stop+0xde>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d3c:	e01b      	b.n	8005d76 <HAL_TIM_PWM_Stop+0x116>
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d104      	bne.n	8005d4e <HAL_TIM_PWM_Stop+0xee>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d4c:	e013      	b.n	8005d76 <HAL_TIM_PWM_Stop+0x116>
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b0c      	cmp	r3, #12
 8005d52:	d104      	bne.n	8005d5e <HAL_TIM_PWM_Stop+0xfe>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d5c:	e00b      	b.n	8005d76 <HAL_TIM_PWM_Stop+0x116>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b10      	cmp	r3, #16
 8005d62:	d104      	bne.n	8005d6e <HAL_TIM_PWM_Stop+0x10e>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d6c:	e003      	b.n	8005d76 <HAL_TIM_PWM_Stop+0x116>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40012c00 	.word	0x40012c00
 8005d84:	40013400 	.word	0x40013400
 8005d88:	40014000 	.word	0x40014000
 8005d8c:	40014400 	.word	0x40014400
 8005d90:	40014800 	.word	0x40014800
 8005d94:	40015000 	.word	0x40015000

08005d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d122      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d11b      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f06f 0202 	mvn.w	r2, #2
 8005dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	f003 0303 	and.w	r3, r3, #3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fa7a 	bl	80062d4 <HAL_TIM_IC_CaptureCallback>
 8005de0:	e005      	b.n	8005dee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fa6c 	bl	80062c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fa7d 	bl	80062e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d122      	bne.n	8005e48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b04      	cmp	r3, #4
 8005e0e:	d11b      	bne.n	8005e48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f06f 0204 	mvn.w	r2, #4
 8005e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fa50 	bl	80062d4 <HAL_TIM_IC_CaptureCallback>
 8005e34:	e005      	b.n	8005e42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fa42 	bl	80062c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fa53 	bl	80062e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b08      	cmp	r3, #8
 8005e54:	d122      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f003 0308 	and.w	r3, r3, #8
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d11b      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f06f 0208 	mvn.w	r2, #8
 8005e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2204      	movs	r2, #4
 8005e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fa26 	bl	80062d4 <HAL_TIM_IC_CaptureCallback>
 8005e88:	e005      	b.n	8005e96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fa18 	bl	80062c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fa29 	bl	80062e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f003 0310 	and.w	r3, r3, #16
 8005ea6:	2b10      	cmp	r3, #16
 8005ea8:	d122      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f003 0310 	and.w	r3, r3, #16
 8005eb4:	2b10      	cmp	r3, #16
 8005eb6:	d11b      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f06f 0210 	mvn.w	r2, #16
 8005ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2208      	movs	r2, #8
 8005ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f9fc 	bl	80062d4 <HAL_TIM_IC_CaptureCallback>
 8005edc:	e005      	b.n	8005eea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f9ee 	bl	80062c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f9ff 	bl	80062e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d10e      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d107      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0201 	mvn.w	r2, #1
 8005f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fb fcc0 	bl	800189c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f26:	2b80      	cmp	r3, #128	@ 0x80
 8005f28:	d10e      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f34:	2b80      	cmp	r3, #128	@ 0x80
 8005f36:	d107      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f001 f970 	bl	8007228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f56:	d10e      	bne.n	8005f76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f62:	2b80      	cmp	r3, #128	@ 0x80
 8005f64:	d107      	bne.n	8005f76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f001 f963 	bl	800723c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f80:	2b40      	cmp	r3, #64	@ 0x40
 8005f82:	d10e      	bne.n	8005fa2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f8e:	2b40      	cmp	r3, #64	@ 0x40
 8005f90:	d107      	bne.n	8005fa2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f9ad 	bl	80062fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	f003 0320 	and.w	r3, r3, #32
 8005fac:	2b20      	cmp	r3, #32
 8005fae:	d10e      	bne.n	8005fce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	d107      	bne.n	8005fce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f06f 0220 	mvn.w	r2, #32
 8005fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f001 f923 	bl	8007214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fdc:	d10f      	bne.n	8005ffe <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fe8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fec:	d107      	bne.n	8005ffe <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f001 f929 	bl	8007250 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006008:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800600c:	d10f      	bne.n	800602e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006018:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800601c:	d107      	bne.n	800602e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f001 f91b 	bl	8007264 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006038:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800603c:	d10f      	bne.n	800605e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006048:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800604c:	d107      	bne.n	800605e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f001 f90d 	bl	8007278 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006068:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800606c:	d10f      	bne.n	800608e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006078:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800607c:	d107      	bne.n	800608e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f001 f8ff 	bl	800728c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800608e:	bf00      	nop
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060b2:	2302      	movs	r3, #2
 80060b4:	e0ff      	b.n	80062b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b14      	cmp	r3, #20
 80060c2:	f200 80f0 	bhi.w	80062a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80060c6:	a201      	add	r2, pc, #4	@ (adr r2, 80060cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060cc:	08006121 	.word	0x08006121
 80060d0:	080062a7 	.word	0x080062a7
 80060d4:	080062a7 	.word	0x080062a7
 80060d8:	080062a7 	.word	0x080062a7
 80060dc:	08006161 	.word	0x08006161
 80060e0:	080062a7 	.word	0x080062a7
 80060e4:	080062a7 	.word	0x080062a7
 80060e8:	080062a7 	.word	0x080062a7
 80060ec:	080061a3 	.word	0x080061a3
 80060f0:	080062a7 	.word	0x080062a7
 80060f4:	080062a7 	.word	0x080062a7
 80060f8:	080062a7 	.word	0x080062a7
 80060fc:	080061e3 	.word	0x080061e3
 8006100:	080062a7 	.word	0x080062a7
 8006104:	080062a7 	.word	0x080062a7
 8006108:	080062a7 	.word	0x080062a7
 800610c:	08006225 	.word	0x08006225
 8006110:	080062a7 	.word	0x080062a7
 8006114:	080062a7 	.word	0x080062a7
 8006118:	080062a7 	.word	0x080062a7
 800611c:	08006265 	.word	0x08006265
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68b9      	ldr	r1, [r7, #8]
 8006126:	4618      	mov	r0, r3
 8006128:	f000 f99a 	bl	8006460 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699a      	ldr	r2, [r3, #24]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0208 	orr.w	r2, r2, #8
 800613a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 0204 	bic.w	r2, r2, #4
 800614a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6999      	ldr	r1, [r3, #24]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	691a      	ldr	r2, [r3, #16]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	430a      	orrs	r2, r1
 800615c:	619a      	str	r2, [r3, #24]
      break;
 800615e:	e0a5      	b.n	80062ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68b9      	ldr	r1, [r7, #8]
 8006166:	4618      	mov	r0, r3
 8006168:	f000 fa14 	bl	8006594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800617a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699a      	ldr	r2, [r3, #24]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800618a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6999      	ldr	r1, [r3, #24]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	021a      	lsls	r2, r3, #8
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	619a      	str	r2, [r3, #24]
      break;
 80061a0:	e084      	b.n	80062ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68b9      	ldr	r1, [r7, #8]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 fa87 	bl	80066bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69da      	ldr	r2, [r3, #28]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f042 0208 	orr.w	r2, r2, #8
 80061bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69da      	ldr	r2, [r3, #28]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0204 	bic.w	r2, r2, #4
 80061cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69d9      	ldr	r1, [r3, #28]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	691a      	ldr	r2, [r3, #16]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	61da      	str	r2, [r3, #28]
      break;
 80061e0:	e064      	b.n	80062ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 faf9 	bl	80067e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800620c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69d9      	ldr	r1, [r3, #28]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	021a      	lsls	r2, r3, #8
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	61da      	str	r2, [r3, #28]
      break;
 8006222:	e043      	b.n	80062ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68b9      	ldr	r1, [r7, #8]
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fb6c 	bl	8006908 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0208 	orr.w	r2, r2, #8
 800623e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f022 0204 	bic.w	r2, r2, #4
 800624e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	691a      	ldr	r2, [r3, #16]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006262:	e023      	b.n	80062ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68b9      	ldr	r1, [r7, #8]
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fbb6 	bl	80069dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800627e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800628e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	021a      	lsls	r2, r3, #8
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80062a4:	e002      	b.n	80062ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	75fb      	strb	r3, [r7, #23]
      break;
 80062aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3718      	adds	r7, #24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop

080062c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a46      	ldr	r2, [pc, #280]	@ (800643c <TIM_Base_SetConfig+0x12c>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d017      	beq.n	8006358 <TIM_Base_SetConfig+0x48>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800632e:	d013      	beq.n	8006358 <TIM_Base_SetConfig+0x48>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a43      	ldr	r2, [pc, #268]	@ (8006440 <TIM_Base_SetConfig+0x130>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00f      	beq.n	8006358 <TIM_Base_SetConfig+0x48>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a42      	ldr	r2, [pc, #264]	@ (8006444 <TIM_Base_SetConfig+0x134>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d00b      	beq.n	8006358 <TIM_Base_SetConfig+0x48>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a41      	ldr	r2, [pc, #260]	@ (8006448 <TIM_Base_SetConfig+0x138>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d007      	beq.n	8006358 <TIM_Base_SetConfig+0x48>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a40      	ldr	r2, [pc, #256]	@ (800644c <TIM_Base_SetConfig+0x13c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d003      	beq.n	8006358 <TIM_Base_SetConfig+0x48>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a3f      	ldr	r2, [pc, #252]	@ (8006450 <TIM_Base_SetConfig+0x140>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d108      	bne.n	800636a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800635e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a33      	ldr	r2, [pc, #204]	@ (800643c <TIM_Base_SetConfig+0x12c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d023      	beq.n	80063ba <TIM_Base_SetConfig+0xaa>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006378:	d01f      	beq.n	80063ba <TIM_Base_SetConfig+0xaa>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a30      	ldr	r2, [pc, #192]	@ (8006440 <TIM_Base_SetConfig+0x130>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d01b      	beq.n	80063ba <TIM_Base_SetConfig+0xaa>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a2f      	ldr	r2, [pc, #188]	@ (8006444 <TIM_Base_SetConfig+0x134>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d017      	beq.n	80063ba <TIM_Base_SetConfig+0xaa>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a2e      	ldr	r2, [pc, #184]	@ (8006448 <TIM_Base_SetConfig+0x138>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d013      	beq.n	80063ba <TIM_Base_SetConfig+0xaa>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a2d      	ldr	r2, [pc, #180]	@ (800644c <TIM_Base_SetConfig+0x13c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d00f      	beq.n	80063ba <TIM_Base_SetConfig+0xaa>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a2d      	ldr	r2, [pc, #180]	@ (8006454 <TIM_Base_SetConfig+0x144>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d00b      	beq.n	80063ba <TIM_Base_SetConfig+0xaa>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a2c      	ldr	r2, [pc, #176]	@ (8006458 <TIM_Base_SetConfig+0x148>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d007      	beq.n	80063ba <TIM_Base_SetConfig+0xaa>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a2b      	ldr	r2, [pc, #172]	@ (800645c <TIM_Base_SetConfig+0x14c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d003      	beq.n	80063ba <TIM_Base_SetConfig+0xaa>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a26      	ldr	r2, [pc, #152]	@ (8006450 <TIM_Base_SetConfig+0x140>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d108      	bne.n	80063cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a12      	ldr	r2, [pc, #72]	@ (800643c <TIM_Base_SetConfig+0x12c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d013      	beq.n	8006420 <TIM_Base_SetConfig+0x110>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a14      	ldr	r2, [pc, #80]	@ (800644c <TIM_Base_SetConfig+0x13c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00f      	beq.n	8006420 <TIM_Base_SetConfig+0x110>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a14      	ldr	r2, [pc, #80]	@ (8006454 <TIM_Base_SetConfig+0x144>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d00b      	beq.n	8006420 <TIM_Base_SetConfig+0x110>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a13      	ldr	r2, [pc, #76]	@ (8006458 <TIM_Base_SetConfig+0x148>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d007      	beq.n	8006420 <TIM_Base_SetConfig+0x110>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a12      	ldr	r2, [pc, #72]	@ (800645c <TIM_Base_SetConfig+0x14c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d003      	beq.n	8006420 <TIM_Base_SetConfig+0x110>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a0d      	ldr	r2, [pc, #52]	@ (8006450 <TIM_Base_SetConfig+0x140>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d103      	bne.n	8006428 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	691a      	ldr	r2, [r3, #16]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	615a      	str	r2, [r3, #20]
}
 800642e:	bf00      	nop
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40012c00 	.word	0x40012c00
 8006440:	40000400 	.word	0x40000400
 8006444:	40000800 	.word	0x40000800
 8006448:	40000c00 	.word	0x40000c00
 800644c:	40013400 	.word	0x40013400
 8006450:	40015000 	.word	0x40015000
 8006454:	40014000 	.word	0x40014000
 8006458:	40014400 	.word	0x40014400
 800645c:	40014800 	.word	0x40014800

08006460 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	f023 0201 	bic.w	r2, r3, #1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800648e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0303 	bic.w	r3, r3, #3
 800649a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f023 0302 	bic.w	r3, r3, #2
 80064ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a30      	ldr	r2, [pc, #192]	@ (800657c <TIM_OC1_SetConfig+0x11c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d013      	beq.n	80064e8 <TIM_OC1_SetConfig+0x88>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a2f      	ldr	r2, [pc, #188]	@ (8006580 <TIM_OC1_SetConfig+0x120>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d00f      	beq.n	80064e8 <TIM_OC1_SetConfig+0x88>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a2e      	ldr	r2, [pc, #184]	@ (8006584 <TIM_OC1_SetConfig+0x124>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d00b      	beq.n	80064e8 <TIM_OC1_SetConfig+0x88>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a2d      	ldr	r2, [pc, #180]	@ (8006588 <TIM_OC1_SetConfig+0x128>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d007      	beq.n	80064e8 <TIM_OC1_SetConfig+0x88>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a2c      	ldr	r2, [pc, #176]	@ (800658c <TIM_OC1_SetConfig+0x12c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d003      	beq.n	80064e8 <TIM_OC1_SetConfig+0x88>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a2b      	ldr	r2, [pc, #172]	@ (8006590 <TIM_OC1_SetConfig+0x130>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d10c      	bne.n	8006502 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f023 0308 	bic.w	r3, r3, #8
 80064ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f023 0304 	bic.w	r3, r3, #4
 8006500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a1d      	ldr	r2, [pc, #116]	@ (800657c <TIM_OC1_SetConfig+0x11c>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d013      	beq.n	8006532 <TIM_OC1_SetConfig+0xd2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a1c      	ldr	r2, [pc, #112]	@ (8006580 <TIM_OC1_SetConfig+0x120>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00f      	beq.n	8006532 <TIM_OC1_SetConfig+0xd2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a1b      	ldr	r2, [pc, #108]	@ (8006584 <TIM_OC1_SetConfig+0x124>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00b      	beq.n	8006532 <TIM_OC1_SetConfig+0xd2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a1a      	ldr	r2, [pc, #104]	@ (8006588 <TIM_OC1_SetConfig+0x128>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d007      	beq.n	8006532 <TIM_OC1_SetConfig+0xd2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a19      	ldr	r2, [pc, #100]	@ (800658c <TIM_OC1_SetConfig+0x12c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d003      	beq.n	8006532 <TIM_OC1_SetConfig+0xd2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a18      	ldr	r2, [pc, #96]	@ (8006590 <TIM_OC1_SetConfig+0x130>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d111      	bne.n	8006556 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4313      	orrs	r3, r2
 800654a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4313      	orrs	r3, r2
 8006554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	621a      	str	r2, [r3, #32]
}
 8006570:	bf00      	nop
 8006572:	371c      	adds	r7, #28
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	40012c00 	.word	0x40012c00
 8006580:	40013400 	.word	0x40013400
 8006584:	40014000 	.word	0x40014000
 8006588:	40014400 	.word	0x40014400
 800658c:	40014800 	.word	0x40014800
 8006590:	40015000 	.word	0x40015000

08006594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	f023 0210 	bic.w	r2, r3, #16
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	021b      	lsls	r3, r3, #8
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	4313      	orrs	r3, r2
 80065da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	f023 0320 	bic.w	r3, r3, #32
 80065e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	011b      	lsls	r3, r3, #4
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a2c      	ldr	r2, [pc, #176]	@ (80066a4 <TIM_OC2_SetConfig+0x110>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d007      	beq.n	8006608 <TIM_OC2_SetConfig+0x74>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a2b      	ldr	r2, [pc, #172]	@ (80066a8 <TIM_OC2_SetConfig+0x114>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d003      	beq.n	8006608 <TIM_OC2_SetConfig+0x74>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a2a      	ldr	r2, [pc, #168]	@ (80066ac <TIM_OC2_SetConfig+0x118>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d10d      	bne.n	8006624 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800660e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006622:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a1f      	ldr	r2, [pc, #124]	@ (80066a4 <TIM_OC2_SetConfig+0x110>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d013      	beq.n	8006654 <TIM_OC2_SetConfig+0xc0>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a1e      	ldr	r2, [pc, #120]	@ (80066a8 <TIM_OC2_SetConfig+0x114>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d00f      	beq.n	8006654 <TIM_OC2_SetConfig+0xc0>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a1e      	ldr	r2, [pc, #120]	@ (80066b0 <TIM_OC2_SetConfig+0x11c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00b      	beq.n	8006654 <TIM_OC2_SetConfig+0xc0>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a1d      	ldr	r2, [pc, #116]	@ (80066b4 <TIM_OC2_SetConfig+0x120>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d007      	beq.n	8006654 <TIM_OC2_SetConfig+0xc0>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a1c      	ldr	r2, [pc, #112]	@ (80066b8 <TIM_OC2_SetConfig+0x124>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d003      	beq.n	8006654 <TIM_OC2_SetConfig+0xc0>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a17      	ldr	r2, [pc, #92]	@ (80066ac <TIM_OC2_SetConfig+0x118>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d113      	bne.n	800667c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800665a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006662:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	4313      	orrs	r3, r2
 800666e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	4313      	orrs	r3, r2
 800667a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	621a      	str	r2, [r3, #32]
}
 8006696:	bf00      	nop
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	40012c00 	.word	0x40012c00
 80066a8:	40013400 	.word	0x40013400
 80066ac:	40015000 	.word	0x40015000
 80066b0:	40014000 	.word	0x40014000
 80066b4:	40014400 	.word	0x40014400
 80066b8:	40014800 	.word	0x40014800

080066bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0303 	bic.w	r3, r3, #3
 80066f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	021b      	lsls	r3, r3, #8
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a2b      	ldr	r2, [pc, #172]	@ (80067c8 <TIM_OC3_SetConfig+0x10c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d007      	beq.n	800672e <TIM_OC3_SetConfig+0x72>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a2a      	ldr	r2, [pc, #168]	@ (80067cc <TIM_OC3_SetConfig+0x110>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d003      	beq.n	800672e <TIM_OC3_SetConfig+0x72>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a29      	ldr	r2, [pc, #164]	@ (80067d0 <TIM_OC3_SetConfig+0x114>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d10d      	bne.n	800674a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	021b      	lsls	r3, r3, #8
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	4313      	orrs	r3, r2
 8006740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a1e      	ldr	r2, [pc, #120]	@ (80067c8 <TIM_OC3_SetConfig+0x10c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d013      	beq.n	800677a <TIM_OC3_SetConfig+0xbe>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a1d      	ldr	r2, [pc, #116]	@ (80067cc <TIM_OC3_SetConfig+0x110>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d00f      	beq.n	800677a <TIM_OC3_SetConfig+0xbe>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a1d      	ldr	r2, [pc, #116]	@ (80067d4 <TIM_OC3_SetConfig+0x118>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00b      	beq.n	800677a <TIM_OC3_SetConfig+0xbe>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a1c      	ldr	r2, [pc, #112]	@ (80067d8 <TIM_OC3_SetConfig+0x11c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d007      	beq.n	800677a <TIM_OC3_SetConfig+0xbe>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a1b      	ldr	r2, [pc, #108]	@ (80067dc <TIM_OC3_SetConfig+0x120>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d003      	beq.n	800677a <TIM_OC3_SetConfig+0xbe>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a16      	ldr	r2, [pc, #88]	@ (80067d0 <TIM_OC3_SetConfig+0x114>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d113      	bne.n	80067a2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	695b      	ldr	r3, [r3, #20]
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	4313      	orrs	r3, r2
 8006794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	011b      	lsls	r3, r3, #4
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	4313      	orrs	r3, r2
 80067a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	621a      	str	r2, [r3, #32]
}
 80067bc:	bf00      	nop
 80067be:	371c      	adds	r7, #28
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	40012c00 	.word	0x40012c00
 80067cc:	40013400 	.word	0x40013400
 80067d0:	40015000 	.word	0x40015000
 80067d4:	40014000 	.word	0x40014000
 80067d8:	40014400 	.word	0x40014400
 80067dc:	40014800 	.word	0x40014800

080067e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800680e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800681a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	021b      	lsls	r3, r3, #8
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	4313      	orrs	r3, r2
 8006826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800682e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	031b      	lsls	r3, r3, #12
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	4313      	orrs	r3, r2
 800683a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a2c      	ldr	r2, [pc, #176]	@ (80068f0 <TIM_OC4_SetConfig+0x110>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d007      	beq.n	8006854 <TIM_OC4_SetConfig+0x74>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a2b      	ldr	r2, [pc, #172]	@ (80068f4 <TIM_OC4_SetConfig+0x114>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d003      	beq.n	8006854 <TIM_OC4_SetConfig+0x74>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a2a      	ldr	r2, [pc, #168]	@ (80068f8 <TIM_OC4_SetConfig+0x118>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d10d      	bne.n	8006870 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800685a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	031b      	lsls	r3, r3, #12
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	4313      	orrs	r3, r2
 8006866:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800686e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a1f      	ldr	r2, [pc, #124]	@ (80068f0 <TIM_OC4_SetConfig+0x110>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d013      	beq.n	80068a0 <TIM_OC4_SetConfig+0xc0>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a1e      	ldr	r2, [pc, #120]	@ (80068f4 <TIM_OC4_SetConfig+0x114>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d00f      	beq.n	80068a0 <TIM_OC4_SetConfig+0xc0>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a1e      	ldr	r2, [pc, #120]	@ (80068fc <TIM_OC4_SetConfig+0x11c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00b      	beq.n	80068a0 <TIM_OC4_SetConfig+0xc0>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a1d      	ldr	r2, [pc, #116]	@ (8006900 <TIM_OC4_SetConfig+0x120>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d007      	beq.n	80068a0 <TIM_OC4_SetConfig+0xc0>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a1c      	ldr	r2, [pc, #112]	@ (8006904 <TIM_OC4_SetConfig+0x124>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d003      	beq.n	80068a0 <TIM_OC4_SetConfig+0xc0>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a17      	ldr	r2, [pc, #92]	@ (80068f8 <TIM_OC4_SetConfig+0x118>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d113      	bne.n	80068c8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068a6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068ae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	019b      	lsls	r3, r3, #6
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	019b      	lsls	r3, r3, #6
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	621a      	str	r2, [r3, #32]
}
 80068e2:	bf00      	nop
 80068e4:	371c      	adds	r7, #28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40012c00 	.word	0x40012c00
 80068f4:	40013400 	.word	0x40013400
 80068f8:	40015000 	.word	0x40015000
 80068fc:	40014000 	.word	0x40014000
 8006900:	40014400 	.word	0x40014400
 8006904:	40014800 	.word	0x40014800

08006908 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800693a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800694c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	041b      	lsls	r3, r3, #16
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	4313      	orrs	r3, r2
 8006958:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a19      	ldr	r2, [pc, #100]	@ (80069c4 <TIM_OC5_SetConfig+0xbc>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d013      	beq.n	800698a <TIM_OC5_SetConfig+0x82>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a18      	ldr	r2, [pc, #96]	@ (80069c8 <TIM_OC5_SetConfig+0xc0>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00f      	beq.n	800698a <TIM_OC5_SetConfig+0x82>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a17      	ldr	r2, [pc, #92]	@ (80069cc <TIM_OC5_SetConfig+0xc4>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d00b      	beq.n	800698a <TIM_OC5_SetConfig+0x82>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a16      	ldr	r2, [pc, #88]	@ (80069d0 <TIM_OC5_SetConfig+0xc8>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d007      	beq.n	800698a <TIM_OC5_SetConfig+0x82>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a15      	ldr	r2, [pc, #84]	@ (80069d4 <TIM_OC5_SetConfig+0xcc>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d003      	beq.n	800698a <TIM_OC5_SetConfig+0x82>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a14      	ldr	r2, [pc, #80]	@ (80069d8 <TIM_OC5_SetConfig+0xd0>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d109      	bne.n	800699e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006990:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	021b      	lsls	r3, r3, #8
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	4313      	orrs	r3, r2
 800699c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	621a      	str	r2, [r3, #32]
}
 80069b8:	bf00      	nop
 80069ba:	371c      	adds	r7, #28
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	40012c00 	.word	0x40012c00
 80069c8:	40013400 	.word	0x40013400
 80069cc:	40014000 	.word	0x40014000
 80069d0:	40014400 	.word	0x40014400
 80069d4:	40014800 	.word	0x40014800
 80069d8:	40015000 	.word	0x40015000

080069dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	021b      	lsls	r3, r3, #8
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	051b      	lsls	r3, r3, #20
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a1a      	ldr	r2, [pc, #104]	@ (8006a9c <TIM_OC6_SetConfig+0xc0>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d013      	beq.n	8006a60 <TIM_OC6_SetConfig+0x84>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a19      	ldr	r2, [pc, #100]	@ (8006aa0 <TIM_OC6_SetConfig+0xc4>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d00f      	beq.n	8006a60 <TIM_OC6_SetConfig+0x84>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a18      	ldr	r2, [pc, #96]	@ (8006aa4 <TIM_OC6_SetConfig+0xc8>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d00b      	beq.n	8006a60 <TIM_OC6_SetConfig+0x84>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a17      	ldr	r2, [pc, #92]	@ (8006aa8 <TIM_OC6_SetConfig+0xcc>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d007      	beq.n	8006a60 <TIM_OC6_SetConfig+0x84>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a16      	ldr	r2, [pc, #88]	@ (8006aac <TIM_OC6_SetConfig+0xd0>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d003      	beq.n	8006a60 <TIM_OC6_SetConfig+0x84>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a15      	ldr	r2, [pc, #84]	@ (8006ab0 <TIM_OC6_SetConfig+0xd4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d109      	bne.n	8006a74 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	029b      	lsls	r3, r3, #10
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	621a      	str	r2, [r3, #32]
}
 8006a8e:	bf00      	nop
 8006a90:	371c      	adds	r7, #28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	40012c00 	.word	0x40012c00
 8006aa0:	40013400 	.word	0x40013400
 8006aa4:	40014000 	.word	0x40014000
 8006aa8:	40014400 	.word	0x40014400
 8006aac:	40014800 	.word	0x40014800
 8006ab0:	40015000 	.word	0x40015000

08006ab4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
 8006ac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	f023 0201 	bic.w	r2, r3, #1
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4a28      	ldr	r2, [pc, #160]	@ (8006b80 <TIM_TI1_SetConfig+0xcc>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d01b      	beq.n	8006b1a <TIM_TI1_SetConfig+0x66>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ae8:	d017      	beq.n	8006b1a <TIM_TI1_SetConfig+0x66>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4a25      	ldr	r2, [pc, #148]	@ (8006b84 <TIM_TI1_SetConfig+0xd0>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d013      	beq.n	8006b1a <TIM_TI1_SetConfig+0x66>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	4a24      	ldr	r2, [pc, #144]	@ (8006b88 <TIM_TI1_SetConfig+0xd4>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d00f      	beq.n	8006b1a <TIM_TI1_SetConfig+0x66>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4a23      	ldr	r2, [pc, #140]	@ (8006b8c <TIM_TI1_SetConfig+0xd8>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d00b      	beq.n	8006b1a <TIM_TI1_SetConfig+0x66>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4a22      	ldr	r2, [pc, #136]	@ (8006b90 <TIM_TI1_SetConfig+0xdc>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d007      	beq.n	8006b1a <TIM_TI1_SetConfig+0x66>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4a21      	ldr	r2, [pc, #132]	@ (8006b94 <TIM_TI1_SetConfig+0xe0>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d003      	beq.n	8006b1a <TIM_TI1_SetConfig+0x66>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4a20      	ldr	r2, [pc, #128]	@ (8006b98 <TIM_TI1_SetConfig+0xe4>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d101      	bne.n	8006b1e <TIM_TI1_SetConfig+0x6a>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e000      	b.n	8006b20 <TIM_TI1_SetConfig+0x6c>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d008      	beq.n	8006b36 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f023 0303 	bic.w	r3, r3, #3
 8006b2a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	617b      	str	r3, [r7, #20]
 8006b34:	e003      	b.n	8006b3e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f043 0301 	orr.w	r3, r3, #1
 8006b3c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	011b      	lsls	r3, r3, #4
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f023 030a 	bic.w	r3, r3, #10
 8006b58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	f003 030a 	and.w	r3, r3, #10
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	621a      	str	r2, [r3, #32]
}
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	40012c00 	.word	0x40012c00
 8006b84:	40000400 	.word	0x40000400
 8006b88:	40000800 	.word	0x40000800
 8006b8c:	40000c00 	.word	0x40000c00
 8006b90:	40013400 	.word	0x40013400
 8006b94:	40014000 	.word	0x40014000
 8006b98:	40015000 	.word	0x40015000

08006b9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f003 031f 	and.w	r3, r3, #31
 8006bae:	2201      	movs	r2, #1
 8006bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6a1a      	ldr	r2, [r3, #32]
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	43db      	mvns	r3, r3
 8006bbe:	401a      	ands	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6a1a      	ldr	r2, [r3, #32]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f003 031f 	and.w	r3, r3, #31
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd4:	431a      	orrs	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	621a      	str	r2, [r3, #32]
}
 8006bda:	bf00      	nop
 8006bdc:	371c      	adds	r7, #28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b08a      	sub	sp, #40	@ 0x28
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
 8006bee:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e0a0      	b.n	8006d3c <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d106      	bne.n	8006c14 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7fb f938 	bl	8001e84 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	3304      	adds	r3, #4
 8006c24:	4619      	mov	r1, r3
 8006c26:	4610      	mov	r0, r2
 8006c28:	f7ff fb72 	bl	8006310 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6818      	ldr	r0, [r3, #0]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	6819      	ldr	r1, [r3, #0]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	2203      	movs	r2, #3
 8006c3a:	f7ff ff3b 	bl	8006ab4 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	699a      	ldr	r2, [r3, #24]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 020c 	bic.w	r2, r2, #12
 8006c4c:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6999      	ldr	r1, [r3, #24]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685a      	ldr	r2, [r3, #4]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006c6e:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	6812      	ldr	r2, [r2, #0]
 8006c7a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c82:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689a      	ldr	r2, [r3, #8]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c92:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	6812      	ldr	r2, [r2, #0]
 8006c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ca2:	f023 0307 	bic.w	r3, r3, #7
 8006ca6:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689a      	ldr	r2, [r3, #8]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f042 0204 	orr.w	r2, r2, #4
 8006cb6:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006cc0:	2370      	movs	r3, #112	@ 0x70
 8006cc2:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f107 020c 	add.w	r2, r7, #12
 8006cde:	4611      	mov	r1, r2
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7ff fc57 	bl	8006594 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6812      	ldr	r2, [r2, #0]
 8006cf0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006cf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cf8:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8006d08:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3728      	adds	r7, #40	@ 0x28
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d109      	bne.n	8006d68 <HAL_TIMEx_PWMN_Start+0x24>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	bf14      	ite	ne
 8006d60:	2301      	movne	r3, #1
 8006d62:	2300      	moveq	r3, #0
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	e022      	b.n	8006dae <HAL_TIMEx_PWMN_Start+0x6a>
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	d109      	bne.n	8006d82 <HAL_TIMEx_PWMN_Start+0x3e>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	bf14      	ite	ne
 8006d7a:	2301      	movne	r3, #1
 8006d7c:	2300      	moveq	r3, #0
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	e015      	b.n	8006dae <HAL_TIMEx_PWMN_Start+0x6a>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b08      	cmp	r3, #8
 8006d86:	d109      	bne.n	8006d9c <HAL_TIMEx_PWMN_Start+0x58>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	bf14      	ite	ne
 8006d94:	2301      	movne	r3, #1
 8006d96:	2300      	moveq	r3, #0
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	e008      	b.n	8006dae <HAL_TIMEx_PWMN_Start+0x6a>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	bf14      	ite	ne
 8006da8:	2301      	movne	r3, #1
 8006daa:	2300      	moveq	r3, #0
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e073      	b.n	8006e9e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d104      	bne.n	8006dc6 <HAL_TIMEx_PWMN_Start+0x82>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dc4:	e013      	b.n	8006dee <HAL_TIMEx_PWMN_Start+0xaa>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2b04      	cmp	r3, #4
 8006dca:	d104      	bne.n	8006dd6 <HAL_TIMEx_PWMN_Start+0x92>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dd4:	e00b      	b.n	8006dee <HAL_TIMEx_PWMN_Start+0xaa>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	2b08      	cmp	r3, #8
 8006dda:	d104      	bne.n	8006de6 <HAL_TIMEx_PWMN_Start+0xa2>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006de4:	e003      	b.n	8006dee <HAL_TIMEx_PWMN_Start+0xaa>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2202      	movs	r2, #2
 8006dea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2204      	movs	r2, #4
 8006df4:	6839      	ldr	r1, [r7, #0]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 fa52 	bl	80072a0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e0a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a25      	ldr	r2, [pc, #148]	@ (8006ea8 <HAL_TIMEx_PWMN_Start+0x164>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d022      	beq.n	8006e5c <HAL_TIMEx_PWMN_Start+0x118>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e1e:	d01d      	beq.n	8006e5c <HAL_TIMEx_PWMN_Start+0x118>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a21      	ldr	r2, [pc, #132]	@ (8006eac <HAL_TIMEx_PWMN_Start+0x168>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d018      	beq.n	8006e5c <HAL_TIMEx_PWMN_Start+0x118>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a20      	ldr	r2, [pc, #128]	@ (8006eb0 <HAL_TIMEx_PWMN_Start+0x16c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d013      	beq.n	8006e5c <HAL_TIMEx_PWMN_Start+0x118>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a1e      	ldr	r2, [pc, #120]	@ (8006eb4 <HAL_TIMEx_PWMN_Start+0x170>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d00e      	beq.n	8006e5c <HAL_TIMEx_PWMN_Start+0x118>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a1d      	ldr	r2, [pc, #116]	@ (8006eb8 <HAL_TIMEx_PWMN_Start+0x174>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d009      	beq.n	8006e5c <HAL_TIMEx_PWMN_Start+0x118>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8006ebc <HAL_TIMEx_PWMN_Start+0x178>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d004      	beq.n	8006e5c <HAL_TIMEx_PWMN_Start+0x118>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a1a      	ldr	r2, [pc, #104]	@ (8006ec0 <HAL_TIMEx_PWMN_Start+0x17c>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d115      	bne.n	8006e88 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689a      	ldr	r2, [r3, #8]
 8006e62:	4b18      	ldr	r3, [pc, #96]	@ (8006ec4 <HAL_TIMEx_PWMN_Start+0x180>)
 8006e64:	4013      	ands	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b06      	cmp	r3, #6
 8006e6c:	d015      	beq.n	8006e9a <HAL_TIMEx_PWMN_Start+0x156>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e74:	d011      	beq.n	8006e9a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f042 0201 	orr.w	r2, r2, #1
 8006e84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e86:	e008      	b.n	8006e9a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f042 0201 	orr.w	r2, r2, #1
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	e000      	b.n	8006e9c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	40012c00 	.word	0x40012c00
 8006eac:	40000400 	.word	0x40000400
 8006eb0:	40000800 	.word	0x40000800
 8006eb4:	40000c00 	.word	0x40000c00
 8006eb8:	40013400 	.word	0x40013400
 8006ebc:	40014000 	.word	0x40014000
 8006ec0:	40015000 	.word	0x40015000
 8006ec4:	00010007 	.word	0x00010007

08006ec8 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 f9e0 	bl	80072a0 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6a1a      	ldr	r2, [r3, #32]
 8006ee6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006eea:	4013      	ands	r3, r2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10f      	bne.n	8006f10 <HAL_TIMEx_PWMN_Stop+0x48>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6a1a      	ldr	r2, [r3, #32]
 8006ef6:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006efa:	4013      	ands	r3, r2
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d107      	bne.n	8006f10 <HAL_TIMEx_PWMN_Stop+0x48>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f0e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6a1a      	ldr	r2, [r3, #32]
 8006f16:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10f      	bne.n	8006f40 <HAL_TIMEx_PWMN_Stop+0x78>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6a1a      	ldr	r2, [r3, #32]
 8006f26:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d107      	bne.n	8006f40 <HAL_TIMEx_PWMN_Stop+0x78>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 0201 	bic.w	r2, r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d104      	bne.n	8006f50 <HAL_TIMEx_PWMN_Stop+0x88>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f4e:	e013      	b.n	8006f78 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	2b04      	cmp	r3, #4
 8006f54:	d104      	bne.n	8006f60 <HAL_TIMEx_PWMN_Stop+0x98>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f5e:	e00b      	b.n	8006f78 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	2b08      	cmp	r3, #8
 8006f64:	d104      	bne.n	8006f70 <HAL_TIMEx_PWMN_Stop+0xa8>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f6e:	e003      	b.n	8006f78 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d101      	bne.n	8006f9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	e074      	b.n	8007086 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a34      	ldr	r2, [pc, #208]	@ (8007094 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d009      	beq.n	8006fda <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a33      	ldr	r2, [pc, #204]	@ (8007098 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d004      	beq.n	8006fda <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a31      	ldr	r2, [pc, #196]	@ (800709c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d108      	bne.n	8006fec <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006fe0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a21      	ldr	r2, [pc, #132]	@ (8007094 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d022      	beq.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800701c:	d01d      	beq.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a1f      	ldr	r2, [pc, #124]	@ (80070a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d018      	beq.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a1d      	ldr	r2, [pc, #116]	@ (80070a4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d013      	beq.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a1c      	ldr	r2, [pc, #112]	@ (80070a8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d00e      	beq.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a15      	ldr	r2, [pc, #84]	@ (8007098 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d009      	beq.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a18      	ldr	r2, [pc, #96]	@ (80070ac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d004      	beq.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a11      	ldr	r2, [pc, #68]	@ (800709c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d10c      	bne.n	8007074 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007060:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	4313      	orrs	r3, r2
 800706a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	40012c00 	.word	0x40012c00
 8007098:	40013400 	.word	0x40013400
 800709c:	40015000 	.word	0x40015000
 80070a0:	40000400 	.word	0x40000400
 80070a4:	40000800 	.word	0x40000800
 80070a8:	40000c00 	.word	0x40000c00
 80070ac:	40014000 	.word	0x40014000

080070b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d101      	bne.n	80070cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070c8:	2302      	movs	r3, #2
 80070ca:	e096      	b.n	80071fa <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4313      	orrs	r3, r2
 800710a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	4313      	orrs	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	4313      	orrs	r3, r2
 8007126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007132:	4313      	orrs	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	041b      	lsls	r3, r3, #16
 8007142:	4313      	orrs	r3, r2
 8007144:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a2f      	ldr	r2, [pc, #188]	@ (8007208 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d009      	beq.n	8007164 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a2d      	ldr	r2, [pc, #180]	@ (800720c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d004      	beq.n	8007164 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a2c      	ldr	r2, [pc, #176]	@ (8007210 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d106      	bne.n	8007172 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	69db      	ldr	r3, [r3, #28]
 800716e:	4313      	orrs	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a24      	ldr	r2, [pc, #144]	@ (8007208 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d009      	beq.n	8007190 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a22      	ldr	r2, [pc, #136]	@ (800720c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d004      	beq.n	8007190 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a21      	ldr	r2, [pc, #132]	@ (8007210 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d12b      	bne.n	80071e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800719a:	051b      	lsls	r3, r3, #20
 800719c:	4313      	orrs	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b8:	4313      	orrs	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a11      	ldr	r2, [pc, #68]	@ (8007208 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d009      	beq.n	80071da <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a10      	ldr	r2, [pc, #64]	@ (800720c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d004      	beq.n	80071da <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a0e      	ldr	r2, [pc, #56]	@ (8007210 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d106      	bne.n	80071e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	40012c00 	.word	0x40012c00
 800720c:	40013400 	.word	0x40013400
 8007210:	40015000 	.word	0x40015000

08007214 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b087      	sub	sp, #28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	f003 031f 	and.w	r3, r3, #31
 80072b2:	2204      	movs	r2, #4
 80072b4:	fa02 f303 	lsl.w	r3, r2, r3
 80072b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6a1a      	ldr	r2, [r3, #32]
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	43db      	mvns	r3, r3
 80072c2:	401a      	ands	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6a1a      	ldr	r2, [r3, #32]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f003 031f 	and.w	r3, r3, #31
 80072d2:	6879      	ldr	r1, [r7, #4]
 80072d4:	fa01 f303 	lsl.w	r3, r1, r3
 80072d8:	431a      	orrs	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	621a      	str	r2, [r3, #32]
}
 80072de:	bf00      	nop
 80072e0:	371c      	adds	r7, #28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b082      	sub	sp, #8
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d101      	bne.n	80072fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e042      	b.n	8007382 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007302:	2b00      	cmp	r3, #0
 8007304:	d106      	bne.n	8007314 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7fa ff1a 	bl	8002148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2224      	movs	r2, #36	@ 0x24
 8007318:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f022 0201 	bic.w	r2, r2, #1
 800732a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fc51 	bl	8007bd4 <UART_SetConfig>
 8007332:	4603      	mov	r3, r0
 8007334:	2b01      	cmp	r3, #1
 8007336:	d101      	bne.n	800733c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e022      	b.n	8007382 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007340:	2b00      	cmp	r3, #0
 8007342:	d002      	beq.n	800734a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 ff41 	bl	80081cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007358:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	689a      	ldr	r2, [r3, #8]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007368:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f042 0201 	orr.w	r2, r2, #1
 8007378:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 ffc8 	bl	8008310 <UART_CheckIdleState>
 8007380:	4603      	mov	r3, r0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b08a      	sub	sp, #40	@ 0x28
 800738e:	af02      	add	r7, sp, #8
 8007390:	60f8      	str	r0, [r7, #12]
 8007392:	60b9      	str	r1, [r7, #8]
 8007394:	603b      	str	r3, [r7, #0]
 8007396:	4613      	mov	r3, r2
 8007398:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073a0:	2b20      	cmp	r3, #32
 80073a2:	f040 8083 	bne.w	80074ac <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <HAL_UART_Transmit+0x28>
 80073ac:	88fb      	ldrh	r3, [r7, #6]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d101      	bne.n	80073b6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e07b      	b.n	80074ae <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d101      	bne.n	80073c4 <HAL_UART_Transmit+0x3a>
 80073c0:	2302      	movs	r3, #2
 80073c2:	e074      	b.n	80074ae <HAL_UART_Transmit+0x124>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2221      	movs	r2, #33	@ 0x21
 80073d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073dc:	f7fb f93a 	bl	8002654 <HAL_GetTick>
 80073e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	88fa      	ldrh	r2, [r7, #6]
 80073e6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	88fa      	ldrh	r2, [r7, #6]
 80073ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073fa:	d108      	bne.n	800740e <HAL_UART_Transmit+0x84>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d104      	bne.n	800740e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007404:	2300      	movs	r3, #0
 8007406:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	61bb      	str	r3, [r7, #24]
 800740c:	e003      	b.n	8007416 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007412:	2300      	movs	r3, #0
 8007414:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 800741e:	e02c      	b.n	800747a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	2200      	movs	r2, #0
 8007428:	2180      	movs	r1, #128	@ 0x80
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f000 ffbb 	bl	80083a6 <UART_WaitOnFlagUntilTimeout>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e039      	b.n	80074ae <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10b      	bne.n	8007458 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	881b      	ldrh	r3, [r3, #0]
 8007444:	461a      	mov	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800744e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	3302      	adds	r3, #2
 8007454:	61bb      	str	r3, [r7, #24]
 8007456:	e007      	b.n	8007468 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	781a      	ldrb	r2, [r3, #0]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	3301      	adds	r3, #1
 8007466:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800746e:	b29b      	uxth	r3, r3
 8007470:	3b01      	subs	r3, #1
 8007472:	b29a      	uxth	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007480:	b29b      	uxth	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1cc      	bne.n	8007420 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2200      	movs	r2, #0
 800748e:	2140      	movs	r1, #64	@ 0x40
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f000 ff88 	bl	80083a6 <UART_WaitOnFlagUntilTimeout>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800749c:	2303      	movs	r3, #3
 800749e:	e006      	b.n	80074ae <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	e000      	b.n	80074ae <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80074ac:	2302      	movs	r3, #2
  }
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3720      	adds	r7, #32
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
	...

080074b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b08a      	sub	sp, #40	@ 0x28
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	4613      	mov	r3, r2
 80074c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074cc:	2b20      	cmp	r3, #32
 80074ce:	d142      	bne.n	8007556 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d002      	beq.n	80074dc <HAL_UART_Receive_IT+0x24>
 80074d6:	88fb      	ldrh	r3, [r7, #6]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e03b      	b.n	8007558 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d101      	bne.n	80074ee <HAL_UART_Receive_IT+0x36>
 80074ea:	2302      	movs	r3, #2
 80074ec:	e034      	b.n	8007558 <HAL_UART_Receive_IT+0xa0>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a17      	ldr	r2, [pc, #92]	@ (8007560 <HAL_UART_Receive_IT+0xa8>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d01f      	beq.n	8007546 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d018      	beq.n	8007546 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	e853 3f00 	ldrex	r3, [r3]
 8007520:	613b      	str	r3, [r7, #16]
   return(result);
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007528:	627b      	str	r3, [r7, #36]	@ 0x24
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	461a      	mov	r2, r3
 8007530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007532:	623b      	str	r3, [r7, #32]
 8007534:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007536:	69f9      	ldr	r1, [r7, #28]
 8007538:	6a3a      	ldr	r2, [r7, #32]
 800753a:	e841 2300 	strex	r3, r2, [r1]
 800753e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e6      	bne.n	8007514 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007546:	88fb      	ldrh	r3, [r7, #6]
 8007548:	461a      	mov	r2, r3
 800754a:	68b9      	ldr	r1, [r7, #8]
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 fff3 	bl	8008538 <UART_Start_Receive_IT>
 8007552:	4603      	mov	r3, r0
 8007554:	e000      	b.n	8007558 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007556:	2302      	movs	r3, #2
  }
}
 8007558:	4618      	mov	r0, r3
 800755a:	3728      	adds	r7, #40	@ 0x28
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	40008000 	.word	0x40008000

08007564 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b0ba      	sub	sp, #232	@ 0xe8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	69db      	ldr	r3, [r3, #28]
 8007572:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800758a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800758e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007592:	4013      	ands	r3, r2
 8007594:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007598:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800759c:	2b00      	cmp	r3, #0
 800759e:	d11b      	bne.n	80075d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80075a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075a4:	f003 0320 	and.w	r3, r3, #32
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d015      	beq.n	80075d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80075ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075b0:	f003 0320 	and.w	r3, r3, #32
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d105      	bne.n	80075c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80075b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d009      	beq.n	80075d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 82d6 	beq.w	8007b7a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	4798      	blx	r3
      }
      return;
 80075d6:	e2d0      	b.n	8007b7a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80075d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 811f 	beq.w	8007820 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80075e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80075e6:	4b8b      	ldr	r3, [pc, #556]	@ (8007814 <HAL_UART_IRQHandler+0x2b0>)
 80075e8:	4013      	ands	r3, r2
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d106      	bne.n	80075fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80075ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80075f2:	4b89      	ldr	r3, [pc, #548]	@ (8007818 <HAL_UART_IRQHandler+0x2b4>)
 80075f4:	4013      	ands	r3, r2
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 8112 	beq.w	8007820 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b00      	cmp	r3, #0
 8007606:	d011      	beq.n	800762c <HAL_UART_IRQHandler+0xc8>
 8007608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800760c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00b      	beq.n	800762c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2201      	movs	r2, #1
 800761a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007622:	f043 0201 	orr.w	r2, r3, #1
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800762c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007630:	f003 0302 	and.w	r3, r3, #2
 8007634:	2b00      	cmp	r3, #0
 8007636:	d011      	beq.n	800765c <HAL_UART_IRQHandler+0xf8>
 8007638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00b      	beq.n	800765c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2202      	movs	r2, #2
 800764a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007652:	f043 0204 	orr.w	r2, r3, #4
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800765c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007660:	f003 0304 	and.w	r3, r3, #4
 8007664:	2b00      	cmp	r3, #0
 8007666:	d011      	beq.n	800768c <HAL_UART_IRQHandler+0x128>
 8007668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800766c:	f003 0301 	and.w	r3, r3, #1
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00b      	beq.n	800768c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2204      	movs	r2, #4
 800767a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007682:	f043 0202 	orr.w	r2, r3, #2
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800768c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007690:	f003 0308 	and.w	r3, r3, #8
 8007694:	2b00      	cmp	r3, #0
 8007696:	d017      	beq.n	80076c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800769c:	f003 0320 	and.w	r3, r3, #32
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d105      	bne.n	80076b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80076a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80076a8:	4b5a      	ldr	r3, [pc, #360]	@ (8007814 <HAL_UART_IRQHandler+0x2b0>)
 80076aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00b      	beq.n	80076c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2208      	movs	r2, #8
 80076b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076be:	f043 0208 	orr.w	r2, r3, #8
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80076c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d012      	beq.n	80076fa <HAL_UART_IRQHandler+0x196>
 80076d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00c      	beq.n	80076fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80076e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076f0:	f043 0220 	orr.w	r2, r3, #32
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 823c 	beq.w	8007b7e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800770a:	f003 0320 	and.w	r3, r3, #32
 800770e:	2b00      	cmp	r3, #0
 8007710:	d013      	beq.n	800773a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007716:	f003 0320 	and.w	r3, r3, #32
 800771a:	2b00      	cmp	r3, #0
 800771c:	d105      	bne.n	800772a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800771e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d007      	beq.n	800773a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007740:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800774e:	2b40      	cmp	r3, #64	@ 0x40
 8007750:	d005      	beq.n	800775e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007752:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007756:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800775a:	2b00      	cmp	r3, #0
 800775c:	d04f      	beq.n	80077fe <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 f814 	bl	800878c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800776e:	2b40      	cmp	r3, #64	@ 0x40
 8007770:	d141      	bne.n	80077f6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3308      	adds	r3, #8
 8007778:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007780:	e853 3f00 	ldrex	r3, [r3]
 8007784:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007788:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800778c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007790:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	3308      	adds	r3, #8
 800779a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800779e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80077a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80077aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80077ae:	e841 2300 	strex	r3, r2, [r1]
 80077b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80077b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1d9      	bne.n	8007772 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d013      	beq.n	80077ee <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077ca:	4a14      	ldr	r2, [pc, #80]	@ (800781c <HAL_UART_IRQHandler+0x2b8>)
 80077cc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7fc fd73 	bl	80042be <HAL_DMA_Abort_IT>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d017      	beq.n	800780e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 80077e8:	4610      	mov	r0, r2
 80077ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ec:	e00f      	b.n	800780e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f9da 	bl	8007ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f4:	e00b      	b.n	800780e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f9d6 	bl	8007ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077fc:	e007      	b.n	800780e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f9d2 	bl	8007ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 800780c:	e1b7      	b.n	8007b7e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800780e:	bf00      	nop
    return;
 8007810:	e1b5      	b.n	8007b7e <HAL_UART_IRQHandler+0x61a>
 8007812:	bf00      	nop
 8007814:	10000001 	.word	0x10000001
 8007818:	04000120 	.word	0x04000120
 800781c:	08008859 	.word	0x08008859

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007824:	2b01      	cmp	r3, #1
 8007826:	f040 814a 	bne.w	8007abe <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800782a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800782e:	f003 0310 	and.w	r3, r3, #16
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 8143 	beq.w	8007abe <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800783c:	f003 0310 	and.w	r3, r3, #16
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 813c 	beq.w	8007abe <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2210      	movs	r2, #16
 800784c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007858:	2b40      	cmp	r3, #64	@ 0x40
 800785a:	f040 80b5 	bne.w	80079c8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800786a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 8187 	beq.w	8007b82 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800787a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800787e:	429a      	cmp	r2, r3
 8007880:	f080 817f 	bcs.w	8007b82 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800788a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0320 	and.w	r3, r3, #32
 800789a:	2b00      	cmp	r3, #0
 800789c:	f040 8086 	bne.w	80079ac <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80078ac:	e853 3f00 	ldrex	r3, [r3]
 80078b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80078b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80078b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	461a      	mov	r2, r3
 80078c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80078ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80078d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80078e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1da      	bne.n	80078a0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3308      	adds	r3, #8
 80078f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078f4:	e853 3f00 	ldrex	r3, [r3]
 80078f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80078fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80078fc:	f023 0301 	bic.w	r3, r3, #1
 8007900:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3308      	adds	r3, #8
 800790a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800790e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007912:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007914:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007916:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800791a:	e841 2300 	strex	r3, r2, [r1]
 800791e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007920:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1e1      	bne.n	80078ea <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3308      	adds	r3, #8
 800792c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007930:	e853 3f00 	ldrex	r3, [r3]
 8007934:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007936:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007938:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800793c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	3308      	adds	r3, #8
 8007946:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800794a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800794c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007950:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007952:	e841 2300 	strex	r3, r2, [r1]
 8007956:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007958:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800795a:	2b00      	cmp	r3, #0
 800795c:	d1e3      	bne.n	8007926 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2220      	movs	r2, #32
 8007962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800797a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800797c:	f023 0310 	bic.w	r3, r3, #16
 8007980:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	461a      	mov	r2, r3
 800798a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800798e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007990:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007992:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007994:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007996:	e841 2300 	strex	r3, r2, [r1]
 800799a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800799c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1e4      	bne.n	800796c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fc fc30 	bl	800420c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	b29b      	uxth	r3, r3
 80079be:	4619      	mov	r1, r3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f8fb 	bl	8007bbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079c6:	e0dc      	b.n	8007b82 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 80ce 	beq.w	8007b86 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80079ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 80c9 	beq.w	8007b86 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	461a      	mov	r2, r3
 8007a12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a16:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a18:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a1e:	e841 2300 	strex	r3, r2, [r1]
 8007a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1e4      	bne.n	80079f4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	3308      	adds	r3, #8
 8007a30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a34:	e853 3f00 	ldrex	r3, [r3]
 8007a38:	623b      	str	r3, [r7, #32]
   return(result);
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a40:	f023 0301 	bic.w	r3, r3, #1
 8007a44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	3308      	adds	r3, #8
 8007a4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007a52:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1e1      	bne.n	8007a2a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2220      	movs	r2, #32
 8007a6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	e853 3f00 	ldrex	r3, [r3]
 8007a86:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 0310 	bic.w	r3, r3, #16
 8007a8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a9c:	61fb      	str	r3, [r7, #28]
 8007a9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa0:	69b9      	ldr	r1, [r7, #24]
 8007aa2:	69fa      	ldr	r2, [r7, #28]
 8007aa4:	e841 2300 	strex	r3, r2, [r1]
 8007aa8:	617b      	str	r3, [r7, #20]
   return(result);
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1e4      	bne.n	8007a7a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ab0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f880 	bl	8007bbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007abc:	e063      	b.n	8007b86 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ac2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00e      	beq.n	8007ae8 <HAL_UART_IRQHandler+0x584>
 8007aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ace:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d008      	beq.n	8007ae8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007ade:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f001 fb57 	bl	8009194 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ae6:	e051      	b.n	8007b8c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d014      	beq.n	8007b1e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d105      	bne.n	8007b0c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d008      	beq.n	8007b1e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d03a      	beq.n	8007b8a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	4798      	blx	r3
    }
    return;
 8007b1c:	e035      	b.n	8007b8a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d009      	beq.n	8007b3e <HAL_UART_IRQHandler+0x5da>
 8007b2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fea4 	bl	8008884 <UART_EndTransmit_IT>
    return;
 8007b3c:	e026      	b.n	8007b8c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d009      	beq.n	8007b5e <HAL_UART_IRQHandler+0x5fa>
 8007b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b4e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d003      	beq.n	8007b5e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f001 fb30 	bl	80091bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b5c:	e016      	b.n	8007b8c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d010      	beq.n	8007b8c <HAL_UART_IRQHandler+0x628>
 8007b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	da0c      	bge.n	8007b8c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f001 fb18 	bl	80091a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b78:	e008      	b.n	8007b8c <HAL_UART_IRQHandler+0x628>
      return;
 8007b7a:	bf00      	nop
 8007b7c:	e006      	b.n	8007b8c <HAL_UART_IRQHandler+0x628>
    return;
 8007b7e:	bf00      	nop
 8007b80:	e004      	b.n	8007b8c <HAL_UART_IRQHandler+0x628>
      return;
 8007b82:	bf00      	nop
 8007b84:	e002      	b.n	8007b8c <HAL_UART_IRQHandler+0x628>
      return;
 8007b86:	bf00      	nop
 8007b88:	e000      	b.n	8007b8c <HAL_UART_IRQHandler+0x628>
    return;
 8007b8a:	bf00      	nop
  }
}
 8007b8c:	37e8      	adds	r7, #232	@ 0xe8
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop

08007b94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bc8:	bf00      	nop
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bd8:	b08c      	sub	sp, #48	@ 0x30
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	689a      	ldr	r2, [r3, #8]
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	431a      	orrs	r2, r3
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	69db      	ldr	r3, [r3, #28]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	4baa      	ldr	r3, [pc, #680]	@ (8007eac <UART_SetConfig+0x2d8>)
 8007c04:	4013      	ands	r3, r2
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	6812      	ldr	r2, [r2, #0]
 8007c0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c0c:	430b      	orrs	r3, r1
 8007c0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	68da      	ldr	r2, [r3, #12]
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a9f      	ldr	r2, [pc, #636]	@ (8007eb0 <UART_SetConfig+0x2dc>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d004      	beq.n	8007c40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007c4a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	6812      	ldr	r2, [r2, #0]
 8007c52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c54:	430b      	orrs	r3, r1
 8007c56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5e:	f023 010f 	bic.w	r1, r3, #15
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a90      	ldr	r2, [pc, #576]	@ (8007eb4 <UART_SetConfig+0x2e0>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d125      	bne.n	8007cc4 <UART_SetConfig+0xf0>
 8007c78:	4b8f      	ldr	r3, [pc, #572]	@ (8007eb8 <UART_SetConfig+0x2e4>)
 8007c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c7e:	f003 0303 	and.w	r3, r3, #3
 8007c82:	2b03      	cmp	r3, #3
 8007c84:	d81a      	bhi.n	8007cbc <UART_SetConfig+0xe8>
 8007c86:	a201      	add	r2, pc, #4	@ (adr r2, 8007c8c <UART_SetConfig+0xb8>)
 8007c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8c:	08007c9d 	.word	0x08007c9d
 8007c90:	08007cad 	.word	0x08007cad
 8007c94:	08007ca5 	.word	0x08007ca5
 8007c98:	08007cb5 	.word	0x08007cb5
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ca2:	e116      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007caa:	e112      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007cac:	2304      	movs	r3, #4
 8007cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cb2:	e10e      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007cb4:	2308      	movs	r3, #8
 8007cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cba:	e10a      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007cbc:	2310      	movs	r3, #16
 8007cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cc2:	e106      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a7c      	ldr	r2, [pc, #496]	@ (8007ebc <UART_SetConfig+0x2e8>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d138      	bne.n	8007d40 <UART_SetConfig+0x16c>
 8007cce:	4b7a      	ldr	r3, [pc, #488]	@ (8007eb8 <UART_SetConfig+0x2e4>)
 8007cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cd4:	f003 030c 	and.w	r3, r3, #12
 8007cd8:	2b0c      	cmp	r3, #12
 8007cda:	d82d      	bhi.n	8007d38 <UART_SetConfig+0x164>
 8007cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ce4 <UART_SetConfig+0x110>)
 8007cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce2:	bf00      	nop
 8007ce4:	08007d19 	.word	0x08007d19
 8007ce8:	08007d39 	.word	0x08007d39
 8007cec:	08007d39 	.word	0x08007d39
 8007cf0:	08007d39 	.word	0x08007d39
 8007cf4:	08007d29 	.word	0x08007d29
 8007cf8:	08007d39 	.word	0x08007d39
 8007cfc:	08007d39 	.word	0x08007d39
 8007d00:	08007d39 	.word	0x08007d39
 8007d04:	08007d21 	.word	0x08007d21
 8007d08:	08007d39 	.word	0x08007d39
 8007d0c:	08007d39 	.word	0x08007d39
 8007d10:	08007d39 	.word	0x08007d39
 8007d14:	08007d31 	.word	0x08007d31
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d1e:	e0d8      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007d20:	2302      	movs	r3, #2
 8007d22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d26:	e0d4      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007d28:	2304      	movs	r3, #4
 8007d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d2e:	e0d0      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007d30:	2308      	movs	r3, #8
 8007d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d36:	e0cc      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007d38:	2310      	movs	r3, #16
 8007d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d3e:	e0c8      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a5e      	ldr	r2, [pc, #376]	@ (8007ec0 <UART_SetConfig+0x2ec>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d125      	bne.n	8007d96 <UART_SetConfig+0x1c2>
 8007d4a:	4b5b      	ldr	r3, [pc, #364]	@ (8007eb8 <UART_SetConfig+0x2e4>)
 8007d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007d54:	2b30      	cmp	r3, #48	@ 0x30
 8007d56:	d016      	beq.n	8007d86 <UART_SetConfig+0x1b2>
 8007d58:	2b30      	cmp	r3, #48	@ 0x30
 8007d5a:	d818      	bhi.n	8007d8e <UART_SetConfig+0x1ba>
 8007d5c:	2b20      	cmp	r3, #32
 8007d5e:	d00a      	beq.n	8007d76 <UART_SetConfig+0x1a2>
 8007d60:	2b20      	cmp	r3, #32
 8007d62:	d814      	bhi.n	8007d8e <UART_SetConfig+0x1ba>
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d002      	beq.n	8007d6e <UART_SetConfig+0x19a>
 8007d68:	2b10      	cmp	r3, #16
 8007d6a:	d008      	beq.n	8007d7e <UART_SetConfig+0x1aa>
 8007d6c:	e00f      	b.n	8007d8e <UART_SetConfig+0x1ba>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d74:	e0ad      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007d76:	2302      	movs	r3, #2
 8007d78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d7c:	e0a9      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007d7e:	2304      	movs	r3, #4
 8007d80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d84:	e0a5      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007d86:	2308      	movs	r3, #8
 8007d88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d8c:	e0a1      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007d8e:	2310      	movs	r3, #16
 8007d90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d94:	e09d      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a4a      	ldr	r2, [pc, #296]	@ (8007ec4 <UART_SetConfig+0x2f0>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d125      	bne.n	8007dec <UART_SetConfig+0x218>
 8007da0:	4b45      	ldr	r3, [pc, #276]	@ (8007eb8 <UART_SetConfig+0x2e4>)
 8007da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007da6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007daa:	2bc0      	cmp	r3, #192	@ 0xc0
 8007dac:	d016      	beq.n	8007ddc <UART_SetConfig+0x208>
 8007dae:	2bc0      	cmp	r3, #192	@ 0xc0
 8007db0:	d818      	bhi.n	8007de4 <UART_SetConfig+0x210>
 8007db2:	2b80      	cmp	r3, #128	@ 0x80
 8007db4:	d00a      	beq.n	8007dcc <UART_SetConfig+0x1f8>
 8007db6:	2b80      	cmp	r3, #128	@ 0x80
 8007db8:	d814      	bhi.n	8007de4 <UART_SetConfig+0x210>
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <UART_SetConfig+0x1f0>
 8007dbe:	2b40      	cmp	r3, #64	@ 0x40
 8007dc0:	d008      	beq.n	8007dd4 <UART_SetConfig+0x200>
 8007dc2:	e00f      	b.n	8007de4 <UART_SetConfig+0x210>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dca:	e082      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007dcc:	2302      	movs	r3, #2
 8007dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dd2:	e07e      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007dd4:	2304      	movs	r3, #4
 8007dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dda:	e07a      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007ddc:	2308      	movs	r3, #8
 8007dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007de2:	e076      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007de4:	2310      	movs	r3, #16
 8007de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dea:	e072      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a35      	ldr	r2, [pc, #212]	@ (8007ec8 <UART_SetConfig+0x2f4>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d12a      	bne.n	8007e4c <UART_SetConfig+0x278>
 8007df6:	4b30      	ldr	r3, [pc, #192]	@ (8007eb8 <UART_SetConfig+0x2e4>)
 8007df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e04:	d01a      	beq.n	8007e3c <UART_SetConfig+0x268>
 8007e06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e0a:	d81b      	bhi.n	8007e44 <UART_SetConfig+0x270>
 8007e0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e10:	d00c      	beq.n	8007e2c <UART_SetConfig+0x258>
 8007e12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e16:	d815      	bhi.n	8007e44 <UART_SetConfig+0x270>
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <UART_SetConfig+0x250>
 8007e1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e20:	d008      	beq.n	8007e34 <UART_SetConfig+0x260>
 8007e22:	e00f      	b.n	8007e44 <UART_SetConfig+0x270>
 8007e24:	2300      	movs	r3, #0
 8007e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e2a:	e052      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e32:	e04e      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007e34:	2304      	movs	r3, #4
 8007e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e3a:	e04a      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007e3c:	2308      	movs	r3, #8
 8007e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e42:	e046      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007e44:	2310      	movs	r3, #16
 8007e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e4a:	e042      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a17      	ldr	r2, [pc, #92]	@ (8007eb0 <UART_SetConfig+0x2dc>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d13a      	bne.n	8007ecc <UART_SetConfig+0x2f8>
 8007e56:	4b18      	ldr	r3, [pc, #96]	@ (8007eb8 <UART_SetConfig+0x2e4>)
 8007e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007e60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e64:	d01a      	beq.n	8007e9c <UART_SetConfig+0x2c8>
 8007e66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e6a:	d81b      	bhi.n	8007ea4 <UART_SetConfig+0x2d0>
 8007e6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e70:	d00c      	beq.n	8007e8c <UART_SetConfig+0x2b8>
 8007e72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e76:	d815      	bhi.n	8007ea4 <UART_SetConfig+0x2d0>
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d003      	beq.n	8007e84 <UART_SetConfig+0x2b0>
 8007e7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e80:	d008      	beq.n	8007e94 <UART_SetConfig+0x2c0>
 8007e82:	e00f      	b.n	8007ea4 <UART_SetConfig+0x2d0>
 8007e84:	2300      	movs	r3, #0
 8007e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e8a:	e022      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e92:	e01e      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007e94:	2304      	movs	r3, #4
 8007e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e9a:	e01a      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007e9c:	2308      	movs	r3, #8
 8007e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ea2:	e016      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007ea4:	2310      	movs	r3, #16
 8007ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eaa:	e012      	b.n	8007ed2 <UART_SetConfig+0x2fe>
 8007eac:	cfff69f3 	.word	0xcfff69f3
 8007eb0:	40008000 	.word	0x40008000
 8007eb4:	40013800 	.word	0x40013800
 8007eb8:	40021000 	.word	0x40021000
 8007ebc:	40004400 	.word	0x40004400
 8007ec0:	40004800 	.word	0x40004800
 8007ec4:	40004c00 	.word	0x40004c00
 8007ec8:	40005000 	.word	0x40005000
 8007ecc:	2310      	movs	r3, #16
 8007ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4aae      	ldr	r2, [pc, #696]	@ (8008190 <UART_SetConfig+0x5bc>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	f040 8097 	bne.w	800800c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007ede:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ee2:	2b08      	cmp	r3, #8
 8007ee4:	d823      	bhi.n	8007f2e <UART_SetConfig+0x35a>
 8007ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8007eec <UART_SetConfig+0x318>)
 8007ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eec:	08007f11 	.word	0x08007f11
 8007ef0:	08007f2f 	.word	0x08007f2f
 8007ef4:	08007f19 	.word	0x08007f19
 8007ef8:	08007f2f 	.word	0x08007f2f
 8007efc:	08007f1f 	.word	0x08007f1f
 8007f00:	08007f2f 	.word	0x08007f2f
 8007f04:	08007f2f 	.word	0x08007f2f
 8007f08:	08007f2f 	.word	0x08007f2f
 8007f0c:	08007f27 	.word	0x08007f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f10:	f7fd f970 	bl	80051f4 <HAL_RCC_GetPCLK1Freq>
 8007f14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f16:	e010      	b.n	8007f3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f18:	4b9e      	ldr	r3, [pc, #632]	@ (8008194 <UART_SetConfig+0x5c0>)
 8007f1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f1c:	e00d      	b.n	8007f3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f1e:	f7fd f8fb 	bl	8005118 <HAL_RCC_GetSysClockFreq>
 8007f22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f24:	e009      	b.n	8007f3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f2c:	e005      	b.n	8007f3a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007f38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f000 8130 	beq.w	80081a2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f46:	4a94      	ldr	r2, [pc, #592]	@ (8008198 <UART_SetConfig+0x5c4>)
 8007f48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f50:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f54:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	685a      	ldr	r2, [r3, #4]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	005b      	lsls	r3, r3, #1
 8007f5e:	4413      	add	r3, r2
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d305      	bcc.n	8007f72 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d903      	bls.n	8007f7a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f78:	e113      	b.n	80081a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	60bb      	str	r3, [r7, #8]
 8007f80:	60fa      	str	r2, [r7, #12]
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f86:	4a84      	ldr	r2, [pc, #528]	@ (8008198 <UART_SetConfig+0x5c4>)
 8007f88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	2200      	movs	r2, #0
 8007f90:	603b      	str	r3, [r7, #0]
 8007f92:	607a      	str	r2, [r7, #4]
 8007f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f9c:	f7f8 feac 	bl	8000cf8 <__aeabi_uldivmod>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	4610      	mov	r0, r2
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	f04f 0200 	mov.w	r2, #0
 8007fac:	f04f 0300 	mov.w	r3, #0
 8007fb0:	020b      	lsls	r3, r1, #8
 8007fb2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007fb6:	0202      	lsls	r2, r0, #8
 8007fb8:	6979      	ldr	r1, [r7, #20]
 8007fba:	6849      	ldr	r1, [r1, #4]
 8007fbc:	0849      	lsrs	r1, r1, #1
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	460c      	mov	r4, r1
 8007fc2:	4605      	mov	r5, r0
 8007fc4:	eb12 0804 	adds.w	r8, r2, r4
 8007fc8:	eb43 0905 	adc.w	r9, r3, r5
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	469a      	mov	sl, r3
 8007fd4:	4693      	mov	fp, r2
 8007fd6:	4652      	mov	r2, sl
 8007fd8:	465b      	mov	r3, fp
 8007fda:	4640      	mov	r0, r8
 8007fdc:	4649      	mov	r1, r9
 8007fde:	f7f8 fe8b 	bl	8000cf8 <__aeabi_uldivmod>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007fea:	6a3b      	ldr	r3, [r7, #32]
 8007fec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ff0:	d308      	bcc.n	8008004 <UART_SetConfig+0x430>
 8007ff2:	6a3b      	ldr	r3, [r7, #32]
 8007ff4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ff8:	d204      	bcs.n	8008004 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6a3a      	ldr	r2, [r7, #32]
 8008000:	60da      	str	r2, [r3, #12]
 8008002:	e0ce      	b.n	80081a2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800800a:	e0ca      	b.n	80081a2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	69db      	ldr	r3, [r3, #28]
 8008010:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008014:	d166      	bne.n	80080e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008016:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800801a:	2b08      	cmp	r3, #8
 800801c:	d827      	bhi.n	800806e <UART_SetConfig+0x49a>
 800801e:	a201      	add	r2, pc, #4	@ (adr r2, 8008024 <UART_SetConfig+0x450>)
 8008020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008024:	08008049 	.word	0x08008049
 8008028:	08008051 	.word	0x08008051
 800802c:	08008059 	.word	0x08008059
 8008030:	0800806f 	.word	0x0800806f
 8008034:	0800805f 	.word	0x0800805f
 8008038:	0800806f 	.word	0x0800806f
 800803c:	0800806f 	.word	0x0800806f
 8008040:	0800806f 	.word	0x0800806f
 8008044:	08008067 	.word	0x08008067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008048:	f7fd f8d4 	bl	80051f4 <HAL_RCC_GetPCLK1Freq>
 800804c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800804e:	e014      	b.n	800807a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008050:	f7fd f8e6 	bl	8005220 <HAL_RCC_GetPCLK2Freq>
 8008054:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008056:	e010      	b.n	800807a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008058:	4b4e      	ldr	r3, [pc, #312]	@ (8008194 <UART_SetConfig+0x5c0>)
 800805a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800805c:	e00d      	b.n	800807a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800805e:	f7fd f85b 	bl	8005118 <HAL_RCC_GetSysClockFreq>
 8008062:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008064:	e009      	b.n	800807a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008066:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800806a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800806c:	e005      	b.n	800807a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800806e:	2300      	movs	r3, #0
 8008070:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008078:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800807a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 8090 	beq.w	80081a2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008086:	4a44      	ldr	r2, [pc, #272]	@ (8008198 <UART_SetConfig+0x5c4>)
 8008088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800808c:	461a      	mov	r2, r3
 800808e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008090:	fbb3 f3f2 	udiv	r3, r3, r2
 8008094:	005a      	lsls	r2, r3, #1
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	085b      	lsrs	r3, r3, #1
 800809c:	441a      	add	r2, r3
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	2b0f      	cmp	r3, #15
 80080ac:	d916      	bls.n	80080dc <UART_SetConfig+0x508>
 80080ae:	6a3b      	ldr	r3, [r7, #32]
 80080b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080b4:	d212      	bcs.n	80080dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	f023 030f 	bic.w	r3, r3, #15
 80080be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080c0:	6a3b      	ldr	r3, [r7, #32]
 80080c2:	085b      	lsrs	r3, r3, #1
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	f003 0307 	and.w	r3, r3, #7
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	8bfb      	ldrh	r3, [r7, #30]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	8bfa      	ldrh	r2, [r7, #30]
 80080d8:	60da      	str	r2, [r3, #12]
 80080da:	e062      	b.n	80081a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80080e2:	e05e      	b.n	80081a2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80080e8:	2b08      	cmp	r3, #8
 80080ea:	d828      	bhi.n	800813e <UART_SetConfig+0x56a>
 80080ec:	a201      	add	r2, pc, #4	@ (adr r2, 80080f4 <UART_SetConfig+0x520>)
 80080ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f2:	bf00      	nop
 80080f4:	08008119 	.word	0x08008119
 80080f8:	08008121 	.word	0x08008121
 80080fc:	08008129 	.word	0x08008129
 8008100:	0800813f 	.word	0x0800813f
 8008104:	0800812f 	.word	0x0800812f
 8008108:	0800813f 	.word	0x0800813f
 800810c:	0800813f 	.word	0x0800813f
 8008110:	0800813f 	.word	0x0800813f
 8008114:	08008137 	.word	0x08008137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008118:	f7fd f86c 	bl	80051f4 <HAL_RCC_GetPCLK1Freq>
 800811c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800811e:	e014      	b.n	800814a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008120:	f7fd f87e 	bl	8005220 <HAL_RCC_GetPCLK2Freq>
 8008124:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008126:	e010      	b.n	800814a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008128:	4b1a      	ldr	r3, [pc, #104]	@ (8008194 <UART_SetConfig+0x5c0>)
 800812a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800812c:	e00d      	b.n	800814a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800812e:	f7fc fff3 	bl	8005118 <HAL_RCC_GetSysClockFreq>
 8008132:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008134:	e009      	b.n	800814a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800813a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800813c:	e005      	b.n	800814a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800813e:	2300      	movs	r3, #0
 8008140:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008148:	bf00      	nop
    }

    if (pclk != 0U)
 800814a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800814c:	2b00      	cmp	r3, #0
 800814e:	d028      	beq.n	80081a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008154:	4a10      	ldr	r2, [pc, #64]	@ (8008198 <UART_SetConfig+0x5c4>)
 8008156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800815a:	461a      	mov	r2, r3
 800815c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	085b      	lsrs	r3, r3, #1
 8008168:	441a      	add	r2, r3
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008172:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	2b0f      	cmp	r3, #15
 8008178:	d910      	bls.n	800819c <UART_SetConfig+0x5c8>
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008180:	d20c      	bcs.n	800819c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008182:	6a3b      	ldr	r3, [r7, #32]
 8008184:	b29a      	uxth	r2, r3
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	60da      	str	r2, [r3, #12]
 800818c:	e009      	b.n	80081a2 <UART_SetConfig+0x5ce>
 800818e:	bf00      	nop
 8008190:	40008000 	.word	0x40008000
 8008194:	00f42400 	.word	0x00f42400
 8008198:	0800dc70 	.word	0x0800dc70
      }
      else
      {
        ret = HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	2200      	movs	r2, #0
 80081b6:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	2200      	movs	r2, #0
 80081bc:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 80081be:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3730      	adds	r7, #48	@ 0x30
 80081c6:	46bd      	mov	sp, r7
 80081c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080081cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d8:	f003 0301 	and.w	r3, r3, #1
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00a      	beq.n	80081f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	430a      	orrs	r2, r1
 80081f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081fa:	f003 0302 	and.w	r3, r3, #2
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00a      	beq.n	8008218 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	430a      	orrs	r2, r1
 8008216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800821c:	f003 0304 	and.w	r3, r3, #4
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00a      	beq.n	800823a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	430a      	orrs	r2, r1
 8008238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800823e:	f003 0308 	and.w	r3, r3, #8
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00a      	beq.n	800825c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	430a      	orrs	r2, r1
 800825a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008260:	f003 0310 	and.w	r3, r3, #16
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00a      	beq.n	800827e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008282:	f003 0320 	and.w	r3, r3, #32
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	430a      	orrs	r2, r1
 800829e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d01a      	beq.n	80082e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	430a      	orrs	r2, r1
 80082c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082ca:	d10a      	bne.n	80082e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	430a      	orrs	r2, r1
 80082e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00a      	beq.n	8008304 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	430a      	orrs	r2, r1
 8008302:	605a      	str	r2, [r3, #4]
  }
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af02      	add	r7, sp, #8
 8008316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008320:	f7fa f998 	bl	8002654 <HAL_GetTick>
 8008324:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 0308 	and.w	r3, r3, #8
 8008330:	2b08      	cmp	r3, #8
 8008332:	d10e      	bne.n	8008352 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008334:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008338:	9300      	str	r3, [sp, #0]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f82f 	bl	80083a6 <UART_WaitOnFlagUntilTimeout>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e025      	b.n	800839e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0304 	and.w	r3, r3, #4
 800835c:	2b04      	cmp	r3, #4
 800835e:	d10e      	bne.n	800837e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008360:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008364:	9300      	str	r3, [sp, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f819 	bl	80083a6 <UART_WaitOnFlagUntilTimeout>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e00f      	b.n	800839e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2220      	movs	r2, #32
 8008382:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2220      	movs	r2, #32
 800838a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b09c      	sub	sp, #112	@ 0x70
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	60f8      	str	r0, [r7, #12]
 80083ae:	60b9      	str	r1, [r7, #8]
 80083b0:	603b      	str	r3, [r7, #0]
 80083b2:	4613      	mov	r3, r2
 80083b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083b6:	e0a9      	b.n	800850c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083be:	f000 80a5 	beq.w	800850c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083c2:	f7fa f947 	bl	8002654 <HAL_GetTick>
 80083c6:	4602      	mov	r2, r0
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d302      	bcc.n	80083d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80083d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d140      	bne.n	800845a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083e0:	e853 3f00 	ldrex	r3, [r3]
 80083e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80083e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083e8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80083ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	461a      	mov	r2, r3
 80083f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083f8:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80083fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80083fe:	e841 2300 	strex	r3, r2, [r1]
 8008402:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1e6      	bne.n	80083d8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3308      	adds	r3, #8
 8008410:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008414:	e853 3f00 	ldrex	r3, [r3]
 8008418:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800841a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841c:	f023 0301 	bic.w	r3, r3, #1
 8008420:	663b      	str	r3, [r7, #96]	@ 0x60
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3308      	adds	r3, #8
 8008428:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800842a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800842c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008430:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008432:	e841 2300 	strex	r3, r2, [r1]
 8008436:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008438:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1e5      	bne.n	800840a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2220      	movs	r2, #32
 8008442:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2220      	movs	r2, #32
 800844a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e069      	b.n	800852e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 0304 	and.w	r3, r3, #4
 8008464:	2b00      	cmp	r3, #0
 8008466:	d051      	beq.n	800850c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	69db      	ldr	r3, [r3, #28]
 800846e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008472:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008476:	d149      	bne.n	800850c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008480:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800848a:	e853 3f00 	ldrex	r3, [r3]
 800848e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008492:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008496:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	461a      	mov	r2, r3
 800849e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80084a2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80084a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084a8:	e841 2300 	strex	r3, r2, [r1]
 80084ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80084ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d1e6      	bne.n	8008482 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3308      	adds	r3, #8
 80084ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	e853 3f00 	ldrex	r3, [r3]
 80084c2:	613b      	str	r3, [r7, #16]
   return(result);
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	f023 0301 	bic.w	r3, r3, #1
 80084ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	3308      	adds	r3, #8
 80084d2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80084d4:	623a      	str	r2, [r7, #32]
 80084d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d8:	69f9      	ldr	r1, [r7, #28]
 80084da:	6a3a      	ldr	r2, [r7, #32]
 80084dc:	e841 2300 	strex	r3, r2, [r1]
 80084e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1e5      	bne.n	80084b4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2220      	movs	r2, #32
 80084ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2220      	movs	r2, #32
 80084f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2220      	movs	r2, #32
 80084fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008508:	2303      	movs	r3, #3
 800850a:	e010      	b.n	800852e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	69da      	ldr	r2, [r3, #28]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	4013      	ands	r3, r2
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	429a      	cmp	r2, r3
 800851a:	bf0c      	ite	eq
 800851c:	2301      	moveq	r3, #1
 800851e:	2300      	movne	r3, #0
 8008520:	b2db      	uxtb	r3, r3
 8008522:	461a      	mov	r2, r3
 8008524:	79fb      	ldrb	r3, [r7, #7]
 8008526:	429a      	cmp	r2, r3
 8008528:	f43f af46 	beq.w	80083b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800852c:	2300      	movs	r3, #0
}
 800852e:	4618      	mov	r0, r3
 8008530:	3770      	adds	r7, #112	@ 0x70
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
	...

08008538 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008538:	b480      	push	{r7}
 800853a:	b0a3      	sub	sp, #140	@ 0x8c
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	4613      	mov	r3, r2
 8008544:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	88fa      	ldrh	r2, [r7, #6]
 8008550:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	88fa      	ldrh	r2, [r7, #6]
 8008558:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2200      	movs	r2, #0
 8008560:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800856a:	d10e      	bne.n	800858a <UART_Start_Receive_IT+0x52>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d105      	bne.n	8008580 <UART_Start_Receive_IT+0x48>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800857a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800857e:	e02d      	b.n	80085dc <UART_Start_Receive_IT+0xa4>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	22ff      	movs	r2, #255	@ 0xff
 8008584:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008588:	e028      	b.n	80085dc <UART_Start_Receive_IT+0xa4>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10d      	bne.n	80085ae <UART_Start_Receive_IT+0x76>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d104      	bne.n	80085a4 <UART_Start_Receive_IT+0x6c>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	22ff      	movs	r2, #255	@ 0xff
 800859e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80085a2:	e01b      	b.n	80085dc <UART_Start_Receive_IT+0xa4>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	227f      	movs	r2, #127	@ 0x7f
 80085a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80085ac:	e016      	b.n	80085dc <UART_Start_Receive_IT+0xa4>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085b6:	d10d      	bne.n	80085d4 <UART_Start_Receive_IT+0x9c>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d104      	bne.n	80085ca <UART_Start_Receive_IT+0x92>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	227f      	movs	r2, #127	@ 0x7f
 80085c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80085c8:	e008      	b.n	80085dc <UART_Start_Receive_IT+0xa4>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	223f      	movs	r2, #63	@ 0x3f
 80085ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80085d2:	e003      	b.n	80085dc <UART_Start_Receive_IT+0xa4>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2222      	movs	r2, #34	@ 0x22
 80085e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	3308      	adds	r3, #8
 80085f2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085f6:	e853 3f00 	ldrex	r3, [r3]
 80085fa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80085fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80085fe:	f043 0301 	orr.w	r3, r3, #1
 8008602:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3308      	adds	r3, #8
 800860c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008610:	673a      	str	r2, [r7, #112]	@ 0x70
 8008612:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008614:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008616:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008618:	e841 2300 	strex	r3, r2, [r1]
 800861c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800861e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1e3      	bne.n	80085ec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008628:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800862c:	d153      	bne.n	80086d6 <UART_Start_Receive_IT+0x19e>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008634:	88fa      	ldrh	r2, [r7, #6]
 8008636:	429a      	cmp	r2, r3
 8008638:	d34d      	bcc.n	80086d6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008642:	d107      	bne.n	8008654 <UART_Start_Receive_IT+0x11c>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d103      	bne.n	8008654 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	4a4b      	ldr	r2, [pc, #300]	@ (800877c <UART_Start_Receive_IT+0x244>)
 8008650:	671a      	str	r2, [r3, #112]	@ 0x70
 8008652:	e002      	b.n	800865a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	4a4a      	ldr	r2, [pc, #296]	@ (8008780 <UART_Start_Receive_IT+0x248>)
 8008658:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d01a      	beq.n	80086a0 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008672:	e853 3f00 	ldrex	r3, [r3]
 8008676:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008678:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800867a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800867e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	461a      	mov	r2, r3
 8008688:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800868c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800868e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008690:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008692:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008694:	e841 2300 	strex	r3, r2, [r1]
 8008698:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800869a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1e4      	bne.n	800866a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3308      	adds	r3, #8
 80086a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086aa:	e853 3f00 	ldrex	r3, [r3]
 80086ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3308      	adds	r3, #8
 80086be:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80086c0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80086c2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80086c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086c8:	e841 2300 	strex	r3, r2, [r1]
 80086cc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80086ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1e5      	bne.n	80086a0 <UART_Start_Receive_IT+0x168>
 80086d4:	e04a      	b.n	800876c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086de:	d107      	bne.n	80086f0 <UART_Start_Receive_IT+0x1b8>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d103      	bne.n	80086f0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	4a26      	ldr	r2, [pc, #152]	@ (8008784 <UART_Start_Receive_IT+0x24c>)
 80086ec:	671a      	str	r2, [r3, #112]	@ 0x70
 80086ee:	e002      	b.n	80086f6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	4a25      	ldr	r2, [pc, #148]	@ (8008788 <UART_Start_Receive_IT+0x250>)
 80086f4:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d019      	beq.n	800873a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870e:	e853 3f00 	ldrex	r3, [r3]
 8008712:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008716:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800871a:	677b      	str	r3, [r7, #116]	@ 0x74
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	461a      	mov	r2, r3
 8008722:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008724:	637b      	str	r3, [r7, #52]	@ 0x34
 8008726:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008728:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800872a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800872c:	e841 2300 	strex	r3, r2, [r1]
 8008730:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1e6      	bne.n	8008706 <UART_Start_Receive_IT+0x1ce>
 8008738:	e018      	b.n	800876c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	e853 3f00 	ldrex	r3, [r3]
 8008746:	613b      	str	r3, [r7, #16]
   return(result);
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	f043 0320 	orr.w	r3, r3, #32
 800874e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	461a      	mov	r2, r3
 8008756:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008758:	623b      	str	r3, [r7, #32]
 800875a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875c:	69f9      	ldr	r1, [r7, #28]
 800875e:	6a3a      	ldr	r2, [r7, #32]
 8008760:	e841 2300 	strex	r3, r2, [r1]
 8008764:	61bb      	str	r3, [r7, #24]
   return(result);
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1e6      	bne.n	800873a <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	378c      	adds	r7, #140	@ 0x8c
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	08008e95 	.word	0x08008e95
 8008780:	08008b9d 	.word	0x08008b9d
 8008784:	08008a3b 	.word	0x08008a3b
 8008788:	080088db 	.word	0x080088db

0800878c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800878c:	b480      	push	{r7}
 800878e:	b095      	sub	sp, #84	@ 0x54
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800879c:	e853 3f00 	ldrex	r3, [r3]
 80087a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	461a      	mov	r2, r3
 80087b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80087b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80087b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80087ba:	e841 2300 	strex	r3, r2, [r1]
 80087be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80087c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1e6      	bne.n	8008794 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	3308      	adds	r3, #8
 80087cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ce:	6a3b      	ldr	r3, [r7, #32]
 80087d0:	e853 3f00 	ldrex	r3, [r3]
 80087d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087dc:	f023 0301 	bic.w	r3, r3, #1
 80087e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3308      	adds	r3, #8
 80087e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80087ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087f2:	e841 2300 	strex	r3, r2, [r1]
 80087f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80087f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1e3      	bne.n	80087c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008802:	2b01      	cmp	r3, #1
 8008804:	d118      	bne.n	8008838 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	e853 3f00 	ldrex	r3, [r3]
 8008812:	60bb      	str	r3, [r7, #8]
   return(result);
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	f023 0310 	bic.w	r3, r3, #16
 800881a:	647b      	str	r3, [r7, #68]	@ 0x44
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	461a      	mov	r2, r3
 8008822:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008824:	61bb      	str	r3, [r7, #24]
 8008826:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008828:	6979      	ldr	r1, [r7, #20]
 800882a:	69ba      	ldr	r2, [r7, #24]
 800882c:	e841 2300 	strex	r3, r2, [r1]
 8008830:	613b      	str	r3, [r7, #16]
   return(result);
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1e6      	bne.n	8008806 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2220      	movs	r2, #32
 800883c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	671a      	str	r2, [r3, #112]	@ 0x70
}
 800884c:	bf00      	nop
 800884e:	3754      	adds	r7, #84	@ 0x54
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008864:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f7ff f996 	bl	8007ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800887c:	bf00      	nop
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b088      	sub	sp, #32
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	e853 3f00 	ldrex	r3, [r3]
 8008898:	60bb      	str	r3, [r7, #8]
   return(result);
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088a0:	61fb      	str	r3, [r7, #28]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	61bb      	str	r3, [r7, #24]
 80088ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ae:	6979      	ldr	r1, [r7, #20]
 80088b0:	69ba      	ldr	r2, [r7, #24]
 80088b2:	e841 2300 	strex	r3, r2, [r1]
 80088b6:	613b      	str	r3, [r7, #16]
   return(result);
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1e6      	bne.n	800888c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2220      	movs	r2, #32
 80088c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7ff f961 	bl	8007b94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088d2:	bf00      	nop
 80088d4:	3720      	adds	r7, #32
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b096      	sub	sp, #88	@ 0x58
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80088e8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088f2:	2b22      	cmp	r3, #34	@ 0x22
 80088f4:	f040 8095 	bne.w	8008a22 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088fe:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008902:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8008906:	b2d9      	uxtb	r1, r3
 8008908:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800890c:	b2da      	uxtb	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008912:	400a      	ands	r2, r1
 8008914:	b2d2      	uxtb	r2, r2
 8008916:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800891c:	1c5a      	adds	r2, r3, #1
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008928:	b29b      	uxth	r3, r3
 800892a:	3b01      	subs	r3, #1
 800892c:	b29a      	uxth	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800893a:	b29b      	uxth	r3, r3
 800893c:	2b00      	cmp	r3, #0
 800893e:	d178      	bne.n	8008a32 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008948:	e853 3f00 	ldrex	r3, [r3]
 800894c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800894e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008950:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008954:	653b      	str	r3, [r7, #80]	@ 0x50
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	461a      	mov	r2, r3
 800895c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800895e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008960:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008962:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008964:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008966:	e841 2300 	strex	r3, r2, [r1]
 800896a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800896c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1e6      	bne.n	8008940 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3308      	adds	r3, #8
 8008978:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897c:	e853 3f00 	ldrex	r3, [r3]
 8008980:	623b      	str	r3, [r7, #32]
   return(result);
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	f023 0301 	bic.w	r3, r3, #1
 8008988:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	3308      	adds	r3, #8
 8008990:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008992:	633a      	str	r2, [r7, #48]	@ 0x30
 8008994:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008996:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008998:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800899a:	e841 2300 	strex	r3, r2, [r1]
 800899e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1e5      	bne.n	8008972 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2220      	movs	r2, #32
 80089aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d12e      	bne.n	8008a1a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	e853 3f00 	ldrex	r3, [r3]
 80089ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f023 0310 	bic.w	r3, r3, #16
 80089d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	461a      	mov	r2, r3
 80089de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089e0:	61fb      	str	r3, [r7, #28]
 80089e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e4:	69b9      	ldr	r1, [r7, #24]
 80089e6:	69fa      	ldr	r2, [r7, #28]
 80089e8:	e841 2300 	strex	r3, r2, [r1]
 80089ec:	617b      	str	r3, [r7, #20]
   return(result);
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1e6      	bne.n	80089c2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	f003 0310 	and.w	r3, r3, #16
 80089fe:	2b10      	cmp	r3, #16
 8008a00:	d103      	bne.n	8008a0a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2210      	movs	r2, #16
 8008a08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a10:	4619      	mov	r1, r3
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7ff f8d2 	bl	8007bbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a18:	e00b      	b.n	8008a32 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7f9 fdb0 	bl	8002580 <HAL_UART_RxCpltCallback>
}
 8008a20:	e007      	b.n	8008a32 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	699a      	ldr	r2, [r3, #24]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f042 0208 	orr.w	r2, r2, #8
 8008a30:	619a      	str	r2, [r3, #24]
}
 8008a32:	bf00      	nop
 8008a34:	3758      	adds	r7, #88	@ 0x58
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b096      	sub	sp, #88	@ 0x58
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a48:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a52:	2b22      	cmp	r3, #34	@ 0x22
 8008a54:	f040 8095 	bne.w	8008b82 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a5e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a66:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a68:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8008a6c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008a70:	4013      	ands	r3, r2
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a76:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a7c:	1c9a      	adds	r2, r3, #2
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d178      	bne.n	8008b92 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa8:	e853 3f00 	ldrex	r3, [r3]
 8008aac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	461a      	mov	r2, r3
 8008abc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008abe:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ac0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ac4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ac6:	e841 2300 	strex	r3, r2, [r1]
 8008aca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1e6      	bne.n	8008aa0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3308      	adds	r3, #8
 8008ad8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ada:	6a3b      	ldr	r3, [r7, #32]
 8008adc:	e853 3f00 	ldrex	r3, [r3]
 8008ae0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	f023 0301 	bic.w	r3, r3, #1
 8008ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3308      	adds	r3, #8
 8008af0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008af2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008af4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008af8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008afa:	e841 2300 	strex	r3, r2, [r1]
 8008afe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1e5      	bne.n	8008ad2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2220      	movs	r2, #32
 8008b0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d12e      	bne.n	8008b7a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	e853 3f00 	ldrex	r3, [r3]
 8008b2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	f023 0310 	bic.w	r3, r3, #16
 8008b36:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b40:	61bb      	str	r3, [r7, #24]
 8008b42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b44:	6979      	ldr	r1, [r7, #20]
 8008b46:	69ba      	ldr	r2, [r7, #24]
 8008b48:	e841 2300 	strex	r3, r2, [r1]
 8008b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1e6      	bne.n	8008b22 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	69db      	ldr	r3, [r3, #28]
 8008b5a:	f003 0310 	and.w	r3, r3, #16
 8008b5e:	2b10      	cmp	r3, #16
 8008b60:	d103      	bne.n	8008b6a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2210      	movs	r2, #16
 8008b68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008b70:	4619      	mov	r1, r3
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7ff f822 	bl	8007bbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b78:	e00b      	b.n	8008b92 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7f9 fd00 	bl	8002580 <HAL_UART_RxCpltCallback>
}
 8008b80:	e007      	b.n	8008b92 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	699a      	ldr	r2, [r3, #24]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f042 0208 	orr.w	r2, r2, #8
 8008b90:	619a      	str	r2, [r3, #24]
}
 8008b92:	bf00      	nop
 8008b94:	3758      	adds	r7, #88	@ 0x58
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
	...

08008b9c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b0a6      	sub	sp, #152	@ 0x98
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008baa:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bd2:	2b22      	cmp	r3, #34	@ 0x22
 8008bd4:	f040 814f 	bne.w	8008e76 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008bde:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008be2:	e0f6      	b.n	8008dd2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bea:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008bee:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8008bf2:	b2d9      	uxtb	r1, r3
 8008bf4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008bf8:	b2da      	uxtb	r2, r3
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bfe:	400a      	ands	r2, r1
 8008c00:	b2d2      	uxtb	r2, r2
 8008c02:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c08:	1c5a      	adds	r2, r3, #1
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	3b01      	subs	r3, #1
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	69db      	ldr	r3, [r3, #28]
 8008c26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c2e:	f003 0307 	and.w	r3, r3, #7
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d053      	beq.n	8008cde <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c36:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c3a:	f003 0301 	and.w	r3, r3, #1
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d011      	beq.n	8008c66 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00b      	beq.n	8008c66 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2201      	movs	r2, #1
 8008c54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c5c:	f043 0201 	orr.w	r2, r3, #1
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c6a:	f003 0302 	and.w	r3, r3, #2
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d011      	beq.n	8008c96 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008c72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00b      	beq.n	8008c96 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2202      	movs	r2, #2
 8008c84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c8c:	f043 0204 	orr.w	r2, r3, #4
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c9a:	f003 0304 	and.w	r3, r3, #4
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d011      	beq.n	8008cc6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008ca2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00b      	beq.n	8008cc6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2204      	movs	r2, #4
 8008cb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cbc:	f043 0202 	orr.w	r2, r3, #2
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d006      	beq.n	8008cde <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7fe ff69 	bl	8007ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d173      	bne.n	8008dd2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008cf2:	e853 3f00 	ldrex	r3, [r3]
 8008cf6:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008cf8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008cfa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cfe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	461a      	mov	r2, r3
 8008d08:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008d0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d0e:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d10:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008d12:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008d14:	e841 2300 	strex	r3, r2, [r1]
 8008d18:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008d1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1e4      	bne.n	8008cea <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3308      	adds	r3, #8
 8008d26:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d2a:	e853 3f00 	ldrex	r3, [r3]
 8008d2e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008d30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d36:	f023 0301 	bic.w	r3, r3, #1
 8008d3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	3308      	adds	r3, #8
 8008d42:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008d44:	657a      	str	r2, [r7, #84]	@ 0x54
 8008d46:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d48:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008d4a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008d4c:	e841 2300 	strex	r3, r2, [r1]
 8008d50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008d52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1e3      	bne.n	8008d20 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2220      	movs	r2, #32
 8008d5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d12e      	bne.n	8008dcc <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d7c:	e853 3f00 	ldrex	r3, [r3]
 8008d80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d84:	f023 0310 	bic.w	r3, r3, #16
 8008d88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d92:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d94:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d9a:	e841 2300 	strex	r3, r2, [r1]
 8008d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1e6      	bne.n	8008d74 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	69db      	ldr	r3, [r3, #28]
 8008dac:	f003 0310 	and.w	r3, r3, #16
 8008db0:	2b10      	cmp	r3, #16
 8008db2:	d103      	bne.n	8008dbc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2210      	movs	r2, #16
 8008dba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f7fe fef9 	bl	8007bbc <HAL_UARTEx_RxEventCallback>
 8008dca:	e002      	b.n	8008dd2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7f9 fbd7 	bl	8002580 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008dd2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d006      	beq.n	8008de8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008dda:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008dde:	f003 0320 	and.w	r3, r3, #32
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f47f aefe 	bne.w	8008be4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008dee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008df2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d045      	beq.n	8008e86 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d23e      	bcs.n	8008e86 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3308      	adds	r3, #8
 8008e0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e10:	6a3b      	ldr	r3, [r7, #32]
 8008e12:	e853 3f00 	ldrex	r3, [r3]
 8008e16:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e1e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	3308      	adds	r3, #8
 8008e26:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008e28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e30:	e841 2300 	strex	r3, r2, [r1]
 8008e34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1e5      	bne.n	8008e08 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a14      	ldr	r2, [pc, #80]	@ (8008e90 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8008e40:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	e853 3f00 	ldrex	r3, [r3]
 8008e4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	f043 0320 	orr.w	r3, r3, #32
 8008e56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e60:	61bb      	str	r3, [r7, #24]
 8008e62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e64:	6979      	ldr	r1, [r7, #20]
 8008e66:	69ba      	ldr	r2, [r7, #24]
 8008e68:	e841 2300 	strex	r3, r2, [r1]
 8008e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1e6      	bne.n	8008e42 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e74:	e007      	b.n	8008e86 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	699a      	ldr	r2, [r3, #24]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f042 0208 	orr.w	r2, r2, #8
 8008e84:	619a      	str	r2, [r3, #24]
}
 8008e86:	bf00      	nop
 8008e88:	3798      	adds	r7, #152	@ 0x98
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	080088db 	.word	0x080088db

08008e94 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b0a8      	sub	sp, #160	@ 0xa0
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008ea2:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	69db      	ldr	r3, [r3, #28]
 8008eac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eca:	2b22      	cmp	r3, #34	@ 0x22
 8008ecc:	f040 8153 	bne.w	8009176 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008ed6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008eda:	e0fa      	b.n	80090d2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ee2:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8008eee:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8008ef2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8008ef6:	4013      	ands	r3, r2
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008efe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f04:	1c9a      	adds	r2, r3, #2
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	3b01      	subs	r3, #1
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	69db      	ldr	r3, [r3, #28]
 8008f22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008f26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f2a:	f003 0307 	and.w	r3, r3, #7
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d053      	beq.n	8008fda <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008f32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d011      	beq.n	8008f62 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008f3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00b      	beq.n	8008f62 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f58:	f043 0201 	orr.w	r2, r3, #1
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f66:	f003 0302 	and.w	r3, r3, #2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d011      	beq.n	8008f92 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008f6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008f72:	f003 0301 	and.w	r3, r3, #1
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00b      	beq.n	8008f92 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2202      	movs	r2, #2
 8008f80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f88:	f043 0204 	orr.w	r2, r3, #4
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f96:	f003 0304 	and.w	r3, r3, #4
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d011      	beq.n	8008fc2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008f9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008fa2:	f003 0301 	and.w	r3, r3, #1
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00b      	beq.n	8008fc2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2204      	movs	r2, #4
 8008fb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fb8:	f043 0202 	orr.w	r2, r3, #2
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d006      	beq.n	8008fda <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f7fe fdeb 	bl	8007ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d175      	bne.n	80090d2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008fee:	e853 3f00 	ldrex	r3, [r3]
 8008ff2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008ff4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ff6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ffa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	461a      	mov	r2, r3
 8009004:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009008:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800900a:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800900e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009010:	e841 2300 	strex	r3, r2, [r1]
 8009014:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009016:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009018:	2b00      	cmp	r3, #0
 800901a:	d1e4      	bne.n	8008fe6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3308      	adds	r3, #8
 8009022:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009024:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009026:	e853 3f00 	ldrex	r3, [r3]
 800902a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800902c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800902e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009032:	f023 0301 	bic.w	r3, r3, #1
 8009036:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	3308      	adds	r3, #8
 8009040:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009044:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009046:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009048:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800904a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800904c:	e841 2300 	strex	r3, r2, [r1]
 8009050:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1e1      	bne.n	800901c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2220      	movs	r2, #32
 800905c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800906a:	2b01      	cmp	r3, #1
 800906c:	d12e      	bne.n	80090cc <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800907c:	e853 3f00 	ldrex	r3, [r3]
 8009080:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009084:	f023 0310 	bic.w	r3, r3, #16
 8009088:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	461a      	mov	r2, r3
 8009090:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009092:	647b      	str	r3, [r7, #68]	@ 0x44
 8009094:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009096:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009098:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800909a:	e841 2300 	strex	r3, r2, [r1]
 800909e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d1e6      	bne.n	8009074 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	69db      	ldr	r3, [r3, #28]
 80090ac:	f003 0310 	and.w	r3, r3, #16
 80090b0:	2b10      	cmp	r3, #16
 80090b2:	d103      	bne.n	80090bc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2210      	movs	r2, #16
 80090ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80090c2:	4619      	mov	r1, r3
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7fe fd79 	bl	8007bbc <HAL_UARTEx_RxEventCallback>
 80090ca:	e002      	b.n	80090d2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f7f9 fa57 	bl	8002580 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80090d2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d006      	beq.n	80090e8 <UART_RxISR_16BIT_FIFOEN+0x254>
 80090da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80090de:	f003 0320 	and.w	r3, r3, #32
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f47f aefa 	bne.w	8008edc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090ee:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80090f2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d045      	beq.n	8009186 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009100:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8009104:	429a      	cmp	r2, r3
 8009106:	d23e      	bcs.n	8009186 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3308      	adds	r3, #8
 800910e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009112:	e853 3f00 	ldrex	r3, [r3]
 8009116:	623b      	str	r3, [r7, #32]
   return(result);
 8009118:	6a3b      	ldr	r3, [r7, #32]
 800911a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800911e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	3308      	adds	r3, #8
 8009126:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009128:	633a      	str	r2, [r7, #48]	@ 0x30
 800912a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800912e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009130:	e841 2300 	strex	r3, r2, [r1]
 8009134:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1e5      	bne.n	8009108 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a14      	ldr	r2, [pc, #80]	@ (8009190 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009140:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	e853 3f00 	ldrex	r3, [r3]
 800914e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f043 0320 	orr.w	r3, r3, #32
 8009156:	673b      	str	r3, [r7, #112]	@ 0x70
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	461a      	mov	r2, r3
 800915e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009160:	61fb      	str	r3, [r7, #28]
 8009162:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009164:	69b9      	ldr	r1, [r7, #24]
 8009166:	69fa      	ldr	r2, [r7, #28]
 8009168:	e841 2300 	strex	r3, r2, [r1]
 800916c:	617b      	str	r3, [r7, #20]
   return(result);
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1e6      	bne.n	8009142 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009174:	e007      	b.n	8009186 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	699a      	ldr	r2, [r3, #24]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f042 0208 	orr.w	r2, r2, #8
 8009184:	619a      	str	r2, [r3, #24]
}
 8009186:	bf00      	nop
 8009188:	37a0      	adds	r7, #160	@ 0xa0
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	08008a3b 	.word	0x08008a3b

08009194 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800919c:	bf00      	nop
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d101      	bne.n	80091e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80091e2:	2302      	movs	r3, #2
 80091e4:	e027      	b.n	8009236 <HAL_UARTEx_DisableFifoMode+0x66>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2224      	movs	r2, #36	@ 0x24
 80091f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f022 0201 	bic.w	r2, r2, #1
 800920c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009214:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2220      	movs	r2, #32
 8009228:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3714      	adds	r7, #20
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b084      	sub	sp, #16
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
 800924a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009252:	2b01      	cmp	r3, #1
 8009254:	d101      	bne.n	800925a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009256:	2302      	movs	r3, #2
 8009258:	e02d      	b.n	80092b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2224      	movs	r2, #36	@ 0x24
 8009266:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f022 0201 	bic.w	r2, r2, #1
 8009280:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	430a      	orrs	r2, r1
 8009294:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f850 	bl	800933c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2220      	movs	r2, #32
 80092a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b084      	sub	sp, #16
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
 80092c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d101      	bne.n	80092d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80092d2:	2302      	movs	r3, #2
 80092d4:	e02d      	b.n	8009332 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2201      	movs	r2, #1
 80092da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2224      	movs	r2, #36	@ 0x24
 80092e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f022 0201 	bic.w	r2, r2, #1
 80092fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	683a      	ldr	r2, [r7, #0]
 800930e:	430a      	orrs	r2, r1
 8009310:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f812 	bl	800933c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2220      	movs	r2, #32
 8009324:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
	...

0800933c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009348:	2b00      	cmp	r3, #0
 800934a:	d108      	bne.n	800935e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800935c:	e031      	b.n	80093c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800935e:	2308      	movs	r3, #8
 8009360:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009362:	2308      	movs	r3, #8
 8009364:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	0e5b      	lsrs	r3, r3, #25
 800936e:	b2db      	uxtb	r3, r3
 8009370:	f003 0307 	and.w	r3, r3, #7
 8009374:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	0f5b      	lsrs	r3, r3, #29
 800937e:	b2db      	uxtb	r3, r3
 8009380:	f003 0307 	and.w	r3, r3, #7
 8009384:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009386:	7bbb      	ldrb	r3, [r7, #14]
 8009388:	7b3a      	ldrb	r2, [r7, #12]
 800938a:	4911      	ldr	r1, [pc, #68]	@ (80093d0 <UARTEx_SetNbDataToProcess+0x94>)
 800938c:	5c8a      	ldrb	r2, [r1, r2]
 800938e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009392:	7b3a      	ldrb	r2, [r7, #12]
 8009394:	490f      	ldr	r1, [pc, #60]	@ (80093d4 <UARTEx_SetNbDataToProcess+0x98>)
 8009396:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009398:	fb93 f3f2 	sdiv	r3, r3, r2
 800939c:	b29a      	uxth	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
 80093a6:	7b7a      	ldrb	r2, [r7, #13]
 80093a8:	4909      	ldr	r1, [pc, #36]	@ (80093d0 <UARTEx_SetNbDataToProcess+0x94>)
 80093aa:	5c8a      	ldrb	r2, [r1, r2]
 80093ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80093b0:	7b7a      	ldrb	r2, [r7, #13]
 80093b2:	4908      	ldr	r1, [pc, #32]	@ (80093d4 <UARTEx_SetNbDataToProcess+0x98>)
 80093b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80093c2:	bf00      	nop
 80093c4:	3714      	adds	r7, #20
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr
 80093ce:	bf00      	nop
 80093d0:	0800dc88 	.word	0x0800dc88
 80093d4:	0800dc90 	.word	0x0800dc90

080093d8 <atof>:
 80093d8:	2100      	movs	r1, #0
 80093da:	f000 be0f 	b.w	8009ffc <strtod>

080093de <atoi>:
 80093de:	220a      	movs	r2, #10
 80093e0:	2100      	movs	r1, #0
 80093e2:	f000 be93 	b.w	800a10c <strtol>

080093e6 <sulp>:
 80093e6:	b570      	push	{r4, r5, r6, lr}
 80093e8:	4604      	mov	r4, r0
 80093ea:	460d      	mov	r5, r1
 80093ec:	ec45 4b10 	vmov	d0, r4, r5
 80093f0:	4616      	mov	r6, r2
 80093f2:	f003 fd6d 	bl	800ced0 <__ulp>
 80093f6:	ec51 0b10 	vmov	r0, r1, d0
 80093fa:	b17e      	cbz	r6, 800941c <sulp+0x36>
 80093fc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009400:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009404:	2b00      	cmp	r3, #0
 8009406:	dd09      	ble.n	800941c <sulp+0x36>
 8009408:	051b      	lsls	r3, r3, #20
 800940a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800940e:	2400      	movs	r4, #0
 8009410:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009414:	4622      	mov	r2, r4
 8009416:	462b      	mov	r3, r5
 8009418:	f7f7 f926 	bl	8000668 <__aeabi_dmul>
 800941c:	ec41 0b10 	vmov	d0, r0, r1
 8009420:	bd70      	pop	{r4, r5, r6, pc}
 8009422:	0000      	movs	r0, r0
 8009424:	0000      	movs	r0, r0
	...

08009428 <_strtod_l>:
 8009428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942c:	b09f      	sub	sp, #124	@ 0x7c
 800942e:	460c      	mov	r4, r1
 8009430:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009432:	2200      	movs	r2, #0
 8009434:	921a      	str	r2, [sp, #104]	@ 0x68
 8009436:	9005      	str	r0, [sp, #20]
 8009438:	f04f 0a00 	mov.w	sl, #0
 800943c:	f04f 0b00 	mov.w	fp, #0
 8009440:	460a      	mov	r2, r1
 8009442:	9219      	str	r2, [sp, #100]	@ 0x64
 8009444:	7811      	ldrb	r1, [r2, #0]
 8009446:	292b      	cmp	r1, #43	@ 0x2b
 8009448:	d04a      	beq.n	80094e0 <_strtod_l+0xb8>
 800944a:	d838      	bhi.n	80094be <_strtod_l+0x96>
 800944c:	290d      	cmp	r1, #13
 800944e:	d832      	bhi.n	80094b6 <_strtod_l+0x8e>
 8009450:	2908      	cmp	r1, #8
 8009452:	d832      	bhi.n	80094ba <_strtod_l+0x92>
 8009454:	2900      	cmp	r1, #0
 8009456:	d03b      	beq.n	80094d0 <_strtod_l+0xa8>
 8009458:	2200      	movs	r2, #0
 800945a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800945c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800945e:	782a      	ldrb	r2, [r5, #0]
 8009460:	2a30      	cmp	r2, #48	@ 0x30
 8009462:	f040 80b3 	bne.w	80095cc <_strtod_l+0x1a4>
 8009466:	786a      	ldrb	r2, [r5, #1]
 8009468:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800946c:	2a58      	cmp	r2, #88	@ 0x58
 800946e:	d16e      	bne.n	800954e <_strtod_l+0x126>
 8009470:	9302      	str	r3, [sp, #8]
 8009472:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009474:	9301      	str	r3, [sp, #4]
 8009476:	ab1a      	add	r3, sp, #104	@ 0x68
 8009478:	9300      	str	r3, [sp, #0]
 800947a:	4a8e      	ldr	r2, [pc, #568]	@ (80096b4 <_strtod_l+0x28c>)
 800947c:	9805      	ldr	r0, [sp, #20]
 800947e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009480:	a919      	add	r1, sp, #100	@ 0x64
 8009482:	f002 fe17 	bl	800c0b4 <__gethex>
 8009486:	f010 060f 	ands.w	r6, r0, #15
 800948a:	4604      	mov	r4, r0
 800948c:	d005      	beq.n	800949a <_strtod_l+0x72>
 800948e:	2e06      	cmp	r6, #6
 8009490:	d128      	bne.n	80094e4 <_strtod_l+0xbc>
 8009492:	3501      	adds	r5, #1
 8009494:	2300      	movs	r3, #0
 8009496:	9519      	str	r5, [sp, #100]	@ 0x64
 8009498:	930b      	str	r3, [sp, #44]	@ 0x2c
 800949a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800949c:	2b00      	cmp	r3, #0
 800949e:	f040 858e 	bne.w	8009fbe <_strtod_l+0xb96>
 80094a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094a4:	b1cb      	cbz	r3, 80094da <_strtod_l+0xb2>
 80094a6:	4652      	mov	r2, sl
 80094a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80094ac:	ec43 2b10 	vmov	d0, r2, r3
 80094b0:	b01f      	add	sp, #124	@ 0x7c
 80094b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b6:	2920      	cmp	r1, #32
 80094b8:	d1ce      	bne.n	8009458 <_strtod_l+0x30>
 80094ba:	3201      	adds	r2, #1
 80094bc:	e7c1      	b.n	8009442 <_strtod_l+0x1a>
 80094be:	292d      	cmp	r1, #45	@ 0x2d
 80094c0:	d1ca      	bne.n	8009458 <_strtod_l+0x30>
 80094c2:	2101      	movs	r1, #1
 80094c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80094c6:	1c51      	adds	r1, r2, #1
 80094c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80094ca:	7852      	ldrb	r2, [r2, #1]
 80094cc:	2a00      	cmp	r2, #0
 80094ce:	d1c5      	bne.n	800945c <_strtod_l+0x34>
 80094d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80094d2:	9419      	str	r4, [sp, #100]	@ 0x64
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f040 8570 	bne.w	8009fba <_strtod_l+0xb92>
 80094da:	4652      	mov	r2, sl
 80094dc:	465b      	mov	r3, fp
 80094de:	e7e5      	b.n	80094ac <_strtod_l+0x84>
 80094e0:	2100      	movs	r1, #0
 80094e2:	e7ef      	b.n	80094c4 <_strtod_l+0x9c>
 80094e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80094e6:	b13a      	cbz	r2, 80094f8 <_strtod_l+0xd0>
 80094e8:	2135      	movs	r1, #53	@ 0x35
 80094ea:	a81c      	add	r0, sp, #112	@ 0x70
 80094ec:	f003 fdea 	bl	800d0c4 <__copybits>
 80094f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094f2:	9805      	ldr	r0, [sp, #20]
 80094f4:	f003 f9b8 	bl	800c868 <_Bfree>
 80094f8:	3e01      	subs	r6, #1
 80094fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80094fc:	2e04      	cmp	r6, #4
 80094fe:	d806      	bhi.n	800950e <_strtod_l+0xe6>
 8009500:	e8df f006 	tbb	[pc, r6]
 8009504:	201d0314 	.word	0x201d0314
 8009508:	14          	.byte	0x14
 8009509:	00          	.byte	0x00
 800950a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800950e:	05e1      	lsls	r1, r4, #23
 8009510:	bf48      	it	mi
 8009512:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009516:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800951a:	0d1b      	lsrs	r3, r3, #20
 800951c:	051b      	lsls	r3, r3, #20
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1bb      	bne.n	800949a <_strtod_l+0x72>
 8009522:	f001 fe61 	bl	800b1e8 <__errno>
 8009526:	2322      	movs	r3, #34	@ 0x22
 8009528:	6003      	str	r3, [r0, #0]
 800952a:	e7b6      	b.n	800949a <_strtod_l+0x72>
 800952c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009530:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009534:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009538:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800953c:	e7e7      	b.n	800950e <_strtod_l+0xe6>
 800953e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80096bc <_strtod_l+0x294>
 8009542:	e7e4      	b.n	800950e <_strtod_l+0xe6>
 8009544:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009548:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800954c:	e7df      	b.n	800950e <_strtod_l+0xe6>
 800954e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009550:	1c5a      	adds	r2, r3, #1
 8009552:	9219      	str	r2, [sp, #100]	@ 0x64
 8009554:	785b      	ldrb	r3, [r3, #1]
 8009556:	2b30      	cmp	r3, #48	@ 0x30
 8009558:	d0f9      	beq.n	800954e <_strtod_l+0x126>
 800955a:	2b00      	cmp	r3, #0
 800955c:	d09d      	beq.n	800949a <_strtod_l+0x72>
 800955e:	2301      	movs	r3, #1
 8009560:	9309      	str	r3, [sp, #36]	@ 0x24
 8009562:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009564:	930c      	str	r3, [sp, #48]	@ 0x30
 8009566:	2300      	movs	r3, #0
 8009568:	9308      	str	r3, [sp, #32]
 800956a:	930a      	str	r3, [sp, #40]	@ 0x28
 800956c:	461f      	mov	r7, r3
 800956e:	220a      	movs	r2, #10
 8009570:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009572:	7805      	ldrb	r5, [r0, #0]
 8009574:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009578:	b2d9      	uxtb	r1, r3
 800957a:	2909      	cmp	r1, #9
 800957c:	d928      	bls.n	80095d0 <_strtod_l+0x1a8>
 800957e:	494e      	ldr	r1, [pc, #312]	@ (80096b8 <_strtod_l+0x290>)
 8009580:	2201      	movs	r2, #1
 8009582:	f001 fd78 	bl	800b076 <strncmp>
 8009586:	2800      	cmp	r0, #0
 8009588:	d032      	beq.n	80095f0 <_strtod_l+0x1c8>
 800958a:	2000      	movs	r0, #0
 800958c:	462a      	mov	r2, r5
 800958e:	4681      	mov	r9, r0
 8009590:	463d      	mov	r5, r7
 8009592:	4603      	mov	r3, r0
 8009594:	2a65      	cmp	r2, #101	@ 0x65
 8009596:	d001      	beq.n	800959c <_strtod_l+0x174>
 8009598:	2a45      	cmp	r2, #69	@ 0x45
 800959a:	d114      	bne.n	80095c6 <_strtod_l+0x19e>
 800959c:	b91d      	cbnz	r5, 80095a6 <_strtod_l+0x17e>
 800959e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095a0:	4302      	orrs	r2, r0
 80095a2:	d095      	beq.n	80094d0 <_strtod_l+0xa8>
 80095a4:	2500      	movs	r5, #0
 80095a6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80095a8:	1c62      	adds	r2, r4, #1
 80095aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80095ac:	7862      	ldrb	r2, [r4, #1]
 80095ae:	2a2b      	cmp	r2, #43	@ 0x2b
 80095b0:	d077      	beq.n	80096a2 <_strtod_l+0x27a>
 80095b2:	2a2d      	cmp	r2, #45	@ 0x2d
 80095b4:	d07b      	beq.n	80096ae <_strtod_l+0x286>
 80095b6:	f04f 0c00 	mov.w	ip, #0
 80095ba:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80095be:	2909      	cmp	r1, #9
 80095c0:	f240 8082 	bls.w	80096c8 <_strtod_l+0x2a0>
 80095c4:	9419      	str	r4, [sp, #100]	@ 0x64
 80095c6:	f04f 0800 	mov.w	r8, #0
 80095ca:	e0a2      	b.n	8009712 <_strtod_l+0x2ea>
 80095cc:	2300      	movs	r3, #0
 80095ce:	e7c7      	b.n	8009560 <_strtod_l+0x138>
 80095d0:	2f08      	cmp	r7, #8
 80095d2:	bfd5      	itete	le
 80095d4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80095d6:	9908      	ldrgt	r1, [sp, #32]
 80095d8:	fb02 3301 	mlale	r3, r2, r1, r3
 80095dc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80095e0:	f100 0001 	add.w	r0, r0, #1
 80095e4:	bfd4      	ite	le
 80095e6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80095e8:	9308      	strgt	r3, [sp, #32]
 80095ea:	3701      	adds	r7, #1
 80095ec:	9019      	str	r0, [sp, #100]	@ 0x64
 80095ee:	e7bf      	b.n	8009570 <_strtod_l+0x148>
 80095f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095f2:	1c5a      	adds	r2, r3, #1
 80095f4:	9219      	str	r2, [sp, #100]	@ 0x64
 80095f6:	785a      	ldrb	r2, [r3, #1]
 80095f8:	b37f      	cbz	r7, 800965a <_strtod_l+0x232>
 80095fa:	4681      	mov	r9, r0
 80095fc:	463d      	mov	r5, r7
 80095fe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009602:	2b09      	cmp	r3, #9
 8009604:	d912      	bls.n	800962c <_strtod_l+0x204>
 8009606:	2301      	movs	r3, #1
 8009608:	e7c4      	b.n	8009594 <_strtod_l+0x16c>
 800960a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800960c:	1c5a      	adds	r2, r3, #1
 800960e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009610:	785a      	ldrb	r2, [r3, #1]
 8009612:	3001      	adds	r0, #1
 8009614:	2a30      	cmp	r2, #48	@ 0x30
 8009616:	d0f8      	beq.n	800960a <_strtod_l+0x1e2>
 8009618:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800961c:	2b08      	cmp	r3, #8
 800961e:	f200 84d3 	bhi.w	8009fc8 <_strtod_l+0xba0>
 8009622:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009624:	930c      	str	r3, [sp, #48]	@ 0x30
 8009626:	4681      	mov	r9, r0
 8009628:	2000      	movs	r0, #0
 800962a:	4605      	mov	r5, r0
 800962c:	3a30      	subs	r2, #48	@ 0x30
 800962e:	f100 0301 	add.w	r3, r0, #1
 8009632:	d02a      	beq.n	800968a <_strtod_l+0x262>
 8009634:	4499      	add	r9, r3
 8009636:	eb00 0c05 	add.w	ip, r0, r5
 800963a:	462b      	mov	r3, r5
 800963c:	210a      	movs	r1, #10
 800963e:	4563      	cmp	r3, ip
 8009640:	d10d      	bne.n	800965e <_strtod_l+0x236>
 8009642:	1c69      	adds	r1, r5, #1
 8009644:	4401      	add	r1, r0
 8009646:	4428      	add	r0, r5
 8009648:	2808      	cmp	r0, #8
 800964a:	dc16      	bgt.n	800967a <_strtod_l+0x252>
 800964c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800964e:	230a      	movs	r3, #10
 8009650:	fb03 2300 	mla	r3, r3, r0, r2
 8009654:	930a      	str	r3, [sp, #40]	@ 0x28
 8009656:	2300      	movs	r3, #0
 8009658:	e018      	b.n	800968c <_strtod_l+0x264>
 800965a:	4638      	mov	r0, r7
 800965c:	e7da      	b.n	8009614 <_strtod_l+0x1ec>
 800965e:	2b08      	cmp	r3, #8
 8009660:	f103 0301 	add.w	r3, r3, #1
 8009664:	dc03      	bgt.n	800966e <_strtod_l+0x246>
 8009666:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009668:	434e      	muls	r6, r1
 800966a:	960a      	str	r6, [sp, #40]	@ 0x28
 800966c:	e7e7      	b.n	800963e <_strtod_l+0x216>
 800966e:	2b10      	cmp	r3, #16
 8009670:	bfde      	ittt	le
 8009672:	9e08      	ldrle	r6, [sp, #32]
 8009674:	434e      	mulle	r6, r1
 8009676:	9608      	strle	r6, [sp, #32]
 8009678:	e7e1      	b.n	800963e <_strtod_l+0x216>
 800967a:	280f      	cmp	r0, #15
 800967c:	dceb      	bgt.n	8009656 <_strtod_l+0x22e>
 800967e:	9808      	ldr	r0, [sp, #32]
 8009680:	230a      	movs	r3, #10
 8009682:	fb03 2300 	mla	r3, r3, r0, r2
 8009686:	9308      	str	r3, [sp, #32]
 8009688:	e7e5      	b.n	8009656 <_strtod_l+0x22e>
 800968a:	4629      	mov	r1, r5
 800968c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800968e:	1c50      	adds	r0, r2, #1
 8009690:	9019      	str	r0, [sp, #100]	@ 0x64
 8009692:	7852      	ldrb	r2, [r2, #1]
 8009694:	4618      	mov	r0, r3
 8009696:	460d      	mov	r5, r1
 8009698:	e7b1      	b.n	80095fe <_strtod_l+0x1d6>
 800969a:	f04f 0900 	mov.w	r9, #0
 800969e:	2301      	movs	r3, #1
 80096a0:	e77d      	b.n	800959e <_strtod_l+0x176>
 80096a2:	f04f 0c00 	mov.w	ip, #0
 80096a6:	1ca2      	adds	r2, r4, #2
 80096a8:	9219      	str	r2, [sp, #100]	@ 0x64
 80096aa:	78a2      	ldrb	r2, [r4, #2]
 80096ac:	e785      	b.n	80095ba <_strtod_l+0x192>
 80096ae:	f04f 0c01 	mov.w	ip, #1
 80096b2:	e7f8      	b.n	80096a6 <_strtod_l+0x27e>
 80096b4:	0800dcb0 	.word	0x0800dcb0
 80096b8:	0800dc98 	.word	0x0800dc98
 80096bc:	7ff00000 	.word	0x7ff00000
 80096c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80096c2:	1c51      	adds	r1, r2, #1
 80096c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80096c6:	7852      	ldrb	r2, [r2, #1]
 80096c8:	2a30      	cmp	r2, #48	@ 0x30
 80096ca:	d0f9      	beq.n	80096c0 <_strtod_l+0x298>
 80096cc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80096d0:	2908      	cmp	r1, #8
 80096d2:	f63f af78 	bhi.w	80095c6 <_strtod_l+0x19e>
 80096d6:	3a30      	subs	r2, #48	@ 0x30
 80096d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80096da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80096dc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80096de:	f04f 080a 	mov.w	r8, #10
 80096e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80096e4:	1c56      	adds	r6, r2, #1
 80096e6:	9619      	str	r6, [sp, #100]	@ 0x64
 80096e8:	7852      	ldrb	r2, [r2, #1]
 80096ea:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80096ee:	f1be 0f09 	cmp.w	lr, #9
 80096f2:	d939      	bls.n	8009768 <_strtod_l+0x340>
 80096f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80096f6:	1a76      	subs	r6, r6, r1
 80096f8:	2e08      	cmp	r6, #8
 80096fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80096fe:	dc03      	bgt.n	8009708 <_strtod_l+0x2e0>
 8009700:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009702:	4588      	cmp	r8, r1
 8009704:	bfa8      	it	ge
 8009706:	4688      	movge	r8, r1
 8009708:	f1bc 0f00 	cmp.w	ip, #0
 800970c:	d001      	beq.n	8009712 <_strtod_l+0x2ea>
 800970e:	f1c8 0800 	rsb	r8, r8, #0
 8009712:	2d00      	cmp	r5, #0
 8009714:	d14e      	bne.n	80097b4 <_strtod_l+0x38c>
 8009716:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009718:	4308      	orrs	r0, r1
 800971a:	f47f aebe 	bne.w	800949a <_strtod_l+0x72>
 800971e:	2b00      	cmp	r3, #0
 8009720:	f47f aed6 	bne.w	80094d0 <_strtod_l+0xa8>
 8009724:	2a69      	cmp	r2, #105	@ 0x69
 8009726:	d028      	beq.n	800977a <_strtod_l+0x352>
 8009728:	dc25      	bgt.n	8009776 <_strtod_l+0x34e>
 800972a:	2a49      	cmp	r2, #73	@ 0x49
 800972c:	d025      	beq.n	800977a <_strtod_l+0x352>
 800972e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009730:	f47f aece 	bne.w	80094d0 <_strtod_l+0xa8>
 8009734:	499b      	ldr	r1, [pc, #620]	@ (80099a4 <_strtod_l+0x57c>)
 8009736:	a819      	add	r0, sp, #100	@ 0x64
 8009738:	f002 fede 	bl	800c4f8 <__match>
 800973c:	2800      	cmp	r0, #0
 800973e:	f43f aec7 	beq.w	80094d0 <_strtod_l+0xa8>
 8009742:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	2b28      	cmp	r3, #40	@ 0x28
 8009748:	d12e      	bne.n	80097a8 <_strtod_l+0x380>
 800974a:	4997      	ldr	r1, [pc, #604]	@ (80099a8 <_strtod_l+0x580>)
 800974c:	aa1c      	add	r2, sp, #112	@ 0x70
 800974e:	a819      	add	r0, sp, #100	@ 0x64
 8009750:	f002 fee6 	bl	800c520 <__hexnan>
 8009754:	2805      	cmp	r0, #5
 8009756:	d127      	bne.n	80097a8 <_strtod_l+0x380>
 8009758:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800975a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800975e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009762:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009766:	e698      	b.n	800949a <_strtod_l+0x72>
 8009768:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800976a:	fb08 2101 	mla	r1, r8, r1, r2
 800976e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009772:	920e      	str	r2, [sp, #56]	@ 0x38
 8009774:	e7b5      	b.n	80096e2 <_strtod_l+0x2ba>
 8009776:	2a6e      	cmp	r2, #110	@ 0x6e
 8009778:	e7da      	b.n	8009730 <_strtod_l+0x308>
 800977a:	498c      	ldr	r1, [pc, #560]	@ (80099ac <_strtod_l+0x584>)
 800977c:	a819      	add	r0, sp, #100	@ 0x64
 800977e:	f002 febb 	bl	800c4f8 <__match>
 8009782:	2800      	cmp	r0, #0
 8009784:	f43f aea4 	beq.w	80094d0 <_strtod_l+0xa8>
 8009788:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800978a:	4989      	ldr	r1, [pc, #548]	@ (80099b0 <_strtod_l+0x588>)
 800978c:	3b01      	subs	r3, #1
 800978e:	a819      	add	r0, sp, #100	@ 0x64
 8009790:	9319      	str	r3, [sp, #100]	@ 0x64
 8009792:	f002 feb1 	bl	800c4f8 <__match>
 8009796:	b910      	cbnz	r0, 800979e <_strtod_l+0x376>
 8009798:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800979a:	3301      	adds	r3, #1
 800979c:	9319      	str	r3, [sp, #100]	@ 0x64
 800979e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80099c0 <_strtod_l+0x598>
 80097a2:	f04f 0a00 	mov.w	sl, #0
 80097a6:	e678      	b.n	800949a <_strtod_l+0x72>
 80097a8:	4882      	ldr	r0, [pc, #520]	@ (80099b4 <_strtod_l+0x58c>)
 80097aa:	f001 fd59 	bl	800b260 <nan>
 80097ae:	ec5b ab10 	vmov	sl, fp, d0
 80097b2:	e672      	b.n	800949a <_strtod_l+0x72>
 80097b4:	eba8 0309 	sub.w	r3, r8, r9
 80097b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80097ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80097bc:	2f00      	cmp	r7, #0
 80097be:	bf08      	it	eq
 80097c0:	462f      	moveq	r7, r5
 80097c2:	2d10      	cmp	r5, #16
 80097c4:	462c      	mov	r4, r5
 80097c6:	bfa8      	it	ge
 80097c8:	2410      	movge	r4, #16
 80097ca:	f7f6 fed3 	bl	8000574 <__aeabi_ui2d>
 80097ce:	2d09      	cmp	r5, #9
 80097d0:	4682      	mov	sl, r0
 80097d2:	468b      	mov	fp, r1
 80097d4:	dc13      	bgt.n	80097fe <_strtod_l+0x3d6>
 80097d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f43f ae5e 	beq.w	800949a <_strtod_l+0x72>
 80097de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097e0:	dd78      	ble.n	80098d4 <_strtod_l+0x4ac>
 80097e2:	2b16      	cmp	r3, #22
 80097e4:	dc5f      	bgt.n	80098a6 <_strtod_l+0x47e>
 80097e6:	4974      	ldr	r1, [pc, #464]	@ (80099b8 <_strtod_l+0x590>)
 80097e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80097ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097f0:	4652      	mov	r2, sl
 80097f2:	465b      	mov	r3, fp
 80097f4:	f7f6 ff38 	bl	8000668 <__aeabi_dmul>
 80097f8:	4682      	mov	sl, r0
 80097fa:	468b      	mov	fp, r1
 80097fc:	e64d      	b.n	800949a <_strtod_l+0x72>
 80097fe:	4b6e      	ldr	r3, [pc, #440]	@ (80099b8 <_strtod_l+0x590>)
 8009800:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009804:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009808:	f7f6 ff2e 	bl	8000668 <__aeabi_dmul>
 800980c:	4682      	mov	sl, r0
 800980e:	9808      	ldr	r0, [sp, #32]
 8009810:	468b      	mov	fp, r1
 8009812:	f7f6 feaf 	bl	8000574 <__aeabi_ui2d>
 8009816:	4602      	mov	r2, r0
 8009818:	460b      	mov	r3, r1
 800981a:	4650      	mov	r0, sl
 800981c:	4659      	mov	r1, fp
 800981e:	f7f6 fd6d 	bl	80002fc <__adddf3>
 8009822:	2d0f      	cmp	r5, #15
 8009824:	4682      	mov	sl, r0
 8009826:	468b      	mov	fp, r1
 8009828:	ddd5      	ble.n	80097d6 <_strtod_l+0x3ae>
 800982a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800982c:	1b2c      	subs	r4, r5, r4
 800982e:	441c      	add	r4, r3
 8009830:	2c00      	cmp	r4, #0
 8009832:	f340 8096 	ble.w	8009962 <_strtod_l+0x53a>
 8009836:	f014 030f 	ands.w	r3, r4, #15
 800983a:	d00a      	beq.n	8009852 <_strtod_l+0x42a>
 800983c:	495e      	ldr	r1, [pc, #376]	@ (80099b8 <_strtod_l+0x590>)
 800983e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009842:	4652      	mov	r2, sl
 8009844:	465b      	mov	r3, fp
 8009846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800984a:	f7f6 ff0d 	bl	8000668 <__aeabi_dmul>
 800984e:	4682      	mov	sl, r0
 8009850:	468b      	mov	fp, r1
 8009852:	f034 040f 	bics.w	r4, r4, #15
 8009856:	d073      	beq.n	8009940 <_strtod_l+0x518>
 8009858:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800985c:	dd48      	ble.n	80098f0 <_strtod_l+0x4c8>
 800985e:	2400      	movs	r4, #0
 8009860:	46a0      	mov	r8, r4
 8009862:	940a      	str	r4, [sp, #40]	@ 0x28
 8009864:	46a1      	mov	r9, r4
 8009866:	9a05      	ldr	r2, [sp, #20]
 8009868:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80099c0 <_strtod_l+0x598>
 800986c:	2322      	movs	r3, #34	@ 0x22
 800986e:	6013      	str	r3, [r2, #0]
 8009870:	f04f 0a00 	mov.w	sl, #0
 8009874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009876:	2b00      	cmp	r3, #0
 8009878:	f43f ae0f 	beq.w	800949a <_strtod_l+0x72>
 800987c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800987e:	9805      	ldr	r0, [sp, #20]
 8009880:	f002 fff2 	bl	800c868 <_Bfree>
 8009884:	9805      	ldr	r0, [sp, #20]
 8009886:	4649      	mov	r1, r9
 8009888:	f002 ffee 	bl	800c868 <_Bfree>
 800988c:	9805      	ldr	r0, [sp, #20]
 800988e:	4641      	mov	r1, r8
 8009890:	f002 ffea 	bl	800c868 <_Bfree>
 8009894:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009896:	9805      	ldr	r0, [sp, #20]
 8009898:	f002 ffe6 	bl	800c868 <_Bfree>
 800989c:	9805      	ldr	r0, [sp, #20]
 800989e:	4621      	mov	r1, r4
 80098a0:	f002 ffe2 	bl	800c868 <_Bfree>
 80098a4:	e5f9      	b.n	800949a <_strtod_l+0x72>
 80098a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80098ac:	4293      	cmp	r3, r2
 80098ae:	dbbc      	blt.n	800982a <_strtod_l+0x402>
 80098b0:	4c41      	ldr	r4, [pc, #260]	@ (80099b8 <_strtod_l+0x590>)
 80098b2:	f1c5 050f 	rsb	r5, r5, #15
 80098b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80098ba:	4652      	mov	r2, sl
 80098bc:	465b      	mov	r3, fp
 80098be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098c2:	f7f6 fed1 	bl	8000668 <__aeabi_dmul>
 80098c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098c8:	1b5d      	subs	r5, r3, r5
 80098ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80098ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80098d2:	e78f      	b.n	80097f4 <_strtod_l+0x3cc>
 80098d4:	3316      	adds	r3, #22
 80098d6:	dba8      	blt.n	800982a <_strtod_l+0x402>
 80098d8:	4b37      	ldr	r3, [pc, #220]	@ (80099b8 <_strtod_l+0x590>)
 80098da:	eba9 0808 	sub.w	r8, r9, r8
 80098de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80098e2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80098e6:	4650      	mov	r0, sl
 80098e8:	4659      	mov	r1, fp
 80098ea:	f7f6 ffe7 	bl	80008bc <__aeabi_ddiv>
 80098ee:	e783      	b.n	80097f8 <_strtod_l+0x3d0>
 80098f0:	4b32      	ldr	r3, [pc, #200]	@ (80099bc <_strtod_l+0x594>)
 80098f2:	9308      	str	r3, [sp, #32]
 80098f4:	2300      	movs	r3, #0
 80098f6:	1124      	asrs	r4, r4, #4
 80098f8:	4650      	mov	r0, sl
 80098fa:	4659      	mov	r1, fp
 80098fc:	461e      	mov	r6, r3
 80098fe:	2c01      	cmp	r4, #1
 8009900:	dc21      	bgt.n	8009946 <_strtod_l+0x51e>
 8009902:	b10b      	cbz	r3, 8009908 <_strtod_l+0x4e0>
 8009904:	4682      	mov	sl, r0
 8009906:	468b      	mov	fp, r1
 8009908:	492c      	ldr	r1, [pc, #176]	@ (80099bc <_strtod_l+0x594>)
 800990a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800990e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009912:	4652      	mov	r2, sl
 8009914:	465b      	mov	r3, fp
 8009916:	e9d1 0100 	ldrd	r0, r1, [r1]
 800991a:	f7f6 fea5 	bl	8000668 <__aeabi_dmul>
 800991e:	4b28      	ldr	r3, [pc, #160]	@ (80099c0 <_strtod_l+0x598>)
 8009920:	460a      	mov	r2, r1
 8009922:	400b      	ands	r3, r1
 8009924:	4927      	ldr	r1, [pc, #156]	@ (80099c4 <_strtod_l+0x59c>)
 8009926:	428b      	cmp	r3, r1
 8009928:	4682      	mov	sl, r0
 800992a:	d898      	bhi.n	800985e <_strtod_l+0x436>
 800992c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009930:	428b      	cmp	r3, r1
 8009932:	bf86      	itte	hi
 8009934:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80099c8 <_strtod_l+0x5a0>
 8009938:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800993c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009940:	2300      	movs	r3, #0
 8009942:	9308      	str	r3, [sp, #32]
 8009944:	e07a      	b.n	8009a3c <_strtod_l+0x614>
 8009946:	07e2      	lsls	r2, r4, #31
 8009948:	d505      	bpl.n	8009956 <_strtod_l+0x52e>
 800994a:	9b08      	ldr	r3, [sp, #32]
 800994c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009950:	f7f6 fe8a 	bl	8000668 <__aeabi_dmul>
 8009954:	2301      	movs	r3, #1
 8009956:	9a08      	ldr	r2, [sp, #32]
 8009958:	3208      	adds	r2, #8
 800995a:	3601      	adds	r6, #1
 800995c:	1064      	asrs	r4, r4, #1
 800995e:	9208      	str	r2, [sp, #32]
 8009960:	e7cd      	b.n	80098fe <_strtod_l+0x4d6>
 8009962:	d0ed      	beq.n	8009940 <_strtod_l+0x518>
 8009964:	4264      	negs	r4, r4
 8009966:	f014 020f 	ands.w	r2, r4, #15
 800996a:	d00a      	beq.n	8009982 <_strtod_l+0x55a>
 800996c:	4b12      	ldr	r3, [pc, #72]	@ (80099b8 <_strtod_l+0x590>)
 800996e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009972:	4650      	mov	r0, sl
 8009974:	4659      	mov	r1, fp
 8009976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997a:	f7f6 ff9f 	bl	80008bc <__aeabi_ddiv>
 800997e:	4682      	mov	sl, r0
 8009980:	468b      	mov	fp, r1
 8009982:	1124      	asrs	r4, r4, #4
 8009984:	d0dc      	beq.n	8009940 <_strtod_l+0x518>
 8009986:	2c1f      	cmp	r4, #31
 8009988:	dd20      	ble.n	80099cc <_strtod_l+0x5a4>
 800998a:	2400      	movs	r4, #0
 800998c:	46a0      	mov	r8, r4
 800998e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009990:	46a1      	mov	r9, r4
 8009992:	9a05      	ldr	r2, [sp, #20]
 8009994:	2322      	movs	r3, #34	@ 0x22
 8009996:	f04f 0a00 	mov.w	sl, #0
 800999a:	f04f 0b00 	mov.w	fp, #0
 800999e:	6013      	str	r3, [r2, #0]
 80099a0:	e768      	b.n	8009874 <_strtod_l+0x44c>
 80099a2:	bf00      	nop
 80099a4:	0800ddfe 	.word	0x0800ddfe
 80099a8:	0800dc9c 	.word	0x0800dc9c
 80099ac:	0800ddf6 	.word	0x0800ddf6
 80099b0:	0800dee2 	.word	0x0800dee2
 80099b4:	0800dede 	.word	0x0800dede
 80099b8:	0800e048 	.word	0x0800e048
 80099bc:	0800e020 	.word	0x0800e020
 80099c0:	7ff00000 	.word	0x7ff00000
 80099c4:	7ca00000 	.word	0x7ca00000
 80099c8:	7fefffff 	.word	0x7fefffff
 80099cc:	f014 0310 	ands.w	r3, r4, #16
 80099d0:	bf18      	it	ne
 80099d2:	236a      	movne	r3, #106	@ 0x6a
 80099d4:	4ea9      	ldr	r6, [pc, #676]	@ (8009c7c <_strtod_l+0x854>)
 80099d6:	9308      	str	r3, [sp, #32]
 80099d8:	4650      	mov	r0, sl
 80099da:	4659      	mov	r1, fp
 80099dc:	2300      	movs	r3, #0
 80099de:	07e2      	lsls	r2, r4, #31
 80099e0:	d504      	bpl.n	80099ec <_strtod_l+0x5c4>
 80099e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80099e6:	f7f6 fe3f 	bl	8000668 <__aeabi_dmul>
 80099ea:	2301      	movs	r3, #1
 80099ec:	1064      	asrs	r4, r4, #1
 80099ee:	f106 0608 	add.w	r6, r6, #8
 80099f2:	d1f4      	bne.n	80099de <_strtod_l+0x5b6>
 80099f4:	b10b      	cbz	r3, 80099fa <_strtod_l+0x5d2>
 80099f6:	4682      	mov	sl, r0
 80099f8:	468b      	mov	fp, r1
 80099fa:	9b08      	ldr	r3, [sp, #32]
 80099fc:	b1b3      	cbz	r3, 8009a2c <_strtod_l+0x604>
 80099fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009a02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	4659      	mov	r1, fp
 8009a0a:	dd0f      	ble.n	8009a2c <_strtod_l+0x604>
 8009a0c:	2b1f      	cmp	r3, #31
 8009a0e:	dd55      	ble.n	8009abc <_strtod_l+0x694>
 8009a10:	2b34      	cmp	r3, #52	@ 0x34
 8009a12:	bfde      	ittt	le
 8009a14:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8009a18:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009a1c:	4093      	lslle	r3, r2
 8009a1e:	f04f 0a00 	mov.w	sl, #0
 8009a22:	bfcc      	ite	gt
 8009a24:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009a28:	ea03 0b01 	andle.w	fp, r3, r1
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	2300      	movs	r3, #0
 8009a30:	4650      	mov	r0, sl
 8009a32:	4659      	mov	r1, fp
 8009a34:	f7f7 f880 	bl	8000b38 <__aeabi_dcmpeq>
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	d1a6      	bne.n	800998a <_strtod_l+0x562>
 8009a3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a3e:	9300      	str	r3, [sp, #0]
 8009a40:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009a42:	9805      	ldr	r0, [sp, #20]
 8009a44:	462b      	mov	r3, r5
 8009a46:	463a      	mov	r2, r7
 8009a48:	f002 ff76 	bl	800c938 <__s2b>
 8009a4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	f43f af05 	beq.w	800985e <_strtod_l+0x436>
 8009a54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a56:	2a00      	cmp	r2, #0
 8009a58:	eba9 0308 	sub.w	r3, r9, r8
 8009a5c:	bfa8      	it	ge
 8009a5e:	2300      	movge	r3, #0
 8009a60:	9312      	str	r3, [sp, #72]	@ 0x48
 8009a62:	2400      	movs	r4, #0
 8009a64:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009a68:	9316      	str	r3, [sp, #88]	@ 0x58
 8009a6a:	46a0      	mov	r8, r4
 8009a6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a6e:	9805      	ldr	r0, [sp, #20]
 8009a70:	6859      	ldr	r1, [r3, #4]
 8009a72:	f002 feb9 	bl	800c7e8 <_Balloc>
 8009a76:	4681      	mov	r9, r0
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	f43f aef4 	beq.w	8009866 <_strtod_l+0x43e>
 8009a7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a80:	691a      	ldr	r2, [r3, #16]
 8009a82:	3202      	adds	r2, #2
 8009a84:	f103 010c 	add.w	r1, r3, #12
 8009a88:	0092      	lsls	r2, r2, #2
 8009a8a:	300c      	adds	r0, #12
 8009a8c:	f001 fbd9 	bl	800b242 <memcpy>
 8009a90:	ec4b ab10 	vmov	d0, sl, fp
 8009a94:	9805      	ldr	r0, [sp, #20]
 8009a96:	aa1c      	add	r2, sp, #112	@ 0x70
 8009a98:	a91b      	add	r1, sp, #108	@ 0x6c
 8009a9a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009a9e:	f003 fa87 	bl	800cfb0 <__d2b>
 8009aa2:	901a      	str	r0, [sp, #104]	@ 0x68
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	f43f aede 	beq.w	8009866 <_strtod_l+0x43e>
 8009aaa:	9805      	ldr	r0, [sp, #20]
 8009aac:	2101      	movs	r1, #1
 8009aae:	f002 ffd9 	bl	800ca64 <__i2b>
 8009ab2:	4680      	mov	r8, r0
 8009ab4:	b948      	cbnz	r0, 8009aca <_strtod_l+0x6a2>
 8009ab6:	f04f 0800 	mov.w	r8, #0
 8009aba:	e6d4      	b.n	8009866 <_strtod_l+0x43e>
 8009abc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac4:	ea03 0a0a 	and.w	sl, r3, sl
 8009ac8:	e7b0      	b.n	8009a2c <_strtod_l+0x604>
 8009aca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009acc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009ace:	2d00      	cmp	r5, #0
 8009ad0:	bfab      	itete	ge
 8009ad2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009ad4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009ad6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009ad8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009ada:	bfac      	ite	ge
 8009adc:	18ef      	addge	r7, r5, r3
 8009ade:	1b5e      	sublt	r6, r3, r5
 8009ae0:	9b08      	ldr	r3, [sp, #32]
 8009ae2:	1aed      	subs	r5, r5, r3
 8009ae4:	4415      	add	r5, r2
 8009ae6:	4b66      	ldr	r3, [pc, #408]	@ (8009c80 <_strtod_l+0x858>)
 8009ae8:	3d01      	subs	r5, #1
 8009aea:	429d      	cmp	r5, r3
 8009aec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009af0:	da50      	bge.n	8009b94 <_strtod_l+0x76c>
 8009af2:	1b5b      	subs	r3, r3, r5
 8009af4:	2b1f      	cmp	r3, #31
 8009af6:	eba2 0203 	sub.w	r2, r2, r3
 8009afa:	f04f 0101 	mov.w	r1, #1
 8009afe:	dc3d      	bgt.n	8009b7c <_strtod_l+0x754>
 8009b00:	fa01 f303 	lsl.w	r3, r1, r3
 8009b04:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b06:	2300      	movs	r3, #0
 8009b08:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b0a:	18bd      	adds	r5, r7, r2
 8009b0c:	9b08      	ldr	r3, [sp, #32]
 8009b0e:	42af      	cmp	r7, r5
 8009b10:	4416      	add	r6, r2
 8009b12:	441e      	add	r6, r3
 8009b14:	463b      	mov	r3, r7
 8009b16:	bfa8      	it	ge
 8009b18:	462b      	movge	r3, r5
 8009b1a:	42b3      	cmp	r3, r6
 8009b1c:	bfa8      	it	ge
 8009b1e:	4633      	movge	r3, r6
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	bfc2      	ittt	gt
 8009b24:	1aed      	subgt	r5, r5, r3
 8009b26:	1af6      	subgt	r6, r6, r3
 8009b28:	1aff      	subgt	r7, r7, r3
 8009b2a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	dd16      	ble.n	8009b5e <_strtod_l+0x736>
 8009b30:	4641      	mov	r1, r8
 8009b32:	9805      	ldr	r0, [sp, #20]
 8009b34:	461a      	mov	r2, r3
 8009b36:	f003 f855 	bl	800cbe4 <__pow5mult>
 8009b3a:	4680      	mov	r8, r0
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	d0ba      	beq.n	8009ab6 <_strtod_l+0x68e>
 8009b40:	4601      	mov	r1, r0
 8009b42:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009b44:	9805      	ldr	r0, [sp, #20]
 8009b46:	f002 ffa3 	bl	800ca90 <__multiply>
 8009b4a:	900e      	str	r0, [sp, #56]	@ 0x38
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	f43f ae8a 	beq.w	8009866 <_strtod_l+0x43e>
 8009b52:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b54:	9805      	ldr	r0, [sp, #20]
 8009b56:	f002 fe87 	bl	800c868 <_Bfree>
 8009b5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b5e:	2d00      	cmp	r5, #0
 8009b60:	dc1d      	bgt.n	8009b9e <_strtod_l+0x776>
 8009b62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	dd23      	ble.n	8009bb0 <_strtod_l+0x788>
 8009b68:	4649      	mov	r1, r9
 8009b6a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009b6c:	9805      	ldr	r0, [sp, #20]
 8009b6e:	f003 f839 	bl	800cbe4 <__pow5mult>
 8009b72:	4681      	mov	r9, r0
 8009b74:	b9e0      	cbnz	r0, 8009bb0 <_strtod_l+0x788>
 8009b76:	f04f 0900 	mov.w	r9, #0
 8009b7a:	e674      	b.n	8009866 <_strtod_l+0x43e>
 8009b7c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009b80:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009b84:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009b88:	35e2      	adds	r5, #226	@ 0xe2
 8009b8a:	fa01 f305 	lsl.w	r3, r1, r5
 8009b8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b90:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009b92:	e7ba      	b.n	8009b0a <_strtod_l+0x6e2>
 8009b94:	2300      	movs	r3, #0
 8009b96:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b98:	2301      	movs	r3, #1
 8009b9a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b9c:	e7b5      	b.n	8009b0a <_strtod_l+0x6e2>
 8009b9e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ba0:	9805      	ldr	r0, [sp, #20]
 8009ba2:	462a      	mov	r2, r5
 8009ba4:	f003 f878 	bl	800cc98 <__lshift>
 8009ba8:	901a      	str	r0, [sp, #104]	@ 0x68
 8009baa:	2800      	cmp	r0, #0
 8009bac:	d1d9      	bne.n	8009b62 <_strtod_l+0x73a>
 8009bae:	e65a      	b.n	8009866 <_strtod_l+0x43e>
 8009bb0:	2e00      	cmp	r6, #0
 8009bb2:	dd07      	ble.n	8009bc4 <_strtod_l+0x79c>
 8009bb4:	4649      	mov	r1, r9
 8009bb6:	9805      	ldr	r0, [sp, #20]
 8009bb8:	4632      	mov	r2, r6
 8009bba:	f003 f86d 	bl	800cc98 <__lshift>
 8009bbe:	4681      	mov	r9, r0
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d0d8      	beq.n	8009b76 <_strtod_l+0x74e>
 8009bc4:	2f00      	cmp	r7, #0
 8009bc6:	dd08      	ble.n	8009bda <_strtod_l+0x7b2>
 8009bc8:	4641      	mov	r1, r8
 8009bca:	9805      	ldr	r0, [sp, #20]
 8009bcc:	463a      	mov	r2, r7
 8009bce:	f003 f863 	bl	800cc98 <__lshift>
 8009bd2:	4680      	mov	r8, r0
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	f43f ae46 	beq.w	8009866 <_strtod_l+0x43e>
 8009bda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009bdc:	9805      	ldr	r0, [sp, #20]
 8009bde:	464a      	mov	r2, r9
 8009be0:	f003 f8e2 	bl	800cda8 <__mdiff>
 8009be4:	4604      	mov	r4, r0
 8009be6:	2800      	cmp	r0, #0
 8009be8:	f43f ae3d 	beq.w	8009866 <_strtod_l+0x43e>
 8009bec:	68c3      	ldr	r3, [r0, #12]
 8009bee:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	60c3      	str	r3, [r0, #12]
 8009bf4:	4641      	mov	r1, r8
 8009bf6:	f003 f8bb 	bl	800cd70 <__mcmp>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	da46      	bge.n	8009c8c <_strtod_l+0x864>
 8009bfe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c00:	ea53 030a 	orrs.w	r3, r3, sl
 8009c04:	d16c      	bne.n	8009ce0 <_strtod_l+0x8b8>
 8009c06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d168      	bne.n	8009ce0 <_strtod_l+0x8b8>
 8009c0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009c12:	0d1b      	lsrs	r3, r3, #20
 8009c14:	051b      	lsls	r3, r3, #20
 8009c16:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009c1a:	d961      	bls.n	8009ce0 <_strtod_l+0x8b8>
 8009c1c:	6963      	ldr	r3, [r4, #20]
 8009c1e:	b913      	cbnz	r3, 8009c26 <_strtod_l+0x7fe>
 8009c20:	6923      	ldr	r3, [r4, #16]
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	dd5c      	ble.n	8009ce0 <_strtod_l+0x8b8>
 8009c26:	4621      	mov	r1, r4
 8009c28:	2201      	movs	r2, #1
 8009c2a:	9805      	ldr	r0, [sp, #20]
 8009c2c:	f003 f834 	bl	800cc98 <__lshift>
 8009c30:	4641      	mov	r1, r8
 8009c32:	4604      	mov	r4, r0
 8009c34:	f003 f89c 	bl	800cd70 <__mcmp>
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	dd51      	ble.n	8009ce0 <_strtod_l+0x8b8>
 8009c3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009c40:	9a08      	ldr	r2, [sp, #32]
 8009c42:	0d1b      	lsrs	r3, r3, #20
 8009c44:	051b      	lsls	r3, r3, #20
 8009c46:	2a00      	cmp	r2, #0
 8009c48:	d06b      	beq.n	8009d22 <_strtod_l+0x8fa>
 8009c4a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009c4e:	d868      	bhi.n	8009d22 <_strtod_l+0x8fa>
 8009c50:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009c54:	f67f ae9d 	bls.w	8009992 <_strtod_l+0x56a>
 8009c58:	4b0a      	ldr	r3, [pc, #40]	@ (8009c84 <_strtod_l+0x85c>)
 8009c5a:	4650      	mov	r0, sl
 8009c5c:	4659      	mov	r1, fp
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f7f6 fd02 	bl	8000668 <__aeabi_dmul>
 8009c64:	4b08      	ldr	r3, [pc, #32]	@ (8009c88 <_strtod_l+0x860>)
 8009c66:	400b      	ands	r3, r1
 8009c68:	4682      	mov	sl, r0
 8009c6a:	468b      	mov	fp, r1
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	f47f ae05 	bne.w	800987c <_strtod_l+0x454>
 8009c72:	9a05      	ldr	r2, [sp, #20]
 8009c74:	2322      	movs	r3, #34	@ 0x22
 8009c76:	6013      	str	r3, [r2, #0]
 8009c78:	e600      	b.n	800987c <_strtod_l+0x454>
 8009c7a:	bf00      	nop
 8009c7c:	0800dcc8 	.word	0x0800dcc8
 8009c80:	fffffc02 	.word	0xfffffc02
 8009c84:	39500000 	.word	0x39500000
 8009c88:	7ff00000 	.word	0x7ff00000
 8009c8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009c90:	d165      	bne.n	8009d5e <_strtod_l+0x936>
 8009c92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009c94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c98:	b35a      	cbz	r2, 8009cf2 <_strtod_l+0x8ca>
 8009c9a:	4a9f      	ldr	r2, [pc, #636]	@ (8009f18 <_strtod_l+0xaf0>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d12b      	bne.n	8009cf8 <_strtod_l+0x8d0>
 8009ca0:	9b08      	ldr	r3, [sp, #32]
 8009ca2:	4651      	mov	r1, sl
 8009ca4:	b303      	cbz	r3, 8009ce8 <_strtod_l+0x8c0>
 8009ca6:	4b9d      	ldr	r3, [pc, #628]	@ (8009f1c <_strtod_l+0xaf4>)
 8009ca8:	465a      	mov	r2, fp
 8009caa:	4013      	ands	r3, r2
 8009cac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009cb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009cb4:	d81b      	bhi.n	8009cee <_strtod_l+0x8c6>
 8009cb6:	0d1b      	lsrs	r3, r3, #20
 8009cb8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8009cc0:	4299      	cmp	r1, r3
 8009cc2:	d119      	bne.n	8009cf8 <_strtod_l+0x8d0>
 8009cc4:	4b96      	ldr	r3, [pc, #600]	@ (8009f20 <_strtod_l+0xaf8>)
 8009cc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d102      	bne.n	8009cd2 <_strtod_l+0x8aa>
 8009ccc:	3101      	adds	r1, #1
 8009cce:	f43f adca 	beq.w	8009866 <_strtod_l+0x43e>
 8009cd2:	4b92      	ldr	r3, [pc, #584]	@ (8009f1c <_strtod_l+0xaf4>)
 8009cd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cd6:	401a      	ands	r2, r3
 8009cd8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009cdc:	f04f 0a00 	mov.w	sl, #0
 8009ce0:	9b08      	ldr	r3, [sp, #32]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1b8      	bne.n	8009c58 <_strtod_l+0x830>
 8009ce6:	e5c9      	b.n	800987c <_strtod_l+0x454>
 8009ce8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009cec:	e7e8      	b.n	8009cc0 <_strtod_l+0x898>
 8009cee:	4613      	mov	r3, r2
 8009cf0:	e7e6      	b.n	8009cc0 <_strtod_l+0x898>
 8009cf2:	ea53 030a 	orrs.w	r3, r3, sl
 8009cf6:	d0a1      	beq.n	8009c3c <_strtod_l+0x814>
 8009cf8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009cfa:	b1db      	cbz	r3, 8009d34 <_strtod_l+0x90c>
 8009cfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cfe:	4213      	tst	r3, r2
 8009d00:	d0ee      	beq.n	8009ce0 <_strtod_l+0x8b8>
 8009d02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d04:	9a08      	ldr	r2, [sp, #32]
 8009d06:	4650      	mov	r0, sl
 8009d08:	4659      	mov	r1, fp
 8009d0a:	b1bb      	cbz	r3, 8009d3c <_strtod_l+0x914>
 8009d0c:	f7ff fb6b 	bl	80093e6 <sulp>
 8009d10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d14:	ec53 2b10 	vmov	r2, r3, d0
 8009d18:	f7f6 faf0 	bl	80002fc <__adddf3>
 8009d1c:	4682      	mov	sl, r0
 8009d1e:	468b      	mov	fp, r1
 8009d20:	e7de      	b.n	8009ce0 <_strtod_l+0x8b8>
 8009d22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009d26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009d2a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009d2e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009d32:	e7d5      	b.n	8009ce0 <_strtod_l+0x8b8>
 8009d34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009d36:	ea13 0f0a 	tst.w	r3, sl
 8009d3a:	e7e1      	b.n	8009d00 <_strtod_l+0x8d8>
 8009d3c:	f7ff fb53 	bl	80093e6 <sulp>
 8009d40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d44:	ec53 2b10 	vmov	r2, r3, d0
 8009d48:	f7f6 fad6 	bl	80002f8 <__aeabi_dsub>
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	2300      	movs	r3, #0
 8009d50:	4682      	mov	sl, r0
 8009d52:	468b      	mov	fp, r1
 8009d54:	f7f6 fef0 	bl	8000b38 <__aeabi_dcmpeq>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	d0c1      	beq.n	8009ce0 <_strtod_l+0x8b8>
 8009d5c:	e619      	b.n	8009992 <_strtod_l+0x56a>
 8009d5e:	4641      	mov	r1, r8
 8009d60:	4620      	mov	r0, r4
 8009d62:	f003 f97d 	bl	800d060 <__ratio>
 8009d66:	ec57 6b10 	vmov	r6, r7, d0
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009d70:	4630      	mov	r0, r6
 8009d72:	4639      	mov	r1, r7
 8009d74:	f7f6 fef4 	bl	8000b60 <__aeabi_dcmple>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	d06f      	beq.n	8009e5c <_strtod_l+0xa34>
 8009d7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d17a      	bne.n	8009e78 <_strtod_l+0xa50>
 8009d82:	f1ba 0f00 	cmp.w	sl, #0
 8009d86:	d158      	bne.n	8009e3a <_strtod_l+0xa12>
 8009d88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d15a      	bne.n	8009e48 <_strtod_l+0xa20>
 8009d92:	4b64      	ldr	r3, [pc, #400]	@ (8009f24 <_strtod_l+0xafc>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	4630      	mov	r0, r6
 8009d98:	4639      	mov	r1, r7
 8009d9a:	f7f6 fed7 	bl	8000b4c <__aeabi_dcmplt>
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	d159      	bne.n	8009e56 <_strtod_l+0xa2e>
 8009da2:	4630      	mov	r0, r6
 8009da4:	4639      	mov	r1, r7
 8009da6:	4b60      	ldr	r3, [pc, #384]	@ (8009f28 <_strtod_l+0xb00>)
 8009da8:	2200      	movs	r2, #0
 8009daa:	f7f6 fc5d 	bl	8000668 <__aeabi_dmul>
 8009dae:	4606      	mov	r6, r0
 8009db0:	460f      	mov	r7, r1
 8009db2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009db6:	9606      	str	r6, [sp, #24]
 8009db8:	9307      	str	r3, [sp, #28]
 8009dba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009dbe:	4d57      	ldr	r5, [pc, #348]	@ (8009f1c <_strtod_l+0xaf4>)
 8009dc0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009dc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dc6:	401d      	ands	r5, r3
 8009dc8:	4b58      	ldr	r3, [pc, #352]	@ (8009f2c <_strtod_l+0xb04>)
 8009dca:	429d      	cmp	r5, r3
 8009dcc:	f040 80b2 	bne.w	8009f34 <_strtod_l+0xb0c>
 8009dd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dd2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009dd6:	ec4b ab10 	vmov	d0, sl, fp
 8009dda:	f003 f879 	bl	800ced0 <__ulp>
 8009dde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009de2:	ec51 0b10 	vmov	r0, r1, d0
 8009de6:	f7f6 fc3f 	bl	8000668 <__aeabi_dmul>
 8009dea:	4652      	mov	r2, sl
 8009dec:	465b      	mov	r3, fp
 8009dee:	f7f6 fa85 	bl	80002fc <__adddf3>
 8009df2:	460b      	mov	r3, r1
 8009df4:	4949      	ldr	r1, [pc, #292]	@ (8009f1c <_strtod_l+0xaf4>)
 8009df6:	4a4e      	ldr	r2, [pc, #312]	@ (8009f30 <_strtod_l+0xb08>)
 8009df8:	4019      	ands	r1, r3
 8009dfa:	4291      	cmp	r1, r2
 8009dfc:	4682      	mov	sl, r0
 8009dfe:	d942      	bls.n	8009e86 <_strtod_l+0xa5e>
 8009e00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e02:	4b47      	ldr	r3, [pc, #284]	@ (8009f20 <_strtod_l+0xaf8>)
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d103      	bne.n	8009e10 <_strtod_l+0x9e8>
 8009e08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e0a:	3301      	adds	r3, #1
 8009e0c:	f43f ad2b 	beq.w	8009866 <_strtod_l+0x43e>
 8009e10:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009f20 <_strtod_l+0xaf8>
 8009e14:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009e18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e1a:	9805      	ldr	r0, [sp, #20]
 8009e1c:	f002 fd24 	bl	800c868 <_Bfree>
 8009e20:	9805      	ldr	r0, [sp, #20]
 8009e22:	4649      	mov	r1, r9
 8009e24:	f002 fd20 	bl	800c868 <_Bfree>
 8009e28:	9805      	ldr	r0, [sp, #20]
 8009e2a:	4641      	mov	r1, r8
 8009e2c:	f002 fd1c 	bl	800c868 <_Bfree>
 8009e30:	9805      	ldr	r0, [sp, #20]
 8009e32:	4621      	mov	r1, r4
 8009e34:	f002 fd18 	bl	800c868 <_Bfree>
 8009e38:	e618      	b.n	8009a6c <_strtod_l+0x644>
 8009e3a:	f1ba 0f01 	cmp.w	sl, #1
 8009e3e:	d103      	bne.n	8009e48 <_strtod_l+0xa20>
 8009e40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	f43f ada5 	beq.w	8009992 <_strtod_l+0x56a>
 8009e48:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009ef8 <_strtod_l+0xad0>
 8009e4c:	4f35      	ldr	r7, [pc, #212]	@ (8009f24 <_strtod_l+0xafc>)
 8009e4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009e52:	2600      	movs	r6, #0
 8009e54:	e7b1      	b.n	8009dba <_strtod_l+0x992>
 8009e56:	4f34      	ldr	r7, [pc, #208]	@ (8009f28 <_strtod_l+0xb00>)
 8009e58:	2600      	movs	r6, #0
 8009e5a:	e7aa      	b.n	8009db2 <_strtod_l+0x98a>
 8009e5c:	4b32      	ldr	r3, [pc, #200]	@ (8009f28 <_strtod_l+0xb00>)
 8009e5e:	4630      	mov	r0, r6
 8009e60:	4639      	mov	r1, r7
 8009e62:	2200      	movs	r2, #0
 8009e64:	f7f6 fc00 	bl	8000668 <__aeabi_dmul>
 8009e68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e6a:	4606      	mov	r6, r0
 8009e6c:	460f      	mov	r7, r1
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d09f      	beq.n	8009db2 <_strtod_l+0x98a>
 8009e72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009e76:	e7a0      	b.n	8009dba <_strtod_l+0x992>
 8009e78:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009f00 <_strtod_l+0xad8>
 8009e7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009e80:	ec57 6b17 	vmov	r6, r7, d7
 8009e84:	e799      	b.n	8009dba <_strtod_l+0x992>
 8009e86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009e8a:	9b08      	ldr	r3, [sp, #32]
 8009e8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d1c1      	bne.n	8009e18 <_strtod_l+0x9f0>
 8009e94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e98:	0d1b      	lsrs	r3, r3, #20
 8009e9a:	051b      	lsls	r3, r3, #20
 8009e9c:	429d      	cmp	r5, r3
 8009e9e:	d1bb      	bne.n	8009e18 <_strtod_l+0x9f0>
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	4639      	mov	r1, r7
 8009ea4:	f7f6 ff40 	bl	8000d28 <__aeabi_d2lz>
 8009ea8:	f7f6 fbb0 	bl	800060c <__aeabi_l2d>
 8009eac:	4602      	mov	r2, r0
 8009eae:	460b      	mov	r3, r1
 8009eb0:	4630      	mov	r0, r6
 8009eb2:	4639      	mov	r1, r7
 8009eb4:	f7f6 fa20 	bl	80002f8 <__aeabi_dsub>
 8009eb8:	460b      	mov	r3, r1
 8009eba:	4602      	mov	r2, r0
 8009ebc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009ec0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009ec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ec6:	ea46 060a 	orr.w	r6, r6, sl
 8009eca:	431e      	orrs	r6, r3
 8009ecc:	d06f      	beq.n	8009fae <_strtod_l+0xb86>
 8009ece:	a30e      	add	r3, pc, #56	@ (adr r3, 8009f08 <_strtod_l+0xae0>)
 8009ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed4:	f7f6 fe3a 	bl	8000b4c <__aeabi_dcmplt>
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	f47f accf 	bne.w	800987c <_strtod_l+0x454>
 8009ede:	a30c      	add	r3, pc, #48	@ (adr r3, 8009f10 <_strtod_l+0xae8>)
 8009ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ee8:	f7f6 fe4e 	bl	8000b88 <__aeabi_dcmpgt>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	d093      	beq.n	8009e18 <_strtod_l+0x9f0>
 8009ef0:	e4c4      	b.n	800987c <_strtod_l+0x454>
 8009ef2:	bf00      	nop
 8009ef4:	f3af 8000 	nop.w
 8009ef8:	00000000 	.word	0x00000000
 8009efc:	bff00000 	.word	0xbff00000
 8009f00:	00000000 	.word	0x00000000
 8009f04:	3ff00000 	.word	0x3ff00000
 8009f08:	94a03595 	.word	0x94a03595
 8009f0c:	3fdfffff 	.word	0x3fdfffff
 8009f10:	35afe535 	.word	0x35afe535
 8009f14:	3fe00000 	.word	0x3fe00000
 8009f18:	000fffff 	.word	0x000fffff
 8009f1c:	7ff00000 	.word	0x7ff00000
 8009f20:	7fefffff 	.word	0x7fefffff
 8009f24:	3ff00000 	.word	0x3ff00000
 8009f28:	3fe00000 	.word	0x3fe00000
 8009f2c:	7fe00000 	.word	0x7fe00000
 8009f30:	7c9fffff 	.word	0x7c9fffff
 8009f34:	9b08      	ldr	r3, [sp, #32]
 8009f36:	b323      	cbz	r3, 8009f82 <_strtod_l+0xb5a>
 8009f38:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009f3c:	d821      	bhi.n	8009f82 <_strtod_l+0xb5a>
 8009f3e:	a328      	add	r3, pc, #160	@ (adr r3, 8009fe0 <_strtod_l+0xbb8>)
 8009f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f44:	4630      	mov	r0, r6
 8009f46:	4639      	mov	r1, r7
 8009f48:	f7f6 fe0a 	bl	8000b60 <__aeabi_dcmple>
 8009f4c:	b1a0      	cbz	r0, 8009f78 <_strtod_l+0xb50>
 8009f4e:	4639      	mov	r1, r7
 8009f50:	4630      	mov	r0, r6
 8009f52:	f7f6 fe61 	bl	8000c18 <__aeabi_d2uiz>
 8009f56:	2801      	cmp	r0, #1
 8009f58:	bf38      	it	cc
 8009f5a:	2001      	movcc	r0, #1
 8009f5c:	f7f6 fb0a 	bl	8000574 <__aeabi_ui2d>
 8009f60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f62:	4606      	mov	r6, r0
 8009f64:	460f      	mov	r7, r1
 8009f66:	b9fb      	cbnz	r3, 8009fa8 <_strtod_l+0xb80>
 8009f68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f6c:	9014      	str	r0, [sp, #80]	@ 0x50
 8009f6e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009f70:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009f74:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009f78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009f7a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009f7e:	1b5b      	subs	r3, r3, r5
 8009f80:	9311      	str	r3, [sp, #68]	@ 0x44
 8009f82:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009f86:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009f8a:	f002 ffa1 	bl	800ced0 <__ulp>
 8009f8e:	4650      	mov	r0, sl
 8009f90:	ec53 2b10 	vmov	r2, r3, d0
 8009f94:	4659      	mov	r1, fp
 8009f96:	f7f6 fb67 	bl	8000668 <__aeabi_dmul>
 8009f9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009f9e:	f7f6 f9ad 	bl	80002fc <__adddf3>
 8009fa2:	4682      	mov	sl, r0
 8009fa4:	468b      	mov	fp, r1
 8009fa6:	e770      	b.n	8009e8a <_strtod_l+0xa62>
 8009fa8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009fac:	e7e0      	b.n	8009f70 <_strtod_l+0xb48>
 8009fae:	a30e      	add	r3, pc, #56	@ (adr r3, 8009fe8 <_strtod_l+0xbc0>)
 8009fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb4:	f7f6 fdca 	bl	8000b4c <__aeabi_dcmplt>
 8009fb8:	e798      	b.n	8009eec <_strtod_l+0xac4>
 8009fba:	2300      	movs	r3, #0
 8009fbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fbe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009fc0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fc2:	6013      	str	r3, [r2, #0]
 8009fc4:	f7ff ba6d 	b.w	80094a2 <_strtod_l+0x7a>
 8009fc8:	2a65      	cmp	r2, #101	@ 0x65
 8009fca:	f43f ab66 	beq.w	800969a <_strtod_l+0x272>
 8009fce:	2a45      	cmp	r2, #69	@ 0x45
 8009fd0:	f43f ab63 	beq.w	800969a <_strtod_l+0x272>
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	f7ff bb9e 	b.w	8009716 <_strtod_l+0x2ee>
 8009fda:	bf00      	nop
 8009fdc:	f3af 8000 	nop.w
 8009fe0:	ffc00000 	.word	0xffc00000
 8009fe4:	41dfffff 	.word	0x41dfffff
 8009fe8:	94a03595 	.word	0x94a03595
 8009fec:	3fcfffff 	.word	0x3fcfffff

08009ff0 <_strtod_r>:
 8009ff0:	4b01      	ldr	r3, [pc, #4]	@ (8009ff8 <_strtod_r+0x8>)
 8009ff2:	f7ff ba19 	b.w	8009428 <_strtod_l>
 8009ff6:	bf00      	nop
 8009ff8:	200001bc 	.word	0x200001bc

08009ffc <strtod>:
 8009ffc:	460a      	mov	r2, r1
 8009ffe:	4601      	mov	r1, r0
 800a000:	4802      	ldr	r0, [pc, #8]	@ (800a00c <strtod+0x10>)
 800a002:	4b03      	ldr	r3, [pc, #12]	@ (800a010 <strtod+0x14>)
 800a004:	6800      	ldr	r0, [r0, #0]
 800a006:	f7ff ba0f 	b.w	8009428 <_strtod_l>
 800a00a:	bf00      	nop
 800a00c:	20000328 	.word	0x20000328
 800a010:	200001bc 	.word	0x200001bc

0800a014 <_strtol_l.constprop.0>:
 800a014:	2b24      	cmp	r3, #36	@ 0x24
 800a016:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a01a:	4686      	mov	lr, r0
 800a01c:	4690      	mov	r8, r2
 800a01e:	d801      	bhi.n	800a024 <_strtol_l.constprop.0+0x10>
 800a020:	2b01      	cmp	r3, #1
 800a022:	d106      	bne.n	800a032 <_strtol_l.constprop.0+0x1e>
 800a024:	f001 f8e0 	bl	800b1e8 <__errno>
 800a028:	2316      	movs	r3, #22
 800a02a:	6003      	str	r3, [r0, #0]
 800a02c:	2000      	movs	r0, #0
 800a02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a032:	4834      	ldr	r0, [pc, #208]	@ (800a104 <_strtol_l.constprop.0+0xf0>)
 800a034:	460d      	mov	r5, r1
 800a036:	462a      	mov	r2, r5
 800a038:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a03c:	5d06      	ldrb	r6, [r0, r4]
 800a03e:	f016 0608 	ands.w	r6, r6, #8
 800a042:	d1f8      	bne.n	800a036 <_strtol_l.constprop.0+0x22>
 800a044:	2c2d      	cmp	r4, #45	@ 0x2d
 800a046:	d12d      	bne.n	800a0a4 <_strtol_l.constprop.0+0x90>
 800a048:	782c      	ldrb	r4, [r5, #0]
 800a04a:	2601      	movs	r6, #1
 800a04c:	1c95      	adds	r5, r2, #2
 800a04e:	f033 0210 	bics.w	r2, r3, #16
 800a052:	d109      	bne.n	800a068 <_strtol_l.constprop.0+0x54>
 800a054:	2c30      	cmp	r4, #48	@ 0x30
 800a056:	d12a      	bne.n	800a0ae <_strtol_l.constprop.0+0x9a>
 800a058:	782a      	ldrb	r2, [r5, #0]
 800a05a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a05e:	2a58      	cmp	r2, #88	@ 0x58
 800a060:	d125      	bne.n	800a0ae <_strtol_l.constprop.0+0x9a>
 800a062:	786c      	ldrb	r4, [r5, #1]
 800a064:	2310      	movs	r3, #16
 800a066:	3502      	adds	r5, #2
 800a068:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a06c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800a070:	2200      	movs	r2, #0
 800a072:	fbbc f9f3 	udiv	r9, ip, r3
 800a076:	4610      	mov	r0, r2
 800a078:	fb03 ca19 	mls	sl, r3, r9, ip
 800a07c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a080:	2f09      	cmp	r7, #9
 800a082:	d81b      	bhi.n	800a0bc <_strtol_l.constprop.0+0xa8>
 800a084:	463c      	mov	r4, r7
 800a086:	42a3      	cmp	r3, r4
 800a088:	dd27      	ble.n	800a0da <_strtol_l.constprop.0+0xc6>
 800a08a:	1c57      	adds	r7, r2, #1
 800a08c:	d007      	beq.n	800a09e <_strtol_l.constprop.0+0x8a>
 800a08e:	4581      	cmp	r9, r0
 800a090:	d320      	bcc.n	800a0d4 <_strtol_l.constprop.0+0xc0>
 800a092:	d101      	bne.n	800a098 <_strtol_l.constprop.0+0x84>
 800a094:	45a2      	cmp	sl, r4
 800a096:	db1d      	blt.n	800a0d4 <_strtol_l.constprop.0+0xc0>
 800a098:	fb00 4003 	mla	r0, r0, r3, r4
 800a09c:	2201      	movs	r2, #1
 800a09e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0a2:	e7eb      	b.n	800a07c <_strtol_l.constprop.0+0x68>
 800a0a4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a0a6:	bf04      	itt	eq
 800a0a8:	782c      	ldrbeq	r4, [r5, #0]
 800a0aa:	1c95      	addeq	r5, r2, #2
 800a0ac:	e7cf      	b.n	800a04e <_strtol_l.constprop.0+0x3a>
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1da      	bne.n	800a068 <_strtol_l.constprop.0+0x54>
 800a0b2:	2c30      	cmp	r4, #48	@ 0x30
 800a0b4:	bf0c      	ite	eq
 800a0b6:	2308      	moveq	r3, #8
 800a0b8:	230a      	movne	r3, #10
 800a0ba:	e7d5      	b.n	800a068 <_strtol_l.constprop.0+0x54>
 800a0bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a0c0:	2f19      	cmp	r7, #25
 800a0c2:	d801      	bhi.n	800a0c8 <_strtol_l.constprop.0+0xb4>
 800a0c4:	3c37      	subs	r4, #55	@ 0x37
 800a0c6:	e7de      	b.n	800a086 <_strtol_l.constprop.0+0x72>
 800a0c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a0cc:	2f19      	cmp	r7, #25
 800a0ce:	d804      	bhi.n	800a0da <_strtol_l.constprop.0+0xc6>
 800a0d0:	3c57      	subs	r4, #87	@ 0x57
 800a0d2:	e7d8      	b.n	800a086 <_strtol_l.constprop.0+0x72>
 800a0d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a0d8:	e7e1      	b.n	800a09e <_strtol_l.constprop.0+0x8a>
 800a0da:	1c53      	adds	r3, r2, #1
 800a0dc:	d108      	bne.n	800a0f0 <_strtol_l.constprop.0+0xdc>
 800a0de:	2322      	movs	r3, #34	@ 0x22
 800a0e0:	f8ce 3000 	str.w	r3, [lr]
 800a0e4:	4660      	mov	r0, ip
 800a0e6:	f1b8 0f00 	cmp.w	r8, #0
 800a0ea:	d0a0      	beq.n	800a02e <_strtol_l.constprop.0+0x1a>
 800a0ec:	1e69      	subs	r1, r5, #1
 800a0ee:	e006      	b.n	800a0fe <_strtol_l.constprop.0+0xea>
 800a0f0:	b106      	cbz	r6, 800a0f4 <_strtol_l.constprop.0+0xe0>
 800a0f2:	4240      	negs	r0, r0
 800a0f4:	f1b8 0f00 	cmp.w	r8, #0
 800a0f8:	d099      	beq.n	800a02e <_strtol_l.constprop.0+0x1a>
 800a0fa:	2a00      	cmp	r2, #0
 800a0fc:	d1f6      	bne.n	800a0ec <_strtol_l.constprop.0+0xd8>
 800a0fe:	f8c8 1000 	str.w	r1, [r8]
 800a102:	e794      	b.n	800a02e <_strtol_l.constprop.0+0x1a>
 800a104:	0800dcf1 	.word	0x0800dcf1

0800a108 <_strtol_r>:
 800a108:	f7ff bf84 	b.w	800a014 <_strtol_l.constprop.0>

0800a10c <strtol>:
 800a10c:	4613      	mov	r3, r2
 800a10e:	460a      	mov	r2, r1
 800a110:	4601      	mov	r1, r0
 800a112:	4802      	ldr	r0, [pc, #8]	@ (800a11c <strtol+0x10>)
 800a114:	6800      	ldr	r0, [r0, #0]
 800a116:	f7ff bf7d 	b.w	800a014 <_strtol_l.constprop.0>
 800a11a:	bf00      	nop
 800a11c:	20000328 	.word	0x20000328

0800a120 <__cvt>:
 800a120:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a124:	ec57 6b10 	vmov	r6, r7, d0
 800a128:	2f00      	cmp	r7, #0
 800a12a:	460c      	mov	r4, r1
 800a12c:	4619      	mov	r1, r3
 800a12e:	463b      	mov	r3, r7
 800a130:	bfbb      	ittet	lt
 800a132:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a136:	461f      	movlt	r7, r3
 800a138:	2300      	movge	r3, #0
 800a13a:	232d      	movlt	r3, #45	@ 0x2d
 800a13c:	700b      	strb	r3, [r1, #0]
 800a13e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a140:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a144:	4691      	mov	r9, r2
 800a146:	f023 0820 	bic.w	r8, r3, #32
 800a14a:	bfbc      	itt	lt
 800a14c:	4632      	movlt	r2, r6
 800a14e:	4616      	movlt	r6, r2
 800a150:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a154:	d005      	beq.n	800a162 <__cvt+0x42>
 800a156:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a15a:	d100      	bne.n	800a15e <__cvt+0x3e>
 800a15c:	3401      	adds	r4, #1
 800a15e:	2102      	movs	r1, #2
 800a160:	e000      	b.n	800a164 <__cvt+0x44>
 800a162:	2103      	movs	r1, #3
 800a164:	ab03      	add	r3, sp, #12
 800a166:	9301      	str	r3, [sp, #4]
 800a168:	ab02      	add	r3, sp, #8
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	ec47 6b10 	vmov	d0, r6, r7
 800a170:	4653      	mov	r3, sl
 800a172:	4622      	mov	r2, r4
 800a174:	f001 f928 	bl	800b3c8 <_dtoa_r>
 800a178:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a17c:	4605      	mov	r5, r0
 800a17e:	d119      	bne.n	800a1b4 <__cvt+0x94>
 800a180:	f019 0f01 	tst.w	r9, #1
 800a184:	d00e      	beq.n	800a1a4 <__cvt+0x84>
 800a186:	eb00 0904 	add.w	r9, r0, r4
 800a18a:	2200      	movs	r2, #0
 800a18c:	2300      	movs	r3, #0
 800a18e:	4630      	mov	r0, r6
 800a190:	4639      	mov	r1, r7
 800a192:	f7f6 fcd1 	bl	8000b38 <__aeabi_dcmpeq>
 800a196:	b108      	cbz	r0, 800a19c <__cvt+0x7c>
 800a198:	f8cd 900c 	str.w	r9, [sp, #12]
 800a19c:	2230      	movs	r2, #48	@ 0x30
 800a19e:	9b03      	ldr	r3, [sp, #12]
 800a1a0:	454b      	cmp	r3, r9
 800a1a2:	d31e      	bcc.n	800a1e2 <__cvt+0xc2>
 800a1a4:	9b03      	ldr	r3, [sp, #12]
 800a1a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a1a8:	1b5b      	subs	r3, r3, r5
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	6013      	str	r3, [r2, #0]
 800a1ae:	b004      	add	sp, #16
 800a1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a1b8:	eb00 0904 	add.w	r9, r0, r4
 800a1bc:	d1e5      	bne.n	800a18a <__cvt+0x6a>
 800a1be:	7803      	ldrb	r3, [r0, #0]
 800a1c0:	2b30      	cmp	r3, #48	@ 0x30
 800a1c2:	d10a      	bne.n	800a1da <__cvt+0xba>
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	4639      	mov	r1, r7
 800a1cc:	f7f6 fcb4 	bl	8000b38 <__aeabi_dcmpeq>
 800a1d0:	b918      	cbnz	r0, 800a1da <__cvt+0xba>
 800a1d2:	f1c4 0401 	rsb	r4, r4, #1
 800a1d6:	f8ca 4000 	str.w	r4, [sl]
 800a1da:	f8da 3000 	ldr.w	r3, [sl]
 800a1de:	4499      	add	r9, r3
 800a1e0:	e7d3      	b.n	800a18a <__cvt+0x6a>
 800a1e2:	1c59      	adds	r1, r3, #1
 800a1e4:	9103      	str	r1, [sp, #12]
 800a1e6:	701a      	strb	r2, [r3, #0]
 800a1e8:	e7d9      	b.n	800a19e <__cvt+0x7e>

0800a1ea <__exponent>:
 800a1ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1ec:	2900      	cmp	r1, #0
 800a1ee:	bfba      	itte	lt
 800a1f0:	4249      	neglt	r1, r1
 800a1f2:	232d      	movlt	r3, #45	@ 0x2d
 800a1f4:	232b      	movge	r3, #43	@ 0x2b
 800a1f6:	2909      	cmp	r1, #9
 800a1f8:	7002      	strb	r2, [r0, #0]
 800a1fa:	7043      	strb	r3, [r0, #1]
 800a1fc:	dd29      	ble.n	800a252 <__exponent+0x68>
 800a1fe:	f10d 0307 	add.w	r3, sp, #7
 800a202:	461d      	mov	r5, r3
 800a204:	270a      	movs	r7, #10
 800a206:	461a      	mov	r2, r3
 800a208:	fbb1 f6f7 	udiv	r6, r1, r7
 800a20c:	fb07 1416 	mls	r4, r7, r6, r1
 800a210:	3430      	adds	r4, #48	@ 0x30
 800a212:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a216:	460c      	mov	r4, r1
 800a218:	2c63      	cmp	r4, #99	@ 0x63
 800a21a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a21e:	4631      	mov	r1, r6
 800a220:	dcf1      	bgt.n	800a206 <__exponent+0x1c>
 800a222:	3130      	adds	r1, #48	@ 0x30
 800a224:	1e94      	subs	r4, r2, #2
 800a226:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a22a:	1c41      	adds	r1, r0, #1
 800a22c:	4623      	mov	r3, r4
 800a22e:	42ab      	cmp	r3, r5
 800a230:	d30a      	bcc.n	800a248 <__exponent+0x5e>
 800a232:	f10d 0309 	add.w	r3, sp, #9
 800a236:	1a9b      	subs	r3, r3, r2
 800a238:	42ac      	cmp	r4, r5
 800a23a:	bf88      	it	hi
 800a23c:	2300      	movhi	r3, #0
 800a23e:	3302      	adds	r3, #2
 800a240:	4403      	add	r3, r0
 800a242:	1a18      	subs	r0, r3, r0
 800a244:	b003      	add	sp, #12
 800a246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a248:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a24c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a250:	e7ed      	b.n	800a22e <__exponent+0x44>
 800a252:	2330      	movs	r3, #48	@ 0x30
 800a254:	3130      	adds	r1, #48	@ 0x30
 800a256:	7083      	strb	r3, [r0, #2]
 800a258:	70c1      	strb	r1, [r0, #3]
 800a25a:	1d03      	adds	r3, r0, #4
 800a25c:	e7f1      	b.n	800a242 <__exponent+0x58>
	...

0800a260 <_printf_float>:
 800a260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a264:	b08d      	sub	sp, #52	@ 0x34
 800a266:	460c      	mov	r4, r1
 800a268:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a26c:	4616      	mov	r6, r2
 800a26e:	461f      	mov	r7, r3
 800a270:	4605      	mov	r5, r0
 800a272:	f000 ff6f 	bl	800b154 <_localeconv_r>
 800a276:	6803      	ldr	r3, [r0, #0]
 800a278:	9304      	str	r3, [sp, #16]
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7f6 f830 	bl	80002e0 <strlen>
 800a280:	2300      	movs	r3, #0
 800a282:	930a      	str	r3, [sp, #40]	@ 0x28
 800a284:	f8d8 3000 	ldr.w	r3, [r8]
 800a288:	9005      	str	r0, [sp, #20]
 800a28a:	3307      	adds	r3, #7
 800a28c:	f023 0307 	bic.w	r3, r3, #7
 800a290:	f103 0208 	add.w	r2, r3, #8
 800a294:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a298:	f8d4 b000 	ldr.w	fp, [r4]
 800a29c:	f8c8 2000 	str.w	r2, [r8]
 800a2a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a2a8:	9307      	str	r3, [sp, #28]
 800a2aa:	f8cd 8018 	str.w	r8, [sp, #24]
 800a2ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a2b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2b6:	4b9c      	ldr	r3, [pc, #624]	@ (800a528 <_printf_float+0x2c8>)
 800a2b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a2bc:	f7f6 fc6e 	bl	8000b9c <__aeabi_dcmpun>
 800a2c0:	bb70      	cbnz	r0, 800a320 <_printf_float+0xc0>
 800a2c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2c6:	4b98      	ldr	r3, [pc, #608]	@ (800a528 <_printf_float+0x2c8>)
 800a2c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a2cc:	f7f6 fc48 	bl	8000b60 <__aeabi_dcmple>
 800a2d0:	bb30      	cbnz	r0, 800a320 <_printf_float+0xc0>
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	4640      	mov	r0, r8
 800a2d8:	4649      	mov	r1, r9
 800a2da:	f7f6 fc37 	bl	8000b4c <__aeabi_dcmplt>
 800a2de:	b110      	cbz	r0, 800a2e6 <_printf_float+0x86>
 800a2e0:	232d      	movs	r3, #45	@ 0x2d
 800a2e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2e6:	4a91      	ldr	r2, [pc, #580]	@ (800a52c <_printf_float+0x2cc>)
 800a2e8:	4b91      	ldr	r3, [pc, #580]	@ (800a530 <_printf_float+0x2d0>)
 800a2ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a2ee:	bf94      	ite	ls
 800a2f0:	4690      	movls	r8, r2
 800a2f2:	4698      	movhi	r8, r3
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	6123      	str	r3, [r4, #16]
 800a2f8:	f02b 0304 	bic.w	r3, fp, #4
 800a2fc:	6023      	str	r3, [r4, #0]
 800a2fe:	f04f 0900 	mov.w	r9, #0
 800a302:	9700      	str	r7, [sp, #0]
 800a304:	4633      	mov	r3, r6
 800a306:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a308:	4621      	mov	r1, r4
 800a30a:	4628      	mov	r0, r5
 800a30c:	f000 f9d2 	bl	800a6b4 <_printf_common>
 800a310:	3001      	adds	r0, #1
 800a312:	f040 808d 	bne.w	800a430 <_printf_float+0x1d0>
 800a316:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a31a:	b00d      	add	sp, #52	@ 0x34
 800a31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a320:	4642      	mov	r2, r8
 800a322:	464b      	mov	r3, r9
 800a324:	4640      	mov	r0, r8
 800a326:	4649      	mov	r1, r9
 800a328:	f7f6 fc38 	bl	8000b9c <__aeabi_dcmpun>
 800a32c:	b140      	cbz	r0, 800a340 <_printf_float+0xe0>
 800a32e:	464b      	mov	r3, r9
 800a330:	2b00      	cmp	r3, #0
 800a332:	bfbc      	itt	lt
 800a334:	232d      	movlt	r3, #45	@ 0x2d
 800a336:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a33a:	4a7e      	ldr	r2, [pc, #504]	@ (800a534 <_printf_float+0x2d4>)
 800a33c:	4b7e      	ldr	r3, [pc, #504]	@ (800a538 <_printf_float+0x2d8>)
 800a33e:	e7d4      	b.n	800a2ea <_printf_float+0x8a>
 800a340:	6863      	ldr	r3, [r4, #4]
 800a342:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a346:	9206      	str	r2, [sp, #24]
 800a348:	1c5a      	adds	r2, r3, #1
 800a34a:	d13b      	bne.n	800a3c4 <_printf_float+0x164>
 800a34c:	2306      	movs	r3, #6
 800a34e:	6063      	str	r3, [r4, #4]
 800a350:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a354:	2300      	movs	r3, #0
 800a356:	6022      	str	r2, [r4, #0]
 800a358:	9303      	str	r3, [sp, #12]
 800a35a:	ab0a      	add	r3, sp, #40	@ 0x28
 800a35c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a360:	ab09      	add	r3, sp, #36	@ 0x24
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	6861      	ldr	r1, [r4, #4]
 800a366:	ec49 8b10 	vmov	d0, r8, r9
 800a36a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a36e:	4628      	mov	r0, r5
 800a370:	f7ff fed6 	bl	800a120 <__cvt>
 800a374:	9b06      	ldr	r3, [sp, #24]
 800a376:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a378:	2b47      	cmp	r3, #71	@ 0x47
 800a37a:	4680      	mov	r8, r0
 800a37c:	d129      	bne.n	800a3d2 <_printf_float+0x172>
 800a37e:	1cc8      	adds	r0, r1, #3
 800a380:	db02      	blt.n	800a388 <_printf_float+0x128>
 800a382:	6863      	ldr	r3, [r4, #4]
 800a384:	4299      	cmp	r1, r3
 800a386:	dd41      	ble.n	800a40c <_printf_float+0x1ac>
 800a388:	f1aa 0a02 	sub.w	sl, sl, #2
 800a38c:	fa5f fa8a 	uxtb.w	sl, sl
 800a390:	3901      	subs	r1, #1
 800a392:	4652      	mov	r2, sl
 800a394:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a398:	9109      	str	r1, [sp, #36]	@ 0x24
 800a39a:	f7ff ff26 	bl	800a1ea <__exponent>
 800a39e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a3a0:	1813      	adds	r3, r2, r0
 800a3a2:	2a01      	cmp	r2, #1
 800a3a4:	4681      	mov	r9, r0
 800a3a6:	6123      	str	r3, [r4, #16]
 800a3a8:	dc02      	bgt.n	800a3b0 <_printf_float+0x150>
 800a3aa:	6822      	ldr	r2, [r4, #0]
 800a3ac:	07d2      	lsls	r2, r2, #31
 800a3ae:	d501      	bpl.n	800a3b4 <_printf_float+0x154>
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	6123      	str	r3, [r4, #16]
 800a3b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d0a2      	beq.n	800a302 <_printf_float+0xa2>
 800a3bc:	232d      	movs	r3, #45	@ 0x2d
 800a3be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3c2:	e79e      	b.n	800a302 <_printf_float+0xa2>
 800a3c4:	9a06      	ldr	r2, [sp, #24]
 800a3c6:	2a47      	cmp	r2, #71	@ 0x47
 800a3c8:	d1c2      	bne.n	800a350 <_printf_float+0xf0>
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d1c0      	bne.n	800a350 <_printf_float+0xf0>
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e7bd      	b.n	800a34e <_printf_float+0xee>
 800a3d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a3d6:	d9db      	bls.n	800a390 <_printf_float+0x130>
 800a3d8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a3dc:	d118      	bne.n	800a410 <_printf_float+0x1b0>
 800a3de:	2900      	cmp	r1, #0
 800a3e0:	6863      	ldr	r3, [r4, #4]
 800a3e2:	dd0b      	ble.n	800a3fc <_printf_float+0x19c>
 800a3e4:	6121      	str	r1, [r4, #16]
 800a3e6:	b913      	cbnz	r3, 800a3ee <_printf_float+0x18e>
 800a3e8:	6822      	ldr	r2, [r4, #0]
 800a3ea:	07d0      	lsls	r0, r2, #31
 800a3ec:	d502      	bpl.n	800a3f4 <_printf_float+0x194>
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	440b      	add	r3, r1
 800a3f2:	6123      	str	r3, [r4, #16]
 800a3f4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a3f6:	f04f 0900 	mov.w	r9, #0
 800a3fa:	e7db      	b.n	800a3b4 <_printf_float+0x154>
 800a3fc:	b913      	cbnz	r3, 800a404 <_printf_float+0x1a4>
 800a3fe:	6822      	ldr	r2, [r4, #0]
 800a400:	07d2      	lsls	r2, r2, #31
 800a402:	d501      	bpl.n	800a408 <_printf_float+0x1a8>
 800a404:	3302      	adds	r3, #2
 800a406:	e7f4      	b.n	800a3f2 <_printf_float+0x192>
 800a408:	2301      	movs	r3, #1
 800a40a:	e7f2      	b.n	800a3f2 <_printf_float+0x192>
 800a40c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a410:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a412:	4299      	cmp	r1, r3
 800a414:	db05      	blt.n	800a422 <_printf_float+0x1c2>
 800a416:	6823      	ldr	r3, [r4, #0]
 800a418:	6121      	str	r1, [r4, #16]
 800a41a:	07d8      	lsls	r0, r3, #31
 800a41c:	d5ea      	bpl.n	800a3f4 <_printf_float+0x194>
 800a41e:	1c4b      	adds	r3, r1, #1
 800a420:	e7e7      	b.n	800a3f2 <_printf_float+0x192>
 800a422:	2900      	cmp	r1, #0
 800a424:	bfd4      	ite	le
 800a426:	f1c1 0202 	rsble	r2, r1, #2
 800a42a:	2201      	movgt	r2, #1
 800a42c:	4413      	add	r3, r2
 800a42e:	e7e0      	b.n	800a3f2 <_printf_float+0x192>
 800a430:	6823      	ldr	r3, [r4, #0]
 800a432:	055a      	lsls	r2, r3, #21
 800a434:	d407      	bmi.n	800a446 <_printf_float+0x1e6>
 800a436:	6923      	ldr	r3, [r4, #16]
 800a438:	4642      	mov	r2, r8
 800a43a:	4631      	mov	r1, r6
 800a43c:	4628      	mov	r0, r5
 800a43e:	47b8      	blx	r7
 800a440:	3001      	adds	r0, #1
 800a442:	d12b      	bne.n	800a49c <_printf_float+0x23c>
 800a444:	e767      	b.n	800a316 <_printf_float+0xb6>
 800a446:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a44a:	f240 80dd 	bls.w	800a608 <_printf_float+0x3a8>
 800a44e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a452:	2200      	movs	r2, #0
 800a454:	2300      	movs	r3, #0
 800a456:	f7f6 fb6f 	bl	8000b38 <__aeabi_dcmpeq>
 800a45a:	2800      	cmp	r0, #0
 800a45c:	d033      	beq.n	800a4c6 <_printf_float+0x266>
 800a45e:	4a37      	ldr	r2, [pc, #220]	@ (800a53c <_printf_float+0x2dc>)
 800a460:	2301      	movs	r3, #1
 800a462:	4631      	mov	r1, r6
 800a464:	4628      	mov	r0, r5
 800a466:	47b8      	blx	r7
 800a468:	3001      	adds	r0, #1
 800a46a:	f43f af54 	beq.w	800a316 <_printf_float+0xb6>
 800a46e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a472:	4543      	cmp	r3, r8
 800a474:	db02      	blt.n	800a47c <_printf_float+0x21c>
 800a476:	6823      	ldr	r3, [r4, #0]
 800a478:	07d8      	lsls	r0, r3, #31
 800a47a:	d50f      	bpl.n	800a49c <_printf_float+0x23c>
 800a47c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a480:	4631      	mov	r1, r6
 800a482:	4628      	mov	r0, r5
 800a484:	47b8      	blx	r7
 800a486:	3001      	adds	r0, #1
 800a488:	f43f af45 	beq.w	800a316 <_printf_float+0xb6>
 800a48c:	f04f 0900 	mov.w	r9, #0
 800a490:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a494:	f104 0a1a 	add.w	sl, r4, #26
 800a498:	45c8      	cmp	r8, r9
 800a49a:	dc09      	bgt.n	800a4b0 <_printf_float+0x250>
 800a49c:	6823      	ldr	r3, [r4, #0]
 800a49e:	079b      	lsls	r3, r3, #30
 800a4a0:	f100 8103 	bmi.w	800a6aa <_printf_float+0x44a>
 800a4a4:	68e0      	ldr	r0, [r4, #12]
 800a4a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4a8:	4298      	cmp	r0, r3
 800a4aa:	bfb8      	it	lt
 800a4ac:	4618      	movlt	r0, r3
 800a4ae:	e734      	b.n	800a31a <_printf_float+0xba>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	4652      	mov	r2, sl
 800a4b4:	4631      	mov	r1, r6
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	47b8      	blx	r7
 800a4ba:	3001      	adds	r0, #1
 800a4bc:	f43f af2b 	beq.w	800a316 <_printf_float+0xb6>
 800a4c0:	f109 0901 	add.w	r9, r9, #1
 800a4c4:	e7e8      	b.n	800a498 <_printf_float+0x238>
 800a4c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	dc39      	bgt.n	800a540 <_printf_float+0x2e0>
 800a4cc:	4a1b      	ldr	r2, [pc, #108]	@ (800a53c <_printf_float+0x2dc>)
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	4631      	mov	r1, r6
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	47b8      	blx	r7
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	f43f af1d 	beq.w	800a316 <_printf_float+0xb6>
 800a4dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a4e0:	ea59 0303 	orrs.w	r3, r9, r3
 800a4e4:	d102      	bne.n	800a4ec <_printf_float+0x28c>
 800a4e6:	6823      	ldr	r3, [r4, #0]
 800a4e8:	07d9      	lsls	r1, r3, #31
 800a4ea:	d5d7      	bpl.n	800a49c <_printf_float+0x23c>
 800a4ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4f0:	4631      	mov	r1, r6
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	47b8      	blx	r7
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	f43f af0d 	beq.w	800a316 <_printf_float+0xb6>
 800a4fc:	f04f 0a00 	mov.w	sl, #0
 800a500:	f104 0b1a 	add.w	fp, r4, #26
 800a504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a506:	425b      	negs	r3, r3
 800a508:	4553      	cmp	r3, sl
 800a50a:	dc01      	bgt.n	800a510 <_printf_float+0x2b0>
 800a50c:	464b      	mov	r3, r9
 800a50e:	e793      	b.n	800a438 <_printf_float+0x1d8>
 800a510:	2301      	movs	r3, #1
 800a512:	465a      	mov	r2, fp
 800a514:	4631      	mov	r1, r6
 800a516:	4628      	mov	r0, r5
 800a518:	47b8      	blx	r7
 800a51a:	3001      	adds	r0, #1
 800a51c:	f43f aefb 	beq.w	800a316 <_printf_float+0xb6>
 800a520:	f10a 0a01 	add.w	sl, sl, #1
 800a524:	e7ee      	b.n	800a504 <_printf_float+0x2a4>
 800a526:	bf00      	nop
 800a528:	7fefffff 	.word	0x7fefffff
 800a52c:	0800ddf1 	.word	0x0800ddf1
 800a530:	0800ddf5 	.word	0x0800ddf5
 800a534:	0800ddf9 	.word	0x0800ddf9
 800a538:	0800ddfd 	.word	0x0800ddfd
 800a53c:	0800de01 	.word	0x0800de01
 800a540:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a542:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a546:	4553      	cmp	r3, sl
 800a548:	bfa8      	it	ge
 800a54a:	4653      	movge	r3, sl
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	4699      	mov	r9, r3
 800a550:	dc36      	bgt.n	800a5c0 <_printf_float+0x360>
 800a552:	f04f 0b00 	mov.w	fp, #0
 800a556:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a55a:	f104 021a 	add.w	r2, r4, #26
 800a55e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a560:	9306      	str	r3, [sp, #24]
 800a562:	eba3 0309 	sub.w	r3, r3, r9
 800a566:	455b      	cmp	r3, fp
 800a568:	dc31      	bgt.n	800a5ce <_printf_float+0x36e>
 800a56a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a56c:	459a      	cmp	sl, r3
 800a56e:	dc3a      	bgt.n	800a5e6 <_printf_float+0x386>
 800a570:	6823      	ldr	r3, [r4, #0]
 800a572:	07da      	lsls	r2, r3, #31
 800a574:	d437      	bmi.n	800a5e6 <_printf_float+0x386>
 800a576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a578:	ebaa 0903 	sub.w	r9, sl, r3
 800a57c:	9b06      	ldr	r3, [sp, #24]
 800a57e:	ebaa 0303 	sub.w	r3, sl, r3
 800a582:	4599      	cmp	r9, r3
 800a584:	bfa8      	it	ge
 800a586:	4699      	movge	r9, r3
 800a588:	f1b9 0f00 	cmp.w	r9, #0
 800a58c:	dc33      	bgt.n	800a5f6 <_printf_float+0x396>
 800a58e:	f04f 0800 	mov.w	r8, #0
 800a592:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a596:	f104 0b1a 	add.w	fp, r4, #26
 800a59a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a59c:	ebaa 0303 	sub.w	r3, sl, r3
 800a5a0:	eba3 0309 	sub.w	r3, r3, r9
 800a5a4:	4543      	cmp	r3, r8
 800a5a6:	f77f af79 	ble.w	800a49c <_printf_float+0x23c>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	465a      	mov	r2, fp
 800a5ae:	4631      	mov	r1, r6
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	47b8      	blx	r7
 800a5b4:	3001      	adds	r0, #1
 800a5b6:	f43f aeae 	beq.w	800a316 <_printf_float+0xb6>
 800a5ba:	f108 0801 	add.w	r8, r8, #1
 800a5be:	e7ec      	b.n	800a59a <_printf_float+0x33a>
 800a5c0:	4642      	mov	r2, r8
 800a5c2:	4631      	mov	r1, r6
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	47b8      	blx	r7
 800a5c8:	3001      	adds	r0, #1
 800a5ca:	d1c2      	bne.n	800a552 <_printf_float+0x2f2>
 800a5cc:	e6a3      	b.n	800a316 <_printf_float+0xb6>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	4631      	mov	r1, r6
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	9206      	str	r2, [sp, #24]
 800a5d6:	47b8      	blx	r7
 800a5d8:	3001      	adds	r0, #1
 800a5da:	f43f ae9c 	beq.w	800a316 <_printf_float+0xb6>
 800a5de:	9a06      	ldr	r2, [sp, #24]
 800a5e0:	f10b 0b01 	add.w	fp, fp, #1
 800a5e4:	e7bb      	b.n	800a55e <_printf_float+0x2fe>
 800a5e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5ea:	4631      	mov	r1, r6
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	47b8      	blx	r7
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	d1c0      	bne.n	800a576 <_printf_float+0x316>
 800a5f4:	e68f      	b.n	800a316 <_printf_float+0xb6>
 800a5f6:	9a06      	ldr	r2, [sp, #24]
 800a5f8:	464b      	mov	r3, r9
 800a5fa:	4442      	add	r2, r8
 800a5fc:	4631      	mov	r1, r6
 800a5fe:	4628      	mov	r0, r5
 800a600:	47b8      	blx	r7
 800a602:	3001      	adds	r0, #1
 800a604:	d1c3      	bne.n	800a58e <_printf_float+0x32e>
 800a606:	e686      	b.n	800a316 <_printf_float+0xb6>
 800a608:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a60c:	f1ba 0f01 	cmp.w	sl, #1
 800a610:	dc01      	bgt.n	800a616 <_printf_float+0x3b6>
 800a612:	07db      	lsls	r3, r3, #31
 800a614:	d536      	bpl.n	800a684 <_printf_float+0x424>
 800a616:	2301      	movs	r3, #1
 800a618:	4642      	mov	r2, r8
 800a61a:	4631      	mov	r1, r6
 800a61c:	4628      	mov	r0, r5
 800a61e:	47b8      	blx	r7
 800a620:	3001      	adds	r0, #1
 800a622:	f43f ae78 	beq.w	800a316 <_printf_float+0xb6>
 800a626:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a62a:	4631      	mov	r1, r6
 800a62c:	4628      	mov	r0, r5
 800a62e:	47b8      	blx	r7
 800a630:	3001      	adds	r0, #1
 800a632:	f43f ae70 	beq.w	800a316 <_printf_float+0xb6>
 800a636:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a63a:	2200      	movs	r2, #0
 800a63c:	2300      	movs	r3, #0
 800a63e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a642:	f7f6 fa79 	bl	8000b38 <__aeabi_dcmpeq>
 800a646:	b9c0      	cbnz	r0, 800a67a <_printf_float+0x41a>
 800a648:	4653      	mov	r3, sl
 800a64a:	f108 0201 	add.w	r2, r8, #1
 800a64e:	4631      	mov	r1, r6
 800a650:	4628      	mov	r0, r5
 800a652:	47b8      	blx	r7
 800a654:	3001      	adds	r0, #1
 800a656:	d10c      	bne.n	800a672 <_printf_float+0x412>
 800a658:	e65d      	b.n	800a316 <_printf_float+0xb6>
 800a65a:	2301      	movs	r3, #1
 800a65c:	465a      	mov	r2, fp
 800a65e:	4631      	mov	r1, r6
 800a660:	4628      	mov	r0, r5
 800a662:	47b8      	blx	r7
 800a664:	3001      	adds	r0, #1
 800a666:	f43f ae56 	beq.w	800a316 <_printf_float+0xb6>
 800a66a:	f108 0801 	add.w	r8, r8, #1
 800a66e:	45d0      	cmp	r8, sl
 800a670:	dbf3      	blt.n	800a65a <_printf_float+0x3fa>
 800a672:	464b      	mov	r3, r9
 800a674:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a678:	e6df      	b.n	800a43a <_printf_float+0x1da>
 800a67a:	f04f 0800 	mov.w	r8, #0
 800a67e:	f104 0b1a 	add.w	fp, r4, #26
 800a682:	e7f4      	b.n	800a66e <_printf_float+0x40e>
 800a684:	2301      	movs	r3, #1
 800a686:	4642      	mov	r2, r8
 800a688:	e7e1      	b.n	800a64e <_printf_float+0x3ee>
 800a68a:	2301      	movs	r3, #1
 800a68c:	464a      	mov	r2, r9
 800a68e:	4631      	mov	r1, r6
 800a690:	4628      	mov	r0, r5
 800a692:	47b8      	blx	r7
 800a694:	3001      	adds	r0, #1
 800a696:	f43f ae3e 	beq.w	800a316 <_printf_float+0xb6>
 800a69a:	f108 0801 	add.w	r8, r8, #1
 800a69e:	68e3      	ldr	r3, [r4, #12]
 800a6a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6a2:	1a5b      	subs	r3, r3, r1
 800a6a4:	4543      	cmp	r3, r8
 800a6a6:	dcf0      	bgt.n	800a68a <_printf_float+0x42a>
 800a6a8:	e6fc      	b.n	800a4a4 <_printf_float+0x244>
 800a6aa:	f04f 0800 	mov.w	r8, #0
 800a6ae:	f104 0919 	add.w	r9, r4, #25
 800a6b2:	e7f4      	b.n	800a69e <_printf_float+0x43e>

0800a6b4 <_printf_common>:
 800a6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b8:	4616      	mov	r6, r2
 800a6ba:	4698      	mov	r8, r3
 800a6bc:	688a      	ldr	r2, [r1, #8]
 800a6be:	690b      	ldr	r3, [r1, #16]
 800a6c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	bfb8      	it	lt
 800a6c8:	4613      	movlt	r3, r2
 800a6ca:	6033      	str	r3, [r6, #0]
 800a6cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a6d0:	4607      	mov	r7, r0
 800a6d2:	460c      	mov	r4, r1
 800a6d4:	b10a      	cbz	r2, 800a6da <_printf_common+0x26>
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	6033      	str	r3, [r6, #0]
 800a6da:	6823      	ldr	r3, [r4, #0]
 800a6dc:	0699      	lsls	r1, r3, #26
 800a6de:	bf42      	ittt	mi
 800a6e0:	6833      	ldrmi	r3, [r6, #0]
 800a6e2:	3302      	addmi	r3, #2
 800a6e4:	6033      	strmi	r3, [r6, #0]
 800a6e6:	6825      	ldr	r5, [r4, #0]
 800a6e8:	f015 0506 	ands.w	r5, r5, #6
 800a6ec:	d106      	bne.n	800a6fc <_printf_common+0x48>
 800a6ee:	f104 0a19 	add.w	sl, r4, #25
 800a6f2:	68e3      	ldr	r3, [r4, #12]
 800a6f4:	6832      	ldr	r2, [r6, #0]
 800a6f6:	1a9b      	subs	r3, r3, r2
 800a6f8:	42ab      	cmp	r3, r5
 800a6fa:	dc26      	bgt.n	800a74a <_printf_common+0x96>
 800a6fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a700:	6822      	ldr	r2, [r4, #0]
 800a702:	3b00      	subs	r3, #0
 800a704:	bf18      	it	ne
 800a706:	2301      	movne	r3, #1
 800a708:	0692      	lsls	r2, r2, #26
 800a70a:	d42b      	bmi.n	800a764 <_printf_common+0xb0>
 800a70c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a710:	4641      	mov	r1, r8
 800a712:	4638      	mov	r0, r7
 800a714:	47c8      	blx	r9
 800a716:	3001      	adds	r0, #1
 800a718:	d01e      	beq.n	800a758 <_printf_common+0xa4>
 800a71a:	6823      	ldr	r3, [r4, #0]
 800a71c:	6922      	ldr	r2, [r4, #16]
 800a71e:	f003 0306 	and.w	r3, r3, #6
 800a722:	2b04      	cmp	r3, #4
 800a724:	bf02      	ittt	eq
 800a726:	68e5      	ldreq	r5, [r4, #12]
 800a728:	6833      	ldreq	r3, [r6, #0]
 800a72a:	1aed      	subeq	r5, r5, r3
 800a72c:	68a3      	ldr	r3, [r4, #8]
 800a72e:	bf0c      	ite	eq
 800a730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a734:	2500      	movne	r5, #0
 800a736:	4293      	cmp	r3, r2
 800a738:	bfc4      	itt	gt
 800a73a:	1a9b      	subgt	r3, r3, r2
 800a73c:	18ed      	addgt	r5, r5, r3
 800a73e:	2600      	movs	r6, #0
 800a740:	341a      	adds	r4, #26
 800a742:	42b5      	cmp	r5, r6
 800a744:	d11a      	bne.n	800a77c <_printf_common+0xc8>
 800a746:	2000      	movs	r0, #0
 800a748:	e008      	b.n	800a75c <_printf_common+0xa8>
 800a74a:	2301      	movs	r3, #1
 800a74c:	4652      	mov	r2, sl
 800a74e:	4641      	mov	r1, r8
 800a750:	4638      	mov	r0, r7
 800a752:	47c8      	blx	r9
 800a754:	3001      	adds	r0, #1
 800a756:	d103      	bne.n	800a760 <_printf_common+0xac>
 800a758:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a760:	3501      	adds	r5, #1
 800a762:	e7c6      	b.n	800a6f2 <_printf_common+0x3e>
 800a764:	18e1      	adds	r1, r4, r3
 800a766:	1c5a      	adds	r2, r3, #1
 800a768:	2030      	movs	r0, #48	@ 0x30
 800a76a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a76e:	4422      	add	r2, r4
 800a770:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a774:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a778:	3302      	adds	r3, #2
 800a77a:	e7c7      	b.n	800a70c <_printf_common+0x58>
 800a77c:	2301      	movs	r3, #1
 800a77e:	4622      	mov	r2, r4
 800a780:	4641      	mov	r1, r8
 800a782:	4638      	mov	r0, r7
 800a784:	47c8      	blx	r9
 800a786:	3001      	adds	r0, #1
 800a788:	d0e6      	beq.n	800a758 <_printf_common+0xa4>
 800a78a:	3601      	adds	r6, #1
 800a78c:	e7d9      	b.n	800a742 <_printf_common+0x8e>
	...

0800a790 <_printf_i>:
 800a790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a794:	7e0f      	ldrb	r7, [r1, #24]
 800a796:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a798:	2f78      	cmp	r7, #120	@ 0x78
 800a79a:	4691      	mov	r9, r2
 800a79c:	4680      	mov	r8, r0
 800a79e:	460c      	mov	r4, r1
 800a7a0:	469a      	mov	sl, r3
 800a7a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a7a6:	d807      	bhi.n	800a7b8 <_printf_i+0x28>
 800a7a8:	2f62      	cmp	r7, #98	@ 0x62
 800a7aa:	d80a      	bhi.n	800a7c2 <_printf_i+0x32>
 800a7ac:	2f00      	cmp	r7, #0
 800a7ae:	f000 80d2 	beq.w	800a956 <_printf_i+0x1c6>
 800a7b2:	2f58      	cmp	r7, #88	@ 0x58
 800a7b4:	f000 80b9 	beq.w	800a92a <_printf_i+0x19a>
 800a7b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a7bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a7c0:	e03a      	b.n	800a838 <_printf_i+0xa8>
 800a7c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a7c6:	2b15      	cmp	r3, #21
 800a7c8:	d8f6      	bhi.n	800a7b8 <_printf_i+0x28>
 800a7ca:	a101      	add	r1, pc, #4	@ (adr r1, 800a7d0 <_printf_i+0x40>)
 800a7cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7d0:	0800a829 	.word	0x0800a829
 800a7d4:	0800a83d 	.word	0x0800a83d
 800a7d8:	0800a7b9 	.word	0x0800a7b9
 800a7dc:	0800a7b9 	.word	0x0800a7b9
 800a7e0:	0800a7b9 	.word	0x0800a7b9
 800a7e4:	0800a7b9 	.word	0x0800a7b9
 800a7e8:	0800a83d 	.word	0x0800a83d
 800a7ec:	0800a7b9 	.word	0x0800a7b9
 800a7f0:	0800a7b9 	.word	0x0800a7b9
 800a7f4:	0800a7b9 	.word	0x0800a7b9
 800a7f8:	0800a7b9 	.word	0x0800a7b9
 800a7fc:	0800a93d 	.word	0x0800a93d
 800a800:	0800a867 	.word	0x0800a867
 800a804:	0800a8f7 	.word	0x0800a8f7
 800a808:	0800a7b9 	.word	0x0800a7b9
 800a80c:	0800a7b9 	.word	0x0800a7b9
 800a810:	0800a95f 	.word	0x0800a95f
 800a814:	0800a7b9 	.word	0x0800a7b9
 800a818:	0800a867 	.word	0x0800a867
 800a81c:	0800a7b9 	.word	0x0800a7b9
 800a820:	0800a7b9 	.word	0x0800a7b9
 800a824:	0800a8ff 	.word	0x0800a8ff
 800a828:	6833      	ldr	r3, [r6, #0]
 800a82a:	1d1a      	adds	r2, r3, #4
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	6032      	str	r2, [r6, #0]
 800a830:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a834:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a838:	2301      	movs	r3, #1
 800a83a:	e09d      	b.n	800a978 <_printf_i+0x1e8>
 800a83c:	6833      	ldr	r3, [r6, #0]
 800a83e:	6820      	ldr	r0, [r4, #0]
 800a840:	1d19      	adds	r1, r3, #4
 800a842:	6031      	str	r1, [r6, #0]
 800a844:	0606      	lsls	r6, r0, #24
 800a846:	d501      	bpl.n	800a84c <_printf_i+0xbc>
 800a848:	681d      	ldr	r5, [r3, #0]
 800a84a:	e003      	b.n	800a854 <_printf_i+0xc4>
 800a84c:	0645      	lsls	r5, r0, #25
 800a84e:	d5fb      	bpl.n	800a848 <_printf_i+0xb8>
 800a850:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a854:	2d00      	cmp	r5, #0
 800a856:	da03      	bge.n	800a860 <_printf_i+0xd0>
 800a858:	232d      	movs	r3, #45	@ 0x2d
 800a85a:	426d      	negs	r5, r5
 800a85c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a860:	4859      	ldr	r0, [pc, #356]	@ (800a9c8 <_printf_i+0x238>)
 800a862:	230a      	movs	r3, #10
 800a864:	e011      	b.n	800a88a <_printf_i+0xfa>
 800a866:	6821      	ldr	r1, [r4, #0]
 800a868:	6833      	ldr	r3, [r6, #0]
 800a86a:	0608      	lsls	r0, r1, #24
 800a86c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a870:	d402      	bmi.n	800a878 <_printf_i+0xe8>
 800a872:	0649      	lsls	r1, r1, #25
 800a874:	bf48      	it	mi
 800a876:	b2ad      	uxthmi	r5, r5
 800a878:	2f6f      	cmp	r7, #111	@ 0x6f
 800a87a:	4853      	ldr	r0, [pc, #332]	@ (800a9c8 <_printf_i+0x238>)
 800a87c:	6033      	str	r3, [r6, #0]
 800a87e:	bf14      	ite	ne
 800a880:	230a      	movne	r3, #10
 800a882:	2308      	moveq	r3, #8
 800a884:	2100      	movs	r1, #0
 800a886:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a88a:	6866      	ldr	r6, [r4, #4]
 800a88c:	60a6      	str	r6, [r4, #8]
 800a88e:	2e00      	cmp	r6, #0
 800a890:	bfa2      	ittt	ge
 800a892:	6821      	ldrge	r1, [r4, #0]
 800a894:	f021 0104 	bicge.w	r1, r1, #4
 800a898:	6021      	strge	r1, [r4, #0]
 800a89a:	b90d      	cbnz	r5, 800a8a0 <_printf_i+0x110>
 800a89c:	2e00      	cmp	r6, #0
 800a89e:	d04b      	beq.n	800a938 <_printf_i+0x1a8>
 800a8a0:	4616      	mov	r6, r2
 800a8a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a8a6:	fb03 5711 	mls	r7, r3, r1, r5
 800a8aa:	5dc7      	ldrb	r7, [r0, r7]
 800a8ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a8b0:	462f      	mov	r7, r5
 800a8b2:	42bb      	cmp	r3, r7
 800a8b4:	460d      	mov	r5, r1
 800a8b6:	d9f4      	bls.n	800a8a2 <_printf_i+0x112>
 800a8b8:	2b08      	cmp	r3, #8
 800a8ba:	d10b      	bne.n	800a8d4 <_printf_i+0x144>
 800a8bc:	6823      	ldr	r3, [r4, #0]
 800a8be:	07df      	lsls	r7, r3, #31
 800a8c0:	d508      	bpl.n	800a8d4 <_printf_i+0x144>
 800a8c2:	6923      	ldr	r3, [r4, #16]
 800a8c4:	6861      	ldr	r1, [r4, #4]
 800a8c6:	4299      	cmp	r1, r3
 800a8c8:	bfde      	ittt	le
 800a8ca:	2330      	movle	r3, #48	@ 0x30
 800a8cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a8d0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a8d4:	1b92      	subs	r2, r2, r6
 800a8d6:	6122      	str	r2, [r4, #16]
 800a8d8:	f8cd a000 	str.w	sl, [sp]
 800a8dc:	464b      	mov	r3, r9
 800a8de:	aa03      	add	r2, sp, #12
 800a8e0:	4621      	mov	r1, r4
 800a8e2:	4640      	mov	r0, r8
 800a8e4:	f7ff fee6 	bl	800a6b4 <_printf_common>
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	d14a      	bne.n	800a982 <_printf_i+0x1f2>
 800a8ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a8f0:	b004      	add	sp, #16
 800a8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f6:	6823      	ldr	r3, [r4, #0]
 800a8f8:	f043 0320 	orr.w	r3, r3, #32
 800a8fc:	6023      	str	r3, [r4, #0]
 800a8fe:	4833      	ldr	r0, [pc, #204]	@ (800a9cc <_printf_i+0x23c>)
 800a900:	2778      	movs	r7, #120	@ 0x78
 800a902:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a906:	6823      	ldr	r3, [r4, #0]
 800a908:	6831      	ldr	r1, [r6, #0]
 800a90a:	061f      	lsls	r7, r3, #24
 800a90c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a910:	d402      	bmi.n	800a918 <_printf_i+0x188>
 800a912:	065f      	lsls	r7, r3, #25
 800a914:	bf48      	it	mi
 800a916:	b2ad      	uxthmi	r5, r5
 800a918:	6031      	str	r1, [r6, #0]
 800a91a:	07d9      	lsls	r1, r3, #31
 800a91c:	bf44      	itt	mi
 800a91e:	f043 0320 	orrmi.w	r3, r3, #32
 800a922:	6023      	strmi	r3, [r4, #0]
 800a924:	b11d      	cbz	r5, 800a92e <_printf_i+0x19e>
 800a926:	2310      	movs	r3, #16
 800a928:	e7ac      	b.n	800a884 <_printf_i+0xf4>
 800a92a:	4827      	ldr	r0, [pc, #156]	@ (800a9c8 <_printf_i+0x238>)
 800a92c:	e7e9      	b.n	800a902 <_printf_i+0x172>
 800a92e:	6823      	ldr	r3, [r4, #0]
 800a930:	f023 0320 	bic.w	r3, r3, #32
 800a934:	6023      	str	r3, [r4, #0]
 800a936:	e7f6      	b.n	800a926 <_printf_i+0x196>
 800a938:	4616      	mov	r6, r2
 800a93a:	e7bd      	b.n	800a8b8 <_printf_i+0x128>
 800a93c:	6833      	ldr	r3, [r6, #0]
 800a93e:	6825      	ldr	r5, [r4, #0]
 800a940:	6961      	ldr	r1, [r4, #20]
 800a942:	1d18      	adds	r0, r3, #4
 800a944:	6030      	str	r0, [r6, #0]
 800a946:	062e      	lsls	r6, r5, #24
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	d501      	bpl.n	800a950 <_printf_i+0x1c0>
 800a94c:	6019      	str	r1, [r3, #0]
 800a94e:	e002      	b.n	800a956 <_printf_i+0x1c6>
 800a950:	0668      	lsls	r0, r5, #25
 800a952:	d5fb      	bpl.n	800a94c <_printf_i+0x1bc>
 800a954:	8019      	strh	r1, [r3, #0]
 800a956:	2300      	movs	r3, #0
 800a958:	6123      	str	r3, [r4, #16]
 800a95a:	4616      	mov	r6, r2
 800a95c:	e7bc      	b.n	800a8d8 <_printf_i+0x148>
 800a95e:	6833      	ldr	r3, [r6, #0]
 800a960:	1d1a      	adds	r2, r3, #4
 800a962:	6032      	str	r2, [r6, #0]
 800a964:	681e      	ldr	r6, [r3, #0]
 800a966:	6862      	ldr	r2, [r4, #4]
 800a968:	2100      	movs	r1, #0
 800a96a:	4630      	mov	r0, r6
 800a96c:	f7f5 fc68 	bl	8000240 <memchr>
 800a970:	b108      	cbz	r0, 800a976 <_printf_i+0x1e6>
 800a972:	1b80      	subs	r0, r0, r6
 800a974:	6060      	str	r0, [r4, #4]
 800a976:	6863      	ldr	r3, [r4, #4]
 800a978:	6123      	str	r3, [r4, #16]
 800a97a:	2300      	movs	r3, #0
 800a97c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a980:	e7aa      	b.n	800a8d8 <_printf_i+0x148>
 800a982:	6923      	ldr	r3, [r4, #16]
 800a984:	4632      	mov	r2, r6
 800a986:	4649      	mov	r1, r9
 800a988:	4640      	mov	r0, r8
 800a98a:	47d0      	blx	sl
 800a98c:	3001      	adds	r0, #1
 800a98e:	d0ad      	beq.n	800a8ec <_printf_i+0x15c>
 800a990:	6823      	ldr	r3, [r4, #0]
 800a992:	079b      	lsls	r3, r3, #30
 800a994:	d413      	bmi.n	800a9be <_printf_i+0x22e>
 800a996:	68e0      	ldr	r0, [r4, #12]
 800a998:	9b03      	ldr	r3, [sp, #12]
 800a99a:	4298      	cmp	r0, r3
 800a99c:	bfb8      	it	lt
 800a99e:	4618      	movlt	r0, r3
 800a9a0:	e7a6      	b.n	800a8f0 <_printf_i+0x160>
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	4632      	mov	r2, r6
 800a9a6:	4649      	mov	r1, r9
 800a9a8:	4640      	mov	r0, r8
 800a9aa:	47d0      	blx	sl
 800a9ac:	3001      	adds	r0, #1
 800a9ae:	d09d      	beq.n	800a8ec <_printf_i+0x15c>
 800a9b0:	3501      	adds	r5, #1
 800a9b2:	68e3      	ldr	r3, [r4, #12]
 800a9b4:	9903      	ldr	r1, [sp, #12]
 800a9b6:	1a5b      	subs	r3, r3, r1
 800a9b8:	42ab      	cmp	r3, r5
 800a9ba:	dcf2      	bgt.n	800a9a2 <_printf_i+0x212>
 800a9bc:	e7eb      	b.n	800a996 <_printf_i+0x206>
 800a9be:	2500      	movs	r5, #0
 800a9c0:	f104 0619 	add.w	r6, r4, #25
 800a9c4:	e7f5      	b.n	800a9b2 <_printf_i+0x222>
 800a9c6:	bf00      	nop
 800a9c8:	0800de03 	.word	0x0800de03
 800a9cc:	0800de14 	.word	0x0800de14

0800a9d0 <_scanf_float>:
 800a9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d4:	b087      	sub	sp, #28
 800a9d6:	4617      	mov	r7, r2
 800a9d8:	9303      	str	r3, [sp, #12]
 800a9da:	688b      	ldr	r3, [r1, #8]
 800a9dc:	1e5a      	subs	r2, r3, #1
 800a9de:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a9e2:	bf81      	itttt	hi
 800a9e4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a9e8:	eb03 0b05 	addhi.w	fp, r3, r5
 800a9ec:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a9f0:	608b      	strhi	r3, [r1, #8]
 800a9f2:	680b      	ldr	r3, [r1, #0]
 800a9f4:	460a      	mov	r2, r1
 800a9f6:	f04f 0500 	mov.w	r5, #0
 800a9fa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a9fe:	f842 3b1c 	str.w	r3, [r2], #28
 800aa02:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aa06:	4680      	mov	r8, r0
 800aa08:	460c      	mov	r4, r1
 800aa0a:	bf98      	it	ls
 800aa0c:	f04f 0b00 	movls.w	fp, #0
 800aa10:	9201      	str	r2, [sp, #4]
 800aa12:	4616      	mov	r6, r2
 800aa14:	46aa      	mov	sl, r5
 800aa16:	46a9      	mov	r9, r5
 800aa18:	9502      	str	r5, [sp, #8]
 800aa1a:	68a2      	ldr	r2, [r4, #8]
 800aa1c:	b152      	cbz	r2, 800aa34 <_scanf_float+0x64>
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	2b4e      	cmp	r3, #78	@ 0x4e
 800aa24:	d864      	bhi.n	800aaf0 <_scanf_float+0x120>
 800aa26:	2b40      	cmp	r3, #64	@ 0x40
 800aa28:	d83c      	bhi.n	800aaa4 <_scanf_float+0xd4>
 800aa2a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800aa2e:	b2c8      	uxtb	r0, r1
 800aa30:	280e      	cmp	r0, #14
 800aa32:	d93a      	bls.n	800aaaa <_scanf_float+0xda>
 800aa34:	f1b9 0f00 	cmp.w	r9, #0
 800aa38:	d003      	beq.n	800aa42 <_scanf_float+0x72>
 800aa3a:	6823      	ldr	r3, [r4, #0]
 800aa3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa40:	6023      	str	r3, [r4, #0]
 800aa42:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800aa46:	f1ba 0f01 	cmp.w	sl, #1
 800aa4a:	f200 8117 	bhi.w	800ac7c <_scanf_float+0x2ac>
 800aa4e:	9b01      	ldr	r3, [sp, #4]
 800aa50:	429e      	cmp	r6, r3
 800aa52:	f200 8108 	bhi.w	800ac66 <_scanf_float+0x296>
 800aa56:	2001      	movs	r0, #1
 800aa58:	b007      	add	sp, #28
 800aa5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800aa62:	2a0d      	cmp	r2, #13
 800aa64:	d8e6      	bhi.n	800aa34 <_scanf_float+0x64>
 800aa66:	a101      	add	r1, pc, #4	@ (adr r1, 800aa6c <_scanf_float+0x9c>)
 800aa68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800aa6c:	0800abb3 	.word	0x0800abb3
 800aa70:	0800aa35 	.word	0x0800aa35
 800aa74:	0800aa35 	.word	0x0800aa35
 800aa78:	0800aa35 	.word	0x0800aa35
 800aa7c:	0800ac13 	.word	0x0800ac13
 800aa80:	0800abeb 	.word	0x0800abeb
 800aa84:	0800aa35 	.word	0x0800aa35
 800aa88:	0800aa35 	.word	0x0800aa35
 800aa8c:	0800abc1 	.word	0x0800abc1
 800aa90:	0800aa35 	.word	0x0800aa35
 800aa94:	0800aa35 	.word	0x0800aa35
 800aa98:	0800aa35 	.word	0x0800aa35
 800aa9c:	0800aa35 	.word	0x0800aa35
 800aaa0:	0800ab79 	.word	0x0800ab79
 800aaa4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800aaa8:	e7db      	b.n	800aa62 <_scanf_float+0x92>
 800aaaa:	290e      	cmp	r1, #14
 800aaac:	d8c2      	bhi.n	800aa34 <_scanf_float+0x64>
 800aaae:	a001      	add	r0, pc, #4	@ (adr r0, 800aab4 <_scanf_float+0xe4>)
 800aab0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800aab4:	0800ab69 	.word	0x0800ab69
 800aab8:	0800aa35 	.word	0x0800aa35
 800aabc:	0800ab69 	.word	0x0800ab69
 800aac0:	0800abff 	.word	0x0800abff
 800aac4:	0800aa35 	.word	0x0800aa35
 800aac8:	0800ab11 	.word	0x0800ab11
 800aacc:	0800ab4f 	.word	0x0800ab4f
 800aad0:	0800ab4f 	.word	0x0800ab4f
 800aad4:	0800ab4f 	.word	0x0800ab4f
 800aad8:	0800ab4f 	.word	0x0800ab4f
 800aadc:	0800ab4f 	.word	0x0800ab4f
 800aae0:	0800ab4f 	.word	0x0800ab4f
 800aae4:	0800ab4f 	.word	0x0800ab4f
 800aae8:	0800ab4f 	.word	0x0800ab4f
 800aaec:	0800ab4f 	.word	0x0800ab4f
 800aaf0:	2b6e      	cmp	r3, #110	@ 0x6e
 800aaf2:	d809      	bhi.n	800ab08 <_scanf_float+0x138>
 800aaf4:	2b60      	cmp	r3, #96	@ 0x60
 800aaf6:	d8b2      	bhi.n	800aa5e <_scanf_float+0x8e>
 800aaf8:	2b54      	cmp	r3, #84	@ 0x54
 800aafa:	d07b      	beq.n	800abf4 <_scanf_float+0x224>
 800aafc:	2b59      	cmp	r3, #89	@ 0x59
 800aafe:	d199      	bne.n	800aa34 <_scanf_float+0x64>
 800ab00:	2d07      	cmp	r5, #7
 800ab02:	d197      	bne.n	800aa34 <_scanf_float+0x64>
 800ab04:	2508      	movs	r5, #8
 800ab06:	e02c      	b.n	800ab62 <_scanf_float+0x192>
 800ab08:	2b74      	cmp	r3, #116	@ 0x74
 800ab0a:	d073      	beq.n	800abf4 <_scanf_float+0x224>
 800ab0c:	2b79      	cmp	r3, #121	@ 0x79
 800ab0e:	e7f6      	b.n	800aafe <_scanf_float+0x12e>
 800ab10:	6821      	ldr	r1, [r4, #0]
 800ab12:	05c8      	lsls	r0, r1, #23
 800ab14:	d51b      	bpl.n	800ab4e <_scanf_float+0x17e>
 800ab16:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ab1a:	6021      	str	r1, [r4, #0]
 800ab1c:	f109 0901 	add.w	r9, r9, #1
 800ab20:	f1bb 0f00 	cmp.w	fp, #0
 800ab24:	d003      	beq.n	800ab2e <_scanf_float+0x15e>
 800ab26:	3201      	adds	r2, #1
 800ab28:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800ab2c:	60a2      	str	r2, [r4, #8]
 800ab2e:	68a3      	ldr	r3, [r4, #8]
 800ab30:	3b01      	subs	r3, #1
 800ab32:	60a3      	str	r3, [r4, #8]
 800ab34:	6923      	ldr	r3, [r4, #16]
 800ab36:	3301      	adds	r3, #1
 800ab38:	6123      	str	r3, [r4, #16]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	3b01      	subs	r3, #1
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	607b      	str	r3, [r7, #4]
 800ab42:	f340 8087 	ble.w	800ac54 <_scanf_float+0x284>
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	3301      	adds	r3, #1
 800ab4a:	603b      	str	r3, [r7, #0]
 800ab4c:	e765      	b.n	800aa1a <_scanf_float+0x4a>
 800ab4e:	eb1a 0105 	adds.w	r1, sl, r5
 800ab52:	f47f af6f 	bne.w	800aa34 <_scanf_float+0x64>
 800ab56:	6822      	ldr	r2, [r4, #0]
 800ab58:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ab5c:	6022      	str	r2, [r4, #0]
 800ab5e:	460d      	mov	r5, r1
 800ab60:	468a      	mov	sl, r1
 800ab62:	f806 3b01 	strb.w	r3, [r6], #1
 800ab66:	e7e2      	b.n	800ab2e <_scanf_float+0x15e>
 800ab68:	6822      	ldr	r2, [r4, #0]
 800ab6a:	0610      	lsls	r0, r2, #24
 800ab6c:	f57f af62 	bpl.w	800aa34 <_scanf_float+0x64>
 800ab70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ab74:	6022      	str	r2, [r4, #0]
 800ab76:	e7f4      	b.n	800ab62 <_scanf_float+0x192>
 800ab78:	f1ba 0f00 	cmp.w	sl, #0
 800ab7c:	d10e      	bne.n	800ab9c <_scanf_float+0x1cc>
 800ab7e:	f1b9 0f00 	cmp.w	r9, #0
 800ab82:	d10e      	bne.n	800aba2 <_scanf_float+0x1d2>
 800ab84:	6822      	ldr	r2, [r4, #0]
 800ab86:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ab8a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ab8e:	d108      	bne.n	800aba2 <_scanf_float+0x1d2>
 800ab90:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ab94:	6022      	str	r2, [r4, #0]
 800ab96:	f04f 0a01 	mov.w	sl, #1
 800ab9a:	e7e2      	b.n	800ab62 <_scanf_float+0x192>
 800ab9c:	f1ba 0f02 	cmp.w	sl, #2
 800aba0:	d055      	beq.n	800ac4e <_scanf_float+0x27e>
 800aba2:	2d01      	cmp	r5, #1
 800aba4:	d002      	beq.n	800abac <_scanf_float+0x1dc>
 800aba6:	2d04      	cmp	r5, #4
 800aba8:	f47f af44 	bne.w	800aa34 <_scanf_float+0x64>
 800abac:	3501      	adds	r5, #1
 800abae:	b2ed      	uxtb	r5, r5
 800abb0:	e7d7      	b.n	800ab62 <_scanf_float+0x192>
 800abb2:	f1ba 0f01 	cmp.w	sl, #1
 800abb6:	f47f af3d 	bne.w	800aa34 <_scanf_float+0x64>
 800abba:	f04f 0a02 	mov.w	sl, #2
 800abbe:	e7d0      	b.n	800ab62 <_scanf_float+0x192>
 800abc0:	b97d      	cbnz	r5, 800abe2 <_scanf_float+0x212>
 800abc2:	f1b9 0f00 	cmp.w	r9, #0
 800abc6:	f47f af38 	bne.w	800aa3a <_scanf_float+0x6a>
 800abca:	6822      	ldr	r2, [r4, #0]
 800abcc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800abd0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800abd4:	f040 8108 	bne.w	800ade8 <_scanf_float+0x418>
 800abd8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800abdc:	6022      	str	r2, [r4, #0]
 800abde:	2501      	movs	r5, #1
 800abe0:	e7bf      	b.n	800ab62 <_scanf_float+0x192>
 800abe2:	2d03      	cmp	r5, #3
 800abe4:	d0e2      	beq.n	800abac <_scanf_float+0x1dc>
 800abe6:	2d05      	cmp	r5, #5
 800abe8:	e7de      	b.n	800aba8 <_scanf_float+0x1d8>
 800abea:	2d02      	cmp	r5, #2
 800abec:	f47f af22 	bne.w	800aa34 <_scanf_float+0x64>
 800abf0:	2503      	movs	r5, #3
 800abf2:	e7b6      	b.n	800ab62 <_scanf_float+0x192>
 800abf4:	2d06      	cmp	r5, #6
 800abf6:	f47f af1d 	bne.w	800aa34 <_scanf_float+0x64>
 800abfa:	2507      	movs	r5, #7
 800abfc:	e7b1      	b.n	800ab62 <_scanf_float+0x192>
 800abfe:	6822      	ldr	r2, [r4, #0]
 800ac00:	0591      	lsls	r1, r2, #22
 800ac02:	f57f af17 	bpl.w	800aa34 <_scanf_float+0x64>
 800ac06:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ac0a:	6022      	str	r2, [r4, #0]
 800ac0c:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac10:	e7a7      	b.n	800ab62 <_scanf_float+0x192>
 800ac12:	6822      	ldr	r2, [r4, #0]
 800ac14:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800ac18:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ac1c:	d006      	beq.n	800ac2c <_scanf_float+0x25c>
 800ac1e:	0550      	lsls	r0, r2, #21
 800ac20:	f57f af08 	bpl.w	800aa34 <_scanf_float+0x64>
 800ac24:	f1b9 0f00 	cmp.w	r9, #0
 800ac28:	f000 80de 	beq.w	800ade8 <_scanf_float+0x418>
 800ac2c:	0591      	lsls	r1, r2, #22
 800ac2e:	bf58      	it	pl
 800ac30:	9902      	ldrpl	r1, [sp, #8]
 800ac32:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ac36:	bf58      	it	pl
 800ac38:	eba9 0101 	subpl.w	r1, r9, r1
 800ac3c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ac40:	bf58      	it	pl
 800ac42:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ac46:	6022      	str	r2, [r4, #0]
 800ac48:	f04f 0900 	mov.w	r9, #0
 800ac4c:	e789      	b.n	800ab62 <_scanf_float+0x192>
 800ac4e:	f04f 0a03 	mov.w	sl, #3
 800ac52:	e786      	b.n	800ab62 <_scanf_float+0x192>
 800ac54:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ac58:	4639      	mov	r1, r7
 800ac5a:	4640      	mov	r0, r8
 800ac5c:	4798      	blx	r3
 800ac5e:	2800      	cmp	r0, #0
 800ac60:	f43f aedb 	beq.w	800aa1a <_scanf_float+0x4a>
 800ac64:	e6e6      	b.n	800aa34 <_scanf_float+0x64>
 800ac66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ac6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac6e:	463a      	mov	r2, r7
 800ac70:	4640      	mov	r0, r8
 800ac72:	4798      	blx	r3
 800ac74:	6923      	ldr	r3, [r4, #16]
 800ac76:	3b01      	subs	r3, #1
 800ac78:	6123      	str	r3, [r4, #16]
 800ac7a:	e6e8      	b.n	800aa4e <_scanf_float+0x7e>
 800ac7c:	1e6b      	subs	r3, r5, #1
 800ac7e:	2b06      	cmp	r3, #6
 800ac80:	d824      	bhi.n	800accc <_scanf_float+0x2fc>
 800ac82:	2d02      	cmp	r5, #2
 800ac84:	d836      	bhi.n	800acf4 <_scanf_float+0x324>
 800ac86:	9b01      	ldr	r3, [sp, #4]
 800ac88:	429e      	cmp	r6, r3
 800ac8a:	f67f aee4 	bls.w	800aa56 <_scanf_float+0x86>
 800ac8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ac92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ac96:	463a      	mov	r2, r7
 800ac98:	4640      	mov	r0, r8
 800ac9a:	4798      	blx	r3
 800ac9c:	6923      	ldr	r3, [r4, #16]
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	6123      	str	r3, [r4, #16]
 800aca2:	e7f0      	b.n	800ac86 <_scanf_float+0x2b6>
 800aca4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aca8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800acac:	463a      	mov	r2, r7
 800acae:	4640      	mov	r0, r8
 800acb0:	4798      	blx	r3
 800acb2:	6923      	ldr	r3, [r4, #16]
 800acb4:	3b01      	subs	r3, #1
 800acb6:	6123      	str	r3, [r4, #16]
 800acb8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800acbc:	fa5f fa8a 	uxtb.w	sl, sl
 800acc0:	f1ba 0f02 	cmp.w	sl, #2
 800acc4:	d1ee      	bne.n	800aca4 <_scanf_float+0x2d4>
 800acc6:	3d03      	subs	r5, #3
 800acc8:	b2ed      	uxtb	r5, r5
 800acca:	1b76      	subs	r6, r6, r5
 800accc:	6823      	ldr	r3, [r4, #0]
 800acce:	05da      	lsls	r2, r3, #23
 800acd0:	d530      	bpl.n	800ad34 <_scanf_float+0x364>
 800acd2:	055b      	lsls	r3, r3, #21
 800acd4:	d511      	bpl.n	800acfa <_scanf_float+0x32a>
 800acd6:	9b01      	ldr	r3, [sp, #4]
 800acd8:	429e      	cmp	r6, r3
 800acda:	f67f aebc 	bls.w	800aa56 <_scanf_float+0x86>
 800acde:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ace2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ace6:	463a      	mov	r2, r7
 800ace8:	4640      	mov	r0, r8
 800acea:	4798      	blx	r3
 800acec:	6923      	ldr	r3, [r4, #16]
 800acee:	3b01      	subs	r3, #1
 800acf0:	6123      	str	r3, [r4, #16]
 800acf2:	e7f0      	b.n	800acd6 <_scanf_float+0x306>
 800acf4:	46aa      	mov	sl, r5
 800acf6:	46b3      	mov	fp, r6
 800acf8:	e7de      	b.n	800acb8 <_scanf_float+0x2e8>
 800acfa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800acfe:	6923      	ldr	r3, [r4, #16]
 800ad00:	2965      	cmp	r1, #101	@ 0x65
 800ad02:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ad06:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800ad0a:	6123      	str	r3, [r4, #16]
 800ad0c:	d00c      	beq.n	800ad28 <_scanf_float+0x358>
 800ad0e:	2945      	cmp	r1, #69	@ 0x45
 800ad10:	d00a      	beq.n	800ad28 <_scanf_float+0x358>
 800ad12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad16:	463a      	mov	r2, r7
 800ad18:	4640      	mov	r0, r8
 800ad1a:	4798      	blx	r3
 800ad1c:	6923      	ldr	r3, [r4, #16]
 800ad1e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ad22:	3b01      	subs	r3, #1
 800ad24:	1eb5      	subs	r5, r6, #2
 800ad26:	6123      	str	r3, [r4, #16]
 800ad28:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad2c:	463a      	mov	r2, r7
 800ad2e:	4640      	mov	r0, r8
 800ad30:	4798      	blx	r3
 800ad32:	462e      	mov	r6, r5
 800ad34:	6822      	ldr	r2, [r4, #0]
 800ad36:	f012 0210 	ands.w	r2, r2, #16
 800ad3a:	d001      	beq.n	800ad40 <_scanf_float+0x370>
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	e68b      	b.n	800aa58 <_scanf_float+0x88>
 800ad40:	7032      	strb	r2, [r6, #0]
 800ad42:	6823      	ldr	r3, [r4, #0]
 800ad44:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ad48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad4c:	d11c      	bne.n	800ad88 <_scanf_float+0x3b8>
 800ad4e:	9b02      	ldr	r3, [sp, #8]
 800ad50:	454b      	cmp	r3, r9
 800ad52:	eba3 0209 	sub.w	r2, r3, r9
 800ad56:	d123      	bne.n	800ada0 <_scanf_float+0x3d0>
 800ad58:	9901      	ldr	r1, [sp, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	4640      	mov	r0, r8
 800ad5e:	f7ff f947 	bl	8009ff0 <_strtod_r>
 800ad62:	9b03      	ldr	r3, [sp, #12]
 800ad64:	6821      	ldr	r1, [r4, #0]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f011 0f02 	tst.w	r1, #2
 800ad6c:	ec57 6b10 	vmov	r6, r7, d0
 800ad70:	f103 0204 	add.w	r2, r3, #4
 800ad74:	d01f      	beq.n	800adb6 <_scanf_float+0x3e6>
 800ad76:	9903      	ldr	r1, [sp, #12]
 800ad78:	600a      	str	r2, [r1, #0]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	e9c3 6700 	strd	r6, r7, [r3]
 800ad80:	68e3      	ldr	r3, [r4, #12]
 800ad82:	3301      	adds	r3, #1
 800ad84:	60e3      	str	r3, [r4, #12]
 800ad86:	e7d9      	b.n	800ad3c <_scanf_float+0x36c>
 800ad88:	9b04      	ldr	r3, [sp, #16]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d0e4      	beq.n	800ad58 <_scanf_float+0x388>
 800ad8e:	9905      	ldr	r1, [sp, #20]
 800ad90:	230a      	movs	r3, #10
 800ad92:	3101      	adds	r1, #1
 800ad94:	4640      	mov	r0, r8
 800ad96:	f7ff f9b7 	bl	800a108 <_strtol_r>
 800ad9a:	9b04      	ldr	r3, [sp, #16]
 800ad9c:	9e05      	ldr	r6, [sp, #20]
 800ad9e:	1ac2      	subs	r2, r0, r3
 800ada0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ada4:	429e      	cmp	r6, r3
 800ada6:	bf28      	it	cs
 800ada8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800adac:	4910      	ldr	r1, [pc, #64]	@ (800adf0 <_scanf_float+0x420>)
 800adae:	4630      	mov	r0, r6
 800adb0:	f000 f8f6 	bl	800afa0 <siprintf>
 800adb4:	e7d0      	b.n	800ad58 <_scanf_float+0x388>
 800adb6:	f011 0f04 	tst.w	r1, #4
 800adba:	9903      	ldr	r1, [sp, #12]
 800adbc:	600a      	str	r2, [r1, #0]
 800adbe:	d1dc      	bne.n	800ad7a <_scanf_float+0x3aa>
 800adc0:	681d      	ldr	r5, [r3, #0]
 800adc2:	4632      	mov	r2, r6
 800adc4:	463b      	mov	r3, r7
 800adc6:	4630      	mov	r0, r6
 800adc8:	4639      	mov	r1, r7
 800adca:	f7f5 fee7 	bl	8000b9c <__aeabi_dcmpun>
 800adce:	b128      	cbz	r0, 800addc <_scanf_float+0x40c>
 800add0:	4808      	ldr	r0, [pc, #32]	@ (800adf4 <_scanf_float+0x424>)
 800add2:	f000 fa4d 	bl	800b270 <nanf>
 800add6:	ed85 0a00 	vstr	s0, [r5]
 800adda:	e7d1      	b.n	800ad80 <_scanf_float+0x3b0>
 800addc:	4630      	mov	r0, r6
 800adde:	4639      	mov	r1, r7
 800ade0:	f7f5 ff3a 	bl	8000c58 <__aeabi_d2f>
 800ade4:	6028      	str	r0, [r5, #0]
 800ade6:	e7cb      	b.n	800ad80 <_scanf_float+0x3b0>
 800ade8:	f04f 0900 	mov.w	r9, #0
 800adec:	e629      	b.n	800aa42 <_scanf_float+0x72>
 800adee:	bf00      	nop
 800adf0:	0800de25 	.word	0x0800de25
 800adf4:	0800dede 	.word	0x0800dede

0800adf8 <std>:
 800adf8:	2300      	movs	r3, #0
 800adfa:	b510      	push	{r4, lr}
 800adfc:	4604      	mov	r4, r0
 800adfe:	e9c0 3300 	strd	r3, r3, [r0]
 800ae02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae06:	6083      	str	r3, [r0, #8]
 800ae08:	8181      	strh	r1, [r0, #12]
 800ae0a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ae0c:	81c2      	strh	r2, [r0, #14]
 800ae0e:	6183      	str	r3, [r0, #24]
 800ae10:	4619      	mov	r1, r3
 800ae12:	2208      	movs	r2, #8
 800ae14:	305c      	adds	r0, #92	@ 0x5c
 800ae16:	f000 f926 	bl	800b066 <memset>
 800ae1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ae50 <std+0x58>)
 800ae1c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ae1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ae54 <std+0x5c>)
 800ae20:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ae22:	4b0d      	ldr	r3, [pc, #52]	@ (800ae58 <std+0x60>)
 800ae24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ae26:	4b0d      	ldr	r3, [pc, #52]	@ (800ae5c <std+0x64>)
 800ae28:	6323      	str	r3, [r4, #48]	@ 0x30
 800ae2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ae60 <std+0x68>)
 800ae2c:	6224      	str	r4, [r4, #32]
 800ae2e:	429c      	cmp	r4, r3
 800ae30:	d006      	beq.n	800ae40 <std+0x48>
 800ae32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ae36:	4294      	cmp	r4, r2
 800ae38:	d002      	beq.n	800ae40 <std+0x48>
 800ae3a:	33d0      	adds	r3, #208	@ 0xd0
 800ae3c:	429c      	cmp	r4, r3
 800ae3e:	d105      	bne.n	800ae4c <std+0x54>
 800ae40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ae44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae48:	f000 b9f8 	b.w	800b23c <__retarget_lock_init_recursive>
 800ae4c:	bd10      	pop	{r4, pc}
 800ae4e:	bf00      	nop
 800ae50:	0800afe1 	.word	0x0800afe1
 800ae54:	0800b003 	.word	0x0800b003
 800ae58:	0800b03b 	.word	0x0800b03b
 800ae5c:	0800b05f 	.word	0x0800b05f
 800ae60:	2000073c 	.word	0x2000073c

0800ae64 <stdio_exit_handler>:
 800ae64:	4a02      	ldr	r2, [pc, #8]	@ (800ae70 <stdio_exit_handler+0xc>)
 800ae66:	4903      	ldr	r1, [pc, #12]	@ (800ae74 <stdio_exit_handler+0x10>)
 800ae68:	4803      	ldr	r0, [pc, #12]	@ (800ae78 <stdio_exit_handler+0x14>)
 800ae6a:	f000 b869 	b.w	800af40 <_fwalk_sglue>
 800ae6e:	bf00      	nop
 800ae70:	200001b0 	.word	0x200001b0
 800ae74:	0800d7a1 	.word	0x0800d7a1
 800ae78:	2000032c 	.word	0x2000032c

0800ae7c <cleanup_stdio>:
 800ae7c:	6841      	ldr	r1, [r0, #4]
 800ae7e:	4b0c      	ldr	r3, [pc, #48]	@ (800aeb0 <cleanup_stdio+0x34>)
 800ae80:	4299      	cmp	r1, r3
 800ae82:	b510      	push	{r4, lr}
 800ae84:	4604      	mov	r4, r0
 800ae86:	d001      	beq.n	800ae8c <cleanup_stdio+0x10>
 800ae88:	f002 fc8a 	bl	800d7a0 <_fflush_r>
 800ae8c:	68a1      	ldr	r1, [r4, #8]
 800ae8e:	4b09      	ldr	r3, [pc, #36]	@ (800aeb4 <cleanup_stdio+0x38>)
 800ae90:	4299      	cmp	r1, r3
 800ae92:	d002      	beq.n	800ae9a <cleanup_stdio+0x1e>
 800ae94:	4620      	mov	r0, r4
 800ae96:	f002 fc83 	bl	800d7a0 <_fflush_r>
 800ae9a:	68e1      	ldr	r1, [r4, #12]
 800ae9c:	4b06      	ldr	r3, [pc, #24]	@ (800aeb8 <cleanup_stdio+0x3c>)
 800ae9e:	4299      	cmp	r1, r3
 800aea0:	d004      	beq.n	800aeac <cleanup_stdio+0x30>
 800aea2:	4620      	mov	r0, r4
 800aea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aea8:	f002 bc7a 	b.w	800d7a0 <_fflush_r>
 800aeac:	bd10      	pop	{r4, pc}
 800aeae:	bf00      	nop
 800aeb0:	2000073c 	.word	0x2000073c
 800aeb4:	200007a4 	.word	0x200007a4
 800aeb8:	2000080c 	.word	0x2000080c

0800aebc <global_stdio_init.part.0>:
 800aebc:	b510      	push	{r4, lr}
 800aebe:	4b0b      	ldr	r3, [pc, #44]	@ (800aeec <global_stdio_init.part.0+0x30>)
 800aec0:	4c0b      	ldr	r4, [pc, #44]	@ (800aef0 <global_stdio_init.part.0+0x34>)
 800aec2:	4a0c      	ldr	r2, [pc, #48]	@ (800aef4 <global_stdio_init.part.0+0x38>)
 800aec4:	601a      	str	r2, [r3, #0]
 800aec6:	4620      	mov	r0, r4
 800aec8:	2200      	movs	r2, #0
 800aeca:	2104      	movs	r1, #4
 800aecc:	f7ff ff94 	bl	800adf8 <std>
 800aed0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aed4:	2201      	movs	r2, #1
 800aed6:	2109      	movs	r1, #9
 800aed8:	f7ff ff8e 	bl	800adf8 <std>
 800aedc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aee0:	2202      	movs	r2, #2
 800aee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aee6:	2112      	movs	r1, #18
 800aee8:	f7ff bf86 	b.w	800adf8 <std>
 800aeec:	20000874 	.word	0x20000874
 800aef0:	2000073c 	.word	0x2000073c
 800aef4:	0800ae65 	.word	0x0800ae65

0800aef8 <__sfp_lock_acquire>:
 800aef8:	4801      	ldr	r0, [pc, #4]	@ (800af00 <__sfp_lock_acquire+0x8>)
 800aefa:	f000 b9a0 	b.w	800b23e <__retarget_lock_acquire_recursive>
 800aefe:	bf00      	nop
 800af00:	2000087d 	.word	0x2000087d

0800af04 <__sfp_lock_release>:
 800af04:	4801      	ldr	r0, [pc, #4]	@ (800af0c <__sfp_lock_release+0x8>)
 800af06:	f000 b99b 	b.w	800b240 <__retarget_lock_release_recursive>
 800af0a:	bf00      	nop
 800af0c:	2000087d 	.word	0x2000087d

0800af10 <__sinit>:
 800af10:	b510      	push	{r4, lr}
 800af12:	4604      	mov	r4, r0
 800af14:	f7ff fff0 	bl	800aef8 <__sfp_lock_acquire>
 800af18:	6a23      	ldr	r3, [r4, #32]
 800af1a:	b11b      	cbz	r3, 800af24 <__sinit+0x14>
 800af1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af20:	f7ff bff0 	b.w	800af04 <__sfp_lock_release>
 800af24:	4b04      	ldr	r3, [pc, #16]	@ (800af38 <__sinit+0x28>)
 800af26:	6223      	str	r3, [r4, #32]
 800af28:	4b04      	ldr	r3, [pc, #16]	@ (800af3c <__sinit+0x2c>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1f5      	bne.n	800af1c <__sinit+0xc>
 800af30:	f7ff ffc4 	bl	800aebc <global_stdio_init.part.0>
 800af34:	e7f2      	b.n	800af1c <__sinit+0xc>
 800af36:	bf00      	nop
 800af38:	0800ae7d 	.word	0x0800ae7d
 800af3c:	20000874 	.word	0x20000874

0800af40 <_fwalk_sglue>:
 800af40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af44:	4607      	mov	r7, r0
 800af46:	4688      	mov	r8, r1
 800af48:	4614      	mov	r4, r2
 800af4a:	2600      	movs	r6, #0
 800af4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af50:	f1b9 0901 	subs.w	r9, r9, #1
 800af54:	d505      	bpl.n	800af62 <_fwalk_sglue+0x22>
 800af56:	6824      	ldr	r4, [r4, #0]
 800af58:	2c00      	cmp	r4, #0
 800af5a:	d1f7      	bne.n	800af4c <_fwalk_sglue+0xc>
 800af5c:	4630      	mov	r0, r6
 800af5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af62:	89ab      	ldrh	r3, [r5, #12]
 800af64:	2b01      	cmp	r3, #1
 800af66:	d907      	bls.n	800af78 <_fwalk_sglue+0x38>
 800af68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af6c:	3301      	adds	r3, #1
 800af6e:	d003      	beq.n	800af78 <_fwalk_sglue+0x38>
 800af70:	4629      	mov	r1, r5
 800af72:	4638      	mov	r0, r7
 800af74:	47c0      	blx	r8
 800af76:	4306      	orrs	r6, r0
 800af78:	3568      	adds	r5, #104	@ 0x68
 800af7a:	e7e9      	b.n	800af50 <_fwalk_sglue+0x10>

0800af7c <iprintf>:
 800af7c:	b40f      	push	{r0, r1, r2, r3}
 800af7e:	b507      	push	{r0, r1, r2, lr}
 800af80:	4906      	ldr	r1, [pc, #24]	@ (800af9c <iprintf+0x20>)
 800af82:	ab04      	add	r3, sp, #16
 800af84:	6808      	ldr	r0, [r1, #0]
 800af86:	f853 2b04 	ldr.w	r2, [r3], #4
 800af8a:	6881      	ldr	r1, [r0, #8]
 800af8c:	9301      	str	r3, [sp, #4]
 800af8e:	f002 fa6b 	bl	800d468 <_vfiprintf_r>
 800af92:	b003      	add	sp, #12
 800af94:	f85d eb04 	ldr.w	lr, [sp], #4
 800af98:	b004      	add	sp, #16
 800af9a:	4770      	bx	lr
 800af9c:	20000328 	.word	0x20000328

0800afa0 <siprintf>:
 800afa0:	b40e      	push	{r1, r2, r3}
 800afa2:	b500      	push	{lr}
 800afa4:	b09c      	sub	sp, #112	@ 0x70
 800afa6:	ab1d      	add	r3, sp, #116	@ 0x74
 800afa8:	9002      	str	r0, [sp, #8]
 800afaa:	9006      	str	r0, [sp, #24]
 800afac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800afb0:	4809      	ldr	r0, [pc, #36]	@ (800afd8 <siprintf+0x38>)
 800afb2:	9107      	str	r1, [sp, #28]
 800afb4:	9104      	str	r1, [sp, #16]
 800afb6:	4909      	ldr	r1, [pc, #36]	@ (800afdc <siprintf+0x3c>)
 800afb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800afbc:	9105      	str	r1, [sp, #20]
 800afbe:	6800      	ldr	r0, [r0, #0]
 800afc0:	9301      	str	r3, [sp, #4]
 800afc2:	a902      	add	r1, sp, #8
 800afc4:	f002 f92a 	bl	800d21c <_svfiprintf_r>
 800afc8:	9b02      	ldr	r3, [sp, #8]
 800afca:	2200      	movs	r2, #0
 800afcc:	701a      	strb	r2, [r3, #0]
 800afce:	b01c      	add	sp, #112	@ 0x70
 800afd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800afd4:	b003      	add	sp, #12
 800afd6:	4770      	bx	lr
 800afd8:	20000328 	.word	0x20000328
 800afdc:	ffff0208 	.word	0xffff0208

0800afe0 <__sread>:
 800afe0:	b510      	push	{r4, lr}
 800afe2:	460c      	mov	r4, r1
 800afe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afe8:	f000 f8da 	bl	800b1a0 <_read_r>
 800afec:	2800      	cmp	r0, #0
 800afee:	bfab      	itete	ge
 800aff0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aff2:	89a3      	ldrhlt	r3, [r4, #12]
 800aff4:	181b      	addge	r3, r3, r0
 800aff6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800affa:	bfac      	ite	ge
 800affc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800affe:	81a3      	strhlt	r3, [r4, #12]
 800b000:	bd10      	pop	{r4, pc}

0800b002 <__swrite>:
 800b002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b006:	461f      	mov	r7, r3
 800b008:	898b      	ldrh	r3, [r1, #12]
 800b00a:	05db      	lsls	r3, r3, #23
 800b00c:	4605      	mov	r5, r0
 800b00e:	460c      	mov	r4, r1
 800b010:	4616      	mov	r6, r2
 800b012:	d505      	bpl.n	800b020 <__swrite+0x1e>
 800b014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b018:	2302      	movs	r3, #2
 800b01a:	2200      	movs	r2, #0
 800b01c:	f000 f8ae 	bl	800b17c <_lseek_r>
 800b020:	89a3      	ldrh	r3, [r4, #12]
 800b022:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b026:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b02a:	81a3      	strh	r3, [r4, #12]
 800b02c:	4632      	mov	r2, r6
 800b02e:	463b      	mov	r3, r7
 800b030:	4628      	mov	r0, r5
 800b032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b036:	f000 b8c5 	b.w	800b1c4 <_write_r>

0800b03a <__sseek>:
 800b03a:	b510      	push	{r4, lr}
 800b03c:	460c      	mov	r4, r1
 800b03e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b042:	f000 f89b 	bl	800b17c <_lseek_r>
 800b046:	1c43      	adds	r3, r0, #1
 800b048:	89a3      	ldrh	r3, [r4, #12]
 800b04a:	bf15      	itete	ne
 800b04c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b04e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b052:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b056:	81a3      	strheq	r3, [r4, #12]
 800b058:	bf18      	it	ne
 800b05a:	81a3      	strhne	r3, [r4, #12]
 800b05c:	bd10      	pop	{r4, pc}

0800b05e <__sclose>:
 800b05e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b062:	f000 b87b 	b.w	800b15c <_close_r>

0800b066 <memset>:
 800b066:	4402      	add	r2, r0
 800b068:	4603      	mov	r3, r0
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d100      	bne.n	800b070 <memset+0xa>
 800b06e:	4770      	bx	lr
 800b070:	f803 1b01 	strb.w	r1, [r3], #1
 800b074:	e7f9      	b.n	800b06a <memset+0x4>

0800b076 <strncmp>:
 800b076:	b510      	push	{r4, lr}
 800b078:	b16a      	cbz	r2, 800b096 <strncmp+0x20>
 800b07a:	3901      	subs	r1, #1
 800b07c:	1884      	adds	r4, r0, r2
 800b07e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b082:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b086:	429a      	cmp	r2, r3
 800b088:	d103      	bne.n	800b092 <strncmp+0x1c>
 800b08a:	42a0      	cmp	r0, r4
 800b08c:	d001      	beq.n	800b092 <strncmp+0x1c>
 800b08e:	2a00      	cmp	r2, #0
 800b090:	d1f5      	bne.n	800b07e <strncmp+0x8>
 800b092:	1ad0      	subs	r0, r2, r3
 800b094:	bd10      	pop	{r4, pc}
 800b096:	4610      	mov	r0, r2
 800b098:	e7fc      	b.n	800b094 <strncmp+0x1e>
	...

0800b09c <strtok>:
 800b09c:	4b16      	ldr	r3, [pc, #88]	@ (800b0f8 <strtok+0x5c>)
 800b09e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a2:	681f      	ldr	r7, [r3, #0]
 800b0a4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b0a6:	4605      	mov	r5, r0
 800b0a8:	460e      	mov	r6, r1
 800b0aa:	b9ec      	cbnz	r4, 800b0e8 <strtok+0x4c>
 800b0ac:	2050      	movs	r0, #80	@ 0x50
 800b0ae:	f001 fad3 	bl	800c658 <malloc>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	6478      	str	r0, [r7, #68]	@ 0x44
 800b0b6:	b920      	cbnz	r0, 800b0c2 <strtok+0x26>
 800b0b8:	4b10      	ldr	r3, [pc, #64]	@ (800b0fc <strtok+0x60>)
 800b0ba:	4811      	ldr	r0, [pc, #68]	@ (800b100 <strtok+0x64>)
 800b0bc:	215b      	movs	r1, #91	@ 0x5b
 800b0be:	f000 f8dd 	bl	800b27c <__assert_func>
 800b0c2:	e9c0 4400 	strd	r4, r4, [r0]
 800b0c6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b0ca:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b0ce:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b0d2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b0d6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b0da:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b0de:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b0e2:	6184      	str	r4, [r0, #24]
 800b0e4:	7704      	strb	r4, [r0, #28]
 800b0e6:	6244      	str	r4, [r0, #36]	@ 0x24
 800b0e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0f4:	f000 b806 	b.w	800b104 <__strtok_r>
 800b0f8:	20000328 	.word	0x20000328
 800b0fc:	0800de2a 	.word	0x0800de2a
 800b100:	0800de41 	.word	0x0800de41

0800b104 <__strtok_r>:
 800b104:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b106:	4604      	mov	r4, r0
 800b108:	b908      	cbnz	r0, 800b10e <__strtok_r+0xa>
 800b10a:	6814      	ldr	r4, [r2, #0]
 800b10c:	b144      	cbz	r4, 800b120 <__strtok_r+0x1c>
 800b10e:	4620      	mov	r0, r4
 800b110:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b114:	460f      	mov	r7, r1
 800b116:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b11a:	b91e      	cbnz	r6, 800b124 <__strtok_r+0x20>
 800b11c:	b965      	cbnz	r5, 800b138 <__strtok_r+0x34>
 800b11e:	6015      	str	r5, [r2, #0]
 800b120:	2000      	movs	r0, #0
 800b122:	e005      	b.n	800b130 <__strtok_r+0x2c>
 800b124:	42b5      	cmp	r5, r6
 800b126:	d1f6      	bne.n	800b116 <__strtok_r+0x12>
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1f0      	bne.n	800b10e <__strtok_r+0xa>
 800b12c:	6014      	str	r4, [r2, #0]
 800b12e:	7003      	strb	r3, [r0, #0]
 800b130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b132:	461c      	mov	r4, r3
 800b134:	e00c      	b.n	800b150 <__strtok_r+0x4c>
 800b136:	b915      	cbnz	r5, 800b13e <__strtok_r+0x3a>
 800b138:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b13c:	460e      	mov	r6, r1
 800b13e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b142:	42ab      	cmp	r3, r5
 800b144:	d1f7      	bne.n	800b136 <__strtok_r+0x32>
 800b146:	2b00      	cmp	r3, #0
 800b148:	d0f3      	beq.n	800b132 <__strtok_r+0x2e>
 800b14a:	2300      	movs	r3, #0
 800b14c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b150:	6014      	str	r4, [r2, #0]
 800b152:	e7ed      	b.n	800b130 <__strtok_r+0x2c>

0800b154 <_localeconv_r>:
 800b154:	4800      	ldr	r0, [pc, #0]	@ (800b158 <_localeconv_r+0x4>)
 800b156:	4770      	bx	lr
 800b158:	200002ac 	.word	0x200002ac

0800b15c <_close_r>:
 800b15c:	b538      	push	{r3, r4, r5, lr}
 800b15e:	4d06      	ldr	r5, [pc, #24]	@ (800b178 <_close_r+0x1c>)
 800b160:	2300      	movs	r3, #0
 800b162:	4604      	mov	r4, r0
 800b164:	4608      	mov	r0, r1
 800b166:	602b      	str	r3, [r5, #0]
 800b168:	f7f6 fcf2 	bl	8001b50 <_close>
 800b16c:	1c43      	adds	r3, r0, #1
 800b16e:	d102      	bne.n	800b176 <_close_r+0x1a>
 800b170:	682b      	ldr	r3, [r5, #0]
 800b172:	b103      	cbz	r3, 800b176 <_close_r+0x1a>
 800b174:	6023      	str	r3, [r4, #0]
 800b176:	bd38      	pop	{r3, r4, r5, pc}
 800b178:	20000878 	.word	0x20000878

0800b17c <_lseek_r>:
 800b17c:	b538      	push	{r3, r4, r5, lr}
 800b17e:	4d07      	ldr	r5, [pc, #28]	@ (800b19c <_lseek_r+0x20>)
 800b180:	4604      	mov	r4, r0
 800b182:	4608      	mov	r0, r1
 800b184:	4611      	mov	r1, r2
 800b186:	2200      	movs	r2, #0
 800b188:	602a      	str	r2, [r5, #0]
 800b18a:	461a      	mov	r2, r3
 800b18c:	f7f6 fd07 	bl	8001b9e <_lseek>
 800b190:	1c43      	adds	r3, r0, #1
 800b192:	d102      	bne.n	800b19a <_lseek_r+0x1e>
 800b194:	682b      	ldr	r3, [r5, #0]
 800b196:	b103      	cbz	r3, 800b19a <_lseek_r+0x1e>
 800b198:	6023      	str	r3, [r4, #0]
 800b19a:	bd38      	pop	{r3, r4, r5, pc}
 800b19c:	20000878 	.word	0x20000878

0800b1a0 <_read_r>:
 800b1a0:	b538      	push	{r3, r4, r5, lr}
 800b1a2:	4d07      	ldr	r5, [pc, #28]	@ (800b1c0 <_read_r+0x20>)
 800b1a4:	4604      	mov	r4, r0
 800b1a6:	4608      	mov	r0, r1
 800b1a8:	4611      	mov	r1, r2
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	602a      	str	r2, [r5, #0]
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	f7f6 fc95 	bl	8001ade <_read>
 800b1b4:	1c43      	adds	r3, r0, #1
 800b1b6:	d102      	bne.n	800b1be <_read_r+0x1e>
 800b1b8:	682b      	ldr	r3, [r5, #0]
 800b1ba:	b103      	cbz	r3, 800b1be <_read_r+0x1e>
 800b1bc:	6023      	str	r3, [r4, #0]
 800b1be:	bd38      	pop	{r3, r4, r5, pc}
 800b1c0:	20000878 	.word	0x20000878

0800b1c4 <_write_r>:
 800b1c4:	b538      	push	{r3, r4, r5, lr}
 800b1c6:	4d07      	ldr	r5, [pc, #28]	@ (800b1e4 <_write_r+0x20>)
 800b1c8:	4604      	mov	r4, r0
 800b1ca:	4608      	mov	r0, r1
 800b1cc:	4611      	mov	r1, r2
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	602a      	str	r2, [r5, #0]
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	f7f6 fca0 	bl	8001b18 <_write>
 800b1d8:	1c43      	adds	r3, r0, #1
 800b1da:	d102      	bne.n	800b1e2 <_write_r+0x1e>
 800b1dc:	682b      	ldr	r3, [r5, #0]
 800b1de:	b103      	cbz	r3, 800b1e2 <_write_r+0x1e>
 800b1e0:	6023      	str	r3, [r4, #0]
 800b1e2:	bd38      	pop	{r3, r4, r5, pc}
 800b1e4:	20000878 	.word	0x20000878

0800b1e8 <__errno>:
 800b1e8:	4b01      	ldr	r3, [pc, #4]	@ (800b1f0 <__errno+0x8>)
 800b1ea:	6818      	ldr	r0, [r3, #0]
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop
 800b1f0:	20000328 	.word	0x20000328

0800b1f4 <__libc_init_array>:
 800b1f4:	b570      	push	{r4, r5, r6, lr}
 800b1f6:	4d0d      	ldr	r5, [pc, #52]	@ (800b22c <__libc_init_array+0x38>)
 800b1f8:	4c0d      	ldr	r4, [pc, #52]	@ (800b230 <__libc_init_array+0x3c>)
 800b1fa:	1b64      	subs	r4, r4, r5
 800b1fc:	10a4      	asrs	r4, r4, #2
 800b1fe:	2600      	movs	r6, #0
 800b200:	42a6      	cmp	r6, r4
 800b202:	d109      	bne.n	800b218 <__libc_init_array+0x24>
 800b204:	4d0b      	ldr	r5, [pc, #44]	@ (800b234 <__libc_init_array+0x40>)
 800b206:	4c0c      	ldr	r4, [pc, #48]	@ (800b238 <__libc_init_array+0x44>)
 800b208:	f002 fcdc 	bl	800dbc4 <_init>
 800b20c:	1b64      	subs	r4, r4, r5
 800b20e:	10a4      	asrs	r4, r4, #2
 800b210:	2600      	movs	r6, #0
 800b212:	42a6      	cmp	r6, r4
 800b214:	d105      	bne.n	800b222 <__libc_init_array+0x2e>
 800b216:	bd70      	pop	{r4, r5, r6, pc}
 800b218:	f855 3b04 	ldr.w	r3, [r5], #4
 800b21c:	4798      	blx	r3
 800b21e:	3601      	adds	r6, #1
 800b220:	e7ee      	b.n	800b200 <__libc_init_array+0xc>
 800b222:	f855 3b04 	ldr.w	r3, [r5], #4
 800b226:	4798      	blx	r3
 800b228:	3601      	adds	r6, #1
 800b22a:	e7f2      	b.n	800b212 <__libc_init_array+0x1e>
 800b22c:	0800e12c 	.word	0x0800e12c
 800b230:	0800e12c 	.word	0x0800e12c
 800b234:	0800e12c 	.word	0x0800e12c
 800b238:	0800e130 	.word	0x0800e130

0800b23c <__retarget_lock_init_recursive>:
 800b23c:	4770      	bx	lr

0800b23e <__retarget_lock_acquire_recursive>:
 800b23e:	4770      	bx	lr

0800b240 <__retarget_lock_release_recursive>:
 800b240:	4770      	bx	lr

0800b242 <memcpy>:
 800b242:	440a      	add	r2, r1
 800b244:	4291      	cmp	r1, r2
 800b246:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b24a:	d100      	bne.n	800b24e <memcpy+0xc>
 800b24c:	4770      	bx	lr
 800b24e:	b510      	push	{r4, lr}
 800b250:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b254:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b258:	4291      	cmp	r1, r2
 800b25a:	d1f9      	bne.n	800b250 <memcpy+0xe>
 800b25c:	bd10      	pop	{r4, pc}
	...

0800b260 <nan>:
 800b260:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b268 <nan+0x8>
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	00000000 	.word	0x00000000
 800b26c:	7ff80000 	.word	0x7ff80000

0800b270 <nanf>:
 800b270:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b278 <nanf+0x8>
 800b274:	4770      	bx	lr
 800b276:	bf00      	nop
 800b278:	7fc00000 	.word	0x7fc00000

0800b27c <__assert_func>:
 800b27c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b27e:	4614      	mov	r4, r2
 800b280:	461a      	mov	r2, r3
 800b282:	4b09      	ldr	r3, [pc, #36]	@ (800b2a8 <__assert_func+0x2c>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4605      	mov	r5, r0
 800b288:	68d8      	ldr	r0, [r3, #12]
 800b28a:	b954      	cbnz	r4, 800b2a2 <__assert_func+0x26>
 800b28c:	4b07      	ldr	r3, [pc, #28]	@ (800b2ac <__assert_func+0x30>)
 800b28e:	461c      	mov	r4, r3
 800b290:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b294:	9100      	str	r1, [sp, #0]
 800b296:	462b      	mov	r3, r5
 800b298:	4905      	ldr	r1, [pc, #20]	@ (800b2b0 <__assert_func+0x34>)
 800b29a:	f002 faa9 	bl	800d7f0 <fiprintf>
 800b29e:	f002 fb77 	bl	800d990 <abort>
 800b2a2:	4b04      	ldr	r3, [pc, #16]	@ (800b2b4 <__assert_func+0x38>)
 800b2a4:	e7f4      	b.n	800b290 <__assert_func+0x14>
 800b2a6:	bf00      	nop
 800b2a8:	20000328 	.word	0x20000328
 800b2ac:	0800dede 	.word	0x0800dede
 800b2b0:	0800deb0 	.word	0x0800deb0
 800b2b4:	0800dea3 	.word	0x0800dea3

0800b2b8 <quorem>:
 800b2b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2bc:	6903      	ldr	r3, [r0, #16]
 800b2be:	690c      	ldr	r4, [r1, #16]
 800b2c0:	42a3      	cmp	r3, r4
 800b2c2:	4607      	mov	r7, r0
 800b2c4:	db7e      	blt.n	800b3c4 <quorem+0x10c>
 800b2c6:	3c01      	subs	r4, #1
 800b2c8:	f101 0814 	add.w	r8, r1, #20
 800b2cc:	00a3      	lsls	r3, r4, #2
 800b2ce:	f100 0514 	add.w	r5, r0, #20
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2d8:	9301      	str	r3, [sp, #4]
 800b2da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b2de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b2ea:	fbb2 f6f3 	udiv	r6, r2, r3
 800b2ee:	d32e      	bcc.n	800b34e <quorem+0x96>
 800b2f0:	f04f 0a00 	mov.w	sl, #0
 800b2f4:	46c4      	mov	ip, r8
 800b2f6:	46ae      	mov	lr, r5
 800b2f8:	46d3      	mov	fp, sl
 800b2fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b2fe:	b298      	uxth	r0, r3
 800b300:	fb06 a000 	mla	r0, r6, r0, sl
 800b304:	0c02      	lsrs	r2, r0, #16
 800b306:	0c1b      	lsrs	r3, r3, #16
 800b308:	fb06 2303 	mla	r3, r6, r3, r2
 800b30c:	f8de 2000 	ldr.w	r2, [lr]
 800b310:	b280      	uxth	r0, r0
 800b312:	b292      	uxth	r2, r2
 800b314:	1a12      	subs	r2, r2, r0
 800b316:	445a      	add	r2, fp
 800b318:	f8de 0000 	ldr.w	r0, [lr]
 800b31c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b320:	b29b      	uxth	r3, r3
 800b322:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b326:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b32a:	b292      	uxth	r2, r2
 800b32c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b330:	45e1      	cmp	r9, ip
 800b332:	f84e 2b04 	str.w	r2, [lr], #4
 800b336:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b33a:	d2de      	bcs.n	800b2fa <quorem+0x42>
 800b33c:	9b00      	ldr	r3, [sp, #0]
 800b33e:	58eb      	ldr	r3, [r5, r3]
 800b340:	b92b      	cbnz	r3, 800b34e <quorem+0x96>
 800b342:	9b01      	ldr	r3, [sp, #4]
 800b344:	3b04      	subs	r3, #4
 800b346:	429d      	cmp	r5, r3
 800b348:	461a      	mov	r2, r3
 800b34a:	d32f      	bcc.n	800b3ac <quorem+0xf4>
 800b34c:	613c      	str	r4, [r7, #16]
 800b34e:	4638      	mov	r0, r7
 800b350:	f001 fd0e 	bl	800cd70 <__mcmp>
 800b354:	2800      	cmp	r0, #0
 800b356:	db25      	blt.n	800b3a4 <quorem+0xec>
 800b358:	4629      	mov	r1, r5
 800b35a:	2000      	movs	r0, #0
 800b35c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b360:	f8d1 c000 	ldr.w	ip, [r1]
 800b364:	fa1f fe82 	uxth.w	lr, r2
 800b368:	fa1f f38c 	uxth.w	r3, ip
 800b36c:	eba3 030e 	sub.w	r3, r3, lr
 800b370:	4403      	add	r3, r0
 800b372:	0c12      	lsrs	r2, r2, #16
 800b374:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b378:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b382:	45c1      	cmp	r9, r8
 800b384:	f841 3b04 	str.w	r3, [r1], #4
 800b388:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b38c:	d2e6      	bcs.n	800b35c <quorem+0xa4>
 800b38e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b392:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b396:	b922      	cbnz	r2, 800b3a2 <quorem+0xea>
 800b398:	3b04      	subs	r3, #4
 800b39a:	429d      	cmp	r5, r3
 800b39c:	461a      	mov	r2, r3
 800b39e:	d30b      	bcc.n	800b3b8 <quorem+0x100>
 800b3a0:	613c      	str	r4, [r7, #16]
 800b3a2:	3601      	adds	r6, #1
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	b003      	add	sp, #12
 800b3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ac:	6812      	ldr	r2, [r2, #0]
 800b3ae:	3b04      	subs	r3, #4
 800b3b0:	2a00      	cmp	r2, #0
 800b3b2:	d1cb      	bne.n	800b34c <quorem+0x94>
 800b3b4:	3c01      	subs	r4, #1
 800b3b6:	e7c6      	b.n	800b346 <quorem+0x8e>
 800b3b8:	6812      	ldr	r2, [r2, #0]
 800b3ba:	3b04      	subs	r3, #4
 800b3bc:	2a00      	cmp	r2, #0
 800b3be:	d1ef      	bne.n	800b3a0 <quorem+0xe8>
 800b3c0:	3c01      	subs	r4, #1
 800b3c2:	e7ea      	b.n	800b39a <quorem+0xe2>
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	e7ee      	b.n	800b3a6 <quorem+0xee>

0800b3c8 <_dtoa_r>:
 800b3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3cc:	69c7      	ldr	r7, [r0, #28]
 800b3ce:	b099      	sub	sp, #100	@ 0x64
 800b3d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b3d4:	ec55 4b10 	vmov	r4, r5, d0
 800b3d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b3da:	9109      	str	r1, [sp, #36]	@ 0x24
 800b3dc:	4683      	mov	fp, r0
 800b3de:	920e      	str	r2, [sp, #56]	@ 0x38
 800b3e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b3e2:	b97f      	cbnz	r7, 800b404 <_dtoa_r+0x3c>
 800b3e4:	2010      	movs	r0, #16
 800b3e6:	f001 f937 	bl	800c658 <malloc>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	f8cb 001c 	str.w	r0, [fp, #28]
 800b3f0:	b920      	cbnz	r0, 800b3fc <_dtoa_r+0x34>
 800b3f2:	4ba7      	ldr	r3, [pc, #668]	@ (800b690 <_dtoa_r+0x2c8>)
 800b3f4:	21ef      	movs	r1, #239	@ 0xef
 800b3f6:	48a7      	ldr	r0, [pc, #668]	@ (800b694 <_dtoa_r+0x2cc>)
 800b3f8:	f7ff ff40 	bl	800b27c <__assert_func>
 800b3fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b400:	6007      	str	r7, [r0, #0]
 800b402:	60c7      	str	r7, [r0, #12]
 800b404:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b408:	6819      	ldr	r1, [r3, #0]
 800b40a:	b159      	cbz	r1, 800b424 <_dtoa_r+0x5c>
 800b40c:	685a      	ldr	r2, [r3, #4]
 800b40e:	604a      	str	r2, [r1, #4]
 800b410:	2301      	movs	r3, #1
 800b412:	4093      	lsls	r3, r2
 800b414:	608b      	str	r3, [r1, #8]
 800b416:	4658      	mov	r0, fp
 800b418:	f001 fa26 	bl	800c868 <_Bfree>
 800b41c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b420:	2200      	movs	r2, #0
 800b422:	601a      	str	r2, [r3, #0]
 800b424:	1e2b      	subs	r3, r5, #0
 800b426:	bfb9      	ittee	lt
 800b428:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b42c:	9303      	strlt	r3, [sp, #12]
 800b42e:	2300      	movge	r3, #0
 800b430:	6033      	strge	r3, [r6, #0]
 800b432:	9f03      	ldr	r7, [sp, #12]
 800b434:	4b98      	ldr	r3, [pc, #608]	@ (800b698 <_dtoa_r+0x2d0>)
 800b436:	bfbc      	itt	lt
 800b438:	2201      	movlt	r2, #1
 800b43a:	6032      	strlt	r2, [r6, #0]
 800b43c:	43bb      	bics	r3, r7
 800b43e:	d112      	bne.n	800b466 <_dtoa_r+0x9e>
 800b440:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b442:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b446:	6013      	str	r3, [r2, #0]
 800b448:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b44c:	4323      	orrs	r3, r4
 800b44e:	f000 854d 	beq.w	800beec <_dtoa_r+0xb24>
 800b452:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b454:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b6ac <_dtoa_r+0x2e4>
 800b458:	2b00      	cmp	r3, #0
 800b45a:	f000 854f 	beq.w	800befc <_dtoa_r+0xb34>
 800b45e:	f10a 0303 	add.w	r3, sl, #3
 800b462:	f000 bd49 	b.w	800bef8 <_dtoa_r+0xb30>
 800b466:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b46a:	2200      	movs	r2, #0
 800b46c:	ec51 0b17 	vmov	r0, r1, d7
 800b470:	2300      	movs	r3, #0
 800b472:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b476:	f7f5 fb5f 	bl	8000b38 <__aeabi_dcmpeq>
 800b47a:	4680      	mov	r8, r0
 800b47c:	b158      	cbz	r0, 800b496 <_dtoa_r+0xce>
 800b47e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b480:	2301      	movs	r3, #1
 800b482:	6013      	str	r3, [r2, #0]
 800b484:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b486:	b113      	cbz	r3, 800b48e <_dtoa_r+0xc6>
 800b488:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b48a:	4b84      	ldr	r3, [pc, #528]	@ (800b69c <_dtoa_r+0x2d4>)
 800b48c:	6013      	str	r3, [r2, #0]
 800b48e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b6b0 <_dtoa_r+0x2e8>
 800b492:	f000 bd33 	b.w	800befc <_dtoa_r+0xb34>
 800b496:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b49a:	aa16      	add	r2, sp, #88	@ 0x58
 800b49c:	a917      	add	r1, sp, #92	@ 0x5c
 800b49e:	4658      	mov	r0, fp
 800b4a0:	f001 fd86 	bl	800cfb0 <__d2b>
 800b4a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b4a8:	4681      	mov	r9, r0
 800b4aa:	2e00      	cmp	r6, #0
 800b4ac:	d077      	beq.n	800b59e <_dtoa_r+0x1d6>
 800b4ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b4b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b4c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b4c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	4b74      	ldr	r3, [pc, #464]	@ (800b6a0 <_dtoa_r+0x2d8>)
 800b4ce:	f7f4 ff13 	bl	80002f8 <__aeabi_dsub>
 800b4d2:	a369      	add	r3, pc, #420	@ (adr r3, 800b678 <_dtoa_r+0x2b0>)
 800b4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d8:	f7f5 f8c6 	bl	8000668 <__aeabi_dmul>
 800b4dc:	a368      	add	r3, pc, #416	@ (adr r3, 800b680 <_dtoa_r+0x2b8>)
 800b4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e2:	f7f4 ff0b 	bl	80002fc <__adddf3>
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	460d      	mov	r5, r1
 800b4ec:	f7f5 f852 	bl	8000594 <__aeabi_i2d>
 800b4f0:	a365      	add	r3, pc, #404	@ (adr r3, 800b688 <_dtoa_r+0x2c0>)
 800b4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f6:	f7f5 f8b7 	bl	8000668 <__aeabi_dmul>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	4620      	mov	r0, r4
 800b500:	4629      	mov	r1, r5
 800b502:	f7f4 fefb 	bl	80002fc <__adddf3>
 800b506:	4604      	mov	r4, r0
 800b508:	460d      	mov	r5, r1
 800b50a:	f7f5 fb5d 	bl	8000bc8 <__aeabi_d2iz>
 800b50e:	2200      	movs	r2, #0
 800b510:	4607      	mov	r7, r0
 800b512:	2300      	movs	r3, #0
 800b514:	4620      	mov	r0, r4
 800b516:	4629      	mov	r1, r5
 800b518:	f7f5 fb18 	bl	8000b4c <__aeabi_dcmplt>
 800b51c:	b140      	cbz	r0, 800b530 <_dtoa_r+0x168>
 800b51e:	4638      	mov	r0, r7
 800b520:	f7f5 f838 	bl	8000594 <__aeabi_i2d>
 800b524:	4622      	mov	r2, r4
 800b526:	462b      	mov	r3, r5
 800b528:	f7f5 fb06 	bl	8000b38 <__aeabi_dcmpeq>
 800b52c:	b900      	cbnz	r0, 800b530 <_dtoa_r+0x168>
 800b52e:	3f01      	subs	r7, #1
 800b530:	2f16      	cmp	r7, #22
 800b532:	d851      	bhi.n	800b5d8 <_dtoa_r+0x210>
 800b534:	4b5b      	ldr	r3, [pc, #364]	@ (800b6a4 <_dtoa_r+0x2dc>)
 800b536:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b542:	f7f5 fb03 	bl	8000b4c <__aeabi_dcmplt>
 800b546:	2800      	cmp	r0, #0
 800b548:	d048      	beq.n	800b5dc <_dtoa_r+0x214>
 800b54a:	3f01      	subs	r7, #1
 800b54c:	2300      	movs	r3, #0
 800b54e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b550:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b552:	1b9b      	subs	r3, r3, r6
 800b554:	1e5a      	subs	r2, r3, #1
 800b556:	bf44      	itt	mi
 800b558:	f1c3 0801 	rsbmi	r8, r3, #1
 800b55c:	2300      	movmi	r3, #0
 800b55e:	9208      	str	r2, [sp, #32]
 800b560:	bf54      	ite	pl
 800b562:	f04f 0800 	movpl.w	r8, #0
 800b566:	9308      	strmi	r3, [sp, #32]
 800b568:	2f00      	cmp	r7, #0
 800b56a:	db39      	blt.n	800b5e0 <_dtoa_r+0x218>
 800b56c:	9b08      	ldr	r3, [sp, #32]
 800b56e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b570:	443b      	add	r3, r7
 800b572:	9308      	str	r3, [sp, #32]
 800b574:	2300      	movs	r3, #0
 800b576:	930a      	str	r3, [sp, #40]	@ 0x28
 800b578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b57a:	2b09      	cmp	r3, #9
 800b57c:	d864      	bhi.n	800b648 <_dtoa_r+0x280>
 800b57e:	2b05      	cmp	r3, #5
 800b580:	bfc4      	itt	gt
 800b582:	3b04      	subgt	r3, #4
 800b584:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b588:	f1a3 0302 	sub.w	r3, r3, #2
 800b58c:	bfcc      	ite	gt
 800b58e:	2400      	movgt	r4, #0
 800b590:	2401      	movle	r4, #1
 800b592:	2b03      	cmp	r3, #3
 800b594:	d863      	bhi.n	800b65e <_dtoa_r+0x296>
 800b596:	e8df f003 	tbb	[pc, r3]
 800b59a:	372a      	.short	0x372a
 800b59c:	5535      	.short	0x5535
 800b59e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b5a2:	441e      	add	r6, r3
 800b5a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b5a8:	2b20      	cmp	r3, #32
 800b5aa:	bfc1      	itttt	gt
 800b5ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b5b0:	409f      	lslgt	r7, r3
 800b5b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b5b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b5ba:	bfd6      	itet	le
 800b5bc:	f1c3 0320 	rsble	r3, r3, #32
 800b5c0:	ea47 0003 	orrgt.w	r0, r7, r3
 800b5c4:	fa04 f003 	lslle.w	r0, r4, r3
 800b5c8:	f7f4 ffd4 	bl	8000574 <__aeabi_ui2d>
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b5d2:	3e01      	subs	r6, #1
 800b5d4:	9214      	str	r2, [sp, #80]	@ 0x50
 800b5d6:	e777      	b.n	800b4c8 <_dtoa_r+0x100>
 800b5d8:	2301      	movs	r3, #1
 800b5da:	e7b8      	b.n	800b54e <_dtoa_r+0x186>
 800b5dc:	9012      	str	r0, [sp, #72]	@ 0x48
 800b5de:	e7b7      	b.n	800b550 <_dtoa_r+0x188>
 800b5e0:	427b      	negs	r3, r7
 800b5e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	eba8 0807 	sub.w	r8, r8, r7
 800b5ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b5ec:	e7c4      	b.n	800b578 <_dtoa_r+0x1b0>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	dc35      	bgt.n	800b664 <_dtoa_r+0x29c>
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	9300      	str	r3, [sp, #0]
 800b5fc:	9307      	str	r3, [sp, #28]
 800b5fe:	461a      	mov	r2, r3
 800b600:	920e      	str	r2, [sp, #56]	@ 0x38
 800b602:	e00b      	b.n	800b61c <_dtoa_r+0x254>
 800b604:	2301      	movs	r3, #1
 800b606:	e7f3      	b.n	800b5f0 <_dtoa_r+0x228>
 800b608:	2300      	movs	r3, #0
 800b60a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b60c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b60e:	18fb      	adds	r3, r7, r3
 800b610:	9300      	str	r3, [sp, #0]
 800b612:	3301      	adds	r3, #1
 800b614:	2b01      	cmp	r3, #1
 800b616:	9307      	str	r3, [sp, #28]
 800b618:	bfb8      	it	lt
 800b61a:	2301      	movlt	r3, #1
 800b61c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b620:	2100      	movs	r1, #0
 800b622:	2204      	movs	r2, #4
 800b624:	f102 0514 	add.w	r5, r2, #20
 800b628:	429d      	cmp	r5, r3
 800b62a:	d91f      	bls.n	800b66c <_dtoa_r+0x2a4>
 800b62c:	6041      	str	r1, [r0, #4]
 800b62e:	4658      	mov	r0, fp
 800b630:	f001 f8da 	bl	800c7e8 <_Balloc>
 800b634:	4682      	mov	sl, r0
 800b636:	2800      	cmp	r0, #0
 800b638:	d13c      	bne.n	800b6b4 <_dtoa_r+0x2ec>
 800b63a:	4b1b      	ldr	r3, [pc, #108]	@ (800b6a8 <_dtoa_r+0x2e0>)
 800b63c:	4602      	mov	r2, r0
 800b63e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b642:	e6d8      	b.n	800b3f6 <_dtoa_r+0x2e>
 800b644:	2301      	movs	r3, #1
 800b646:	e7e0      	b.n	800b60a <_dtoa_r+0x242>
 800b648:	2401      	movs	r4, #1
 800b64a:	2300      	movs	r3, #0
 800b64c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b64e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b650:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b654:	9300      	str	r3, [sp, #0]
 800b656:	9307      	str	r3, [sp, #28]
 800b658:	2200      	movs	r2, #0
 800b65a:	2312      	movs	r3, #18
 800b65c:	e7d0      	b.n	800b600 <_dtoa_r+0x238>
 800b65e:	2301      	movs	r3, #1
 800b660:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b662:	e7f5      	b.n	800b650 <_dtoa_r+0x288>
 800b664:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b666:	9300      	str	r3, [sp, #0]
 800b668:	9307      	str	r3, [sp, #28]
 800b66a:	e7d7      	b.n	800b61c <_dtoa_r+0x254>
 800b66c:	3101      	adds	r1, #1
 800b66e:	0052      	lsls	r2, r2, #1
 800b670:	e7d8      	b.n	800b624 <_dtoa_r+0x25c>
 800b672:	bf00      	nop
 800b674:	f3af 8000 	nop.w
 800b678:	636f4361 	.word	0x636f4361
 800b67c:	3fd287a7 	.word	0x3fd287a7
 800b680:	8b60c8b3 	.word	0x8b60c8b3
 800b684:	3fc68a28 	.word	0x3fc68a28
 800b688:	509f79fb 	.word	0x509f79fb
 800b68c:	3fd34413 	.word	0x3fd34413
 800b690:	0800de2a 	.word	0x0800de2a
 800b694:	0800deec 	.word	0x0800deec
 800b698:	7ff00000 	.word	0x7ff00000
 800b69c:	0800de02 	.word	0x0800de02
 800b6a0:	3ff80000 	.word	0x3ff80000
 800b6a4:	0800e048 	.word	0x0800e048
 800b6a8:	0800df44 	.word	0x0800df44
 800b6ac:	0800dee8 	.word	0x0800dee8
 800b6b0:	0800de01 	.word	0x0800de01
 800b6b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b6b8:	6018      	str	r0, [r3, #0]
 800b6ba:	9b07      	ldr	r3, [sp, #28]
 800b6bc:	2b0e      	cmp	r3, #14
 800b6be:	f200 80a4 	bhi.w	800b80a <_dtoa_r+0x442>
 800b6c2:	2c00      	cmp	r4, #0
 800b6c4:	f000 80a1 	beq.w	800b80a <_dtoa_r+0x442>
 800b6c8:	2f00      	cmp	r7, #0
 800b6ca:	dd33      	ble.n	800b734 <_dtoa_r+0x36c>
 800b6cc:	4bad      	ldr	r3, [pc, #692]	@ (800b984 <_dtoa_r+0x5bc>)
 800b6ce:	f007 020f 	and.w	r2, r7, #15
 800b6d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6d6:	ed93 7b00 	vldr	d7, [r3]
 800b6da:	05f8      	lsls	r0, r7, #23
 800b6dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b6e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b6e4:	d516      	bpl.n	800b714 <_dtoa_r+0x34c>
 800b6e6:	4ba8      	ldr	r3, [pc, #672]	@ (800b988 <_dtoa_r+0x5c0>)
 800b6e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b6f0:	f7f5 f8e4 	bl	80008bc <__aeabi_ddiv>
 800b6f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6f8:	f004 040f 	and.w	r4, r4, #15
 800b6fc:	2603      	movs	r6, #3
 800b6fe:	4da2      	ldr	r5, [pc, #648]	@ (800b988 <_dtoa_r+0x5c0>)
 800b700:	b954      	cbnz	r4, 800b718 <_dtoa_r+0x350>
 800b702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b70a:	f7f5 f8d7 	bl	80008bc <__aeabi_ddiv>
 800b70e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b712:	e028      	b.n	800b766 <_dtoa_r+0x39e>
 800b714:	2602      	movs	r6, #2
 800b716:	e7f2      	b.n	800b6fe <_dtoa_r+0x336>
 800b718:	07e1      	lsls	r1, r4, #31
 800b71a:	d508      	bpl.n	800b72e <_dtoa_r+0x366>
 800b71c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b720:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b724:	f7f4 ffa0 	bl	8000668 <__aeabi_dmul>
 800b728:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b72c:	3601      	adds	r6, #1
 800b72e:	1064      	asrs	r4, r4, #1
 800b730:	3508      	adds	r5, #8
 800b732:	e7e5      	b.n	800b700 <_dtoa_r+0x338>
 800b734:	f000 80d2 	beq.w	800b8dc <_dtoa_r+0x514>
 800b738:	427c      	negs	r4, r7
 800b73a:	4b92      	ldr	r3, [pc, #584]	@ (800b984 <_dtoa_r+0x5bc>)
 800b73c:	4d92      	ldr	r5, [pc, #584]	@ (800b988 <_dtoa_r+0x5c0>)
 800b73e:	f004 020f 	and.w	r2, r4, #15
 800b742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b74e:	f7f4 ff8b 	bl	8000668 <__aeabi_dmul>
 800b752:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b756:	1124      	asrs	r4, r4, #4
 800b758:	2300      	movs	r3, #0
 800b75a:	2602      	movs	r6, #2
 800b75c:	2c00      	cmp	r4, #0
 800b75e:	f040 80b2 	bne.w	800b8c6 <_dtoa_r+0x4fe>
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1d3      	bne.n	800b70e <_dtoa_r+0x346>
 800b766:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b768:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f000 80b7 	beq.w	800b8e0 <_dtoa_r+0x518>
 800b772:	4b86      	ldr	r3, [pc, #536]	@ (800b98c <_dtoa_r+0x5c4>)
 800b774:	2200      	movs	r2, #0
 800b776:	4620      	mov	r0, r4
 800b778:	4629      	mov	r1, r5
 800b77a:	f7f5 f9e7 	bl	8000b4c <__aeabi_dcmplt>
 800b77e:	2800      	cmp	r0, #0
 800b780:	f000 80ae 	beq.w	800b8e0 <_dtoa_r+0x518>
 800b784:	9b07      	ldr	r3, [sp, #28]
 800b786:	2b00      	cmp	r3, #0
 800b788:	f000 80aa 	beq.w	800b8e0 <_dtoa_r+0x518>
 800b78c:	9b00      	ldr	r3, [sp, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	dd37      	ble.n	800b802 <_dtoa_r+0x43a>
 800b792:	1e7b      	subs	r3, r7, #1
 800b794:	9304      	str	r3, [sp, #16]
 800b796:	4620      	mov	r0, r4
 800b798:	4b7d      	ldr	r3, [pc, #500]	@ (800b990 <_dtoa_r+0x5c8>)
 800b79a:	2200      	movs	r2, #0
 800b79c:	4629      	mov	r1, r5
 800b79e:	f7f4 ff63 	bl	8000668 <__aeabi_dmul>
 800b7a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7a6:	9c00      	ldr	r4, [sp, #0]
 800b7a8:	3601      	adds	r6, #1
 800b7aa:	4630      	mov	r0, r6
 800b7ac:	f7f4 fef2 	bl	8000594 <__aeabi_i2d>
 800b7b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b7b4:	f7f4 ff58 	bl	8000668 <__aeabi_dmul>
 800b7b8:	4b76      	ldr	r3, [pc, #472]	@ (800b994 <_dtoa_r+0x5cc>)
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f7f4 fd9e 	bl	80002fc <__adddf3>
 800b7c0:	4605      	mov	r5, r0
 800b7c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b7c6:	2c00      	cmp	r4, #0
 800b7c8:	f040 808d 	bne.w	800b8e6 <_dtoa_r+0x51e>
 800b7cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7d0:	4b71      	ldr	r3, [pc, #452]	@ (800b998 <_dtoa_r+0x5d0>)
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f7f4 fd90 	bl	80002f8 <__aeabi_dsub>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	460b      	mov	r3, r1
 800b7dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7e0:	462a      	mov	r2, r5
 800b7e2:	4633      	mov	r3, r6
 800b7e4:	f7f5 f9d0 	bl	8000b88 <__aeabi_dcmpgt>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	f040 828b 	bne.w	800bd04 <_dtoa_r+0x93c>
 800b7ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7f2:	462a      	mov	r2, r5
 800b7f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b7f8:	f7f5 f9a8 	bl	8000b4c <__aeabi_dcmplt>
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	f040 8128 	bne.w	800ba52 <_dtoa_r+0x68a>
 800b802:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b806:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b80a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	f2c0 815a 	blt.w	800bac6 <_dtoa_r+0x6fe>
 800b812:	2f0e      	cmp	r7, #14
 800b814:	f300 8157 	bgt.w	800bac6 <_dtoa_r+0x6fe>
 800b818:	4b5a      	ldr	r3, [pc, #360]	@ (800b984 <_dtoa_r+0x5bc>)
 800b81a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b81e:	ed93 7b00 	vldr	d7, [r3]
 800b822:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b824:	2b00      	cmp	r3, #0
 800b826:	ed8d 7b00 	vstr	d7, [sp]
 800b82a:	da03      	bge.n	800b834 <_dtoa_r+0x46c>
 800b82c:	9b07      	ldr	r3, [sp, #28]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	f340 8101 	ble.w	800ba36 <_dtoa_r+0x66e>
 800b834:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b838:	4656      	mov	r6, sl
 800b83a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b83e:	4620      	mov	r0, r4
 800b840:	4629      	mov	r1, r5
 800b842:	f7f5 f83b 	bl	80008bc <__aeabi_ddiv>
 800b846:	f7f5 f9bf 	bl	8000bc8 <__aeabi_d2iz>
 800b84a:	4680      	mov	r8, r0
 800b84c:	f7f4 fea2 	bl	8000594 <__aeabi_i2d>
 800b850:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b854:	f7f4 ff08 	bl	8000668 <__aeabi_dmul>
 800b858:	4602      	mov	r2, r0
 800b85a:	460b      	mov	r3, r1
 800b85c:	4620      	mov	r0, r4
 800b85e:	4629      	mov	r1, r5
 800b860:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b864:	f7f4 fd48 	bl	80002f8 <__aeabi_dsub>
 800b868:	f806 4b01 	strb.w	r4, [r6], #1
 800b86c:	9d07      	ldr	r5, [sp, #28]
 800b86e:	eba6 040a 	sub.w	r4, r6, sl
 800b872:	42a5      	cmp	r5, r4
 800b874:	4602      	mov	r2, r0
 800b876:	460b      	mov	r3, r1
 800b878:	f040 8117 	bne.w	800baaa <_dtoa_r+0x6e2>
 800b87c:	f7f4 fd3e 	bl	80002fc <__adddf3>
 800b880:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b884:	4604      	mov	r4, r0
 800b886:	460d      	mov	r5, r1
 800b888:	f7f5 f97e 	bl	8000b88 <__aeabi_dcmpgt>
 800b88c:	2800      	cmp	r0, #0
 800b88e:	f040 80f9 	bne.w	800ba84 <_dtoa_r+0x6bc>
 800b892:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b896:	4620      	mov	r0, r4
 800b898:	4629      	mov	r1, r5
 800b89a:	f7f5 f94d 	bl	8000b38 <__aeabi_dcmpeq>
 800b89e:	b118      	cbz	r0, 800b8a8 <_dtoa_r+0x4e0>
 800b8a0:	f018 0f01 	tst.w	r8, #1
 800b8a4:	f040 80ee 	bne.w	800ba84 <_dtoa_r+0x6bc>
 800b8a8:	4649      	mov	r1, r9
 800b8aa:	4658      	mov	r0, fp
 800b8ac:	f000 ffdc 	bl	800c868 <_Bfree>
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	7033      	strb	r3, [r6, #0]
 800b8b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b8b6:	3701      	adds	r7, #1
 800b8b8:	601f      	str	r7, [r3, #0]
 800b8ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f000 831d 	beq.w	800befc <_dtoa_r+0xb34>
 800b8c2:	601e      	str	r6, [r3, #0]
 800b8c4:	e31a      	b.n	800befc <_dtoa_r+0xb34>
 800b8c6:	07e2      	lsls	r2, r4, #31
 800b8c8:	d505      	bpl.n	800b8d6 <_dtoa_r+0x50e>
 800b8ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b8ce:	f7f4 fecb 	bl	8000668 <__aeabi_dmul>
 800b8d2:	3601      	adds	r6, #1
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	1064      	asrs	r4, r4, #1
 800b8d8:	3508      	adds	r5, #8
 800b8da:	e73f      	b.n	800b75c <_dtoa_r+0x394>
 800b8dc:	2602      	movs	r6, #2
 800b8de:	e742      	b.n	800b766 <_dtoa_r+0x39e>
 800b8e0:	9c07      	ldr	r4, [sp, #28]
 800b8e2:	9704      	str	r7, [sp, #16]
 800b8e4:	e761      	b.n	800b7aa <_dtoa_r+0x3e2>
 800b8e6:	4b27      	ldr	r3, [pc, #156]	@ (800b984 <_dtoa_r+0x5bc>)
 800b8e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b8ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b8ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b8f2:	4454      	add	r4, sl
 800b8f4:	2900      	cmp	r1, #0
 800b8f6:	d053      	beq.n	800b9a0 <_dtoa_r+0x5d8>
 800b8f8:	4928      	ldr	r1, [pc, #160]	@ (800b99c <_dtoa_r+0x5d4>)
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	f7f4 ffde 	bl	80008bc <__aeabi_ddiv>
 800b900:	4633      	mov	r3, r6
 800b902:	462a      	mov	r2, r5
 800b904:	f7f4 fcf8 	bl	80002f8 <__aeabi_dsub>
 800b908:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b90c:	4656      	mov	r6, sl
 800b90e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b912:	f7f5 f959 	bl	8000bc8 <__aeabi_d2iz>
 800b916:	4605      	mov	r5, r0
 800b918:	f7f4 fe3c 	bl	8000594 <__aeabi_i2d>
 800b91c:	4602      	mov	r2, r0
 800b91e:	460b      	mov	r3, r1
 800b920:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b924:	f7f4 fce8 	bl	80002f8 <__aeabi_dsub>
 800b928:	3530      	adds	r5, #48	@ 0x30
 800b92a:	4602      	mov	r2, r0
 800b92c:	460b      	mov	r3, r1
 800b92e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b932:	f806 5b01 	strb.w	r5, [r6], #1
 800b936:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b93a:	f7f5 f907 	bl	8000b4c <__aeabi_dcmplt>
 800b93e:	2800      	cmp	r0, #0
 800b940:	d171      	bne.n	800ba26 <_dtoa_r+0x65e>
 800b942:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b946:	4911      	ldr	r1, [pc, #68]	@ (800b98c <_dtoa_r+0x5c4>)
 800b948:	2000      	movs	r0, #0
 800b94a:	f7f4 fcd5 	bl	80002f8 <__aeabi_dsub>
 800b94e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b952:	f7f5 f8fb 	bl	8000b4c <__aeabi_dcmplt>
 800b956:	2800      	cmp	r0, #0
 800b958:	f040 8095 	bne.w	800ba86 <_dtoa_r+0x6be>
 800b95c:	42a6      	cmp	r6, r4
 800b95e:	f43f af50 	beq.w	800b802 <_dtoa_r+0x43a>
 800b962:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b966:	4b0a      	ldr	r3, [pc, #40]	@ (800b990 <_dtoa_r+0x5c8>)
 800b968:	2200      	movs	r2, #0
 800b96a:	f7f4 fe7d 	bl	8000668 <__aeabi_dmul>
 800b96e:	4b08      	ldr	r3, [pc, #32]	@ (800b990 <_dtoa_r+0x5c8>)
 800b970:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b974:	2200      	movs	r2, #0
 800b976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b97a:	f7f4 fe75 	bl	8000668 <__aeabi_dmul>
 800b97e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b982:	e7c4      	b.n	800b90e <_dtoa_r+0x546>
 800b984:	0800e048 	.word	0x0800e048
 800b988:	0800e020 	.word	0x0800e020
 800b98c:	3ff00000 	.word	0x3ff00000
 800b990:	40240000 	.word	0x40240000
 800b994:	401c0000 	.word	0x401c0000
 800b998:	40140000 	.word	0x40140000
 800b99c:	3fe00000 	.word	0x3fe00000
 800b9a0:	4631      	mov	r1, r6
 800b9a2:	4628      	mov	r0, r5
 800b9a4:	f7f4 fe60 	bl	8000668 <__aeabi_dmul>
 800b9a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b9ac:	9415      	str	r4, [sp, #84]	@ 0x54
 800b9ae:	4656      	mov	r6, sl
 800b9b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9b4:	f7f5 f908 	bl	8000bc8 <__aeabi_d2iz>
 800b9b8:	4605      	mov	r5, r0
 800b9ba:	f7f4 fdeb 	bl	8000594 <__aeabi_i2d>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9c6:	f7f4 fc97 	bl	80002f8 <__aeabi_dsub>
 800b9ca:	3530      	adds	r5, #48	@ 0x30
 800b9cc:	f806 5b01 	strb.w	r5, [r6], #1
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	42a6      	cmp	r6, r4
 800b9d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b9da:	f04f 0200 	mov.w	r2, #0
 800b9de:	d124      	bne.n	800ba2a <_dtoa_r+0x662>
 800b9e0:	4bac      	ldr	r3, [pc, #688]	@ (800bc94 <_dtoa_r+0x8cc>)
 800b9e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b9e6:	f7f4 fc89 	bl	80002fc <__adddf3>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9f2:	f7f5 f8c9 	bl	8000b88 <__aeabi_dcmpgt>
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	d145      	bne.n	800ba86 <_dtoa_r+0x6be>
 800b9fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b9fe:	49a5      	ldr	r1, [pc, #660]	@ (800bc94 <_dtoa_r+0x8cc>)
 800ba00:	2000      	movs	r0, #0
 800ba02:	f7f4 fc79 	bl	80002f8 <__aeabi_dsub>
 800ba06:	4602      	mov	r2, r0
 800ba08:	460b      	mov	r3, r1
 800ba0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba0e:	f7f5 f89d 	bl	8000b4c <__aeabi_dcmplt>
 800ba12:	2800      	cmp	r0, #0
 800ba14:	f43f aef5 	beq.w	800b802 <_dtoa_r+0x43a>
 800ba18:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ba1a:	1e73      	subs	r3, r6, #1
 800ba1c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ba1e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ba22:	2b30      	cmp	r3, #48	@ 0x30
 800ba24:	d0f8      	beq.n	800ba18 <_dtoa_r+0x650>
 800ba26:	9f04      	ldr	r7, [sp, #16]
 800ba28:	e73e      	b.n	800b8a8 <_dtoa_r+0x4e0>
 800ba2a:	4b9b      	ldr	r3, [pc, #620]	@ (800bc98 <_dtoa_r+0x8d0>)
 800ba2c:	f7f4 fe1c 	bl	8000668 <__aeabi_dmul>
 800ba30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba34:	e7bc      	b.n	800b9b0 <_dtoa_r+0x5e8>
 800ba36:	d10c      	bne.n	800ba52 <_dtoa_r+0x68a>
 800ba38:	4b98      	ldr	r3, [pc, #608]	@ (800bc9c <_dtoa_r+0x8d4>)
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba40:	f7f4 fe12 	bl	8000668 <__aeabi_dmul>
 800ba44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba48:	f7f5 f894 	bl	8000b74 <__aeabi_dcmpge>
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	f000 8157 	beq.w	800bd00 <_dtoa_r+0x938>
 800ba52:	2400      	movs	r4, #0
 800ba54:	4625      	mov	r5, r4
 800ba56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba58:	43db      	mvns	r3, r3
 800ba5a:	9304      	str	r3, [sp, #16]
 800ba5c:	4656      	mov	r6, sl
 800ba5e:	2700      	movs	r7, #0
 800ba60:	4621      	mov	r1, r4
 800ba62:	4658      	mov	r0, fp
 800ba64:	f000 ff00 	bl	800c868 <_Bfree>
 800ba68:	2d00      	cmp	r5, #0
 800ba6a:	d0dc      	beq.n	800ba26 <_dtoa_r+0x65e>
 800ba6c:	b12f      	cbz	r7, 800ba7a <_dtoa_r+0x6b2>
 800ba6e:	42af      	cmp	r7, r5
 800ba70:	d003      	beq.n	800ba7a <_dtoa_r+0x6b2>
 800ba72:	4639      	mov	r1, r7
 800ba74:	4658      	mov	r0, fp
 800ba76:	f000 fef7 	bl	800c868 <_Bfree>
 800ba7a:	4629      	mov	r1, r5
 800ba7c:	4658      	mov	r0, fp
 800ba7e:	f000 fef3 	bl	800c868 <_Bfree>
 800ba82:	e7d0      	b.n	800ba26 <_dtoa_r+0x65e>
 800ba84:	9704      	str	r7, [sp, #16]
 800ba86:	4633      	mov	r3, r6
 800ba88:	461e      	mov	r6, r3
 800ba8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba8e:	2a39      	cmp	r2, #57	@ 0x39
 800ba90:	d107      	bne.n	800baa2 <_dtoa_r+0x6da>
 800ba92:	459a      	cmp	sl, r3
 800ba94:	d1f8      	bne.n	800ba88 <_dtoa_r+0x6c0>
 800ba96:	9a04      	ldr	r2, [sp, #16]
 800ba98:	3201      	adds	r2, #1
 800ba9a:	9204      	str	r2, [sp, #16]
 800ba9c:	2230      	movs	r2, #48	@ 0x30
 800ba9e:	f88a 2000 	strb.w	r2, [sl]
 800baa2:	781a      	ldrb	r2, [r3, #0]
 800baa4:	3201      	adds	r2, #1
 800baa6:	701a      	strb	r2, [r3, #0]
 800baa8:	e7bd      	b.n	800ba26 <_dtoa_r+0x65e>
 800baaa:	4b7b      	ldr	r3, [pc, #492]	@ (800bc98 <_dtoa_r+0x8d0>)
 800baac:	2200      	movs	r2, #0
 800baae:	f7f4 fddb 	bl	8000668 <__aeabi_dmul>
 800bab2:	2200      	movs	r2, #0
 800bab4:	2300      	movs	r3, #0
 800bab6:	4604      	mov	r4, r0
 800bab8:	460d      	mov	r5, r1
 800baba:	f7f5 f83d 	bl	8000b38 <__aeabi_dcmpeq>
 800babe:	2800      	cmp	r0, #0
 800bac0:	f43f aebb 	beq.w	800b83a <_dtoa_r+0x472>
 800bac4:	e6f0      	b.n	800b8a8 <_dtoa_r+0x4e0>
 800bac6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bac8:	2a00      	cmp	r2, #0
 800baca:	f000 80db 	beq.w	800bc84 <_dtoa_r+0x8bc>
 800bace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bad0:	2a01      	cmp	r2, #1
 800bad2:	f300 80bf 	bgt.w	800bc54 <_dtoa_r+0x88c>
 800bad6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bad8:	2a00      	cmp	r2, #0
 800bada:	f000 80b7 	beq.w	800bc4c <_dtoa_r+0x884>
 800bade:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bae2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bae4:	4646      	mov	r6, r8
 800bae6:	9a08      	ldr	r2, [sp, #32]
 800bae8:	2101      	movs	r1, #1
 800baea:	441a      	add	r2, r3
 800baec:	4658      	mov	r0, fp
 800baee:	4498      	add	r8, r3
 800baf0:	9208      	str	r2, [sp, #32]
 800baf2:	f000 ffb7 	bl	800ca64 <__i2b>
 800baf6:	4605      	mov	r5, r0
 800baf8:	b15e      	cbz	r6, 800bb12 <_dtoa_r+0x74a>
 800bafa:	9b08      	ldr	r3, [sp, #32]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	dd08      	ble.n	800bb12 <_dtoa_r+0x74a>
 800bb00:	42b3      	cmp	r3, r6
 800bb02:	9a08      	ldr	r2, [sp, #32]
 800bb04:	bfa8      	it	ge
 800bb06:	4633      	movge	r3, r6
 800bb08:	eba8 0803 	sub.w	r8, r8, r3
 800bb0c:	1af6      	subs	r6, r6, r3
 800bb0e:	1ad3      	subs	r3, r2, r3
 800bb10:	9308      	str	r3, [sp, #32]
 800bb12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb14:	b1f3      	cbz	r3, 800bb54 <_dtoa_r+0x78c>
 800bb16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	f000 80b7 	beq.w	800bc8c <_dtoa_r+0x8c4>
 800bb1e:	b18c      	cbz	r4, 800bb44 <_dtoa_r+0x77c>
 800bb20:	4629      	mov	r1, r5
 800bb22:	4622      	mov	r2, r4
 800bb24:	4658      	mov	r0, fp
 800bb26:	f001 f85d 	bl	800cbe4 <__pow5mult>
 800bb2a:	464a      	mov	r2, r9
 800bb2c:	4601      	mov	r1, r0
 800bb2e:	4605      	mov	r5, r0
 800bb30:	4658      	mov	r0, fp
 800bb32:	f000 ffad 	bl	800ca90 <__multiply>
 800bb36:	4649      	mov	r1, r9
 800bb38:	9004      	str	r0, [sp, #16]
 800bb3a:	4658      	mov	r0, fp
 800bb3c:	f000 fe94 	bl	800c868 <_Bfree>
 800bb40:	9b04      	ldr	r3, [sp, #16]
 800bb42:	4699      	mov	r9, r3
 800bb44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb46:	1b1a      	subs	r2, r3, r4
 800bb48:	d004      	beq.n	800bb54 <_dtoa_r+0x78c>
 800bb4a:	4649      	mov	r1, r9
 800bb4c:	4658      	mov	r0, fp
 800bb4e:	f001 f849 	bl	800cbe4 <__pow5mult>
 800bb52:	4681      	mov	r9, r0
 800bb54:	2101      	movs	r1, #1
 800bb56:	4658      	mov	r0, fp
 800bb58:	f000 ff84 	bl	800ca64 <__i2b>
 800bb5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb5e:	4604      	mov	r4, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f000 81cf 	beq.w	800bf04 <_dtoa_r+0xb3c>
 800bb66:	461a      	mov	r2, r3
 800bb68:	4601      	mov	r1, r0
 800bb6a:	4658      	mov	r0, fp
 800bb6c:	f001 f83a 	bl	800cbe4 <__pow5mult>
 800bb70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	4604      	mov	r4, r0
 800bb76:	f300 8095 	bgt.w	800bca4 <_dtoa_r+0x8dc>
 800bb7a:	9b02      	ldr	r3, [sp, #8]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	f040 8087 	bne.w	800bc90 <_dtoa_r+0x8c8>
 800bb82:	9b03      	ldr	r3, [sp, #12]
 800bb84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	f040 8089 	bne.w	800bca0 <_dtoa_r+0x8d8>
 800bb8e:	9b03      	ldr	r3, [sp, #12]
 800bb90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb94:	0d1b      	lsrs	r3, r3, #20
 800bb96:	051b      	lsls	r3, r3, #20
 800bb98:	b12b      	cbz	r3, 800bba6 <_dtoa_r+0x7de>
 800bb9a:	9b08      	ldr	r3, [sp, #32]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	9308      	str	r3, [sp, #32]
 800bba0:	f108 0801 	add.w	r8, r8, #1
 800bba4:	2301      	movs	r3, #1
 800bba6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bba8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	f000 81b0 	beq.w	800bf10 <_dtoa_r+0xb48>
 800bbb0:	6923      	ldr	r3, [r4, #16]
 800bbb2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bbb6:	6918      	ldr	r0, [r3, #16]
 800bbb8:	f000 ff08 	bl	800c9cc <__hi0bits>
 800bbbc:	f1c0 0020 	rsb	r0, r0, #32
 800bbc0:	9b08      	ldr	r3, [sp, #32]
 800bbc2:	4418      	add	r0, r3
 800bbc4:	f010 001f 	ands.w	r0, r0, #31
 800bbc8:	d077      	beq.n	800bcba <_dtoa_r+0x8f2>
 800bbca:	f1c0 0320 	rsb	r3, r0, #32
 800bbce:	2b04      	cmp	r3, #4
 800bbd0:	dd6b      	ble.n	800bcaa <_dtoa_r+0x8e2>
 800bbd2:	9b08      	ldr	r3, [sp, #32]
 800bbd4:	f1c0 001c 	rsb	r0, r0, #28
 800bbd8:	4403      	add	r3, r0
 800bbda:	4480      	add	r8, r0
 800bbdc:	4406      	add	r6, r0
 800bbde:	9308      	str	r3, [sp, #32]
 800bbe0:	f1b8 0f00 	cmp.w	r8, #0
 800bbe4:	dd05      	ble.n	800bbf2 <_dtoa_r+0x82a>
 800bbe6:	4649      	mov	r1, r9
 800bbe8:	4642      	mov	r2, r8
 800bbea:	4658      	mov	r0, fp
 800bbec:	f001 f854 	bl	800cc98 <__lshift>
 800bbf0:	4681      	mov	r9, r0
 800bbf2:	9b08      	ldr	r3, [sp, #32]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	dd05      	ble.n	800bc04 <_dtoa_r+0x83c>
 800bbf8:	4621      	mov	r1, r4
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	4658      	mov	r0, fp
 800bbfe:	f001 f84b 	bl	800cc98 <__lshift>
 800bc02:	4604      	mov	r4, r0
 800bc04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d059      	beq.n	800bcbe <_dtoa_r+0x8f6>
 800bc0a:	4621      	mov	r1, r4
 800bc0c:	4648      	mov	r0, r9
 800bc0e:	f001 f8af 	bl	800cd70 <__mcmp>
 800bc12:	2800      	cmp	r0, #0
 800bc14:	da53      	bge.n	800bcbe <_dtoa_r+0x8f6>
 800bc16:	1e7b      	subs	r3, r7, #1
 800bc18:	9304      	str	r3, [sp, #16]
 800bc1a:	4649      	mov	r1, r9
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	220a      	movs	r2, #10
 800bc20:	4658      	mov	r0, fp
 800bc22:	f000 fe43 	bl	800c8ac <__multadd>
 800bc26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc28:	4681      	mov	r9, r0
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	f000 8172 	beq.w	800bf14 <_dtoa_r+0xb4c>
 800bc30:	2300      	movs	r3, #0
 800bc32:	4629      	mov	r1, r5
 800bc34:	220a      	movs	r2, #10
 800bc36:	4658      	mov	r0, fp
 800bc38:	f000 fe38 	bl	800c8ac <__multadd>
 800bc3c:	9b00      	ldr	r3, [sp, #0]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	4605      	mov	r5, r0
 800bc42:	dc67      	bgt.n	800bd14 <_dtoa_r+0x94c>
 800bc44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc46:	2b02      	cmp	r3, #2
 800bc48:	dc41      	bgt.n	800bcce <_dtoa_r+0x906>
 800bc4a:	e063      	b.n	800bd14 <_dtoa_r+0x94c>
 800bc4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bc4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bc52:	e746      	b.n	800bae2 <_dtoa_r+0x71a>
 800bc54:	9b07      	ldr	r3, [sp, #28]
 800bc56:	1e5c      	subs	r4, r3, #1
 800bc58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc5a:	42a3      	cmp	r3, r4
 800bc5c:	bfbf      	itttt	lt
 800bc5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bc60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bc62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bc64:	1ae3      	sublt	r3, r4, r3
 800bc66:	bfb4      	ite	lt
 800bc68:	18d2      	addlt	r2, r2, r3
 800bc6a:	1b1c      	subge	r4, r3, r4
 800bc6c:	9b07      	ldr	r3, [sp, #28]
 800bc6e:	bfbc      	itt	lt
 800bc70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bc72:	2400      	movlt	r4, #0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	bfb5      	itete	lt
 800bc78:	eba8 0603 	sublt.w	r6, r8, r3
 800bc7c:	9b07      	ldrge	r3, [sp, #28]
 800bc7e:	2300      	movlt	r3, #0
 800bc80:	4646      	movge	r6, r8
 800bc82:	e730      	b.n	800bae6 <_dtoa_r+0x71e>
 800bc84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bc86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bc88:	4646      	mov	r6, r8
 800bc8a:	e735      	b.n	800baf8 <_dtoa_r+0x730>
 800bc8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc8e:	e75c      	b.n	800bb4a <_dtoa_r+0x782>
 800bc90:	2300      	movs	r3, #0
 800bc92:	e788      	b.n	800bba6 <_dtoa_r+0x7de>
 800bc94:	3fe00000 	.word	0x3fe00000
 800bc98:	40240000 	.word	0x40240000
 800bc9c:	40140000 	.word	0x40140000
 800bca0:	9b02      	ldr	r3, [sp, #8]
 800bca2:	e780      	b.n	800bba6 <_dtoa_r+0x7de>
 800bca4:	2300      	movs	r3, #0
 800bca6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bca8:	e782      	b.n	800bbb0 <_dtoa_r+0x7e8>
 800bcaa:	d099      	beq.n	800bbe0 <_dtoa_r+0x818>
 800bcac:	9a08      	ldr	r2, [sp, #32]
 800bcae:	331c      	adds	r3, #28
 800bcb0:	441a      	add	r2, r3
 800bcb2:	4498      	add	r8, r3
 800bcb4:	441e      	add	r6, r3
 800bcb6:	9208      	str	r2, [sp, #32]
 800bcb8:	e792      	b.n	800bbe0 <_dtoa_r+0x818>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	e7f6      	b.n	800bcac <_dtoa_r+0x8e4>
 800bcbe:	9b07      	ldr	r3, [sp, #28]
 800bcc0:	9704      	str	r7, [sp, #16]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	dc20      	bgt.n	800bd08 <_dtoa_r+0x940>
 800bcc6:	9300      	str	r3, [sp, #0]
 800bcc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcca:	2b02      	cmp	r3, #2
 800bccc:	dd1e      	ble.n	800bd0c <_dtoa_r+0x944>
 800bcce:	9b00      	ldr	r3, [sp, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	f47f aec0 	bne.w	800ba56 <_dtoa_r+0x68e>
 800bcd6:	4621      	mov	r1, r4
 800bcd8:	2205      	movs	r2, #5
 800bcda:	4658      	mov	r0, fp
 800bcdc:	f000 fde6 	bl	800c8ac <__multadd>
 800bce0:	4601      	mov	r1, r0
 800bce2:	4604      	mov	r4, r0
 800bce4:	4648      	mov	r0, r9
 800bce6:	f001 f843 	bl	800cd70 <__mcmp>
 800bcea:	2800      	cmp	r0, #0
 800bcec:	f77f aeb3 	ble.w	800ba56 <_dtoa_r+0x68e>
 800bcf0:	4656      	mov	r6, sl
 800bcf2:	2331      	movs	r3, #49	@ 0x31
 800bcf4:	f806 3b01 	strb.w	r3, [r6], #1
 800bcf8:	9b04      	ldr	r3, [sp, #16]
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	9304      	str	r3, [sp, #16]
 800bcfe:	e6ae      	b.n	800ba5e <_dtoa_r+0x696>
 800bd00:	9c07      	ldr	r4, [sp, #28]
 800bd02:	9704      	str	r7, [sp, #16]
 800bd04:	4625      	mov	r5, r4
 800bd06:	e7f3      	b.n	800bcf0 <_dtoa_r+0x928>
 800bd08:	9b07      	ldr	r3, [sp, #28]
 800bd0a:	9300      	str	r3, [sp, #0]
 800bd0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	f000 8104 	beq.w	800bf1c <_dtoa_r+0xb54>
 800bd14:	2e00      	cmp	r6, #0
 800bd16:	dd05      	ble.n	800bd24 <_dtoa_r+0x95c>
 800bd18:	4629      	mov	r1, r5
 800bd1a:	4632      	mov	r2, r6
 800bd1c:	4658      	mov	r0, fp
 800bd1e:	f000 ffbb 	bl	800cc98 <__lshift>
 800bd22:	4605      	mov	r5, r0
 800bd24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d05a      	beq.n	800bde0 <_dtoa_r+0xa18>
 800bd2a:	6869      	ldr	r1, [r5, #4]
 800bd2c:	4658      	mov	r0, fp
 800bd2e:	f000 fd5b 	bl	800c7e8 <_Balloc>
 800bd32:	4606      	mov	r6, r0
 800bd34:	b928      	cbnz	r0, 800bd42 <_dtoa_r+0x97a>
 800bd36:	4b84      	ldr	r3, [pc, #528]	@ (800bf48 <_dtoa_r+0xb80>)
 800bd38:	4602      	mov	r2, r0
 800bd3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bd3e:	f7ff bb5a 	b.w	800b3f6 <_dtoa_r+0x2e>
 800bd42:	692a      	ldr	r2, [r5, #16]
 800bd44:	3202      	adds	r2, #2
 800bd46:	0092      	lsls	r2, r2, #2
 800bd48:	f105 010c 	add.w	r1, r5, #12
 800bd4c:	300c      	adds	r0, #12
 800bd4e:	f7ff fa78 	bl	800b242 <memcpy>
 800bd52:	2201      	movs	r2, #1
 800bd54:	4631      	mov	r1, r6
 800bd56:	4658      	mov	r0, fp
 800bd58:	f000 ff9e 	bl	800cc98 <__lshift>
 800bd5c:	f10a 0301 	add.w	r3, sl, #1
 800bd60:	9307      	str	r3, [sp, #28]
 800bd62:	9b00      	ldr	r3, [sp, #0]
 800bd64:	4453      	add	r3, sl
 800bd66:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd68:	9b02      	ldr	r3, [sp, #8]
 800bd6a:	f003 0301 	and.w	r3, r3, #1
 800bd6e:	462f      	mov	r7, r5
 800bd70:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd72:	4605      	mov	r5, r0
 800bd74:	9b07      	ldr	r3, [sp, #28]
 800bd76:	4621      	mov	r1, r4
 800bd78:	3b01      	subs	r3, #1
 800bd7a:	4648      	mov	r0, r9
 800bd7c:	9300      	str	r3, [sp, #0]
 800bd7e:	f7ff fa9b 	bl	800b2b8 <quorem>
 800bd82:	4639      	mov	r1, r7
 800bd84:	9002      	str	r0, [sp, #8]
 800bd86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bd8a:	4648      	mov	r0, r9
 800bd8c:	f000 fff0 	bl	800cd70 <__mcmp>
 800bd90:	462a      	mov	r2, r5
 800bd92:	9008      	str	r0, [sp, #32]
 800bd94:	4621      	mov	r1, r4
 800bd96:	4658      	mov	r0, fp
 800bd98:	f001 f806 	bl	800cda8 <__mdiff>
 800bd9c:	68c2      	ldr	r2, [r0, #12]
 800bd9e:	4606      	mov	r6, r0
 800bda0:	bb02      	cbnz	r2, 800bde4 <_dtoa_r+0xa1c>
 800bda2:	4601      	mov	r1, r0
 800bda4:	4648      	mov	r0, r9
 800bda6:	f000 ffe3 	bl	800cd70 <__mcmp>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	4631      	mov	r1, r6
 800bdae:	4658      	mov	r0, fp
 800bdb0:	920e      	str	r2, [sp, #56]	@ 0x38
 800bdb2:	f000 fd59 	bl	800c868 <_Bfree>
 800bdb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bdba:	9e07      	ldr	r6, [sp, #28]
 800bdbc:	ea43 0102 	orr.w	r1, r3, r2
 800bdc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdc2:	4319      	orrs	r1, r3
 800bdc4:	d110      	bne.n	800bde8 <_dtoa_r+0xa20>
 800bdc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bdca:	d029      	beq.n	800be20 <_dtoa_r+0xa58>
 800bdcc:	9b08      	ldr	r3, [sp, #32]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	dd02      	ble.n	800bdd8 <_dtoa_r+0xa10>
 800bdd2:	9b02      	ldr	r3, [sp, #8]
 800bdd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bdd8:	9b00      	ldr	r3, [sp, #0]
 800bdda:	f883 8000 	strb.w	r8, [r3]
 800bdde:	e63f      	b.n	800ba60 <_dtoa_r+0x698>
 800bde0:	4628      	mov	r0, r5
 800bde2:	e7bb      	b.n	800bd5c <_dtoa_r+0x994>
 800bde4:	2201      	movs	r2, #1
 800bde6:	e7e1      	b.n	800bdac <_dtoa_r+0x9e4>
 800bde8:	9b08      	ldr	r3, [sp, #32]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	db04      	blt.n	800bdf8 <_dtoa_r+0xa30>
 800bdee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bdf0:	430b      	orrs	r3, r1
 800bdf2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bdf4:	430b      	orrs	r3, r1
 800bdf6:	d120      	bne.n	800be3a <_dtoa_r+0xa72>
 800bdf8:	2a00      	cmp	r2, #0
 800bdfa:	dded      	ble.n	800bdd8 <_dtoa_r+0xa10>
 800bdfc:	4649      	mov	r1, r9
 800bdfe:	2201      	movs	r2, #1
 800be00:	4658      	mov	r0, fp
 800be02:	f000 ff49 	bl	800cc98 <__lshift>
 800be06:	4621      	mov	r1, r4
 800be08:	4681      	mov	r9, r0
 800be0a:	f000 ffb1 	bl	800cd70 <__mcmp>
 800be0e:	2800      	cmp	r0, #0
 800be10:	dc03      	bgt.n	800be1a <_dtoa_r+0xa52>
 800be12:	d1e1      	bne.n	800bdd8 <_dtoa_r+0xa10>
 800be14:	f018 0f01 	tst.w	r8, #1
 800be18:	d0de      	beq.n	800bdd8 <_dtoa_r+0xa10>
 800be1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800be1e:	d1d8      	bne.n	800bdd2 <_dtoa_r+0xa0a>
 800be20:	9a00      	ldr	r2, [sp, #0]
 800be22:	2339      	movs	r3, #57	@ 0x39
 800be24:	7013      	strb	r3, [r2, #0]
 800be26:	4633      	mov	r3, r6
 800be28:	461e      	mov	r6, r3
 800be2a:	3b01      	subs	r3, #1
 800be2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800be30:	2a39      	cmp	r2, #57	@ 0x39
 800be32:	d052      	beq.n	800beda <_dtoa_r+0xb12>
 800be34:	3201      	adds	r2, #1
 800be36:	701a      	strb	r2, [r3, #0]
 800be38:	e612      	b.n	800ba60 <_dtoa_r+0x698>
 800be3a:	2a00      	cmp	r2, #0
 800be3c:	dd07      	ble.n	800be4e <_dtoa_r+0xa86>
 800be3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800be42:	d0ed      	beq.n	800be20 <_dtoa_r+0xa58>
 800be44:	9a00      	ldr	r2, [sp, #0]
 800be46:	f108 0301 	add.w	r3, r8, #1
 800be4a:	7013      	strb	r3, [r2, #0]
 800be4c:	e608      	b.n	800ba60 <_dtoa_r+0x698>
 800be4e:	9b07      	ldr	r3, [sp, #28]
 800be50:	9a07      	ldr	r2, [sp, #28]
 800be52:	f803 8c01 	strb.w	r8, [r3, #-1]
 800be56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be58:	4293      	cmp	r3, r2
 800be5a:	d028      	beq.n	800beae <_dtoa_r+0xae6>
 800be5c:	4649      	mov	r1, r9
 800be5e:	2300      	movs	r3, #0
 800be60:	220a      	movs	r2, #10
 800be62:	4658      	mov	r0, fp
 800be64:	f000 fd22 	bl	800c8ac <__multadd>
 800be68:	42af      	cmp	r7, r5
 800be6a:	4681      	mov	r9, r0
 800be6c:	f04f 0300 	mov.w	r3, #0
 800be70:	f04f 020a 	mov.w	r2, #10
 800be74:	4639      	mov	r1, r7
 800be76:	4658      	mov	r0, fp
 800be78:	d107      	bne.n	800be8a <_dtoa_r+0xac2>
 800be7a:	f000 fd17 	bl	800c8ac <__multadd>
 800be7e:	4607      	mov	r7, r0
 800be80:	4605      	mov	r5, r0
 800be82:	9b07      	ldr	r3, [sp, #28]
 800be84:	3301      	adds	r3, #1
 800be86:	9307      	str	r3, [sp, #28]
 800be88:	e774      	b.n	800bd74 <_dtoa_r+0x9ac>
 800be8a:	f000 fd0f 	bl	800c8ac <__multadd>
 800be8e:	4629      	mov	r1, r5
 800be90:	4607      	mov	r7, r0
 800be92:	2300      	movs	r3, #0
 800be94:	220a      	movs	r2, #10
 800be96:	4658      	mov	r0, fp
 800be98:	f000 fd08 	bl	800c8ac <__multadd>
 800be9c:	4605      	mov	r5, r0
 800be9e:	e7f0      	b.n	800be82 <_dtoa_r+0xaba>
 800bea0:	9b00      	ldr	r3, [sp, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	bfcc      	ite	gt
 800bea6:	461e      	movgt	r6, r3
 800bea8:	2601      	movle	r6, #1
 800beaa:	4456      	add	r6, sl
 800beac:	2700      	movs	r7, #0
 800beae:	4649      	mov	r1, r9
 800beb0:	2201      	movs	r2, #1
 800beb2:	4658      	mov	r0, fp
 800beb4:	f000 fef0 	bl	800cc98 <__lshift>
 800beb8:	4621      	mov	r1, r4
 800beba:	4681      	mov	r9, r0
 800bebc:	f000 ff58 	bl	800cd70 <__mcmp>
 800bec0:	2800      	cmp	r0, #0
 800bec2:	dcb0      	bgt.n	800be26 <_dtoa_r+0xa5e>
 800bec4:	d102      	bne.n	800becc <_dtoa_r+0xb04>
 800bec6:	f018 0f01 	tst.w	r8, #1
 800beca:	d1ac      	bne.n	800be26 <_dtoa_r+0xa5e>
 800becc:	4633      	mov	r3, r6
 800bece:	461e      	mov	r6, r3
 800bed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bed4:	2a30      	cmp	r2, #48	@ 0x30
 800bed6:	d0fa      	beq.n	800bece <_dtoa_r+0xb06>
 800bed8:	e5c2      	b.n	800ba60 <_dtoa_r+0x698>
 800beda:	459a      	cmp	sl, r3
 800bedc:	d1a4      	bne.n	800be28 <_dtoa_r+0xa60>
 800bede:	9b04      	ldr	r3, [sp, #16]
 800bee0:	3301      	adds	r3, #1
 800bee2:	9304      	str	r3, [sp, #16]
 800bee4:	2331      	movs	r3, #49	@ 0x31
 800bee6:	f88a 3000 	strb.w	r3, [sl]
 800beea:	e5b9      	b.n	800ba60 <_dtoa_r+0x698>
 800beec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800beee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bf4c <_dtoa_r+0xb84>
 800bef2:	b11b      	cbz	r3, 800befc <_dtoa_r+0xb34>
 800bef4:	f10a 0308 	add.w	r3, sl, #8
 800bef8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800befa:	6013      	str	r3, [r2, #0]
 800befc:	4650      	mov	r0, sl
 800befe:	b019      	add	sp, #100	@ 0x64
 800bf00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf06:	2b01      	cmp	r3, #1
 800bf08:	f77f ae37 	ble.w	800bb7a <_dtoa_r+0x7b2>
 800bf0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf10:	2001      	movs	r0, #1
 800bf12:	e655      	b.n	800bbc0 <_dtoa_r+0x7f8>
 800bf14:	9b00      	ldr	r3, [sp, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f77f aed6 	ble.w	800bcc8 <_dtoa_r+0x900>
 800bf1c:	4656      	mov	r6, sl
 800bf1e:	4621      	mov	r1, r4
 800bf20:	4648      	mov	r0, r9
 800bf22:	f7ff f9c9 	bl	800b2b8 <quorem>
 800bf26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bf2a:	f806 8b01 	strb.w	r8, [r6], #1
 800bf2e:	9b00      	ldr	r3, [sp, #0]
 800bf30:	eba6 020a 	sub.w	r2, r6, sl
 800bf34:	4293      	cmp	r3, r2
 800bf36:	ddb3      	ble.n	800bea0 <_dtoa_r+0xad8>
 800bf38:	4649      	mov	r1, r9
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	220a      	movs	r2, #10
 800bf3e:	4658      	mov	r0, fp
 800bf40:	f000 fcb4 	bl	800c8ac <__multadd>
 800bf44:	4681      	mov	r9, r0
 800bf46:	e7ea      	b.n	800bf1e <_dtoa_r+0xb56>
 800bf48:	0800df44 	.word	0x0800df44
 800bf4c:	0800dedf 	.word	0x0800dedf

0800bf50 <_free_r>:
 800bf50:	b538      	push	{r3, r4, r5, lr}
 800bf52:	4605      	mov	r5, r0
 800bf54:	2900      	cmp	r1, #0
 800bf56:	d041      	beq.n	800bfdc <_free_r+0x8c>
 800bf58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf5c:	1f0c      	subs	r4, r1, #4
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	bfb8      	it	lt
 800bf62:	18e4      	addlt	r4, r4, r3
 800bf64:	f000 fc34 	bl	800c7d0 <__malloc_lock>
 800bf68:	4a1d      	ldr	r2, [pc, #116]	@ (800bfe0 <_free_r+0x90>)
 800bf6a:	6813      	ldr	r3, [r2, #0]
 800bf6c:	b933      	cbnz	r3, 800bf7c <_free_r+0x2c>
 800bf6e:	6063      	str	r3, [r4, #4]
 800bf70:	6014      	str	r4, [r2, #0]
 800bf72:	4628      	mov	r0, r5
 800bf74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf78:	f000 bc30 	b.w	800c7dc <__malloc_unlock>
 800bf7c:	42a3      	cmp	r3, r4
 800bf7e:	d908      	bls.n	800bf92 <_free_r+0x42>
 800bf80:	6820      	ldr	r0, [r4, #0]
 800bf82:	1821      	adds	r1, r4, r0
 800bf84:	428b      	cmp	r3, r1
 800bf86:	bf01      	itttt	eq
 800bf88:	6819      	ldreq	r1, [r3, #0]
 800bf8a:	685b      	ldreq	r3, [r3, #4]
 800bf8c:	1809      	addeq	r1, r1, r0
 800bf8e:	6021      	streq	r1, [r4, #0]
 800bf90:	e7ed      	b.n	800bf6e <_free_r+0x1e>
 800bf92:	461a      	mov	r2, r3
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	b10b      	cbz	r3, 800bf9c <_free_r+0x4c>
 800bf98:	42a3      	cmp	r3, r4
 800bf9a:	d9fa      	bls.n	800bf92 <_free_r+0x42>
 800bf9c:	6811      	ldr	r1, [r2, #0]
 800bf9e:	1850      	adds	r0, r2, r1
 800bfa0:	42a0      	cmp	r0, r4
 800bfa2:	d10b      	bne.n	800bfbc <_free_r+0x6c>
 800bfa4:	6820      	ldr	r0, [r4, #0]
 800bfa6:	4401      	add	r1, r0
 800bfa8:	1850      	adds	r0, r2, r1
 800bfaa:	4283      	cmp	r3, r0
 800bfac:	6011      	str	r1, [r2, #0]
 800bfae:	d1e0      	bne.n	800bf72 <_free_r+0x22>
 800bfb0:	6818      	ldr	r0, [r3, #0]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	6053      	str	r3, [r2, #4]
 800bfb6:	4408      	add	r0, r1
 800bfb8:	6010      	str	r0, [r2, #0]
 800bfba:	e7da      	b.n	800bf72 <_free_r+0x22>
 800bfbc:	d902      	bls.n	800bfc4 <_free_r+0x74>
 800bfbe:	230c      	movs	r3, #12
 800bfc0:	602b      	str	r3, [r5, #0]
 800bfc2:	e7d6      	b.n	800bf72 <_free_r+0x22>
 800bfc4:	6820      	ldr	r0, [r4, #0]
 800bfc6:	1821      	adds	r1, r4, r0
 800bfc8:	428b      	cmp	r3, r1
 800bfca:	bf04      	itt	eq
 800bfcc:	6819      	ldreq	r1, [r3, #0]
 800bfce:	685b      	ldreq	r3, [r3, #4]
 800bfd0:	6063      	str	r3, [r4, #4]
 800bfd2:	bf04      	itt	eq
 800bfd4:	1809      	addeq	r1, r1, r0
 800bfd6:	6021      	streq	r1, [r4, #0]
 800bfd8:	6054      	str	r4, [r2, #4]
 800bfda:	e7ca      	b.n	800bf72 <_free_r+0x22>
 800bfdc:	bd38      	pop	{r3, r4, r5, pc}
 800bfde:	bf00      	nop
 800bfe0:	20000884 	.word	0x20000884

0800bfe4 <rshift>:
 800bfe4:	6903      	ldr	r3, [r0, #16]
 800bfe6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bfea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bff2:	f100 0414 	add.w	r4, r0, #20
 800bff6:	dd45      	ble.n	800c084 <rshift+0xa0>
 800bff8:	f011 011f 	ands.w	r1, r1, #31
 800bffc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c000:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c004:	d10c      	bne.n	800c020 <rshift+0x3c>
 800c006:	f100 0710 	add.w	r7, r0, #16
 800c00a:	4629      	mov	r1, r5
 800c00c:	42b1      	cmp	r1, r6
 800c00e:	d334      	bcc.n	800c07a <rshift+0x96>
 800c010:	1a9b      	subs	r3, r3, r2
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	1eea      	subs	r2, r5, #3
 800c016:	4296      	cmp	r6, r2
 800c018:	bf38      	it	cc
 800c01a:	2300      	movcc	r3, #0
 800c01c:	4423      	add	r3, r4
 800c01e:	e015      	b.n	800c04c <rshift+0x68>
 800c020:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c024:	f1c1 0820 	rsb	r8, r1, #32
 800c028:	40cf      	lsrs	r7, r1
 800c02a:	f105 0e04 	add.w	lr, r5, #4
 800c02e:	46a1      	mov	r9, r4
 800c030:	4576      	cmp	r6, lr
 800c032:	46f4      	mov	ip, lr
 800c034:	d815      	bhi.n	800c062 <rshift+0x7e>
 800c036:	1a9a      	subs	r2, r3, r2
 800c038:	0092      	lsls	r2, r2, #2
 800c03a:	3a04      	subs	r2, #4
 800c03c:	3501      	adds	r5, #1
 800c03e:	42ae      	cmp	r6, r5
 800c040:	bf38      	it	cc
 800c042:	2200      	movcc	r2, #0
 800c044:	18a3      	adds	r3, r4, r2
 800c046:	50a7      	str	r7, [r4, r2]
 800c048:	b107      	cbz	r7, 800c04c <rshift+0x68>
 800c04a:	3304      	adds	r3, #4
 800c04c:	1b1a      	subs	r2, r3, r4
 800c04e:	42a3      	cmp	r3, r4
 800c050:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c054:	bf08      	it	eq
 800c056:	2300      	moveq	r3, #0
 800c058:	6102      	str	r2, [r0, #16]
 800c05a:	bf08      	it	eq
 800c05c:	6143      	streq	r3, [r0, #20]
 800c05e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c062:	f8dc c000 	ldr.w	ip, [ip]
 800c066:	fa0c fc08 	lsl.w	ip, ip, r8
 800c06a:	ea4c 0707 	orr.w	r7, ip, r7
 800c06e:	f849 7b04 	str.w	r7, [r9], #4
 800c072:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c076:	40cf      	lsrs	r7, r1
 800c078:	e7da      	b.n	800c030 <rshift+0x4c>
 800c07a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c07e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c082:	e7c3      	b.n	800c00c <rshift+0x28>
 800c084:	4623      	mov	r3, r4
 800c086:	e7e1      	b.n	800c04c <rshift+0x68>

0800c088 <__hexdig_fun>:
 800c088:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c08c:	2b09      	cmp	r3, #9
 800c08e:	d802      	bhi.n	800c096 <__hexdig_fun+0xe>
 800c090:	3820      	subs	r0, #32
 800c092:	b2c0      	uxtb	r0, r0
 800c094:	4770      	bx	lr
 800c096:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c09a:	2b05      	cmp	r3, #5
 800c09c:	d801      	bhi.n	800c0a2 <__hexdig_fun+0x1a>
 800c09e:	3847      	subs	r0, #71	@ 0x47
 800c0a0:	e7f7      	b.n	800c092 <__hexdig_fun+0xa>
 800c0a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c0a6:	2b05      	cmp	r3, #5
 800c0a8:	d801      	bhi.n	800c0ae <__hexdig_fun+0x26>
 800c0aa:	3827      	subs	r0, #39	@ 0x27
 800c0ac:	e7f1      	b.n	800c092 <__hexdig_fun+0xa>
 800c0ae:	2000      	movs	r0, #0
 800c0b0:	4770      	bx	lr
	...

0800c0b4 <__gethex>:
 800c0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b8:	b085      	sub	sp, #20
 800c0ba:	468a      	mov	sl, r1
 800c0bc:	9302      	str	r3, [sp, #8]
 800c0be:	680b      	ldr	r3, [r1, #0]
 800c0c0:	9001      	str	r0, [sp, #4]
 800c0c2:	4690      	mov	r8, r2
 800c0c4:	1c9c      	adds	r4, r3, #2
 800c0c6:	46a1      	mov	r9, r4
 800c0c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c0cc:	2830      	cmp	r0, #48	@ 0x30
 800c0ce:	d0fa      	beq.n	800c0c6 <__gethex+0x12>
 800c0d0:	eba9 0303 	sub.w	r3, r9, r3
 800c0d4:	f1a3 0b02 	sub.w	fp, r3, #2
 800c0d8:	f7ff ffd6 	bl	800c088 <__hexdig_fun>
 800c0dc:	4605      	mov	r5, r0
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	d168      	bne.n	800c1b4 <__gethex+0x100>
 800c0e2:	49a0      	ldr	r1, [pc, #640]	@ (800c364 <__gethex+0x2b0>)
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	4648      	mov	r0, r9
 800c0e8:	f7fe ffc5 	bl	800b076 <strncmp>
 800c0ec:	4607      	mov	r7, r0
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	d167      	bne.n	800c1c2 <__gethex+0x10e>
 800c0f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c0f6:	4626      	mov	r6, r4
 800c0f8:	f7ff ffc6 	bl	800c088 <__hexdig_fun>
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	d062      	beq.n	800c1c6 <__gethex+0x112>
 800c100:	4623      	mov	r3, r4
 800c102:	7818      	ldrb	r0, [r3, #0]
 800c104:	2830      	cmp	r0, #48	@ 0x30
 800c106:	4699      	mov	r9, r3
 800c108:	f103 0301 	add.w	r3, r3, #1
 800c10c:	d0f9      	beq.n	800c102 <__gethex+0x4e>
 800c10e:	f7ff ffbb 	bl	800c088 <__hexdig_fun>
 800c112:	fab0 f580 	clz	r5, r0
 800c116:	096d      	lsrs	r5, r5, #5
 800c118:	f04f 0b01 	mov.w	fp, #1
 800c11c:	464a      	mov	r2, r9
 800c11e:	4616      	mov	r6, r2
 800c120:	3201      	adds	r2, #1
 800c122:	7830      	ldrb	r0, [r6, #0]
 800c124:	f7ff ffb0 	bl	800c088 <__hexdig_fun>
 800c128:	2800      	cmp	r0, #0
 800c12a:	d1f8      	bne.n	800c11e <__gethex+0x6a>
 800c12c:	498d      	ldr	r1, [pc, #564]	@ (800c364 <__gethex+0x2b0>)
 800c12e:	2201      	movs	r2, #1
 800c130:	4630      	mov	r0, r6
 800c132:	f7fe ffa0 	bl	800b076 <strncmp>
 800c136:	2800      	cmp	r0, #0
 800c138:	d13f      	bne.n	800c1ba <__gethex+0x106>
 800c13a:	b944      	cbnz	r4, 800c14e <__gethex+0x9a>
 800c13c:	1c74      	adds	r4, r6, #1
 800c13e:	4622      	mov	r2, r4
 800c140:	4616      	mov	r6, r2
 800c142:	3201      	adds	r2, #1
 800c144:	7830      	ldrb	r0, [r6, #0]
 800c146:	f7ff ff9f 	bl	800c088 <__hexdig_fun>
 800c14a:	2800      	cmp	r0, #0
 800c14c:	d1f8      	bne.n	800c140 <__gethex+0x8c>
 800c14e:	1ba4      	subs	r4, r4, r6
 800c150:	00a7      	lsls	r7, r4, #2
 800c152:	7833      	ldrb	r3, [r6, #0]
 800c154:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c158:	2b50      	cmp	r3, #80	@ 0x50
 800c15a:	d13e      	bne.n	800c1da <__gethex+0x126>
 800c15c:	7873      	ldrb	r3, [r6, #1]
 800c15e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c160:	d033      	beq.n	800c1ca <__gethex+0x116>
 800c162:	2b2d      	cmp	r3, #45	@ 0x2d
 800c164:	d034      	beq.n	800c1d0 <__gethex+0x11c>
 800c166:	1c71      	adds	r1, r6, #1
 800c168:	2400      	movs	r4, #0
 800c16a:	7808      	ldrb	r0, [r1, #0]
 800c16c:	f7ff ff8c 	bl	800c088 <__hexdig_fun>
 800c170:	1e43      	subs	r3, r0, #1
 800c172:	b2db      	uxtb	r3, r3
 800c174:	2b18      	cmp	r3, #24
 800c176:	d830      	bhi.n	800c1da <__gethex+0x126>
 800c178:	f1a0 0210 	sub.w	r2, r0, #16
 800c17c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c180:	f7ff ff82 	bl	800c088 <__hexdig_fun>
 800c184:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800c188:	fa5f fc8c 	uxtb.w	ip, ip
 800c18c:	f1bc 0f18 	cmp.w	ip, #24
 800c190:	f04f 030a 	mov.w	r3, #10
 800c194:	d91e      	bls.n	800c1d4 <__gethex+0x120>
 800c196:	b104      	cbz	r4, 800c19a <__gethex+0xe6>
 800c198:	4252      	negs	r2, r2
 800c19a:	4417      	add	r7, r2
 800c19c:	f8ca 1000 	str.w	r1, [sl]
 800c1a0:	b1ed      	cbz	r5, 800c1de <__gethex+0x12a>
 800c1a2:	f1bb 0f00 	cmp.w	fp, #0
 800c1a6:	bf0c      	ite	eq
 800c1a8:	2506      	moveq	r5, #6
 800c1aa:	2500      	movne	r5, #0
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	b005      	add	sp, #20
 800c1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1b4:	2500      	movs	r5, #0
 800c1b6:	462c      	mov	r4, r5
 800c1b8:	e7b0      	b.n	800c11c <__gethex+0x68>
 800c1ba:	2c00      	cmp	r4, #0
 800c1bc:	d1c7      	bne.n	800c14e <__gethex+0x9a>
 800c1be:	4627      	mov	r7, r4
 800c1c0:	e7c7      	b.n	800c152 <__gethex+0x9e>
 800c1c2:	464e      	mov	r6, r9
 800c1c4:	462f      	mov	r7, r5
 800c1c6:	2501      	movs	r5, #1
 800c1c8:	e7c3      	b.n	800c152 <__gethex+0x9e>
 800c1ca:	2400      	movs	r4, #0
 800c1cc:	1cb1      	adds	r1, r6, #2
 800c1ce:	e7cc      	b.n	800c16a <__gethex+0xb6>
 800c1d0:	2401      	movs	r4, #1
 800c1d2:	e7fb      	b.n	800c1cc <__gethex+0x118>
 800c1d4:	fb03 0002 	mla	r0, r3, r2, r0
 800c1d8:	e7ce      	b.n	800c178 <__gethex+0xc4>
 800c1da:	4631      	mov	r1, r6
 800c1dc:	e7de      	b.n	800c19c <__gethex+0xe8>
 800c1de:	eba6 0309 	sub.w	r3, r6, r9
 800c1e2:	3b01      	subs	r3, #1
 800c1e4:	4629      	mov	r1, r5
 800c1e6:	2b07      	cmp	r3, #7
 800c1e8:	dc0a      	bgt.n	800c200 <__gethex+0x14c>
 800c1ea:	9801      	ldr	r0, [sp, #4]
 800c1ec:	f000 fafc 	bl	800c7e8 <_Balloc>
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	b940      	cbnz	r0, 800c206 <__gethex+0x152>
 800c1f4:	4b5c      	ldr	r3, [pc, #368]	@ (800c368 <__gethex+0x2b4>)
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	21e4      	movs	r1, #228	@ 0xe4
 800c1fa:	485c      	ldr	r0, [pc, #368]	@ (800c36c <__gethex+0x2b8>)
 800c1fc:	f7ff f83e 	bl	800b27c <__assert_func>
 800c200:	3101      	adds	r1, #1
 800c202:	105b      	asrs	r3, r3, #1
 800c204:	e7ef      	b.n	800c1e6 <__gethex+0x132>
 800c206:	f100 0a14 	add.w	sl, r0, #20
 800c20a:	2300      	movs	r3, #0
 800c20c:	4655      	mov	r5, sl
 800c20e:	469b      	mov	fp, r3
 800c210:	45b1      	cmp	r9, r6
 800c212:	d337      	bcc.n	800c284 <__gethex+0x1d0>
 800c214:	f845 bb04 	str.w	fp, [r5], #4
 800c218:	eba5 050a 	sub.w	r5, r5, sl
 800c21c:	10ad      	asrs	r5, r5, #2
 800c21e:	6125      	str	r5, [r4, #16]
 800c220:	4658      	mov	r0, fp
 800c222:	f000 fbd3 	bl	800c9cc <__hi0bits>
 800c226:	016d      	lsls	r5, r5, #5
 800c228:	f8d8 6000 	ldr.w	r6, [r8]
 800c22c:	1a2d      	subs	r5, r5, r0
 800c22e:	42b5      	cmp	r5, r6
 800c230:	dd54      	ble.n	800c2dc <__gethex+0x228>
 800c232:	1bad      	subs	r5, r5, r6
 800c234:	4629      	mov	r1, r5
 800c236:	4620      	mov	r0, r4
 800c238:	f000 ff67 	bl	800d10a <__any_on>
 800c23c:	4681      	mov	r9, r0
 800c23e:	b178      	cbz	r0, 800c260 <__gethex+0x1ac>
 800c240:	1e6b      	subs	r3, r5, #1
 800c242:	1159      	asrs	r1, r3, #5
 800c244:	f003 021f 	and.w	r2, r3, #31
 800c248:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c24c:	f04f 0901 	mov.w	r9, #1
 800c250:	fa09 f202 	lsl.w	r2, r9, r2
 800c254:	420a      	tst	r2, r1
 800c256:	d003      	beq.n	800c260 <__gethex+0x1ac>
 800c258:	454b      	cmp	r3, r9
 800c25a:	dc36      	bgt.n	800c2ca <__gethex+0x216>
 800c25c:	f04f 0902 	mov.w	r9, #2
 800c260:	4629      	mov	r1, r5
 800c262:	4620      	mov	r0, r4
 800c264:	f7ff febe 	bl	800bfe4 <rshift>
 800c268:	442f      	add	r7, r5
 800c26a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c26e:	42bb      	cmp	r3, r7
 800c270:	da42      	bge.n	800c2f8 <__gethex+0x244>
 800c272:	9801      	ldr	r0, [sp, #4]
 800c274:	4621      	mov	r1, r4
 800c276:	f000 faf7 	bl	800c868 <_Bfree>
 800c27a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c27c:	2300      	movs	r3, #0
 800c27e:	6013      	str	r3, [r2, #0]
 800c280:	25a3      	movs	r5, #163	@ 0xa3
 800c282:	e793      	b.n	800c1ac <__gethex+0xf8>
 800c284:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c288:	2a2e      	cmp	r2, #46	@ 0x2e
 800c28a:	d012      	beq.n	800c2b2 <__gethex+0x1fe>
 800c28c:	2b20      	cmp	r3, #32
 800c28e:	d104      	bne.n	800c29a <__gethex+0x1e6>
 800c290:	f845 bb04 	str.w	fp, [r5], #4
 800c294:	f04f 0b00 	mov.w	fp, #0
 800c298:	465b      	mov	r3, fp
 800c29a:	7830      	ldrb	r0, [r6, #0]
 800c29c:	9303      	str	r3, [sp, #12]
 800c29e:	f7ff fef3 	bl	800c088 <__hexdig_fun>
 800c2a2:	9b03      	ldr	r3, [sp, #12]
 800c2a4:	f000 000f 	and.w	r0, r0, #15
 800c2a8:	4098      	lsls	r0, r3
 800c2aa:	ea4b 0b00 	orr.w	fp, fp, r0
 800c2ae:	3304      	adds	r3, #4
 800c2b0:	e7ae      	b.n	800c210 <__gethex+0x15c>
 800c2b2:	45b1      	cmp	r9, r6
 800c2b4:	d8ea      	bhi.n	800c28c <__gethex+0x1d8>
 800c2b6:	492b      	ldr	r1, [pc, #172]	@ (800c364 <__gethex+0x2b0>)
 800c2b8:	9303      	str	r3, [sp, #12]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	4630      	mov	r0, r6
 800c2be:	f7fe feda 	bl	800b076 <strncmp>
 800c2c2:	9b03      	ldr	r3, [sp, #12]
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	d1e1      	bne.n	800c28c <__gethex+0x1d8>
 800c2c8:	e7a2      	b.n	800c210 <__gethex+0x15c>
 800c2ca:	1ea9      	subs	r1, r5, #2
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	f000 ff1c 	bl	800d10a <__any_on>
 800c2d2:	2800      	cmp	r0, #0
 800c2d4:	d0c2      	beq.n	800c25c <__gethex+0x1a8>
 800c2d6:	f04f 0903 	mov.w	r9, #3
 800c2da:	e7c1      	b.n	800c260 <__gethex+0x1ac>
 800c2dc:	da09      	bge.n	800c2f2 <__gethex+0x23e>
 800c2de:	1b75      	subs	r5, r6, r5
 800c2e0:	4621      	mov	r1, r4
 800c2e2:	9801      	ldr	r0, [sp, #4]
 800c2e4:	462a      	mov	r2, r5
 800c2e6:	f000 fcd7 	bl	800cc98 <__lshift>
 800c2ea:	1b7f      	subs	r7, r7, r5
 800c2ec:	4604      	mov	r4, r0
 800c2ee:	f100 0a14 	add.w	sl, r0, #20
 800c2f2:	f04f 0900 	mov.w	r9, #0
 800c2f6:	e7b8      	b.n	800c26a <__gethex+0x1b6>
 800c2f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c2fc:	42bd      	cmp	r5, r7
 800c2fe:	dd6f      	ble.n	800c3e0 <__gethex+0x32c>
 800c300:	1bed      	subs	r5, r5, r7
 800c302:	42ae      	cmp	r6, r5
 800c304:	dc34      	bgt.n	800c370 <__gethex+0x2bc>
 800c306:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c30a:	2b02      	cmp	r3, #2
 800c30c:	d022      	beq.n	800c354 <__gethex+0x2a0>
 800c30e:	2b03      	cmp	r3, #3
 800c310:	d024      	beq.n	800c35c <__gethex+0x2a8>
 800c312:	2b01      	cmp	r3, #1
 800c314:	d115      	bne.n	800c342 <__gethex+0x28e>
 800c316:	42ae      	cmp	r6, r5
 800c318:	d113      	bne.n	800c342 <__gethex+0x28e>
 800c31a:	2e01      	cmp	r6, #1
 800c31c:	d10b      	bne.n	800c336 <__gethex+0x282>
 800c31e:	9a02      	ldr	r2, [sp, #8]
 800c320:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c324:	6013      	str	r3, [r2, #0]
 800c326:	2301      	movs	r3, #1
 800c328:	6123      	str	r3, [r4, #16]
 800c32a:	f8ca 3000 	str.w	r3, [sl]
 800c32e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c330:	2562      	movs	r5, #98	@ 0x62
 800c332:	601c      	str	r4, [r3, #0]
 800c334:	e73a      	b.n	800c1ac <__gethex+0xf8>
 800c336:	1e71      	subs	r1, r6, #1
 800c338:	4620      	mov	r0, r4
 800c33a:	f000 fee6 	bl	800d10a <__any_on>
 800c33e:	2800      	cmp	r0, #0
 800c340:	d1ed      	bne.n	800c31e <__gethex+0x26a>
 800c342:	9801      	ldr	r0, [sp, #4]
 800c344:	4621      	mov	r1, r4
 800c346:	f000 fa8f 	bl	800c868 <_Bfree>
 800c34a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c34c:	2300      	movs	r3, #0
 800c34e:	6013      	str	r3, [r2, #0]
 800c350:	2550      	movs	r5, #80	@ 0x50
 800c352:	e72b      	b.n	800c1ac <__gethex+0xf8>
 800c354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c356:	2b00      	cmp	r3, #0
 800c358:	d1f3      	bne.n	800c342 <__gethex+0x28e>
 800c35a:	e7e0      	b.n	800c31e <__gethex+0x26a>
 800c35c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d1dd      	bne.n	800c31e <__gethex+0x26a>
 800c362:	e7ee      	b.n	800c342 <__gethex+0x28e>
 800c364:	0800dc98 	.word	0x0800dc98
 800c368:	0800df44 	.word	0x0800df44
 800c36c:	0800df55 	.word	0x0800df55
 800c370:	1e6f      	subs	r7, r5, #1
 800c372:	f1b9 0f00 	cmp.w	r9, #0
 800c376:	d130      	bne.n	800c3da <__gethex+0x326>
 800c378:	b127      	cbz	r7, 800c384 <__gethex+0x2d0>
 800c37a:	4639      	mov	r1, r7
 800c37c:	4620      	mov	r0, r4
 800c37e:	f000 fec4 	bl	800d10a <__any_on>
 800c382:	4681      	mov	r9, r0
 800c384:	117a      	asrs	r2, r7, #5
 800c386:	2301      	movs	r3, #1
 800c388:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c38c:	f007 071f 	and.w	r7, r7, #31
 800c390:	40bb      	lsls	r3, r7
 800c392:	4213      	tst	r3, r2
 800c394:	4629      	mov	r1, r5
 800c396:	4620      	mov	r0, r4
 800c398:	bf18      	it	ne
 800c39a:	f049 0902 	orrne.w	r9, r9, #2
 800c39e:	f7ff fe21 	bl	800bfe4 <rshift>
 800c3a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c3a6:	1b76      	subs	r6, r6, r5
 800c3a8:	2502      	movs	r5, #2
 800c3aa:	f1b9 0f00 	cmp.w	r9, #0
 800c3ae:	d047      	beq.n	800c440 <__gethex+0x38c>
 800c3b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c3b4:	2b02      	cmp	r3, #2
 800c3b6:	d015      	beq.n	800c3e4 <__gethex+0x330>
 800c3b8:	2b03      	cmp	r3, #3
 800c3ba:	d017      	beq.n	800c3ec <__gethex+0x338>
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d109      	bne.n	800c3d4 <__gethex+0x320>
 800c3c0:	f019 0f02 	tst.w	r9, #2
 800c3c4:	d006      	beq.n	800c3d4 <__gethex+0x320>
 800c3c6:	f8da 3000 	ldr.w	r3, [sl]
 800c3ca:	ea49 0903 	orr.w	r9, r9, r3
 800c3ce:	f019 0f01 	tst.w	r9, #1
 800c3d2:	d10e      	bne.n	800c3f2 <__gethex+0x33e>
 800c3d4:	f045 0510 	orr.w	r5, r5, #16
 800c3d8:	e032      	b.n	800c440 <__gethex+0x38c>
 800c3da:	f04f 0901 	mov.w	r9, #1
 800c3de:	e7d1      	b.n	800c384 <__gethex+0x2d0>
 800c3e0:	2501      	movs	r5, #1
 800c3e2:	e7e2      	b.n	800c3aa <__gethex+0x2f6>
 800c3e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3e6:	f1c3 0301 	rsb	r3, r3, #1
 800c3ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c3ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d0f0      	beq.n	800c3d4 <__gethex+0x320>
 800c3f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c3f6:	f104 0314 	add.w	r3, r4, #20
 800c3fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c3fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c402:	f04f 0c00 	mov.w	ip, #0
 800c406:	4618      	mov	r0, r3
 800c408:	f853 2b04 	ldr.w	r2, [r3], #4
 800c40c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800c410:	d01b      	beq.n	800c44a <__gethex+0x396>
 800c412:	3201      	adds	r2, #1
 800c414:	6002      	str	r2, [r0, #0]
 800c416:	2d02      	cmp	r5, #2
 800c418:	f104 0314 	add.w	r3, r4, #20
 800c41c:	d13c      	bne.n	800c498 <__gethex+0x3e4>
 800c41e:	f8d8 2000 	ldr.w	r2, [r8]
 800c422:	3a01      	subs	r2, #1
 800c424:	42b2      	cmp	r2, r6
 800c426:	d109      	bne.n	800c43c <__gethex+0x388>
 800c428:	1171      	asrs	r1, r6, #5
 800c42a:	2201      	movs	r2, #1
 800c42c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c430:	f006 061f 	and.w	r6, r6, #31
 800c434:	fa02 f606 	lsl.w	r6, r2, r6
 800c438:	421e      	tst	r6, r3
 800c43a:	d13a      	bne.n	800c4b2 <__gethex+0x3fe>
 800c43c:	f045 0520 	orr.w	r5, r5, #32
 800c440:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c442:	601c      	str	r4, [r3, #0]
 800c444:	9b02      	ldr	r3, [sp, #8]
 800c446:	601f      	str	r7, [r3, #0]
 800c448:	e6b0      	b.n	800c1ac <__gethex+0xf8>
 800c44a:	4299      	cmp	r1, r3
 800c44c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c450:	d8d9      	bhi.n	800c406 <__gethex+0x352>
 800c452:	68a3      	ldr	r3, [r4, #8]
 800c454:	459b      	cmp	fp, r3
 800c456:	db17      	blt.n	800c488 <__gethex+0x3d4>
 800c458:	6861      	ldr	r1, [r4, #4]
 800c45a:	9801      	ldr	r0, [sp, #4]
 800c45c:	3101      	adds	r1, #1
 800c45e:	f000 f9c3 	bl	800c7e8 <_Balloc>
 800c462:	4681      	mov	r9, r0
 800c464:	b918      	cbnz	r0, 800c46e <__gethex+0x3ba>
 800c466:	4b1a      	ldr	r3, [pc, #104]	@ (800c4d0 <__gethex+0x41c>)
 800c468:	4602      	mov	r2, r0
 800c46a:	2184      	movs	r1, #132	@ 0x84
 800c46c:	e6c5      	b.n	800c1fa <__gethex+0x146>
 800c46e:	6922      	ldr	r2, [r4, #16]
 800c470:	3202      	adds	r2, #2
 800c472:	f104 010c 	add.w	r1, r4, #12
 800c476:	0092      	lsls	r2, r2, #2
 800c478:	300c      	adds	r0, #12
 800c47a:	f7fe fee2 	bl	800b242 <memcpy>
 800c47e:	4621      	mov	r1, r4
 800c480:	9801      	ldr	r0, [sp, #4]
 800c482:	f000 f9f1 	bl	800c868 <_Bfree>
 800c486:	464c      	mov	r4, r9
 800c488:	6923      	ldr	r3, [r4, #16]
 800c48a:	1c5a      	adds	r2, r3, #1
 800c48c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c490:	6122      	str	r2, [r4, #16]
 800c492:	2201      	movs	r2, #1
 800c494:	615a      	str	r2, [r3, #20]
 800c496:	e7be      	b.n	800c416 <__gethex+0x362>
 800c498:	6922      	ldr	r2, [r4, #16]
 800c49a:	455a      	cmp	r2, fp
 800c49c:	dd0b      	ble.n	800c4b6 <__gethex+0x402>
 800c49e:	2101      	movs	r1, #1
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	f7ff fd9f 	bl	800bfe4 <rshift>
 800c4a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c4aa:	3701      	adds	r7, #1
 800c4ac:	42bb      	cmp	r3, r7
 800c4ae:	f6ff aee0 	blt.w	800c272 <__gethex+0x1be>
 800c4b2:	2501      	movs	r5, #1
 800c4b4:	e7c2      	b.n	800c43c <__gethex+0x388>
 800c4b6:	f016 061f 	ands.w	r6, r6, #31
 800c4ba:	d0fa      	beq.n	800c4b2 <__gethex+0x3fe>
 800c4bc:	4453      	add	r3, sl
 800c4be:	f1c6 0620 	rsb	r6, r6, #32
 800c4c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c4c6:	f000 fa81 	bl	800c9cc <__hi0bits>
 800c4ca:	42b0      	cmp	r0, r6
 800c4cc:	dbe7      	blt.n	800c49e <__gethex+0x3ea>
 800c4ce:	e7f0      	b.n	800c4b2 <__gethex+0x3fe>
 800c4d0:	0800df44 	.word	0x0800df44

0800c4d4 <L_shift>:
 800c4d4:	f1c2 0208 	rsb	r2, r2, #8
 800c4d8:	0092      	lsls	r2, r2, #2
 800c4da:	b570      	push	{r4, r5, r6, lr}
 800c4dc:	f1c2 0620 	rsb	r6, r2, #32
 800c4e0:	6843      	ldr	r3, [r0, #4]
 800c4e2:	6804      	ldr	r4, [r0, #0]
 800c4e4:	fa03 f506 	lsl.w	r5, r3, r6
 800c4e8:	432c      	orrs	r4, r5
 800c4ea:	40d3      	lsrs	r3, r2
 800c4ec:	6004      	str	r4, [r0, #0]
 800c4ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800c4f2:	4288      	cmp	r0, r1
 800c4f4:	d3f4      	bcc.n	800c4e0 <L_shift+0xc>
 800c4f6:	bd70      	pop	{r4, r5, r6, pc}

0800c4f8 <__match>:
 800c4f8:	b530      	push	{r4, r5, lr}
 800c4fa:	6803      	ldr	r3, [r0, #0]
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c502:	b914      	cbnz	r4, 800c50a <__match+0x12>
 800c504:	6003      	str	r3, [r0, #0]
 800c506:	2001      	movs	r0, #1
 800c508:	bd30      	pop	{r4, r5, pc}
 800c50a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c50e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c512:	2d19      	cmp	r5, #25
 800c514:	bf98      	it	ls
 800c516:	3220      	addls	r2, #32
 800c518:	42a2      	cmp	r2, r4
 800c51a:	d0f0      	beq.n	800c4fe <__match+0x6>
 800c51c:	2000      	movs	r0, #0
 800c51e:	e7f3      	b.n	800c508 <__match+0x10>

0800c520 <__hexnan>:
 800c520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c524:	680b      	ldr	r3, [r1, #0]
 800c526:	6801      	ldr	r1, [r0, #0]
 800c528:	115e      	asrs	r6, r3, #5
 800c52a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c52e:	f013 031f 	ands.w	r3, r3, #31
 800c532:	b087      	sub	sp, #28
 800c534:	bf18      	it	ne
 800c536:	3604      	addne	r6, #4
 800c538:	2500      	movs	r5, #0
 800c53a:	1f37      	subs	r7, r6, #4
 800c53c:	4682      	mov	sl, r0
 800c53e:	4690      	mov	r8, r2
 800c540:	9301      	str	r3, [sp, #4]
 800c542:	f846 5c04 	str.w	r5, [r6, #-4]
 800c546:	46b9      	mov	r9, r7
 800c548:	463c      	mov	r4, r7
 800c54a:	9502      	str	r5, [sp, #8]
 800c54c:	46ab      	mov	fp, r5
 800c54e:	784a      	ldrb	r2, [r1, #1]
 800c550:	1c4b      	adds	r3, r1, #1
 800c552:	9303      	str	r3, [sp, #12]
 800c554:	b342      	cbz	r2, 800c5a8 <__hexnan+0x88>
 800c556:	4610      	mov	r0, r2
 800c558:	9105      	str	r1, [sp, #20]
 800c55a:	9204      	str	r2, [sp, #16]
 800c55c:	f7ff fd94 	bl	800c088 <__hexdig_fun>
 800c560:	2800      	cmp	r0, #0
 800c562:	d151      	bne.n	800c608 <__hexnan+0xe8>
 800c564:	9a04      	ldr	r2, [sp, #16]
 800c566:	9905      	ldr	r1, [sp, #20]
 800c568:	2a20      	cmp	r2, #32
 800c56a:	d818      	bhi.n	800c59e <__hexnan+0x7e>
 800c56c:	9b02      	ldr	r3, [sp, #8]
 800c56e:	459b      	cmp	fp, r3
 800c570:	dd13      	ble.n	800c59a <__hexnan+0x7a>
 800c572:	454c      	cmp	r4, r9
 800c574:	d206      	bcs.n	800c584 <__hexnan+0x64>
 800c576:	2d07      	cmp	r5, #7
 800c578:	dc04      	bgt.n	800c584 <__hexnan+0x64>
 800c57a:	462a      	mov	r2, r5
 800c57c:	4649      	mov	r1, r9
 800c57e:	4620      	mov	r0, r4
 800c580:	f7ff ffa8 	bl	800c4d4 <L_shift>
 800c584:	4544      	cmp	r4, r8
 800c586:	d952      	bls.n	800c62e <__hexnan+0x10e>
 800c588:	2300      	movs	r3, #0
 800c58a:	f1a4 0904 	sub.w	r9, r4, #4
 800c58e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c592:	f8cd b008 	str.w	fp, [sp, #8]
 800c596:	464c      	mov	r4, r9
 800c598:	461d      	mov	r5, r3
 800c59a:	9903      	ldr	r1, [sp, #12]
 800c59c:	e7d7      	b.n	800c54e <__hexnan+0x2e>
 800c59e:	2a29      	cmp	r2, #41	@ 0x29
 800c5a0:	d157      	bne.n	800c652 <__hexnan+0x132>
 800c5a2:	3102      	adds	r1, #2
 800c5a4:	f8ca 1000 	str.w	r1, [sl]
 800c5a8:	f1bb 0f00 	cmp.w	fp, #0
 800c5ac:	d051      	beq.n	800c652 <__hexnan+0x132>
 800c5ae:	454c      	cmp	r4, r9
 800c5b0:	d206      	bcs.n	800c5c0 <__hexnan+0xa0>
 800c5b2:	2d07      	cmp	r5, #7
 800c5b4:	dc04      	bgt.n	800c5c0 <__hexnan+0xa0>
 800c5b6:	462a      	mov	r2, r5
 800c5b8:	4649      	mov	r1, r9
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f7ff ff8a 	bl	800c4d4 <L_shift>
 800c5c0:	4544      	cmp	r4, r8
 800c5c2:	d936      	bls.n	800c632 <__hexnan+0x112>
 800c5c4:	f1a8 0204 	sub.w	r2, r8, #4
 800c5c8:	4623      	mov	r3, r4
 800c5ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800c5ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800c5d2:	429f      	cmp	r7, r3
 800c5d4:	d2f9      	bcs.n	800c5ca <__hexnan+0xaa>
 800c5d6:	1b3b      	subs	r3, r7, r4
 800c5d8:	f023 0303 	bic.w	r3, r3, #3
 800c5dc:	3304      	adds	r3, #4
 800c5de:	3401      	adds	r4, #1
 800c5e0:	3e03      	subs	r6, #3
 800c5e2:	42b4      	cmp	r4, r6
 800c5e4:	bf88      	it	hi
 800c5e6:	2304      	movhi	r3, #4
 800c5e8:	4443      	add	r3, r8
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f843 2b04 	str.w	r2, [r3], #4
 800c5f0:	429f      	cmp	r7, r3
 800c5f2:	d2fb      	bcs.n	800c5ec <__hexnan+0xcc>
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	b91b      	cbnz	r3, 800c600 <__hexnan+0xe0>
 800c5f8:	4547      	cmp	r7, r8
 800c5fa:	d128      	bne.n	800c64e <__hexnan+0x12e>
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	603b      	str	r3, [r7, #0]
 800c600:	2005      	movs	r0, #5
 800c602:	b007      	add	sp, #28
 800c604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c608:	3501      	adds	r5, #1
 800c60a:	2d08      	cmp	r5, #8
 800c60c:	f10b 0b01 	add.w	fp, fp, #1
 800c610:	dd06      	ble.n	800c620 <__hexnan+0x100>
 800c612:	4544      	cmp	r4, r8
 800c614:	d9c1      	bls.n	800c59a <__hexnan+0x7a>
 800c616:	2300      	movs	r3, #0
 800c618:	f844 3c04 	str.w	r3, [r4, #-4]
 800c61c:	2501      	movs	r5, #1
 800c61e:	3c04      	subs	r4, #4
 800c620:	6822      	ldr	r2, [r4, #0]
 800c622:	f000 000f 	and.w	r0, r0, #15
 800c626:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c62a:	6020      	str	r0, [r4, #0]
 800c62c:	e7b5      	b.n	800c59a <__hexnan+0x7a>
 800c62e:	2508      	movs	r5, #8
 800c630:	e7b3      	b.n	800c59a <__hexnan+0x7a>
 800c632:	9b01      	ldr	r3, [sp, #4]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d0dd      	beq.n	800c5f4 <__hexnan+0xd4>
 800c638:	f1c3 0320 	rsb	r3, r3, #32
 800c63c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c640:	40da      	lsrs	r2, r3
 800c642:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c646:	4013      	ands	r3, r2
 800c648:	f846 3c04 	str.w	r3, [r6, #-4]
 800c64c:	e7d2      	b.n	800c5f4 <__hexnan+0xd4>
 800c64e:	3f04      	subs	r7, #4
 800c650:	e7d0      	b.n	800c5f4 <__hexnan+0xd4>
 800c652:	2004      	movs	r0, #4
 800c654:	e7d5      	b.n	800c602 <__hexnan+0xe2>
	...

0800c658 <malloc>:
 800c658:	4b02      	ldr	r3, [pc, #8]	@ (800c664 <malloc+0xc>)
 800c65a:	4601      	mov	r1, r0
 800c65c:	6818      	ldr	r0, [r3, #0]
 800c65e:	f000 b825 	b.w	800c6ac <_malloc_r>
 800c662:	bf00      	nop
 800c664:	20000328 	.word	0x20000328

0800c668 <sbrk_aligned>:
 800c668:	b570      	push	{r4, r5, r6, lr}
 800c66a:	4e0f      	ldr	r6, [pc, #60]	@ (800c6a8 <sbrk_aligned+0x40>)
 800c66c:	460c      	mov	r4, r1
 800c66e:	6831      	ldr	r1, [r6, #0]
 800c670:	4605      	mov	r5, r0
 800c672:	b911      	cbnz	r1, 800c67a <sbrk_aligned+0x12>
 800c674:	f001 f97c 	bl	800d970 <_sbrk_r>
 800c678:	6030      	str	r0, [r6, #0]
 800c67a:	4621      	mov	r1, r4
 800c67c:	4628      	mov	r0, r5
 800c67e:	f001 f977 	bl	800d970 <_sbrk_r>
 800c682:	1c43      	adds	r3, r0, #1
 800c684:	d103      	bne.n	800c68e <sbrk_aligned+0x26>
 800c686:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c68a:	4620      	mov	r0, r4
 800c68c:	bd70      	pop	{r4, r5, r6, pc}
 800c68e:	1cc4      	adds	r4, r0, #3
 800c690:	f024 0403 	bic.w	r4, r4, #3
 800c694:	42a0      	cmp	r0, r4
 800c696:	d0f8      	beq.n	800c68a <sbrk_aligned+0x22>
 800c698:	1a21      	subs	r1, r4, r0
 800c69a:	4628      	mov	r0, r5
 800c69c:	f001 f968 	bl	800d970 <_sbrk_r>
 800c6a0:	3001      	adds	r0, #1
 800c6a2:	d1f2      	bne.n	800c68a <sbrk_aligned+0x22>
 800c6a4:	e7ef      	b.n	800c686 <sbrk_aligned+0x1e>
 800c6a6:	bf00      	nop
 800c6a8:	20000880 	.word	0x20000880

0800c6ac <_malloc_r>:
 800c6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6b0:	1ccd      	adds	r5, r1, #3
 800c6b2:	f025 0503 	bic.w	r5, r5, #3
 800c6b6:	3508      	adds	r5, #8
 800c6b8:	2d0c      	cmp	r5, #12
 800c6ba:	bf38      	it	cc
 800c6bc:	250c      	movcc	r5, #12
 800c6be:	2d00      	cmp	r5, #0
 800c6c0:	4606      	mov	r6, r0
 800c6c2:	db01      	blt.n	800c6c8 <_malloc_r+0x1c>
 800c6c4:	42a9      	cmp	r1, r5
 800c6c6:	d904      	bls.n	800c6d2 <_malloc_r+0x26>
 800c6c8:	230c      	movs	r3, #12
 800c6ca:	6033      	str	r3, [r6, #0]
 800c6cc:	2000      	movs	r0, #0
 800c6ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c7a8 <_malloc_r+0xfc>
 800c6d6:	f000 f87b 	bl	800c7d0 <__malloc_lock>
 800c6da:	f8d8 3000 	ldr.w	r3, [r8]
 800c6de:	461c      	mov	r4, r3
 800c6e0:	bb44      	cbnz	r4, 800c734 <_malloc_r+0x88>
 800c6e2:	4629      	mov	r1, r5
 800c6e4:	4630      	mov	r0, r6
 800c6e6:	f7ff ffbf 	bl	800c668 <sbrk_aligned>
 800c6ea:	1c43      	adds	r3, r0, #1
 800c6ec:	4604      	mov	r4, r0
 800c6ee:	d158      	bne.n	800c7a2 <_malloc_r+0xf6>
 800c6f0:	f8d8 4000 	ldr.w	r4, [r8]
 800c6f4:	4627      	mov	r7, r4
 800c6f6:	2f00      	cmp	r7, #0
 800c6f8:	d143      	bne.n	800c782 <_malloc_r+0xd6>
 800c6fa:	2c00      	cmp	r4, #0
 800c6fc:	d04b      	beq.n	800c796 <_malloc_r+0xea>
 800c6fe:	6823      	ldr	r3, [r4, #0]
 800c700:	4639      	mov	r1, r7
 800c702:	4630      	mov	r0, r6
 800c704:	eb04 0903 	add.w	r9, r4, r3
 800c708:	f001 f932 	bl	800d970 <_sbrk_r>
 800c70c:	4581      	cmp	r9, r0
 800c70e:	d142      	bne.n	800c796 <_malloc_r+0xea>
 800c710:	6821      	ldr	r1, [r4, #0]
 800c712:	1a6d      	subs	r5, r5, r1
 800c714:	4629      	mov	r1, r5
 800c716:	4630      	mov	r0, r6
 800c718:	f7ff ffa6 	bl	800c668 <sbrk_aligned>
 800c71c:	3001      	adds	r0, #1
 800c71e:	d03a      	beq.n	800c796 <_malloc_r+0xea>
 800c720:	6823      	ldr	r3, [r4, #0]
 800c722:	442b      	add	r3, r5
 800c724:	6023      	str	r3, [r4, #0]
 800c726:	f8d8 3000 	ldr.w	r3, [r8]
 800c72a:	685a      	ldr	r2, [r3, #4]
 800c72c:	bb62      	cbnz	r2, 800c788 <_malloc_r+0xdc>
 800c72e:	f8c8 7000 	str.w	r7, [r8]
 800c732:	e00f      	b.n	800c754 <_malloc_r+0xa8>
 800c734:	6822      	ldr	r2, [r4, #0]
 800c736:	1b52      	subs	r2, r2, r5
 800c738:	d420      	bmi.n	800c77c <_malloc_r+0xd0>
 800c73a:	2a0b      	cmp	r2, #11
 800c73c:	d917      	bls.n	800c76e <_malloc_r+0xc2>
 800c73e:	1961      	adds	r1, r4, r5
 800c740:	42a3      	cmp	r3, r4
 800c742:	6025      	str	r5, [r4, #0]
 800c744:	bf18      	it	ne
 800c746:	6059      	strne	r1, [r3, #4]
 800c748:	6863      	ldr	r3, [r4, #4]
 800c74a:	bf08      	it	eq
 800c74c:	f8c8 1000 	streq.w	r1, [r8]
 800c750:	5162      	str	r2, [r4, r5]
 800c752:	604b      	str	r3, [r1, #4]
 800c754:	4630      	mov	r0, r6
 800c756:	f000 f841 	bl	800c7dc <__malloc_unlock>
 800c75a:	f104 000b 	add.w	r0, r4, #11
 800c75e:	1d23      	adds	r3, r4, #4
 800c760:	f020 0007 	bic.w	r0, r0, #7
 800c764:	1ac2      	subs	r2, r0, r3
 800c766:	bf1c      	itt	ne
 800c768:	1a1b      	subne	r3, r3, r0
 800c76a:	50a3      	strne	r3, [r4, r2]
 800c76c:	e7af      	b.n	800c6ce <_malloc_r+0x22>
 800c76e:	6862      	ldr	r2, [r4, #4]
 800c770:	42a3      	cmp	r3, r4
 800c772:	bf0c      	ite	eq
 800c774:	f8c8 2000 	streq.w	r2, [r8]
 800c778:	605a      	strne	r2, [r3, #4]
 800c77a:	e7eb      	b.n	800c754 <_malloc_r+0xa8>
 800c77c:	4623      	mov	r3, r4
 800c77e:	6864      	ldr	r4, [r4, #4]
 800c780:	e7ae      	b.n	800c6e0 <_malloc_r+0x34>
 800c782:	463c      	mov	r4, r7
 800c784:	687f      	ldr	r7, [r7, #4]
 800c786:	e7b6      	b.n	800c6f6 <_malloc_r+0x4a>
 800c788:	461a      	mov	r2, r3
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	42a3      	cmp	r3, r4
 800c78e:	d1fb      	bne.n	800c788 <_malloc_r+0xdc>
 800c790:	2300      	movs	r3, #0
 800c792:	6053      	str	r3, [r2, #4]
 800c794:	e7de      	b.n	800c754 <_malloc_r+0xa8>
 800c796:	230c      	movs	r3, #12
 800c798:	6033      	str	r3, [r6, #0]
 800c79a:	4630      	mov	r0, r6
 800c79c:	f000 f81e 	bl	800c7dc <__malloc_unlock>
 800c7a0:	e794      	b.n	800c6cc <_malloc_r+0x20>
 800c7a2:	6005      	str	r5, [r0, #0]
 800c7a4:	e7d6      	b.n	800c754 <_malloc_r+0xa8>
 800c7a6:	bf00      	nop
 800c7a8:	20000884 	.word	0x20000884

0800c7ac <__ascii_mbtowc>:
 800c7ac:	b082      	sub	sp, #8
 800c7ae:	b901      	cbnz	r1, 800c7b2 <__ascii_mbtowc+0x6>
 800c7b0:	a901      	add	r1, sp, #4
 800c7b2:	b142      	cbz	r2, 800c7c6 <__ascii_mbtowc+0x1a>
 800c7b4:	b14b      	cbz	r3, 800c7ca <__ascii_mbtowc+0x1e>
 800c7b6:	7813      	ldrb	r3, [r2, #0]
 800c7b8:	600b      	str	r3, [r1, #0]
 800c7ba:	7812      	ldrb	r2, [r2, #0]
 800c7bc:	1e10      	subs	r0, r2, #0
 800c7be:	bf18      	it	ne
 800c7c0:	2001      	movne	r0, #1
 800c7c2:	b002      	add	sp, #8
 800c7c4:	4770      	bx	lr
 800c7c6:	4610      	mov	r0, r2
 800c7c8:	e7fb      	b.n	800c7c2 <__ascii_mbtowc+0x16>
 800c7ca:	f06f 0001 	mvn.w	r0, #1
 800c7ce:	e7f8      	b.n	800c7c2 <__ascii_mbtowc+0x16>

0800c7d0 <__malloc_lock>:
 800c7d0:	4801      	ldr	r0, [pc, #4]	@ (800c7d8 <__malloc_lock+0x8>)
 800c7d2:	f7fe bd34 	b.w	800b23e <__retarget_lock_acquire_recursive>
 800c7d6:	bf00      	nop
 800c7d8:	2000087c 	.word	0x2000087c

0800c7dc <__malloc_unlock>:
 800c7dc:	4801      	ldr	r0, [pc, #4]	@ (800c7e4 <__malloc_unlock+0x8>)
 800c7de:	f7fe bd2f 	b.w	800b240 <__retarget_lock_release_recursive>
 800c7e2:	bf00      	nop
 800c7e4:	2000087c 	.word	0x2000087c

0800c7e8 <_Balloc>:
 800c7e8:	b570      	push	{r4, r5, r6, lr}
 800c7ea:	69c6      	ldr	r6, [r0, #28]
 800c7ec:	4604      	mov	r4, r0
 800c7ee:	460d      	mov	r5, r1
 800c7f0:	b976      	cbnz	r6, 800c810 <_Balloc+0x28>
 800c7f2:	2010      	movs	r0, #16
 800c7f4:	f7ff ff30 	bl	800c658 <malloc>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	61e0      	str	r0, [r4, #28]
 800c7fc:	b920      	cbnz	r0, 800c808 <_Balloc+0x20>
 800c7fe:	4b18      	ldr	r3, [pc, #96]	@ (800c860 <_Balloc+0x78>)
 800c800:	4818      	ldr	r0, [pc, #96]	@ (800c864 <_Balloc+0x7c>)
 800c802:	216b      	movs	r1, #107	@ 0x6b
 800c804:	f7fe fd3a 	bl	800b27c <__assert_func>
 800c808:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c80c:	6006      	str	r6, [r0, #0]
 800c80e:	60c6      	str	r6, [r0, #12]
 800c810:	69e6      	ldr	r6, [r4, #28]
 800c812:	68f3      	ldr	r3, [r6, #12]
 800c814:	b183      	cbz	r3, 800c838 <_Balloc+0x50>
 800c816:	69e3      	ldr	r3, [r4, #28]
 800c818:	68db      	ldr	r3, [r3, #12]
 800c81a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c81e:	b9b8      	cbnz	r0, 800c850 <_Balloc+0x68>
 800c820:	2101      	movs	r1, #1
 800c822:	fa01 f605 	lsl.w	r6, r1, r5
 800c826:	1d72      	adds	r2, r6, #5
 800c828:	0092      	lsls	r2, r2, #2
 800c82a:	4620      	mov	r0, r4
 800c82c:	f001 f8b7 	bl	800d99e <_calloc_r>
 800c830:	b160      	cbz	r0, 800c84c <_Balloc+0x64>
 800c832:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c836:	e00e      	b.n	800c856 <_Balloc+0x6e>
 800c838:	2221      	movs	r2, #33	@ 0x21
 800c83a:	2104      	movs	r1, #4
 800c83c:	4620      	mov	r0, r4
 800c83e:	f001 f8ae 	bl	800d99e <_calloc_r>
 800c842:	69e3      	ldr	r3, [r4, #28]
 800c844:	60f0      	str	r0, [r6, #12]
 800c846:	68db      	ldr	r3, [r3, #12]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d1e4      	bne.n	800c816 <_Balloc+0x2e>
 800c84c:	2000      	movs	r0, #0
 800c84e:	bd70      	pop	{r4, r5, r6, pc}
 800c850:	6802      	ldr	r2, [r0, #0]
 800c852:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c856:	2300      	movs	r3, #0
 800c858:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c85c:	e7f7      	b.n	800c84e <_Balloc+0x66>
 800c85e:	bf00      	nop
 800c860:	0800de2a 	.word	0x0800de2a
 800c864:	0800dfb5 	.word	0x0800dfb5

0800c868 <_Bfree>:
 800c868:	b570      	push	{r4, r5, r6, lr}
 800c86a:	69c6      	ldr	r6, [r0, #28]
 800c86c:	4605      	mov	r5, r0
 800c86e:	460c      	mov	r4, r1
 800c870:	b976      	cbnz	r6, 800c890 <_Bfree+0x28>
 800c872:	2010      	movs	r0, #16
 800c874:	f7ff fef0 	bl	800c658 <malloc>
 800c878:	4602      	mov	r2, r0
 800c87a:	61e8      	str	r0, [r5, #28]
 800c87c:	b920      	cbnz	r0, 800c888 <_Bfree+0x20>
 800c87e:	4b09      	ldr	r3, [pc, #36]	@ (800c8a4 <_Bfree+0x3c>)
 800c880:	4809      	ldr	r0, [pc, #36]	@ (800c8a8 <_Bfree+0x40>)
 800c882:	218f      	movs	r1, #143	@ 0x8f
 800c884:	f7fe fcfa 	bl	800b27c <__assert_func>
 800c888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c88c:	6006      	str	r6, [r0, #0]
 800c88e:	60c6      	str	r6, [r0, #12]
 800c890:	b13c      	cbz	r4, 800c8a2 <_Bfree+0x3a>
 800c892:	69eb      	ldr	r3, [r5, #28]
 800c894:	6862      	ldr	r2, [r4, #4]
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c89c:	6021      	str	r1, [r4, #0]
 800c89e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c8a2:	bd70      	pop	{r4, r5, r6, pc}
 800c8a4:	0800de2a 	.word	0x0800de2a
 800c8a8:	0800dfb5 	.word	0x0800dfb5

0800c8ac <__multadd>:
 800c8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b0:	690d      	ldr	r5, [r1, #16]
 800c8b2:	4607      	mov	r7, r0
 800c8b4:	460c      	mov	r4, r1
 800c8b6:	461e      	mov	r6, r3
 800c8b8:	f101 0c14 	add.w	ip, r1, #20
 800c8bc:	2000      	movs	r0, #0
 800c8be:	f8dc 3000 	ldr.w	r3, [ip]
 800c8c2:	b299      	uxth	r1, r3
 800c8c4:	fb02 6101 	mla	r1, r2, r1, r6
 800c8c8:	0c1e      	lsrs	r6, r3, #16
 800c8ca:	0c0b      	lsrs	r3, r1, #16
 800c8cc:	fb02 3306 	mla	r3, r2, r6, r3
 800c8d0:	b289      	uxth	r1, r1
 800c8d2:	3001      	adds	r0, #1
 800c8d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c8d8:	4285      	cmp	r5, r0
 800c8da:	f84c 1b04 	str.w	r1, [ip], #4
 800c8de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c8e2:	dcec      	bgt.n	800c8be <__multadd+0x12>
 800c8e4:	b30e      	cbz	r6, 800c92a <__multadd+0x7e>
 800c8e6:	68a3      	ldr	r3, [r4, #8]
 800c8e8:	42ab      	cmp	r3, r5
 800c8ea:	dc19      	bgt.n	800c920 <__multadd+0x74>
 800c8ec:	6861      	ldr	r1, [r4, #4]
 800c8ee:	4638      	mov	r0, r7
 800c8f0:	3101      	adds	r1, #1
 800c8f2:	f7ff ff79 	bl	800c7e8 <_Balloc>
 800c8f6:	4680      	mov	r8, r0
 800c8f8:	b928      	cbnz	r0, 800c906 <__multadd+0x5a>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	4b0c      	ldr	r3, [pc, #48]	@ (800c930 <__multadd+0x84>)
 800c8fe:	480d      	ldr	r0, [pc, #52]	@ (800c934 <__multadd+0x88>)
 800c900:	21ba      	movs	r1, #186	@ 0xba
 800c902:	f7fe fcbb 	bl	800b27c <__assert_func>
 800c906:	6922      	ldr	r2, [r4, #16]
 800c908:	3202      	adds	r2, #2
 800c90a:	f104 010c 	add.w	r1, r4, #12
 800c90e:	0092      	lsls	r2, r2, #2
 800c910:	300c      	adds	r0, #12
 800c912:	f7fe fc96 	bl	800b242 <memcpy>
 800c916:	4621      	mov	r1, r4
 800c918:	4638      	mov	r0, r7
 800c91a:	f7ff ffa5 	bl	800c868 <_Bfree>
 800c91e:	4644      	mov	r4, r8
 800c920:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c924:	3501      	adds	r5, #1
 800c926:	615e      	str	r6, [r3, #20]
 800c928:	6125      	str	r5, [r4, #16]
 800c92a:	4620      	mov	r0, r4
 800c92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c930:	0800df44 	.word	0x0800df44
 800c934:	0800dfb5 	.word	0x0800dfb5

0800c938 <__s2b>:
 800c938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c93c:	460c      	mov	r4, r1
 800c93e:	4615      	mov	r5, r2
 800c940:	461f      	mov	r7, r3
 800c942:	2209      	movs	r2, #9
 800c944:	3308      	adds	r3, #8
 800c946:	4606      	mov	r6, r0
 800c948:	fb93 f3f2 	sdiv	r3, r3, r2
 800c94c:	2100      	movs	r1, #0
 800c94e:	2201      	movs	r2, #1
 800c950:	429a      	cmp	r2, r3
 800c952:	db09      	blt.n	800c968 <__s2b+0x30>
 800c954:	4630      	mov	r0, r6
 800c956:	f7ff ff47 	bl	800c7e8 <_Balloc>
 800c95a:	b940      	cbnz	r0, 800c96e <__s2b+0x36>
 800c95c:	4602      	mov	r2, r0
 800c95e:	4b19      	ldr	r3, [pc, #100]	@ (800c9c4 <__s2b+0x8c>)
 800c960:	4819      	ldr	r0, [pc, #100]	@ (800c9c8 <__s2b+0x90>)
 800c962:	21d3      	movs	r1, #211	@ 0xd3
 800c964:	f7fe fc8a 	bl	800b27c <__assert_func>
 800c968:	0052      	lsls	r2, r2, #1
 800c96a:	3101      	adds	r1, #1
 800c96c:	e7f0      	b.n	800c950 <__s2b+0x18>
 800c96e:	9b08      	ldr	r3, [sp, #32]
 800c970:	6143      	str	r3, [r0, #20]
 800c972:	2d09      	cmp	r5, #9
 800c974:	f04f 0301 	mov.w	r3, #1
 800c978:	6103      	str	r3, [r0, #16]
 800c97a:	dd16      	ble.n	800c9aa <__s2b+0x72>
 800c97c:	f104 0909 	add.w	r9, r4, #9
 800c980:	46c8      	mov	r8, r9
 800c982:	442c      	add	r4, r5
 800c984:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c988:	4601      	mov	r1, r0
 800c98a:	3b30      	subs	r3, #48	@ 0x30
 800c98c:	220a      	movs	r2, #10
 800c98e:	4630      	mov	r0, r6
 800c990:	f7ff ff8c 	bl	800c8ac <__multadd>
 800c994:	45a0      	cmp	r8, r4
 800c996:	d1f5      	bne.n	800c984 <__s2b+0x4c>
 800c998:	f1a5 0408 	sub.w	r4, r5, #8
 800c99c:	444c      	add	r4, r9
 800c99e:	1b2d      	subs	r5, r5, r4
 800c9a0:	1963      	adds	r3, r4, r5
 800c9a2:	42bb      	cmp	r3, r7
 800c9a4:	db04      	blt.n	800c9b0 <__s2b+0x78>
 800c9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9aa:	340a      	adds	r4, #10
 800c9ac:	2509      	movs	r5, #9
 800c9ae:	e7f6      	b.n	800c99e <__s2b+0x66>
 800c9b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c9b4:	4601      	mov	r1, r0
 800c9b6:	3b30      	subs	r3, #48	@ 0x30
 800c9b8:	220a      	movs	r2, #10
 800c9ba:	4630      	mov	r0, r6
 800c9bc:	f7ff ff76 	bl	800c8ac <__multadd>
 800c9c0:	e7ee      	b.n	800c9a0 <__s2b+0x68>
 800c9c2:	bf00      	nop
 800c9c4:	0800df44 	.word	0x0800df44
 800c9c8:	0800dfb5 	.word	0x0800dfb5

0800c9cc <__hi0bits>:
 800c9cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	bf36      	itet	cc
 800c9d4:	0403      	lslcc	r3, r0, #16
 800c9d6:	2000      	movcs	r0, #0
 800c9d8:	2010      	movcc	r0, #16
 800c9da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c9de:	bf3c      	itt	cc
 800c9e0:	021b      	lslcc	r3, r3, #8
 800c9e2:	3008      	addcc	r0, #8
 800c9e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c9e8:	bf3c      	itt	cc
 800c9ea:	011b      	lslcc	r3, r3, #4
 800c9ec:	3004      	addcc	r0, #4
 800c9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9f2:	bf3c      	itt	cc
 800c9f4:	009b      	lslcc	r3, r3, #2
 800c9f6:	3002      	addcc	r0, #2
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	db05      	blt.n	800ca08 <__hi0bits+0x3c>
 800c9fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ca00:	f100 0001 	add.w	r0, r0, #1
 800ca04:	bf08      	it	eq
 800ca06:	2020      	moveq	r0, #32
 800ca08:	4770      	bx	lr

0800ca0a <__lo0bits>:
 800ca0a:	6803      	ldr	r3, [r0, #0]
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	f013 0007 	ands.w	r0, r3, #7
 800ca12:	d00b      	beq.n	800ca2c <__lo0bits+0x22>
 800ca14:	07d9      	lsls	r1, r3, #31
 800ca16:	d421      	bmi.n	800ca5c <__lo0bits+0x52>
 800ca18:	0798      	lsls	r0, r3, #30
 800ca1a:	bf49      	itett	mi
 800ca1c:	085b      	lsrmi	r3, r3, #1
 800ca1e:	089b      	lsrpl	r3, r3, #2
 800ca20:	2001      	movmi	r0, #1
 800ca22:	6013      	strmi	r3, [r2, #0]
 800ca24:	bf5c      	itt	pl
 800ca26:	6013      	strpl	r3, [r2, #0]
 800ca28:	2002      	movpl	r0, #2
 800ca2a:	4770      	bx	lr
 800ca2c:	b299      	uxth	r1, r3
 800ca2e:	b909      	cbnz	r1, 800ca34 <__lo0bits+0x2a>
 800ca30:	0c1b      	lsrs	r3, r3, #16
 800ca32:	2010      	movs	r0, #16
 800ca34:	b2d9      	uxtb	r1, r3
 800ca36:	b909      	cbnz	r1, 800ca3c <__lo0bits+0x32>
 800ca38:	3008      	adds	r0, #8
 800ca3a:	0a1b      	lsrs	r3, r3, #8
 800ca3c:	0719      	lsls	r1, r3, #28
 800ca3e:	bf04      	itt	eq
 800ca40:	091b      	lsreq	r3, r3, #4
 800ca42:	3004      	addeq	r0, #4
 800ca44:	0799      	lsls	r1, r3, #30
 800ca46:	bf04      	itt	eq
 800ca48:	089b      	lsreq	r3, r3, #2
 800ca4a:	3002      	addeq	r0, #2
 800ca4c:	07d9      	lsls	r1, r3, #31
 800ca4e:	d403      	bmi.n	800ca58 <__lo0bits+0x4e>
 800ca50:	085b      	lsrs	r3, r3, #1
 800ca52:	f100 0001 	add.w	r0, r0, #1
 800ca56:	d003      	beq.n	800ca60 <__lo0bits+0x56>
 800ca58:	6013      	str	r3, [r2, #0]
 800ca5a:	4770      	bx	lr
 800ca5c:	2000      	movs	r0, #0
 800ca5e:	4770      	bx	lr
 800ca60:	2020      	movs	r0, #32
 800ca62:	4770      	bx	lr

0800ca64 <__i2b>:
 800ca64:	b510      	push	{r4, lr}
 800ca66:	460c      	mov	r4, r1
 800ca68:	2101      	movs	r1, #1
 800ca6a:	f7ff febd 	bl	800c7e8 <_Balloc>
 800ca6e:	4602      	mov	r2, r0
 800ca70:	b928      	cbnz	r0, 800ca7e <__i2b+0x1a>
 800ca72:	4b05      	ldr	r3, [pc, #20]	@ (800ca88 <__i2b+0x24>)
 800ca74:	4805      	ldr	r0, [pc, #20]	@ (800ca8c <__i2b+0x28>)
 800ca76:	f240 1145 	movw	r1, #325	@ 0x145
 800ca7a:	f7fe fbff 	bl	800b27c <__assert_func>
 800ca7e:	2301      	movs	r3, #1
 800ca80:	6144      	str	r4, [r0, #20]
 800ca82:	6103      	str	r3, [r0, #16]
 800ca84:	bd10      	pop	{r4, pc}
 800ca86:	bf00      	nop
 800ca88:	0800df44 	.word	0x0800df44
 800ca8c:	0800dfb5 	.word	0x0800dfb5

0800ca90 <__multiply>:
 800ca90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca94:	4614      	mov	r4, r2
 800ca96:	690a      	ldr	r2, [r1, #16]
 800ca98:	6923      	ldr	r3, [r4, #16]
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	bfa8      	it	ge
 800ca9e:	4623      	movge	r3, r4
 800caa0:	460f      	mov	r7, r1
 800caa2:	bfa4      	itt	ge
 800caa4:	460c      	movge	r4, r1
 800caa6:	461f      	movge	r7, r3
 800caa8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800caac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cab0:	68a3      	ldr	r3, [r4, #8]
 800cab2:	6861      	ldr	r1, [r4, #4]
 800cab4:	eb0a 0609 	add.w	r6, sl, r9
 800cab8:	42b3      	cmp	r3, r6
 800caba:	b085      	sub	sp, #20
 800cabc:	bfb8      	it	lt
 800cabe:	3101      	addlt	r1, #1
 800cac0:	f7ff fe92 	bl	800c7e8 <_Balloc>
 800cac4:	b930      	cbnz	r0, 800cad4 <__multiply+0x44>
 800cac6:	4602      	mov	r2, r0
 800cac8:	4b44      	ldr	r3, [pc, #272]	@ (800cbdc <__multiply+0x14c>)
 800caca:	4845      	ldr	r0, [pc, #276]	@ (800cbe0 <__multiply+0x150>)
 800cacc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cad0:	f7fe fbd4 	bl	800b27c <__assert_func>
 800cad4:	f100 0514 	add.w	r5, r0, #20
 800cad8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cadc:	462b      	mov	r3, r5
 800cade:	2200      	movs	r2, #0
 800cae0:	4543      	cmp	r3, r8
 800cae2:	d321      	bcc.n	800cb28 <__multiply+0x98>
 800cae4:	f107 0114 	add.w	r1, r7, #20
 800cae8:	f104 0214 	add.w	r2, r4, #20
 800caec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800caf0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800caf4:	9302      	str	r3, [sp, #8]
 800caf6:	1b13      	subs	r3, r2, r4
 800caf8:	3b15      	subs	r3, #21
 800cafa:	f023 0303 	bic.w	r3, r3, #3
 800cafe:	3304      	adds	r3, #4
 800cb00:	f104 0715 	add.w	r7, r4, #21
 800cb04:	42ba      	cmp	r2, r7
 800cb06:	bf38      	it	cc
 800cb08:	2304      	movcc	r3, #4
 800cb0a:	9301      	str	r3, [sp, #4]
 800cb0c:	9b02      	ldr	r3, [sp, #8]
 800cb0e:	9103      	str	r1, [sp, #12]
 800cb10:	428b      	cmp	r3, r1
 800cb12:	d80c      	bhi.n	800cb2e <__multiply+0x9e>
 800cb14:	2e00      	cmp	r6, #0
 800cb16:	dd03      	ble.n	800cb20 <__multiply+0x90>
 800cb18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d05b      	beq.n	800cbd8 <__multiply+0x148>
 800cb20:	6106      	str	r6, [r0, #16]
 800cb22:	b005      	add	sp, #20
 800cb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb28:	f843 2b04 	str.w	r2, [r3], #4
 800cb2c:	e7d8      	b.n	800cae0 <__multiply+0x50>
 800cb2e:	f8b1 a000 	ldrh.w	sl, [r1]
 800cb32:	f1ba 0f00 	cmp.w	sl, #0
 800cb36:	d024      	beq.n	800cb82 <__multiply+0xf2>
 800cb38:	f104 0e14 	add.w	lr, r4, #20
 800cb3c:	46a9      	mov	r9, r5
 800cb3e:	f04f 0c00 	mov.w	ip, #0
 800cb42:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cb46:	f8d9 3000 	ldr.w	r3, [r9]
 800cb4a:	fa1f fb87 	uxth.w	fp, r7
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	fb0a 330b 	mla	r3, sl, fp, r3
 800cb54:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cb58:	f8d9 7000 	ldr.w	r7, [r9]
 800cb5c:	4463      	add	r3, ip
 800cb5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cb62:	fb0a c70b 	mla	r7, sl, fp, ip
 800cb66:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cb70:	4572      	cmp	r2, lr
 800cb72:	f849 3b04 	str.w	r3, [r9], #4
 800cb76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cb7a:	d8e2      	bhi.n	800cb42 <__multiply+0xb2>
 800cb7c:	9b01      	ldr	r3, [sp, #4]
 800cb7e:	f845 c003 	str.w	ip, [r5, r3]
 800cb82:	9b03      	ldr	r3, [sp, #12]
 800cb84:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cb88:	3104      	adds	r1, #4
 800cb8a:	f1b9 0f00 	cmp.w	r9, #0
 800cb8e:	d021      	beq.n	800cbd4 <__multiply+0x144>
 800cb90:	682b      	ldr	r3, [r5, #0]
 800cb92:	f104 0c14 	add.w	ip, r4, #20
 800cb96:	46ae      	mov	lr, r5
 800cb98:	f04f 0a00 	mov.w	sl, #0
 800cb9c:	f8bc b000 	ldrh.w	fp, [ip]
 800cba0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cba4:	fb09 770b 	mla	r7, r9, fp, r7
 800cba8:	4457      	add	r7, sl
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cbb0:	f84e 3b04 	str.w	r3, [lr], #4
 800cbb4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cbb8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cbbc:	f8be 3000 	ldrh.w	r3, [lr]
 800cbc0:	fb09 330a 	mla	r3, r9, sl, r3
 800cbc4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cbc8:	4562      	cmp	r2, ip
 800cbca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cbce:	d8e5      	bhi.n	800cb9c <__multiply+0x10c>
 800cbd0:	9f01      	ldr	r7, [sp, #4]
 800cbd2:	51eb      	str	r3, [r5, r7]
 800cbd4:	3504      	adds	r5, #4
 800cbd6:	e799      	b.n	800cb0c <__multiply+0x7c>
 800cbd8:	3e01      	subs	r6, #1
 800cbda:	e79b      	b.n	800cb14 <__multiply+0x84>
 800cbdc:	0800df44 	.word	0x0800df44
 800cbe0:	0800dfb5 	.word	0x0800dfb5

0800cbe4 <__pow5mult>:
 800cbe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbe8:	4615      	mov	r5, r2
 800cbea:	f012 0203 	ands.w	r2, r2, #3
 800cbee:	4607      	mov	r7, r0
 800cbf0:	460e      	mov	r6, r1
 800cbf2:	d007      	beq.n	800cc04 <__pow5mult+0x20>
 800cbf4:	4c25      	ldr	r4, [pc, #148]	@ (800cc8c <__pow5mult+0xa8>)
 800cbf6:	3a01      	subs	r2, #1
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cbfe:	f7ff fe55 	bl	800c8ac <__multadd>
 800cc02:	4606      	mov	r6, r0
 800cc04:	10ad      	asrs	r5, r5, #2
 800cc06:	d03d      	beq.n	800cc84 <__pow5mult+0xa0>
 800cc08:	69fc      	ldr	r4, [r7, #28]
 800cc0a:	b97c      	cbnz	r4, 800cc2c <__pow5mult+0x48>
 800cc0c:	2010      	movs	r0, #16
 800cc0e:	f7ff fd23 	bl	800c658 <malloc>
 800cc12:	4602      	mov	r2, r0
 800cc14:	61f8      	str	r0, [r7, #28]
 800cc16:	b928      	cbnz	r0, 800cc24 <__pow5mult+0x40>
 800cc18:	4b1d      	ldr	r3, [pc, #116]	@ (800cc90 <__pow5mult+0xac>)
 800cc1a:	481e      	ldr	r0, [pc, #120]	@ (800cc94 <__pow5mult+0xb0>)
 800cc1c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cc20:	f7fe fb2c 	bl	800b27c <__assert_func>
 800cc24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cc28:	6004      	str	r4, [r0, #0]
 800cc2a:	60c4      	str	r4, [r0, #12]
 800cc2c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cc30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cc34:	b94c      	cbnz	r4, 800cc4a <__pow5mult+0x66>
 800cc36:	f240 2171 	movw	r1, #625	@ 0x271
 800cc3a:	4638      	mov	r0, r7
 800cc3c:	f7ff ff12 	bl	800ca64 <__i2b>
 800cc40:	2300      	movs	r3, #0
 800cc42:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc46:	4604      	mov	r4, r0
 800cc48:	6003      	str	r3, [r0, #0]
 800cc4a:	f04f 0900 	mov.w	r9, #0
 800cc4e:	07eb      	lsls	r3, r5, #31
 800cc50:	d50a      	bpl.n	800cc68 <__pow5mult+0x84>
 800cc52:	4631      	mov	r1, r6
 800cc54:	4622      	mov	r2, r4
 800cc56:	4638      	mov	r0, r7
 800cc58:	f7ff ff1a 	bl	800ca90 <__multiply>
 800cc5c:	4631      	mov	r1, r6
 800cc5e:	4680      	mov	r8, r0
 800cc60:	4638      	mov	r0, r7
 800cc62:	f7ff fe01 	bl	800c868 <_Bfree>
 800cc66:	4646      	mov	r6, r8
 800cc68:	106d      	asrs	r5, r5, #1
 800cc6a:	d00b      	beq.n	800cc84 <__pow5mult+0xa0>
 800cc6c:	6820      	ldr	r0, [r4, #0]
 800cc6e:	b938      	cbnz	r0, 800cc80 <__pow5mult+0x9c>
 800cc70:	4622      	mov	r2, r4
 800cc72:	4621      	mov	r1, r4
 800cc74:	4638      	mov	r0, r7
 800cc76:	f7ff ff0b 	bl	800ca90 <__multiply>
 800cc7a:	6020      	str	r0, [r4, #0]
 800cc7c:	f8c0 9000 	str.w	r9, [r0]
 800cc80:	4604      	mov	r4, r0
 800cc82:	e7e4      	b.n	800cc4e <__pow5mult+0x6a>
 800cc84:	4630      	mov	r0, r6
 800cc86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc8a:	bf00      	nop
 800cc8c:	0800e010 	.word	0x0800e010
 800cc90:	0800de2a 	.word	0x0800de2a
 800cc94:	0800dfb5 	.word	0x0800dfb5

0800cc98 <__lshift>:
 800cc98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc9c:	460c      	mov	r4, r1
 800cc9e:	6849      	ldr	r1, [r1, #4]
 800cca0:	6923      	ldr	r3, [r4, #16]
 800cca2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cca6:	68a3      	ldr	r3, [r4, #8]
 800cca8:	4607      	mov	r7, r0
 800ccaa:	4691      	mov	r9, r2
 800ccac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ccb0:	f108 0601 	add.w	r6, r8, #1
 800ccb4:	42b3      	cmp	r3, r6
 800ccb6:	db0b      	blt.n	800ccd0 <__lshift+0x38>
 800ccb8:	4638      	mov	r0, r7
 800ccba:	f7ff fd95 	bl	800c7e8 <_Balloc>
 800ccbe:	4605      	mov	r5, r0
 800ccc0:	b948      	cbnz	r0, 800ccd6 <__lshift+0x3e>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	4b28      	ldr	r3, [pc, #160]	@ (800cd68 <__lshift+0xd0>)
 800ccc6:	4829      	ldr	r0, [pc, #164]	@ (800cd6c <__lshift+0xd4>)
 800ccc8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cccc:	f7fe fad6 	bl	800b27c <__assert_func>
 800ccd0:	3101      	adds	r1, #1
 800ccd2:	005b      	lsls	r3, r3, #1
 800ccd4:	e7ee      	b.n	800ccb4 <__lshift+0x1c>
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	f100 0114 	add.w	r1, r0, #20
 800ccdc:	f100 0210 	add.w	r2, r0, #16
 800cce0:	4618      	mov	r0, r3
 800cce2:	4553      	cmp	r3, sl
 800cce4:	db33      	blt.n	800cd4e <__lshift+0xb6>
 800cce6:	6920      	ldr	r0, [r4, #16]
 800cce8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ccec:	f104 0314 	add.w	r3, r4, #20
 800ccf0:	f019 091f 	ands.w	r9, r9, #31
 800ccf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ccf8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ccfc:	d02b      	beq.n	800cd56 <__lshift+0xbe>
 800ccfe:	f1c9 0e20 	rsb	lr, r9, #32
 800cd02:	468a      	mov	sl, r1
 800cd04:	2200      	movs	r2, #0
 800cd06:	6818      	ldr	r0, [r3, #0]
 800cd08:	fa00 f009 	lsl.w	r0, r0, r9
 800cd0c:	4310      	orrs	r0, r2
 800cd0e:	f84a 0b04 	str.w	r0, [sl], #4
 800cd12:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd16:	459c      	cmp	ip, r3
 800cd18:	fa22 f20e 	lsr.w	r2, r2, lr
 800cd1c:	d8f3      	bhi.n	800cd06 <__lshift+0x6e>
 800cd1e:	ebac 0304 	sub.w	r3, ip, r4
 800cd22:	3b15      	subs	r3, #21
 800cd24:	f023 0303 	bic.w	r3, r3, #3
 800cd28:	3304      	adds	r3, #4
 800cd2a:	f104 0015 	add.w	r0, r4, #21
 800cd2e:	4584      	cmp	ip, r0
 800cd30:	bf38      	it	cc
 800cd32:	2304      	movcc	r3, #4
 800cd34:	50ca      	str	r2, [r1, r3]
 800cd36:	b10a      	cbz	r2, 800cd3c <__lshift+0xa4>
 800cd38:	f108 0602 	add.w	r6, r8, #2
 800cd3c:	3e01      	subs	r6, #1
 800cd3e:	4638      	mov	r0, r7
 800cd40:	612e      	str	r6, [r5, #16]
 800cd42:	4621      	mov	r1, r4
 800cd44:	f7ff fd90 	bl	800c868 <_Bfree>
 800cd48:	4628      	mov	r0, r5
 800cd4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd4e:	f842 0f04 	str.w	r0, [r2, #4]!
 800cd52:	3301      	adds	r3, #1
 800cd54:	e7c5      	b.n	800cce2 <__lshift+0x4a>
 800cd56:	3904      	subs	r1, #4
 800cd58:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd5c:	f841 2f04 	str.w	r2, [r1, #4]!
 800cd60:	459c      	cmp	ip, r3
 800cd62:	d8f9      	bhi.n	800cd58 <__lshift+0xc0>
 800cd64:	e7ea      	b.n	800cd3c <__lshift+0xa4>
 800cd66:	bf00      	nop
 800cd68:	0800df44 	.word	0x0800df44
 800cd6c:	0800dfb5 	.word	0x0800dfb5

0800cd70 <__mcmp>:
 800cd70:	690a      	ldr	r2, [r1, #16]
 800cd72:	4603      	mov	r3, r0
 800cd74:	6900      	ldr	r0, [r0, #16]
 800cd76:	1a80      	subs	r0, r0, r2
 800cd78:	b530      	push	{r4, r5, lr}
 800cd7a:	d10e      	bne.n	800cd9a <__mcmp+0x2a>
 800cd7c:	3314      	adds	r3, #20
 800cd7e:	3114      	adds	r1, #20
 800cd80:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cd84:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cd88:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cd8c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cd90:	4295      	cmp	r5, r2
 800cd92:	d003      	beq.n	800cd9c <__mcmp+0x2c>
 800cd94:	d205      	bcs.n	800cda2 <__mcmp+0x32>
 800cd96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd9a:	bd30      	pop	{r4, r5, pc}
 800cd9c:	42a3      	cmp	r3, r4
 800cd9e:	d3f3      	bcc.n	800cd88 <__mcmp+0x18>
 800cda0:	e7fb      	b.n	800cd9a <__mcmp+0x2a>
 800cda2:	2001      	movs	r0, #1
 800cda4:	e7f9      	b.n	800cd9a <__mcmp+0x2a>
	...

0800cda8 <__mdiff>:
 800cda8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdac:	4689      	mov	r9, r1
 800cdae:	4606      	mov	r6, r0
 800cdb0:	4611      	mov	r1, r2
 800cdb2:	4648      	mov	r0, r9
 800cdb4:	4614      	mov	r4, r2
 800cdb6:	f7ff ffdb 	bl	800cd70 <__mcmp>
 800cdba:	1e05      	subs	r5, r0, #0
 800cdbc:	d112      	bne.n	800cde4 <__mdiff+0x3c>
 800cdbe:	4629      	mov	r1, r5
 800cdc0:	4630      	mov	r0, r6
 800cdc2:	f7ff fd11 	bl	800c7e8 <_Balloc>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	b928      	cbnz	r0, 800cdd6 <__mdiff+0x2e>
 800cdca:	4b3f      	ldr	r3, [pc, #252]	@ (800cec8 <__mdiff+0x120>)
 800cdcc:	f240 2137 	movw	r1, #567	@ 0x237
 800cdd0:	483e      	ldr	r0, [pc, #248]	@ (800cecc <__mdiff+0x124>)
 800cdd2:	f7fe fa53 	bl	800b27c <__assert_func>
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cddc:	4610      	mov	r0, r2
 800cdde:	b003      	add	sp, #12
 800cde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde4:	bfbc      	itt	lt
 800cde6:	464b      	movlt	r3, r9
 800cde8:	46a1      	movlt	r9, r4
 800cdea:	4630      	mov	r0, r6
 800cdec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cdf0:	bfba      	itte	lt
 800cdf2:	461c      	movlt	r4, r3
 800cdf4:	2501      	movlt	r5, #1
 800cdf6:	2500      	movge	r5, #0
 800cdf8:	f7ff fcf6 	bl	800c7e8 <_Balloc>
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	b918      	cbnz	r0, 800ce08 <__mdiff+0x60>
 800ce00:	4b31      	ldr	r3, [pc, #196]	@ (800cec8 <__mdiff+0x120>)
 800ce02:	f240 2145 	movw	r1, #581	@ 0x245
 800ce06:	e7e3      	b.n	800cdd0 <__mdiff+0x28>
 800ce08:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ce0c:	6926      	ldr	r6, [r4, #16]
 800ce0e:	60c5      	str	r5, [r0, #12]
 800ce10:	f109 0310 	add.w	r3, r9, #16
 800ce14:	f109 0514 	add.w	r5, r9, #20
 800ce18:	f104 0e14 	add.w	lr, r4, #20
 800ce1c:	f100 0b14 	add.w	fp, r0, #20
 800ce20:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ce24:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ce28:	9301      	str	r3, [sp, #4]
 800ce2a:	46d9      	mov	r9, fp
 800ce2c:	f04f 0c00 	mov.w	ip, #0
 800ce30:	9b01      	ldr	r3, [sp, #4]
 800ce32:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ce36:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ce3a:	9301      	str	r3, [sp, #4]
 800ce3c:	fa1f f38a 	uxth.w	r3, sl
 800ce40:	4619      	mov	r1, r3
 800ce42:	b283      	uxth	r3, r0
 800ce44:	1acb      	subs	r3, r1, r3
 800ce46:	0c00      	lsrs	r0, r0, #16
 800ce48:	4463      	add	r3, ip
 800ce4a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ce4e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ce58:	4576      	cmp	r6, lr
 800ce5a:	f849 3b04 	str.w	r3, [r9], #4
 800ce5e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ce62:	d8e5      	bhi.n	800ce30 <__mdiff+0x88>
 800ce64:	1b33      	subs	r3, r6, r4
 800ce66:	3b15      	subs	r3, #21
 800ce68:	f023 0303 	bic.w	r3, r3, #3
 800ce6c:	3415      	adds	r4, #21
 800ce6e:	3304      	adds	r3, #4
 800ce70:	42a6      	cmp	r6, r4
 800ce72:	bf38      	it	cc
 800ce74:	2304      	movcc	r3, #4
 800ce76:	441d      	add	r5, r3
 800ce78:	445b      	add	r3, fp
 800ce7a:	461e      	mov	r6, r3
 800ce7c:	462c      	mov	r4, r5
 800ce7e:	4544      	cmp	r4, r8
 800ce80:	d30e      	bcc.n	800cea0 <__mdiff+0xf8>
 800ce82:	f108 0103 	add.w	r1, r8, #3
 800ce86:	1b49      	subs	r1, r1, r5
 800ce88:	f021 0103 	bic.w	r1, r1, #3
 800ce8c:	3d03      	subs	r5, #3
 800ce8e:	45a8      	cmp	r8, r5
 800ce90:	bf38      	it	cc
 800ce92:	2100      	movcc	r1, #0
 800ce94:	440b      	add	r3, r1
 800ce96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce9a:	b191      	cbz	r1, 800cec2 <__mdiff+0x11a>
 800ce9c:	6117      	str	r7, [r2, #16]
 800ce9e:	e79d      	b.n	800cddc <__mdiff+0x34>
 800cea0:	f854 1b04 	ldr.w	r1, [r4], #4
 800cea4:	46e6      	mov	lr, ip
 800cea6:	0c08      	lsrs	r0, r1, #16
 800cea8:	fa1c fc81 	uxtah	ip, ip, r1
 800ceac:	4471      	add	r1, lr
 800ceae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ceb2:	b289      	uxth	r1, r1
 800ceb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ceb8:	f846 1b04 	str.w	r1, [r6], #4
 800cebc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cec0:	e7dd      	b.n	800ce7e <__mdiff+0xd6>
 800cec2:	3f01      	subs	r7, #1
 800cec4:	e7e7      	b.n	800ce96 <__mdiff+0xee>
 800cec6:	bf00      	nop
 800cec8:	0800df44 	.word	0x0800df44
 800cecc:	0800dfb5 	.word	0x0800dfb5

0800ced0 <__ulp>:
 800ced0:	b082      	sub	sp, #8
 800ced2:	ed8d 0b00 	vstr	d0, [sp]
 800ced6:	9a01      	ldr	r2, [sp, #4]
 800ced8:	4b0f      	ldr	r3, [pc, #60]	@ (800cf18 <__ulp+0x48>)
 800ceda:	4013      	ands	r3, r2
 800cedc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	dc08      	bgt.n	800cef6 <__ulp+0x26>
 800cee4:	425b      	negs	r3, r3
 800cee6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ceea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ceee:	da04      	bge.n	800cefa <__ulp+0x2a>
 800cef0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cef4:	4113      	asrs	r3, r2
 800cef6:	2200      	movs	r2, #0
 800cef8:	e008      	b.n	800cf0c <__ulp+0x3c>
 800cefa:	f1a2 0314 	sub.w	r3, r2, #20
 800cefe:	2b1e      	cmp	r3, #30
 800cf00:	bfda      	itte	le
 800cf02:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800cf06:	40da      	lsrle	r2, r3
 800cf08:	2201      	movgt	r2, #1
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	4610      	mov	r0, r2
 800cf10:	ec41 0b10 	vmov	d0, r0, r1
 800cf14:	b002      	add	sp, #8
 800cf16:	4770      	bx	lr
 800cf18:	7ff00000 	.word	0x7ff00000

0800cf1c <__b2d>:
 800cf1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf20:	6906      	ldr	r6, [r0, #16]
 800cf22:	f100 0814 	add.w	r8, r0, #20
 800cf26:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cf2a:	1f37      	subs	r7, r6, #4
 800cf2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cf30:	4610      	mov	r0, r2
 800cf32:	f7ff fd4b 	bl	800c9cc <__hi0bits>
 800cf36:	f1c0 0320 	rsb	r3, r0, #32
 800cf3a:	280a      	cmp	r0, #10
 800cf3c:	600b      	str	r3, [r1, #0]
 800cf3e:	491b      	ldr	r1, [pc, #108]	@ (800cfac <__b2d+0x90>)
 800cf40:	dc15      	bgt.n	800cf6e <__b2d+0x52>
 800cf42:	f1c0 0c0b 	rsb	ip, r0, #11
 800cf46:	fa22 f30c 	lsr.w	r3, r2, ip
 800cf4a:	45b8      	cmp	r8, r7
 800cf4c:	ea43 0501 	orr.w	r5, r3, r1
 800cf50:	bf34      	ite	cc
 800cf52:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cf56:	2300      	movcs	r3, #0
 800cf58:	3015      	adds	r0, #21
 800cf5a:	fa02 f000 	lsl.w	r0, r2, r0
 800cf5e:	fa23 f30c 	lsr.w	r3, r3, ip
 800cf62:	4303      	orrs	r3, r0
 800cf64:	461c      	mov	r4, r3
 800cf66:	ec45 4b10 	vmov	d0, r4, r5
 800cf6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf6e:	45b8      	cmp	r8, r7
 800cf70:	bf3a      	itte	cc
 800cf72:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cf76:	f1a6 0708 	subcc.w	r7, r6, #8
 800cf7a:	2300      	movcs	r3, #0
 800cf7c:	380b      	subs	r0, #11
 800cf7e:	d012      	beq.n	800cfa6 <__b2d+0x8a>
 800cf80:	f1c0 0120 	rsb	r1, r0, #32
 800cf84:	fa23 f401 	lsr.w	r4, r3, r1
 800cf88:	4082      	lsls	r2, r0
 800cf8a:	4322      	orrs	r2, r4
 800cf8c:	4547      	cmp	r7, r8
 800cf8e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800cf92:	bf8c      	ite	hi
 800cf94:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cf98:	2200      	movls	r2, #0
 800cf9a:	4083      	lsls	r3, r0
 800cf9c:	40ca      	lsrs	r2, r1
 800cf9e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	e7de      	b.n	800cf64 <__b2d+0x48>
 800cfa6:	ea42 0501 	orr.w	r5, r2, r1
 800cfaa:	e7db      	b.n	800cf64 <__b2d+0x48>
 800cfac:	3ff00000 	.word	0x3ff00000

0800cfb0 <__d2b>:
 800cfb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cfb4:	460f      	mov	r7, r1
 800cfb6:	2101      	movs	r1, #1
 800cfb8:	ec59 8b10 	vmov	r8, r9, d0
 800cfbc:	4616      	mov	r6, r2
 800cfbe:	f7ff fc13 	bl	800c7e8 <_Balloc>
 800cfc2:	4604      	mov	r4, r0
 800cfc4:	b930      	cbnz	r0, 800cfd4 <__d2b+0x24>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	4b23      	ldr	r3, [pc, #140]	@ (800d058 <__d2b+0xa8>)
 800cfca:	4824      	ldr	r0, [pc, #144]	@ (800d05c <__d2b+0xac>)
 800cfcc:	f240 310f 	movw	r1, #783	@ 0x30f
 800cfd0:	f7fe f954 	bl	800b27c <__assert_func>
 800cfd4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cfd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cfdc:	b10d      	cbz	r5, 800cfe2 <__d2b+0x32>
 800cfde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cfe2:	9301      	str	r3, [sp, #4]
 800cfe4:	f1b8 0300 	subs.w	r3, r8, #0
 800cfe8:	d023      	beq.n	800d032 <__d2b+0x82>
 800cfea:	4668      	mov	r0, sp
 800cfec:	9300      	str	r3, [sp, #0]
 800cfee:	f7ff fd0c 	bl	800ca0a <__lo0bits>
 800cff2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cff6:	b1d0      	cbz	r0, 800d02e <__d2b+0x7e>
 800cff8:	f1c0 0320 	rsb	r3, r0, #32
 800cffc:	fa02 f303 	lsl.w	r3, r2, r3
 800d000:	430b      	orrs	r3, r1
 800d002:	40c2      	lsrs	r2, r0
 800d004:	6163      	str	r3, [r4, #20]
 800d006:	9201      	str	r2, [sp, #4]
 800d008:	9b01      	ldr	r3, [sp, #4]
 800d00a:	61a3      	str	r3, [r4, #24]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	bf0c      	ite	eq
 800d010:	2201      	moveq	r2, #1
 800d012:	2202      	movne	r2, #2
 800d014:	6122      	str	r2, [r4, #16]
 800d016:	b1a5      	cbz	r5, 800d042 <__d2b+0x92>
 800d018:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d01c:	4405      	add	r5, r0
 800d01e:	603d      	str	r5, [r7, #0]
 800d020:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d024:	6030      	str	r0, [r6, #0]
 800d026:	4620      	mov	r0, r4
 800d028:	b003      	add	sp, #12
 800d02a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d02e:	6161      	str	r1, [r4, #20]
 800d030:	e7ea      	b.n	800d008 <__d2b+0x58>
 800d032:	a801      	add	r0, sp, #4
 800d034:	f7ff fce9 	bl	800ca0a <__lo0bits>
 800d038:	9b01      	ldr	r3, [sp, #4]
 800d03a:	6163      	str	r3, [r4, #20]
 800d03c:	3020      	adds	r0, #32
 800d03e:	2201      	movs	r2, #1
 800d040:	e7e8      	b.n	800d014 <__d2b+0x64>
 800d042:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d046:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d04a:	6038      	str	r0, [r7, #0]
 800d04c:	6918      	ldr	r0, [r3, #16]
 800d04e:	f7ff fcbd 	bl	800c9cc <__hi0bits>
 800d052:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d056:	e7e5      	b.n	800d024 <__d2b+0x74>
 800d058:	0800df44 	.word	0x0800df44
 800d05c:	0800dfb5 	.word	0x0800dfb5

0800d060 <__ratio>:
 800d060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d064:	b085      	sub	sp, #20
 800d066:	e9cd 1000 	strd	r1, r0, [sp]
 800d06a:	a902      	add	r1, sp, #8
 800d06c:	f7ff ff56 	bl	800cf1c <__b2d>
 800d070:	9800      	ldr	r0, [sp, #0]
 800d072:	a903      	add	r1, sp, #12
 800d074:	ec55 4b10 	vmov	r4, r5, d0
 800d078:	f7ff ff50 	bl	800cf1c <__b2d>
 800d07c:	9b01      	ldr	r3, [sp, #4]
 800d07e:	6919      	ldr	r1, [r3, #16]
 800d080:	9b00      	ldr	r3, [sp, #0]
 800d082:	691b      	ldr	r3, [r3, #16]
 800d084:	1ac9      	subs	r1, r1, r3
 800d086:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d08a:	1a9b      	subs	r3, r3, r2
 800d08c:	ec5b ab10 	vmov	sl, fp, d0
 800d090:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d094:	2b00      	cmp	r3, #0
 800d096:	bfce      	itee	gt
 800d098:	462a      	movgt	r2, r5
 800d09a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d09e:	465a      	movle	r2, fp
 800d0a0:	462f      	mov	r7, r5
 800d0a2:	46d9      	mov	r9, fp
 800d0a4:	bfcc      	ite	gt
 800d0a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d0aa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d0ae:	464b      	mov	r3, r9
 800d0b0:	4652      	mov	r2, sl
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	4639      	mov	r1, r7
 800d0b6:	f7f3 fc01 	bl	80008bc <__aeabi_ddiv>
 800d0ba:	ec41 0b10 	vmov	d0, r0, r1
 800d0be:	b005      	add	sp, #20
 800d0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d0c4 <__copybits>:
 800d0c4:	3901      	subs	r1, #1
 800d0c6:	b570      	push	{r4, r5, r6, lr}
 800d0c8:	1149      	asrs	r1, r1, #5
 800d0ca:	6914      	ldr	r4, [r2, #16]
 800d0cc:	3101      	adds	r1, #1
 800d0ce:	f102 0314 	add.w	r3, r2, #20
 800d0d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d0d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d0da:	1f05      	subs	r5, r0, #4
 800d0dc:	42a3      	cmp	r3, r4
 800d0de:	d30c      	bcc.n	800d0fa <__copybits+0x36>
 800d0e0:	1aa3      	subs	r3, r4, r2
 800d0e2:	3b11      	subs	r3, #17
 800d0e4:	f023 0303 	bic.w	r3, r3, #3
 800d0e8:	3211      	adds	r2, #17
 800d0ea:	42a2      	cmp	r2, r4
 800d0ec:	bf88      	it	hi
 800d0ee:	2300      	movhi	r3, #0
 800d0f0:	4418      	add	r0, r3
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	4288      	cmp	r0, r1
 800d0f6:	d305      	bcc.n	800d104 <__copybits+0x40>
 800d0f8:	bd70      	pop	{r4, r5, r6, pc}
 800d0fa:	f853 6b04 	ldr.w	r6, [r3], #4
 800d0fe:	f845 6f04 	str.w	r6, [r5, #4]!
 800d102:	e7eb      	b.n	800d0dc <__copybits+0x18>
 800d104:	f840 3b04 	str.w	r3, [r0], #4
 800d108:	e7f4      	b.n	800d0f4 <__copybits+0x30>

0800d10a <__any_on>:
 800d10a:	f100 0214 	add.w	r2, r0, #20
 800d10e:	6900      	ldr	r0, [r0, #16]
 800d110:	114b      	asrs	r3, r1, #5
 800d112:	4298      	cmp	r0, r3
 800d114:	b510      	push	{r4, lr}
 800d116:	db11      	blt.n	800d13c <__any_on+0x32>
 800d118:	dd0a      	ble.n	800d130 <__any_on+0x26>
 800d11a:	f011 011f 	ands.w	r1, r1, #31
 800d11e:	d007      	beq.n	800d130 <__any_on+0x26>
 800d120:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d124:	fa24 f001 	lsr.w	r0, r4, r1
 800d128:	fa00 f101 	lsl.w	r1, r0, r1
 800d12c:	428c      	cmp	r4, r1
 800d12e:	d10b      	bne.n	800d148 <__any_on+0x3e>
 800d130:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d134:	4293      	cmp	r3, r2
 800d136:	d803      	bhi.n	800d140 <__any_on+0x36>
 800d138:	2000      	movs	r0, #0
 800d13a:	bd10      	pop	{r4, pc}
 800d13c:	4603      	mov	r3, r0
 800d13e:	e7f7      	b.n	800d130 <__any_on+0x26>
 800d140:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d144:	2900      	cmp	r1, #0
 800d146:	d0f5      	beq.n	800d134 <__any_on+0x2a>
 800d148:	2001      	movs	r0, #1
 800d14a:	e7f6      	b.n	800d13a <__any_on+0x30>

0800d14c <__ascii_wctomb>:
 800d14c:	4603      	mov	r3, r0
 800d14e:	4608      	mov	r0, r1
 800d150:	b141      	cbz	r1, 800d164 <__ascii_wctomb+0x18>
 800d152:	2aff      	cmp	r2, #255	@ 0xff
 800d154:	d904      	bls.n	800d160 <__ascii_wctomb+0x14>
 800d156:	228a      	movs	r2, #138	@ 0x8a
 800d158:	601a      	str	r2, [r3, #0]
 800d15a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d15e:	4770      	bx	lr
 800d160:	700a      	strb	r2, [r1, #0]
 800d162:	2001      	movs	r0, #1
 800d164:	4770      	bx	lr

0800d166 <__ssputs_r>:
 800d166:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d16a:	688e      	ldr	r6, [r1, #8]
 800d16c:	461f      	mov	r7, r3
 800d16e:	42be      	cmp	r6, r7
 800d170:	680b      	ldr	r3, [r1, #0]
 800d172:	4682      	mov	sl, r0
 800d174:	460c      	mov	r4, r1
 800d176:	4690      	mov	r8, r2
 800d178:	d82d      	bhi.n	800d1d6 <__ssputs_r+0x70>
 800d17a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d17e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d182:	d026      	beq.n	800d1d2 <__ssputs_r+0x6c>
 800d184:	6965      	ldr	r5, [r4, #20]
 800d186:	6909      	ldr	r1, [r1, #16]
 800d188:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d18c:	eba3 0901 	sub.w	r9, r3, r1
 800d190:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d194:	1c7b      	adds	r3, r7, #1
 800d196:	444b      	add	r3, r9
 800d198:	106d      	asrs	r5, r5, #1
 800d19a:	429d      	cmp	r5, r3
 800d19c:	bf38      	it	cc
 800d19e:	461d      	movcc	r5, r3
 800d1a0:	0553      	lsls	r3, r2, #21
 800d1a2:	d527      	bpl.n	800d1f4 <__ssputs_r+0x8e>
 800d1a4:	4629      	mov	r1, r5
 800d1a6:	f7ff fa81 	bl	800c6ac <_malloc_r>
 800d1aa:	4606      	mov	r6, r0
 800d1ac:	b360      	cbz	r0, 800d208 <__ssputs_r+0xa2>
 800d1ae:	6921      	ldr	r1, [r4, #16]
 800d1b0:	464a      	mov	r2, r9
 800d1b2:	f7fe f846 	bl	800b242 <memcpy>
 800d1b6:	89a3      	ldrh	r3, [r4, #12]
 800d1b8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d1bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1c0:	81a3      	strh	r3, [r4, #12]
 800d1c2:	6126      	str	r6, [r4, #16]
 800d1c4:	6165      	str	r5, [r4, #20]
 800d1c6:	444e      	add	r6, r9
 800d1c8:	eba5 0509 	sub.w	r5, r5, r9
 800d1cc:	6026      	str	r6, [r4, #0]
 800d1ce:	60a5      	str	r5, [r4, #8]
 800d1d0:	463e      	mov	r6, r7
 800d1d2:	42be      	cmp	r6, r7
 800d1d4:	d900      	bls.n	800d1d8 <__ssputs_r+0x72>
 800d1d6:	463e      	mov	r6, r7
 800d1d8:	6820      	ldr	r0, [r4, #0]
 800d1da:	4632      	mov	r2, r6
 800d1dc:	4641      	mov	r1, r8
 800d1de:	f000 fbad 	bl	800d93c <memmove>
 800d1e2:	68a3      	ldr	r3, [r4, #8]
 800d1e4:	1b9b      	subs	r3, r3, r6
 800d1e6:	60a3      	str	r3, [r4, #8]
 800d1e8:	6823      	ldr	r3, [r4, #0]
 800d1ea:	4433      	add	r3, r6
 800d1ec:	6023      	str	r3, [r4, #0]
 800d1ee:	2000      	movs	r0, #0
 800d1f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1f4:	462a      	mov	r2, r5
 800d1f6:	f000 fbe6 	bl	800d9c6 <_realloc_r>
 800d1fa:	4606      	mov	r6, r0
 800d1fc:	2800      	cmp	r0, #0
 800d1fe:	d1e0      	bne.n	800d1c2 <__ssputs_r+0x5c>
 800d200:	6921      	ldr	r1, [r4, #16]
 800d202:	4650      	mov	r0, sl
 800d204:	f7fe fea4 	bl	800bf50 <_free_r>
 800d208:	230c      	movs	r3, #12
 800d20a:	f8ca 3000 	str.w	r3, [sl]
 800d20e:	89a3      	ldrh	r3, [r4, #12]
 800d210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d214:	81a3      	strh	r3, [r4, #12]
 800d216:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d21a:	e7e9      	b.n	800d1f0 <__ssputs_r+0x8a>

0800d21c <_svfiprintf_r>:
 800d21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d220:	4698      	mov	r8, r3
 800d222:	898b      	ldrh	r3, [r1, #12]
 800d224:	061b      	lsls	r3, r3, #24
 800d226:	b09d      	sub	sp, #116	@ 0x74
 800d228:	4607      	mov	r7, r0
 800d22a:	460d      	mov	r5, r1
 800d22c:	4614      	mov	r4, r2
 800d22e:	d510      	bpl.n	800d252 <_svfiprintf_r+0x36>
 800d230:	690b      	ldr	r3, [r1, #16]
 800d232:	b973      	cbnz	r3, 800d252 <_svfiprintf_r+0x36>
 800d234:	2140      	movs	r1, #64	@ 0x40
 800d236:	f7ff fa39 	bl	800c6ac <_malloc_r>
 800d23a:	6028      	str	r0, [r5, #0]
 800d23c:	6128      	str	r0, [r5, #16]
 800d23e:	b930      	cbnz	r0, 800d24e <_svfiprintf_r+0x32>
 800d240:	230c      	movs	r3, #12
 800d242:	603b      	str	r3, [r7, #0]
 800d244:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d248:	b01d      	add	sp, #116	@ 0x74
 800d24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d24e:	2340      	movs	r3, #64	@ 0x40
 800d250:	616b      	str	r3, [r5, #20]
 800d252:	2300      	movs	r3, #0
 800d254:	9309      	str	r3, [sp, #36]	@ 0x24
 800d256:	2320      	movs	r3, #32
 800d258:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d25c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d260:	2330      	movs	r3, #48	@ 0x30
 800d262:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d400 <_svfiprintf_r+0x1e4>
 800d266:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d26a:	f04f 0901 	mov.w	r9, #1
 800d26e:	4623      	mov	r3, r4
 800d270:	469a      	mov	sl, r3
 800d272:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d276:	b10a      	cbz	r2, 800d27c <_svfiprintf_r+0x60>
 800d278:	2a25      	cmp	r2, #37	@ 0x25
 800d27a:	d1f9      	bne.n	800d270 <_svfiprintf_r+0x54>
 800d27c:	ebba 0b04 	subs.w	fp, sl, r4
 800d280:	d00b      	beq.n	800d29a <_svfiprintf_r+0x7e>
 800d282:	465b      	mov	r3, fp
 800d284:	4622      	mov	r2, r4
 800d286:	4629      	mov	r1, r5
 800d288:	4638      	mov	r0, r7
 800d28a:	f7ff ff6c 	bl	800d166 <__ssputs_r>
 800d28e:	3001      	adds	r0, #1
 800d290:	f000 80a7 	beq.w	800d3e2 <_svfiprintf_r+0x1c6>
 800d294:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d296:	445a      	add	r2, fp
 800d298:	9209      	str	r2, [sp, #36]	@ 0x24
 800d29a:	f89a 3000 	ldrb.w	r3, [sl]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	f000 809f 	beq.w	800d3e2 <_svfiprintf_r+0x1c6>
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d2aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2ae:	f10a 0a01 	add.w	sl, sl, #1
 800d2b2:	9304      	str	r3, [sp, #16]
 800d2b4:	9307      	str	r3, [sp, #28]
 800d2b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d2ba:	931a      	str	r3, [sp, #104]	@ 0x68
 800d2bc:	4654      	mov	r4, sl
 800d2be:	2205      	movs	r2, #5
 800d2c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2c4:	484e      	ldr	r0, [pc, #312]	@ (800d400 <_svfiprintf_r+0x1e4>)
 800d2c6:	f7f2 ffbb 	bl	8000240 <memchr>
 800d2ca:	9a04      	ldr	r2, [sp, #16]
 800d2cc:	b9d8      	cbnz	r0, 800d306 <_svfiprintf_r+0xea>
 800d2ce:	06d0      	lsls	r0, r2, #27
 800d2d0:	bf44      	itt	mi
 800d2d2:	2320      	movmi	r3, #32
 800d2d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2d8:	0711      	lsls	r1, r2, #28
 800d2da:	bf44      	itt	mi
 800d2dc:	232b      	movmi	r3, #43	@ 0x2b
 800d2de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2e2:	f89a 3000 	ldrb.w	r3, [sl]
 800d2e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2e8:	d015      	beq.n	800d316 <_svfiprintf_r+0xfa>
 800d2ea:	9a07      	ldr	r2, [sp, #28]
 800d2ec:	4654      	mov	r4, sl
 800d2ee:	2000      	movs	r0, #0
 800d2f0:	f04f 0c0a 	mov.w	ip, #10
 800d2f4:	4621      	mov	r1, r4
 800d2f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2fa:	3b30      	subs	r3, #48	@ 0x30
 800d2fc:	2b09      	cmp	r3, #9
 800d2fe:	d94b      	bls.n	800d398 <_svfiprintf_r+0x17c>
 800d300:	b1b0      	cbz	r0, 800d330 <_svfiprintf_r+0x114>
 800d302:	9207      	str	r2, [sp, #28]
 800d304:	e014      	b.n	800d330 <_svfiprintf_r+0x114>
 800d306:	eba0 0308 	sub.w	r3, r0, r8
 800d30a:	fa09 f303 	lsl.w	r3, r9, r3
 800d30e:	4313      	orrs	r3, r2
 800d310:	9304      	str	r3, [sp, #16]
 800d312:	46a2      	mov	sl, r4
 800d314:	e7d2      	b.n	800d2bc <_svfiprintf_r+0xa0>
 800d316:	9b03      	ldr	r3, [sp, #12]
 800d318:	1d19      	adds	r1, r3, #4
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	9103      	str	r1, [sp, #12]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	bfbb      	ittet	lt
 800d322:	425b      	neglt	r3, r3
 800d324:	f042 0202 	orrlt.w	r2, r2, #2
 800d328:	9307      	strge	r3, [sp, #28]
 800d32a:	9307      	strlt	r3, [sp, #28]
 800d32c:	bfb8      	it	lt
 800d32e:	9204      	strlt	r2, [sp, #16]
 800d330:	7823      	ldrb	r3, [r4, #0]
 800d332:	2b2e      	cmp	r3, #46	@ 0x2e
 800d334:	d10a      	bne.n	800d34c <_svfiprintf_r+0x130>
 800d336:	7863      	ldrb	r3, [r4, #1]
 800d338:	2b2a      	cmp	r3, #42	@ 0x2a
 800d33a:	d132      	bne.n	800d3a2 <_svfiprintf_r+0x186>
 800d33c:	9b03      	ldr	r3, [sp, #12]
 800d33e:	1d1a      	adds	r2, r3, #4
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	9203      	str	r2, [sp, #12]
 800d344:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d348:	3402      	adds	r4, #2
 800d34a:	9305      	str	r3, [sp, #20]
 800d34c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d410 <_svfiprintf_r+0x1f4>
 800d350:	7821      	ldrb	r1, [r4, #0]
 800d352:	2203      	movs	r2, #3
 800d354:	4650      	mov	r0, sl
 800d356:	f7f2 ff73 	bl	8000240 <memchr>
 800d35a:	b138      	cbz	r0, 800d36c <_svfiprintf_r+0x150>
 800d35c:	9b04      	ldr	r3, [sp, #16]
 800d35e:	eba0 000a 	sub.w	r0, r0, sl
 800d362:	2240      	movs	r2, #64	@ 0x40
 800d364:	4082      	lsls	r2, r0
 800d366:	4313      	orrs	r3, r2
 800d368:	3401      	adds	r4, #1
 800d36a:	9304      	str	r3, [sp, #16]
 800d36c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d370:	4824      	ldr	r0, [pc, #144]	@ (800d404 <_svfiprintf_r+0x1e8>)
 800d372:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d376:	2206      	movs	r2, #6
 800d378:	f7f2 ff62 	bl	8000240 <memchr>
 800d37c:	2800      	cmp	r0, #0
 800d37e:	d036      	beq.n	800d3ee <_svfiprintf_r+0x1d2>
 800d380:	4b21      	ldr	r3, [pc, #132]	@ (800d408 <_svfiprintf_r+0x1ec>)
 800d382:	bb1b      	cbnz	r3, 800d3cc <_svfiprintf_r+0x1b0>
 800d384:	9b03      	ldr	r3, [sp, #12]
 800d386:	3307      	adds	r3, #7
 800d388:	f023 0307 	bic.w	r3, r3, #7
 800d38c:	3308      	adds	r3, #8
 800d38e:	9303      	str	r3, [sp, #12]
 800d390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d392:	4433      	add	r3, r6
 800d394:	9309      	str	r3, [sp, #36]	@ 0x24
 800d396:	e76a      	b.n	800d26e <_svfiprintf_r+0x52>
 800d398:	fb0c 3202 	mla	r2, ip, r2, r3
 800d39c:	460c      	mov	r4, r1
 800d39e:	2001      	movs	r0, #1
 800d3a0:	e7a8      	b.n	800d2f4 <_svfiprintf_r+0xd8>
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	3401      	adds	r4, #1
 800d3a6:	9305      	str	r3, [sp, #20]
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	f04f 0c0a 	mov.w	ip, #10
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3b4:	3a30      	subs	r2, #48	@ 0x30
 800d3b6:	2a09      	cmp	r2, #9
 800d3b8:	d903      	bls.n	800d3c2 <_svfiprintf_r+0x1a6>
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d0c6      	beq.n	800d34c <_svfiprintf_r+0x130>
 800d3be:	9105      	str	r1, [sp, #20]
 800d3c0:	e7c4      	b.n	800d34c <_svfiprintf_r+0x130>
 800d3c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	e7f0      	b.n	800d3ae <_svfiprintf_r+0x192>
 800d3cc:	ab03      	add	r3, sp, #12
 800d3ce:	9300      	str	r3, [sp, #0]
 800d3d0:	462a      	mov	r2, r5
 800d3d2:	4b0e      	ldr	r3, [pc, #56]	@ (800d40c <_svfiprintf_r+0x1f0>)
 800d3d4:	a904      	add	r1, sp, #16
 800d3d6:	4638      	mov	r0, r7
 800d3d8:	f7fc ff42 	bl	800a260 <_printf_float>
 800d3dc:	1c42      	adds	r2, r0, #1
 800d3de:	4606      	mov	r6, r0
 800d3e0:	d1d6      	bne.n	800d390 <_svfiprintf_r+0x174>
 800d3e2:	89ab      	ldrh	r3, [r5, #12]
 800d3e4:	065b      	lsls	r3, r3, #25
 800d3e6:	f53f af2d 	bmi.w	800d244 <_svfiprintf_r+0x28>
 800d3ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3ec:	e72c      	b.n	800d248 <_svfiprintf_r+0x2c>
 800d3ee:	ab03      	add	r3, sp, #12
 800d3f0:	9300      	str	r3, [sp, #0]
 800d3f2:	462a      	mov	r2, r5
 800d3f4:	4b05      	ldr	r3, [pc, #20]	@ (800d40c <_svfiprintf_r+0x1f0>)
 800d3f6:	a904      	add	r1, sp, #16
 800d3f8:	4638      	mov	r0, r7
 800d3fa:	f7fd f9c9 	bl	800a790 <_printf_i>
 800d3fe:	e7ed      	b.n	800d3dc <_svfiprintf_r+0x1c0>
 800d400:	0800e110 	.word	0x0800e110
 800d404:	0800e11a 	.word	0x0800e11a
 800d408:	0800a261 	.word	0x0800a261
 800d40c:	0800d167 	.word	0x0800d167
 800d410:	0800e116 	.word	0x0800e116

0800d414 <__sfputc_r>:
 800d414:	6893      	ldr	r3, [r2, #8]
 800d416:	3b01      	subs	r3, #1
 800d418:	2b00      	cmp	r3, #0
 800d41a:	b410      	push	{r4}
 800d41c:	6093      	str	r3, [r2, #8]
 800d41e:	da08      	bge.n	800d432 <__sfputc_r+0x1e>
 800d420:	6994      	ldr	r4, [r2, #24]
 800d422:	42a3      	cmp	r3, r4
 800d424:	db01      	blt.n	800d42a <__sfputc_r+0x16>
 800d426:	290a      	cmp	r1, #10
 800d428:	d103      	bne.n	800d432 <__sfputc_r+0x1e>
 800d42a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d42e:	f000 b9f1 	b.w	800d814 <__swbuf_r>
 800d432:	6813      	ldr	r3, [r2, #0]
 800d434:	1c58      	adds	r0, r3, #1
 800d436:	6010      	str	r0, [r2, #0]
 800d438:	7019      	strb	r1, [r3, #0]
 800d43a:	4608      	mov	r0, r1
 800d43c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d440:	4770      	bx	lr

0800d442 <__sfputs_r>:
 800d442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d444:	4606      	mov	r6, r0
 800d446:	460f      	mov	r7, r1
 800d448:	4614      	mov	r4, r2
 800d44a:	18d5      	adds	r5, r2, r3
 800d44c:	42ac      	cmp	r4, r5
 800d44e:	d101      	bne.n	800d454 <__sfputs_r+0x12>
 800d450:	2000      	movs	r0, #0
 800d452:	e007      	b.n	800d464 <__sfputs_r+0x22>
 800d454:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d458:	463a      	mov	r2, r7
 800d45a:	4630      	mov	r0, r6
 800d45c:	f7ff ffda 	bl	800d414 <__sfputc_r>
 800d460:	1c43      	adds	r3, r0, #1
 800d462:	d1f3      	bne.n	800d44c <__sfputs_r+0xa>
 800d464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d468 <_vfiprintf_r>:
 800d468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d46c:	460d      	mov	r5, r1
 800d46e:	b09d      	sub	sp, #116	@ 0x74
 800d470:	4614      	mov	r4, r2
 800d472:	4698      	mov	r8, r3
 800d474:	4606      	mov	r6, r0
 800d476:	b118      	cbz	r0, 800d480 <_vfiprintf_r+0x18>
 800d478:	6a03      	ldr	r3, [r0, #32]
 800d47a:	b90b      	cbnz	r3, 800d480 <_vfiprintf_r+0x18>
 800d47c:	f7fd fd48 	bl	800af10 <__sinit>
 800d480:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d482:	07d9      	lsls	r1, r3, #31
 800d484:	d405      	bmi.n	800d492 <_vfiprintf_r+0x2a>
 800d486:	89ab      	ldrh	r3, [r5, #12]
 800d488:	059a      	lsls	r2, r3, #22
 800d48a:	d402      	bmi.n	800d492 <_vfiprintf_r+0x2a>
 800d48c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d48e:	f7fd fed6 	bl	800b23e <__retarget_lock_acquire_recursive>
 800d492:	89ab      	ldrh	r3, [r5, #12]
 800d494:	071b      	lsls	r3, r3, #28
 800d496:	d501      	bpl.n	800d49c <_vfiprintf_r+0x34>
 800d498:	692b      	ldr	r3, [r5, #16]
 800d49a:	b99b      	cbnz	r3, 800d4c4 <_vfiprintf_r+0x5c>
 800d49c:	4629      	mov	r1, r5
 800d49e:	4630      	mov	r0, r6
 800d4a0:	f000 f9f6 	bl	800d890 <__swsetup_r>
 800d4a4:	b170      	cbz	r0, 800d4c4 <_vfiprintf_r+0x5c>
 800d4a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d4a8:	07dc      	lsls	r4, r3, #31
 800d4aa:	d504      	bpl.n	800d4b6 <_vfiprintf_r+0x4e>
 800d4ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4b0:	b01d      	add	sp, #116	@ 0x74
 800d4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4b6:	89ab      	ldrh	r3, [r5, #12]
 800d4b8:	0598      	lsls	r0, r3, #22
 800d4ba:	d4f7      	bmi.n	800d4ac <_vfiprintf_r+0x44>
 800d4bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4be:	f7fd febf 	bl	800b240 <__retarget_lock_release_recursive>
 800d4c2:	e7f3      	b.n	800d4ac <_vfiprintf_r+0x44>
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4c8:	2320      	movs	r3, #32
 800d4ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d4ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4d2:	2330      	movs	r3, #48	@ 0x30
 800d4d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d684 <_vfiprintf_r+0x21c>
 800d4d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d4dc:	f04f 0901 	mov.w	r9, #1
 800d4e0:	4623      	mov	r3, r4
 800d4e2:	469a      	mov	sl, r3
 800d4e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4e8:	b10a      	cbz	r2, 800d4ee <_vfiprintf_r+0x86>
 800d4ea:	2a25      	cmp	r2, #37	@ 0x25
 800d4ec:	d1f9      	bne.n	800d4e2 <_vfiprintf_r+0x7a>
 800d4ee:	ebba 0b04 	subs.w	fp, sl, r4
 800d4f2:	d00b      	beq.n	800d50c <_vfiprintf_r+0xa4>
 800d4f4:	465b      	mov	r3, fp
 800d4f6:	4622      	mov	r2, r4
 800d4f8:	4629      	mov	r1, r5
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	f7ff ffa1 	bl	800d442 <__sfputs_r>
 800d500:	3001      	adds	r0, #1
 800d502:	f000 80a7 	beq.w	800d654 <_vfiprintf_r+0x1ec>
 800d506:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d508:	445a      	add	r2, fp
 800d50a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d50c:	f89a 3000 	ldrb.w	r3, [sl]
 800d510:	2b00      	cmp	r3, #0
 800d512:	f000 809f 	beq.w	800d654 <_vfiprintf_r+0x1ec>
 800d516:	2300      	movs	r3, #0
 800d518:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d51c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d520:	f10a 0a01 	add.w	sl, sl, #1
 800d524:	9304      	str	r3, [sp, #16]
 800d526:	9307      	str	r3, [sp, #28]
 800d528:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d52c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d52e:	4654      	mov	r4, sl
 800d530:	2205      	movs	r2, #5
 800d532:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d536:	4853      	ldr	r0, [pc, #332]	@ (800d684 <_vfiprintf_r+0x21c>)
 800d538:	f7f2 fe82 	bl	8000240 <memchr>
 800d53c:	9a04      	ldr	r2, [sp, #16]
 800d53e:	b9d8      	cbnz	r0, 800d578 <_vfiprintf_r+0x110>
 800d540:	06d1      	lsls	r1, r2, #27
 800d542:	bf44      	itt	mi
 800d544:	2320      	movmi	r3, #32
 800d546:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d54a:	0713      	lsls	r3, r2, #28
 800d54c:	bf44      	itt	mi
 800d54e:	232b      	movmi	r3, #43	@ 0x2b
 800d550:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d554:	f89a 3000 	ldrb.w	r3, [sl]
 800d558:	2b2a      	cmp	r3, #42	@ 0x2a
 800d55a:	d015      	beq.n	800d588 <_vfiprintf_r+0x120>
 800d55c:	9a07      	ldr	r2, [sp, #28]
 800d55e:	4654      	mov	r4, sl
 800d560:	2000      	movs	r0, #0
 800d562:	f04f 0c0a 	mov.w	ip, #10
 800d566:	4621      	mov	r1, r4
 800d568:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d56c:	3b30      	subs	r3, #48	@ 0x30
 800d56e:	2b09      	cmp	r3, #9
 800d570:	d94b      	bls.n	800d60a <_vfiprintf_r+0x1a2>
 800d572:	b1b0      	cbz	r0, 800d5a2 <_vfiprintf_r+0x13a>
 800d574:	9207      	str	r2, [sp, #28]
 800d576:	e014      	b.n	800d5a2 <_vfiprintf_r+0x13a>
 800d578:	eba0 0308 	sub.w	r3, r0, r8
 800d57c:	fa09 f303 	lsl.w	r3, r9, r3
 800d580:	4313      	orrs	r3, r2
 800d582:	9304      	str	r3, [sp, #16]
 800d584:	46a2      	mov	sl, r4
 800d586:	e7d2      	b.n	800d52e <_vfiprintf_r+0xc6>
 800d588:	9b03      	ldr	r3, [sp, #12]
 800d58a:	1d19      	adds	r1, r3, #4
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	9103      	str	r1, [sp, #12]
 800d590:	2b00      	cmp	r3, #0
 800d592:	bfbb      	ittet	lt
 800d594:	425b      	neglt	r3, r3
 800d596:	f042 0202 	orrlt.w	r2, r2, #2
 800d59a:	9307      	strge	r3, [sp, #28]
 800d59c:	9307      	strlt	r3, [sp, #28]
 800d59e:	bfb8      	it	lt
 800d5a0:	9204      	strlt	r2, [sp, #16]
 800d5a2:	7823      	ldrb	r3, [r4, #0]
 800d5a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5a6:	d10a      	bne.n	800d5be <_vfiprintf_r+0x156>
 800d5a8:	7863      	ldrb	r3, [r4, #1]
 800d5aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5ac:	d132      	bne.n	800d614 <_vfiprintf_r+0x1ac>
 800d5ae:	9b03      	ldr	r3, [sp, #12]
 800d5b0:	1d1a      	adds	r2, r3, #4
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	9203      	str	r2, [sp, #12]
 800d5b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d5ba:	3402      	adds	r4, #2
 800d5bc:	9305      	str	r3, [sp, #20]
 800d5be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d694 <_vfiprintf_r+0x22c>
 800d5c2:	7821      	ldrb	r1, [r4, #0]
 800d5c4:	2203      	movs	r2, #3
 800d5c6:	4650      	mov	r0, sl
 800d5c8:	f7f2 fe3a 	bl	8000240 <memchr>
 800d5cc:	b138      	cbz	r0, 800d5de <_vfiprintf_r+0x176>
 800d5ce:	9b04      	ldr	r3, [sp, #16]
 800d5d0:	eba0 000a 	sub.w	r0, r0, sl
 800d5d4:	2240      	movs	r2, #64	@ 0x40
 800d5d6:	4082      	lsls	r2, r0
 800d5d8:	4313      	orrs	r3, r2
 800d5da:	3401      	adds	r4, #1
 800d5dc:	9304      	str	r3, [sp, #16]
 800d5de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5e2:	4829      	ldr	r0, [pc, #164]	@ (800d688 <_vfiprintf_r+0x220>)
 800d5e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d5e8:	2206      	movs	r2, #6
 800d5ea:	f7f2 fe29 	bl	8000240 <memchr>
 800d5ee:	2800      	cmp	r0, #0
 800d5f0:	d03f      	beq.n	800d672 <_vfiprintf_r+0x20a>
 800d5f2:	4b26      	ldr	r3, [pc, #152]	@ (800d68c <_vfiprintf_r+0x224>)
 800d5f4:	bb1b      	cbnz	r3, 800d63e <_vfiprintf_r+0x1d6>
 800d5f6:	9b03      	ldr	r3, [sp, #12]
 800d5f8:	3307      	adds	r3, #7
 800d5fa:	f023 0307 	bic.w	r3, r3, #7
 800d5fe:	3308      	adds	r3, #8
 800d600:	9303      	str	r3, [sp, #12]
 800d602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d604:	443b      	add	r3, r7
 800d606:	9309      	str	r3, [sp, #36]	@ 0x24
 800d608:	e76a      	b.n	800d4e0 <_vfiprintf_r+0x78>
 800d60a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d60e:	460c      	mov	r4, r1
 800d610:	2001      	movs	r0, #1
 800d612:	e7a8      	b.n	800d566 <_vfiprintf_r+0xfe>
 800d614:	2300      	movs	r3, #0
 800d616:	3401      	adds	r4, #1
 800d618:	9305      	str	r3, [sp, #20]
 800d61a:	4619      	mov	r1, r3
 800d61c:	f04f 0c0a 	mov.w	ip, #10
 800d620:	4620      	mov	r0, r4
 800d622:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d626:	3a30      	subs	r2, #48	@ 0x30
 800d628:	2a09      	cmp	r2, #9
 800d62a:	d903      	bls.n	800d634 <_vfiprintf_r+0x1cc>
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d0c6      	beq.n	800d5be <_vfiprintf_r+0x156>
 800d630:	9105      	str	r1, [sp, #20]
 800d632:	e7c4      	b.n	800d5be <_vfiprintf_r+0x156>
 800d634:	fb0c 2101 	mla	r1, ip, r1, r2
 800d638:	4604      	mov	r4, r0
 800d63a:	2301      	movs	r3, #1
 800d63c:	e7f0      	b.n	800d620 <_vfiprintf_r+0x1b8>
 800d63e:	ab03      	add	r3, sp, #12
 800d640:	9300      	str	r3, [sp, #0]
 800d642:	462a      	mov	r2, r5
 800d644:	4b12      	ldr	r3, [pc, #72]	@ (800d690 <_vfiprintf_r+0x228>)
 800d646:	a904      	add	r1, sp, #16
 800d648:	4630      	mov	r0, r6
 800d64a:	f7fc fe09 	bl	800a260 <_printf_float>
 800d64e:	4607      	mov	r7, r0
 800d650:	1c78      	adds	r0, r7, #1
 800d652:	d1d6      	bne.n	800d602 <_vfiprintf_r+0x19a>
 800d654:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d656:	07d9      	lsls	r1, r3, #31
 800d658:	d405      	bmi.n	800d666 <_vfiprintf_r+0x1fe>
 800d65a:	89ab      	ldrh	r3, [r5, #12]
 800d65c:	059a      	lsls	r2, r3, #22
 800d65e:	d402      	bmi.n	800d666 <_vfiprintf_r+0x1fe>
 800d660:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d662:	f7fd fded 	bl	800b240 <__retarget_lock_release_recursive>
 800d666:	89ab      	ldrh	r3, [r5, #12]
 800d668:	065b      	lsls	r3, r3, #25
 800d66a:	f53f af1f 	bmi.w	800d4ac <_vfiprintf_r+0x44>
 800d66e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d670:	e71e      	b.n	800d4b0 <_vfiprintf_r+0x48>
 800d672:	ab03      	add	r3, sp, #12
 800d674:	9300      	str	r3, [sp, #0]
 800d676:	462a      	mov	r2, r5
 800d678:	4b05      	ldr	r3, [pc, #20]	@ (800d690 <_vfiprintf_r+0x228>)
 800d67a:	a904      	add	r1, sp, #16
 800d67c:	4630      	mov	r0, r6
 800d67e:	f7fd f887 	bl	800a790 <_printf_i>
 800d682:	e7e4      	b.n	800d64e <_vfiprintf_r+0x1e6>
 800d684:	0800e110 	.word	0x0800e110
 800d688:	0800e11a 	.word	0x0800e11a
 800d68c:	0800a261 	.word	0x0800a261
 800d690:	0800d443 	.word	0x0800d443
 800d694:	0800e116 	.word	0x0800e116

0800d698 <__sflush_r>:
 800d698:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6a0:	0716      	lsls	r6, r2, #28
 800d6a2:	4605      	mov	r5, r0
 800d6a4:	460c      	mov	r4, r1
 800d6a6:	d454      	bmi.n	800d752 <__sflush_r+0xba>
 800d6a8:	684b      	ldr	r3, [r1, #4]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	dc02      	bgt.n	800d6b4 <__sflush_r+0x1c>
 800d6ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	dd48      	ble.n	800d746 <__sflush_r+0xae>
 800d6b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d6b6:	2e00      	cmp	r6, #0
 800d6b8:	d045      	beq.n	800d746 <__sflush_r+0xae>
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d6c0:	682f      	ldr	r7, [r5, #0]
 800d6c2:	6a21      	ldr	r1, [r4, #32]
 800d6c4:	602b      	str	r3, [r5, #0]
 800d6c6:	d030      	beq.n	800d72a <__sflush_r+0x92>
 800d6c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d6ca:	89a3      	ldrh	r3, [r4, #12]
 800d6cc:	0759      	lsls	r1, r3, #29
 800d6ce:	d505      	bpl.n	800d6dc <__sflush_r+0x44>
 800d6d0:	6863      	ldr	r3, [r4, #4]
 800d6d2:	1ad2      	subs	r2, r2, r3
 800d6d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d6d6:	b10b      	cbz	r3, 800d6dc <__sflush_r+0x44>
 800d6d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d6da:	1ad2      	subs	r2, r2, r3
 800d6dc:	2300      	movs	r3, #0
 800d6de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d6e0:	6a21      	ldr	r1, [r4, #32]
 800d6e2:	4628      	mov	r0, r5
 800d6e4:	47b0      	blx	r6
 800d6e6:	1c43      	adds	r3, r0, #1
 800d6e8:	89a3      	ldrh	r3, [r4, #12]
 800d6ea:	d106      	bne.n	800d6fa <__sflush_r+0x62>
 800d6ec:	6829      	ldr	r1, [r5, #0]
 800d6ee:	291d      	cmp	r1, #29
 800d6f0:	d82b      	bhi.n	800d74a <__sflush_r+0xb2>
 800d6f2:	4a2a      	ldr	r2, [pc, #168]	@ (800d79c <__sflush_r+0x104>)
 800d6f4:	410a      	asrs	r2, r1
 800d6f6:	07d6      	lsls	r6, r2, #31
 800d6f8:	d427      	bmi.n	800d74a <__sflush_r+0xb2>
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	6062      	str	r2, [r4, #4]
 800d6fe:	04d9      	lsls	r1, r3, #19
 800d700:	6922      	ldr	r2, [r4, #16]
 800d702:	6022      	str	r2, [r4, #0]
 800d704:	d504      	bpl.n	800d710 <__sflush_r+0x78>
 800d706:	1c42      	adds	r2, r0, #1
 800d708:	d101      	bne.n	800d70e <__sflush_r+0x76>
 800d70a:	682b      	ldr	r3, [r5, #0]
 800d70c:	b903      	cbnz	r3, 800d710 <__sflush_r+0x78>
 800d70e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d710:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d712:	602f      	str	r7, [r5, #0]
 800d714:	b1b9      	cbz	r1, 800d746 <__sflush_r+0xae>
 800d716:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d71a:	4299      	cmp	r1, r3
 800d71c:	d002      	beq.n	800d724 <__sflush_r+0x8c>
 800d71e:	4628      	mov	r0, r5
 800d720:	f7fe fc16 	bl	800bf50 <_free_r>
 800d724:	2300      	movs	r3, #0
 800d726:	6363      	str	r3, [r4, #52]	@ 0x34
 800d728:	e00d      	b.n	800d746 <__sflush_r+0xae>
 800d72a:	2301      	movs	r3, #1
 800d72c:	4628      	mov	r0, r5
 800d72e:	47b0      	blx	r6
 800d730:	4602      	mov	r2, r0
 800d732:	1c50      	adds	r0, r2, #1
 800d734:	d1c9      	bne.n	800d6ca <__sflush_r+0x32>
 800d736:	682b      	ldr	r3, [r5, #0]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d0c6      	beq.n	800d6ca <__sflush_r+0x32>
 800d73c:	2b1d      	cmp	r3, #29
 800d73e:	d001      	beq.n	800d744 <__sflush_r+0xac>
 800d740:	2b16      	cmp	r3, #22
 800d742:	d11e      	bne.n	800d782 <__sflush_r+0xea>
 800d744:	602f      	str	r7, [r5, #0]
 800d746:	2000      	movs	r0, #0
 800d748:	e022      	b.n	800d790 <__sflush_r+0xf8>
 800d74a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d74e:	b21b      	sxth	r3, r3
 800d750:	e01b      	b.n	800d78a <__sflush_r+0xf2>
 800d752:	690f      	ldr	r7, [r1, #16]
 800d754:	2f00      	cmp	r7, #0
 800d756:	d0f6      	beq.n	800d746 <__sflush_r+0xae>
 800d758:	0793      	lsls	r3, r2, #30
 800d75a:	680e      	ldr	r6, [r1, #0]
 800d75c:	bf08      	it	eq
 800d75e:	694b      	ldreq	r3, [r1, #20]
 800d760:	600f      	str	r7, [r1, #0]
 800d762:	bf18      	it	ne
 800d764:	2300      	movne	r3, #0
 800d766:	eba6 0807 	sub.w	r8, r6, r7
 800d76a:	608b      	str	r3, [r1, #8]
 800d76c:	f1b8 0f00 	cmp.w	r8, #0
 800d770:	dde9      	ble.n	800d746 <__sflush_r+0xae>
 800d772:	6a21      	ldr	r1, [r4, #32]
 800d774:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d776:	4643      	mov	r3, r8
 800d778:	463a      	mov	r2, r7
 800d77a:	4628      	mov	r0, r5
 800d77c:	47b0      	blx	r6
 800d77e:	2800      	cmp	r0, #0
 800d780:	dc08      	bgt.n	800d794 <__sflush_r+0xfc>
 800d782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d78a:	81a3      	strh	r3, [r4, #12]
 800d78c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d794:	4407      	add	r7, r0
 800d796:	eba8 0800 	sub.w	r8, r8, r0
 800d79a:	e7e7      	b.n	800d76c <__sflush_r+0xd4>
 800d79c:	dfbffffe 	.word	0xdfbffffe

0800d7a0 <_fflush_r>:
 800d7a0:	b538      	push	{r3, r4, r5, lr}
 800d7a2:	690b      	ldr	r3, [r1, #16]
 800d7a4:	4605      	mov	r5, r0
 800d7a6:	460c      	mov	r4, r1
 800d7a8:	b913      	cbnz	r3, 800d7b0 <_fflush_r+0x10>
 800d7aa:	2500      	movs	r5, #0
 800d7ac:	4628      	mov	r0, r5
 800d7ae:	bd38      	pop	{r3, r4, r5, pc}
 800d7b0:	b118      	cbz	r0, 800d7ba <_fflush_r+0x1a>
 800d7b2:	6a03      	ldr	r3, [r0, #32]
 800d7b4:	b90b      	cbnz	r3, 800d7ba <_fflush_r+0x1a>
 800d7b6:	f7fd fbab 	bl	800af10 <__sinit>
 800d7ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d0f3      	beq.n	800d7aa <_fflush_r+0xa>
 800d7c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d7c4:	07d0      	lsls	r0, r2, #31
 800d7c6:	d404      	bmi.n	800d7d2 <_fflush_r+0x32>
 800d7c8:	0599      	lsls	r1, r3, #22
 800d7ca:	d402      	bmi.n	800d7d2 <_fflush_r+0x32>
 800d7cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7ce:	f7fd fd36 	bl	800b23e <__retarget_lock_acquire_recursive>
 800d7d2:	4628      	mov	r0, r5
 800d7d4:	4621      	mov	r1, r4
 800d7d6:	f7ff ff5f 	bl	800d698 <__sflush_r>
 800d7da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d7dc:	07da      	lsls	r2, r3, #31
 800d7de:	4605      	mov	r5, r0
 800d7e0:	d4e4      	bmi.n	800d7ac <_fflush_r+0xc>
 800d7e2:	89a3      	ldrh	r3, [r4, #12]
 800d7e4:	059b      	lsls	r3, r3, #22
 800d7e6:	d4e1      	bmi.n	800d7ac <_fflush_r+0xc>
 800d7e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7ea:	f7fd fd29 	bl	800b240 <__retarget_lock_release_recursive>
 800d7ee:	e7dd      	b.n	800d7ac <_fflush_r+0xc>

0800d7f0 <fiprintf>:
 800d7f0:	b40e      	push	{r1, r2, r3}
 800d7f2:	b503      	push	{r0, r1, lr}
 800d7f4:	4601      	mov	r1, r0
 800d7f6:	ab03      	add	r3, sp, #12
 800d7f8:	4805      	ldr	r0, [pc, #20]	@ (800d810 <fiprintf+0x20>)
 800d7fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7fe:	6800      	ldr	r0, [r0, #0]
 800d800:	9301      	str	r3, [sp, #4]
 800d802:	f7ff fe31 	bl	800d468 <_vfiprintf_r>
 800d806:	b002      	add	sp, #8
 800d808:	f85d eb04 	ldr.w	lr, [sp], #4
 800d80c:	b003      	add	sp, #12
 800d80e:	4770      	bx	lr
 800d810:	20000328 	.word	0x20000328

0800d814 <__swbuf_r>:
 800d814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d816:	460e      	mov	r6, r1
 800d818:	4614      	mov	r4, r2
 800d81a:	4605      	mov	r5, r0
 800d81c:	b118      	cbz	r0, 800d826 <__swbuf_r+0x12>
 800d81e:	6a03      	ldr	r3, [r0, #32]
 800d820:	b90b      	cbnz	r3, 800d826 <__swbuf_r+0x12>
 800d822:	f7fd fb75 	bl	800af10 <__sinit>
 800d826:	69a3      	ldr	r3, [r4, #24]
 800d828:	60a3      	str	r3, [r4, #8]
 800d82a:	89a3      	ldrh	r3, [r4, #12]
 800d82c:	071a      	lsls	r2, r3, #28
 800d82e:	d501      	bpl.n	800d834 <__swbuf_r+0x20>
 800d830:	6923      	ldr	r3, [r4, #16]
 800d832:	b943      	cbnz	r3, 800d846 <__swbuf_r+0x32>
 800d834:	4621      	mov	r1, r4
 800d836:	4628      	mov	r0, r5
 800d838:	f000 f82a 	bl	800d890 <__swsetup_r>
 800d83c:	b118      	cbz	r0, 800d846 <__swbuf_r+0x32>
 800d83e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d842:	4638      	mov	r0, r7
 800d844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d846:	6823      	ldr	r3, [r4, #0]
 800d848:	6922      	ldr	r2, [r4, #16]
 800d84a:	1a98      	subs	r0, r3, r2
 800d84c:	6963      	ldr	r3, [r4, #20]
 800d84e:	b2f6      	uxtb	r6, r6
 800d850:	4283      	cmp	r3, r0
 800d852:	4637      	mov	r7, r6
 800d854:	dc05      	bgt.n	800d862 <__swbuf_r+0x4e>
 800d856:	4621      	mov	r1, r4
 800d858:	4628      	mov	r0, r5
 800d85a:	f7ff ffa1 	bl	800d7a0 <_fflush_r>
 800d85e:	2800      	cmp	r0, #0
 800d860:	d1ed      	bne.n	800d83e <__swbuf_r+0x2a>
 800d862:	68a3      	ldr	r3, [r4, #8]
 800d864:	3b01      	subs	r3, #1
 800d866:	60a3      	str	r3, [r4, #8]
 800d868:	6823      	ldr	r3, [r4, #0]
 800d86a:	1c5a      	adds	r2, r3, #1
 800d86c:	6022      	str	r2, [r4, #0]
 800d86e:	701e      	strb	r6, [r3, #0]
 800d870:	6962      	ldr	r2, [r4, #20]
 800d872:	1c43      	adds	r3, r0, #1
 800d874:	429a      	cmp	r2, r3
 800d876:	d004      	beq.n	800d882 <__swbuf_r+0x6e>
 800d878:	89a3      	ldrh	r3, [r4, #12]
 800d87a:	07db      	lsls	r3, r3, #31
 800d87c:	d5e1      	bpl.n	800d842 <__swbuf_r+0x2e>
 800d87e:	2e0a      	cmp	r6, #10
 800d880:	d1df      	bne.n	800d842 <__swbuf_r+0x2e>
 800d882:	4621      	mov	r1, r4
 800d884:	4628      	mov	r0, r5
 800d886:	f7ff ff8b 	bl	800d7a0 <_fflush_r>
 800d88a:	2800      	cmp	r0, #0
 800d88c:	d0d9      	beq.n	800d842 <__swbuf_r+0x2e>
 800d88e:	e7d6      	b.n	800d83e <__swbuf_r+0x2a>

0800d890 <__swsetup_r>:
 800d890:	b538      	push	{r3, r4, r5, lr}
 800d892:	4b29      	ldr	r3, [pc, #164]	@ (800d938 <__swsetup_r+0xa8>)
 800d894:	4605      	mov	r5, r0
 800d896:	6818      	ldr	r0, [r3, #0]
 800d898:	460c      	mov	r4, r1
 800d89a:	b118      	cbz	r0, 800d8a4 <__swsetup_r+0x14>
 800d89c:	6a03      	ldr	r3, [r0, #32]
 800d89e:	b90b      	cbnz	r3, 800d8a4 <__swsetup_r+0x14>
 800d8a0:	f7fd fb36 	bl	800af10 <__sinit>
 800d8a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8a8:	0719      	lsls	r1, r3, #28
 800d8aa:	d422      	bmi.n	800d8f2 <__swsetup_r+0x62>
 800d8ac:	06da      	lsls	r2, r3, #27
 800d8ae:	d407      	bmi.n	800d8c0 <__swsetup_r+0x30>
 800d8b0:	2209      	movs	r2, #9
 800d8b2:	602a      	str	r2, [r5, #0]
 800d8b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8b8:	81a3      	strh	r3, [r4, #12]
 800d8ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d8be:	e033      	b.n	800d928 <__swsetup_r+0x98>
 800d8c0:	0758      	lsls	r0, r3, #29
 800d8c2:	d512      	bpl.n	800d8ea <__swsetup_r+0x5a>
 800d8c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d8c6:	b141      	cbz	r1, 800d8da <__swsetup_r+0x4a>
 800d8c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8cc:	4299      	cmp	r1, r3
 800d8ce:	d002      	beq.n	800d8d6 <__swsetup_r+0x46>
 800d8d0:	4628      	mov	r0, r5
 800d8d2:	f7fe fb3d 	bl	800bf50 <_free_r>
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d8da:	89a3      	ldrh	r3, [r4, #12]
 800d8dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d8e0:	81a3      	strh	r3, [r4, #12]
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	6063      	str	r3, [r4, #4]
 800d8e6:	6923      	ldr	r3, [r4, #16]
 800d8e8:	6023      	str	r3, [r4, #0]
 800d8ea:	89a3      	ldrh	r3, [r4, #12]
 800d8ec:	f043 0308 	orr.w	r3, r3, #8
 800d8f0:	81a3      	strh	r3, [r4, #12]
 800d8f2:	6923      	ldr	r3, [r4, #16]
 800d8f4:	b94b      	cbnz	r3, 800d90a <__swsetup_r+0x7a>
 800d8f6:	89a3      	ldrh	r3, [r4, #12]
 800d8f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d8fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d900:	d003      	beq.n	800d90a <__swsetup_r+0x7a>
 800d902:	4621      	mov	r1, r4
 800d904:	4628      	mov	r0, r5
 800d906:	f000 f8b2 	bl	800da6e <__smakebuf_r>
 800d90a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d90e:	f013 0201 	ands.w	r2, r3, #1
 800d912:	d00a      	beq.n	800d92a <__swsetup_r+0x9a>
 800d914:	2200      	movs	r2, #0
 800d916:	60a2      	str	r2, [r4, #8]
 800d918:	6962      	ldr	r2, [r4, #20]
 800d91a:	4252      	negs	r2, r2
 800d91c:	61a2      	str	r2, [r4, #24]
 800d91e:	6922      	ldr	r2, [r4, #16]
 800d920:	b942      	cbnz	r2, 800d934 <__swsetup_r+0xa4>
 800d922:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d926:	d1c5      	bne.n	800d8b4 <__swsetup_r+0x24>
 800d928:	bd38      	pop	{r3, r4, r5, pc}
 800d92a:	0799      	lsls	r1, r3, #30
 800d92c:	bf58      	it	pl
 800d92e:	6962      	ldrpl	r2, [r4, #20]
 800d930:	60a2      	str	r2, [r4, #8]
 800d932:	e7f4      	b.n	800d91e <__swsetup_r+0x8e>
 800d934:	2000      	movs	r0, #0
 800d936:	e7f7      	b.n	800d928 <__swsetup_r+0x98>
 800d938:	20000328 	.word	0x20000328

0800d93c <memmove>:
 800d93c:	4288      	cmp	r0, r1
 800d93e:	b510      	push	{r4, lr}
 800d940:	eb01 0402 	add.w	r4, r1, r2
 800d944:	d902      	bls.n	800d94c <memmove+0x10>
 800d946:	4284      	cmp	r4, r0
 800d948:	4623      	mov	r3, r4
 800d94a:	d807      	bhi.n	800d95c <memmove+0x20>
 800d94c:	1e43      	subs	r3, r0, #1
 800d94e:	42a1      	cmp	r1, r4
 800d950:	d008      	beq.n	800d964 <memmove+0x28>
 800d952:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d956:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d95a:	e7f8      	b.n	800d94e <memmove+0x12>
 800d95c:	4402      	add	r2, r0
 800d95e:	4601      	mov	r1, r0
 800d960:	428a      	cmp	r2, r1
 800d962:	d100      	bne.n	800d966 <memmove+0x2a>
 800d964:	bd10      	pop	{r4, pc}
 800d966:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d96a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d96e:	e7f7      	b.n	800d960 <memmove+0x24>

0800d970 <_sbrk_r>:
 800d970:	b538      	push	{r3, r4, r5, lr}
 800d972:	4d06      	ldr	r5, [pc, #24]	@ (800d98c <_sbrk_r+0x1c>)
 800d974:	2300      	movs	r3, #0
 800d976:	4604      	mov	r4, r0
 800d978:	4608      	mov	r0, r1
 800d97a:	602b      	str	r3, [r5, #0]
 800d97c:	f7f4 f91c 	bl	8001bb8 <_sbrk>
 800d980:	1c43      	adds	r3, r0, #1
 800d982:	d102      	bne.n	800d98a <_sbrk_r+0x1a>
 800d984:	682b      	ldr	r3, [r5, #0]
 800d986:	b103      	cbz	r3, 800d98a <_sbrk_r+0x1a>
 800d988:	6023      	str	r3, [r4, #0]
 800d98a:	bd38      	pop	{r3, r4, r5, pc}
 800d98c:	20000878 	.word	0x20000878

0800d990 <abort>:
 800d990:	b508      	push	{r3, lr}
 800d992:	2006      	movs	r0, #6
 800d994:	f000 f8d0 	bl	800db38 <raise>
 800d998:	2001      	movs	r0, #1
 800d99a:	f7f4 f895 	bl	8001ac8 <_exit>

0800d99e <_calloc_r>:
 800d99e:	b570      	push	{r4, r5, r6, lr}
 800d9a0:	fba1 5402 	umull	r5, r4, r1, r2
 800d9a4:	b93c      	cbnz	r4, 800d9b6 <_calloc_r+0x18>
 800d9a6:	4629      	mov	r1, r5
 800d9a8:	f7fe fe80 	bl	800c6ac <_malloc_r>
 800d9ac:	4606      	mov	r6, r0
 800d9ae:	b928      	cbnz	r0, 800d9bc <_calloc_r+0x1e>
 800d9b0:	2600      	movs	r6, #0
 800d9b2:	4630      	mov	r0, r6
 800d9b4:	bd70      	pop	{r4, r5, r6, pc}
 800d9b6:	220c      	movs	r2, #12
 800d9b8:	6002      	str	r2, [r0, #0]
 800d9ba:	e7f9      	b.n	800d9b0 <_calloc_r+0x12>
 800d9bc:	462a      	mov	r2, r5
 800d9be:	4621      	mov	r1, r4
 800d9c0:	f7fd fb51 	bl	800b066 <memset>
 800d9c4:	e7f5      	b.n	800d9b2 <_calloc_r+0x14>

0800d9c6 <_realloc_r>:
 800d9c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9ca:	4680      	mov	r8, r0
 800d9cc:	4615      	mov	r5, r2
 800d9ce:	460c      	mov	r4, r1
 800d9d0:	b921      	cbnz	r1, 800d9dc <_realloc_r+0x16>
 800d9d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9d6:	4611      	mov	r1, r2
 800d9d8:	f7fe be68 	b.w	800c6ac <_malloc_r>
 800d9dc:	b92a      	cbnz	r2, 800d9ea <_realloc_r+0x24>
 800d9de:	f7fe fab7 	bl	800bf50 <_free_r>
 800d9e2:	2400      	movs	r4, #0
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9ea:	f000 f8e3 	bl	800dbb4 <_malloc_usable_size_r>
 800d9ee:	4285      	cmp	r5, r0
 800d9f0:	4606      	mov	r6, r0
 800d9f2:	d802      	bhi.n	800d9fa <_realloc_r+0x34>
 800d9f4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d9f8:	d8f4      	bhi.n	800d9e4 <_realloc_r+0x1e>
 800d9fa:	4629      	mov	r1, r5
 800d9fc:	4640      	mov	r0, r8
 800d9fe:	f7fe fe55 	bl	800c6ac <_malloc_r>
 800da02:	4607      	mov	r7, r0
 800da04:	2800      	cmp	r0, #0
 800da06:	d0ec      	beq.n	800d9e2 <_realloc_r+0x1c>
 800da08:	42b5      	cmp	r5, r6
 800da0a:	462a      	mov	r2, r5
 800da0c:	4621      	mov	r1, r4
 800da0e:	bf28      	it	cs
 800da10:	4632      	movcs	r2, r6
 800da12:	f7fd fc16 	bl	800b242 <memcpy>
 800da16:	4621      	mov	r1, r4
 800da18:	4640      	mov	r0, r8
 800da1a:	f7fe fa99 	bl	800bf50 <_free_r>
 800da1e:	463c      	mov	r4, r7
 800da20:	e7e0      	b.n	800d9e4 <_realloc_r+0x1e>

0800da22 <__swhatbuf_r>:
 800da22:	b570      	push	{r4, r5, r6, lr}
 800da24:	460c      	mov	r4, r1
 800da26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da2a:	2900      	cmp	r1, #0
 800da2c:	b096      	sub	sp, #88	@ 0x58
 800da2e:	4615      	mov	r5, r2
 800da30:	461e      	mov	r6, r3
 800da32:	da0d      	bge.n	800da50 <__swhatbuf_r+0x2e>
 800da34:	89a3      	ldrh	r3, [r4, #12]
 800da36:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800da3a:	f04f 0100 	mov.w	r1, #0
 800da3e:	bf14      	ite	ne
 800da40:	2340      	movne	r3, #64	@ 0x40
 800da42:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800da46:	2000      	movs	r0, #0
 800da48:	6031      	str	r1, [r6, #0]
 800da4a:	602b      	str	r3, [r5, #0]
 800da4c:	b016      	add	sp, #88	@ 0x58
 800da4e:	bd70      	pop	{r4, r5, r6, pc}
 800da50:	466a      	mov	r2, sp
 800da52:	f000 f879 	bl	800db48 <_fstat_r>
 800da56:	2800      	cmp	r0, #0
 800da58:	dbec      	blt.n	800da34 <__swhatbuf_r+0x12>
 800da5a:	9901      	ldr	r1, [sp, #4]
 800da5c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800da60:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800da64:	4259      	negs	r1, r3
 800da66:	4159      	adcs	r1, r3
 800da68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da6c:	e7eb      	b.n	800da46 <__swhatbuf_r+0x24>

0800da6e <__smakebuf_r>:
 800da6e:	898b      	ldrh	r3, [r1, #12]
 800da70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da72:	079d      	lsls	r5, r3, #30
 800da74:	4606      	mov	r6, r0
 800da76:	460c      	mov	r4, r1
 800da78:	d507      	bpl.n	800da8a <__smakebuf_r+0x1c>
 800da7a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800da7e:	6023      	str	r3, [r4, #0]
 800da80:	6123      	str	r3, [r4, #16]
 800da82:	2301      	movs	r3, #1
 800da84:	6163      	str	r3, [r4, #20]
 800da86:	b003      	add	sp, #12
 800da88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da8a:	ab01      	add	r3, sp, #4
 800da8c:	466a      	mov	r2, sp
 800da8e:	f7ff ffc8 	bl	800da22 <__swhatbuf_r>
 800da92:	9f00      	ldr	r7, [sp, #0]
 800da94:	4605      	mov	r5, r0
 800da96:	4639      	mov	r1, r7
 800da98:	4630      	mov	r0, r6
 800da9a:	f7fe fe07 	bl	800c6ac <_malloc_r>
 800da9e:	b948      	cbnz	r0, 800dab4 <__smakebuf_r+0x46>
 800daa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800daa4:	059a      	lsls	r2, r3, #22
 800daa6:	d4ee      	bmi.n	800da86 <__smakebuf_r+0x18>
 800daa8:	f023 0303 	bic.w	r3, r3, #3
 800daac:	f043 0302 	orr.w	r3, r3, #2
 800dab0:	81a3      	strh	r3, [r4, #12]
 800dab2:	e7e2      	b.n	800da7a <__smakebuf_r+0xc>
 800dab4:	89a3      	ldrh	r3, [r4, #12]
 800dab6:	6020      	str	r0, [r4, #0]
 800dab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dabc:	81a3      	strh	r3, [r4, #12]
 800dabe:	9b01      	ldr	r3, [sp, #4]
 800dac0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dac4:	b15b      	cbz	r3, 800dade <__smakebuf_r+0x70>
 800dac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800daca:	4630      	mov	r0, r6
 800dacc:	f000 f84e 	bl	800db6c <_isatty_r>
 800dad0:	b128      	cbz	r0, 800dade <__smakebuf_r+0x70>
 800dad2:	89a3      	ldrh	r3, [r4, #12]
 800dad4:	f023 0303 	bic.w	r3, r3, #3
 800dad8:	f043 0301 	orr.w	r3, r3, #1
 800dadc:	81a3      	strh	r3, [r4, #12]
 800dade:	89a3      	ldrh	r3, [r4, #12]
 800dae0:	431d      	orrs	r5, r3
 800dae2:	81a5      	strh	r5, [r4, #12]
 800dae4:	e7cf      	b.n	800da86 <__smakebuf_r+0x18>

0800dae6 <_raise_r>:
 800dae6:	291f      	cmp	r1, #31
 800dae8:	b538      	push	{r3, r4, r5, lr}
 800daea:	4605      	mov	r5, r0
 800daec:	460c      	mov	r4, r1
 800daee:	d904      	bls.n	800dafa <_raise_r+0x14>
 800daf0:	2316      	movs	r3, #22
 800daf2:	6003      	str	r3, [r0, #0]
 800daf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800daf8:	bd38      	pop	{r3, r4, r5, pc}
 800dafa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dafc:	b112      	cbz	r2, 800db04 <_raise_r+0x1e>
 800dafe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db02:	b94b      	cbnz	r3, 800db18 <_raise_r+0x32>
 800db04:	4628      	mov	r0, r5
 800db06:	f000 f853 	bl	800dbb0 <_getpid_r>
 800db0a:	4622      	mov	r2, r4
 800db0c:	4601      	mov	r1, r0
 800db0e:	4628      	mov	r0, r5
 800db10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db14:	f000 b83a 	b.w	800db8c <_kill_r>
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d00a      	beq.n	800db32 <_raise_r+0x4c>
 800db1c:	1c59      	adds	r1, r3, #1
 800db1e:	d103      	bne.n	800db28 <_raise_r+0x42>
 800db20:	2316      	movs	r3, #22
 800db22:	6003      	str	r3, [r0, #0]
 800db24:	2001      	movs	r0, #1
 800db26:	e7e7      	b.n	800daf8 <_raise_r+0x12>
 800db28:	2100      	movs	r1, #0
 800db2a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800db2e:	4620      	mov	r0, r4
 800db30:	4798      	blx	r3
 800db32:	2000      	movs	r0, #0
 800db34:	e7e0      	b.n	800daf8 <_raise_r+0x12>
	...

0800db38 <raise>:
 800db38:	4b02      	ldr	r3, [pc, #8]	@ (800db44 <raise+0xc>)
 800db3a:	4601      	mov	r1, r0
 800db3c:	6818      	ldr	r0, [r3, #0]
 800db3e:	f7ff bfd2 	b.w	800dae6 <_raise_r>
 800db42:	bf00      	nop
 800db44:	20000328 	.word	0x20000328

0800db48 <_fstat_r>:
 800db48:	b538      	push	{r3, r4, r5, lr}
 800db4a:	4d07      	ldr	r5, [pc, #28]	@ (800db68 <_fstat_r+0x20>)
 800db4c:	2300      	movs	r3, #0
 800db4e:	4604      	mov	r4, r0
 800db50:	4608      	mov	r0, r1
 800db52:	4611      	mov	r1, r2
 800db54:	602b      	str	r3, [r5, #0]
 800db56:	f7f4 f807 	bl	8001b68 <_fstat>
 800db5a:	1c43      	adds	r3, r0, #1
 800db5c:	d102      	bne.n	800db64 <_fstat_r+0x1c>
 800db5e:	682b      	ldr	r3, [r5, #0]
 800db60:	b103      	cbz	r3, 800db64 <_fstat_r+0x1c>
 800db62:	6023      	str	r3, [r4, #0]
 800db64:	bd38      	pop	{r3, r4, r5, pc}
 800db66:	bf00      	nop
 800db68:	20000878 	.word	0x20000878

0800db6c <_isatty_r>:
 800db6c:	b538      	push	{r3, r4, r5, lr}
 800db6e:	4d06      	ldr	r5, [pc, #24]	@ (800db88 <_isatty_r+0x1c>)
 800db70:	2300      	movs	r3, #0
 800db72:	4604      	mov	r4, r0
 800db74:	4608      	mov	r0, r1
 800db76:	602b      	str	r3, [r5, #0]
 800db78:	f7f4 f806 	bl	8001b88 <_isatty>
 800db7c:	1c43      	adds	r3, r0, #1
 800db7e:	d102      	bne.n	800db86 <_isatty_r+0x1a>
 800db80:	682b      	ldr	r3, [r5, #0]
 800db82:	b103      	cbz	r3, 800db86 <_isatty_r+0x1a>
 800db84:	6023      	str	r3, [r4, #0]
 800db86:	bd38      	pop	{r3, r4, r5, pc}
 800db88:	20000878 	.word	0x20000878

0800db8c <_kill_r>:
 800db8c:	b538      	push	{r3, r4, r5, lr}
 800db8e:	4d07      	ldr	r5, [pc, #28]	@ (800dbac <_kill_r+0x20>)
 800db90:	2300      	movs	r3, #0
 800db92:	4604      	mov	r4, r0
 800db94:	4608      	mov	r0, r1
 800db96:	4611      	mov	r1, r2
 800db98:	602b      	str	r3, [r5, #0]
 800db9a:	f7f3 ff85 	bl	8001aa8 <_kill>
 800db9e:	1c43      	adds	r3, r0, #1
 800dba0:	d102      	bne.n	800dba8 <_kill_r+0x1c>
 800dba2:	682b      	ldr	r3, [r5, #0]
 800dba4:	b103      	cbz	r3, 800dba8 <_kill_r+0x1c>
 800dba6:	6023      	str	r3, [r4, #0]
 800dba8:	bd38      	pop	{r3, r4, r5, pc}
 800dbaa:	bf00      	nop
 800dbac:	20000878 	.word	0x20000878

0800dbb0 <_getpid_r>:
 800dbb0:	f7f3 bf72 	b.w	8001a98 <_getpid>

0800dbb4 <_malloc_usable_size_r>:
 800dbb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbb8:	1f18      	subs	r0, r3, #4
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	bfbc      	itt	lt
 800dbbe:	580b      	ldrlt	r3, [r1, r0]
 800dbc0:	18c0      	addlt	r0, r0, r3
 800dbc2:	4770      	bx	lr

0800dbc4 <_init>:
 800dbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbc6:	bf00      	nop
 800dbc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbca:	bc08      	pop	{r3}
 800dbcc:	469e      	mov	lr, r3
 800dbce:	4770      	bx	lr

0800dbd0 <_fini>:
 800dbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbd2:	bf00      	nop
 800dbd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbd6:	bc08      	pop	{r3}
 800dbd8:	469e      	mov	lr, r3
 800dbda:	4770      	bx	lr
