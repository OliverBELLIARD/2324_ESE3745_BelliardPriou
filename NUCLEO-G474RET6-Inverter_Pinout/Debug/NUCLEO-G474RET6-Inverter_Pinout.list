
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b66c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  0800b850  0800b850  0000c850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bce4  0800bce4  0000d310  2**0
                  CONTENTS
  4 .ARM          00000008  0800bce4  0800bce4  0000cce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcec  0800bcec  0000d310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcec  0800bcec  0000ccec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcf0  0800bcf0  0000ccf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000310  20000000  0800bcf4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  20000310  0800c004  0000d310  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000820  0800c004  0000d820  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d310  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a7de  00000000  00000000  0000d340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036f7  00000000  00000000  00027b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  0002b218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000112d  00000000  00000000  0002c850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a356  00000000  00000000  0002d97d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a706  00000000  00000000  00057cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114672  00000000  00000000  000723d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00186a4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000707c  00000000  00000000  00186a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  0018db0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000310 	.word	0x20000310
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b834 	.word	0x0800b834

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000314 	.word	0x20000314
 800021c:	0800b834 	.word	0x0800b834

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2iz>:
 8000b9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba4:	d215      	bcs.n	8000bd2 <__aeabi_d2iz+0x36>
 8000ba6:	d511      	bpl.n	8000bcc <__aeabi_d2iz+0x30>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d912      	bls.n	8000bd8 <__aeabi_d2iz+0x3c>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	4770      	bx	lr
 8000bcc:	f04f 0000 	mov.w	r0, #0
 8000bd0:	4770      	bx	lr
 8000bd2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd6:	d105      	bne.n	8000be4 <__aeabi_d2iz+0x48>
 8000bd8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bdc:	bf08      	it	eq
 8000bde:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__aeabi_d2uiz>:
 8000bec:	004a      	lsls	r2, r1, #1
 8000bee:	d211      	bcs.n	8000c14 <__aeabi_d2uiz+0x28>
 8000bf0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf4:	d211      	bcs.n	8000c1a <__aeabi_d2uiz+0x2e>
 8000bf6:	d50d      	bpl.n	8000c14 <__aeabi_d2uiz+0x28>
 8000bf8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c00:	d40e      	bmi.n	8000c20 <__aeabi_d2uiz+0x34>
 8000c02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c12:	4770      	bx	lr
 8000c14:	f04f 0000 	mov.w	r0, #0
 8000c18:	4770      	bx	lr
 8000c1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1e:	d102      	bne.n	8000c26 <__aeabi_d2uiz+0x3a>
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c24:	4770      	bx	lr
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	4770      	bx	lr

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c40:	f000 b9a0 	b.w	8000f84 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f83c 	bl	8000cc8 <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__aeabi_d2lz>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	f7ff ff71 	bl	8000b4c <__aeabi_dcmplt>
 8000c6a:	b928      	cbnz	r0, 8000c78 <__aeabi_d2lz+0x1c>
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4629      	mov	r1, r5
 8000c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c74:	f000 b80a 	b.w	8000c8c <__aeabi_d2ulz>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c7e:	f000 f805 	bl	8000c8c <__aeabi_d2ulz>
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop

08000c8c <__aeabi_d2ulz>:
 8000c8c:	b5d0      	push	{r4, r6, r7, lr}
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <__aeabi_d2ulz+0x34>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	4606      	mov	r6, r0
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fce7 	bl	8000668 <__aeabi_dmul>
 8000c9a:	f7ff ffa7 	bl	8000bec <__aeabi_d2uiz>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fc68 	bl	8000574 <__aeabi_ui2d>
 8000ca4:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <__aeabi_d2ulz+0x38>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f7ff fcde 	bl	8000668 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff fb20 	bl	80002f8 <__aeabi_dsub>
 8000cb8:	f7ff ff98 	bl	8000bec <__aeabi_d2uiz>
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc0:	3df00000 	.word	0x3df00000
 8000cc4:	41f00000 	.word	0x41f00000

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08c      	sub	sp, #48	@ 0x30
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f008 fd06 	bl	80099b2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fa6:	4b32      	ldr	r3, [pc, #200]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fa8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000fac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fae:	4b30      	ldr	r3, [pc, #192]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fb0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000fb4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fc8:	4b29      	ldr	r3, [pc, #164]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fce:	4b28      	ldr	r3, [pc, #160]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fd4:	4b26      	ldr	r3, [pc, #152]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fda:	4b25      	ldr	r3, [pc, #148]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000fe0:	4b23      	ldr	r3, [pc, #140]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fe6:	4b22      	ldr	r3, [pc, #136]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fee:	4b20      	ldr	r3, [pc, #128]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001002:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8001004:	2200      	movs	r2, #0
 8001006:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001008:	4b19      	ldr	r3, [pc, #100]	@ (8001070 <MX_ADC1_Init+0xe8>)
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001010:	4817      	ldr	r0, [pc, #92]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8001012:	f001 fc37 	bl	8002884 <HAL_ADC_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800101c:	f000 fb7c 	bl	8001718 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001024:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001028:	4619      	mov	r1, r3
 800102a:	4811      	ldr	r0, [pc, #68]	@ (8001070 <MX_ADC1_Init+0xe8>)
 800102c:	f002 fa52 	bl	80034d4 <HAL_ADCEx_MultiModeConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001036:	f000 fb6f 	bl	8001718 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800103a:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <MX_ADC1_Init+0xec>)
 800103c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800103e:	2306      	movs	r3, #6
 8001040:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001046:	237f      	movs	r3, #127	@ 0x7f
 8001048:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800104a:	2304      	movs	r3, #4
 800104c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	4619      	mov	r1, r3
 8001056:	4806      	ldr	r0, [pc, #24]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8001058:	f001 fdd6 	bl	8002c08 <HAL_ADC_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001062:	f000 fb59 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	3730      	adds	r7, #48	@ 0x30
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2000032c 	.word	0x2000032c
 8001074:	21800100 	.word	0x21800100

08001078 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800107e:	463b      	mov	r3, r7
 8001080:	2220      	movs	r2, #32
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f008 fc94 	bl	80099b2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800108a:	4b2b      	ldr	r3, [pc, #172]	@ (8001138 <MX_ADC2_Init+0xc0>)
 800108c:	4a2b      	ldr	r2, [pc, #172]	@ (800113c <MX_ADC2_Init+0xc4>)
 800108e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001090:	4b29      	ldr	r3, [pc, #164]	@ (8001138 <MX_ADC2_Init+0xc0>)
 8001092:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001096:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001098:	4b27      	ldr	r3, [pc, #156]	@ (8001138 <MX_ADC2_Init+0xc0>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800109e:	4b26      	ldr	r3, [pc, #152]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010a4:	4b24      	ldr	r3, [pc, #144]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010aa:	4b23      	ldr	r3, [pc, #140]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b0:	4b21      	ldr	r3, [pc, #132]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010b2:	2204      	movs	r2, #4
 80010b4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010b6:	4b20      	ldr	r3, [pc, #128]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80010c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d0:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010d6:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010dc:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010e4:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80010ea:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010f2:	4811      	ldr	r0, [pc, #68]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010f4:	f001 fbc6 	bl	8002884 <HAL_ADC_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80010fe:	f000 fb0b 	bl	8001718 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001102:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <MX_ADC2_Init+0xc8>)
 8001104:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001106:	2306      	movs	r3, #6
 8001108:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800110e:	237f      	movs	r3, #127	@ 0x7f
 8001110:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001112:	2304      	movs	r3, #4
 8001114:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800111a:	463b      	mov	r3, r7
 800111c:	4619      	mov	r1, r3
 800111e:	4806      	ldr	r0, [pc, #24]	@ (8001138 <MX_ADC2_Init+0xc0>)
 8001120:	f001 fd72 	bl	8002c08 <HAL_ADC_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800112a:	f000 faf5 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	3720      	adds	r7, #32
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000398 	.word	0x20000398
 800113c:	50000100 	.word	0x50000100
 8001140:	19200040 	.word	0x19200040

08001144 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b0a4      	sub	sp, #144	@ 0x90
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800115c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001160:	2254      	movs	r2, #84	@ 0x54
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f008 fc24 	bl	80099b2 <memset>
  if(adcHandle->Instance==ADC1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001172:	d174      	bne.n	800125e <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001174:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001178:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800117a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800117e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001180:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001184:	4618      	mov	r0, r3
 8001186:	f003 fc25 	bl	80049d4 <HAL_RCCEx_PeriphCLKConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001190:	f000 fac2 	bl	8001718 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001194:	4b63      	ldr	r3, [pc, #396]	@ (8001324 <HAL_ADC_MspInit+0x1e0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	4a62      	ldr	r2, [pc, #392]	@ (8001324 <HAL_ADC_MspInit+0x1e0>)
 800119c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800119e:	4b61      	ldr	r3, [pc, #388]	@ (8001324 <HAL_ADC_MspInit+0x1e0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d10b      	bne.n	80011be <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011a6:	4b60      	ldr	r3, [pc, #384]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	4a5f      	ldr	r2, [pc, #380]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80011bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	4b5a      	ldr	r3, [pc, #360]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	4a59      	ldr	r2, [pc, #356]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ca:	4b57      	ldr	r3, [pc, #348]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	623b      	str	r3, [r7, #32]
 80011d4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	4b54      	ldr	r3, [pc, #336]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	4a53      	ldr	r2, [pc, #332]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e2:	4b51      	ldr	r3, [pc, #324]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	4a4d      	ldr	r2, [pc, #308]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fa:	4b4b      	ldr	r3, [pc, #300]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	61bb      	str	r3, [r7, #24]
 8001204:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8001206:	2304      	movs	r3, #4
 8001208:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120a:	2303      	movs	r3, #3
 800120c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8001216:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800121a:	4619      	mov	r1, r3
 800121c:	4843      	ldr	r0, [pc, #268]	@ (800132c <HAL_ADC_MspInit+0x1e8>)
 800121e:	f002 fc01 	bl	8003a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8001222:	2302      	movs	r3, #2
 8001224:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001226:	2303      	movs	r3, #3
 8001228:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8001232:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001236:	4619      	mov	r1, r3
 8001238:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123c:	f002 fbf2 	bl	8003a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001240:	2303      	movs	r3, #3
 8001242:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001244:	2303      	movs	r3, #3
 8001246:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001250:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001254:	4619      	mov	r1, r3
 8001256:	4836      	ldr	r0, [pc, #216]	@ (8001330 <HAL_ADC_MspInit+0x1ec>)
 8001258:	f002 fbe4 	bl	8003a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800125c:	e05e      	b.n	800131c <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a34      	ldr	r2, [pc, #208]	@ (8001334 <HAL_ADC_MspInit+0x1f0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d159      	bne.n	800131c <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001268:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800126c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800126e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001272:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001274:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001278:	4618      	mov	r0, r3
 800127a:	f003 fbab 	bl	80049d4 <HAL_RCCEx_PeriphCLKConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 8001284:	f000 fa48 	bl	8001718 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001288:	4b26      	ldr	r3, [pc, #152]	@ (8001324 <HAL_ADC_MspInit+0x1e0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	4a25      	ldr	r2, [pc, #148]	@ (8001324 <HAL_ADC_MspInit+0x1e0>)
 8001290:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001292:	4b24      	ldr	r3, [pc, #144]	@ (8001324 <HAL_ADC_MspInit+0x1e0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d10b      	bne.n	80012b2 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800129a:	4b23      	ldr	r3, [pc, #140]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129e:	4a22      	ldr	r2, [pc, #136]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80012a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a6:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012be:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	4b17      	ldr	r3, [pc, #92]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ce:	4a16      	ldr	r2, [pc, #88]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d6:	4b14      	ldr	r3, [pc, #80]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80012e2:	230b      	movs	r3, #11
 80012e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e6:	2303      	movs	r3, #3
 80012e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012f6:	4619      	mov	r1, r3
 80012f8:	480c      	ldr	r0, [pc, #48]	@ (800132c <HAL_ADC_MspInit+0x1e8>)
 80012fa:	f002 fb93 	bl	8003a24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80012fe:	2301      	movs	r3, #1
 8001300:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001302:	2303      	movs	r3, #3
 8001304:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001318:	f002 fb84 	bl	8003a24 <HAL_GPIO_Init>
}
 800131c:	bf00      	nop
 800131e:	3790      	adds	r7, #144	@ 0x90
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000404 	.word	0x20000404
 8001328:	40021000 	.word	0x40021000
 800132c:	48000800 	.word	0x48000800
 8001330:	48000400 	.word	0x48000400
 8001334:	50000100 	.word	0x50000100

08001338 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	@ 0x28
 800133c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	4b3f      	ldr	r3, [pc, #252]	@ (800144c <MX_GPIO_Init+0x114>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	4a3e      	ldr	r2, [pc, #248]	@ (800144c <MX_GPIO_Init+0x114>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135a:	4b3c      	ldr	r3, [pc, #240]	@ (800144c <MX_GPIO_Init+0x114>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001366:	4b39      	ldr	r3, [pc, #228]	@ (800144c <MX_GPIO_Init+0x114>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	4a38      	ldr	r2, [pc, #224]	@ (800144c <MX_GPIO_Init+0x114>)
 800136c:	f043 0320 	orr.w	r3, r3, #32
 8001370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001372:	4b36      	ldr	r3, [pc, #216]	@ (800144c <MX_GPIO_Init+0x114>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	f003 0320 	and.w	r3, r3, #32
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b33      	ldr	r3, [pc, #204]	@ (800144c <MX_GPIO_Init+0x114>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	4a32      	ldr	r2, [pc, #200]	@ (800144c <MX_GPIO_Init+0x114>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138a:	4b30      	ldr	r3, [pc, #192]	@ (800144c <MX_GPIO_Init+0x114>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	4b2d      	ldr	r3, [pc, #180]	@ (800144c <MX_GPIO_Init+0x114>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	4a2c      	ldr	r2, [pc, #176]	@ (800144c <MX_GPIO_Init+0x114>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a2:	4b2a      	ldr	r3, [pc, #168]	@ (800144c <MX_GPIO_Init+0x114>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ae:	4b27      	ldr	r3, [pc, #156]	@ (800144c <MX_GPIO_Init+0x114>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b2:	4a26      	ldr	r2, [pc, #152]	@ (800144c <MX_GPIO_Init+0x114>)
 80013b4:	f043 0308 	orr.w	r3, r3, #8
 80013b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ba:	4b24      	ldr	r3, [pc, #144]	@ (800144c <MX_GPIO_Init+0x114>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2120      	movs	r1, #32
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ce:	f002 fcab 	bl	8003d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2104      	movs	r1, #4
 80013d6:	481e      	ldr	r0, [pc, #120]	@ (8001450 <MX_GPIO_Init+0x118>)
 80013d8:	f002 fca6 	bl	8003d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 80013dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	4818      	ldr	r0, [pc, #96]	@ (8001454 <MX_GPIO_Init+0x11c>)
 80013f4:	f002 fb16 	bl	8003a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 80013f8:	2320      	movs	r3, #32
 80013fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4619      	mov	r1, r3
 800140e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001412:	f002 fb07 	bl	8003a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8001416:	2304      	movs	r3, #4
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4808      	ldr	r0, [pc, #32]	@ (8001450 <MX_GPIO_Init+0x118>)
 800142e:	f002 faf9 	bl	8003a24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	2028      	movs	r0, #40	@ 0x28
 8001438:	f002 fa0c 	bl	8003854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800143c:	2028      	movs	r0, #40	@ 0x28
 800143e:	f002 fa23 	bl	8003888 <HAL_NVIC_EnableIRQ>

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	@ 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	48000c00 	.word	0x48000c00
 8001454:	48000800 	.word	0x48000800

08001458 <__io_putchar>:
 * @brief	Character transmission rewriting.
 * @param	int	Character to send.
 * @return	int	Character sent.
 */
int __io_putchar(int ch)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001460:	1d39      	adds	r1, r7, #4
 8001462:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001466:	2201      	movs	r2, #1
 8001468:	4803      	ldr	r0, [pc, #12]	@ (8001478 <__io_putchar+0x20>)
 800146a:	f005 fada 	bl	8006a22 <HAL_UART_Transmit>
	return ch;
 800146e:	687b      	ldr	r3, [r7, #4]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200004f4 	.word	0x200004f4

0800147c <set_PWM>:
 * @brief	Sets the offset PWM for all channel of TIM1 at a defined rate (PWM_VARIATION_RATE) recursively.
 * @param	int	Pulse to apply.
 * @attention	Global variable current_speed_PWM must be initialised.
 */
void set_PWM(int pulse)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	if (pulse < current_speed_PWM)
 8001484:	4b21      	ldr	r3, [pc, #132]	@ (800150c <set_PWM+0x90>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	429a      	cmp	r2, r3
 800148c:	da1a      	bge.n	80014c4 <set_PWM+0x48>
	{
		current_speed_PWM -= 1;
 800148e:	4b1f      	ldr	r3, [pc, #124]	@ (800150c <set_PWM+0x90>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	3b01      	subs	r3, #1
 8001494:	4a1d      	ldr	r2, [pc, #116]	@ (800150c <set_PWM+0x90>)
 8001496:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,
 8001498:	4b1c      	ldr	r3, [pc, #112]	@ (800150c <set_PWM+0x90>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <set_PWM+0x94>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	635a      	str	r2, [r3, #52]	@ 0x34
				current_speed_PWM);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,
 80014a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <set_PWM+0x94>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014a8:	4b18      	ldr	r3, [pc, #96]	@ (800150c <set_PWM+0x90>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	4b18      	ldr	r3, [pc, #96]	@ (8001510 <set_PWM+0x94>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	1a52      	subs	r2, r2, r1
 80014b4:	639a      	str	r2, [r3, #56]	@ 0x38
				__HAL_TIM_GET_AUTORELOAD(&htim1) - current_speed_PWM);

		//printf("Réduction de la vitesse\r\n");
		HAL_Delay(PWM_VARIATION_RATE);
 80014b6:	200f      	movs	r0, #15
 80014b8:	f000 ffe8 	bl	800248c <HAL_Delay>
		set_PWM(pulse);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ffdd 	bl	800147c <set_PWM>

		//printf("Augmentation de la vitesse\r\n");
		HAL_Delay(PWM_VARIATION_RATE);
		set_PWM(pulse);
	}
}
 80014c2:	e01e      	b.n	8001502 <set_PWM+0x86>
	else if (pulse > current_speed_PWM)
 80014c4:	4b11      	ldr	r3, [pc, #68]	@ (800150c <set_PWM+0x90>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	dd19      	ble.n	8001502 <set_PWM+0x86>
		current_speed_PWM += 1;
 80014ce:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <set_PWM+0x90>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	3301      	adds	r3, #1
 80014d4:	4a0d      	ldr	r2, [pc, #52]	@ (800150c <set_PWM+0x90>)
 80014d6:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,
 80014d8:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <set_PWM+0x90>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <set_PWM+0x94>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,
 80014e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <set_PWM+0x94>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014e8:	4b08      	ldr	r3, [pc, #32]	@ (800150c <set_PWM+0x90>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <set_PWM+0x94>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	1a52      	subs	r2, r2, r1
 80014f4:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(PWM_VARIATION_RATE);
 80014f6:	200f      	movs	r0, #15
 80014f8:	f000 ffc8 	bl	800248c <HAL_Delay>
		set_PWM(pulse);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ffbd 	bl	800147c <set_PWM>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000408 	.word	0x20000408
 8001510:	2000045c 	.word	0x2000045c
 8001514:	00000000 	.word	0x00000000

08001518 <set_PWM_ratio>:
/**
 * @brief	Sets the PWM for a channel of TIM1.
 * @return	double	Desired PWM duty cycle ratio (0.0 to 1.0) with a 12 bits resolution.
 */
void set_PWM_ratio(double ratio)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	ed87 0b00 	vstr	d0, [r7]
	if (ratio < 1 && ratio > 0)
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	4b18      	ldr	r3, [pc, #96]	@ (8001588 <set_PWM_ratio+0x70>)
 8001528:	e9d7 0100 	ldrd	r0, r1, [r7]
 800152c:	f7ff fb0e 	bl	8000b4c <__aeabi_dcmplt>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d100      	bne.n	8001538 <set_PWM_ratio+0x20>
		int speed = (int)(ratio * PWM_MAX_VAL);

		// Set main PWM pulse width for Channel 1 and Channel 2
		set_PWM(speed);
	}
}
 8001536:	e01d      	b.n	8001574 <set_PWM_ratio+0x5c>
	if (ratio < 1 && ratio > 0)
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	f04f 0300 	mov.w	r3, #0
 8001540:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001544:	f7ff fb20 	bl	8000b88 <__aeabi_dcmpgt>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d100      	bne.n	8001550 <set_PWM_ratio+0x38>
}
 800154e:	e011      	b.n	8001574 <set_PWM_ratio+0x5c>
		int speed = (int)(ratio * PWM_MAX_VAL);
 8001550:	a30b      	add	r3, pc, #44	@ (adr r3, 8001580 <set_PWM_ratio+0x68>)
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	e9d7 0100 	ldrd	r0, r1, [r7]
 800155a:	f7ff f885 	bl	8000668 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff fb19 	bl	8000b9c <__aeabi_d2iz>
 800156a:	4603      	mov	r3, r0
 800156c:	60fb      	str	r3, [r7, #12]
		set_PWM(speed);
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f7ff ff84 	bl	800147c <set_PWM>
}
 8001574:	bf00      	nop
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	f3af 8000 	nop.w
 8001580:	00000000 	.word	0x00000000
 8001584:	40b09a00 	.word	0x40b09a00
 8001588:	3ff00000 	.word	0x3ff00000

0800158c <set_PWM_speed>:
/**
 * @brief	Sets the PWM for a channel of TIM1.
 * @return	int Desired PWM duty pulse (0 to PWM_MAX_VAL).
 */
void set_PWM_speed(int speed)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	if (speed < PWM_MAX_VAL && speed > 0)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f241 0299 	movw	r2, #4249	@ 0x1099
 800159a:	4293      	cmp	r3, r2
 800159c:	dc05      	bgt.n	80015aa <set_PWM_speed+0x1e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	dd02      	ble.n	80015aa <set_PWM_speed+0x1e>
	{
		// Set main PWM pulse width for Channel 1 and Channel 2
		set_PWM(speed);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ff69 	bl	800147c <set_PWM>
	}
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	0000      	movs	r0, r0
 80015b4:	0000      	movs	r0, r0
	...

080015b8 <start_PWM>:

void start_PWM()
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	// TIM1 Channel 1 Initialisation
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015bc:	2100      	movs	r1, #0
 80015be:	480e      	ldr	r0, [pc, #56]	@ (80015f8 <start_PWM+0x40>)
 80015c0:	f003 fd88 	bl	80050d4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80015c4:	2100      	movs	r1, #0
 80015c6:	480c      	ldr	r0, [pc, #48]	@ (80015f8 <start_PWM+0x40>)
 80015c8:	f004 ff08 	bl	80063dc <HAL_TIMEx_PWMN_Start>

	// TIM1 Channel 2 Initialisation
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80015cc:	2104      	movs	r1, #4
 80015ce:	480a      	ldr	r0, [pc, #40]	@ (80015f8 <start_PWM+0x40>)
 80015d0:	f003 fd80 	bl	80050d4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80015d4:	2104      	movs	r1, #4
 80015d6:	4808      	ldr	r0, [pc, #32]	@ (80015f8 <start_PWM+0x40>)
 80015d8:	f004 ff00 	bl	80063dc <HAL_TIMEx_PWMN_Start>

	current_speed_PWM = (int)(PWM_MAX_VAL/2)+1; // We initialize the base speed to 0 (cyclic rate 0.5)
 80015dc:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <start_PWM+0x44>)
 80015de:	f640 024e 	movw	r2, #2126	@ 0x84e
 80015e2:	601a      	str	r2, [r3, #0]
	set_PWM_ratio(0.5);
 80015e4:	ed9f 0b02 	vldr	d0, [pc, #8]	@ 80015f0 <start_PWM+0x38>
 80015e8:	f7ff ff96 	bl	8001518 <set_PWM_ratio>
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	00000000 	.word	0x00000000
 80015f4:	3fe00000 	.word	0x3fe00000
 80015f8:	2000045c 	.word	0x2000045c
 80015fc:	20000408 	.word	0x20000408

08001600 <stop_PWM>:

void stop_PWM()
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	// We disable Tim1 channel 1
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001604:	2100      	movs	r1, #0
 8001606:	4808      	ldr	r0, [pc, #32]	@ (8001628 <stop_PWM+0x28>)
 8001608:	f003 fe76 	bl	80052f8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800160c:	2100      	movs	r1, #0
 800160e:	4806      	ldr	r0, [pc, #24]	@ (8001628 <stop_PWM+0x28>)
 8001610:	f004 ffa6 	bl	8006560 <HAL_TIMEx_PWMN_Stop>

	// We disable Tim1 channel 2
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001614:	2104      	movs	r1, #4
 8001616:	4804      	ldr	r0, [pc, #16]	@ (8001628 <stop_PWM+0x28>)
 8001618:	f003 fe6e 	bl	80052f8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800161c:	2104      	movs	r1, #4
 800161e:	4802      	ldr	r0, [pc, #8]	@ (8001628 <stop_PWM+0x28>)
 8001620:	f004 ff9e 	bl	8006560 <HAL_TIMEx_PWMN_Stop>
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	2000045c 	.word	0x2000045c

0800162c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001630:	f000 fef5 	bl	800241e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001634:	f000 f815 	bl	8001662 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001638:	f7ff fe7e 	bl	8001338 <MX_GPIO_Init>
	MX_ADC2_Init();
 800163c:	f7ff fd1c 	bl	8001078 <MX_ADC2_Init>
	MX_ADC1_Init();
 8001640:	f7ff fca2 	bl	8000f88 <MX_ADC1_Init>
	MX_TIM1_Init();
 8001644:	f000 fa2c 	bl	8001aa0 <MX_TIM1_Init>
	MX_TIM3_Init();
 8001648:	f000 fadc 	bl	8001c04 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 800164c:	f000 fc10 	bl	8001e70 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001650:	f000 fc5a 	bl	8001f08 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	start_PWM();
 8001654:	f7ff ffb0 	bl	80015b8 <start_PWM>

	Shell_Init();
 8001658:	f000 fd4a 	bl	80020f0 <Shell_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 800165c:	f000 fd88 	bl	8002170 <Shell_Loop>
 8001660:	e7fc      	b.n	800165c <main+0x30>

08001662 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b094      	sub	sp, #80	@ 0x50
 8001666:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001668:	f107 0318 	add.w	r3, r7, #24
 800166c:	2238      	movs	r2, #56	@ 0x38
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f008 f99e 	bl	80099b2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001684:	2000      	movs	r0, #0
 8001686:	f002 fb8b 	bl	8003da0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800168a:	2301      	movs	r3, #1
 800168c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800168e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001692:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001694:	2302      	movs	r3, #2
 8001696:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001698:	2303      	movs	r3, #3
 800169a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800169c:	2306      	movs	r3, #6
 800169e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80016a0:	2355      	movs	r3, #85	@ 0x55
 80016a2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016a4:	2302      	movs	r3, #2
 80016a6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016a8:	2302      	movs	r3, #2
 80016aa:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016ac:	2302      	movs	r3, #2
 80016ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b0:	f107 0318 	add.w	r3, r7, #24
 80016b4:	4618      	mov	r0, r3
 80016b6:	f002 fc27 	bl	8003f08 <HAL_RCC_OscConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <SystemClock_Config+0x62>
	{
		Error_Handler();
 80016c0:	f000 f82a 	bl	8001718 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c4:	230f      	movs	r3, #15
 80016c6:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c8:	2303      	movs	r3, #3
 80016ca:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2104      	movs	r1, #4
 80016dc:	4618      	mov	r0, r3
 80016de:	f002 ff2b 	bl	8004538 <HAL_RCC_ClockConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <SystemClock_Config+0x8a>
	{
		Error_Handler();
 80016e8:	f000 f816 	bl	8001718 <Error_Handler>
	}
}
 80016ec:	bf00      	nop
 80016ee:	3750      	adds	r7, #80	@ 0x50
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a04      	ldr	r2, [pc, #16]	@ (8001714 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d101      	bne.n	800170a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001706:	f000 fea3 	bl	8002450 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40001000 	.word	0x40001000

08001718 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i
}
 800171e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <Error_Handler+0x8>

08001724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172a:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <HAL_MspInit+0x44>)
 800172c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800172e:	4a0e      	ldr	r2, [pc, #56]	@ (8001768 <HAL_MspInit+0x44>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6613      	str	r3, [r2, #96]	@ 0x60
 8001736:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <HAL_MspInit+0x44>)
 8001738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <HAL_MspInit+0x44>)
 8001744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001746:	4a08      	ldr	r2, [pc, #32]	@ (8001768 <HAL_MspInit+0x44>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800174c:	6593      	str	r3, [r2, #88]	@ 0x58
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <HAL_MspInit+0x44>)
 8001750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800175a:	f002 fbc5 	bl	8003ee8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000

0800176c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	@ 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800177c:	4b2c      	ldr	r3, [pc, #176]	@ (8001830 <HAL_InitTick+0xc4>)
 800177e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001780:	4a2b      	ldr	r2, [pc, #172]	@ (8001830 <HAL_InitTick+0xc4>)
 8001782:	f043 0310 	orr.w	r3, r3, #16
 8001786:	6593      	str	r3, [r2, #88]	@ 0x58
 8001788:	4b29      	ldr	r3, [pc, #164]	@ (8001830 <HAL_InitTick+0xc4>)
 800178a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001794:	f107 020c 	add.w	r2, r7, #12
 8001798:	f107 0310 	add.w	r3, r7, #16
 800179c:	4611      	mov	r1, r2
 800179e:	4618      	mov	r0, r3
 80017a0:	f003 f8a0 	bl	80048e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017a4:	f003 f872 	bl	800488c <HAL_RCC_GetPCLK1Freq>
 80017a8:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ac:	4a21      	ldr	r2, [pc, #132]	@ (8001834 <HAL_InitTick+0xc8>)
 80017ae:	fba2 2303 	umull	r2, r3, r2, r3
 80017b2:	0c9b      	lsrs	r3, r3, #18
 80017b4:	3b01      	subs	r3, #1
 80017b6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <HAL_InitTick+0xcc>)
 80017ba:	4a20      	ldr	r2, [pc, #128]	@ (800183c <HAL_InitTick+0xd0>)
 80017bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017be:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <HAL_InitTick+0xcc>)
 80017c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017c4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001838 <HAL_InitTick+0xcc>)
 80017c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001838 <HAL_InitTick+0xcc>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d2:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <HAL_InitTick+0xcc>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80017d8:	4817      	ldr	r0, [pc, #92]	@ (8001838 <HAL_InitTick+0xcc>)
 80017da:	f003 fb49 	bl	8004e70 <HAL_TIM_Base_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80017e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d11b      	bne.n	8001824 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017ec:	4812      	ldr	r0, [pc, #72]	@ (8001838 <HAL_InitTick+0xcc>)
 80017ee:	f003 fba1 	bl	8004f34 <HAL_TIM_Base_Start_IT>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80017f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d111      	bne.n	8001824 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001800:	2036      	movs	r0, #54	@ 0x36
 8001802:	f002 f841 	bl	8003888 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b0f      	cmp	r3, #15
 800180a:	d808      	bhi.n	800181e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800180c:	2200      	movs	r2, #0
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	2036      	movs	r0, #54	@ 0x36
 8001812:	f002 f81f 	bl	8003854 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001816:	4a0a      	ldr	r2, [pc, #40]	@ (8001840 <HAL_InitTick+0xd4>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	e002      	b.n	8001824 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001824:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001828:	4618      	mov	r0, r3
 800182a:	3730      	adds	r7, #48	@ 0x30
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40021000 	.word	0x40021000
 8001834:	431bde83 	.word	0x431bde83
 8001838:	2000040c 	.word	0x2000040c
 800183c:	40001000 	.word	0x40001000
 8001840:	20000140 	.word	0x20000140

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <NMI_Handler+0x4>

0800184c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <HardFault_Handler+0x4>

08001854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <MemManage_Handler+0x4>

0800185c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <BusFault_Handler+0x4>

08001864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <UsageFault_Handler+0x4>

0800186c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018a8:	4802      	ldr	r0, [pc, #8]	@ (80018b4 <USART2_IRQHandler+0x10>)
 80018aa:	f005 f9a7 	bl	8006bfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200004f4 	.word	0x200004f4

080018b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <USART3_IRQHandler+0x10>)
 80018be:	f005 f99d 	bl	8006bfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000584 	.word	0x20000584

080018cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 80018d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80018d4:	f002 fa40 	bl	8003d58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}

080018dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018e0:	4802      	ldr	r0, [pc, #8]	@ (80018ec <TIM6_DAC_IRQHandler+0x10>)
 80018e2:	f003 fda5 	bl	8005430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2000040c 	.word	0x2000040c

080018f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return 1;
 80018f4:	2301      	movs	r3, #1
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_kill>:

int _kill(int pid, int sig)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800190a:	f008 f90f 	bl	8009b2c <__errno>
 800190e:	4603      	mov	r3, r0
 8001910:	2216      	movs	r2, #22
 8001912:	601a      	str	r2, [r3, #0]
  return -1;
 8001914:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <_exit>:

void _exit (int status)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001928:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ffe7 	bl	8001900 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001932:	bf00      	nop
 8001934:	e7fd      	b.n	8001932 <_exit+0x12>

08001936 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	e00a      	b.n	800195e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001948:	f3af 8000 	nop.w
 800194c:	4601      	mov	r1, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	60ba      	str	r2, [r7, #8]
 8001954:	b2ca      	uxtb	r2, r1
 8001956:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	3301      	adds	r3, #1
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	429a      	cmp	r2, r3
 8001964:	dbf0      	blt.n	8001948 <_read+0x12>
  }

  return len;
 8001966:	687b      	ldr	r3, [r7, #4]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	e009      	b.n	8001996 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	60ba      	str	r2, [r7, #8]
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fd64 	bl	8001458 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3301      	adds	r3, #1
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	dbf1      	blt.n	8001982 <_write+0x12>
  }
  return len;
 800199e:	687b      	ldr	r3, [r7, #4]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_close>:

int _close(int file)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019d0:	605a      	str	r2, [r3, #4]
  return 0;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <_isatty>:

int _isatty(int file)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019e8:	2301      	movs	r3, #1
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b085      	sub	sp, #20
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a18:	4a14      	ldr	r2, [pc, #80]	@ (8001a6c <_sbrk+0x5c>)
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <_sbrk+0x60>)
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a24:	4b13      	ldr	r3, [pc, #76]	@ (8001a74 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d102      	bne.n	8001a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	@ (8001a74 <_sbrk+0x64>)
 8001a2e:	4a12      	ldr	r2, [pc, #72]	@ (8001a78 <_sbrk+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a32:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d207      	bcs.n	8001a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a40:	f008 f874 	bl	8009b2c <__errno>
 8001a44:	4603      	mov	r3, r0
 8001a46:	220c      	movs	r2, #12
 8001a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a4e:	e009      	b.n	8001a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a50:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <_sbrk+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a56:	4b07      	ldr	r3, [pc, #28]	@ (8001a74 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4a05      	ldr	r2, [pc, #20]	@ (8001a74 <_sbrk+0x64>)
 8001a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a62:	68fb      	ldr	r3, [r7, #12]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20020000 	.word	0x20020000
 8001a70:	00000400 	.word	0x00000400
 8001a74:	20000458 	.word	0x20000458
 8001a78:	20000820 	.word	0x20000820

08001a7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a80:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <SystemInit+0x20>)
 8001a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a86:	4a05      	ldr	r2, [pc, #20]	@ (8001a9c <SystemInit+0x20>)
 8001a88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b098      	sub	sp, #96	@ 0x60
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]
 8001ab0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ab2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	611a      	str	r2, [r3, #16]
 8001ac2:	615a      	str	r2, [r3, #20]
 8001ac4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2234      	movs	r2, #52	@ 0x34
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f007 ff70 	bl	80099b2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ad2:	4b4a      	ldr	r3, [pc, #296]	@ (8001bfc <MX_TIM1_Init+0x15c>)
 8001ad4:	4a4a      	ldr	r2, [pc, #296]	@ (8001c00 <MX_TIM1_Init+0x160>)
 8001ad6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ad8:	4b48      	ldr	r3, [pc, #288]	@ (8001bfc <MX_TIM1_Init+0x15c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001ade:	4b47      	ldr	r3, [pc, #284]	@ (8001bfc <MX_TIM1_Init+0x15c>)
 8001ae0:	2220      	movs	r2, #32
 8001ae2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4249;
 8001ae4:	4b45      	ldr	r3, [pc, #276]	@ (8001bfc <MX_TIM1_Init+0x15c>)
 8001ae6:	f241 0299 	movw	r2, #4249	@ 0x1099
 8001aea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aec:	4b43      	ldr	r3, [pc, #268]	@ (8001bfc <MX_TIM1_Init+0x15c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001af2:	4b42      	ldr	r3, [pc, #264]	@ (8001bfc <MX_TIM1_Init+0x15c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af8:	4b40      	ldr	r3, [pc, #256]	@ (8001bfc <MX_TIM1_Init+0x15c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001afe:	483f      	ldr	r0, [pc, #252]	@ (8001bfc <MX_TIM1_Init+0x15c>)
 8001b00:	f003 fa90 	bl	8005024 <HAL_TIM_PWM_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001b0a:	f7ff fe05 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b1a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4836      	ldr	r0, [pc, #216]	@ (8001bfc <MX_TIM1_Init+0x15c>)
 8001b22:	f004 fd7b 	bl	800661c <HAL_TIMEx_MasterConfigSynchronization>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b2c:	f7ff fdf4 	bl	8001718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b30:	2360      	movs	r3, #96	@ 0x60
 8001b32:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 3000;
 8001b34:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b4e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b52:	2200      	movs	r2, #0
 8001b54:	4619      	mov	r1, r3
 8001b56:	4829      	ldr	r0, [pc, #164]	@ (8001bfc <MX_TIM1_Init+0x15c>)
 8001b58:	f003 fdea 	bl	8005730 <HAL_TIM_PWM_ConfigChannel>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001b62:	f7ff fdd9 	bl	8001718 <Error_Handler>
  }
  sConfigOC.Pulse = 5000;
 8001b66:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b6c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b70:	2204      	movs	r2, #4
 8001b72:	4619      	mov	r1, r3
 8001b74:	4821      	ldr	r0, [pc, #132]	@ (8001bfc <MX_TIM1_Init+0x15c>)
 8001b76:	f003 fddb 	bl	8005730 <HAL_TIM_PWM_ConfigChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8001b80:	f7ff fdca 	bl	8001718 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b88:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	4619      	mov	r1, r3
 8001b90:	481a      	ldr	r0, [pc, #104]	@ (8001bfc <MX_TIM1_Init+0x15c>)
 8001b92:	f003 fdcd 	bl	8005730 <HAL_TIM_PWM_ConfigChannel>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001b9c:	f7ff fdbc 	bl	8001718 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 34;
 8001bac:	2322      	movs	r3, #34	@ 0x22
 8001bae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bb8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4807      	ldr	r0, [pc, #28]	@ (8001bfc <MX_TIM1_Init+0x15c>)
 8001bde:	f004 fdb3 	bl	8006748 <HAL_TIMEx_ConfigBreakDeadTime>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8001be8:	f7ff fd96 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001bec:	4803      	ldr	r0, [pc, #12]	@ (8001bfc <MX_TIM1_Init+0x15c>)
 8001bee:	f000 f8d7 	bl	8001da0 <HAL_TIM_MspPostInit>

}
 8001bf2:	bf00      	nop
 8001bf4:	3760      	adds	r7, #96	@ 0x60
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	2000045c 	.word	0x2000045c
 8001c00:	40012c00 	.word	0x40012c00

08001c04 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001c0a:	f107 0310 	add.w	r3, r7, #16
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c22:	4b1c      	ldr	r3, [pc, #112]	@ (8001c94 <MX_TIM3_Init+0x90>)
 8001c24:	4a1c      	ldr	r2, [pc, #112]	@ (8001c98 <MX_TIM3_Init+0x94>)
 8001c26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c28:	4b1a      	ldr	r3, [pc, #104]	@ (8001c94 <MX_TIM3_Init+0x90>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2e:	4b19      	ldr	r3, [pc, #100]	@ (8001c94 <MX_TIM3_Init+0x90>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c34:	4b17      	ldr	r3, [pc, #92]	@ (8001c94 <MX_TIM3_Init+0x90>)
 8001c36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3c:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <MX_TIM3_Init+0x90>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c42:	4b14      	ldr	r3, [pc, #80]	@ (8001c94 <MX_TIM3_Init+0x90>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001c58:	f107 0310 	add.w	r3, r7, #16
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	480d      	ldr	r0, [pc, #52]	@ (8001c94 <MX_TIM3_Init+0x90>)
 8001c60:	f004 fb0d 	bl	800627e <HAL_TIMEx_HallSensor_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001c6a:	f7ff fd55 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001c6e:	2350      	movs	r3, #80	@ 0x50
 8001c70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4806      	ldr	r0, [pc, #24]	@ (8001c94 <MX_TIM3_Init+0x90>)
 8001c7c:	f004 fcce 	bl	800661c <HAL_TIMEx_MasterConfigSynchronization>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001c86:	f7ff fd47 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200004a8 	.word	0x200004a8
 8001c98:	40000400 	.word	0x40000400

08001c9c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd4 <HAL_TIM_PWM_MspInit+0x38>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d10b      	bne.n	8001cc6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cae:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb2:	4a09      	ldr	r2, [pc, #36]	@ (8001cd8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cb4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001cb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cba:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40012c00 	.word	0x40012c00
 8001cd8:	40021000 	.word	0x40021000

08001cdc <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b08a      	sub	sp, #40	@ 0x28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a26      	ldr	r2, [pc, #152]	@ (8001d94 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d145      	bne.n	8001d8a <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cfe:	4b26      	ldr	r3, [pc, #152]	@ (8001d98 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d02:	4a25      	ldr	r2, [pc, #148]	@ (8001d98 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d04:	f043 0302 	orr.w	r3, r3, #2
 8001d08:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d0a:	4b23      	ldr	r3, [pc, #140]	@ (8001d98 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	4b20      	ldr	r3, [pc, #128]	@ (8001d98 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8001d98 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d22:	4b1d      	ldr	r3, [pc, #116]	@ (8001d98 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d98 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d32:	4a19      	ldr	r2, [pc, #100]	@ (8001d98 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d3a:	4b17      	ldr	r3, [pc, #92]	@ (8001d98 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001d46:	2350      	movs	r3, #80	@ 0x50
 8001d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d56:	2302      	movs	r3, #2
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d64:	f001 fe5e 	bl	8003a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	4619      	mov	r1, r3
 8001d84:	4805      	ldr	r0, [pc, #20]	@ (8001d9c <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001d86:	f001 fe4d 	bl	8003a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	3728      	adds	r7, #40	@ 0x28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40000400 	.word	0x40000400
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	48000800 	.word	0x48000800

08001da0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08a      	sub	sp, #40	@ 0x28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a29      	ldr	r2, [pc, #164]	@ (8001e64 <HAL_TIM_MspPostInit+0xc4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d14b      	bne.n	8001e5a <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc2:	4b29      	ldr	r3, [pc, #164]	@ (8001e68 <HAL_TIM_MspPostInit+0xc8>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc6:	4a28      	ldr	r2, [pc, #160]	@ (8001e68 <HAL_TIM_MspPostInit+0xc8>)
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dce:	4b26      	ldr	r3, [pc, #152]	@ (8001e68 <HAL_TIM_MspPostInit+0xc8>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	4b23      	ldr	r3, [pc, #140]	@ (8001e68 <HAL_TIM_MspPostInit+0xc8>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dde:	4a22      	ldr	r2, [pc, #136]	@ (8001e68 <HAL_TIM_MspPostInit+0xc8>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001de6:	4b20      	ldr	r3, [pc, #128]	@ (8001e68 <HAL_TIM_MspPostInit+0xc8>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001df2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e04:	2306      	movs	r3, #6
 8001e06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4817      	ldr	r0, [pc, #92]	@ (8001e6c <HAL_TIM_MspPostInit+0xcc>)
 8001e10:	f001 fe08 	bl	8003a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001e14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	2300      	movs	r3, #0
 8001e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001e26:	2304      	movs	r3, #4
 8001e28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	4619      	mov	r1, r3
 8001e30:	480e      	ldr	r0, [pc, #56]	@ (8001e6c <HAL_TIM_MspPostInit+0xcc>)
 8001e32:	f001 fdf7 	bl	8003a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001e36:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e48:	2306      	movs	r3, #6
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e56:	f001 fde5 	bl	8003a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e5a:	bf00      	nop
 8001e5c:	3728      	adds	r7, #40	@ 0x28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40012c00 	.word	0x40012c00
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	48000400 	.word	0x48000400

08001e70 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e74:	4b22      	ldr	r3, [pc, #136]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001e76:	4a23      	ldr	r2, [pc, #140]	@ (8001f04 <MX_USART2_UART_Init+0x94>)
 8001e78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e7a:	4b21      	ldr	r3, [pc, #132]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001e7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e82:	4b1f      	ldr	r3, [pc, #124]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e88:	4b1d      	ldr	r3, [pc, #116]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001e96:	220c      	movs	r2, #12
 8001e98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9a:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea0:	4b17      	ldr	r3, [pc, #92]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ea6:	4b16      	ldr	r3, [pc, #88]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001eac:	4b14      	ldr	r3, [pc, #80]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eb8:	4811      	ldr	r0, [pc, #68]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001eba:	f004 fd62 	bl	8006982 <HAL_UART_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001ec4:	f7ff fc28 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ec8:	2100      	movs	r1, #0
 8001eca:	480d      	ldr	r0, [pc, #52]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001ecc:	f006 fd05 	bl	80088da <HAL_UARTEx_SetTxFifoThreshold>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001ed6:	f7ff fc1f 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eda:	2100      	movs	r1, #0
 8001edc:	4808      	ldr	r0, [pc, #32]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001ede:	f006 fd3a 	bl	8008956 <HAL_UARTEx_SetRxFifoThreshold>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ee8:	f7ff fc16 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001eec:	4804      	ldr	r0, [pc, #16]	@ (8001f00 <MX_USART2_UART_Init+0x90>)
 8001eee:	f006 fcbb 	bl	8008868 <HAL_UARTEx_DisableFifoMode>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ef8:	f7ff fc0e 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	200004f4 	.word	0x200004f4
 8001f04:	40004400 	.word	0x40004400

08001f08 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f0c:	4b22      	ldr	r3, [pc, #136]	@ (8001f98 <MX_USART3_UART_Init+0x90>)
 8001f0e:	4a23      	ldr	r2, [pc, #140]	@ (8001f9c <MX_USART3_UART_Init+0x94>)
 8001f10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f12:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <MX_USART3_UART_Init+0x90>)
 8001f14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f98 <MX_USART3_UART_Init+0x90>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f20:	4b1d      	ldr	r3, [pc, #116]	@ (8001f98 <MX_USART3_UART_Init+0x90>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f26:	4b1c      	ldr	r3, [pc, #112]	@ (8001f98 <MX_USART3_UART_Init+0x90>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f98 <MX_USART3_UART_Init+0x90>)
 8001f2e:	220c      	movs	r2, #12
 8001f30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f32:	4b19      	ldr	r3, [pc, #100]	@ (8001f98 <MX_USART3_UART_Init+0x90>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f38:	4b17      	ldr	r3, [pc, #92]	@ (8001f98 <MX_USART3_UART_Init+0x90>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f3e:	4b16      	ldr	r3, [pc, #88]	@ (8001f98 <MX_USART3_UART_Init+0x90>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f44:	4b14      	ldr	r3, [pc, #80]	@ (8001f98 <MX_USART3_UART_Init+0x90>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f4a:	4b13      	ldr	r3, [pc, #76]	@ (8001f98 <MX_USART3_UART_Init+0x90>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f50:	4811      	ldr	r0, [pc, #68]	@ (8001f98 <MX_USART3_UART_Init+0x90>)
 8001f52:	f004 fd16 	bl	8006982 <HAL_UART_Init>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001f5c:	f7ff fbdc 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f60:	2100      	movs	r1, #0
 8001f62:	480d      	ldr	r0, [pc, #52]	@ (8001f98 <MX_USART3_UART_Init+0x90>)
 8001f64:	f006 fcb9 	bl	80088da <HAL_UARTEx_SetTxFifoThreshold>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f6e:	f7ff fbd3 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f72:	2100      	movs	r1, #0
 8001f74:	4808      	ldr	r0, [pc, #32]	@ (8001f98 <MX_USART3_UART_Init+0x90>)
 8001f76:	f006 fcee 	bl	8008956 <HAL_UARTEx_SetRxFifoThreshold>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f80:	f7ff fbca 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f84:	4804      	ldr	r0, [pc, #16]	@ (8001f98 <MX_USART3_UART_Init+0x90>)
 8001f86:	f006 fc6f 	bl	8008868 <HAL_UARTEx_DisableFifoMode>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f90:	f7ff fbc2 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000584 	.word	0x20000584
 8001f9c:	40004800 	.word	0x40004800

08001fa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b0a0      	sub	sp, #128	@ 0x80
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fb8:	f107 0318 	add.w	r3, r7, #24
 8001fbc:	2254      	movs	r2, #84	@ 0x54
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f007 fcf6 	bl	80099b2 <memset>
  if(uartHandle->Instance==USART2)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a45      	ldr	r2, [pc, #276]	@ (80020e0 <HAL_UART_MspInit+0x140>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d13f      	bne.n	8002050 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fd8:	f107 0318 	add.w	r3, r7, #24
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f002 fcf9 	bl	80049d4 <HAL_RCCEx_PeriphCLKConfig>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fe8:	f7ff fb96 	bl	8001718 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fec:	4b3d      	ldr	r3, [pc, #244]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 8001fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff0:	4a3c      	ldr	r2, [pc, #240]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 8001ff2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ff6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ff8:	4b3a      	ldr	r3, [pc, #232]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002004:	4b37      	ldr	r3, [pc, #220]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 8002006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002008:	4a36      	ldr	r2, [pc, #216]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002010:	4b34      	ldr	r3, [pc, #208]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 8002012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800201c:	230c      	movs	r3, #12
 800201e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2300      	movs	r3, #0
 800202a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800202c:	2307      	movs	r3, #7
 800202e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002034:	4619      	mov	r1, r3
 8002036:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800203a:	f001 fcf3 	bl	8003a24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2100      	movs	r1, #0
 8002042:	2026      	movs	r0, #38	@ 0x26
 8002044:	f001 fc06 	bl	8003854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002048:	2026      	movs	r0, #38	@ 0x26
 800204a:	f001 fc1d 	bl	8003888 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800204e:	e043      	b.n	80020d8 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a24      	ldr	r2, [pc, #144]	@ (80020e8 <HAL_UART_MspInit+0x148>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d13e      	bne.n	80020d8 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800205a:	2304      	movs	r3, #4
 800205c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800205e:	2300      	movs	r3, #0
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002062:	f107 0318 	add.w	r3, r7, #24
 8002066:	4618      	mov	r0, r3
 8002068:	f002 fcb4 	bl	80049d4 <HAL_RCCEx_PeriphCLKConfig>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8002072:	f7ff fb51 	bl	8001718 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002076:	4b1b      	ldr	r3, [pc, #108]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 8002078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207a:	4a1a      	ldr	r2, [pc, #104]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 800207c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002080:	6593      	str	r3, [r2, #88]	@ 0x58
 8002082:	4b18      	ldr	r3, [pc, #96]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002086:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800208e:	4b15      	ldr	r3, [pc, #84]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002092:	4a14      	ldr	r2, [pc, #80]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 8002094:	f043 0304 	orr.w	r3, r3, #4
 8002098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800209a:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <HAL_UART_MspInit+0x144>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020a6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80020aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b4:	2300      	movs	r3, #0
 80020b6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020b8:	2307      	movs	r3, #7
 80020ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020bc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80020c0:	4619      	mov	r1, r3
 80020c2:	480a      	ldr	r0, [pc, #40]	@ (80020ec <HAL_UART_MspInit+0x14c>)
 80020c4:	f001 fcae 	bl	8003a24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020c8:	2200      	movs	r2, #0
 80020ca:	2100      	movs	r1, #0
 80020cc:	2027      	movs	r0, #39	@ 0x27
 80020ce:	f001 fbc1 	bl	8003854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020d2:	2027      	movs	r0, #39	@ 0x27
 80020d4:	f001 fbd8 	bl	8003888 <HAL_NVIC_EnableIRQ>
}
 80020d8:	bf00      	nop
 80020da:	3780      	adds	r7, #128	@ 0x80
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40004400 	.word	0x40004400
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40004800 	.word	0x40004800
 80020ec:	48000800 	.word	0x48000800

080020f0 <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 80020f4:	2224      	movs	r2, #36	@ 0x24
 80020f6:	2100      	movs	r1, #0
 80020f8:	4816      	ldr	r0, [pc, #88]	@ (8002154 <Shell_Init+0x64>)
 80020fa:	f007 fc5a 	bl	80099b2 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 80020fe:	2240      	movs	r2, #64	@ 0x40
 8002100:	2100      	movs	r1, #0
 8002102:	4815      	ldr	r0, [pc, #84]	@ (8002158 <Shell_Init+0x68>)
 8002104:	f007 fc55 	bl	80099b2 <memset>
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 8002108:	4b14      	ldr	r3, [pc, #80]	@ (800215c <Shell_Init+0x6c>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 800210e:	2240      	movs	r2, #64	@ 0x40
 8002110:	2100      	movs	r1, #0
 8002112:	4813      	ldr	r0, [pc, #76]	@ (8002160 <Shell_Init+0x70>)
 8002114:	f007 fc4d 	bl	80099b2 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002118:	2201      	movs	r2, #1
 800211a:	4910      	ldr	r1, [pc, #64]	@ (800215c <Shell_Init+0x6c>)
 800211c:	4811      	ldr	r0, [pc, #68]	@ (8002164 <Shell_Init+0x74>)
 800211e:	f004 fd17 	bl	8006b50 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8002122:	4811      	ldr	r0, [pc, #68]	@ (8002168 <Shell_Init+0x78>)
 8002124:	f7fe f886 	bl	8000234 <strlen>
 8002128:	4603      	mov	r3, r0
 800212a:	b29a      	uxth	r2, r3
 800212c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002130:	490d      	ldr	r1, [pc, #52]	@ (8002168 <Shell_Init+0x78>)
 8002132:	480c      	ldr	r0, [pc, #48]	@ (8002164 <Shell_Init+0x74>)
 8002134:	f004 fc75 	bl	8006a22 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8002138:	480c      	ldr	r0, [pc, #48]	@ (800216c <Shell_Init+0x7c>)
 800213a:	f7fe f87b 	bl	8000234 <strlen>
 800213e:	4603      	mov	r3, r0
 8002140:	b29a      	uxth	r2, r3
 8002142:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002146:	4909      	ldr	r1, [pc, #36]	@ (800216c <Shell_Init+0x7c>)
 8002148:	4806      	ldr	r0, [pc, #24]	@ (8002164 <Shell_Init+0x74>)
 800214a:	f004 fc6a 	bl	8006a22 <HAL_UART_Transmit>
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	200006a0 	.word	0x200006a0
 8002158:	2000065c 	.word	0x2000065c
 800215c:	20000618 	.word	0x20000618
 8002160:	2000061c 	.word	0x2000061c
 8002164:	200004f4 	.word	0x200004f4
 8002168:	20000020 	.word	0x20000020
 800216c:	20000004 	.word	0x20000004

08002170 <Shell_Loop>:

void Shell_Loop(void){
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 8002174:	4b74      	ldr	r3, [pc, #464]	@ (8002348 <Shell_Loop+0x1d8>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d05b      	beq.n	8002234 <Shell_Loop+0xc4>
		switch(uartRxBuffer[0]){
 800217c:	4b73      	ldr	r3, [pc, #460]	@ (800234c <Shell_Loop+0x1dc>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b08      	cmp	r3, #8
 8002182:	d034      	beq.n	80021ee <Shell_Loop+0x7e>
 8002184:	2b0d      	cmp	r3, #13
 8002186:	d142      	bne.n	800220e <Shell_Loop+0x9e>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8002188:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800218c:	2203      	movs	r2, #3
 800218e:	4970      	ldr	r1, [pc, #448]	@ (8002350 <Shell_Loop+0x1e0>)
 8002190:	4870      	ldr	r0, [pc, #448]	@ (8002354 <Shell_Loop+0x1e4>)
 8002192:	f004 fc46 	bl	8006a22 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8002196:	4b70      	ldr	r3, [pc, #448]	@ (8002358 <Shell_Loop+0x1e8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a70      	ldr	r2, [pc, #448]	@ (800235c <Shell_Loop+0x1ec>)
 800219c:	2100      	movs	r1, #0
 800219e:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 80021a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002360 <Shell_Loop+0x1f0>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 80021a6:	496f      	ldr	r1, [pc, #444]	@ (8002364 <Shell_Loop+0x1f4>)
 80021a8:	486c      	ldr	r0, [pc, #432]	@ (800235c <Shell_Loop+0x1ec>)
 80021aa:	f007 fc1d 	bl	80099e8 <strtok>
 80021ae:	4603      	mov	r3, r0
 80021b0:	4a6d      	ldr	r2, [pc, #436]	@ (8002368 <Shell_Loop+0x1f8>)
 80021b2:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80021b4:	e010      	b.n	80021d8 <Shell_Loop+0x68>
				argv[argc++] = token;
 80021b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002360 <Shell_Loop+0x1f0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	4968      	ldr	r1, [pc, #416]	@ (8002360 <Shell_Loop+0x1f0>)
 80021be:	600a      	str	r2, [r1, #0]
 80021c0:	4a69      	ldr	r2, [pc, #420]	@ (8002368 <Shell_Loop+0x1f8>)
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	4969      	ldr	r1, [pc, #420]	@ (800236c <Shell_Loop+0x1fc>)
 80021c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 80021ca:	4966      	ldr	r1, [pc, #408]	@ (8002364 <Shell_Loop+0x1f4>)
 80021cc:	2000      	movs	r0, #0
 80021ce:	f007 fc0b 	bl	80099e8 <strtok>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4a64      	ldr	r2, [pc, #400]	@ (8002368 <Shell_Loop+0x1f8>)
 80021d6:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80021d8:	4b63      	ldr	r3, [pc, #396]	@ (8002368 <Shell_Loop+0x1f8>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1ea      	bne.n	80021b6 <Shell_Loop+0x46>
			}
			idx_cmd = 0;
 80021e0:	4b5d      	ldr	r3, [pc, #372]	@ (8002358 <Shell_Loop+0x1e8>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 80021e6:	4b62      	ldr	r3, [pc, #392]	@ (8002370 <Shell_Loop+0x200>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
			break;
 80021ec:	e01f      	b.n	800222e <Shell_Loop+0xbe>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 80021ee:	4b5a      	ldr	r3, [pc, #360]	@ (8002358 <Shell_Loop+0x1e8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	1e5a      	subs	r2, r3, #1
 80021f4:	4958      	ldr	r1, [pc, #352]	@ (8002358 <Shell_Loop+0x1e8>)
 80021f6:	600a      	str	r2, [r1, #0]
 80021f8:	4a58      	ldr	r2, [pc, #352]	@ (800235c <Shell_Loop+0x1ec>)
 80021fa:	2100      	movs	r1, #0
 80021fc:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002202:	2204      	movs	r2, #4
 8002204:	495b      	ldr	r1, [pc, #364]	@ (8002374 <Shell_Loop+0x204>)
 8002206:	4853      	ldr	r0, [pc, #332]	@ (8002354 <Shell_Loop+0x1e4>)
 8002208:	f004 fc0b 	bl	8006a22 <HAL_UART_Transmit>
			break;
 800220c:	e00f      	b.n	800222e <Shell_Loop+0xbe>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 800220e:	4b52      	ldr	r3, [pc, #328]	@ (8002358 <Shell_Loop+0x1e8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	4950      	ldr	r1, [pc, #320]	@ (8002358 <Shell_Loop+0x1e8>)
 8002216:	600a      	str	r2, [r1, #0]
 8002218:	4a4c      	ldr	r2, [pc, #304]	@ (800234c <Shell_Loop+0x1dc>)
 800221a:	7811      	ldrb	r1, [r2, #0]
 800221c:	4a4f      	ldr	r2, [pc, #316]	@ (800235c <Shell_Loop+0x1ec>)
 800221e:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8002220:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002224:	2201      	movs	r2, #1
 8002226:	4949      	ldr	r1, [pc, #292]	@ (800234c <Shell_Loop+0x1dc>)
 8002228:	484a      	ldr	r0, [pc, #296]	@ (8002354 <Shell_Loop+0x1e4>)
 800222a:	f004 fbfa 	bl	8006a22 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 800222e:	4b46      	ldr	r3, [pc, #280]	@ (8002348 <Shell_Loop+0x1d8>)
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 8002234:	4b4e      	ldr	r3, [pc, #312]	@ (8002370 <Shell_Loop+0x200>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 8083 	beq.w	8002344 <Shell_Loop+0x1d4>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 800223e:	4b4b      	ldr	r3, [pc, #300]	@ (800236c <Shell_Loop+0x1fc>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	494d      	ldr	r1, [pc, #308]	@ (8002378 <Shell_Loop+0x208>)
 8002244:	4618      	mov	r0, r3
 8002246:	f7fd ffeb 	bl	8000220 <strcmp>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d107      	bne.n	8002260 <Shell_Loop+0xf0>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 8002250:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002254:	221a      	movs	r2, #26
 8002256:	4949      	ldr	r1, [pc, #292]	@ (800237c <Shell_Loop+0x20c>)
 8002258:	483e      	ldr	r0, [pc, #248]	@ (8002354 <Shell_Loop+0x1e4>)
 800225a:	f004 fbe2 	bl	8006a22 <HAL_UART_Transmit>
 800225e:	e067      	b.n	8002330 <Shell_Loop+0x1c0>
		}
		else if(strcmp(argv[0],"help")==0){
 8002260:	4b42      	ldr	r3, [pc, #264]	@ (800236c <Shell_Loop+0x1fc>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4946      	ldr	r1, [pc, #280]	@ (8002380 <Shell_Loop+0x210>)
 8002266:	4618      	mov	r0, r3
 8002268:	f7fd ffda 	bl	8000220 <strcmp>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10b      	bne.n	800228a <Shell_Loop+0x11a>
			HAL_UART_Transmit(&huart2, helpMessage, strlen((char *)helpMessage), HAL_MAX_DELAY);
 8002272:	4844      	ldr	r0, [pc, #272]	@ (8002384 <Shell_Loop+0x214>)
 8002274:	f7fd ffde 	bl	8000234 <strlen>
 8002278:	4603      	mov	r3, r0
 800227a:	b29a      	uxth	r2, r3
 800227c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002280:	4940      	ldr	r1, [pc, #256]	@ (8002384 <Shell_Loop+0x214>)
 8002282:	4834      	ldr	r0, [pc, #208]	@ (8002354 <Shell_Loop+0x1e4>)
 8002284:	f004 fbcd 	bl	8006a22 <HAL_UART_Transmit>
 8002288:	e052      	b.n	8002330 <Shell_Loop+0x1c0>
		}
		else if(strcmp(argv[0],"ratio")==0){
 800228a:	4b38      	ldr	r3, [pc, #224]	@ (800236c <Shell_Loop+0x1fc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	493e      	ldr	r1, [pc, #248]	@ (8002388 <Shell_Loop+0x218>)
 8002290:	4618      	mov	r0, r3
 8002292:	f7fd ffc5 	bl	8000220 <strcmp>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d113      	bne.n	80022c4 <Shell_Loop+0x154>
			if (argc > 1) {
 800229c:	4b30      	ldr	r3, [pc, #192]	@ (8002360 <Shell_Loop+0x1f0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	dd45      	ble.n	8002330 <Shell_Loop+0x1c0>
				set_PWM_ratio(atof(argv[1]));
 80022a4:	4b31      	ldr	r3, [pc, #196]	@ (800236c <Shell_Loop+0x1fc>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f006 fbe1 	bl	8008a70 <atof>
 80022ae:	eeb0 7a40 	vmov.f32	s14, s0
 80022b2:	eef0 7a60 	vmov.f32	s15, s1
 80022b6:	eeb0 0a47 	vmov.f32	s0, s14
 80022ba:	eef0 0a67 	vmov.f32	s1, s15
 80022be:	f7ff f92b 	bl	8001518 <set_PWM_ratio>
 80022c2:	e035      	b.n	8002330 <Shell_Loop+0x1c0>
			}
		}
		else if(strcmp(argv[0],"speed")==0){
 80022c4:	4b29      	ldr	r3, [pc, #164]	@ (800236c <Shell_Loop+0x1fc>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4930      	ldr	r1, [pc, #192]	@ (800238c <Shell_Loop+0x21c>)
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fd ffa8 	bl	8000220 <strcmp>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10d      	bne.n	80022f2 <Shell_Loop+0x182>
			if (argc > 1) {
 80022d6:	4b22      	ldr	r3, [pc, #136]	@ (8002360 <Shell_Loop+0x1f0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	dd28      	ble.n	8002330 <Shell_Loop+0x1c0>
				set_PWM_speed(atoi(argv[1]));
 80022de:	4b23      	ldr	r3, [pc, #140]	@ (800236c <Shell_Loop+0x1fc>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f006 fbc7 	bl	8008a76 <atoi>
 80022e8:	4603      	mov	r3, r0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff f94e 	bl	800158c <set_PWM_speed>
 80022f0:	e01e      	b.n	8002330 <Shell_Loop+0x1c0>
			}
		}
		else if(strcmp(argv[0],"start")==0){
 80022f2:	4b1e      	ldr	r3, [pc, #120]	@ (800236c <Shell_Loop+0x1fc>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4926      	ldr	r1, [pc, #152]	@ (8002390 <Shell_Loop+0x220>)
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fd ff91 	bl	8000220 <strcmp>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d102      	bne.n	800230a <Shell_Loop+0x19a>
			start_PWM();
 8002304:	f7ff f958 	bl	80015b8 <start_PWM>
 8002308:	e012      	b.n	8002330 <Shell_Loop+0x1c0>
		}
		else if(strcmp(argv[0],"stop")==0){
 800230a:	4b18      	ldr	r3, [pc, #96]	@ (800236c <Shell_Loop+0x1fc>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4921      	ldr	r1, [pc, #132]	@ (8002394 <Shell_Loop+0x224>)
 8002310:	4618      	mov	r0, r3
 8002312:	f7fd ff85 	bl	8000220 <strcmp>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d102      	bne.n	8002322 <Shell_Loop+0x1b2>
			stop_PWM();
 800231c:	f7ff f970 	bl	8001600 <stop_PWM>
 8002320:	e006      	b.n	8002330 <Shell_Loop+0x1c0>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8002322:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002326:	2214      	movs	r2, #20
 8002328:	491b      	ldr	r1, [pc, #108]	@ (8002398 <Shell_Loop+0x228>)
 800232a:	480a      	ldr	r0, [pc, #40]	@ (8002354 <Shell_Loop+0x1e4>)
 800232c:	f004 fb79 	bl	8006a22 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002330:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002334:	221c      	movs	r2, #28
 8002336:	4919      	ldr	r1, [pc, #100]	@ (800239c <Shell_Loop+0x22c>)
 8002338:	4806      	ldr	r0, [pc, #24]	@ (8002354 <Shell_Loop+0x1e4>)
 800233a:	f004 fb72 	bl	8006a22 <HAL_UART_Transmit>
		newCmdReady = 0;
 800233e:	4b0c      	ldr	r3, [pc, #48]	@ (8002370 <Shell_Loop+0x200>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
	}
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000614 	.word	0x20000614
 800234c:	20000618 	.word	0x20000618
 8002350:	20000088 	.word	0x20000088
 8002354:	200004f4 	.word	0x200004f4
 8002358:	2000069c 	.word	0x2000069c
 800235c:	2000065c 	.word	0x2000065c
 8002360:	200006c4 	.word	0x200006c4
 8002364:	0800b850 	.word	0x0800b850
 8002368:	200006c8 	.word	0x200006c8
 800236c:	200006a0 	.word	0x200006a0
 8002370:	200006cc 	.word	0x200006cc
 8002374:	2000008c 	.word	0x2000008c
 8002378:	0800b854 	.word	0x0800b854
 800237c:	200000a4 	.word	0x200000a4
 8002380:	0800b864 	.word	0x0800b864
 8002384:	200000c0 	.word	0x200000c0
 8002388:	0800b86c 	.word	0x0800b86c
 800238c:	0800b874 	.word	0x0800b874
 8002390:	0800b87c 	.word	0x0800b87c
 8002394:	0800b884 	.word	0x0800b884
 8002398:	20000090 	.word	0x20000090
 800239c:	20000004 	.word	0x20000004

080023a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80023a8:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <HAL_UART_RxCpltCallback+0x20>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80023ae:	2201      	movs	r2, #1
 80023b0:	4904      	ldr	r1, [pc, #16]	@ (80023c4 <HAL_UART_RxCpltCallback+0x24>)
 80023b2:	4805      	ldr	r0, [pc, #20]	@ (80023c8 <HAL_UART_RxCpltCallback+0x28>)
 80023b4:	f004 fbcc 	bl	8006b50 <HAL_UART_Receive_IT>
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000614 	.word	0x20000614
 80023c4:	20000618 	.word	0x20000618
 80023c8:	200004f4 	.word	0x200004f4

080023cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023cc:	480d      	ldr	r0, [pc, #52]	@ (8002404 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023d0:	480d      	ldr	r0, [pc, #52]	@ (8002408 <LoopForever+0x6>)
  ldr r1, =_edata
 80023d2:	490e      	ldr	r1, [pc, #56]	@ (800240c <LoopForever+0xa>)
  ldr r2, =_sidata
 80023d4:	4a0e      	ldr	r2, [pc, #56]	@ (8002410 <LoopForever+0xe>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80023d8:	e002      	b.n	80023e0 <LoopCopyDataInit>

080023da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023de:	3304      	adds	r3, #4

080023e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e4:	d3f9      	bcc.n	80023da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023e8:	4c0b      	ldr	r4, [pc, #44]	@ (8002418 <LoopForever+0x16>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ec:	e001      	b.n	80023f2 <LoopFillZerobss>

080023ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f0:	3204      	adds	r2, #4

080023f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f4:	d3fb      	bcc.n	80023ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023f6:	f7ff fb41 	bl	8001a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023fa:	f007 fb9d 	bl	8009b38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023fe:	f7ff f915 	bl	800162c <main>

08002402 <LoopForever>:

LoopForever:
    b LoopForever
 8002402:	e7fe      	b.n	8002402 <LoopForever>
  ldr   r0, =_estack
 8002404:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800240c:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 8002410:	0800bcf4 	.word	0x0800bcf4
  ldr r2, =_sbss
 8002414:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 8002418:	20000820 	.word	0x20000820

0800241c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800241c:	e7fe      	b.n	800241c <ADC1_2_IRQHandler>

0800241e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002428:	2003      	movs	r0, #3
 800242a:	f001 fa08 	bl	800383e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800242e:	200f      	movs	r0, #15
 8002430:	f7ff f99c 	bl	800176c <HAL_InitTick>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	71fb      	strb	r3, [r7, #7]
 800243e:	e001      	b.n	8002444 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002440:	f7ff f970 	bl	8001724 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002444:	79fb      	ldrb	r3, [r7, #7]

}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002454:	4b05      	ldr	r3, [pc, #20]	@ (800246c <HAL_IncTick+0x1c>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	4b05      	ldr	r3, [pc, #20]	@ (8002470 <HAL_IncTick+0x20>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4413      	add	r3, r2
 800245e:	4a03      	ldr	r2, [pc, #12]	@ (800246c <HAL_IncTick+0x1c>)
 8002460:	6013      	str	r3, [r2, #0]
}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	200006d0 	.word	0x200006d0
 8002470:	20000144 	.word	0x20000144

08002474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return uwTick;
 8002478:	4b03      	ldr	r3, [pc, #12]	@ (8002488 <HAL_GetTick+0x14>)
 800247a:	681b      	ldr	r3, [r3, #0]
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	200006d0 	.word	0x200006d0

0800248c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002494:	f7ff ffee 	bl	8002474 <HAL_GetTick>
 8002498:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024a4:	d004      	beq.n	80024b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80024a6:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <HAL_Delay+0x40>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	4413      	add	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024b0:	bf00      	nop
 80024b2:	f7ff ffdf 	bl	8002474 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d8f7      	bhi.n	80024b2 <HAL_Delay+0x26>
  {
  }
}
 80024c2:	bf00      	nop
 80024c4:	bf00      	nop
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000144 	.word	0x20000144

080024d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	431a      	orrs	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	609a      	str	r2, [r3, #8]
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	609a      	str	r2, [r3, #8]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002538:	b480      	push	{r7}
 800253a:	b087      	sub	sp, #28
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3360      	adds	r3, #96	@ 0x60
 800254a:	461a      	mov	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	4b08      	ldr	r3, [pc, #32]	@ (800257c <LL_ADC_SetOffset+0x44>)
 800255a:	4013      	ands	r3, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	4313      	orrs	r3, r2
 8002568:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002570:	bf00      	nop
 8002572:	371c      	adds	r7, #28
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	03fff000 	.word	0x03fff000

08002580 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3360      	adds	r3, #96	@ 0x60
 800258e:	461a      	mov	r2, r3
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b087      	sub	sp, #28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	3360      	adds	r3, #96	@ 0x60
 80025bc:	461a      	mov	r2, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	431a      	orrs	r2, r3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025d6:	bf00      	nop
 80025d8:	371c      	adds	r7, #28
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b087      	sub	sp, #28
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3360      	adds	r3, #96	@ 0x60
 80025f2:	461a      	mov	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	431a      	orrs	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800260c:	bf00      	nop
 800260e:	371c      	adds	r7, #28
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002618:	b480      	push	{r7}
 800261a:	b087      	sub	sp, #28
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	3360      	adds	r3, #96	@ 0x60
 8002628:	461a      	mov	r2, r3
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	431a      	orrs	r2, r3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002642:	bf00      	nop
 8002644:	371c      	adds	r7, #28
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	615a      	str	r2, [r3, #20]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	3330      	adds	r3, #48	@ 0x30
 8002684:	461a      	mov	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	0a1b      	lsrs	r3, r3, #8
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	4413      	add	r3, r2
 8002692:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	211f      	movs	r1, #31
 80026a0:	fa01 f303 	lsl.w	r3, r1, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	401a      	ands	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	0e9b      	lsrs	r3, r3, #26
 80026ac:	f003 011f 	and.w	r1, r3, #31
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ba:	431a      	orrs	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026c0:	bf00      	nop
 80026c2:	371c      	adds	r7, #28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b087      	sub	sp, #28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	3314      	adds	r3, #20
 80026dc:	461a      	mov	r2, r3
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	0e5b      	lsrs	r3, r3, #25
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	4413      	add	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	0d1b      	lsrs	r3, r3, #20
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	2107      	movs	r1, #7
 80026fa:	fa01 f303 	lsl.w	r3, r1, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	401a      	ands	r2, r3
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	0d1b      	lsrs	r3, r3, #20
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	fa01 f303 	lsl.w	r3, r1, r3
 8002710:	431a      	orrs	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002716:	bf00      	nop
 8002718:	371c      	adds	r7, #28
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a0f      	ldr	r2, [pc, #60]	@ (8002770 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d10a      	bne.n	800274e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002744:	431a      	orrs	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800274c:	e00a      	b.n	8002764 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275a:	43db      	mvns	r3, r3
 800275c:	401a      	ands	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	407f0000 	.word	0x407f0000

08002774 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002784:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6093      	str	r3, [r2, #8]
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027ac:	d101      	bne.n	80027b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80027d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027fc:	d101      	bne.n	8002802 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <LL_ADC_IsEnabled+0x18>
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <LL_ADC_IsEnabled+0x1a>
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b04      	cmp	r3, #4
 8002848:	d101      	bne.n	800284e <LL_ADC_REG_IsConversionOngoing+0x18>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b08      	cmp	r3, #8
 800286e:	d101      	bne.n	8002874 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002884:	b590      	push	{r4, r7, lr}
 8002886:	b089      	sub	sp, #36	@ 0x24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002890:	2300      	movs	r3, #0
 8002892:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e1af      	b.n	8002bfe <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d109      	bne.n	80028c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7fe fc49 	bl	8001144 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff67 	bl	8002798 <LL_ADC_IsDeepPowerDownEnabled>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d004      	beq.n	80028da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff4d 	bl	8002774 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff ff82 	bl	80027e8 <LL_ADC_IsInternalRegulatorEnabled>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d115      	bne.n	8002916 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff ff66 	bl	80027c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028f4:	4b9f      	ldr	r3, [pc, #636]	@ (8002b74 <HAL_ADC_Init+0x2f0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	099b      	lsrs	r3, r3, #6
 80028fa:	4a9f      	ldr	r2, [pc, #636]	@ (8002b78 <HAL_ADC_Init+0x2f4>)
 80028fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002900:	099b      	lsrs	r3, r3, #6
 8002902:	3301      	adds	r3, #1
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002908:	e002      	b.n	8002910 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	3b01      	subs	r3, #1
 800290e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f9      	bne.n	800290a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff ff64 	bl	80027e8 <LL_ADC_IsInternalRegulatorEnabled>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10d      	bne.n	8002942 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292a:	f043 0210 	orr.w	r2, r3, #16
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002936:	f043 0201 	orr.w	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff ff75 	bl	8002836 <LL_ADC_REG_IsConversionOngoing>
 800294c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b00      	cmp	r3, #0
 8002958:	f040 8148 	bne.w	8002bec <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2b00      	cmp	r3, #0
 8002960:	f040 8144 	bne.w	8002bec <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002968:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800296c:	f043 0202 	orr.w	r2, r3, #2
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff49 	bl	8002810 <LL_ADC_IsEnabled>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d141      	bne.n	8002a08 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800298c:	d004      	beq.n	8002998 <HAL_ADC_Init+0x114>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a7a      	ldr	r2, [pc, #488]	@ (8002b7c <HAL_ADC_Init+0x2f8>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d10f      	bne.n	80029b8 <HAL_ADC_Init+0x134>
 8002998:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800299c:	f7ff ff38 	bl	8002810 <LL_ADC_IsEnabled>
 80029a0:	4604      	mov	r4, r0
 80029a2:	4876      	ldr	r0, [pc, #472]	@ (8002b7c <HAL_ADC_Init+0x2f8>)
 80029a4:	f7ff ff34 	bl	8002810 <LL_ADC_IsEnabled>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4323      	orrs	r3, r4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	e012      	b.n	80029de <HAL_ADC_Init+0x15a>
 80029b8:	4871      	ldr	r0, [pc, #452]	@ (8002b80 <HAL_ADC_Init+0x2fc>)
 80029ba:	f7ff ff29 	bl	8002810 <LL_ADC_IsEnabled>
 80029be:	4604      	mov	r4, r0
 80029c0:	4870      	ldr	r0, [pc, #448]	@ (8002b84 <HAL_ADC_Init+0x300>)
 80029c2:	f7ff ff25 	bl	8002810 <LL_ADC_IsEnabled>
 80029c6:	4603      	mov	r3, r0
 80029c8:	431c      	orrs	r4, r3
 80029ca:	486f      	ldr	r0, [pc, #444]	@ (8002b88 <HAL_ADC_Init+0x304>)
 80029cc:	f7ff ff20 	bl	8002810 <LL_ADC_IsEnabled>
 80029d0:	4603      	mov	r3, r0
 80029d2:	4323      	orrs	r3, r4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf0c      	ite	eq
 80029d8:	2301      	moveq	r3, #1
 80029da:	2300      	movne	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d012      	beq.n	8002a08 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029ea:	d004      	beq.n	80029f6 <HAL_ADC_Init+0x172>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a62      	ldr	r2, [pc, #392]	@ (8002b7c <HAL_ADC_Init+0x2f8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d101      	bne.n	80029fa <HAL_ADC_Init+0x176>
 80029f6:	4a65      	ldr	r2, [pc, #404]	@ (8002b8c <HAL_ADC_Init+0x308>)
 80029f8:	e000      	b.n	80029fc <HAL_ADC_Init+0x178>
 80029fa:	4a65      	ldr	r2, [pc, #404]	@ (8002b90 <HAL_ADC_Init+0x30c>)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4619      	mov	r1, r3
 8002a02:	4610      	mov	r0, r2
 8002a04:	f7ff fd64 	bl	80024d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	7f5b      	ldrb	r3, [r3, #29]
 8002a0c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a12:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002a18:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002a1e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a26:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d106      	bne.n	8002a44 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	045b      	lsls	r3, r3, #17
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d009      	beq.n	8002a60 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a50:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a58:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	4b4b      	ldr	r3, [pc, #300]	@ (8002b94 <HAL_ADC_Init+0x310>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	69b9      	ldr	r1, [r7, #24]
 8002a70:	430b      	orrs	r3, r1
 8002a72:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fed1 	bl	8002836 <LL_ADC_REG_IsConversionOngoing>
 8002a94:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fede 	bl	800285c <LL_ADC_INJ_IsConversionOngoing>
 8002aa0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d17f      	bne.n	8002ba8 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d17c      	bne.n	8002ba8 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ab2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002aba:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002aca:	f023 0302 	bic.w	r3, r3, #2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6812      	ldr	r2, [r2, #0]
 8002ad2:	69b9      	ldr	r1, [r7, #24]
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d017      	beq.n	8002b10 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002aee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002af8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002afc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6911      	ldr	r1, [r2, #16]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002b0e:	e013      	b.n	8002b38 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691a      	ldr	r2, [r3, #16]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002b1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b34:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d12a      	bne.n	8002b98 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002b4c:	f023 0304 	bic.w	r3, r3, #4
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b58:	4311      	orrs	r1, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002b5e:	4311      	orrs	r1, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b64:	430a      	orrs	r2, r1
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f042 0201 	orr.w	r2, r2, #1
 8002b70:	611a      	str	r2, [r3, #16]
 8002b72:	e019      	b.n	8002ba8 <HAL_ADC_Init+0x324>
 8002b74:	20000000 	.word	0x20000000
 8002b78:	053e2d63 	.word	0x053e2d63
 8002b7c:	50000100 	.word	0x50000100
 8002b80:	50000400 	.word	0x50000400
 8002b84:	50000500 	.word	0x50000500
 8002b88:	50000600 	.word	0x50000600
 8002b8c:	50000300 	.word	0x50000300
 8002b90:	50000700 	.word	0x50000700
 8002b94:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0201 	bic.w	r2, r2, #1
 8002ba6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d10c      	bne.n	8002bca <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	f023 010f 	bic.w	r1, r3, #15
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	1e5a      	subs	r2, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bc8:	e007      	b.n	8002bda <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 020f 	bic.w	r2, r2, #15
 8002bd8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bde:	f023 0303 	bic.w	r3, r3, #3
 8002be2:	f043 0201 	orr.w	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bea:	e007      	b.n	8002bfc <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf0:	f043 0210 	orr.w	r2, r3, #16
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3724      	adds	r7, #36	@ 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd90      	pop	{r4, r7, pc}
 8002c06:	bf00      	nop

08002c08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b0b6      	sub	sp, #216	@ 0xd8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d102      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x24>
 8002c26:	2302      	movs	r3, #2
 8002c28:	f000 bc13 	b.w	8003452 <HAL_ADC_ConfigChannel+0x84a>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fdfc 	bl	8002836 <LL_ADC_REG_IsConversionOngoing>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f040 83f3 	bne.w	800342c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	6859      	ldr	r1, [r3, #4]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	f7ff fd0e 	bl	8002674 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fdea 	bl	8002836 <LL_ADC_REG_IsConversionOngoing>
 8002c62:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fdf6 	bl	800285c <LL_ADC_INJ_IsConversionOngoing>
 8002c70:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f040 81d9 	bne.w	8003030 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f040 81d4 	bne.w	8003030 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c90:	d10f      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	f7ff fd15 	bl	80026cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff fccf 	bl	800264e <LL_ADC_SetSamplingTimeCommonConfig>
 8002cb0:	e00e      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	6819      	ldr	r1, [r3, #0]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f7ff fd04 	bl	80026cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2100      	movs	r1, #0
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fcbf 	bl	800264e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	695a      	ldr	r2, [r3, #20]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	08db      	lsrs	r3, r3, #3
 8002cdc:	f003 0303 	and.w	r3, r3, #3
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d022      	beq.n	8002d38 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6919      	ldr	r1, [r3, #16]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d02:	f7ff fc19 	bl	8002538 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6919      	ldr	r1, [r3, #16]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	461a      	mov	r2, r3
 8002d14:	f7ff fc65 	bl	80025e2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	6919      	ldr	r1, [r3, #16]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	7f1b      	ldrb	r3, [r3, #28]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d102      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x126>
 8002d28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d2c:	e000      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x128>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	461a      	mov	r2, r3
 8002d32:	f7ff fc71 	bl	8002618 <LL_ADC_SetOffsetSaturation>
 8002d36:	e17b      	b.n	8003030 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff fc1e 	bl	8002580 <LL_ADC_GetOffsetChannel>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10a      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x15c>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2100      	movs	r1, #0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fc13 	bl	8002580 <LL_ADC_GetOffsetChannel>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	0e9b      	lsrs	r3, r3, #26
 8002d5e:	f003 021f 	and.w	r2, r3, #31
 8002d62:	e01e      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x19a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2100      	movs	r1, #0
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fc08 	bl	8002580 <LL_ADC_GetOffsetChannel>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d7a:	fa93 f3a3 	rbit	r3, r3
 8002d7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002d92:	2320      	movs	r3, #32
 8002d94:	e004      	b.n	8002da0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002d96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d9a:	fab3 f383 	clz	r3, r3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d105      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x1b2>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	0e9b      	lsrs	r3, r3, #26
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	e018      	b.n	8002dec <HAL_ADC_ConfigChannel+0x1e4>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002dc6:	fa93 f3a3 	rbit	r3, r3
 8002dca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002dd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002dde:	2320      	movs	r3, #32
 8002de0:	e004      	b.n	8002dec <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002de2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d106      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2200      	movs	r2, #0
 8002df6:	2100      	movs	r1, #0
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fbd7 	bl	80025ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2101      	movs	r1, #1
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff fbbb 	bl	8002580 <LL_ADC_GetOffsetChannel>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10a      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x222>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2101      	movs	r1, #1
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fbb0 	bl	8002580 <LL_ADC_GetOffsetChannel>
 8002e20:	4603      	mov	r3, r0
 8002e22:	0e9b      	lsrs	r3, r3, #26
 8002e24:	f003 021f 	and.w	r2, r3, #31
 8002e28:	e01e      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x260>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2101      	movs	r1, #1
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fba5 	bl	8002580 <LL_ADC_GetOffsetChannel>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002e48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002e50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002e58:	2320      	movs	r3, #32
 8002e5a:	e004      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002e5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d105      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x278>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	0e9b      	lsrs	r3, r3, #26
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	e018      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x2aa>
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e8c:	fa93 f3a3 	rbit	r3, r3
 8002e90:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002e94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002ea4:	2320      	movs	r3, #32
 8002ea6:	e004      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002ea8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002eac:	fab3 f383 	clz	r3, r3
 8002eb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d106      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fb74 	bl	80025ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2102      	movs	r1, #2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fb58 	bl	8002580 <LL_ADC_GetOffsetChannel>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10a      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x2e8>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2102      	movs	r1, #2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff fb4d 	bl	8002580 <LL_ADC_GetOffsetChannel>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	0e9b      	lsrs	r3, r3, #26
 8002eea:	f003 021f 	and.w	r2, r3, #31
 8002eee:	e01e      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x326>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2102      	movs	r1, #2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff fb42 	bl	8002580 <LL_ADC_GetOffsetChannel>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f06:	fa93 f3a3 	rbit	r3, r3
 8002f0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002f0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002f16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002f1e:	2320      	movs	r3, #32
 8002f20:	e004      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002f22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d105      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x33e>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	0e9b      	lsrs	r3, r3, #26
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	e016      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x36c>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f52:	fa93 f3a3 	rbit	r3, r3
 8002f56:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002f58:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002f5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002f66:	2320      	movs	r3, #32
 8002f68:	e004      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002f6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f6e:	fab3 f383 	clz	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d106      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2102      	movs	r1, #2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fb13 	bl	80025ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2103      	movs	r1, #3
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff faf7 	bl	8002580 <LL_ADC_GetOffsetChannel>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10a      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x3aa>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2103      	movs	r1, #3
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff faec 	bl	8002580 <LL_ADC_GetOffsetChannel>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	0e9b      	lsrs	r3, r3, #26
 8002fac:	f003 021f 	and.w	r2, r3, #31
 8002fb0:	e017      	b.n	8002fe2 <HAL_ADC_ConfigChannel+0x3da>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2103      	movs	r1, #3
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff fae1 	bl	8002580 <LL_ADC_GetOffsetChannel>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fc4:	fa93 f3a3 	rbit	r3, r3
 8002fc8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002fca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002fcc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002fce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002fd4:	2320      	movs	r3, #32
 8002fd6:	e003      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002fd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fda:	fab3 f383 	clz	r3, r3
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d105      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x3f2>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	0e9b      	lsrs	r3, r3, #26
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	e011      	b.n	800301e <HAL_ADC_ConfigChannel+0x416>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003008:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800300a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800300c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003012:	2320      	movs	r3, #32
 8003014:	e003      	b.n	800301e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003016:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003018:	fab3 f383 	clz	r3, r3
 800301c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800301e:	429a      	cmp	r2, r3
 8003020:	d106      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2200      	movs	r2, #0
 8003028:	2103      	movs	r1, #3
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fabe 	bl	80025ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fbeb 	bl	8002810 <LL_ADC_IsEnabled>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	f040 813d 	bne.w	80032bc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6819      	ldr	r1, [r3, #0]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	461a      	mov	r2, r3
 8003050:	f7ff fb68 	bl	8002724 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	4aa2      	ldr	r2, [pc, #648]	@ (80032e4 <HAL_ADC_ConfigChannel+0x6dc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	f040 812e 	bne.w	80032bc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10b      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x480>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	0e9b      	lsrs	r3, r3, #26
 8003076:	3301      	adds	r3, #1
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	2b09      	cmp	r3, #9
 800307e:	bf94      	ite	ls
 8003080:	2301      	movls	r3, #1
 8003082:	2300      	movhi	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	e019      	b.n	80030bc <HAL_ADC_ConfigChannel+0x4b4>
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003090:	fa93 f3a3 	rbit	r3, r3
 8003094:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003096:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003098:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800309a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80030a0:	2320      	movs	r3, #32
 80030a2:	e003      	b.n	80030ac <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80030a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030a6:	fab3 f383 	clz	r3, r3
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	3301      	adds	r3, #1
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	2b09      	cmp	r3, #9
 80030b4:	bf94      	ite	ls
 80030b6:	2301      	movls	r3, #1
 80030b8:	2300      	movhi	r3, #0
 80030ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d079      	beq.n	80031b4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d107      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x4d4>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	0e9b      	lsrs	r3, r3, #26
 80030d2:	3301      	adds	r3, #1
 80030d4:	069b      	lsls	r3, r3, #26
 80030d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030da:	e015      	b.n	8003108 <HAL_ADC_ConfigChannel+0x500>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030e4:	fa93 f3a3 	rbit	r3, r3
 80030e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80030ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80030ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80030f4:	2320      	movs	r3, #32
 80030f6:	e003      	b.n	8003100 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80030f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030fa:	fab3 f383 	clz	r3, r3
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	3301      	adds	r3, #1
 8003102:	069b      	lsls	r3, r3, #26
 8003104:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003110:	2b00      	cmp	r3, #0
 8003112:	d109      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x520>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	0e9b      	lsrs	r3, r3, #26
 800311a:	3301      	adds	r3, #1
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	2101      	movs	r1, #1
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	e017      	b.n	8003158 <HAL_ADC_ConfigChannel+0x550>
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003130:	fa93 f3a3 	rbit	r3, r3
 8003134:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003138:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800313a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003140:	2320      	movs	r3, #32
 8003142:	e003      	b.n	800314c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003144:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003146:	fab3 f383 	clz	r3, r3
 800314a:	b2db      	uxtb	r3, r3
 800314c:	3301      	adds	r3, #1
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	2101      	movs	r1, #1
 8003154:	fa01 f303 	lsl.w	r3, r1, r3
 8003158:	ea42 0103 	orr.w	r1, r2, r3
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10a      	bne.n	800317e <HAL_ADC_ConfigChannel+0x576>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	0e9b      	lsrs	r3, r3, #26
 800316e:	3301      	adds	r3, #1
 8003170:	f003 021f 	and.w	r2, r3, #31
 8003174:	4613      	mov	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	4413      	add	r3, r2
 800317a:	051b      	lsls	r3, r3, #20
 800317c:	e018      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x5a8>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800318c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800318e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003196:	2320      	movs	r3, #32
 8003198:	e003      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800319a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800319c:	fab3 f383 	clz	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	3301      	adds	r3, #1
 80031a4:	f003 021f 	and.w	r2, r3, #31
 80031a8:	4613      	mov	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4413      	add	r3, r2
 80031ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031b0:	430b      	orrs	r3, r1
 80031b2:	e07e      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d107      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x5c8>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	0e9b      	lsrs	r3, r3, #26
 80031c6:	3301      	adds	r3, #1
 80031c8:	069b      	lsls	r3, r3, #26
 80031ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031ce:	e015      	b.n	80031fc <HAL_ADC_ConfigChannel+0x5f4>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80031de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80031e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80031e8:	2320      	movs	r3, #32
 80031ea:	e003      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80031ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ee:	fab3 f383 	clz	r3, r3
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	3301      	adds	r3, #1
 80031f6:	069b      	lsls	r3, r3, #26
 80031f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003204:	2b00      	cmp	r3, #0
 8003206:	d109      	bne.n	800321c <HAL_ADC_ConfigChannel+0x614>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	0e9b      	lsrs	r3, r3, #26
 800320e:	3301      	adds	r3, #1
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	2101      	movs	r1, #1
 8003216:	fa01 f303 	lsl.w	r3, r1, r3
 800321a:	e017      	b.n	800324c <HAL_ADC_ConfigChannel+0x644>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	fa93 f3a3 	rbit	r3, r3
 8003228:	61fb      	str	r3, [r7, #28]
  return result;
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800322e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003234:	2320      	movs	r3, #32
 8003236:	e003      	b.n	8003240 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323a:	fab3 f383 	clz	r3, r3
 800323e:	b2db      	uxtb	r3, r3
 8003240:	3301      	adds	r3, #1
 8003242:	f003 031f 	and.w	r3, r3, #31
 8003246:	2101      	movs	r1, #1
 8003248:	fa01 f303 	lsl.w	r3, r1, r3
 800324c:	ea42 0103 	orr.w	r1, r2, r3
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10d      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x670>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	0e9b      	lsrs	r3, r3, #26
 8003262:	3301      	adds	r3, #1
 8003264:	f003 021f 	and.w	r2, r3, #31
 8003268:	4613      	mov	r3, r2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	4413      	add	r3, r2
 800326e:	3b1e      	subs	r3, #30
 8003270:	051b      	lsls	r3, r3, #20
 8003272:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003276:	e01b      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x6a8>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	613b      	str	r3, [r7, #16]
  return result;
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003290:	2320      	movs	r3, #32
 8003292:	e003      	b.n	800329c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	3301      	adds	r3, #1
 800329e:	f003 021f 	and.w	r2, r3, #31
 80032a2:	4613      	mov	r3, r2
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4413      	add	r3, r2
 80032a8:	3b1e      	subs	r3, #30
 80032aa:	051b      	lsls	r3, r3, #20
 80032ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032b0:	430b      	orrs	r3, r1
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	6892      	ldr	r2, [r2, #8]
 80032b6:	4619      	mov	r1, r3
 80032b8:	f7ff fa08 	bl	80026cc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b09      	ldr	r3, [pc, #36]	@ (80032e8 <HAL_ADC_ConfigChannel+0x6e0>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80be 	beq.w	8003446 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032d2:	d004      	beq.n	80032de <HAL_ADC_ConfigChannel+0x6d6>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a04      	ldr	r2, [pc, #16]	@ (80032ec <HAL_ADC_ConfigChannel+0x6e4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d10a      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x6ec>
 80032de:	4b04      	ldr	r3, [pc, #16]	@ (80032f0 <HAL_ADC_ConfigChannel+0x6e8>)
 80032e0:	e009      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x6ee>
 80032e2:	bf00      	nop
 80032e4:	407f0000 	.word	0x407f0000
 80032e8:	80080000 	.word	0x80080000
 80032ec:	50000100 	.word	0x50000100
 80032f0:	50000300 	.word	0x50000300
 80032f4:	4b59      	ldr	r3, [pc, #356]	@ (800345c <HAL_ADC_ConfigChannel+0x854>)
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff f910 	bl	800251c <LL_ADC_GetCommonPathInternalCh>
 80032fc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a56      	ldr	r2, [pc, #344]	@ (8003460 <HAL_ADC_ConfigChannel+0x858>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d004      	beq.n	8003314 <HAL_ADC_ConfigChannel+0x70c>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a55      	ldr	r2, [pc, #340]	@ (8003464 <HAL_ADC_ConfigChannel+0x85c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d13a      	bne.n	800338a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003314:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003318:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d134      	bne.n	800338a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003328:	d005      	beq.n	8003336 <HAL_ADC_ConfigChannel+0x72e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a4e      	ldr	r2, [pc, #312]	@ (8003468 <HAL_ADC_ConfigChannel+0x860>)
 8003330:	4293      	cmp	r3, r2
 8003332:	f040 8085 	bne.w	8003440 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800333e:	d004      	beq.n	800334a <HAL_ADC_ConfigChannel+0x742>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a49      	ldr	r2, [pc, #292]	@ (800346c <HAL_ADC_ConfigChannel+0x864>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d101      	bne.n	800334e <HAL_ADC_ConfigChannel+0x746>
 800334a:	4a49      	ldr	r2, [pc, #292]	@ (8003470 <HAL_ADC_ConfigChannel+0x868>)
 800334c:	e000      	b.n	8003350 <HAL_ADC_ConfigChannel+0x748>
 800334e:	4a43      	ldr	r2, [pc, #268]	@ (800345c <HAL_ADC_ConfigChannel+0x854>)
 8003350:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003354:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003358:	4619      	mov	r1, r3
 800335a:	4610      	mov	r0, r2
 800335c:	f7ff f8cb 	bl	80024f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003360:	4b44      	ldr	r3, [pc, #272]	@ (8003474 <HAL_ADC_ConfigChannel+0x86c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	099b      	lsrs	r3, r3, #6
 8003366:	4a44      	ldr	r2, [pc, #272]	@ (8003478 <HAL_ADC_ConfigChannel+0x870>)
 8003368:	fba2 2303 	umull	r2, r3, r2, r3
 800336c:	099b      	lsrs	r3, r3, #6
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	4613      	mov	r3, r2
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800337a:	e002      	b.n	8003382 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	3b01      	subs	r3, #1
 8003380:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f9      	bne.n	800337c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003388:	e05a      	b.n	8003440 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a3b      	ldr	r2, [pc, #236]	@ (800347c <HAL_ADC_ConfigChannel+0x874>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d125      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x7d8>
 8003394:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003398:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d11f      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a31      	ldr	r2, [pc, #196]	@ (800346c <HAL_ADC_ConfigChannel+0x864>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d104      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x7ac>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a34      	ldr	r2, [pc, #208]	@ (8003480 <HAL_ADC_ConfigChannel+0x878>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d047      	beq.n	8003444 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033bc:	d004      	beq.n	80033c8 <HAL_ADC_ConfigChannel+0x7c0>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a2a      	ldr	r2, [pc, #168]	@ (800346c <HAL_ADC_ConfigChannel+0x864>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d101      	bne.n	80033cc <HAL_ADC_ConfigChannel+0x7c4>
 80033c8:	4a29      	ldr	r2, [pc, #164]	@ (8003470 <HAL_ADC_ConfigChannel+0x868>)
 80033ca:	e000      	b.n	80033ce <HAL_ADC_ConfigChannel+0x7c6>
 80033cc:	4a23      	ldr	r2, [pc, #140]	@ (800345c <HAL_ADC_ConfigChannel+0x854>)
 80033ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033d6:	4619      	mov	r1, r3
 80033d8:	4610      	mov	r0, r2
 80033da:	f7ff f88c 	bl	80024f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033de:	e031      	b.n	8003444 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a27      	ldr	r2, [pc, #156]	@ (8003484 <HAL_ADC_ConfigChannel+0x87c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d12d      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d127      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a1c      	ldr	r2, [pc, #112]	@ (800346c <HAL_ADC_ConfigChannel+0x864>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d022      	beq.n	8003446 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003408:	d004      	beq.n	8003414 <HAL_ADC_ConfigChannel+0x80c>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a17      	ldr	r2, [pc, #92]	@ (800346c <HAL_ADC_ConfigChannel+0x864>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d101      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x810>
 8003414:	4a16      	ldr	r2, [pc, #88]	@ (8003470 <HAL_ADC_ConfigChannel+0x868>)
 8003416:	e000      	b.n	800341a <HAL_ADC_ConfigChannel+0x812>
 8003418:	4a10      	ldr	r2, [pc, #64]	@ (800345c <HAL_ADC_ConfigChannel+0x854>)
 800341a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800341e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003422:	4619      	mov	r1, r3
 8003424:	4610      	mov	r0, r2
 8003426:	f7ff f866 	bl	80024f6 <LL_ADC_SetCommonPathInternalCh>
 800342a:	e00c      	b.n	8003446 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003430:	f043 0220 	orr.w	r2, r3, #32
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800343e:	e002      	b.n	8003446 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003440:	bf00      	nop
 8003442:	e000      	b.n	8003446 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003444:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800344e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003452:	4618      	mov	r0, r3
 8003454:	37d8      	adds	r7, #216	@ 0xd8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	50000700 	.word	0x50000700
 8003460:	c3210000 	.word	0xc3210000
 8003464:	90c00010 	.word	0x90c00010
 8003468:	50000600 	.word	0x50000600
 800346c:	50000100 	.word	0x50000100
 8003470:	50000300 	.word	0x50000300
 8003474:	20000000 	.word	0x20000000
 8003478:	053e2d63 	.word	0x053e2d63
 800347c:	c7520000 	.word	0xc7520000
 8003480:	50000500 	.word	0x50000500
 8003484:	cb840000 	.word	0xcb840000

08003488 <LL_ADC_IsEnabled>:
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <LL_ADC_IsEnabled+0x18>
 800349c:	2301      	movs	r3, #1
 800349e:	e000      	b.n	80034a2 <LL_ADC_IsEnabled+0x1a>
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <LL_ADC_REG_IsConversionOngoing>:
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d101      	bne.n	80034c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034c2:	2301      	movs	r3, #1
 80034c4:	e000      	b.n	80034c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80034d4:	b590      	push	{r4, r7, lr}
 80034d6:	b0a1      	sub	sp, #132	@ 0x84
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034ee:	2302      	movs	r3, #2
 80034f0:	e0e7      	b.n	80036c2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80034fa:	2300      	movs	r3, #0
 80034fc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80034fe:	2300      	movs	r3, #0
 8003500:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800350a:	d102      	bne.n	8003512 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800350c:	4b6f      	ldr	r3, [pc, #444]	@ (80036cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	e009      	b.n	8003526 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a6e      	ldr	r2, [pc, #440]	@ (80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d102      	bne.n	8003522 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800351c:	4b6d      	ldr	r3, [pc, #436]	@ (80036d4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	e001      	b.n	8003526 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003522:	2300      	movs	r3, #0
 8003524:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10b      	bne.n	8003544 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003530:	f043 0220 	orr.w	r2, r3, #32
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0be      	b.n	80036c2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff ffb1 	bl	80034ae <LL_ADC_REG_IsConversionOngoing>
 800354c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff ffab 	bl	80034ae <LL_ADC_REG_IsConversionOngoing>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	f040 80a0 	bne.w	80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003560:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003562:	2b00      	cmp	r3, #0
 8003564:	f040 809c 	bne.w	80036a0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003570:	d004      	beq.n	800357c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a55      	ldr	r2, [pc, #340]	@ (80036cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d101      	bne.n	8003580 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800357c:	4b56      	ldr	r3, [pc, #344]	@ (80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800357e:	e000      	b.n	8003582 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003580:	4b56      	ldr	r3, [pc, #344]	@ (80036dc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003582:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d04b      	beq.n	8003624 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800358c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	6859      	ldr	r1, [r3, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800359e:	035b      	lsls	r3, r3, #13
 80035a0:	430b      	orrs	r3, r1
 80035a2:	431a      	orrs	r2, r3
 80035a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035a6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035b0:	d004      	beq.n	80035bc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a45      	ldr	r2, [pc, #276]	@ (80036cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d10f      	bne.n	80035dc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80035bc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80035c0:	f7ff ff62 	bl	8003488 <LL_ADC_IsEnabled>
 80035c4:	4604      	mov	r4, r0
 80035c6:	4841      	ldr	r0, [pc, #260]	@ (80036cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035c8:	f7ff ff5e 	bl	8003488 <LL_ADC_IsEnabled>
 80035cc:	4603      	mov	r3, r0
 80035ce:	4323      	orrs	r3, r4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	e012      	b.n	8003602 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80035dc:	483c      	ldr	r0, [pc, #240]	@ (80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80035de:	f7ff ff53 	bl	8003488 <LL_ADC_IsEnabled>
 80035e2:	4604      	mov	r4, r0
 80035e4:	483b      	ldr	r0, [pc, #236]	@ (80036d4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80035e6:	f7ff ff4f 	bl	8003488 <LL_ADC_IsEnabled>
 80035ea:	4603      	mov	r3, r0
 80035ec:	431c      	orrs	r4, r3
 80035ee:	483c      	ldr	r0, [pc, #240]	@ (80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80035f0:	f7ff ff4a 	bl	8003488 <LL_ADC_IsEnabled>
 80035f4:	4603      	mov	r3, r0
 80035f6:	4323      	orrs	r3, r4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf0c      	ite	eq
 80035fc:	2301      	moveq	r3, #1
 80035fe:	2300      	movne	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d056      	beq.n	80036b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003606:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800360e:	f023 030f 	bic.w	r3, r3, #15
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	6811      	ldr	r1, [r2, #0]
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	6892      	ldr	r2, [r2, #8]
 800361a:	430a      	orrs	r2, r1
 800361c:	431a      	orrs	r2, r3
 800361e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003620:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003622:	e047      	b.n	80036b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003624:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800362c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800362e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003638:	d004      	beq.n	8003644 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a23      	ldr	r2, [pc, #140]	@ (80036cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d10f      	bne.n	8003664 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003644:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003648:	f7ff ff1e 	bl	8003488 <LL_ADC_IsEnabled>
 800364c:	4604      	mov	r4, r0
 800364e:	481f      	ldr	r0, [pc, #124]	@ (80036cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003650:	f7ff ff1a 	bl	8003488 <LL_ADC_IsEnabled>
 8003654:	4603      	mov	r3, r0
 8003656:	4323      	orrs	r3, r4
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf0c      	ite	eq
 800365c:	2301      	moveq	r3, #1
 800365e:	2300      	movne	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	e012      	b.n	800368a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003664:	481a      	ldr	r0, [pc, #104]	@ (80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003666:	f7ff ff0f 	bl	8003488 <LL_ADC_IsEnabled>
 800366a:	4604      	mov	r4, r0
 800366c:	4819      	ldr	r0, [pc, #100]	@ (80036d4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800366e:	f7ff ff0b 	bl	8003488 <LL_ADC_IsEnabled>
 8003672:	4603      	mov	r3, r0
 8003674:	431c      	orrs	r4, r3
 8003676:	481a      	ldr	r0, [pc, #104]	@ (80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003678:	f7ff ff06 	bl	8003488 <LL_ADC_IsEnabled>
 800367c:	4603      	mov	r3, r0
 800367e:	4323      	orrs	r3, r4
 8003680:	2b00      	cmp	r3, #0
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d012      	beq.n	80036b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800368e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003696:	f023 030f 	bic.w	r3, r3, #15
 800369a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800369c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800369e:	e009      	b.n	80036b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a4:	f043 0220 	orr.w	r2, r3, #32
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80036b2:	e000      	b.n	80036b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80036be:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3784      	adds	r7, #132	@ 0x84
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd90      	pop	{r4, r7, pc}
 80036ca:	bf00      	nop
 80036cc:	50000100 	.word	0x50000100
 80036d0:	50000400 	.word	0x50000400
 80036d4:	50000500 	.word	0x50000500
 80036d8:	50000300 	.word	0x50000300
 80036dc:	50000700 	.word	0x50000700
 80036e0:	50000600 	.word	0x50000600

080036e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f003 0307 	and.w	r3, r3, #7
 80036f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003728 <__NVIC_SetPriorityGrouping+0x44>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003700:	4013      	ands	r3, r2
 8003702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800370c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003716:	4a04      	ldr	r2, [pc, #16]	@ (8003728 <__NVIC_SetPriorityGrouping+0x44>)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	60d3      	str	r3, [r2, #12]
}
 800371c:	bf00      	nop
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	e000ed00 	.word	0xe000ed00

0800372c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003730:	4b04      	ldr	r3, [pc, #16]	@ (8003744 <__NVIC_GetPriorityGrouping+0x18>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	0a1b      	lsrs	r3, r3, #8
 8003736:	f003 0307 	and.w	r3, r3, #7
}
 800373a:	4618      	mov	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	e000ed00 	.word	0xe000ed00

08003748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003756:	2b00      	cmp	r3, #0
 8003758:	db0b      	blt.n	8003772 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	f003 021f 	and.w	r2, r3, #31
 8003760:	4907      	ldr	r1, [pc, #28]	@ (8003780 <__NVIC_EnableIRQ+0x38>)
 8003762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	2001      	movs	r0, #1
 800376a:	fa00 f202 	lsl.w	r2, r0, r2
 800376e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	e000e100 	.word	0xe000e100

08003784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	6039      	str	r1, [r7, #0]
 800378e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003794:	2b00      	cmp	r3, #0
 8003796:	db0a      	blt.n	80037ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	b2da      	uxtb	r2, r3
 800379c:	490c      	ldr	r1, [pc, #48]	@ (80037d0 <__NVIC_SetPriority+0x4c>)
 800379e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a2:	0112      	lsls	r2, r2, #4
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	440b      	add	r3, r1
 80037a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037ac:	e00a      	b.n	80037c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	b2da      	uxtb	r2, r3
 80037b2:	4908      	ldr	r1, [pc, #32]	@ (80037d4 <__NVIC_SetPriority+0x50>)
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	f003 030f 	and.w	r3, r3, #15
 80037ba:	3b04      	subs	r3, #4
 80037bc:	0112      	lsls	r2, r2, #4
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	440b      	add	r3, r1
 80037c2:	761a      	strb	r2, [r3, #24]
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	e000e100 	.word	0xe000e100
 80037d4:	e000ed00 	.word	0xe000ed00

080037d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037d8:	b480      	push	{r7}
 80037da:	b089      	sub	sp, #36	@ 0x24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f1c3 0307 	rsb	r3, r3, #7
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	bf28      	it	cs
 80037f6:	2304      	movcs	r3, #4
 80037f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	3304      	adds	r3, #4
 80037fe:	2b06      	cmp	r3, #6
 8003800:	d902      	bls.n	8003808 <NVIC_EncodePriority+0x30>
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	3b03      	subs	r3, #3
 8003806:	e000      	b.n	800380a <NVIC_EncodePriority+0x32>
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800380c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	43da      	mvns	r2, r3
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	401a      	ands	r2, r3
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003820:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	fa01 f303 	lsl.w	r3, r1, r3
 800382a:	43d9      	mvns	r1, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003830:	4313      	orrs	r3, r2
         );
}
 8003832:	4618      	mov	r0, r3
 8003834:	3724      	adds	r7, #36	@ 0x24
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7ff ff4c 	bl	80036e4 <__NVIC_SetPriorityGrouping>
}
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003862:	f7ff ff63 	bl	800372c <__NVIC_GetPriorityGrouping>
 8003866:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	68b9      	ldr	r1, [r7, #8]
 800386c:	6978      	ldr	r0, [r7, #20]
 800386e:	f7ff ffb3 	bl	80037d8 <NVIC_EncodePriority>
 8003872:	4602      	mov	r2, r0
 8003874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003878:	4611      	mov	r1, r2
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff ff82 	bl	8003784 <__NVIC_SetPriority>
}
 8003880:	bf00      	nop
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff ff56 	bl	8003748 <__NVIC_EnableIRQ>
}
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d005      	beq.n	80038c8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2204      	movs	r2, #4
 80038c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	73fb      	strb	r3, [r7, #15]
 80038c6:	e037      	b.n	8003938 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 020e 	bic.w	r2, r2, #14
 80038d6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038e6:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0201 	bic.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fc:	f003 021f 	and.w	r2, r3, #31
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003904:	2101      	movs	r1, #1
 8003906:	fa01 f202 	lsl.w	r2, r1, r2
 800390a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003914:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00c      	beq.n	8003938 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003928:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800392c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003936:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003948:	7bfb      	ldrb	r3, [r7, #15]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d00d      	beq.n	800398a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2204      	movs	r2, #4
 8003972:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	73fb      	strb	r3, [r7, #15]
 8003988:	e047      	b.n	8003a1a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 020e 	bic.w	r2, r2, #14
 8003998:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0201 	bic.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039be:	f003 021f 	and.w	r2, r3, #31
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	2101      	movs	r1, #1
 80039c8:	fa01 f202 	lsl.w	r2, r1, r2
 80039cc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039d6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00c      	beq.n	80039fa <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80039f8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	4798      	blx	r3
    }
  }
  return status;
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a32:	e15a      	b.n	8003cea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	2101      	movs	r1, #1
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a40:	4013      	ands	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 814c 	beq.w	8003ce4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d005      	beq.n	8003a64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d130      	bne.n	8003ac6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	2203      	movs	r2, #3
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	43db      	mvns	r3, r3
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	091b      	lsrs	r3, r3, #4
 8003ab0:	f003 0201 	and.w	r2, r3, #1
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	d017      	beq.n	8003b02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	2203      	movs	r2, #3
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d123      	bne.n	8003b56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	08da      	lsrs	r2, r3, #3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3208      	adds	r2, #8
 8003b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	220f      	movs	r2, #15
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	08da      	lsrs	r2, r3, #3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3208      	adds	r2, #8
 8003b50:	6939      	ldr	r1, [r7, #16]
 8003b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	2203      	movs	r2, #3
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	43db      	mvns	r3, r3
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f003 0203 	and.w	r2, r3, #3
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 80a6 	beq.w	8003ce4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b98:	4b5b      	ldr	r3, [pc, #364]	@ (8003d08 <HAL_GPIO_Init+0x2e4>)
 8003b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9c:	4a5a      	ldr	r2, [pc, #360]	@ (8003d08 <HAL_GPIO_Init+0x2e4>)
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ba4:	4b58      	ldr	r3, [pc, #352]	@ (8003d08 <HAL_GPIO_Init+0x2e4>)
 8003ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bb0:	4a56      	ldr	r2, [pc, #344]	@ (8003d0c <HAL_GPIO_Init+0x2e8>)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	089b      	lsrs	r3, r3, #2
 8003bb6:	3302      	adds	r3, #2
 8003bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	220f      	movs	r2, #15
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003bda:	d01f      	beq.n	8003c1c <HAL_GPIO_Init+0x1f8>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a4c      	ldr	r2, [pc, #304]	@ (8003d10 <HAL_GPIO_Init+0x2ec>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d019      	beq.n	8003c18 <HAL_GPIO_Init+0x1f4>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a4b      	ldr	r2, [pc, #300]	@ (8003d14 <HAL_GPIO_Init+0x2f0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d013      	beq.n	8003c14 <HAL_GPIO_Init+0x1f0>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a4a      	ldr	r2, [pc, #296]	@ (8003d18 <HAL_GPIO_Init+0x2f4>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d00d      	beq.n	8003c10 <HAL_GPIO_Init+0x1ec>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a49      	ldr	r2, [pc, #292]	@ (8003d1c <HAL_GPIO_Init+0x2f8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d007      	beq.n	8003c0c <HAL_GPIO_Init+0x1e8>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a48      	ldr	r2, [pc, #288]	@ (8003d20 <HAL_GPIO_Init+0x2fc>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d101      	bne.n	8003c08 <HAL_GPIO_Init+0x1e4>
 8003c04:	2305      	movs	r3, #5
 8003c06:	e00a      	b.n	8003c1e <HAL_GPIO_Init+0x1fa>
 8003c08:	2306      	movs	r3, #6
 8003c0a:	e008      	b.n	8003c1e <HAL_GPIO_Init+0x1fa>
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	e006      	b.n	8003c1e <HAL_GPIO_Init+0x1fa>
 8003c10:	2303      	movs	r3, #3
 8003c12:	e004      	b.n	8003c1e <HAL_GPIO_Init+0x1fa>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e002      	b.n	8003c1e <HAL_GPIO_Init+0x1fa>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <HAL_GPIO_Init+0x1fa>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	f002 0203 	and.w	r2, r2, #3
 8003c24:	0092      	lsls	r2, r2, #2
 8003c26:	4093      	lsls	r3, r2
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c2e:	4937      	ldr	r1, [pc, #220]	@ (8003d0c <HAL_GPIO_Init+0x2e8>)
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	089b      	lsrs	r3, r3, #2
 8003c34:	3302      	adds	r3, #2
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c3c:	4b39      	ldr	r3, [pc, #228]	@ (8003d24 <HAL_GPIO_Init+0x300>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	43db      	mvns	r3, r3
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c60:	4a30      	ldr	r2, [pc, #192]	@ (8003d24 <HAL_GPIO_Init+0x300>)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c66:	4b2f      	ldr	r3, [pc, #188]	@ (8003d24 <HAL_GPIO_Init+0x300>)
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4013      	ands	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c8a:	4a26      	ldr	r2, [pc, #152]	@ (8003d24 <HAL_GPIO_Init+0x300>)
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003c90:	4b24      	ldr	r3, [pc, #144]	@ (8003d24 <HAL_GPIO_Init+0x300>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d24 <HAL_GPIO_Init+0x300>)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003cba:	4b1a      	ldr	r3, [pc, #104]	@ (8003d24 <HAL_GPIO_Init+0x300>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cde:	4a11      	ldr	r2, [pc, #68]	@ (8003d24 <HAL_GPIO_Init+0x300>)
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f47f ae9d 	bne.w	8003a34 <HAL_GPIO_Init+0x10>
  }
}
 8003cfa:	bf00      	nop
 8003cfc:	bf00      	nop
 8003cfe:	371c      	adds	r7, #28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	40010000 	.word	0x40010000
 8003d10:	48000400 	.word	0x48000400
 8003d14:	48000800 	.word	0x48000800
 8003d18:	48000c00 	.word	0x48000c00
 8003d1c:	48001000 	.word	0x48001000
 8003d20:	48001400 	.word	0x48001400
 8003d24:	40010400 	.word	0x40010400

08003d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	807b      	strh	r3, [r7, #2]
 8003d34:	4613      	mov	r3, r2
 8003d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d38:	787b      	ldrb	r3, [r7, #1]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d3e:	887a      	ldrh	r2, [r7, #2]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d44:	e002      	b.n	8003d4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d46:	887a      	ldrh	r2, [r7, #2]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d62:	4b08      	ldr	r3, [pc, #32]	@ (8003d84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d64:	695a      	ldr	r2, [r3, #20]
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d006      	beq.n	8003d7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d6e:	4a05      	ldr	r2, [pc, #20]	@ (8003d84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d70:	88fb      	ldrh	r3, [r7, #6]
 8003d72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d74:	88fb      	ldrh	r3, [r7, #6]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 f806 	bl	8003d88 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40010400 	.word	0x40010400

08003d88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d141      	bne.n	8003e32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dae:	4b4b      	ldr	r3, [pc, #300]	@ (8003edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dba:	d131      	bne.n	8003e20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dbc:	4b47      	ldr	r3, [pc, #284]	@ (8003edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dc2:	4a46      	ldr	r2, [pc, #280]	@ (8003edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dcc:	4b43      	ldr	r3, [pc, #268]	@ (8003edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003dd4:	4a41      	ldr	r2, [pc, #260]	@ (8003edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ddc:	4b40      	ldr	r3, [pc, #256]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2232      	movs	r2, #50	@ 0x32
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	4a3f      	ldr	r2, [pc, #252]	@ (8003ee4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003de8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dec:	0c9b      	lsrs	r3, r3, #18
 8003dee:	3301      	adds	r3, #1
 8003df0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003df2:	e002      	b.n	8003dfa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dfa:	4b38      	ldr	r3, [pc, #224]	@ (8003edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e06:	d102      	bne.n	8003e0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f2      	bne.n	8003df4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e0e:	4b33      	ldr	r3, [pc, #204]	@ (8003edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e1a:	d158      	bne.n	8003ece <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e057      	b.n	8003ed0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e20:	4b2e      	ldr	r3, [pc, #184]	@ (8003edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e26:	4a2d      	ldr	r2, [pc, #180]	@ (8003edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003e30:	e04d      	b.n	8003ece <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e38:	d141      	bne.n	8003ebe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e3a:	4b28      	ldr	r3, [pc, #160]	@ (8003edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e46:	d131      	bne.n	8003eac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e48:	4b24      	ldr	r3, [pc, #144]	@ (8003edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e4e:	4a23      	ldr	r2, [pc, #140]	@ (8003edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e58:	4b20      	ldr	r3, [pc, #128]	@ (8003edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003e60:	4a1e      	ldr	r2, [pc, #120]	@ (8003edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e68:	4b1d      	ldr	r3, [pc, #116]	@ (8003ee0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2232      	movs	r2, #50	@ 0x32
 8003e6e:	fb02 f303 	mul.w	r3, r2, r3
 8003e72:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e74:	fba2 2303 	umull	r2, r3, r2, r3
 8003e78:	0c9b      	lsrs	r3, r3, #18
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e7e:	e002      	b.n	8003e86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e86:	4b15      	ldr	r3, [pc, #84]	@ (8003edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e92:	d102      	bne.n	8003e9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f2      	bne.n	8003e80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e9a:	4b10      	ldr	r3, [pc, #64]	@ (8003edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea6:	d112      	bne.n	8003ece <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e011      	b.n	8003ed0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003eac:	4b0b      	ldr	r3, [pc, #44]	@ (8003edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8003edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003ebc:	e007      	b.n	8003ece <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ebe:	4b07      	ldr	r3, [pc, #28]	@ (8003edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ec6:	4a05      	ldr	r2, [pc, #20]	@ (8003edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ecc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	40007000 	.word	0x40007000
 8003ee0:	20000000 	.word	0x20000000
 8003ee4:	431bde83 	.word	0x431bde83

08003ee8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003eec:	4b05      	ldr	r3, [pc, #20]	@ (8003f04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4a04      	ldr	r2, [pc, #16]	@ (8003f04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ef2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ef6:	6093      	str	r3, [r2, #8]
}
 8003ef8:	bf00      	nop
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40007000 	.word	0x40007000

08003f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b088      	sub	sp, #32
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e306      	b.n	8004528 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d075      	beq.n	8004012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f26:	4b97      	ldr	r3, [pc, #604]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
 8003f2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f30:	4b94      	ldr	r3, [pc, #592]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	2b0c      	cmp	r3, #12
 8003f3e:	d102      	bne.n	8003f46 <HAL_RCC_OscConfig+0x3e>
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d002      	beq.n	8003f4c <HAL_RCC_OscConfig+0x44>
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d10b      	bne.n	8003f64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4c:	4b8d      	ldr	r3, [pc, #564]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d05b      	beq.n	8004010 <HAL_RCC_OscConfig+0x108>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d157      	bne.n	8004010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e2e1      	b.n	8004528 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f6c:	d106      	bne.n	8003f7c <HAL_RCC_OscConfig+0x74>
 8003f6e:	4b85      	ldr	r3, [pc, #532]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a84      	ldr	r2, [pc, #528]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 8003f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	e01d      	b.n	8003fb8 <HAL_RCC_OscConfig+0xb0>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f84:	d10c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x98>
 8003f86:	4b7f      	ldr	r3, [pc, #508]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a7e      	ldr	r2, [pc, #504]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 8003f8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	4b7c      	ldr	r3, [pc, #496]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a7b      	ldr	r2, [pc, #492]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 8003f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	e00b      	b.n	8003fb8 <HAL_RCC_OscConfig+0xb0>
 8003fa0:	4b78      	ldr	r3, [pc, #480]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a77      	ldr	r2, [pc, #476]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 8003fa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	4b75      	ldr	r3, [pc, #468]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a74      	ldr	r2, [pc, #464]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 8003fb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d013      	beq.n	8003fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc0:	f7fe fa58 	bl	8002474 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc8:	f7fe fa54 	bl	8002474 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b64      	cmp	r3, #100	@ 0x64
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e2a6      	b.n	8004528 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fda:	4b6a      	ldr	r3, [pc, #424]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0xc0>
 8003fe6:	e014      	b.n	8004012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fe fa44 	bl	8002474 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff0:	f7fe fa40 	bl	8002474 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	@ 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e292      	b.n	8004528 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004002:	4b60      	ldr	r3, [pc, #384]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0xe8>
 800400e:	e000      	b.n	8004012 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d075      	beq.n	800410a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800401e:	4b59      	ldr	r3, [pc, #356]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
 8004026:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004028:	4b56      	ldr	r3, [pc, #344]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 0303 	and.w	r3, r3, #3
 8004030:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	2b0c      	cmp	r3, #12
 8004036:	d102      	bne.n	800403e <HAL_RCC_OscConfig+0x136>
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2b02      	cmp	r3, #2
 800403c:	d002      	beq.n	8004044 <HAL_RCC_OscConfig+0x13c>
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b04      	cmp	r3, #4
 8004042:	d11f      	bne.n	8004084 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004044:	4b4f      	ldr	r3, [pc, #316]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_RCC_OscConfig+0x154>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e265      	b.n	8004528 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405c:	4b49      	ldr	r3, [pc, #292]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	061b      	lsls	r3, r3, #24
 800406a:	4946      	ldr	r1, [pc, #280]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 800406c:	4313      	orrs	r3, r2
 800406e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004070:	4b45      	ldr	r3, [pc, #276]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f7fd fb79 	bl	800176c <HAL_InitTick>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d043      	beq.n	8004108 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e251      	b.n	8004528 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d023      	beq.n	80040d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800408c:	4b3d      	ldr	r3, [pc, #244]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a3c      	ldr	r2, [pc, #240]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 8004092:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004098:	f7fe f9ec 	bl	8002474 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040a0:	f7fe f9e8 	bl	8002474 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e23a      	b.n	8004528 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040b2:	4b34      	ldr	r3, [pc, #208]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0f0      	beq.n	80040a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040be:	4b31      	ldr	r3, [pc, #196]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	061b      	lsls	r3, r3, #24
 80040cc:	492d      	ldr	r1, [pc, #180]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	604b      	str	r3, [r1, #4]
 80040d2:	e01a      	b.n	800410a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a2a      	ldr	r2, [pc, #168]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 80040da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e0:	f7fe f9c8 	bl	8002474 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040e8:	f7fe f9c4 	bl	8002474 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e216      	b.n	8004528 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040fa:	4b22      	ldr	r3, [pc, #136]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0x1e0>
 8004106:	e000      	b.n	800410a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004108:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d041      	beq.n	800419a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d01c      	beq.n	8004158 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800411e:	4b19      	ldr	r3, [pc, #100]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 8004120:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004124:	4a17      	ldr	r2, [pc, #92]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412e:	f7fe f9a1 	bl	8002474 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004136:	f7fe f99d 	bl	8002474 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e1ef      	b.n	8004528 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004148:	4b0e      	ldr	r3, [pc, #56]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 800414a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0ef      	beq.n	8004136 <HAL_RCC_OscConfig+0x22e>
 8004156:	e020      	b.n	800419a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004158:	4b0a      	ldr	r3, [pc, #40]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 800415a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800415e:	4a09      	ldr	r2, [pc, #36]	@ (8004184 <HAL_RCC_OscConfig+0x27c>)
 8004160:	f023 0301 	bic.w	r3, r3, #1
 8004164:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004168:	f7fe f984 	bl	8002474 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800416e:	e00d      	b.n	800418c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004170:	f7fe f980 	bl	8002474 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d906      	bls.n	800418c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e1d2      	b.n	8004528 <HAL_RCC_OscConfig+0x620>
 8004182:	bf00      	nop
 8004184:	40021000 	.word	0x40021000
 8004188:	20000140 	.word	0x20000140
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800418c:	4b8c      	ldr	r3, [pc, #560]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 800418e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1ea      	bne.n	8004170 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0304 	and.w	r3, r3, #4
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 80a6 	beq.w	80042f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041a8:	2300      	movs	r3, #0
 80041aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041ac:	4b84      	ldr	r3, [pc, #528]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 80041ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_RCC_OscConfig+0x2b4>
 80041b8:	2301      	movs	r3, #1
 80041ba:	e000      	b.n	80041be <HAL_RCC_OscConfig+0x2b6>
 80041bc:	2300      	movs	r3, #0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00d      	beq.n	80041de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c2:	4b7f      	ldr	r3, [pc, #508]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 80041c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c6:	4a7e      	ldr	r2, [pc, #504]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 80041c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80041ce:	4b7c      	ldr	r3, [pc, #496]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 80041d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041da:	2301      	movs	r3, #1
 80041dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041de:	4b79      	ldr	r3, [pc, #484]	@ (80043c4 <HAL_RCC_OscConfig+0x4bc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d118      	bne.n	800421c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041ea:	4b76      	ldr	r3, [pc, #472]	@ (80043c4 <HAL_RCC_OscConfig+0x4bc>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a75      	ldr	r2, [pc, #468]	@ (80043c4 <HAL_RCC_OscConfig+0x4bc>)
 80041f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041f6:	f7fe f93d 	bl	8002474 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041fe:	f7fe f939 	bl	8002474 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e18b      	b.n	8004528 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004210:	4b6c      	ldr	r3, [pc, #432]	@ (80043c4 <HAL_RCC_OscConfig+0x4bc>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d108      	bne.n	8004236 <HAL_RCC_OscConfig+0x32e>
 8004224:	4b66      	ldr	r3, [pc, #408]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 8004226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800422a:	4a65      	ldr	r2, [pc, #404]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 800422c:	f043 0301 	orr.w	r3, r3, #1
 8004230:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004234:	e024      	b.n	8004280 <HAL_RCC_OscConfig+0x378>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	2b05      	cmp	r3, #5
 800423c:	d110      	bne.n	8004260 <HAL_RCC_OscConfig+0x358>
 800423e:	4b60      	ldr	r3, [pc, #384]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 8004240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004244:	4a5e      	ldr	r2, [pc, #376]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 8004246:	f043 0304 	orr.w	r3, r3, #4
 800424a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800424e:	4b5c      	ldr	r3, [pc, #368]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 8004250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004254:	4a5a      	ldr	r2, [pc, #360]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 8004256:	f043 0301 	orr.w	r3, r3, #1
 800425a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800425e:	e00f      	b.n	8004280 <HAL_RCC_OscConfig+0x378>
 8004260:	4b57      	ldr	r3, [pc, #348]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 8004262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004266:	4a56      	ldr	r2, [pc, #344]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 8004268:	f023 0301 	bic.w	r3, r3, #1
 800426c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004270:	4b53      	ldr	r3, [pc, #332]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004276:	4a52      	ldr	r2, [pc, #328]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 8004278:	f023 0304 	bic.w	r3, r3, #4
 800427c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d016      	beq.n	80042b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004288:	f7fe f8f4 	bl	8002474 <HAL_GetTick>
 800428c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800428e:	e00a      	b.n	80042a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004290:	f7fe f8f0 	bl	8002474 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800429e:	4293      	cmp	r3, r2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e140      	b.n	8004528 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042a6:	4b46      	ldr	r3, [pc, #280]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0ed      	beq.n	8004290 <HAL_RCC_OscConfig+0x388>
 80042b4:	e015      	b.n	80042e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b6:	f7fe f8dd 	bl	8002474 <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042bc:	e00a      	b.n	80042d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042be:	f7fe f8d9 	bl	8002474 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e129      	b.n	8004528 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042d4:	4b3a      	ldr	r3, [pc, #232]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1ed      	bne.n	80042be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042e2:	7ffb      	ldrb	r3, [r7, #31]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d105      	bne.n	80042f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042e8:	4b35      	ldr	r3, [pc, #212]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 80042ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ec:	4a34      	ldr	r2, [pc, #208]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 80042ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d03c      	beq.n	800437a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d01c      	beq.n	8004342 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004308:	4b2d      	ldr	r3, [pc, #180]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 800430a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800430e:	4a2c      	ldr	r2, [pc, #176]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 8004310:	f043 0301 	orr.w	r3, r3, #1
 8004314:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004318:	f7fe f8ac 	bl	8002474 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004320:	f7fe f8a8 	bl	8002474 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e0fa      	b.n	8004528 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004332:	4b23      	ldr	r3, [pc, #140]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 8004334:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0ef      	beq.n	8004320 <HAL_RCC_OscConfig+0x418>
 8004340:	e01b      	b.n	800437a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004342:	4b1f      	ldr	r3, [pc, #124]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 8004344:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004348:	4a1d      	ldr	r2, [pc, #116]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 800434a:	f023 0301 	bic.w	r3, r3, #1
 800434e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004352:	f7fe f88f 	bl	8002474 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800435a:	f7fe f88b 	bl	8002474 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e0dd      	b.n	8004528 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800436c:	4b14      	ldr	r3, [pc, #80]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 800436e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1ef      	bne.n	800435a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 80d1 	beq.w	8004526 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004384:	4b0e      	ldr	r3, [pc, #56]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f003 030c 	and.w	r3, r3, #12
 800438c:	2b0c      	cmp	r3, #12
 800438e:	f000 808b 	beq.w	80044a8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	2b02      	cmp	r3, #2
 8004398:	d15e      	bne.n	8004458 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439a:	4b09      	ldr	r3, [pc, #36]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a08      	ldr	r2, [pc, #32]	@ (80043c0 <HAL_RCC_OscConfig+0x4b8>)
 80043a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a6:	f7fe f865 	bl	8002474 <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ac:	e00c      	b.n	80043c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ae:	f7fe f861 	bl	8002474 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d905      	bls.n	80043c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e0b3      	b.n	8004528 <HAL_RCC_OscConfig+0x620>
 80043c0:	40021000 	.word	0x40021000
 80043c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043c8:	4b59      	ldr	r3, [pc, #356]	@ (8004530 <HAL_RCC_OscConfig+0x628>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1ec      	bne.n	80043ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043d4:	4b56      	ldr	r3, [pc, #344]	@ (8004530 <HAL_RCC_OscConfig+0x628>)
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	4b56      	ldr	r3, [pc, #344]	@ (8004534 <HAL_RCC_OscConfig+0x62c>)
 80043da:	4013      	ands	r3, r2
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6a11      	ldr	r1, [r2, #32]
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043e4:	3a01      	subs	r2, #1
 80043e6:	0112      	lsls	r2, r2, #4
 80043e8:	4311      	orrs	r1, r2
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80043ee:	0212      	lsls	r2, r2, #8
 80043f0:	4311      	orrs	r1, r2
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80043f6:	0852      	lsrs	r2, r2, #1
 80043f8:	3a01      	subs	r2, #1
 80043fa:	0552      	lsls	r2, r2, #21
 80043fc:	4311      	orrs	r1, r2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004402:	0852      	lsrs	r2, r2, #1
 8004404:	3a01      	subs	r2, #1
 8004406:	0652      	lsls	r2, r2, #25
 8004408:	4311      	orrs	r1, r2
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800440e:	06d2      	lsls	r2, r2, #27
 8004410:	430a      	orrs	r2, r1
 8004412:	4947      	ldr	r1, [pc, #284]	@ (8004530 <HAL_RCC_OscConfig+0x628>)
 8004414:	4313      	orrs	r3, r2
 8004416:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004418:	4b45      	ldr	r3, [pc, #276]	@ (8004530 <HAL_RCC_OscConfig+0x628>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a44      	ldr	r2, [pc, #272]	@ (8004530 <HAL_RCC_OscConfig+0x628>)
 800441e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004422:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004424:	4b42      	ldr	r3, [pc, #264]	@ (8004530 <HAL_RCC_OscConfig+0x628>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	4a41      	ldr	r2, [pc, #260]	@ (8004530 <HAL_RCC_OscConfig+0x628>)
 800442a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800442e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004430:	f7fe f820 	bl	8002474 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004438:	f7fe f81c 	bl	8002474 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e06e      	b.n	8004528 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800444a:	4b39      	ldr	r3, [pc, #228]	@ (8004530 <HAL_RCC_OscConfig+0x628>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0x530>
 8004456:	e066      	b.n	8004526 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004458:	4b35      	ldr	r3, [pc, #212]	@ (8004530 <HAL_RCC_OscConfig+0x628>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a34      	ldr	r2, [pc, #208]	@ (8004530 <HAL_RCC_OscConfig+0x628>)
 800445e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004462:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004464:	4b32      	ldr	r3, [pc, #200]	@ (8004530 <HAL_RCC_OscConfig+0x628>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	4a31      	ldr	r2, [pc, #196]	@ (8004530 <HAL_RCC_OscConfig+0x628>)
 800446a:	f023 0303 	bic.w	r3, r3, #3
 800446e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004470:	4b2f      	ldr	r3, [pc, #188]	@ (8004530 <HAL_RCC_OscConfig+0x628>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4a2e      	ldr	r2, [pc, #184]	@ (8004530 <HAL_RCC_OscConfig+0x628>)
 8004476:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800447a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800447e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fd fff8 	bl	8002474 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004488:	f7fd fff4 	bl	8002474 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e046      	b.n	8004528 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800449a:	4b25      	ldr	r3, [pc, #148]	@ (8004530 <HAL_RCC_OscConfig+0x628>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x580>
 80044a6:	e03e      	b.n	8004526 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e039      	b.n	8004528 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80044b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004530 <HAL_RCC_OscConfig+0x628>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f003 0203 	and.w	r2, r3, #3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d12c      	bne.n	8004522 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d2:	3b01      	subs	r3, #1
 80044d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d123      	bne.n	8004522 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d11b      	bne.n	8004522 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d113      	bne.n	8004522 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004504:	085b      	lsrs	r3, r3, #1
 8004506:	3b01      	subs	r3, #1
 8004508:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800450a:	429a      	cmp	r2, r3
 800450c:	d109      	bne.n	8004522 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004518:	085b      	lsrs	r3, r3, #1
 800451a:	3b01      	subs	r3, #1
 800451c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800451e:	429a      	cmp	r2, r3
 8004520:	d001      	beq.n	8004526 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3720      	adds	r7, #32
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40021000 	.word	0x40021000
 8004534:	019f800c 	.word	0x019f800c

08004538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e11e      	b.n	800478e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004550:	4b91      	ldr	r3, [pc, #580]	@ (8004798 <HAL_RCC_ClockConfig+0x260>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 030f 	and.w	r3, r3, #15
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d910      	bls.n	8004580 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455e:	4b8e      	ldr	r3, [pc, #568]	@ (8004798 <HAL_RCC_ClockConfig+0x260>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f023 020f 	bic.w	r2, r3, #15
 8004566:	498c      	ldr	r1, [pc, #560]	@ (8004798 <HAL_RCC_ClockConfig+0x260>)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	4313      	orrs	r3, r2
 800456c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800456e:	4b8a      	ldr	r3, [pc, #552]	@ (8004798 <HAL_RCC_ClockConfig+0x260>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d001      	beq.n	8004580 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e106      	b.n	800478e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d073      	beq.n	8004674 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b03      	cmp	r3, #3
 8004592:	d129      	bne.n	80045e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004594:	4b81      	ldr	r3, [pc, #516]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d101      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0f4      	b.n	800478e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80045a4:	f000 f9d0 	bl	8004948 <RCC_GetSysClockFreqFromPLLSource>
 80045a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	4a7c      	ldr	r2, [pc, #496]	@ (80047a0 <HAL_RCC_ClockConfig+0x268>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d93f      	bls.n	8004632 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045b2:	4b7a      	ldr	r3, [pc, #488]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d009      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d033      	beq.n	8004632 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d12f      	bne.n	8004632 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045d2:	4b72      	ldr	r3, [pc, #456]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045da:	4a70      	ldr	r2, [pc, #448]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 80045dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80045e2:	2380      	movs	r3, #128	@ 0x80
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	e024      	b.n	8004632 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d107      	bne.n	8004600 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045f0:	4b6a      	ldr	r3, [pc, #424]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d109      	bne.n	8004610 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e0c6      	b.n	800478e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004600:	4b66      	ldr	r3, [pc, #408]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e0be      	b.n	800478e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004610:	f000 f8ce 	bl	80047b0 <HAL_RCC_GetSysClockFreq>
 8004614:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	4a61      	ldr	r2, [pc, #388]	@ (80047a0 <HAL_RCC_ClockConfig+0x268>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d909      	bls.n	8004632 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800461e:	4b5f      	ldr	r3, [pc, #380]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004626:	4a5d      	ldr	r2, [pc, #372]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 8004628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800462c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800462e:	2380      	movs	r3, #128	@ 0x80
 8004630:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004632:	4b5a      	ldr	r3, [pc, #360]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f023 0203 	bic.w	r2, r3, #3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	4957      	ldr	r1, [pc, #348]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 8004640:	4313      	orrs	r3, r2
 8004642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004644:	f7fd ff16 	bl	8002474 <HAL_GetTick>
 8004648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464a:	e00a      	b.n	8004662 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464c:	f7fd ff12 	bl	8002474 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800465a:	4293      	cmp	r3, r2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e095      	b.n	800478e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004662:	4b4e      	ldr	r3, [pc, #312]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 020c 	and.w	r2, r3, #12
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	429a      	cmp	r2, r3
 8004672:	d1eb      	bne.n	800464c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d023      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800468c:	4b43      	ldr	r3, [pc, #268]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	4a42      	ldr	r2, [pc, #264]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 8004692:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004696:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d007      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80046a4:	4b3d      	ldr	r3, [pc, #244]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80046ac:	4a3b      	ldr	r2, [pc, #236]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 80046ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80046b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046b4:	4b39      	ldr	r3, [pc, #228]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	4936      	ldr	r1, [pc, #216]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	608b      	str	r3, [r1, #8]
 80046c6:	e008      	b.n	80046da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2b80      	cmp	r3, #128	@ 0x80
 80046cc:	d105      	bne.n	80046da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80046ce:	4b33      	ldr	r3, [pc, #204]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	4a32      	ldr	r2, [pc, #200]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 80046d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046da:	4b2f      	ldr	r3, [pc, #188]	@ (8004798 <HAL_RCC_ClockConfig+0x260>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d21d      	bcs.n	8004724 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004798 <HAL_RCC_ClockConfig+0x260>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f023 020f 	bic.w	r2, r3, #15
 80046f0:	4929      	ldr	r1, [pc, #164]	@ (8004798 <HAL_RCC_ClockConfig+0x260>)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046f8:	f7fd febc 	bl	8002474 <HAL_GetTick>
 80046fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fe:	e00a      	b.n	8004716 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004700:	f7fd feb8 	bl	8002474 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e03b      	b.n	800478e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004716:	4b20      	ldr	r3, [pc, #128]	@ (8004798 <HAL_RCC_ClockConfig+0x260>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d1ed      	bne.n	8004700 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d008      	beq.n	8004742 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004730:	4b1a      	ldr	r3, [pc, #104]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4917      	ldr	r1, [pc, #92]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d009      	beq.n	8004762 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800474e:	4b13      	ldr	r3, [pc, #76]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	490f      	ldr	r1, [pc, #60]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 800475e:	4313      	orrs	r3, r2
 8004760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004762:	f000 f825 	bl	80047b0 <HAL_RCC_GetSysClockFreq>
 8004766:	4602      	mov	r2, r0
 8004768:	4b0c      	ldr	r3, [pc, #48]	@ (800479c <HAL_RCC_ClockConfig+0x264>)
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	091b      	lsrs	r3, r3, #4
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	490c      	ldr	r1, [pc, #48]	@ (80047a4 <HAL_RCC_ClockConfig+0x26c>)
 8004774:	5ccb      	ldrb	r3, [r1, r3]
 8004776:	f003 031f 	and.w	r3, r3, #31
 800477a:	fa22 f303 	lsr.w	r3, r2, r3
 800477e:	4a0a      	ldr	r2, [pc, #40]	@ (80047a8 <HAL_RCC_ClockConfig+0x270>)
 8004780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004782:	4b0a      	ldr	r3, [pc, #40]	@ (80047ac <HAL_RCC_ClockConfig+0x274>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7fc fff0 	bl	800176c <HAL_InitTick>
 800478c:	4603      	mov	r3, r0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40022000 	.word	0x40022000
 800479c:	40021000 	.word	0x40021000
 80047a0:	04c4b400 	.word	0x04c4b400
 80047a4:	0800b88c 	.word	0x0800b88c
 80047a8:	20000000 	.word	0x20000000
 80047ac:	20000140 	.word	0x20000140

080047b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80047b6:	4b2c      	ldr	r3, [pc, #176]	@ (8004868 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 030c 	and.w	r3, r3, #12
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d102      	bne.n	80047c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047c2:	4b2a      	ldr	r3, [pc, #168]	@ (800486c <HAL_RCC_GetSysClockFreq+0xbc>)
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	e047      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80047c8:	4b27      	ldr	r3, [pc, #156]	@ (8004868 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 030c 	and.w	r3, r3, #12
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d102      	bne.n	80047da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047d4:	4b26      	ldr	r3, [pc, #152]	@ (8004870 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047d6:	613b      	str	r3, [r7, #16]
 80047d8:	e03e      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80047da:	4b23      	ldr	r3, [pc, #140]	@ (8004868 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 030c 	and.w	r3, r3, #12
 80047e2:	2b0c      	cmp	r3, #12
 80047e4:	d136      	bne.n	8004854 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047e6:	4b20      	ldr	r3, [pc, #128]	@ (8004868 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004868 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	091b      	lsrs	r3, r3, #4
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	3301      	adds	r3, #1
 80047fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b03      	cmp	r3, #3
 8004802:	d10c      	bne.n	800481e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004804:	4a1a      	ldr	r2, [pc, #104]	@ (8004870 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	fbb2 f3f3 	udiv	r3, r2, r3
 800480c:	4a16      	ldr	r2, [pc, #88]	@ (8004868 <HAL_RCC_GetSysClockFreq+0xb8>)
 800480e:	68d2      	ldr	r2, [r2, #12]
 8004810:	0a12      	lsrs	r2, r2, #8
 8004812:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004816:	fb02 f303 	mul.w	r3, r2, r3
 800481a:	617b      	str	r3, [r7, #20]
      break;
 800481c:	e00c      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800481e:	4a13      	ldr	r2, [pc, #76]	@ (800486c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	fbb2 f3f3 	udiv	r3, r2, r3
 8004826:	4a10      	ldr	r2, [pc, #64]	@ (8004868 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004828:	68d2      	ldr	r2, [r2, #12]
 800482a:	0a12      	lsrs	r2, r2, #8
 800482c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004830:	fb02 f303 	mul.w	r3, r2, r3
 8004834:	617b      	str	r3, [r7, #20]
      break;
 8004836:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004838:	4b0b      	ldr	r3, [pc, #44]	@ (8004868 <HAL_RCC_GetSysClockFreq+0xb8>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	0e5b      	lsrs	r3, r3, #25
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	3301      	adds	r3, #1
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	e001      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004858:	693b      	ldr	r3, [r7, #16]
}
 800485a:	4618      	mov	r0, r3
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40021000 	.word	0x40021000
 800486c:	00f42400 	.word	0x00f42400
 8004870:	016e3600 	.word	0x016e3600

08004874 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004878:	4b03      	ldr	r3, [pc, #12]	@ (8004888 <HAL_RCC_GetHCLKFreq+0x14>)
 800487a:	681b      	ldr	r3, [r3, #0]
}
 800487c:	4618      	mov	r0, r3
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	20000000 	.word	0x20000000

0800488c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004890:	f7ff fff0 	bl	8004874 <HAL_RCC_GetHCLKFreq>
 8004894:	4602      	mov	r2, r0
 8004896:	4b06      	ldr	r3, [pc, #24]	@ (80048b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	0a1b      	lsrs	r3, r3, #8
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	4904      	ldr	r1, [pc, #16]	@ (80048b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048a2:	5ccb      	ldrb	r3, [r1, r3]
 80048a4:	f003 031f 	and.w	r3, r3, #31
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40021000 	.word	0x40021000
 80048b4:	0800b89c 	.word	0x0800b89c

080048b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048bc:	f7ff ffda 	bl	8004874 <HAL_RCC_GetHCLKFreq>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	0adb      	lsrs	r3, r3, #11
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	4904      	ldr	r1, [pc, #16]	@ (80048e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048ce:	5ccb      	ldrb	r3, [r1, r3]
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d8:	4618      	mov	r0, r3
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40021000 	.word	0x40021000
 80048e0:	0800b89c 	.word	0x0800b89c

080048e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	220f      	movs	r2, #15
 80048f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80048f4:	4b12      	ldr	r3, [pc, #72]	@ (8004940 <HAL_RCC_GetClockConfig+0x5c>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 0203 	and.w	r2, r3, #3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004900:	4b0f      	ldr	r3, [pc, #60]	@ (8004940 <HAL_RCC_GetClockConfig+0x5c>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800490c:	4b0c      	ldr	r3, [pc, #48]	@ (8004940 <HAL_RCC_GetClockConfig+0x5c>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004918:	4b09      	ldr	r3, [pc, #36]	@ (8004940 <HAL_RCC_GetClockConfig+0x5c>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	08db      	lsrs	r3, r3, #3
 800491e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004926:	4b07      	ldr	r3, [pc, #28]	@ (8004944 <HAL_RCC_GetClockConfig+0x60>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 020f 	and.w	r2, r3, #15
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	601a      	str	r2, [r3, #0]
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	40021000 	.word	0x40021000
 8004944:	40022000 	.word	0x40022000

08004948 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800494e:	4b1e      	ldr	r3, [pc, #120]	@ (80049c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004958:	4b1b      	ldr	r3, [pc, #108]	@ (80049c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	091b      	lsrs	r3, r3, #4
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	3301      	adds	r3, #1
 8004964:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	2b03      	cmp	r3, #3
 800496a:	d10c      	bne.n	8004986 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800496c:	4a17      	ldr	r2, [pc, #92]	@ (80049cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	fbb2 f3f3 	udiv	r3, r2, r3
 8004974:	4a14      	ldr	r2, [pc, #80]	@ (80049c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004976:	68d2      	ldr	r2, [r2, #12]
 8004978:	0a12      	lsrs	r2, r2, #8
 800497a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800497e:	fb02 f303 	mul.w	r3, r2, r3
 8004982:	617b      	str	r3, [r7, #20]
    break;
 8004984:	e00c      	b.n	80049a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004986:	4a12      	ldr	r2, [pc, #72]	@ (80049d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	fbb2 f3f3 	udiv	r3, r2, r3
 800498e:	4a0e      	ldr	r2, [pc, #56]	@ (80049c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004990:	68d2      	ldr	r2, [r2, #12]
 8004992:	0a12      	lsrs	r2, r2, #8
 8004994:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004998:	fb02 f303 	mul.w	r3, r2, r3
 800499c:	617b      	str	r3, [r7, #20]
    break;
 800499e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049a0:	4b09      	ldr	r3, [pc, #36]	@ (80049c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	0e5b      	lsrs	r3, r3, #25
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	3301      	adds	r3, #1
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80049ba:	687b      	ldr	r3, [r7, #4]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	371c      	adds	r7, #28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	40021000 	.word	0x40021000
 80049cc:	016e3600 	.word	0x016e3600
 80049d0:	00f42400 	.word	0x00f42400

080049d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049dc:	2300      	movs	r3, #0
 80049de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049e0:	2300      	movs	r3, #0
 80049e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 8098 	beq.w	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049f2:	2300      	movs	r3, #0
 80049f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049f6:	4b43      	ldr	r3, [pc, #268]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10d      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a02:	4b40      	ldr	r3, [pc, #256]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a06:	4a3f      	ldr	r2, [pc, #252]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a16:	60bb      	str	r3, [r7, #8]
 8004a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a1e:	4b3a      	ldr	r3, [pc, #232]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a39      	ldr	r2, [pc, #228]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a2a:	f7fd fd23 	bl	8002474 <HAL_GetTick>
 8004a2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a30:	e009      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a32:	f7fd fd1f 	bl	8002474 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d902      	bls.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	74fb      	strb	r3, [r7, #19]
        break;
 8004a44:	e005      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a46:	4b30      	ldr	r3, [pc, #192]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0ef      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004a52:	7cfb      	ldrb	r3, [r7, #19]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d159      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a58:	4b2a      	ldr	r3, [pc, #168]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d01e      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d019      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a74:	4b23      	ldr	r3, [pc, #140]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a80:	4b20      	ldr	r3, [pc, #128]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a86:	4a1f      	ldr	r2, [pc, #124]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a90:	4b1c      	ldr	r3, [pc, #112]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a96:	4a1b      	ldr	r2, [pc, #108]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004aa0:	4a18      	ldr	r2, [pc, #96]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d016      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab2:	f7fd fcdf 	bl	8002474 <HAL_GetTick>
 8004ab6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ab8:	e00b      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aba:	f7fd fcdb 	bl	8002474 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d902      	bls.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	74fb      	strb	r3, [r7, #19]
            break;
 8004ad0:	e006      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0ec      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ae0:	7cfb      	ldrb	r3, [r7, #19]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10b      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ae6:	4b07      	ldr	r3, [pc, #28]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004af4:	4903      	ldr	r1, [pc, #12]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004afc:	e008      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004afe:	7cfb      	ldrb	r3, [r7, #19]
 8004b00:	74bb      	strb	r3, [r7, #18]
 8004b02:	e005      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b04:	40021000 	.word	0x40021000
 8004b08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0c:	7cfb      	ldrb	r3, [r7, #19]
 8004b0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b10:	7c7b      	ldrb	r3, [r7, #17]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d105      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b16:	4ba7      	ldr	r3, [pc, #668]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b1a:	4aa6      	ldr	r2, [pc, #664]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b2e:	4ba1      	ldr	r3, [pc, #644]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b34:	f023 0203 	bic.w	r2, r3, #3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	499d      	ldr	r1, [pc, #628]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00a      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b50:	4b98      	ldr	r3, [pc, #608]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b56:	f023 020c 	bic.w	r2, r3, #12
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	4995      	ldr	r1, [pc, #596]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0304 	and.w	r3, r3, #4
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b72:	4b90      	ldr	r3, [pc, #576]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	498c      	ldr	r1, [pc, #560]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00a      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b94:	4b87      	ldr	r3, [pc, #540]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	4984      	ldr	r1, [pc, #528]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0310 	and.w	r3, r3, #16
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bb6:	4b7f      	ldr	r3, [pc, #508]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	497b      	ldr	r1, [pc, #492]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0320 	and.w	r3, r3, #32
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00a      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bd8:	4b76      	ldr	r3, [pc, #472]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bde:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	4973      	ldr	r1, [pc, #460]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bfa:	4b6e      	ldr	r3, [pc, #440]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c00:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	496a      	ldr	r1, [pc, #424]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c1c:	4b65      	ldr	r3, [pc, #404]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c22:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	4962      	ldr	r1, [pc, #392]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c3e:	4b5d      	ldr	r3, [pc, #372]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4c:	4959      	ldr	r1, [pc, #356]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c60:	4b54      	ldr	r3, [pc, #336]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c66:	f023 0203 	bic.w	r2, r3, #3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6e:	4951      	ldr	r1, [pc, #324]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c82:	4b4c      	ldr	r3, [pc, #304]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c90:	4948      	ldr	r1, [pc, #288]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d015      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ca4:	4b43      	ldr	r3, [pc, #268]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004caa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb2:	4940      	ldr	r1, [pc, #256]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cc2:	d105      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	4a3a      	ldr	r2, [pc, #232]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d015      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004cdc:	4b35      	ldr	r3, [pc, #212]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cea:	4932      	ldr	r1, [pc, #200]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cfa:	d105      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	4a2c      	ldr	r2, [pc, #176]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d06:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d015      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d14:	4b27      	ldr	r3, [pc, #156]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d1a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d22:	4924      	ldr	r1, [pc, #144]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d32:	d105      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d34:	4b1f      	ldr	r3, [pc, #124]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4a1e      	ldr	r2, [pc, #120]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d3e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d015      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d4c:	4b19      	ldr	r3, [pc, #100]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d5a:	4916      	ldr	r1, [pc, #88]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d6a:	d105      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d6c:	4b11      	ldr	r3, [pc, #68]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	4a10      	ldr	r2, [pc, #64]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d76:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d019      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d84:	4b0b      	ldr	r3, [pc, #44]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d92:	4908      	ldr	r1, [pc, #32]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004da2:	d109      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004da4:	4b03      	ldr	r3, [pc, #12]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	4a02      	ldr	r2, [pc, #8]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004daa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dae:	60d3      	str	r3, [r2, #12]
 8004db0:	e002      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004db2:	bf00      	nop
 8004db4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d015      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004dc4:	4b29      	ldr	r3, [pc, #164]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd2:	4926      	ldr	r1, [pc, #152]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004de2:	d105      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004de4:	4b21      	ldr	r3, [pc, #132]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	4a20      	ldr	r2, [pc, #128]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d015      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e02:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e0a:	4918      	ldr	r1, [pc, #96]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e1a:	d105      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e1c:	4b13      	ldr	r3, [pc, #76]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	4a12      	ldr	r2, [pc, #72]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e26:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d015      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004e34:	4b0d      	ldr	r3, [pc, #52]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e42:	490a      	ldr	r1, [pc, #40]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e52:	d105      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e54:	4b05      	ldr	r3, [pc, #20]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	4a04      	ldr	r2, [pc, #16]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e5e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004e60:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3718      	adds	r7, #24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40021000 	.word	0x40021000

08004e70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e049      	b.n	8004f16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d106      	bne.n	8004e9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f841 	bl	8004f1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3304      	adds	r3, #4
 8004eac:	4619      	mov	r1, r3
 8004eae:	4610      	mov	r0, r2
 8004eb0:	f000 fd7a 	bl	80059a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
	...

08004f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d001      	beq.n	8004f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e054      	b.n	8004ff6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a26      	ldr	r2, [pc, #152]	@ (8005004 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d022      	beq.n	8004fb4 <HAL_TIM_Base_Start_IT+0x80>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f76:	d01d      	beq.n	8004fb4 <HAL_TIM_Base_Start_IT+0x80>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a22      	ldr	r2, [pc, #136]	@ (8005008 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d018      	beq.n	8004fb4 <HAL_TIM_Base_Start_IT+0x80>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a21      	ldr	r2, [pc, #132]	@ (800500c <HAL_TIM_Base_Start_IT+0xd8>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d013      	beq.n	8004fb4 <HAL_TIM_Base_Start_IT+0x80>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a1f      	ldr	r2, [pc, #124]	@ (8005010 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00e      	beq.n	8004fb4 <HAL_TIM_Base_Start_IT+0x80>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8005014 <HAL_TIM_Base_Start_IT+0xe0>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d009      	beq.n	8004fb4 <HAL_TIM_Base_Start_IT+0x80>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8005018 <HAL_TIM_Base_Start_IT+0xe4>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d004      	beq.n	8004fb4 <HAL_TIM_Base_Start_IT+0x80>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1b      	ldr	r2, [pc, #108]	@ (800501c <HAL_TIM_Base_Start_IT+0xe8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d115      	bne.n	8004fe0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	4b19      	ldr	r3, [pc, #100]	@ (8005020 <HAL_TIM_Base_Start_IT+0xec>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b06      	cmp	r3, #6
 8004fc4:	d015      	beq.n	8004ff2 <HAL_TIM_Base_Start_IT+0xbe>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fcc:	d011      	beq.n	8004ff2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f042 0201 	orr.w	r2, r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fde:	e008      	b.n	8004ff2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f042 0201 	orr.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	e000      	b.n	8004ff4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40012c00 	.word	0x40012c00
 8005008:	40000400 	.word	0x40000400
 800500c:	40000800 	.word	0x40000800
 8005010:	40000c00 	.word	0x40000c00
 8005014:	40013400 	.word	0x40013400
 8005018:	40014000 	.word	0x40014000
 800501c:	40015000 	.word	0x40015000
 8005020:	00010007 	.word	0x00010007

08005024 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e049      	b.n	80050ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fc fe26 	bl	8001c9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3304      	adds	r3, #4
 8005060:	4619      	mov	r1, r3
 8005062:	4610      	mov	r0, r2
 8005064:	f000 fca0 	bl	80059a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
	...

080050d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d109      	bne.n	80050f8 <HAL_TIM_PWM_Start+0x24>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	bf14      	ite	ne
 80050f0:	2301      	movne	r3, #1
 80050f2:	2300      	moveq	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	e03c      	b.n	8005172 <HAL_TIM_PWM_Start+0x9e>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d109      	bne.n	8005112 <HAL_TIM_PWM_Start+0x3e>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b01      	cmp	r3, #1
 8005108:	bf14      	ite	ne
 800510a:	2301      	movne	r3, #1
 800510c:	2300      	moveq	r3, #0
 800510e:	b2db      	uxtb	r3, r3
 8005110:	e02f      	b.n	8005172 <HAL_TIM_PWM_Start+0x9e>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b08      	cmp	r3, #8
 8005116:	d109      	bne.n	800512c <HAL_TIM_PWM_Start+0x58>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b01      	cmp	r3, #1
 8005122:	bf14      	ite	ne
 8005124:	2301      	movne	r3, #1
 8005126:	2300      	moveq	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	e022      	b.n	8005172 <HAL_TIM_PWM_Start+0x9e>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	2b0c      	cmp	r3, #12
 8005130:	d109      	bne.n	8005146 <HAL_TIM_PWM_Start+0x72>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b01      	cmp	r3, #1
 800513c:	bf14      	ite	ne
 800513e:	2301      	movne	r3, #1
 8005140:	2300      	moveq	r3, #0
 8005142:	b2db      	uxtb	r3, r3
 8005144:	e015      	b.n	8005172 <HAL_TIM_PWM_Start+0x9e>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b10      	cmp	r3, #16
 800514a:	d109      	bne.n	8005160 <HAL_TIM_PWM_Start+0x8c>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b01      	cmp	r3, #1
 8005156:	bf14      	ite	ne
 8005158:	2301      	movne	r3, #1
 800515a:	2300      	moveq	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	e008      	b.n	8005172 <HAL_TIM_PWM_Start+0x9e>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b01      	cmp	r3, #1
 800516a:	bf14      	ite	ne
 800516c:	2301      	movne	r3, #1
 800516e:	2300      	moveq	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e0a6      	b.n	80052c8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d104      	bne.n	800518a <HAL_TIM_PWM_Start+0xb6>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005188:	e023      	b.n	80051d2 <HAL_TIM_PWM_Start+0xfe>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b04      	cmp	r3, #4
 800518e:	d104      	bne.n	800519a <HAL_TIM_PWM_Start+0xc6>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005198:	e01b      	b.n	80051d2 <HAL_TIM_PWM_Start+0xfe>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b08      	cmp	r3, #8
 800519e:	d104      	bne.n	80051aa <HAL_TIM_PWM_Start+0xd6>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051a8:	e013      	b.n	80051d2 <HAL_TIM_PWM_Start+0xfe>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b0c      	cmp	r3, #12
 80051ae:	d104      	bne.n	80051ba <HAL_TIM_PWM_Start+0xe6>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051b8:	e00b      	b.n	80051d2 <HAL_TIM_PWM_Start+0xfe>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b10      	cmp	r3, #16
 80051be:	d104      	bne.n	80051ca <HAL_TIM_PWM_Start+0xf6>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051c8:	e003      	b.n	80051d2 <HAL_TIM_PWM_Start+0xfe>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2202      	movs	r2, #2
 80051ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2201      	movs	r2, #1
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f001 f82a 	bl	8006234 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a3a      	ldr	r2, [pc, #232]	@ (80052d0 <HAL_TIM_PWM_Start+0x1fc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d018      	beq.n	800521c <HAL_TIM_PWM_Start+0x148>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a39      	ldr	r2, [pc, #228]	@ (80052d4 <HAL_TIM_PWM_Start+0x200>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d013      	beq.n	800521c <HAL_TIM_PWM_Start+0x148>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a37      	ldr	r2, [pc, #220]	@ (80052d8 <HAL_TIM_PWM_Start+0x204>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00e      	beq.n	800521c <HAL_TIM_PWM_Start+0x148>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a36      	ldr	r2, [pc, #216]	@ (80052dc <HAL_TIM_PWM_Start+0x208>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d009      	beq.n	800521c <HAL_TIM_PWM_Start+0x148>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a34      	ldr	r2, [pc, #208]	@ (80052e0 <HAL_TIM_PWM_Start+0x20c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d004      	beq.n	800521c <HAL_TIM_PWM_Start+0x148>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a33      	ldr	r2, [pc, #204]	@ (80052e4 <HAL_TIM_PWM_Start+0x210>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d101      	bne.n	8005220 <HAL_TIM_PWM_Start+0x14c>
 800521c:	2301      	movs	r3, #1
 800521e:	e000      	b.n	8005222 <HAL_TIM_PWM_Start+0x14e>
 8005220:	2300      	movs	r3, #0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d007      	beq.n	8005236 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005234:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a25      	ldr	r2, [pc, #148]	@ (80052d0 <HAL_TIM_PWM_Start+0x1fc>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d022      	beq.n	8005286 <HAL_TIM_PWM_Start+0x1b2>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005248:	d01d      	beq.n	8005286 <HAL_TIM_PWM_Start+0x1b2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a26      	ldr	r2, [pc, #152]	@ (80052e8 <HAL_TIM_PWM_Start+0x214>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d018      	beq.n	8005286 <HAL_TIM_PWM_Start+0x1b2>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a24      	ldr	r2, [pc, #144]	@ (80052ec <HAL_TIM_PWM_Start+0x218>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d013      	beq.n	8005286 <HAL_TIM_PWM_Start+0x1b2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a23      	ldr	r2, [pc, #140]	@ (80052f0 <HAL_TIM_PWM_Start+0x21c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d00e      	beq.n	8005286 <HAL_TIM_PWM_Start+0x1b2>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a19      	ldr	r2, [pc, #100]	@ (80052d4 <HAL_TIM_PWM_Start+0x200>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d009      	beq.n	8005286 <HAL_TIM_PWM_Start+0x1b2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a18      	ldr	r2, [pc, #96]	@ (80052d8 <HAL_TIM_PWM_Start+0x204>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d004      	beq.n	8005286 <HAL_TIM_PWM_Start+0x1b2>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a18      	ldr	r2, [pc, #96]	@ (80052e4 <HAL_TIM_PWM_Start+0x210>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d115      	bne.n	80052b2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689a      	ldr	r2, [r3, #8]
 800528c:	4b19      	ldr	r3, [pc, #100]	@ (80052f4 <HAL_TIM_PWM_Start+0x220>)
 800528e:	4013      	ands	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2b06      	cmp	r3, #6
 8005296:	d015      	beq.n	80052c4 <HAL_TIM_PWM_Start+0x1f0>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800529e:	d011      	beq.n	80052c4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b0:	e008      	b.n	80052c4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f042 0201 	orr.w	r2, r2, #1
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	e000      	b.n	80052c6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40012c00 	.word	0x40012c00
 80052d4:	40013400 	.word	0x40013400
 80052d8:	40014000 	.word	0x40014000
 80052dc:	40014400 	.word	0x40014400
 80052e0:	40014800 	.word	0x40014800
 80052e4:	40015000 	.word	0x40015000
 80052e8:	40000400 	.word	0x40000400
 80052ec:	40000800 	.word	0x40000800
 80052f0:	40000c00 	.word	0x40000c00
 80052f4:	00010007 	.word	0x00010007

080052f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2200      	movs	r2, #0
 8005308:	6839      	ldr	r1, [r7, #0]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 ff92 	bl	8006234 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a40      	ldr	r2, [pc, #256]	@ (8005418 <HAL_TIM_PWM_Stop+0x120>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d018      	beq.n	800534c <HAL_TIM_PWM_Stop+0x54>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a3f      	ldr	r2, [pc, #252]	@ (800541c <HAL_TIM_PWM_Stop+0x124>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d013      	beq.n	800534c <HAL_TIM_PWM_Stop+0x54>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a3d      	ldr	r2, [pc, #244]	@ (8005420 <HAL_TIM_PWM_Stop+0x128>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00e      	beq.n	800534c <HAL_TIM_PWM_Stop+0x54>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a3c      	ldr	r2, [pc, #240]	@ (8005424 <HAL_TIM_PWM_Stop+0x12c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d009      	beq.n	800534c <HAL_TIM_PWM_Stop+0x54>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a3a      	ldr	r2, [pc, #232]	@ (8005428 <HAL_TIM_PWM_Stop+0x130>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d004      	beq.n	800534c <HAL_TIM_PWM_Stop+0x54>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a39      	ldr	r2, [pc, #228]	@ (800542c <HAL_TIM_PWM_Stop+0x134>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d101      	bne.n	8005350 <HAL_TIM_PWM_Stop+0x58>
 800534c:	2301      	movs	r3, #1
 800534e:	e000      	b.n	8005352 <HAL_TIM_PWM_Stop+0x5a>
 8005350:	2300      	movs	r3, #0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d017      	beq.n	8005386 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6a1a      	ldr	r2, [r3, #32]
 800535c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005360:	4013      	ands	r3, r2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10f      	bne.n	8005386 <HAL_TIM_PWM_Stop+0x8e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6a1a      	ldr	r2, [r3, #32]
 800536c:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005370:	4013      	ands	r3, r2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d107      	bne.n	8005386 <HAL_TIM_PWM_Stop+0x8e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005384:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6a1a      	ldr	r2, [r3, #32]
 800538c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005390:	4013      	ands	r3, r2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10f      	bne.n	80053b6 <HAL_TIM_PWM_Stop+0xbe>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6a1a      	ldr	r2, [r3, #32]
 800539c:	f244 4344 	movw	r3, #17476	@ 0x4444
 80053a0:	4013      	ands	r3, r2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d107      	bne.n	80053b6 <HAL_TIM_PWM_Stop+0xbe>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0201 	bic.w	r2, r2, #1
 80053b4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d104      	bne.n	80053c6 <HAL_TIM_PWM_Stop+0xce>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053c4:	e023      	b.n	800540e <HAL_TIM_PWM_Stop+0x116>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d104      	bne.n	80053d6 <HAL_TIM_PWM_Stop+0xde>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053d4:	e01b      	b.n	800540e <HAL_TIM_PWM_Stop+0x116>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d104      	bne.n	80053e6 <HAL_TIM_PWM_Stop+0xee>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053e4:	e013      	b.n	800540e <HAL_TIM_PWM_Stop+0x116>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b0c      	cmp	r3, #12
 80053ea:	d104      	bne.n	80053f6 <HAL_TIM_PWM_Stop+0xfe>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053f4:	e00b      	b.n	800540e <HAL_TIM_PWM_Stop+0x116>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b10      	cmp	r3, #16
 80053fa:	d104      	bne.n	8005406 <HAL_TIM_PWM_Stop+0x10e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005404:	e003      	b.n	800540e <HAL_TIM_PWM_Stop+0x116>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	40012c00 	.word	0x40012c00
 800541c:	40013400 	.word	0x40013400
 8005420:	40014000 	.word	0x40014000
 8005424:	40014400 	.word	0x40014400
 8005428:	40014800 	.word	0x40014800
 800542c:	40015000 	.word	0x40015000

08005430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b02      	cmp	r3, #2
 8005444:	d122      	bne.n	800548c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b02      	cmp	r3, #2
 8005452:	d11b      	bne.n	800548c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0202 	mvn.w	r2, #2
 800545c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fa7a 	bl	800596c <HAL_TIM_IC_CaptureCallback>
 8005478:	e005      	b.n	8005486 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fa6c 	bl	8005958 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fa7d 	bl	8005980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	2b04      	cmp	r3, #4
 8005498:	d122      	bne.n	80054e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	d11b      	bne.n	80054e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0204 	mvn.w	r2, #4
 80054b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2202      	movs	r2, #2
 80054b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fa50 	bl	800596c <HAL_TIM_IC_CaptureCallback>
 80054cc:	e005      	b.n	80054da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fa42 	bl	8005958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fa53 	bl	8005980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b08      	cmp	r3, #8
 80054ec:	d122      	bne.n	8005534 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d11b      	bne.n	8005534 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f06f 0208 	mvn.w	r2, #8
 8005504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2204      	movs	r2, #4
 800550a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fa26 	bl	800596c <HAL_TIM_IC_CaptureCallback>
 8005520:	e005      	b.n	800552e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fa18 	bl	8005958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 fa29 	bl	8005980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	f003 0310 	and.w	r3, r3, #16
 800553e:	2b10      	cmp	r3, #16
 8005540:	d122      	bne.n	8005588 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	2b10      	cmp	r3, #16
 800554e:	d11b      	bne.n	8005588 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f06f 0210 	mvn.w	r2, #16
 8005558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2208      	movs	r2, #8
 800555e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f9fc 	bl	800596c <HAL_TIM_IC_CaptureCallback>
 8005574:	e005      	b.n	8005582 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f9ee 	bl	8005958 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f9ff 	bl	8005980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b01      	cmp	r3, #1
 8005594:	d10e      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d107      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0201 	mvn.w	r2, #1
 80055ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fc f8a0 	bl	80016f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055be:	2b80      	cmp	r3, #128	@ 0x80
 80055c0:	d10e      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055cc:	2b80      	cmp	r3, #128	@ 0x80
 80055ce:	d107      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80055d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f001 f970 	bl	80068c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055ee:	d10e      	bne.n	800560e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055fa:	2b80      	cmp	r3, #128	@ 0x80
 80055fc:	d107      	bne.n	800560e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f001 f963 	bl	80068d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005618:	2b40      	cmp	r3, #64	@ 0x40
 800561a:	d10e      	bne.n	800563a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005626:	2b40      	cmp	r3, #64	@ 0x40
 8005628:	d107      	bne.n	800563a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f9ad 	bl	8005994 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b20      	cmp	r3, #32
 8005646:	d10e      	bne.n	8005666 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b20      	cmp	r3, #32
 8005654:	d107      	bne.n	8005666 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f06f 0220 	mvn.w	r2, #32
 800565e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f001 f923 	bl	80068ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005670:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005674:	d10f      	bne.n	8005696 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005680:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005684:	d107      	bne.n	8005696 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800568e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f001 f929 	bl	80068e8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056a4:	d10f      	bne.n	80056c6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056b4:	d107      	bne.n	80056c6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80056be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f001 f91b 	bl	80068fc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056d4:	d10f      	bne.n	80056f6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056e4:	d107      	bne.n	80056f6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80056ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f001 f90d 	bl	8006910 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005700:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005704:	d10f      	bne.n	8005726 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005710:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005714:	d107      	bne.n	8005726 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800571e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f001 f8ff 	bl	8006924 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005726:	bf00      	nop
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005746:	2b01      	cmp	r3, #1
 8005748:	d101      	bne.n	800574e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800574a:	2302      	movs	r3, #2
 800574c:	e0ff      	b.n	800594e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2201      	movs	r2, #1
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b14      	cmp	r3, #20
 800575a:	f200 80f0 	bhi.w	800593e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800575e:	a201      	add	r2, pc, #4	@ (adr r2, 8005764 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005764:	080057b9 	.word	0x080057b9
 8005768:	0800593f 	.word	0x0800593f
 800576c:	0800593f 	.word	0x0800593f
 8005770:	0800593f 	.word	0x0800593f
 8005774:	080057f9 	.word	0x080057f9
 8005778:	0800593f 	.word	0x0800593f
 800577c:	0800593f 	.word	0x0800593f
 8005780:	0800593f 	.word	0x0800593f
 8005784:	0800583b 	.word	0x0800583b
 8005788:	0800593f 	.word	0x0800593f
 800578c:	0800593f 	.word	0x0800593f
 8005790:	0800593f 	.word	0x0800593f
 8005794:	0800587b 	.word	0x0800587b
 8005798:	0800593f 	.word	0x0800593f
 800579c:	0800593f 	.word	0x0800593f
 80057a0:	0800593f 	.word	0x0800593f
 80057a4:	080058bd 	.word	0x080058bd
 80057a8:	0800593f 	.word	0x0800593f
 80057ac:	0800593f 	.word	0x0800593f
 80057b0:	0800593f 	.word	0x0800593f
 80057b4:	080058fd 	.word	0x080058fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 f99a 	bl	8005af8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699a      	ldr	r2, [r3, #24]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0208 	orr.w	r2, r2, #8
 80057d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	699a      	ldr	r2, [r3, #24]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0204 	bic.w	r2, r2, #4
 80057e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6999      	ldr	r1, [r3, #24]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	691a      	ldr	r2, [r3, #16]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	619a      	str	r2, [r3, #24]
      break;
 80057f6:	e0a5      	b.n	8005944 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68b9      	ldr	r1, [r7, #8]
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fa14 	bl	8005c2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699a      	ldr	r2, [r3, #24]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699a      	ldr	r2, [r3, #24]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6999      	ldr	r1, [r3, #24]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	021a      	lsls	r2, r3, #8
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	619a      	str	r2, [r3, #24]
      break;
 8005838:	e084      	b.n	8005944 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68b9      	ldr	r1, [r7, #8]
 8005840:	4618      	mov	r0, r3
 8005842:	f000 fa87 	bl	8005d54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	69da      	ldr	r2, [r3, #28]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f042 0208 	orr.w	r2, r2, #8
 8005854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	69da      	ldr	r2, [r3, #28]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0204 	bic.w	r2, r2, #4
 8005864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69d9      	ldr	r1, [r3, #28]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	61da      	str	r2, [r3, #28]
      break;
 8005878:	e064      	b.n	8005944 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68b9      	ldr	r1, [r7, #8]
 8005880:	4618      	mov	r0, r3
 8005882:	f000 faf9 	bl	8005e78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69da      	ldr	r2, [r3, #28]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69da      	ldr	r2, [r3, #28]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69d9      	ldr	r1, [r3, #28]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	021a      	lsls	r2, r3, #8
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	61da      	str	r2, [r3, #28]
      break;
 80058ba:	e043      	b.n	8005944 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fb6c 	bl	8005fa0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0208 	orr.w	r2, r2, #8
 80058d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0204 	bic.w	r2, r2, #4
 80058e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	691a      	ldr	r2, [r3, #16]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80058fa:	e023      	b.n	8005944 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68b9      	ldr	r1, [r7, #8]
 8005902:	4618      	mov	r0, r3
 8005904:	f000 fbb6 	bl	8006074 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005916:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005926:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	021a      	lsls	r2, r3, #8
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800593c:	e002      	b.n	8005944 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	75fb      	strb	r3, [r7, #23]
      break;
 8005942:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800594c:	7dfb      	ldrb	r3, [r7, #23]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop

08005958 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a46      	ldr	r2, [pc, #280]	@ (8005ad4 <TIM_Base_SetConfig+0x12c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d017      	beq.n	80059f0 <TIM_Base_SetConfig+0x48>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059c6:	d013      	beq.n	80059f0 <TIM_Base_SetConfig+0x48>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a43      	ldr	r2, [pc, #268]	@ (8005ad8 <TIM_Base_SetConfig+0x130>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00f      	beq.n	80059f0 <TIM_Base_SetConfig+0x48>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a42      	ldr	r2, [pc, #264]	@ (8005adc <TIM_Base_SetConfig+0x134>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d00b      	beq.n	80059f0 <TIM_Base_SetConfig+0x48>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a41      	ldr	r2, [pc, #260]	@ (8005ae0 <TIM_Base_SetConfig+0x138>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d007      	beq.n	80059f0 <TIM_Base_SetConfig+0x48>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a40      	ldr	r2, [pc, #256]	@ (8005ae4 <TIM_Base_SetConfig+0x13c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d003      	beq.n	80059f0 <TIM_Base_SetConfig+0x48>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a3f      	ldr	r2, [pc, #252]	@ (8005ae8 <TIM_Base_SetConfig+0x140>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d108      	bne.n	8005a02 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a33      	ldr	r2, [pc, #204]	@ (8005ad4 <TIM_Base_SetConfig+0x12c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d023      	beq.n	8005a52 <TIM_Base_SetConfig+0xaa>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a10:	d01f      	beq.n	8005a52 <TIM_Base_SetConfig+0xaa>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a30      	ldr	r2, [pc, #192]	@ (8005ad8 <TIM_Base_SetConfig+0x130>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d01b      	beq.n	8005a52 <TIM_Base_SetConfig+0xaa>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a2f      	ldr	r2, [pc, #188]	@ (8005adc <TIM_Base_SetConfig+0x134>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d017      	beq.n	8005a52 <TIM_Base_SetConfig+0xaa>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a2e      	ldr	r2, [pc, #184]	@ (8005ae0 <TIM_Base_SetConfig+0x138>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d013      	beq.n	8005a52 <TIM_Base_SetConfig+0xaa>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a2d      	ldr	r2, [pc, #180]	@ (8005ae4 <TIM_Base_SetConfig+0x13c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00f      	beq.n	8005a52 <TIM_Base_SetConfig+0xaa>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a2d      	ldr	r2, [pc, #180]	@ (8005aec <TIM_Base_SetConfig+0x144>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d00b      	beq.n	8005a52 <TIM_Base_SetConfig+0xaa>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a2c      	ldr	r2, [pc, #176]	@ (8005af0 <TIM_Base_SetConfig+0x148>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d007      	beq.n	8005a52 <TIM_Base_SetConfig+0xaa>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a2b      	ldr	r2, [pc, #172]	@ (8005af4 <TIM_Base_SetConfig+0x14c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d003      	beq.n	8005a52 <TIM_Base_SetConfig+0xaa>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a26      	ldr	r2, [pc, #152]	@ (8005ae8 <TIM_Base_SetConfig+0x140>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d108      	bne.n	8005a64 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a12      	ldr	r2, [pc, #72]	@ (8005ad4 <TIM_Base_SetConfig+0x12c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d013      	beq.n	8005ab8 <TIM_Base_SetConfig+0x110>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a14      	ldr	r2, [pc, #80]	@ (8005ae4 <TIM_Base_SetConfig+0x13c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00f      	beq.n	8005ab8 <TIM_Base_SetConfig+0x110>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a14      	ldr	r2, [pc, #80]	@ (8005aec <TIM_Base_SetConfig+0x144>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d00b      	beq.n	8005ab8 <TIM_Base_SetConfig+0x110>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a13      	ldr	r2, [pc, #76]	@ (8005af0 <TIM_Base_SetConfig+0x148>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d007      	beq.n	8005ab8 <TIM_Base_SetConfig+0x110>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a12      	ldr	r2, [pc, #72]	@ (8005af4 <TIM_Base_SetConfig+0x14c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d003      	beq.n	8005ab8 <TIM_Base_SetConfig+0x110>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a0d      	ldr	r2, [pc, #52]	@ (8005ae8 <TIM_Base_SetConfig+0x140>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d103      	bne.n	8005ac0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	615a      	str	r2, [r3, #20]
}
 8005ac6:	bf00      	nop
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	40012c00 	.word	0x40012c00
 8005ad8:	40000400 	.word	0x40000400
 8005adc:	40000800 	.word	0x40000800
 8005ae0:	40000c00 	.word	0x40000c00
 8005ae4:	40013400 	.word	0x40013400
 8005ae8:	40015000 	.word	0x40015000
 8005aec:	40014000 	.word	0x40014000
 8005af0:	40014400 	.word	0x40014400
 8005af4:	40014800 	.word	0x40014800

08005af8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	f023 0201 	bic.w	r2, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 0303 	bic.w	r3, r3, #3
 8005b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f023 0302 	bic.w	r3, r3, #2
 8005b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a30      	ldr	r2, [pc, #192]	@ (8005c14 <TIM_OC1_SetConfig+0x11c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d013      	beq.n	8005b80 <TIM_OC1_SetConfig+0x88>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a2f      	ldr	r2, [pc, #188]	@ (8005c18 <TIM_OC1_SetConfig+0x120>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00f      	beq.n	8005b80 <TIM_OC1_SetConfig+0x88>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a2e      	ldr	r2, [pc, #184]	@ (8005c1c <TIM_OC1_SetConfig+0x124>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d00b      	beq.n	8005b80 <TIM_OC1_SetConfig+0x88>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a2d      	ldr	r2, [pc, #180]	@ (8005c20 <TIM_OC1_SetConfig+0x128>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d007      	beq.n	8005b80 <TIM_OC1_SetConfig+0x88>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a2c      	ldr	r2, [pc, #176]	@ (8005c24 <TIM_OC1_SetConfig+0x12c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d003      	beq.n	8005b80 <TIM_OC1_SetConfig+0x88>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8005c28 <TIM_OC1_SetConfig+0x130>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d10c      	bne.n	8005b9a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f023 0308 	bic.w	r3, r3, #8
 8005b86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f023 0304 	bic.w	r3, r3, #4
 8005b98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8005c14 <TIM_OC1_SetConfig+0x11c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d013      	beq.n	8005bca <TIM_OC1_SetConfig+0xd2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8005c18 <TIM_OC1_SetConfig+0x120>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d00f      	beq.n	8005bca <TIM_OC1_SetConfig+0xd2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a1b      	ldr	r2, [pc, #108]	@ (8005c1c <TIM_OC1_SetConfig+0x124>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d00b      	beq.n	8005bca <TIM_OC1_SetConfig+0xd2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a1a      	ldr	r2, [pc, #104]	@ (8005c20 <TIM_OC1_SetConfig+0x128>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d007      	beq.n	8005bca <TIM_OC1_SetConfig+0xd2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a19      	ldr	r2, [pc, #100]	@ (8005c24 <TIM_OC1_SetConfig+0x12c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d003      	beq.n	8005bca <TIM_OC1_SetConfig+0xd2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a18      	ldr	r2, [pc, #96]	@ (8005c28 <TIM_OC1_SetConfig+0x130>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d111      	bne.n	8005bee <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	621a      	str	r2, [r3, #32]
}
 8005c08:	bf00      	nop
 8005c0a:	371c      	adds	r7, #28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	40012c00 	.word	0x40012c00
 8005c18:	40013400 	.word	0x40013400
 8005c1c:	40014000 	.word	0x40014000
 8005c20:	40014400 	.word	0x40014400
 8005c24:	40014800 	.word	0x40014800
 8005c28:	40015000 	.word	0x40015000

08005c2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	f023 0210 	bic.w	r2, r3, #16
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	021b      	lsls	r3, r3, #8
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f023 0320 	bic.w	r3, r3, #32
 8005c7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	011b      	lsls	r3, r3, #4
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8005d3c <TIM_OC2_SetConfig+0x110>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d007      	beq.n	8005ca0 <TIM_OC2_SetConfig+0x74>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a2b      	ldr	r2, [pc, #172]	@ (8005d40 <TIM_OC2_SetConfig+0x114>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d003      	beq.n	8005ca0 <TIM_OC2_SetConfig+0x74>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a2a      	ldr	r2, [pc, #168]	@ (8005d44 <TIM_OC2_SetConfig+0x118>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d10d      	bne.n	8005cbc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	011b      	lsls	r3, r3, #4
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8005d3c <TIM_OC2_SetConfig+0x110>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d013      	beq.n	8005cec <TIM_OC2_SetConfig+0xc0>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8005d40 <TIM_OC2_SetConfig+0x114>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d00f      	beq.n	8005cec <TIM_OC2_SetConfig+0xc0>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a1e      	ldr	r2, [pc, #120]	@ (8005d48 <TIM_OC2_SetConfig+0x11c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00b      	beq.n	8005cec <TIM_OC2_SetConfig+0xc0>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8005d4c <TIM_OC2_SetConfig+0x120>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d007      	beq.n	8005cec <TIM_OC2_SetConfig+0xc0>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a1c      	ldr	r2, [pc, #112]	@ (8005d50 <TIM_OC2_SetConfig+0x124>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d003      	beq.n	8005cec <TIM_OC2_SetConfig+0xc0>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a17      	ldr	r2, [pc, #92]	@ (8005d44 <TIM_OC2_SetConfig+0x118>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d113      	bne.n	8005d14 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	621a      	str	r2, [r3, #32]
}
 8005d2e:	bf00      	nop
 8005d30:	371c      	adds	r7, #28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	40012c00 	.word	0x40012c00
 8005d40:	40013400 	.word	0x40013400
 8005d44:	40015000 	.word	0x40015000
 8005d48:	40014000 	.word	0x40014000
 8005d4c:	40014400 	.word	0x40014400
 8005d50:	40014800 	.word	0x40014800

08005d54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0303 	bic.w	r3, r3, #3
 8005d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005da0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	021b      	lsls	r3, r3, #8
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a2b      	ldr	r2, [pc, #172]	@ (8005e60 <TIM_OC3_SetConfig+0x10c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d007      	beq.n	8005dc6 <TIM_OC3_SetConfig+0x72>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a2a      	ldr	r2, [pc, #168]	@ (8005e64 <TIM_OC3_SetConfig+0x110>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d003      	beq.n	8005dc6 <TIM_OC3_SetConfig+0x72>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a29      	ldr	r2, [pc, #164]	@ (8005e68 <TIM_OC3_SetConfig+0x114>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d10d      	bne.n	8005de2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005dcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	021b      	lsls	r3, r3, #8
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a1e      	ldr	r2, [pc, #120]	@ (8005e60 <TIM_OC3_SetConfig+0x10c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d013      	beq.n	8005e12 <TIM_OC3_SetConfig+0xbe>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a1d      	ldr	r2, [pc, #116]	@ (8005e64 <TIM_OC3_SetConfig+0x110>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00f      	beq.n	8005e12 <TIM_OC3_SetConfig+0xbe>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e6c <TIM_OC3_SetConfig+0x118>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00b      	beq.n	8005e12 <TIM_OC3_SetConfig+0xbe>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8005e70 <TIM_OC3_SetConfig+0x11c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d007      	beq.n	8005e12 <TIM_OC3_SetConfig+0xbe>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a1b      	ldr	r2, [pc, #108]	@ (8005e74 <TIM_OC3_SetConfig+0x120>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d003      	beq.n	8005e12 <TIM_OC3_SetConfig+0xbe>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a16      	ldr	r2, [pc, #88]	@ (8005e68 <TIM_OC3_SetConfig+0x114>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d113      	bne.n	8005e3a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	011b      	lsls	r3, r3, #4
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	621a      	str	r2, [r3, #32]
}
 8005e54:	bf00      	nop
 8005e56:	371c      	adds	r7, #28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	40012c00 	.word	0x40012c00
 8005e64:	40013400 	.word	0x40013400
 8005e68:	40015000 	.word	0x40015000
 8005e6c:	40014000 	.word	0x40014000
 8005e70:	40014400 	.word	0x40014400
 8005e74:	40014800 	.word	0x40014800

08005e78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ea6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	021b      	lsls	r3, r3, #8
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ec6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	031b      	lsls	r3, r3, #12
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a2c      	ldr	r2, [pc, #176]	@ (8005f88 <TIM_OC4_SetConfig+0x110>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d007      	beq.n	8005eec <TIM_OC4_SetConfig+0x74>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a2b      	ldr	r2, [pc, #172]	@ (8005f8c <TIM_OC4_SetConfig+0x114>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d003      	beq.n	8005eec <TIM_OC4_SetConfig+0x74>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a2a      	ldr	r2, [pc, #168]	@ (8005f90 <TIM_OC4_SetConfig+0x118>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d10d      	bne.n	8005f08 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	031b      	lsls	r3, r3, #12
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8005f88 <TIM_OC4_SetConfig+0x110>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d013      	beq.n	8005f38 <TIM_OC4_SetConfig+0xc0>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a1e      	ldr	r2, [pc, #120]	@ (8005f8c <TIM_OC4_SetConfig+0x114>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00f      	beq.n	8005f38 <TIM_OC4_SetConfig+0xc0>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8005f94 <TIM_OC4_SetConfig+0x11c>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d00b      	beq.n	8005f38 <TIM_OC4_SetConfig+0xc0>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a1d      	ldr	r2, [pc, #116]	@ (8005f98 <TIM_OC4_SetConfig+0x120>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d007      	beq.n	8005f38 <TIM_OC4_SetConfig+0xc0>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8005f9c <TIM_OC4_SetConfig+0x124>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d003      	beq.n	8005f38 <TIM_OC4_SetConfig+0xc0>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a17      	ldr	r2, [pc, #92]	@ (8005f90 <TIM_OC4_SetConfig+0x118>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d113      	bne.n	8005f60 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f3e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005f46:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	019b      	lsls	r3, r3, #6
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	019b      	lsls	r3, r3, #6
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	621a      	str	r2, [r3, #32]
}
 8005f7a:	bf00      	nop
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	40012c00 	.word	0x40012c00
 8005f8c:	40013400 	.word	0x40013400
 8005f90:	40015000 	.word	0x40015000
 8005f94:	40014000 	.word	0x40014000
 8005f98:	40014400 	.word	0x40014400
 8005f9c:	40014800 	.word	0x40014800

08005fa0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005fe4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	041b      	lsls	r3, r3, #16
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a19      	ldr	r2, [pc, #100]	@ (800605c <TIM_OC5_SetConfig+0xbc>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d013      	beq.n	8006022 <TIM_OC5_SetConfig+0x82>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a18      	ldr	r2, [pc, #96]	@ (8006060 <TIM_OC5_SetConfig+0xc0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d00f      	beq.n	8006022 <TIM_OC5_SetConfig+0x82>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a17      	ldr	r2, [pc, #92]	@ (8006064 <TIM_OC5_SetConfig+0xc4>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00b      	beq.n	8006022 <TIM_OC5_SetConfig+0x82>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a16      	ldr	r2, [pc, #88]	@ (8006068 <TIM_OC5_SetConfig+0xc8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d007      	beq.n	8006022 <TIM_OC5_SetConfig+0x82>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a15      	ldr	r2, [pc, #84]	@ (800606c <TIM_OC5_SetConfig+0xcc>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d003      	beq.n	8006022 <TIM_OC5_SetConfig+0x82>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a14      	ldr	r2, [pc, #80]	@ (8006070 <TIM_OC5_SetConfig+0xd0>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d109      	bne.n	8006036 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006028:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	021b      	lsls	r3, r3, #8
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	621a      	str	r2, [r3, #32]
}
 8006050:	bf00      	nop
 8006052:	371c      	adds	r7, #28
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	40012c00 	.word	0x40012c00
 8006060:	40013400 	.word	0x40013400
 8006064:	40014000 	.word	0x40014000
 8006068:	40014400 	.word	0x40014400
 800606c:	40014800 	.word	0x40014800
 8006070:	40015000 	.word	0x40015000

08006074 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800609a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	021b      	lsls	r3, r3, #8
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80060ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	051b      	lsls	r3, r3, #20
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a1a      	ldr	r2, [pc, #104]	@ (8006134 <TIM_OC6_SetConfig+0xc0>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d013      	beq.n	80060f8 <TIM_OC6_SetConfig+0x84>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a19      	ldr	r2, [pc, #100]	@ (8006138 <TIM_OC6_SetConfig+0xc4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d00f      	beq.n	80060f8 <TIM_OC6_SetConfig+0x84>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a18      	ldr	r2, [pc, #96]	@ (800613c <TIM_OC6_SetConfig+0xc8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00b      	beq.n	80060f8 <TIM_OC6_SetConfig+0x84>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a17      	ldr	r2, [pc, #92]	@ (8006140 <TIM_OC6_SetConfig+0xcc>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d007      	beq.n	80060f8 <TIM_OC6_SetConfig+0x84>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a16      	ldr	r2, [pc, #88]	@ (8006144 <TIM_OC6_SetConfig+0xd0>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d003      	beq.n	80060f8 <TIM_OC6_SetConfig+0x84>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a15      	ldr	r2, [pc, #84]	@ (8006148 <TIM_OC6_SetConfig+0xd4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d109      	bne.n	800610c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	029b      	lsls	r3, r3, #10
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	4313      	orrs	r3, r2
 800610a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	621a      	str	r2, [r3, #32]
}
 8006126:	bf00      	nop
 8006128:	371c      	adds	r7, #28
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	40012c00 	.word	0x40012c00
 8006138:	40013400 	.word	0x40013400
 800613c:	40014000 	.word	0x40014000
 8006140:	40014400 	.word	0x40014400
 8006144:	40014800 	.word	0x40014800
 8006148:	40015000 	.word	0x40015000

0800614c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
 8006158:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	f023 0201 	bic.w	r2, r3, #1
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4a28      	ldr	r2, [pc, #160]	@ (8006218 <TIM_TI1_SetConfig+0xcc>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d01b      	beq.n	80061b2 <TIM_TI1_SetConfig+0x66>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006180:	d017      	beq.n	80061b2 <TIM_TI1_SetConfig+0x66>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	4a25      	ldr	r2, [pc, #148]	@ (800621c <TIM_TI1_SetConfig+0xd0>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d013      	beq.n	80061b2 <TIM_TI1_SetConfig+0x66>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4a24      	ldr	r2, [pc, #144]	@ (8006220 <TIM_TI1_SetConfig+0xd4>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d00f      	beq.n	80061b2 <TIM_TI1_SetConfig+0x66>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4a23      	ldr	r2, [pc, #140]	@ (8006224 <TIM_TI1_SetConfig+0xd8>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d00b      	beq.n	80061b2 <TIM_TI1_SetConfig+0x66>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4a22      	ldr	r2, [pc, #136]	@ (8006228 <TIM_TI1_SetConfig+0xdc>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d007      	beq.n	80061b2 <TIM_TI1_SetConfig+0x66>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4a21      	ldr	r2, [pc, #132]	@ (800622c <TIM_TI1_SetConfig+0xe0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d003      	beq.n	80061b2 <TIM_TI1_SetConfig+0x66>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4a20      	ldr	r2, [pc, #128]	@ (8006230 <TIM_TI1_SetConfig+0xe4>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d101      	bne.n	80061b6 <TIM_TI1_SetConfig+0x6a>
 80061b2:	2301      	movs	r3, #1
 80061b4:	e000      	b.n	80061b8 <TIM_TI1_SetConfig+0x6c>
 80061b6:	2300      	movs	r3, #0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d008      	beq.n	80061ce <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f023 0303 	bic.w	r3, r3, #3
 80061c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	e003      	b.n	80061d6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f043 0301 	orr.w	r3, r3, #1
 80061d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	011b      	lsls	r3, r3, #4
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	f023 030a 	bic.w	r3, r3, #10
 80061f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f003 030a 	and.w	r3, r3, #10
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	621a      	str	r2, [r3, #32]
}
 800620a:	bf00      	nop
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	40012c00 	.word	0x40012c00
 800621c:	40000400 	.word	0x40000400
 8006220:	40000800 	.word	0x40000800
 8006224:	40000c00 	.word	0x40000c00
 8006228:	40013400 	.word	0x40013400
 800622c:	40014000 	.word	0x40014000
 8006230:	40015000 	.word	0x40015000

08006234 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f003 031f 	and.w	r3, r3, #31
 8006246:	2201      	movs	r2, #1
 8006248:	fa02 f303 	lsl.w	r3, r2, r3
 800624c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a1a      	ldr	r2, [r3, #32]
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	43db      	mvns	r3, r3
 8006256:	401a      	ands	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a1a      	ldr	r2, [r3, #32]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f003 031f 	and.w	r3, r3, #31
 8006266:	6879      	ldr	r1, [r7, #4]
 8006268:	fa01 f303 	lsl.w	r3, r1, r3
 800626c:	431a      	orrs	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	621a      	str	r2, [r3, #32]
}
 8006272:	bf00      	nop
 8006274:	371c      	adds	r7, #28
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b08a      	sub	sp, #40	@ 0x28
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e0a0      	b.n	80063d4 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006298:	b2db      	uxtb	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d106      	bne.n	80062ac <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7fb fd18 	bl	8001cdc <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3304      	adds	r3, #4
 80062bc:	4619      	mov	r1, r3
 80062be:	4610      	mov	r0, r2
 80062c0:	f7ff fb72 	bl	80059a8 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6818      	ldr	r0, [r3, #0]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	6819      	ldr	r1, [r3, #0]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	2203      	movs	r2, #3
 80062d2:	f7ff ff3b 	bl	800614c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	699a      	ldr	r2, [r3, #24]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 020c 	bic.w	r2, r2, #12
 80062e4:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6999      	ldr	r1, [r3, #24]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006306:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6812      	ldr	r2, [r2, #0]
 8006312:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800631a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689a      	ldr	r2, [r3, #8]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800632a:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	6812      	ldr	r2, [r2, #0]
 8006336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800633a:	f023 0307 	bic.w	r3, r3, #7
 800633e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0204 	orr.w	r2, r2, #4
 800634e:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8006350:	2300      	movs	r3, #0
 8006352:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006354:	2300      	movs	r3, #0
 8006356:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006358:	2370      	movs	r3, #112	@ 0x70
 800635a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800635c:	2300      	movs	r3, #0
 800635e:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006360:	2300      	movs	r3, #0
 8006362:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006364:	2300      	movs	r3, #0
 8006366:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f107 020c 	add.w	r2, r7, #12
 8006376:	4611      	mov	r1, r2
 8006378:	4618      	mov	r0, r3
 800637a:	f7ff fc57 	bl	8005c2c <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6812      	ldr	r2, [r2, #0]
 8006388:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800638c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006390:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 80063a0:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3728      	adds	r7, #40	@ 0x28
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d109      	bne.n	8006400 <HAL_TIMEx_PWMN_Start+0x24>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	bf14      	ite	ne
 80063f8:	2301      	movne	r3, #1
 80063fa:	2300      	moveq	r3, #0
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	e022      	b.n	8006446 <HAL_TIMEx_PWMN_Start+0x6a>
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	2b04      	cmp	r3, #4
 8006404:	d109      	bne.n	800641a <HAL_TIMEx_PWMN_Start+0x3e>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b01      	cmp	r3, #1
 8006410:	bf14      	ite	ne
 8006412:	2301      	movne	r3, #1
 8006414:	2300      	moveq	r3, #0
 8006416:	b2db      	uxtb	r3, r3
 8006418:	e015      	b.n	8006446 <HAL_TIMEx_PWMN_Start+0x6a>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b08      	cmp	r3, #8
 800641e:	d109      	bne.n	8006434 <HAL_TIMEx_PWMN_Start+0x58>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b01      	cmp	r3, #1
 800642a:	bf14      	ite	ne
 800642c:	2301      	movne	r3, #1
 800642e:	2300      	moveq	r3, #0
 8006430:	b2db      	uxtb	r3, r3
 8006432:	e008      	b.n	8006446 <HAL_TIMEx_PWMN_Start+0x6a>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b01      	cmp	r3, #1
 800643e:	bf14      	ite	ne
 8006440:	2301      	movne	r3, #1
 8006442:	2300      	moveq	r3, #0
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e073      	b.n	8006536 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d104      	bne.n	800645e <HAL_TIMEx_PWMN_Start+0x82>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800645c:	e013      	b.n	8006486 <HAL_TIMEx_PWMN_Start+0xaa>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b04      	cmp	r3, #4
 8006462:	d104      	bne.n	800646e <HAL_TIMEx_PWMN_Start+0x92>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800646c:	e00b      	b.n	8006486 <HAL_TIMEx_PWMN_Start+0xaa>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b08      	cmp	r3, #8
 8006472:	d104      	bne.n	800647e <HAL_TIMEx_PWMN_Start+0xa2>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2202      	movs	r2, #2
 8006478:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800647c:	e003      	b.n	8006486 <HAL_TIMEx_PWMN_Start+0xaa>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2202      	movs	r2, #2
 8006482:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2204      	movs	r2, #4
 800648c:	6839      	ldr	r1, [r7, #0]
 800648e:	4618      	mov	r0, r3
 8006490:	f000 fa52 	bl	8006938 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a25      	ldr	r2, [pc, #148]	@ (8006540 <HAL_TIMEx_PWMN_Start+0x164>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d022      	beq.n	80064f4 <HAL_TIMEx_PWMN_Start+0x118>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064b6:	d01d      	beq.n	80064f4 <HAL_TIMEx_PWMN_Start+0x118>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a21      	ldr	r2, [pc, #132]	@ (8006544 <HAL_TIMEx_PWMN_Start+0x168>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d018      	beq.n	80064f4 <HAL_TIMEx_PWMN_Start+0x118>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a20      	ldr	r2, [pc, #128]	@ (8006548 <HAL_TIMEx_PWMN_Start+0x16c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d013      	beq.n	80064f4 <HAL_TIMEx_PWMN_Start+0x118>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a1e      	ldr	r2, [pc, #120]	@ (800654c <HAL_TIMEx_PWMN_Start+0x170>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d00e      	beq.n	80064f4 <HAL_TIMEx_PWMN_Start+0x118>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a1d      	ldr	r2, [pc, #116]	@ (8006550 <HAL_TIMEx_PWMN_Start+0x174>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d009      	beq.n	80064f4 <HAL_TIMEx_PWMN_Start+0x118>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006554 <HAL_TIMEx_PWMN_Start+0x178>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d004      	beq.n	80064f4 <HAL_TIMEx_PWMN_Start+0x118>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a1a      	ldr	r2, [pc, #104]	@ (8006558 <HAL_TIMEx_PWMN_Start+0x17c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d115      	bne.n	8006520 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689a      	ldr	r2, [r3, #8]
 80064fa:	4b18      	ldr	r3, [pc, #96]	@ (800655c <HAL_TIMEx_PWMN_Start+0x180>)
 80064fc:	4013      	ands	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2b06      	cmp	r3, #6
 8006504:	d015      	beq.n	8006532 <HAL_TIMEx_PWMN_Start+0x156>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800650c:	d011      	beq.n	8006532 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f042 0201 	orr.w	r2, r2, #1
 800651c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800651e:	e008      	b.n	8006532 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0201 	orr.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	e000      	b.n	8006534 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006532:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	40012c00 	.word	0x40012c00
 8006544:	40000400 	.word	0x40000400
 8006548:	40000800 	.word	0x40000800
 800654c:	40000c00 	.word	0x40000c00
 8006550:	40013400 	.word	0x40013400
 8006554:	40014000 	.word	0x40014000
 8006558:	40015000 	.word	0x40015000
 800655c:	00010007 	.word	0x00010007

08006560 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2200      	movs	r2, #0
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	4618      	mov	r0, r3
 8006574:	f000 f9e0 	bl	8006938 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6a1a      	ldr	r2, [r3, #32]
 800657e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006582:	4013      	ands	r3, r2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10f      	bne.n	80065a8 <HAL_TIMEx_PWMN_Stop+0x48>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6a1a      	ldr	r2, [r3, #32]
 800658e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006592:	4013      	ands	r3, r2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d107      	bne.n	80065a8 <HAL_TIMEx_PWMN_Stop+0x48>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6a1a      	ldr	r2, [r3, #32]
 80065ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80065b2:	4013      	ands	r3, r2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10f      	bne.n	80065d8 <HAL_TIMEx_PWMN_Stop+0x78>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6a1a      	ldr	r2, [r3, #32]
 80065be:	f244 4344 	movw	r3, #17476	@ 0x4444
 80065c2:	4013      	ands	r3, r2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d107      	bne.n	80065d8 <HAL_TIMEx_PWMN_Stop+0x78>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0201 	bic.w	r2, r2, #1
 80065d6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d104      	bne.n	80065e8 <HAL_TIMEx_PWMN_Stop+0x88>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065e6:	e013      	b.n	8006610 <HAL_TIMEx_PWMN_Stop+0xb0>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	d104      	bne.n	80065f8 <HAL_TIMEx_PWMN_Stop+0x98>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065f6:	e00b      	b.n	8006610 <HAL_TIMEx_PWMN_Stop+0xb0>
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	2b08      	cmp	r3, #8
 80065fc:	d104      	bne.n	8006608 <HAL_TIMEx_PWMN_Stop+0xa8>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006606:	e003      	b.n	8006610 <HAL_TIMEx_PWMN_Stop+0xb0>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
	...

0800661c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006630:	2302      	movs	r3, #2
 8006632:	e074      	b.n	800671e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a34      	ldr	r2, [pc, #208]	@ (800672c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d009      	beq.n	8006672 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a33      	ldr	r2, [pc, #204]	@ (8006730 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d004      	beq.n	8006672 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a31      	ldr	r2, [pc, #196]	@ (8006734 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d108      	bne.n	8006684 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006678:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	4313      	orrs	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800668a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800668e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	4313      	orrs	r3, r2
 8006698:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a21      	ldr	r2, [pc, #132]	@ (800672c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d022      	beq.n	80066f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066b4:	d01d      	beq.n	80066f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a1f      	ldr	r2, [pc, #124]	@ (8006738 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d018      	beq.n	80066f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a1d      	ldr	r2, [pc, #116]	@ (800673c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d013      	beq.n	80066f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a1c      	ldr	r2, [pc, #112]	@ (8006740 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d00e      	beq.n	80066f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a15      	ldr	r2, [pc, #84]	@ (8006730 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d009      	beq.n	80066f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a18      	ldr	r2, [pc, #96]	@ (8006744 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d004      	beq.n	80066f2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a11      	ldr	r2, [pc, #68]	@ (8006734 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d10c      	bne.n	800670c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	4313      	orrs	r3, r2
 8006702:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	40012c00 	.word	0x40012c00
 8006730:	40013400 	.word	0x40013400
 8006734:	40015000 	.word	0x40015000
 8006738:	40000400 	.word	0x40000400
 800673c:	40000800 	.word	0x40000800
 8006740:	40000c00 	.word	0x40000c00
 8006744:	40014000 	.word	0x40014000

08006748 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800675c:	2b01      	cmp	r3, #1
 800675e:	d101      	bne.n	8006764 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006760:	2302      	movs	r3, #2
 8006762:	e096      	b.n	8006892 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	4313      	orrs	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	4313      	orrs	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	4313      	orrs	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	4313      	orrs	r3, r2
 80067be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ca:	4313      	orrs	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	041b      	lsls	r3, r3, #16
 80067da:	4313      	orrs	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a2f      	ldr	r2, [pc, #188]	@ (80068a0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d009      	beq.n	80067fc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a2d      	ldr	r2, [pc, #180]	@ (80068a4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d004      	beq.n	80067fc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a2c      	ldr	r2, [pc, #176]	@ (80068a8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d106      	bne.n	800680a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	4313      	orrs	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a24      	ldr	r2, [pc, #144]	@ (80068a0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d009      	beq.n	8006828 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a22      	ldr	r2, [pc, #136]	@ (80068a4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d004      	beq.n	8006828 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a21      	ldr	r2, [pc, #132]	@ (80068a8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d12b      	bne.n	8006880 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006832:	051b      	lsls	r3, r3, #20
 8006834:	4313      	orrs	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	4313      	orrs	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006850:	4313      	orrs	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a11      	ldr	r2, [pc, #68]	@ (80068a0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d009      	beq.n	8006872 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a10      	ldr	r2, [pc, #64]	@ (80068a4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d004      	beq.n	8006872 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a0e      	ldr	r2, [pc, #56]	@ (80068a8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d106      	bne.n	8006880 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687c:	4313      	orrs	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	40012c00 	.word	0x40012c00
 80068a4:	40013400 	.word	0x40013400
 80068a8:	40015000 	.word	0x40015000

080068ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	f003 031f 	and.w	r3, r3, #31
 800694a:	2204      	movs	r2, #4
 800694c:	fa02 f303 	lsl.w	r3, r2, r3
 8006950:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6a1a      	ldr	r2, [r3, #32]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	43db      	mvns	r3, r3
 800695a:	401a      	ands	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6a1a      	ldr	r2, [r3, #32]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f003 031f 	and.w	r3, r3, #31
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	fa01 f303 	lsl.w	r3, r1, r3
 8006970:	431a      	orrs	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	621a      	str	r2, [r3, #32]
}
 8006976:	bf00      	nop
 8006978:	371c      	adds	r7, #28
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b082      	sub	sp, #8
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e042      	b.n	8006a1a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800699a:	2b00      	cmp	r3, #0
 800699c:	d106      	bne.n	80069ac <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7fb fafa 	bl	8001fa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2224      	movs	r2, #36	@ 0x24
 80069b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 0201 	bic.w	r2, r2, #1
 80069c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fc51 	bl	800726c <UART_SetConfig>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d101      	bne.n	80069d4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e022      	b.n	8006a1a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 ff41 	bl	8007864 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80069f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689a      	ldr	r2, [r3, #8]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a00:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f042 0201 	orr.w	r2, r2, #1
 8006a10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 ffc8 	bl	80079a8 <UART_CheckIdleState>
 8006a18:	4603      	mov	r3, r0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a22:	b580      	push	{r7, lr}
 8006a24:	b08a      	sub	sp, #40	@ 0x28
 8006a26:	af02      	add	r7, sp, #8
 8006a28:	60f8      	str	r0, [r7, #12]
 8006a2a:	60b9      	str	r1, [r7, #8]
 8006a2c:	603b      	str	r3, [r7, #0]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a38:	2b20      	cmp	r3, #32
 8006a3a:	f040 8083 	bne.w	8006b44 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d002      	beq.n	8006a4a <HAL_UART_Transmit+0x28>
 8006a44:	88fb      	ldrh	r3, [r7, #6]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e07b      	b.n	8006b46 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d101      	bne.n	8006a5c <HAL_UART_Transmit+0x3a>
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e074      	b.n	8006b46 <HAL_UART_Transmit+0x124>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2221      	movs	r2, #33	@ 0x21
 8006a70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a74:	f7fb fcfe 	bl	8002474 <HAL_GetTick>
 8006a78:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	88fa      	ldrh	r2, [r7, #6]
 8006a7e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	88fa      	ldrh	r2, [r7, #6]
 8006a86:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a92:	d108      	bne.n	8006aa6 <HAL_UART_Transmit+0x84>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d104      	bne.n	8006aa6 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	61bb      	str	r3, [r7, #24]
 8006aa4:	e003      	b.n	8006aae <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 8006ab6:	e02c      	b.n	8006b12 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2180      	movs	r1, #128	@ 0x80
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 ffbb 	bl	8007a3e <UART_WaitOnFlagUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e039      	b.n	8006b46 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10b      	bne.n	8006af0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	461a      	mov	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ae6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	3302      	adds	r3, #2
 8006aec:	61bb      	str	r3, [r7, #24]
 8006aee:	e007      	b.n	8006b00 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	781a      	ldrb	r2, [r3, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	3301      	adds	r3, #1
 8006afe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1cc      	bne.n	8006ab8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	2200      	movs	r2, #0
 8006b26:	2140      	movs	r1, #64	@ 0x40
 8006b28:	68f8      	ldr	r0, [r7, #12]
 8006b2a:	f000 ff88 	bl	8007a3e <UART_WaitOnFlagUntilTimeout>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e006      	b.n	8006b46 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8006b40:	2300      	movs	r3, #0
 8006b42:	e000      	b.n	8006b46 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006b44:	2302      	movs	r3, #2
  }
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3720      	adds	r7, #32
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
	...

08006b50 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b08a      	sub	sp, #40	@ 0x28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b64:	2b20      	cmp	r3, #32
 8006b66:	d142      	bne.n	8006bee <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d002      	beq.n	8006b74 <HAL_UART_Receive_IT+0x24>
 8006b6e:	88fb      	ldrh	r3, [r7, #6]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e03b      	b.n	8006bf0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d101      	bne.n	8006b86 <HAL_UART_Receive_IT+0x36>
 8006b82:	2302      	movs	r3, #2
 8006b84:	e034      	b.n	8006bf0 <HAL_UART_Receive_IT+0xa0>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a17      	ldr	r2, [pc, #92]	@ (8006bf8 <HAL_UART_Receive_IT+0xa8>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d01f      	beq.n	8006bde <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d018      	beq.n	8006bde <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	e853 3f00 	ldrex	r3, [r3]
 8006bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bca:	623b      	str	r3, [r7, #32]
 8006bcc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bce:	69f9      	ldr	r1, [r7, #28]
 8006bd0:	6a3a      	ldr	r2, [r7, #32]
 8006bd2:	e841 2300 	strex	r3, r2, [r1]
 8006bd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1e6      	bne.n	8006bac <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006bde:	88fb      	ldrh	r3, [r7, #6]
 8006be0:	461a      	mov	r2, r3
 8006be2:	68b9      	ldr	r1, [r7, #8]
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f000 fff3 	bl	8007bd0 <UART_Start_Receive_IT>
 8006bea:	4603      	mov	r3, r0
 8006bec:	e000      	b.n	8006bf0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006bee:	2302      	movs	r3, #2
  }
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3728      	adds	r7, #40	@ 0x28
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	40008000 	.word	0x40008000

08006bfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b0ba      	sub	sp, #232	@ 0xe8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006c26:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006c30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d11b      	bne.n	8006c70 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c3c:	f003 0320 	and.w	r3, r3, #32
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d015      	beq.n	8006c70 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c48:	f003 0320 	and.w	r3, r3, #32
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d105      	bne.n	8006c5c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d009      	beq.n	8006c70 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 82d6 	beq.w	8007212 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	4798      	blx	r3
      }
      return;
 8006c6e:	e2d0      	b.n	8007212 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 811f 	beq.w	8006eb8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c7a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006c7e:	4b8b      	ldr	r3, [pc, #556]	@ (8006eac <HAL_UART_IRQHandler+0x2b0>)
 8006c80:	4013      	ands	r3, r2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d106      	bne.n	8006c94 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006c86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006c8a:	4b89      	ldr	r3, [pc, #548]	@ (8006eb0 <HAL_UART_IRQHandler+0x2b4>)
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 8112 	beq.w	8006eb8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d011      	beq.n	8006cc4 <HAL_UART_IRQHandler+0xc8>
 8006ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00b      	beq.n	8006cc4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cba:	f043 0201 	orr.w	r2, r3, #1
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d011      	beq.n	8006cf4 <HAL_UART_IRQHandler+0xf8>
 8006cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00b      	beq.n	8006cf4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cea:	f043 0204 	orr.w	r2, r3, #4
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d011      	beq.n	8006d24 <HAL_UART_IRQHandler+0x128>
 8006d00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00b      	beq.n	8006d24 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2204      	movs	r2, #4
 8006d12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d1a:	f043 0202 	orr.w	r2, r3, #2
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d28:	f003 0308 	and.w	r3, r3, #8
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d017      	beq.n	8006d60 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d34:	f003 0320 	and.w	r3, r3, #32
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d105      	bne.n	8006d48 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d3c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006d40:	4b5a      	ldr	r3, [pc, #360]	@ (8006eac <HAL_UART_IRQHandler+0x2b0>)
 8006d42:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00b      	beq.n	8006d60 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2208      	movs	r2, #8
 8006d4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d56:	f043 0208 	orr.w	r2, r3, #8
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d012      	beq.n	8006d92 <HAL_UART_IRQHandler+0x196>
 8006d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00c      	beq.n	8006d92 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d88:	f043 0220 	orr.w	r2, r3, #32
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 823c 	beq.w	8007216 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006da2:	f003 0320 	and.w	r3, r3, #32
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d013      	beq.n	8006dd2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dae:	f003 0320 	and.w	r3, r3, #32
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d105      	bne.n	8006dc2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006db6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d007      	beq.n	8006dd2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006dd8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006de6:	2b40      	cmp	r3, #64	@ 0x40
 8006de8:	d005      	beq.n	8006df6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006dee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d04f      	beq.n	8006e96 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f001 f814 	bl	8007e24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e06:	2b40      	cmp	r3, #64	@ 0x40
 8006e08:	d141      	bne.n	8006e8e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3308      	adds	r3, #8
 8006e10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	3308      	adds	r3, #8
 8006e32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006e36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006e42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006e46:	e841 2300 	strex	r3, r2, [r1]
 8006e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006e4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1d9      	bne.n	8006e0a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d013      	beq.n	8006e86 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e62:	4a14      	ldr	r2, [pc, #80]	@ (8006eb4 <HAL_UART_IRQHandler+0x2b8>)
 8006e64:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fc fd73 	bl	8003956 <HAL_DMA_Abort_IT>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d017      	beq.n	8006ea6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8006e80:	4610      	mov	r0, r2
 8006e82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e84:	e00f      	b.n	8006ea6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f9da 	bl	8007240 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e8c:	e00b      	b.n	8006ea6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f9d6 	bl	8007240 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e94:	e007      	b.n	8006ea6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f9d2 	bl	8007240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8006ea4:	e1b7      	b.n	8007216 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea6:	bf00      	nop
    return;
 8006ea8:	e1b5      	b.n	8007216 <HAL_UART_IRQHandler+0x61a>
 8006eaa:	bf00      	nop
 8006eac:	10000001 	.word	0x10000001
 8006eb0:	04000120 	.word	0x04000120
 8006eb4:	08007ef1 	.word	0x08007ef1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	f040 814a 	bne.w	8007156 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ec6:	f003 0310 	and.w	r3, r3, #16
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 8143 	beq.w	8007156 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ed4:	f003 0310 	and.w	r3, r3, #16
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 813c 	beq.w	8007156 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2210      	movs	r2, #16
 8006ee4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef0:	2b40      	cmp	r3, #64	@ 0x40
 8006ef2:	f040 80b5 	bne.w	8007060 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f000 8187 	beq.w	800721a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f16:	429a      	cmp	r2, r3
 8006f18:	f080 817f 	bcs.w	800721a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f22:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0320 	and.w	r3, r3, #32
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f040 8086 	bne.w	8007044 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f44:	e853 3f00 	ldrex	r3, [r3]
 8006f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006f4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f66:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006f6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006f72:	e841 2300 	strex	r3, r2, [r1]
 8006f76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1da      	bne.n	8006f38 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3308      	adds	r3, #8
 8006f88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f8c:	e853 3f00 	ldrex	r3, [r3]
 8006f90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006f92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f94:	f023 0301 	bic.w	r3, r3, #1
 8006f98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006fa6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006faa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006fae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006fb2:	e841 2300 	strex	r3, r2, [r1]
 8006fb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006fb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1e1      	bne.n	8006f82 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	3308      	adds	r3, #8
 8006fc4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fc8:	e853 3f00 	ldrex	r3, [r3]
 8006fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006fce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3308      	adds	r3, #8
 8006fde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006fe2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006fe8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006fea:	e841 2300 	strex	r3, r2, [r1]
 8006fee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1e3      	bne.n	8006fbe <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007014:	f023 0310 	bic.w	r3, r3, #16
 8007018:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007026:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007028:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800702c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800702e:	e841 2300 	strex	r3, r2, [r1]
 8007032:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1e4      	bne.n	8007004 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800703e:	4618      	mov	r0, r3
 8007040:	f7fc fc30 	bl	80038a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007050:	b29b      	uxth	r3, r3
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	b29b      	uxth	r3, r3
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f8fb 	bl	8007254 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800705e:	e0dc      	b.n	800721a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800706c:	b29b      	uxth	r3, r3
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800707a:	b29b      	uxth	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	f000 80ce 	beq.w	800721e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007082:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 80c9 	beq.w	800721e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007094:	e853 3f00 	ldrex	r3, [r3]
 8007098:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800709a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800709c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	461a      	mov	r2, r3
 80070aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80070ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80070b0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070b6:	e841 2300 	strex	r3, r2, [r1]
 80070ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d1e4      	bne.n	800708c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3308      	adds	r3, #8
 80070c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	e853 3f00 	ldrex	r3, [r3]
 80070d0:	623b      	str	r3, [r7, #32]
   return(result);
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070d8:	f023 0301 	bic.w	r3, r3, #1
 80070dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3308      	adds	r3, #8
 80070e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80070ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80070ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070f2:	e841 2300 	strex	r3, r2, [r1]
 80070f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1e1      	bne.n	80070c2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2220      	movs	r2, #32
 8007102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	e853 3f00 	ldrex	r3, [r3]
 800711e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f023 0310 	bic.w	r3, r3, #16
 8007126:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	461a      	mov	r2, r3
 8007130:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007134:	61fb      	str	r3, [r7, #28]
 8007136:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007138:	69b9      	ldr	r1, [r7, #24]
 800713a:	69fa      	ldr	r2, [r7, #28]
 800713c:	e841 2300 	strex	r3, r2, [r1]
 8007140:	617b      	str	r3, [r7, #20]
   return(result);
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1e4      	bne.n	8007112 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007148:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f880 	bl	8007254 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007154:	e063      	b.n	800721e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800715a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00e      	beq.n	8007180 <HAL_UART_IRQHandler+0x584>
 8007162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d008      	beq.n	8007180 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007176:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f001 fb57 	bl	800882c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800717e:	e051      	b.n	8007224 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007188:	2b00      	cmp	r3, #0
 800718a:	d014      	beq.n	80071b6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800718c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007194:	2b00      	cmp	r3, #0
 8007196:	d105      	bne.n	80071a4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007198:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800719c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d008      	beq.n	80071b6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d03a      	beq.n	8007222 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	4798      	blx	r3
    }
    return;
 80071b4:	e035      	b.n	8007222 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d009      	beq.n	80071d6 <HAL_UART_IRQHandler+0x5da>
 80071c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fea4 	bl	8007f1c <UART_EndTransmit_IT>
    return;
 80071d4:	e026      	b.n	8007224 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80071d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d009      	beq.n	80071f6 <HAL_UART_IRQHandler+0x5fa>
 80071e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071e6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f001 fb30 	bl	8008854 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071f4:	e016      	b.n	8007224 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80071f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d010      	beq.n	8007224 <HAL_UART_IRQHandler+0x628>
 8007202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007206:	2b00      	cmp	r3, #0
 8007208:	da0c      	bge.n	8007224 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f001 fb18 	bl	8008840 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007210:	e008      	b.n	8007224 <HAL_UART_IRQHandler+0x628>
      return;
 8007212:	bf00      	nop
 8007214:	e006      	b.n	8007224 <HAL_UART_IRQHandler+0x628>
    return;
 8007216:	bf00      	nop
 8007218:	e004      	b.n	8007224 <HAL_UART_IRQHandler+0x628>
      return;
 800721a:	bf00      	nop
 800721c:	e002      	b.n	8007224 <HAL_UART_IRQHandler+0x628>
      return;
 800721e:	bf00      	nop
 8007220:	e000      	b.n	8007224 <HAL_UART_IRQHandler+0x628>
    return;
 8007222:	bf00      	nop
  }
}
 8007224:	37e8      	adds	r7, #232	@ 0xe8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop

0800722c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	460b      	mov	r3, r1
 800725e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800726c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007270:	b08c      	sub	sp, #48	@ 0x30
 8007272:	af00      	add	r7, sp, #0
 8007274:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	689a      	ldr	r2, [r3, #8]
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	431a      	orrs	r2, r3
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	431a      	orrs	r2, r3
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	69db      	ldr	r3, [r3, #28]
 8007290:	4313      	orrs	r3, r2
 8007292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	4baa      	ldr	r3, [pc, #680]	@ (8007544 <UART_SetConfig+0x2d8>)
 800729c:	4013      	ands	r3, r2
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	6812      	ldr	r2, [r2, #0]
 80072a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072a4:	430b      	orrs	r3, r1
 80072a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	68da      	ldr	r2, [r3, #12]
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a9f      	ldr	r2, [pc, #636]	@ (8007548 <UART_SetConfig+0x2dc>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d004      	beq.n	80072d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072d4:	4313      	orrs	r3, r2
 80072d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80072e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	6812      	ldr	r2, [r2, #0]
 80072ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072ec:	430b      	orrs	r3, r1
 80072ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f6:	f023 010f 	bic.w	r1, r3, #15
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a90      	ldr	r2, [pc, #576]	@ (800754c <UART_SetConfig+0x2e0>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d125      	bne.n	800735c <UART_SetConfig+0xf0>
 8007310:	4b8f      	ldr	r3, [pc, #572]	@ (8007550 <UART_SetConfig+0x2e4>)
 8007312:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007316:	f003 0303 	and.w	r3, r3, #3
 800731a:	2b03      	cmp	r3, #3
 800731c:	d81a      	bhi.n	8007354 <UART_SetConfig+0xe8>
 800731e:	a201      	add	r2, pc, #4	@ (adr r2, 8007324 <UART_SetConfig+0xb8>)
 8007320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007324:	08007335 	.word	0x08007335
 8007328:	08007345 	.word	0x08007345
 800732c:	0800733d 	.word	0x0800733d
 8007330:	0800734d 	.word	0x0800734d
 8007334:	2301      	movs	r3, #1
 8007336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800733a:	e116      	b.n	800756a <UART_SetConfig+0x2fe>
 800733c:	2302      	movs	r3, #2
 800733e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007342:	e112      	b.n	800756a <UART_SetConfig+0x2fe>
 8007344:	2304      	movs	r3, #4
 8007346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800734a:	e10e      	b.n	800756a <UART_SetConfig+0x2fe>
 800734c:	2308      	movs	r3, #8
 800734e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007352:	e10a      	b.n	800756a <UART_SetConfig+0x2fe>
 8007354:	2310      	movs	r3, #16
 8007356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800735a:	e106      	b.n	800756a <UART_SetConfig+0x2fe>
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a7c      	ldr	r2, [pc, #496]	@ (8007554 <UART_SetConfig+0x2e8>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d138      	bne.n	80073d8 <UART_SetConfig+0x16c>
 8007366:	4b7a      	ldr	r3, [pc, #488]	@ (8007550 <UART_SetConfig+0x2e4>)
 8007368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800736c:	f003 030c 	and.w	r3, r3, #12
 8007370:	2b0c      	cmp	r3, #12
 8007372:	d82d      	bhi.n	80073d0 <UART_SetConfig+0x164>
 8007374:	a201      	add	r2, pc, #4	@ (adr r2, 800737c <UART_SetConfig+0x110>)
 8007376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737a:	bf00      	nop
 800737c:	080073b1 	.word	0x080073b1
 8007380:	080073d1 	.word	0x080073d1
 8007384:	080073d1 	.word	0x080073d1
 8007388:	080073d1 	.word	0x080073d1
 800738c:	080073c1 	.word	0x080073c1
 8007390:	080073d1 	.word	0x080073d1
 8007394:	080073d1 	.word	0x080073d1
 8007398:	080073d1 	.word	0x080073d1
 800739c:	080073b9 	.word	0x080073b9
 80073a0:	080073d1 	.word	0x080073d1
 80073a4:	080073d1 	.word	0x080073d1
 80073a8:	080073d1 	.word	0x080073d1
 80073ac:	080073c9 	.word	0x080073c9
 80073b0:	2300      	movs	r3, #0
 80073b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073b6:	e0d8      	b.n	800756a <UART_SetConfig+0x2fe>
 80073b8:	2302      	movs	r3, #2
 80073ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073be:	e0d4      	b.n	800756a <UART_SetConfig+0x2fe>
 80073c0:	2304      	movs	r3, #4
 80073c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073c6:	e0d0      	b.n	800756a <UART_SetConfig+0x2fe>
 80073c8:	2308      	movs	r3, #8
 80073ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ce:	e0cc      	b.n	800756a <UART_SetConfig+0x2fe>
 80073d0:	2310      	movs	r3, #16
 80073d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073d6:	e0c8      	b.n	800756a <UART_SetConfig+0x2fe>
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a5e      	ldr	r2, [pc, #376]	@ (8007558 <UART_SetConfig+0x2ec>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d125      	bne.n	800742e <UART_SetConfig+0x1c2>
 80073e2:	4b5b      	ldr	r3, [pc, #364]	@ (8007550 <UART_SetConfig+0x2e4>)
 80073e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80073ec:	2b30      	cmp	r3, #48	@ 0x30
 80073ee:	d016      	beq.n	800741e <UART_SetConfig+0x1b2>
 80073f0:	2b30      	cmp	r3, #48	@ 0x30
 80073f2:	d818      	bhi.n	8007426 <UART_SetConfig+0x1ba>
 80073f4:	2b20      	cmp	r3, #32
 80073f6:	d00a      	beq.n	800740e <UART_SetConfig+0x1a2>
 80073f8:	2b20      	cmp	r3, #32
 80073fa:	d814      	bhi.n	8007426 <UART_SetConfig+0x1ba>
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <UART_SetConfig+0x19a>
 8007400:	2b10      	cmp	r3, #16
 8007402:	d008      	beq.n	8007416 <UART_SetConfig+0x1aa>
 8007404:	e00f      	b.n	8007426 <UART_SetConfig+0x1ba>
 8007406:	2300      	movs	r3, #0
 8007408:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800740c:	e0ad      	b.n	800756a <UART_SetConfig+0x2fe>
 800740e:	2302      	movs	r3, #2
 8007410:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007414:	e0a9      	b.n	800756a <UART_SetConfig+0x2fe>
 8007416:	2304      	movs	r3, #4
 8007418:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800741c:	e0a5      	b.n	800756a <UART_SetConfig+0x2fe>
 800741e:	2308      	movs	r3, #8
 8007420:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007424:	e0a1      	b.n	800756a <UART_SetConfig+0x2fe>
 8007426:	2310      	movs	r3, #16
 8007428:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800742c:	e09d      	b.n	800756a <UART_SetConfig+0x2fe>
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a4a      	ldr	r2, [pc, #296]	@ (800755c <UART_SetConfig+0x2f0>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d125      	bne.n	8007484 <UART_SetConfig+0x218>
 8007438:	4b45      	ldr	r3, [pc, #276]	@ (8007550 <UART_SetConfig+0x2e4>)
 800743a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800743e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007442:	2bc0      	cmp	r3, #192	@ 0xc0
 8007444:	d016      	beq.n	8007474 <UART_SetConfig+0x208>
 8007446:	2bc0      	cmp	r3, #192	@ 0xc0
 8007448:	d818      	bhi.n	800747c <UART_SetConfig+0x210>
 800744a:	2b80      	cmp	r3, #128	@ 0x80
 800744c:	d00a      	beq.n	8007464 <UART_SetConfig+0x1f8>
 800744e:	2b80      	cmp	r3, #128	@ 0x80
 8007450:	d814      	bhi.n	800747c <UART_SetConfig+0x210>
 8007452:	2b00      	cmp	r3, #0
 8007454:	d002      	beq.n	800745c <UART_SetConfig+0x1f0>
 8007456:	2b40      	cmp	r3, #64	@ 0x40
 8007458:	d008      	beq.n	800746c <UART_SetConfig+0x200>
 800745a:	e00f      	b.n	800747c <UART_SetConfig+0x210>
 800745c:	2300      	movs	r3, #0
 800745e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007462:	e082      	b.n	800756a <UART_SetConfig+0x2fe>
 8007464:	2302      	movs	r3, #2
 8007466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800746a:	e07e      	b.n	800756a <UART_SetConfig+0x2fe>
 800746c:	2304      	movs	r3, #4
 800746e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007472:	e07a      	b.n	800756a <UART_SetConfig+0x2fe>
 8007474:	2308      	movs	r3, #8
 8007476:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800747a:	e076      	b.n	800756a <UART_SetConfig+0x2fe>
 800747c:	2310      	movs	r3, #16
 800747e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007482:	e072      	b.n	800756a <UART_SetConfig+0x2fe>
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a35      	ldr	r2, [pc, #212]	@ (8007560 <UART_SetConfig+0x2f4>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d12a      	bne.n	80074e4 <UART_SetConfig+0x278>
 800748e:	4b30      	ldr	r3, [pc, #192]	@ (8007550 <UART_SetConfig+0x2e4>)
 8007490:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007494:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007498:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800749c:	d01a      	beq.n	80074d4 <UART_SetConfig+0x268>
 800749e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074a2:	d81b      	bhi.n	80074dc <UART_SetConfig+0x270>
 80074a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074a8:	d00c      	beq.n	80074c4 <UART_SetConfig+0x258>
 80074aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074ae:	d815      	bhi.n	80074dc <UART_SetConfig+0x270>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d003      	beq.n	80074bc <UART_SetConfig+0x250>
 80074b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074b8:	d008      	beq.n	80074cc <UART_SetConfig+0x260>
 80074ba:	e00f      	b.n	80074dc <UART_SetConfig+0x270>
 80074bc:	2300      	movs	r3, #0
 80074be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074c2:	e052      	b.n	800756a <UART_SetConfig+0x2fe>
 80074c4:	2302      	movs	r3, #2
 80074c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ca:	e04e      	b.n	800756a <UART_SetConfig+0x2fe>
 80074cc:	2304      	movs	r3, #4
 80074ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074d2:	e04a      	b.n	800756a <UART_SetConfig+0x2fe>
 80074d4:	2308      	movs	r3, #8
 80074d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074da:	e046      	b.n	800756a <UART_SetConfig+0x2fe>
 80074dc:	2310      	movs	r3, #16
 80074de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074e2:	e042      	b.n	800756a <UART_SetConfig+0x2fe>
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a17      	ldr	r2, [pc, #92]	@ (8007548 <UART_SetConfig+0x2dc>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d13a      	bne.n	8007564 <UART_SetConfig+0x2f8>
 80074ee:	4b18      	ldr	r3, [pc, #96]	@ (8007550 <UART_SetConfig+0x2e4>)
 80074f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80074f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074fc:	d01a      	beq.n	8007534 <UART_SetConfig+0x2c8>
 80074fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007502:	d81b      	bhi.n	800753c <UART_SetConfig+0x2d0>
 8007504:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007508:	d00c      	beq.n	8007524 <UART_SetConfig+0x2b8>
 800750a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800750e:	d815      	bhi.n	800753c <UART_SetConfig+0x2d0>
 8007510:	2b00      	cmp	r3, #0
 8007512:	d003      	beq.n	800751c <UART_SetConfig+0x2b0>
 8007514:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007518:	d008      	beq.n	800752c <UART_SetConfig+0x2c0>
 800751a:	e00f      	b.n	800753c <UART_SetConfig+0x2d0>
 800751c:	2300      	movs	r3, #0
 800751e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007522:	e022      	b.n	800756a <UART_SetConfig+0x2fe>
 8007524:	2302      	movs	r3, #2
 8007526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800752a:	e01e      	b.n	800756a <UART_SetConfig+0x2fe>
 800752c:	2304      	movs	r3, #4
 800752e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007532:	e01a      	b.n	800756a <UART_SetConfig+0x2fe>
 8007534:	2308      	movs	r3, #8
 8007536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800753a:	e016      	b.n	800756a <UART_SetConfig+0x2fe>
 800753c:	2310      	movs	r3, #16
 800753e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007542:	e012      	b.n	800756a <UART_SetConfig+0x2fe>
 8007544:	cfff69f3 	.word	0xcfff69f3
 8007548:	40008000 	.word	0x40008000
 800754c:	40013800 	.word	0x40013800
 8007550:	40021000 	.word	0x40021000
 8007554:	40004400 	.word	0x40004400
 8007558:	40004800 	.word	0x40004800
 800755c:	40004c00 	.word	0x40004c00
 8007560:	40005000 	.word	0x40005000
 8007564:	2310      	movs	r3, #16
 8007566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4aae      	ldr	r2, [pc, #696]	@ (8007828 <UART_SetConfig+0x5bc>)
 8007570:	4293      	cmp	r3, r2
 8007572:	f040 8097 	bne.w	80076a4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007576:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800757a:	2b08      	cmp	r3, #8
 800757c:	d823      	bhi.n	80075c6 <UART_SetConfig+0x35a>
 800757e:	a201      	add	r2, pc, #4	@ (adr r2, 8007584 <UART_SetConfig+0x318>)
 8007580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007584:	080075a9 	.word	0x080075a9
 8007588:	080075c7 	.word	0x080075c7
 800758c:	080075b1 	.word	0x080075b1
 8007590:	080075c7 	.word	0x080075c7
 8007594:	080075b7 	.word	0x080075b7
 8007598:	080075c7 	.word	0x080075c7
 800759c:	080075c7 	.word	0x080075c7
 80075a0:	080075c7 	.word	0x080075c7
 80075a4:	080075bf 	.word	0x080075bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075a8:	f7fd f970 	bl	800488c <HAL_RCC_GetPCLK1Freq>
 80075ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075ae:	e010      	b.n	80075d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075b0:	4b9e      	ldr	r3, [pc, #632]	@ (800782c <UART_SetConfig+0x5c0>)
 80075b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075b4:	e00d      	b.n	80075d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075b6:	f7fd f8fb 	bl	80047b0 <HAL_RCC_GetSysClockFreq>
 80075ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075bc:	e009      	b.n	80075d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075c4:	e005      	b.n	80075d2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80075d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80075d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 8130 	beq.w	800783a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075de:	4a94      	ldr	r2, [pc, #592]	@ (8007830 <UART_SetConfig+0x5c4>)
 80075e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075e4:	461a      	mov	r2, r3
 80075e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80075ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	685a      	ldr	r2, [r3, #4]
 80075f2:	4613      	mov	r3, r2
 80075f4:	005b      	lsls	r3, r3, #1
 80075f6:	4413      	add	r3, r2
 80075f8:	69ba      	ldr	r2, [r7, #24]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d305      	bcc.n	800760a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	429a      	cmp	r2, r3
 8007608:	d903      	bls.n	8007612 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007610:	e113      	b.n	800783a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007614:	2200      	movs	r2, #0
 8007616:	60bb      	str	r3, [r7, #8]
 8007618:	60fa      	str	r2, [r7, #12]
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800761e:	4a84      	ldr	r2, [pc, #528]	@ (8007830 <UART_SetConfig+0x5c4>)
 8007620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007624:	b29b      	uxth	r3, r3
 8007626:	2200      	movs	r2, #0
 8007628:	603b      	str	r3, [r7, #0]
 800762a:	607a      	str	r2, [r7, #4]
 800762c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007630:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007634:	f7f9 fafa 	bl	8000c2c <__aeabi_uldivmod>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	4610      	mov	r0, r2
 800763e:	4619      	mov	r1, r3
 8007640:	f04f 0200 	mov.w	r2, #0
 8007644:	f04f 0300 	mov.w	r3, #0
 8007648:	020b      	lsls	r3, r1, #8
 800764a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800764e:	0202      	lsls	r2, r0, #8
 8007650:	6979      	ldr	r1, [r7, #20]
 8007652:	6849      	ldr	r1, [r1, #4]
 8007654:	0849      	lsrs	r1, r1, #1
 8007656:	2000      	movs	r0, #0
 8007658:	460c      	mov	r4, r1
 800765a:	4605      	mov	r5, r0
 800765c:	eb12 0804 	adds.w	r8, r2, r4
 8007660:	eb43 0905 	adc.w	r9, r3, r5
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	469a      	mov	sl, r3
 800766c:	4693      	mov	fp, r2
 800766e:	4652      	mov	r2, sl
 8007670:	465b      	mov	r3, fp
 8007672:	4640      	mov	r0, r8
 8007674:	4649      	mov	r1, r9
 8007676:	f7f9 fad9 	bl	8000c2c <__aeabi_uldivmod>
 800767a:	4602      	mov	r2, r0
 800767c:	460b      	mov	r3, r1
 800767e:	4613      	mov	r3, r2
 8007680:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007688:	d308      	bcc.n	800769c <UART_SetConfig+0x430>
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007690:	d204      	bcs.n	800769c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	6a3a      	ldr	r2, [r7, #32]
 8007698:	60da      	str	r2, [r3, #12]
 800769a:	e0ce      	b.n	800783a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80076a2:	e0ca      	b.n	800783a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	69db      	ldr	r3, [r3, #28]
 80076a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076ac:	d166      	bne.n	800777c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80076ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80076b2:	2b08      	cmp	r3, #8
 80076b4:	d827      	bhi.n	8007706 <UART_SetConfig+0x49a>
 80076b6:	a201      	add	r2, pc, #4	@ (adr r2, 80076bc <UART_SetConfig+0x450>)
 80076b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076bc:	080076e1 	.word	0x080076e1
 80076c0:	080076e9 	.word	0x080076e9
 80076c4:	080076f1 	.word	0x080076f1
 80076c8:	08007707 	.word	0x08007707
 80076cc:	080076f7 	.word	0x080076f7
 80076d0:	08007707 	.word	0x08007707
 80076d4:	08007707 	.word	0x08007707
 80076d8:	08007707 	.word	0x08007707
 80076dc:	080076ff 	.word	0x080076ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076e0:	f7fd f8d4 	bl	800488c <HAL_RCC_GetPCLK1Freq>
 80076e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076e6:	e014      	b.n	8007712 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076e8:	f7fd f8e6 	bl	80048b8 <HAL_RCC_GetPCLK2Freq>
 80076ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076ee:	e010      	b.n	8007712 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076f0:	4b4e      	ldr	r3, [pc, #312]	@ (800782c <UART_SetConfig+0x5c0>)
 80076f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076f4:	e00d      	b.n	8007712 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076f6:	f7fd f85b 	bl	80047b0 <HAL_RCC_GetSysClockFreq>
 80076fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076fc:	e009      	b.n	8007712 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007702:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007704:	e005      	b.n	8007712 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007706:	2300      	movs	r3, #0
 8007708:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007710:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 8090 	beq.w	800783a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800771e:	4a44      	ldr	r2, [pc, #272]	@ (8007830 <UART_SetConfig+0x5c4>)
 8007720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007724:	461a      	mov	r2, r3
 8007726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007728:	fbb3 f3f2 	udiv	r3, r3, r2
 800772c:	005a      	lsls	r2, r3, #1
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	085b      	lsrs	r3, r3, #1
 8007734:	441a      	add	r2, r3
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	fbb2 f3f3 	udiv	r3, r2, r3
 800773e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	2b0f      	cmp	r3, #15
 8007744:	d916      	bls.n	8007774 <UART_SetConfig+0x508>
 8007746:	6a3b      	ldr	r3, [r7, #32]
 8007748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800774c:	d212      	bcs.n	8007774 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	b29b      	uxth	r3, r3
 8007752:	f023 030f 	bic.w	r3, r3, #15
 8007756:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	085b      	lsrs	r3, r3, #1
 800775c:	b29b      	uxth	r3, r3
 800775e:	f003 0307 	and.w	r3, r3, #7
 8007762:	b29a      	uxth	r2, r3
 8007764:	8bfb      	ldrh	r3, [r7, #30]
 8007766:	4313      	orrs	r3, r2
 8007768:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	8bfa      	ldrh	r2, [r7, #30]
 8007770:	60da      	str	r2, [r3, #12]
 8007772:	e062      	b.n	800783a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800777a:	e05e      	b.n	800783a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800777c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007780:	2b08      	cmp	r3, #8
 8007782:	d828      	bhi.n	80077d6 <UART_SetConfig+0x56a>
 8007784:	a201      	add	r2, pc, #4	@ (adr r2, 800778c <UART_SetConfig+0x520>)
 8007786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778a:	bf00      	nop
 800778c:	080077b1 	.word	0x080077b1
 8007790:	080077b9 	.word	0x080077b9
 8007794:	080077c1 	.word	0x080077c1
 8007798:	080077d7 	.word	0x080077d7
 800779c:	080077c7 	.word	0x080077c7
 80077a0:	080077d7 	.word	0x080077d7
 80077a4:	080077d7 	.word	0x080077d7
 80077a8:	080077d7 	.word	0x080077d7
 80077ac:	080077cf 	.word	0x080077cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077b0:	f7fd f86c 	bl	800488c <HAL_RCC_GetPCLK1Freq>
 80077b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077b6:	e014      	b.n	80077e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077b8:	f7fd f87e 	bl	80048b8 <HAL_RCC_GetPCLK2Freq>
 80077bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077be:	e010      	b.n	80077e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077c0:	4b1a      	ldr	r3, [pc, #104]	@ (800782c <UART_SetConfig+0x5c0>)
 80077c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077c4:	e00d      	b.n	80077e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077c6:	f7fc fff3 	bl	80047b0 <HAL_RCC_GetSysClockFreq>
 80077ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077cc:	e009      	b.n	80077e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077d4:	e005      	b.n	80077e2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80077e0:	bf00      	nop
    }

    if (pclk != 0U)
 80077e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d028      	beq.n	800783a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ec:	4a10      	ldr	r2, [pc, #64]	@ (8007830 <UART_SetConfig+0x5c4>)
 80077ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077f2:	461a      	mov	r2, r3
 80077f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	085b      	lsrs	r3, r3, #1
 8007800:	441a      	add	r2, r3
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	fbb2 f3f3 	udiv	r3, r2, r3
 800780a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800780c:	6a3b      	ldr	r3, [r7, #32]
 800780e:	2b0f      	cmp	r3, #15
 8007810:	d910      	bls.n	8007834 <UART_SetConfig+0x5c8>
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007818:	d20c      	bcs.n	8007834 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800781a:	6a3b      	ldr	r3, [r7, #32]
 800781c:	b29a      	uxth	r2, r3
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	60da      	str	r2, [r3, #12]
 8007824:	e009      	b.n	800783a <UART_SetConfig+0x5ce>
 8007826:	bf00      	nop
 8007828:	40008000 	.word	0x40008000
 800782c:	00f42400 	.word	0x00f42400
 8007830:	0800b8a4 	.word	0x0800b8a4
      }
      else
      {
        ret = HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	2201      	movs	r2, #1
 800783e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2201      	movs	r2, #1
 8007846:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2200      	movs	r2, #0
 800784e:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	2200      	movs	r2, #0
 8007854:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 8007856:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800785a:	4618      	mov	r0, r3
 800785c:	3730      	adds	r7, #48	@ 0x30
 800785e:	46bd      	mov	sp, r7
 8007860:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00a      	beq.n	800788e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	430a      	orrs	r2, r1
 800788c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00a      	beq.n	80078b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	430a      	orrs	r2, r1
 80078ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b4:	f003 0304 	and.w	r3, r3, #4
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00a      	beq.n	80078d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	430a      	orrs	r2, r1
 80078d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d6:	f003 0308 	and.w	r3, r3, #8
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00a      	beq.n	80078f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	430a      	orrs	r2, r1
 80078f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f8:	f003 0310 	and.w	r3, r3, #16
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00a      	beq.n	8007916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	430a      	orrs	r2, r1
 8007914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800791a:	f003 0320 	and.w	r3, r3, #32
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00a      	beq.n	8007938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	430a      	orrs	r2, r1
 8007936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800793c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007940:	2b00      	cmp	r3, #0
 8007942:	d01a      	beq.n	800797a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	430a      	orrs	r2, r1
 8007958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800795e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007962:	d10a      	bne.n	800797a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	430a      	orrs	r2, r1
 8007978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800797e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00a      	beq.n	800799c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	430a      	orrs	r2, r1
 800799a:	605a      	str	r2, [r3, #4]
  }
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af02      	add	r7, sp, #8
 80079ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079b8:	f7fa fd5c 	bl	8002474 <HAL_GetTick>
 80079bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0308 	and.w	r3, r3, #8
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d10e      	bne.n	80079ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f82f 	bl	8007a3e <UART_WaitOnFlagUntilTimeout>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e025      	b.n	8007a36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 0304 	and.w	r3, r3, #4
 80079f4:	2b04      	cmp	r3, #4
 80079f6:	d10e      	bne.n	8007a16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f819 	bl	8007a3e <UART_WaitOnFlagUntilTimeout>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e00f      	b.n	8007a36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2220      	movs	r2, #32
 8007a22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b09c      	sub	sp, #112	@ 0x70
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	60f8      	str	r0, [r7, #12]
 8007a46:	60b9      	str	r1, [r7, #8]
 8007a48:	603b      	str	r3, [r7, #0]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a4e:	e0a9      	b.n	8007ba4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a56:	f000 80a5 	beq.w	8007ba4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a5a:	f7fa fd0b 	bl	8002474 <HAL_GetTick>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d302      	bcc.n	8007a70 <UART_WaitOnFlagUntilTimeout+0x32>
 8007a6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d140      	bne.n	8007af2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a78:	e853 3f00 	ldrex	r3, [r3]
 8007a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a80:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007a84:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a90:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a92:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007a94:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007a96:	e841 2300 	strex	r3, r2, [r1]
 8007a9a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007a9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1e6      	bne.n	8007a70 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aac:	e853 3f00 	ldrex	r3, [r3]
 8007ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab4:	f023 0301 	bic.w	r3, r3, #1
 8007ab8:	663b      	str	r3, [r7, #96]	@ 0x60
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3308      	adds	r3, #8
 8007ac0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007ac2:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007ac4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007ac8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007aca:	e841 2300 	strex	r3, r2, [r1]
 8007ace:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007ad0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1e5      	bne.n	8007aa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e069      	b.n	8007bc6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0304 	and.w	r3, r3, #4
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d051      	beq.n	8007ba4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	69db      	ldr	r3, [r3, #28]
 8007b06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b0e:	d149      	bne.n	8007ba4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b22:	e853 3f00 	ldrex	r3, [r3]
 8007b26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007b2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	461a      	mov	r2, r3
 8007b36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007b38:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b3a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007b3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b40:	e841 2300 	strex	r3, r2, [r1]
 8007b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1e6      	bne.n	8007b1a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	3308      	adds	r3, #8
 8007b52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	e853 3f00 	ldrex	r3, [r3]
 8007b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	f023 0301 	bic.w	r3, r3, #1
 8007b62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	3308      	adds	r3, #8
 8007b6a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007b6c:	623a      	str	r2, [r7, #32]
 8007b6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b70:	69f9      	ldr	r1, [r7, #28]
 8007b72:	6a3a      	ldr	r2, [r7, #32]
 8007b74:	e841 2300 	strex	r3, r2, [r1]
 8007b78:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1e5      	bne.n	8007b4c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2220      	movs	r2, #32
 8007b84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2220      	movs	r2, #32
 8007b94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e010      	b.n	8007bc6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	69da      	ldr	r2, [r3, #28]
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	4013      	ands	r3, r2
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	bf0c      	ite	eq
 8007bb4:	2301      	moveq	r3, #1
 8007bb6:	2300      	movne	r3, #0
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	461a      	mov	r2, r3
 8007bbc:	79fb      	ldrb	r3, [r7, #7]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	f43f af46 	beq.w	8007a50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3770      	adds	r7, #112	@ 0x70
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
	...

08007bd0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b0a3      	sub	sp, #140	@ 0x8c
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	88fa      	ldrh	r2, [r7, #6]
 8007be8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	88fa      	ldrh	r2, [r7, #6]
 8007bf0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c02:	d10e      	bne.n	8007c22 <UART_Start_Receive_IT+0x52>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d105      	bne.n	8007c18 <UART_Start_Receive_IT+0x48>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007c12:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c16:	e02d      	b.n	8007c74 <UART_Start_Receive_IT+0xa4>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	22ff      	movs	r2, #255	@ 0xff
 8007c1c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c20:	e028      	b.n	8007c74 <UART_Start_Receive_IT+0xa4>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10d      	bne.n	8007c46 <UART_Start_Receive_IT+0x76>
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d104      	bne.n	8007c3c <UART_Start_Receive_IT+0x6c>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	22ff      	movs	r2, #255	@ 0xff
 8007c36:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c3a:	e01b      	b.n	8007c74 <UART_Start_Receive_IT+0xa4>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	227f      	movs	r2, #127	@ 0x7f
 8007c40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c44:	e016      	b.n	8007c74 <UART_Start_Receive_IT+0xa4>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c4e:	d10d      	bne.n	8007c6c <UART_Start_Receive_IT+0x9c>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d104      	bne.n	8007c62 <UART_Start_Receive_IT+0x92>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	227f      	movs	r2, #127	@ 0x7f
 8007c5c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c60:	e008      	b.n	8007c74 <UART_Start_Receive_IT+0xa4>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	223f      	movs	r2, #63	@ 0x3f
 8007c66:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c6a:	e003      	b.n	8007c74 <UART_Start_Receive_IT+0xa4>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2222      	movs	r2, #34	@ 0x22
 8007c80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	3308      	adds	r3, #8
 8007c8a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c8e:	e853 3f00 	ldrex	r3, [r3]
 8007c92:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007c94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c96:	f043 0301 	orr.w	r3, r3, #1
 8007c9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3308      	adds	r3, #8
 8007ca4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007ca8:	673a      	str	r2, [r7, #112]	@ 0x70
 8007caa:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007cae:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007cb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e3      	bne.n	8007c84 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cc4:	d153      	bne.n	8007d6e <UART_Start_Receive_IT+0x19e>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007ccc:	88fa      	ldrh	r2, [r7, #6]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d34d      	bcc.n	8007d6e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cda:	d107      	bne.n	8007cec <UART_Start_Receive_IT+0x11c>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d103      	bne.n	8007cec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4a4b      	ldr	r2, [pc, #300]	@ (8007e14 <UART_Start_Receive_IT+0x244>)
 8007ce8:	671a      	str	r2, [r3, #112]	@ 0x70
 8007cea:	e002      	b.n	8007cf2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4a4a      	ldr	r2, [pc, #296]	@ (8007e18 <UART_Start_Receive_IT+0x248>)
 8007cf0:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d01a      	beq.n	8007d38 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d0a:	e853 3f00 	ldrex	r3, [r3]
 8007d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007d10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d16:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	461a      	mov	r2, r3
 8007d20:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007d24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d26:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d28:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007d2a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007d2c:	e841 2300 	strex	r3, r2, [r1]
 8007d30:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1e4      	bne.n	8007d02 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3308      	adds	r3, #8
 8007d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d42:	e853 3f00 	ldrex	r3, [r3]
 8007d46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	3308      	adds	r3, #8
 8007d56:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007d58:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007d5a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007d5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d60:	e841 2300 	strex	r3, r2, [r1]
 8007d64:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007d66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1e5      	bne.n	8007d38 <UART_Start_Receive_IT+0x168>
 8007d6c:	e04a      	b.n	8007e04 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d76:	d107      	bne.n	8007d88 <UART_Start_Receive_IT+0x1b8>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d103      	bne.n	8007d88 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	4a26      	ldr	r2, [pc, #152]	@ (8007e1c <UART_Start_Receive_IT+0x24c>)
 8007d84:	671a      	str	r2, [r3, #112]	@ 0x70
 8007d86:	e002      	b.n	8007d8e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	4a25      	ldr	r2, [pc, #148]	@ (8007e20 <UART_Start_Receive_IT+0x250>)
 8007d8c:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d019      	beq.n	8007dd2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da6:	e853 3f00 	ldrex	r3, [r3]
 8007daa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dae:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007db2:	677b      	str	r3, [r7, #116]	@ 0x74
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	461a      	mov	r2, r3
 8007dba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dbe:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007dc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007dc4:	e841 2300 	strex	r3, r2, [r1]
 8007dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1e6      	bne.n	8007d9e <UART_Start_Receive_IT+0x1ce>
 8007dd0:	e018      	b.n	8007e04 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	e853 3f00 	ldrex	r3, [r3]
 8007dde:	613b      	str	r3, [r7, #16]
   return(result);
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	f043 0320 	orr.w	r3, r3, #32
 8007de6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	461a      	mov	r2, r3
 8007dee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007df0:	623b      	str	r3, [r7, #32]
 8007df2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df4:	69f9      	ldr	r1, [r7, #28]
 8007df6:	6a3a      	ldr	r2, [r7, #32]
 8007df8:	e841 2300 	strex	r3, r2, [r1]
 8007dfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1e6      	bne.n	8007dd2 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	378c      	adds	r7, #140	@ 0x8c
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	0800852d 	.word	0x0800852d
 8007e18:	08008235 	.word	0x08008235
 8007e1c:	080080d3 	.word	0x080080d3
 8007e20:	08007f73 	.word	0x08007f73

08007e24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b095      	sub	sp, #84	@ 0x54
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e34:	e853 3f00 	ldrex	r3, [r3]
 8007e38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	461a      	mov	r2, r3
 8007e48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e52:	e841 2300 	strex	r3, r2, [r1]
 8007e56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1e6      	bne.n	8007e2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3308      	adds	r3, #8
 8007e64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	e853 3f00 	ldrex	r3, [r3]
 8007e6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e74:	f023 0301 	bic.w	r3, r3, #1
 8007e78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3308      	adds	r3, #8
 8007e80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e8a:	e841 2300 	strex	r3, r2, [r1]
 8007e8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1e3      	bne.n	8007e5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d118      	bne.n	8007ed0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	e853 3f00 	ldrex	r3, [r3]
 8007eaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f023 0310 	bic.w	r3, r3, #16
 8007eb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ebc:	61bb      	str	r3, [r7, #24]
 8007ebe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec0:	6979      	ldr	r1, [r7, #20]
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	e841 2300 	strex	r3, r2, [r1]
 8007ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1e6      	bne.n	8007e9e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2220      	movs	r2, #32
 8007ed4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8007ee4:	bf00      	nop
 8007ee6:	3754      	adds	r7, #84	@ 0x54
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007efc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f7ff f996 	bl	8007240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f14:	bf00      	nop
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b088      	sub	sp, #32
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	e853 3f00 	ldrex	r3, [r3]
 8007f30:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f38:	61fb      	str	r3, [r7, #28]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	61bb      	str	r3, [r7, #24]
 8007f44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f46:	6979      	ldr	r1, [r7, #20]
 8007f48:	69ba      	ldr	r2, [r7, #24]
 8007f4a:	e841 2300 	strex	r3, r2, [r1]
 8007f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1e6      	bne.n	8007f24 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7ff f961 	bl	800722c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f6a:	bf00      	nop
 8007f6c:	3720      	adds	r7, #32
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b096      	sub	sp, #88	@ 0x58
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007f80:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f8a:	2b22      	cmp	r3, #34	@ 0x22
 8007f8c:	f040 8095 	bne.w	80080ba <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f96:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f9a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8007f9e:	b2d9      	uxtb	r1, r3
 8007fa0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007faa:	400a      	ands	r2, r1
 8007fac:	b2d2      	uxtb	r2, r2
 8007fae:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d178      	bne.n	80080ca <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fe0:	e853 3f00 	ldrex	r3, [r3]
 8007fe4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fe8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fec:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ff6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ff8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ffc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ffe:	e841 2300 	strex	r3, r2, [r1]
 8008002:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1e6      	bne.n	8007fd8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	3308      	adds	r3, #8
 8008010:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008014:	e853 3f00 	ldrex	r3, [r3]
 8008018:	623b      	str	r3, [r7, #32]
   return(result);
 800801a:	6a3b      	ldr	r3, [r7, #32]
 800801c:	f023 0301 	bic.w	r3, r3, #1
 8008020:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3308      	adds	r3, #8
 8008028:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800802a:	633a      	str	r2, [r7, #48]	@ 0x30
 800802c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008030:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008032:	e841 2300 	strex	r3, r2, [r1]
 8008036:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e5      	bne.n	800800a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2220      	movs	r2, #32
 8008042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008050:	2b01      	cmp	r3, #1
 8008052:	d12e      	bne.n	80080b2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	e853 3f00 	ldrex	r3, [r3]
 8008066:	60fb      	str	r3, [r7, #12]
   return(result);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f023 0310 	bic.w	r3, r3, #16
 800806e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008078:	61fb      	str	r3, [r7, #28]
 800807a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807c:	69b9      	ldr	r1, [r7, #24]
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	e841 2300 	strex	r3, r2, [r1]
 8008084:	617b      	str	r3, [r7, #20]
   return(result);
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e6      	bne.n	800805a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	f003 0310 	and.w	r3, r3, #16
 8008096:	2b10      	cmp	r3, #16
 8008098:	d103      	bne.n	80080a2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2210      	movs	r2, #16
 80080a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7ff f8d2 	bl	8007254 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080b0:	e00b      	b.n	80080ca <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7fa f974 	bl	80023a0 <HAL_UART_RxCpltCallback>
}
 80080b8:	e007      	b.n	80080ca <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	699a      	ldr	r2, [r3, #24]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f042 0208 	orr.w	r2, r2, #8
 80080c8:	619a      	str	r2, [r3, #24]
}
 80080ca:	bf00      	nop
 80080cc:	3758      	adds	r7, #88	@ 0x58
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b096      	sub	sp, #88	@ 0x58
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80080e0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080ea:	2b22      	cmp	r3, #34	@ 0x22
 80080ec:	f040 8095 	bne.w	800821a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f6:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080fe:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008100:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8008104:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008108:	4013      	ands	r3, r2
 800810a:	b29a      	uxth	r2, r3
 800810c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800810e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008114:	1c9a      	adds	r2, r3, #2
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008120:	b29b      	uxth	r3, r3
 8008122:	3b01      	subs	r3, #1
 8008124:	b29a      	uxth	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008132:	b29b      	uxth	r3, r3
 8008134:	2b00      	cmp	r3, #0
 8008136:	d178      	bne.n	800822a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008140:	e853 3f00 	ldrex	r3, [r3]
 8008144:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008148:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800814c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008156:	643b      	str	r3, [r7, #64]	@ 0x40
 8008158:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800815c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800815e:	e841 2300 	strex	r3, r2, [r1]
 8008162:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1e6      	bne.n	8008138 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3308      	adds	r3, #8
 8008170:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	e853 3f00 	ldrex	r3, [r3]
 8008178:	61fb      	str	r3, [r7, #28]
   return(result);
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	f023 0301 	bic.w	r3, r3, #1
 8008180:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3308      	adds	r3, #8
 8008188:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800818a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800818c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008192:	e841 2300 	strex	r3, r2, [r1]
 8008196:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1e5      	bne.n	800816a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d12e      	bne.n	8008212 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	e853 3f00 	ldrex	r3, [r3]
 80081c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	f023 0310 	bic.w	r3, r3, #16
 80081ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	461a      	mov	r2, r3
 80081d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081d8:	61bb      	str	r3, [r7, #24]
 80081da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081dc:	6979      	ldr	r1, [r7, #20]
 80081de:	69ba      	ldr	r2, [r7, #24]
 80081e0:	e841 2300 	strex	r3, r2, [r1]
 80081e4:	613b      	str	r3, [r7, #16]
   return(result);
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1e6      	bne.n	80081ba <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	69db      	ldr	r3, [r3, #28]
 80081f2:	f003 0310 	and.w	r3, r3, #16
 80081f6:	2b10      	cmp	r3, #16
 80081f8:	d103      	bne.n	8008202 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2210      	movs	r2, #16
 8008200:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008208:	4619      	mov	r1, r3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7ff f822 	bl	8007254 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008210:	e00b      	b.n	800822a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7fa f8c4 	bl	80023a0 <HAL_UART_RxCpltCallback>
}
 8008218:	e007      	b.n	800822a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	699a      	ldr	r2, [r3, #24]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f042 0208 	orr.w	r2, r2, #8
 8008228:	619a      	str	r2, [r3, #24]
}
 800822a:	bf00      	nop
 800822c:	3758      	adds	r7, #88	@ 0x58
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
	...

08008234 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b0a6      	sub	sp, #152	@ 0x98
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008242:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800826a:	2b22      	cmp	r3, #34	@ 0x22
 800826c:	f040 814f 	bne.w	800850e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008276:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800827a:	e0f6      	b.n	800846a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008282:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008286:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800828a:	b2d9      	uxtb	r1, r3
 800828c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8008290:	b2da      	uxtb	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008296:	400a      	ands	r2, r1
 8008298:	b2d2      	uxtb	r2, r2
 800829a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082a0:	1c5a      	adds	r2, r3, #1
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	3b01      	subs	r3, #1
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80082c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80082c6:	f003 0307 	and.w	r3, r3, #7
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d053      	beq.n	8008376 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d011      	beq.n	80082fe <UART_RxISR_8BIT_FIFOEN+0xca>
 80082da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00b      	beq.n	80082fe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2201      	movs	r2, #1
 80082ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082f4:	f043 0201 	orr.w	r2, r3, #1
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008302:	f003 0302 	and.w	r3, r3, #2
 8008306:	2b00      	cmp	r3, #0
 8008308:	d011      	beq.n	800832e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800830a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00b      	beq.n	800832e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2202      	movs	r2, #2
 800831c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008324:	f043 0204 	orr.w	r2, r3, #4
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800832e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008332:	f003 0304 	and.w	r3, r3, #4
 8008336:	2b00      	cmp	r3, #0
 8008338:	d011      	beq.n	800835e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800833a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00b      	beq.n	800835e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2204      	movs	r2, #4
 800834c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008354:	f043 0202 	orr.w	r2, r3, #2
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008364:	2b00      	cmp	r3, #0
 8008366:	d006      	beq.n	8008376 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7fe ff69 	bl	8007240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800837c:	b29b      	uxth	r3, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d173      	bne.n	800846a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008388:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800838a:	e853 3f00 	ldrex	r3, [r3]
 800838e:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008390:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008392:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008396:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	461a      	mov	r2, r3
 80083a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80083a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083a6:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80083aa:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80083ac:	e841 2300 	strex	r3, r2, [r1]
 80083b0:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80083b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1e4      	bne.n	8008382 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3308      	adds	r3, #8
 80083be:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083c2:	e853 3f00 	ldrex	r3, [r3]
 80083c6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80083c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80083ce:	f023 0301 	bic.w	r3, r3, #1
 80083d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3308      	adds	r3, #8
 80083da:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80083dc:	657a      	str	r2, [r7, #84]	@ 0x54
 80083de:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80083e2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80083e4:	e841 2300 	strex	r3, r2, [r1]
 80083e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80083ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1e3      	bne.n	80083b8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2220      	movs	r2, #32
 80083f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2200      	movs	r2, #0
 80083fc:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008402:	2b01      	cmp	r3, #1
 8008404:	d12e      	bne.n	8008464 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008414:	e853 3f00 	ldrex	r3, [r3]
 8008418:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800841a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841c:	f023 0310 	bic.w	r3, r3, #16
 8008420:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800842a:	643b      	str	r3, [r7, #64]	@ 0x40
 800842c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008430:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008432:	e841 2300 	strex	r3, r2, [r1]
 8008436:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1e6      	bne.n	800840c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	69db      	ldr	r3, [r3, #28]
 8008444:	f003 0310 	and.w	r3, r3, #16
 8008448:	2b10      	cmp	r3, #16
 800844a:	d103      	bne.n	8008454 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2210      	movs	r2, #16
 8008452:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800845a:	4619      	mov	r1, r3
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f7fe fef9 	bl	8007254 <HAL_UARTEx_RxEventCallback>
 8008462:	e002      	b.n	800846a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7f9 ff9b 	bl	80023a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800846a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800846e:	2b00      	cmp	r3, #0
 8008470:	d006      	beq.n	8008480 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008472:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008476:	f003 0320 	and.w	r3, r3, #32
 800847a:	2b00      	cmp	r3, #0
 800847c:	f47f aefe 	bne.w	800827c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008486:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800848a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800848e:	2b00      	cmp	r3, #0
 8008490:	d045      	beq.n	800851e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008498:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800849c:	429a      	cmp	r2, r3
 800849e:	d23e      	bcs.n	800851e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3308      	adds	r3, #8
 80084a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a8:	6a3b      	ldr	r3, [r7, #32]
 80084aa:	e853 3f00 	ldrex	r3, [r3]
 80084ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3308      	adds	r3, #8
 80084be:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80084c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80084c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084c8:	e841 2300 	strex	r3, r2, [r1]
 80084cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d1e5      	bne.n	80084a0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a14      	ldr	r2, [pc, #80]	@ (8008528 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80084d8:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	e853 3f00 	ldrex	r3, [r3]
 80084e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	f043 0320 	orr.w	r3, r3, #32
 80084ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	461a      	mov	r2, r3
 80084f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084f8:	61bb      	str	r3, [r7, #24]
 80084fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	6979      	ldr	r1, [r7, #20]
 80084fe:	69ba      	ldr	r2, [r7, #24]
 8008500:	e841 2300 	strex	r3, r2, [r1]
 8008504:	613b      	str	r3, [r7, #16]
   return(result);
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e6      	bne.n	80084da <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800850c:	e007      	b.n	800851e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	699a      	ldr	r2, [r3, #24]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f042 0208 	orr.w	r2, r2, #8
 800851c:	619a      	str	r2, [r3, #24]
}
 800851e:	bf00      	nop
 8008520:	3798      	adds	r7, #152	@ 0x98
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	08007f73 	.word	0x08007f73

0800852c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b0a8      	sub	sp, #160	@ 0xa0
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800853a:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	69db      	ldr	r3, [r3, #28]
 8008544:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008562:	2b22      	cmp	r3, #34	@ 0x22
 8008564:	f040 8153 	bne.w	800880e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800856e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008572:	e0fa      	b.n	800876a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800857a:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008582:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8008586:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 800858a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800858e:	4013      	ands	r3, r2
 8008590:	b29a      	uxth	r2, r3
 8008592:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008596:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800859c:	1c9a      	adds	r2, r3, #2
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	3b01      	subs	r3, #1
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80085be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80085c2:	f003 0307 	and.w	r3, r3, #7
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d053      	beq.n	8008672 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d011      	beq.n	80085fa <UART_RxISR_16BIT_FIFOEN+0xce>
 80085d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80085da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00b      	beq.n	80085fa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2201      	movs	r2, #1
 80085e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085f0:	f043 0201 	orr.w	r2, r3, #1
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80085fe:	f003 0302 	and.w	r3, r3, #2
 8008602:	2b00      	cmp	r3, #0
 8008604:	d011      	beq.n	800862a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008606:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800860a:	f003 0301 	and.w	r3, r3, #1
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00b      	beq.n	800862a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2202      	movs	r2, #2
 8008618:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008620:	f043 0204 	orr.w	r2, r3, #4
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800862a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800862e:	f003 0304 	and.w	r3, r3, #4
 8008632:	2b00      	cmp	r3, #0
 8008634:	d011      	beq.n	800865a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008636:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00b      	beq.n	800865a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2204      	movs	r2, #4
 8008648:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008650:	f043 0202 	orr.w	r2, r3, #2
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008660:	2b00      	cmp	r3, #0
 8008662:	d006      	beq.n	8008672 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f7fe fdeb 	bl	8007240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008678:	b29b      	uxth	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d175      	bne.n	800876a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008684:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008686:	e853 3f00 	ldrex	r3, [r3]
 800868a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800868c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800868e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008692:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	461a      	mov	r2, r3
 800869c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80086a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80086a2:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80086a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80086a8:	e841 2300 	strex	r3, r2, [r1]
 80086ac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80086ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1e4      	bne.n	800867e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3308      	adds	r3, #8
 80086ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086be:	e853 3f00 	ldrex	r3, [r3]
 80086c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80086c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80086ca:	f023 0301 	bic.w	r3, r3, #1
 80086ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3308      	adds	r3, #8
 80086d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80086dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80086de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80086e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80086e4:	e841 2300 	strex	r3, r2, [r1]
 80086e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80086ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1e1      	bne.n	80086b4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2220      	movs	r2, #32
 80086f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008702:	2b01      	cmp	r3, #1
 8008704:	d12e      	bne.n	8008764 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008714:	e853 3f00 	ldrex	r3, [r3]
 8008718:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800871a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800871c:	f023 0310 	bic.w	r3, r3, #16
 8008720:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	461a      	mov	r2, r3
 8008728:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800872a:	647b      	str	r3, [r7, #68]	@ 0x44
 800872c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008730:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008732:	e841 2300 	strex	r3, r2, [r1]
 8008736:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1e6      	bne.n	800870c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	69db      	ldr	r3, [r3, #28]
 8008744:	f003 0310 	and.w	r3, r3, #16
 8008748:	2b10      	cmp	r3, #16
 800874a:	d103      	bne.n	8008754 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2210      	movs	r2, #16
 8008752:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800875a:	4619      	mov	r1, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7fe fd79 	bl	8007254 <HAL_UARTEx_RxEventCallback>
 8008762:	e002      	b.n	800876a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7f9 fe1b 	bl	80023a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800876a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800876e:	2b00      	cmp	r3, #0
 8008770:	d006      	beq.n	8008780 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008772:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008776:	f003 0320 	and.w	r3, r3, #32
 800877a:	2b00      	cmp	r3, #0
 800877c:	f47f aefa 	bne.w	8008574 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008786:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800878a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800878e:	2b00      	cmp	r3, #0
 8008790:	d045      	beq.n	800881e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008798:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 800879c:	429a      	cmp	r2, r3
 800879e:	d23e      	bcs.n	800881e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	3308      	adds	r3, #8
 80087a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087aa:	e853 3f00 	ldrex	r3, [r3]
 80087ae:	623b      	str	r3, [r7, #32]
   return(result);
 80087b0:	6a3b      	ldr	r3, [r7, #32]
 80087b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	3308      	adds	r3, #8
 80087be:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80087c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80087c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087c8:	e841 2300 	strex	r3, r2, [r1]
 80087cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1e5      	bne.n	80087a0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a14      	ldr	r2, [pc, #80]	@ (8008828 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80087d8:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	e853 3f00 	ldrex	r3, [r3]
 80087e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f043 0320 	orr.w	r3, r3, #32
 80087ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	461a      	mov	r2, r3
 80087f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087f8:	61fb      	str	r3, [r7, #28]
 80087fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fc:	69b9      	ldr	r1, [r7, #24]
 80087fe:	69fa      	ldr	r2, [r7, #28]
 8008800:	e841 2300 	strex	r3, r2, [r1]
 8008804:	617b      	str	r3, [r7, #20]
   return(result);
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1e6      	bne.n	80087da <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800880c:	e007      	b.n	800881e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	699a      	ldr	r2, [r3, #24]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f042 0208 	orr.w	r2, r2, #8
 800881c:	619a      	str	r2, [r3, #24]
}
 800881e:	bf00      	nop
 8008820:	37a0      	adds	r7, #160	@ 0xa0
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	080080d3 	.word	0x080080d3

0800882c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008876:	2b01      	cmp	r3, #1
 8008878:	d101      	bne.n	800887e <HAL_UARTEx_DisableFifoMode+0x16>
 800887a:	2302      	movs	r3, #2
 800887c:	e027      	b.n	80088ce <HAL_UARTEx_DisableFifoMode+0x66>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2224      	movs	r2, #36	@ 0x24
 800888a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f022 0201 	bic.w	r2, r2, #1
 80088a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80088ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2220      	movs	r2, #32
 80088c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d101      	bne.n	80088f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80088ee:	2302      	movs	r3, #2
 80088f0:	e02d      	b.n	800894e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2224      	movs	r2, #36	@ 0x24
 80088fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f022 0201 	bic.w	r2, r2, #1
 8008918:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	683a      	ldr	r2, [r7, #0]
 800892a:	430a      	orrs	r2, r1
 800892c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f850 	bl	80089d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2220      	movs	r2, #32
 8008940:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
 800895e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008966:	2b01      	cmp	r3, #1
 8008968:	d101      	bne.n	800896e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800896a:	2302      	movs	r3, #2
 800896c:	e02d      	b.n	80089ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2224      	movs	r2, #36	@ 0x24
 800897a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f022 0201 	bic.w	r2, r2, #1
 8008994:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	683a      	ldr	r2, [r7, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f812 	bl	80089d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2220      	movs	r2, #32
 80089bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
	...

080089d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d108      	bne.n	80089f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80089f4:	e031      	b.n	8008a5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80089f6:	2308      	movs	r3, #8
 80089f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80089fa:	2308      	movs	r3, #8
 80089fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	0e5b      	lsrs	r3, r3, #25
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	f003 0307 	and.w	r3, r3, #7
 8008a0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	0f5b      	lsrs	r3, r3, #29
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	f003 0307 	and.w	r3, r3, #7
 8008a1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a1e:	7bbb      	ldrb	r3, [r7, #14]
 8008a20:	7b3a      	ldrb	r2, [r7, #12]
 8008a22:	4911      	ldr	r1, [pc, #68]	@ (8008a68 <UARTEx_SetNbDataToProcess+0x94>)
 8008a24:	5c8a      	ldrb	r2, [r1, r2]
 8008a26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a2a:	7b3a      	ldrb	r2, [r7, #12]
 8008a2c:	490f      	ldr	r1, [pc, #60]	@ (8008a6c <UARTEx_SetNbDataToProcess+0x98>)
 8008a2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a30:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
 8008a3e:	7b7a      	ldrb	r2, [r7, #13]
 8008a40:	4909      	ldr	r1, [pc, #36]	@ (8008a68 <UARTEx_SetNbDataToProcess+0x94>)
 8008a42:	5c8a      	ldrb	r2, [r1, r2]
 8008a44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a48:	7b7a      	ldrb	r2, [r7, #13]
 8008a4a:	4908      	ldr	r1, [pc, #32]	@ (8008a6c <UARTEx_SetNbDataToProcess+0x98>)
 8008a4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008a5a:	bf00      	nop
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	0800b8bc 	.word	0x0800b8bc
 8008a6c:	0800b8c4 	.word	0x0800b8c4

08008a70 <atof>:
 8008a70:	2100      	movs	r1, #0
 8008a72:	f000 be09 	b.w	8009688 <strtod>

08008a76 <atoi>:
 8008a76:	220a      	movs	r2, #10
 8008a78:	2100      	movs	r1, #0
 8008a7a:	f000 be8b 	b.w	8009794 <strtol>

08008a7e <sulp>:
 8008a7e:	b570      	push	{r4, r5, r6, lr}
 8008a80:	4604      	mov	r4, r0
 8008a82:	460d      	mov	r5, r1
 8008a84:	ec45 4b10 	vmov	d0, r4, r5
 8008a88:	4616      	mov	r6, r2
 8008a8a:	f002 f873 	bl	800ab74 <__ulp>
 8008a8e:	ec51 0b10 	vmov	r0, r1, d0
 8008a92:	b17e      	cbz	r6, 8008ab4 <sulp+0x36>
 8008a94:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008a98:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	dd09      	ble.n	8008ab4 <sulp+0x36>
 8008aa0:	051b      	lsls	r3, r3, #20
 8008aa2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008aa6:	2400      	movs	r4, #0
 8008aa8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008aac:	4622      	mov	r2, r4
 8008aae:	462b      	mov	r3, r5
 8008ab0:	f7f7 fdda 	bl	8000668 <__aeabi_dmul>
 8008ab4:	ec41 0b10 	vmov	d0, r0, r1
 8008ab8:	bd70      	pop	{r4, r5, r6, pc}
 8008aba:	0000      	movs	r0, r0
 8008abc:	0000      	movs	r0, r0
	...

08008ac0 <_strtod_l>:
 8008ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	b09f      	sub	sp, #124	@ 0x7c
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008aca:	2200      	movs	r2, #0
 8008acc:	921a      	str	r2, [sp, #104]	@ 0x68
 8008ace:	9005      	str	r0, [sp, #20]
 8008ad0:	f04f 0a00 	mov.w	sl, #0
 8008ad4:	f04f 0b00 	mov.w	fp, #0
 8008ad8:	460a      	mov	r2, r1
 8008ada:	9219      	str	r2, [sp, #100]	@ 0x64
 8008adc:	7811      	ldrb	r1, [r2, #0]
 8008ade:	292b      	cmp	r1, #43	@ 0x2b
 8008ae0:	d04a      	beq.n	8008b78 <_strtod_l+0xb8>
 8008ae2:	d838      	bhi.n	8008b56 <_strtod_l+0x96>
 8008ae4:	290d      	cmp	r1, #13
 8008ae6:	d832      	bhi.n	8008b4e <_strtod_l+0x8e>
 8008ae8:	2908      	cmp	r1, #8
 8008aea:	d832      	bhi.n	8008b52 <_strtod_l+0x92>
 8008aec:	2900      	cmp	r1, #0
 8008aee:	d03b      	beq.n	8008b68 <_strtod_l+0xa8>
 8008af0:	2200      	movs	r2, #0
 8008af2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008af4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008af6:	782a      	ldrb	r2, [r5, #0]
 8008af8:	2a30      	cmp	r2, #48	@ 0x30
 8008afa:	f040 80b3 	bne.w	8008c64 <_strtod_l+0x1a4>
 8008afe:	786a      	ldrb	r2, [r5, #1]
 8008b00:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008b04:	2a58      	cmp	r2, #88	@ 0x58
 8008b06:	d16e      	bne.n	8008be6 <_strtod_l+0x126>
 8008b08:	9302      	str	r3, [sp, #8]
 8008b0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b0c:	9301      	str	r3, [sp, #4]
 8008b0e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	4a8e      	ldr	r2, [pc, #568]	@ (8008d4c <_strtod_l+0x28c>)
 8008b14:	9805      	ldr	r0, [sp, #20]
 8008b16:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008b18:	a919      	add	r1, sp, #100	@ 0x64
 8008b1a:	f001 f91d 	bl	8009d58 <__gethex>
 8008b1e:	f010 060f 	ands.w	r6, r0, #15
 8008b22:	4604      	mov	r4, r0
 8008b24:	d005      	beq.n	8008b32 <_strtod_l+0x72>
 8008b26:	2e06      	cmp	r6, #6
 8008b28:	d128      	bne.n	8008b7c <_strtod_l+0xbc>
 8008b2a:	3501      	adds	r5, #1
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008b30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f040 858e 	bne.w	8009656 <_strtod_l+0xb96>
 8008b3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b3c:	b1cb      	cbz	r3, 8008b72 <_strtod_l+0xb2>
 8008b3e:	4652      	mov	r2, sl
 8008b40:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008b44:	ec43 2b10 	vmov	d0, r2, r3
 8008b48:	b01f      	add	sp, #124	@ 0x7c
 8008b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4e:	2920      	cmp	r1, #32
 8008b50:	d1ce      	bne.n	8008af0 <_strtod_l+0x30>
 8008b52:	3201      	adds	r2, #1
 8008b54:	e7c1      	b.n	8008ada <_strtod_l+0x1a>
 8008b56:	292d      	cmp	r1, #45	@ 0x2d
 8008b58:	d1ca      	bne.n	8008af0 <_strtod_l+0x30>
 8008b5a:	2101      	movs	r1, #1
 8008b5c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008b5e:	1c51      	adds	r1, r2, #1
 8008b60:	9119      	str	r1, [sp, #100]	@ 0x64
 8008b62:	7852      	ldrb	r2, [r2, #1]
 8008b64:	2a00      	cmp	r2, #0
 8008b66:	d1c5      	bne.n	8008af4 <_strtod_l+0x34>
 8008b68:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008b6a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f040 8570 	bne.w	8009652 <_strtod_l+0xb92>
 8008b72:	4652      	mov	r2, sl
 8008b74:	465b      	mov	r3, fp
 8008b76:	e7e5      	b.n	8008b44 <_strtod_l+0x84>
 8008b78:	2100      	movs	r1, #0
 8008b7a:	e7ef      	b.n	8008b5c <_strtod_l+0x9c>
 8008b7c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008b7e:	b13a      	cbz	r2, 8008b90 <_strtod_l+0xd0>
 8008b80:	2135      	movs	r1, #53	@ 0x35
 8008b82:	a81c      	add	r0, sp, #112	@ 0x70
 8008b84:	f002 f8f0 	bl	800ad68 <__copybits>
 8008b88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b8a:	9805      	ldr	r0, [sp, #20]
 8008b8c:	f001 fcbe 	bl	800a50c <_Bfree>
 8008b90:	3e01      	subs	r6, #1
 8008b92:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008b94:	2e04      	cmp	r6, #4
 8008b96:	d806      	bhi.n	8008ba6 <_strtod_l+0xe6>
 8008b98:	e8df f006 	tbb	[pc, r6]
 8008b9c:	201d0314 	.word	0x201d0314
 8008ba0:	14          	.byte	0x14
 8008ba1:	00          	.byte	0x00
 8008ba2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008ba6:	05e1      	lsls	r1, r4, #23
 8008ba8:	bf48      	it	mi
 8008baa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008bae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008bb2:	0d1b      	lsrs	r3, r3, #20
 8008bb4:	051b      	lsls	r3, r3, #20
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1bb      	bne.n	8008b32 <_strtod_l+0x72>
 8008bba:	f000 ffb7 	bl	8009b2c <__errno>
 8008bbe:	2322      	movs	r3, #34	@ 0x22
 8008bc0:	6003      	str	r3, [r0, #0]
 8008bc2:	e7b6      	b.n	8008b32 <_strtod_l+0x72>
 8008bc4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008bc8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008bcc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008bd0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008bd4:	e7e7      	b.n	8008ba6 <_strtod_l+0xe6>
 8008bd6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008d54 <_strtod_l+0x294>
 8008bda:	e7e4      	b.n	8008ba6 <_strtod_l+0xe6>
 8008bdc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008be0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008be4:	e7df      	b.n	8008ba6 <_strtod_l+0xe6>
 8008be6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008be8:	1c5a      	adds	r2, r3, #1
 8008bea:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bec:	785b      	ldrb	r3, [r3, #1]
 8008bee:	2b30      	cmp	r3, #48	@ 0x30
 8008bf0:	d0f9      	beq.n	8008be6 <_strtod_l+0x126>
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d09d      	beq.n	8008b32 <_strtod_l+0x72>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bfc:	930c      	str	r3, [sp, #48]	@ 0x30
 8008bfe:	2300      	movs	r3, #0
 8008c00:	9308      	str	r3, [sp, #32]
 8008c02:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c04:	461f      	mov	r7, r3
 8008c06:	220a      	movs	r2, #10
 8008c08:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008c0a:	7805      	ldrb	r5, [r0, #0]
 8008c0c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008c10:	b2d9      	uxtb	r1, r3
 8008c12:	2909      	cmp	r1, #9
 8008c14:	d928      	bls.n	8008c68 <_strtod_l+0x1a8>
 8008c16:	494e      	ldr	r1, [pc, #312]	@ (8008d50 <_strtod_l+0x290>)
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f000 fed2 	bl	80099c2 <strncmp>
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	d032      	beq.n	8008c88 <_strtod_l+0x1c8>
 8008c22:	2000      	movs	r0, #0
 8008c24:	462a      	mov	r2, r5
 8008c26:	4681      	mov	r9, r0
 8008c28:	463d      	mov	r5, r7
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2a65      	cmp	r2, #101	@ 0x65
 8008c2e:	d001      	beq.n	8008c34 <_strtod_l+0x174>
 8008c30:	2a45      	cmp	r2, #69	@ 0x45
 8008c32:	d114      	bne.n	8008c5e <_strtod_l+0x19e>
 8008c34:	b91d      	cbnz	r5, 8008c3e <_strtod_l+0x17e>
 8008c36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c38:	4302      	orrs	r2, r0
 8008c3a:	d095      	beq.n	8008b68 <_strtod_l+0xa8>
 8008c3c:	2500      	movs	r5, #0
 8008c3e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008c40:	1c62      	adds	r2, r4, #1
 8008c42:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c44:	7862      	ldrb	r2, [r4, #1]
 8008c46:	2a2b      	cmp	r2, #43	@ 0x2b
 8008c48:	d077      	beq.n	8008d3a <_strtod_l+0x27a>
 8008c4a:	2a2d      	cmp	r2, #45	@ 0x2d
 8008c4c:	d07b      	beq.n	8008d46 <_strtod_l+0x286>
 8008c4e:	f04f 0c00 	mov.w	ip, #0
 8008c52:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008c56:	2909      	cmp	r1, #9
 8008c58:	f240 8082 	bls.w	8008d60 <_strtod_l+0x2a0>
 8008c5c:	9419      	str	r4, [sp, #100]	@ 0x64
 8008c5e:	f04f 0800 	mov.w	r8, #0
 8008c62:	e0a2      	b.n	8008daa <_strtod_l+0x2ea>
 8008c64:	2300      	movs	r3, #0
 8008c66:	e7c7      	b.n	8008bf8 <_strtod_l+0x138>
 8008c68:	2f08      	cmp	r7, #8
 8008c6a:	bfd5      	itete	le
 8008c6c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008c6e:	9908      	ldrgt	r1, [sp, #32]
 8008c70:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c74:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008c78:	f100 0001 	add.w	r0, r0, #1
 8008c7c:	bfd4      	ite	le
 8008c7e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008c80:	9308      	strgt	r3, [sp, #32]
 8008c82:	3701      	adds	r7, #1
 8008c84:	9019      	str	r0, [sp, #100]	@ 0x64
 8008c86:	e7bf      	b.n	8008c08 <_strtod_l+0x148>
 8008c88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c8a:	1c5a      	adds	r2, r3, #1
 8008c8c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c8e:	785a      	ldrb	r2, [r3, #1]
 8008c90:	b37f      	cbz	r7, 8008cf2 <_strtod_l+0x232>
 8008c92:	4681      	mov	r9, r0
 8008c94:	463d      	mov	r5, r7
 8008c96:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008c9a:	2b09      	cmp	r3, #9
 8008c9c:	d912      	bls.n	8008cc4 <_strtod_l+0x204>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e7c4      	b.n	8008c2c <_strtod_l+0x16c>
 8008ca2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ca4:	1c5a      	adds	r2, r3, #1
 8008ca6:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ca8:	785a      	ldrb	r2, [r3, #1]
 8008caa:	3001      	adds	r0, #1
 8008cac:	2a30      	cmp	r2, #48	@ 0x30
 8008cae:	d0f8      	beq.n	8008ca2 <_strtod_l+0x1e2>
 8008cb0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008cb4:	2b08      	cmp	r3, #8
 8008cb6:	f200 84d3 	bhi.w	8009660 <_strtod_l+0xba0>
 8008cba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cbc:	930c      	str	r3, [sp, #48]	@ 0x30
 8008cbe:	4681      	mov	r9, r0
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	4605      	mov	r5, r0
 8008cc4:	3a30      	subs	r2, #48	@ 0x30
 8008cc6:	f100 0301 	add.w	r3, r0, #1
 8008cca:	d02a      	beq.n	8008d22 <_strtod_l+0x262>
 8008ccc:	4499      	add	r9, r3
 8008cce:	eb00 0c05 	add.w	ip, r0, r5
 8008cd2:	462b      	mov	r3, r5
 8008cd4:	210a      	movs	r1, #10
 8008cd6:	4563      	cmp	r3, ip
 8008cd8:	d10d      	bne.n	8008cf6 <_strtod_l+0x236>
 8008cda:	1c69      	adds	r1, r5, #1
 8008cdc:	4401      	add	r1, r0
 8008cde:	4428      	add	r0, r5
 8008ce0:	2808      	cmp	r0, #8
 8008ce2:	dc16      	bgt.n	8008d12 <_strtod_l+0x252>
 8008ce4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008ce6:	230a      	movs	r3, #10
 8008ce8:	fb03 2300 	mla	r3, r3, r0, r2
 8008cec:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cee:	2300      	movs	r3, #0
 8008cf0:	e018      	b.n	8008d24 <_strtod_l+0x264>
 8008cf2:	4638      	mov	r0, r7
 8008cf4:	e7da      	b.n	8008cac <_strtod_l+0x1ec>
 8008cf6:	2b08      	cmp	r3, #8
 8008cf8:	f103 0301 	add.w	r3, r3, #1
 8008cfc:	dc03      	bgt.n	8008d06 <_strtod_l+0x246>
 8008cfe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008d00:	434e      	muls	r6, r1
 8008d02:	960a      	str	r6, [sp, #40]	@ 0x28
 8008d04:	e7e7      	b.n	8008cd6 <_strtod_l+0x216>
 8008d06:	2b10      	cmp	r3, #16
 8008d08:	bfde      	ittt	le
 8008d0a:	9e08      	ldrle	r6, [sp, #32]
 8008d0c:	434e      	mulle	r6, r1
 8008d0e:	9608      	strle	r6, [sp, #32]
 8008d10:	e7e1      	b.n	8008cd6 <_strtod_l+0x216>
 8008d12:	280f      	cmp	r0, #15
 8008d14:	dceb      	bgt.n	8008cee <_strtod_l+0x22e>
 8008d16:	9808      	ldr	r0, [sp, #32]
 8008d18:	230a      	movs	r3, #10
 8008d1a:	fb03 2300 	mla	r3, r3, r0, r2
 8008d1e:	9308      	str	r3, [sp, #32]
 8008d20:	e7e5      	b.n	8008cee <_strtod_l+0x22e>
 8008d22:	4629      	mov	r1, r5
 8008d24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d26:	1c50      	adds	r0, r2, #1
 8008d28:	9019      	str	r0, [sp, #100]	@ 0x64
 8008d2a:	7852      	ldrb	r2, [r2, #1]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	460d      	mov	r5, r1
 8008d30:	e7b1      	b.n	8008c96 <_strtod_l+0x1d6>
 8008d32:	f04f 0900 	mov.w	r9, #0
 8008d36:	2301      	movs	r3, #1
 8008d38:	e77d      	b.n	8008c36 <_strtod_l+0x176>
 8008d3a:	f04f 0c00 	mov.w	ip, #0
 8008d3e:	1ca2      	adds	r2, r4, #2
 8008d40:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d42:	78a2      	ldrb	r2, [r4, #2]
 8008d44:	e785      	b.n	8008c52 <_strtod_l+0x192>
 8008d46:	f04f 0c01 	mov.w	ip, #1
 8008d4a:	e7f8      	b.n	8008d3e <_strtod_l+0x27e>
 8008d4c:	0800b8f0 	.word	0x0800b8f0
 8008d50:	0800b8cc 	.word	0x0800b8cc
 8008d54:	7ff00000 	.word	0x7ff00000
 8008d58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d5a:	1c51      	adds	r1, r2, #1
 8008d5c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008d5e:	7852      	ldrb	r2, [r2, #1]
 8008d60:	2a30      	cmp	r2, #48	@ 0x30
 8008d62:	d0f9      	beq.n	8008d58 <_strtod_l+0x298>
 8008d64:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008d68:	2908      	cmp	r1, #8
 8008d6a:	f63f af78 	bhi.w	8008c5e <_strtod_l+0x19e>
 8008d6e:	3a30      	subs	r2, #48	@ 0x30
 8008d70:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d74:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008d76:	f04f 080a 	mov.w	r8, #10
 8008d7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d7c:	1c56      	adds	r6, r2, #1
 8008d7e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008d80:	7852      	ldrb	r2, [r2, #1]
 8008d82:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008d86:	f1be 0f09 	cmp.w	lr, #9
 8008d8a:	d939      	bls.n	8008e00 <_strtod_l+0x340>
 8008d8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008d8e:	1a76      	subs	r6, r6, r1
 8008d90:	2e08      	cmp	r6, #8
 8008d92:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008d96:	dc03      	bgt.n	8008da0 <_strtod_l+0x2e0>
 8008d98:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008d9a:	4588      	cmp	r8, r1
 8008d9c:	bfa8      	it	ge
 8008d9e:	4688      	movge	r8, r1
 8008da0:	f1bc 0f00 	cmp.w	ip, #0
 8008da4:	d001      	beq.n	8008daa <_strtod_l+0x2ea>
 8008da6:	f1c8 0800 	rsb	r8, r8, #0
 8008daa:	2d00      	cmp	r5, #0
 8008dac:	d14e      	bne.n	8008e4c <_strtod_l+0x38c>
 8008dae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008db0:	4308      	orrs	r0, r1
 8008db2:	f47f aebe 	bne.w	8008b32 <_strtod_l+0x72>
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f47f aed6 	bne.w	8008b68 <_strtod_l+0xa8>
 8008dbc:	2a69      	cmp	r2, #105	@ 0x69
 8008dbe:	d028      	beq.n	8008e12 <_strtod_l+0x352>
 8008dc0:	dc25      	bgt.n	8008e0e <_strtod_l+0x34e>
 8008dc2:	2a49      	cmp	r2, #73	@ 0x49
 8008dc4:	d025      	beq.n	8008e12 <_strtod_l+0x352>
 8008dc6:	2a4e      	cmp	r2, #78	@ 0x4e
 8008dc8:	f47f aece 	bne.w	8008b68 <_strtod_l+0xa8>
 8008dcc:	499b      	ldr	r1, [pc, #620]	@ (800903c <_strtod_l+0x57c>)
 8008dce:	a819      	add	r0, sp, #100	@ 0x64
 8008dd0:	f001 f9e4 	bl	800a19c <__match>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	f43f aec7 	beq.w	8008b68 <_strtod_l+0xa8>
 8008dda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	2b28      	cmp	r3, #40	@ 0x28
 8008de0:	d12e      	bne.n	8008e40 <_strtod_l+0x380>
 8008de2:	4997      	ldr	r1, [pc, #604]	@ (8009040 <_strtod_l+0x580>)
 8008de4:	aa1c      	add	r2, sp, #112	@ 0x70
 8008de6:	a819      	add	r0, sp, #100	@ 0x64
 8008de8:	f001 f9ec 	bl	800a1c4 <__hexnan>
 8008dec:	2805      	cmp	r0, #5
 8008dee:	d127      	bne.n	8008e40 <_strtod_l+0x380>
 8008df0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008df2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008df6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008dfa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008dfe:	e698      	b.n	8008b32 <_strtod_l+0x72>
 8008e00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008e02:	fb08 2101 	mla	r1, r8, r1, r2
 8008e06:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008e0a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e0c:	e7b5      	b.n	8008d7a <_strtod_l+0x2ba>
 8008e0e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008e10:	e7da      	b.n	8008dc8 <_strtod_l+0x308>
 8008e12:	498c      	ldr	r1, [pc, #560]	@ (8009044 <_strtod_l+0x584>)
 8008e14:	a819      	add	r0, sp, #100	@ 0x64
 8008e16:	f001 f9c1 	bl	800a19c <__match>
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	f43f aea4 	beq.w	8008b68 <_strtod_l+0xa8>
 8008e20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e22:	4989      	ldr	r1, [pc, #548]	@ (8009048 <_strtod_l+0x588>)
 8008e24:	3b01      	subs	r3, #1
 8008e26:	a819      	add	r0, sp, #100	@ 0x64
 8008e28:	9319      	str	r3, [sp, #100]	@ 0x64
 8008e2a:	f001 f9b7 	bl	800a19c <__match>
 8008e2e:	b910      	cbnz	r0, 8008e36 <_strtod_l+0x376>
 8008e30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e32:	3301      	adds	r3, #1
 8008e34:	9319      	str	r3, [sp, #100]	@ 0x64
 8008e36:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009058 <_strtod_l+0x598>
 8008e3a:	f04f 0a00 	mov.w	sl, #0
 8008e3e:	e678      	b.n	8008b32 <_strtod_l+0x72>
 8008e40:	4882      	ldr	r0, [pc, #520]	@ (800904c <_strtod_l+0x58c>)
 8008e42:	f000 feb1 	bl	8009ba8 <nan>
 8008e46:	ec5b ab10 	vmov	sl, fp, d0
 8008e4a:	e672      	b.n	8008b32 <_strtod_l+0x72>
 8008e4c:	eba8 0309 	sub.w	r3, r8, r9
 8008e50:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008e52:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e54:	2f00      	cmp	r7, #0
 8008e56:	bf08      	it	eq
 8008e58:	462f      	moveq	r7, r5
 8008e5a:	2d10      	cmp	r5, #16
 8008e5c:	462c      	mov	r4, r5
 8008e5e:	bfa8      	it	ge
 8008e60:	2410      	movge	r4, #16
 8008e62:	f7f7 fb87 	bl	8000574 <__aeabi_ui2d>
 8008e66:	2d09      	cmp	r5, #9
 8008e68:	4682      	mov	sl, r0
 8008e6a:	468b      	mov	fp, r1
 8008e6c:	dc13      	bgt.n	8008e96 <_strtod_l+0x3d6>
 8008e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f43f ae5e 	beq.w	8008b32 <_strtod_l+0x72>
 8008e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e78:	dd78      	ble.n	8008f6c <_strtod_l+0x4ac>
 8008e7a:	2b16      	cmp	r3, #22
 8008e7c:	dc5f      	bgt.n	8008f3e <_strtod_l+0x47e>
 8008e7e:	4974      	ldr	r1, [pc, #464]	@ (8009050 <_strtod_l+0x590>)
 8008e80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e88:	4652      	mov	r2, sl
 8008e8a:	465b      	mov	r3, fp
 8008e8c:	f7f7 fbec 	bl	8000668 <__aeabi_dmul>
 8008e90:	4682      	mov	sl, r0
 8008e92:	468b      	mov	fp, r1
 8008e94:	e64d      	b.n	8008b32 <_strtod_l+0x72>
 8008e96:	4b6e      	ldr	r3, [pc, #440]	@ (8009050 <_strtod_l+0x590>)
 8008e98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008ea0:	f7f7 fbe2 	bl	8000668 <__aeabi_dmul>
 8008ea4:	4682      	mov	sl, r0
 8008ea6:	9808      	ldr	r0, [sp, #32]
 8008ea8:	468b      	mov	fp, r1
 8008eaa:	f7f7 fb63 	bl	8000574 <__aeabi_ui2d>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4650      	mov	r0, sl
 8008eb4:	4659      	mov	r1, fp
 8008eb6:	f7f7 fa21 	bl	80002fc <__adddf3>
 8008eba:	2d0f      	cmp	r5, #15
 8008ebc:	4682      	mov	sl, r0
 8008ebe:	468b      	mov	fp, r1
 8008ec0:	ddd5      	ble.n	8008e6e <_strtod_l+0x3ae>
 8008ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ec4:	1b2c      	subs	r4, r5, r4
 8008ec6:	441c      	add	r4, r3
 8008ec8:	2c00      	cmp	r4, #0
 8008eca:	f340 8096 	ble.w	8008ffa <_strtod_l+0x53a>
 8008ece:	f014 030f 	ands.w	r3, r4, #15
 8008ed2:	d00a      	beq.n	8008eea <_strtod_l+0x42a>
 8008ed4:	495e      	ldr	r1, [pc, #376]	@ (8009050 <_strtod_l+0x590>)
 8008ed6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008eda:	4652      	mov	r2, sl
 8008edc:	465b      	mov	r3, fp
 8008ede:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ee2:	f7f7 fbc1 	bl	8000668 <__aeabi_dmul>
 8008ee6:	4682      	mov	sl, r0
 8008ee8:	468b      	mov	fp, r1
 8008eea:	f034 040f 	bics.w	r4, r4, #15
 8008eee:	d073      	beq.n	8008fd8 <_strtod_l+0x518>
 8008ef0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008ef4:	dd48      	ble.n	8008f88 <_strtod_l+0x4c8>
 8008ef6:	2400      	movs	r4, #0
 8008ef8:	46a0      	mov	r8, r4
 8008efa:	940a      	str	r4, [sp, #40]	@ 0x28
 8008efc:	46a1      	mov	r9, r4
 8008efe:	9a05      	ldr	r2, [sp, #20]
 8008f00:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009058 <_strtod_l+0x598>
 8008f04:	2322      	movs	r3, #34	@ 0x22
 8008f06:	6013      	str	r3, [r2, #0]
 8008f08:	f04f 0a00 	mov.w	sl, #0
 8008f0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f43f ae0f 	beq.w	8008b32 <_strtod_l+0x72>
 8008f14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f16:	9805      	ldr	r0, [sp, #20]
 8008f18:	f001 faf8 	bl	800a50c <_Bfree>
 8008f1c:	9805      	ldr	r0, [sp, #20]
 8008f1e:	4649      	mov	r1, r9
 8008f20:	f001 faf4 	bl	800a50c <_Bfree>
 8008f24:	9805      	ldr	r0, [sp, #20]
 8008f26:	4641      	mov	r1, r8
 8008f28:	f001 faf0 	bl	800a50c <_Bfree>
 8008f2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f2e:	9805      	ldr	r0, [sp, #20]
 8008f30:	f001 faec 	bl	800a50c <_Bfree>
 8008f34:	9805      	ldr	r0, [sp, #20]
 8008f36:	4621      	mov	r1, r4
 8008f38:	f001 fae8 	bl	800a50c <_Bfree>
 8008f3c:	e5f9      	b.n	8008b32 <_strtod_l+0x72>
 8008f3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f40:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008f44:	4293      	cmp	r3, r2
 8008f46:	dbbc      	blt.n	8008ec2 <_strtod_l+0x402>
 8008f48:	4c41      	ldr	r4, [pc, #260]	@ (8009050 <_strtod_l+0x590>)
 8008f4a:	f1c5 050f 	rsb	r5, r5, #15
 8008f4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008f52:	4652      	mov	r2, sl
 8008f54:	465b      	mov	r3, fp
 8008f56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f5a:	f7f7 fb85 	bl	8000668 <__aeabi_dmul>
 8008f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f60:	1b5d      	subs	r5, r3, r5
 8008f62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008f66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008f6a:	e78f      	b.n	8008e8c <_strtod_l+0x3cc>
 8008f6c:	3316      	adds	r3, #22
 8008f6e:	dba8      	blt.n	8008ec2 <_strtod_l+0x402>
 8008f70:	4b37      	ldr	r3, [pc, #220]	@ (8009050 <_strtod_l+0x590>)
 8008f72:	eba9 0808 	sub.w	r8, r9, r8
 8008f76:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008f7a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008f7e:	4650      	mov	r0, sl
 8008f80:	4659      	mov	r1, fp
 8008f82:	f7f7 fc9b 	bl	80008bc <__aeabi_ddiv>
 8008f86:	e783      	b.n	8008e90 <_strtod_l+0x3d0>
 8008f88:	4b32      	ldr	r3, [pc, #200]	@ (8009054 <_strtod_l+0x594>)
 8008f8a:	9308      	str	r3, [sp, #32]
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	1124      	asrs	r4, r4, #4
 8008f90:	4650      	mov	r0, sl
 8008f92:	4659      	mov	r1, fp
 8008f94:	461e      	mov	r6, r3
 8008f96:	2c01      	cmp	r4, #1
 8008f98:	dc21      	bgt.n	8008fde <_strtod_l+0x51e>
 8008f9a:	b10b      	cbz	r3, 8008fa0 <_strtod_l+0x4e0>
 8008f9c:	4682      	mov	sl, r0
 8008f9e:	468b      	mov	fp, r1
 8008fa0:	492c      	ldr	r1, [pc, #176]	@ (8009054 <_strtod_l+0x594>)
 8008fa2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008fa6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008faa:	4652      	mov	r2, sl
 8008fac:	465b      	mov	r3, fp
 8008fae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fb2:	f7f7 fb59 	bl	8000668 <__aeabi_dmul>
 8008fb6:	4b28      	ldr	r3, [pc, #160]	@ (8009058 <_strtod_l+0x598>)
 8008fb8:	460a      	mov	r2, r1
 8008fba:	400b      	ands	r3, r1
 8008fbc:	4927      	ldr	r1, [pc, #156]	@ (800905c <_strtod_l+0x59c>)
 8008fbe:	428b      	cmp	r3, r1
 8008fc0:	4682      	mov	sl, r0
 8008fc2:	d898      	bhi.n	8008ef6 <_strtod_l+0x436>
 8008fc4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008fc8:	428b      	cmp	r3, r1
 8008fca:	bf86      	itte	hi
 8008fcc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009060 <_strtod_l+0x5a0>
 8008fd0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8008fd4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008fd8:	2300      	movs	r3, #0
 8008fda:	9308      	str	r3, [sp, #32]
 8008fdc:	e07a      	b.n	80090d4 <_strtod_l+0x614>
 8008fde:	07e2      	lsls	r2, r4, #31
 8008fe0:	d505      	bpl.n	8008fee <_strtod_l+0x52e>
 8008fe2:	9b08      	ldr	r3, [sp, #32]
 8008fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe8:	f7f7 fb3e 	bl	8000668 <__aeabi_dmul>
 8008fec:	2301      	movs	r3, #1
 8008fee:	9a08      	ldr	r2, [sp, #32]
 8008ff0:	3208      	adds	r2, #8
 8008ff2:	3601      	adds	r6, #1
 8008ff4:	1064      	asrs	r4, r4, #1
 8008ff6:	9208      	str	r2, [sp, #32]
 8008ff8:	e7cd      	b.n	8008f96 <_strtod_l+0x4d6>
 8008ffa:	d0ed      	beq.n	8008fd8 <_strtod_l+0x518>
 8008ffc:	4264      	negs	r4, r4
 8008ffe:	f014 020f 	ands.w	r2, r4, #15
 8009002:	d00a      	beq.n	800901a <_strtod_l+0x55a>
 8009004:	4b12      	ldr	r3, [pc, #72]	@ (8009050 <_strtod_l+0x590>)
 8009006:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800900a:	4650      	mov	r0, sl
 800900c:	4659      	mov	r1, fp
 800900e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009012:	f7f7 fc53 	bl	80008bc <__aeabi_ddiv>
 8009016:	4682      	mov	sl, r0
 8009018:	468b      	mov	fp, r1
 800901a:	1124      	asrs	r4, r4, #4
 800901c:	d0dc      	beq.n	8008fd8 <_strtod_l+0x518>
 800901e:	2c1f      	cmp	r4, #31
 8009020:	dd20      	ble.n	8009064 <_strtod_l+0x5a4>
 8009022:	2400      	movs	r4, #0
 8009024:	46a0      	mov	r8, r4
 8009026:	940a      	str	r4, [sp, #40]	@ 0x28
 8009028:	46a1      	mov	r9, r4
 800902a:	9a05      	ldr	r2, [sp, #20]
 800902c:	2322      	movs	r3, #34	@ 0x22
 800902e:	f04f 0a00 	mov.w	sl, #0
 8009032:	f04f 0b00 	mov.w	fp, #0
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	e768      	b.n	8008f0c <_strtod_l+0x44c>
 800903a:	bf00      	nop
 800903c:	0800b8d7 	.word	0x0800b8d7
 8009040:	0800b8dc 	.word	0x0800b8dc
 8009044:	0800b8ce 	.word	0x0800b8ce
 8009048:	0800b8d1 	.word	0x0800b8d1
 800904c:	0800bae5 	.word	0x0800bae5
 8009050:	0800bbe8 	.word	0x0800bbe8
 8009054:	0800bbc0 	.word	0x0800bbc0
 8009058:	7ff00000 	.word	0x7ff00000
 800905c:	7ca00000 	.word	0x7ca00000
 8009060:	7fefffff 	.word	0x7fefffff
 8009064:	f014 0310 	ands.w	r3, r4, #16
 8009068:	bf18      	it	ne
 800906a:	236a      	movne	r3, #106	@ 0x6a
 800906c:	4ea9      	ldr	r6, [pc, #676]	@ (8009314 <_strtod_l+0x854>)
 800906e:	9308      	str	r3, [sp, #32]
 8009070:	4650      	mov	r0, sl
 8009072:	4659      	mov	r1, fp
 8009074:	2300      	movs	r3, #0
 8009076:	07e2      	lsls	r2, r4, #31
 8009078:	d504      	bpl.n	8009084 <_strtod_l+0x5c4>
 800907a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800907e:	f7f7 faf3 	bl	8000668 <__aeabi_dmul>
 8009082:	2301      	movs	r3, #1
 8009084:	1064      	asrs	r4, r4, #1
 8009086:	f106 0608 	add.w	r6, r6, #8
 800908a:	d1f4      	bne.n	8009076 <_strtod_l+0x5b6>
 800908c:	b10b      	cbz	r3, 8009092 <_strtod_l+0x5d2>
 800908e:	4682      	mov	sl, r0
 8009090:	468b      	mov	fp, r1
 8009092:	9b08      	ldr	r3, [sp, #32]
 8009094:	b1b3      	cbz	r3, 80090c4 <_strtod_l+0x604>
 8009096:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800909a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800909e:	2b00      	cmp	r3, #0
 80090a0:	4659      	mov	r1, fp
 80090a2:	dd0f      	ble.n	80090c4 <_strtod_l+0x604>
 80090a4:	2b1f      	cmp	r3, #31
 80090a6:	dd55      	ble.n	8009154 <_strtod_l+0x694>
 80090a8:	2b34      	cmp	r3, #52	@ 0x34
 80090aa:	bfde      	ittt	le
 80090ac:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80090b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80090b4:	4093      	lslle	r3, r2
 80090b6:	f04f 0a00 	mov.w	sl, #0
 80090ba:	bfcc      	ite	gt
 80090bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80090c0:	ea03 0b01 	andle.w	fp, r3, r1
 80090c4:	2200      	movs	r2, #0
 80090c6:	2300      	movs	r3, #0
 80090c8:	4650      	mov	r0, sl
 80090ca:	4659      	mov	r1, fp
 80090cc:	f7f7 fd34 	bl	8000b38 <__aeabi_dcmpeq>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d1a6      	bne.n	8009022 <_strtod_l+0x562>
 80090d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80090da:	9805      	ldr	r0, [sp, #20]
 80090dc:	462b      	mov	r3, r5
 80090de:	463a      	mov	r2, r7
 80090e0:	f001 fa7c 	bl	800a5dc <__s2b>
 80090e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80090e6:	2800      	cmp	r0, #0
 80090e8:	f43f af05 	beq.w	8008ef6 <_strtod_l+0x436>
 80090ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090ee:	2a00      	cmp	r2, #0
 80090f0:	eba9 0308 	sub.w	r3, r9, r8
 80090f4:	bfa8      	it	ge
 80090f6:	2300      	movge	r3, #0
 80090f8:	9312      	str	r3, [sp, #72]	@ 0x48
 80090fa:	2400      	movs	r4, #0
 80090fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009100:	9316      	str	r3, [sp, #88]	@ 0x58
 8009102:	46a0      	mov	r8, r4
 8009104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009106:	9805      	ldr	r0, [sp, #20]
 8009108:	6859      	ldr	r1, [r3, #4]
 800910a:	f001 f9bf 	bl	800a48c <_Balloc>
 800910e:	4681      	mov	r9, r0
 8009110:	2800      	cmp	r0, #0
 8009112:	f43f aef4 	beq.w	8008efe <_strtod_l+0x43e>
 8009116:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009118:	691a      	ldr	r2, [r3, #16]
 800911a:	3202      	adds	r2, #2
 800911c:	f103 010c 	add.w	r1, r3, #12
 8009120:	0092      	lsls	r2, r2, #2
 8009122:	300c      	adds	r0, #12
 8009124:	f000 fd2f 	bl	8009b86 <memcpy>
 8009128:	ec4b ab10 	vmov	d0, sl, fp
 800912c:	9805      	ldr	r0, [sp, #20]
 800912e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009130:	a91b      	add	r1, sp, #108	@ 0x6c
 8009132:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009136:	f001 fd8d 	bl	800ac54 <__d2b>
 800913a:	901a      	str	r0, [sp, #104]	@ 0x68
 800913c:	2800      	cmp	r0, #0
 800913e:	f43f aede 	beq.w	8008efe <_strtod_l+0x43e>
 8009142:	9805      	ldr	r0, [sp, #20]
 8009144:	2101      	movs	r1, #1
 8009146:	f001 fadf 	bl	800a708 <__i2b>
 800914a:	4680      	mov	r8, r0
 800914c:	b948      	cbnz	r0, 8009162 <_strtod_l+0x6a2>
 800914e:	f04f 0800 	mov.w	r8, #0
 8009152:	e6d4      	b.n	8008efe <_strtod_l+0x43e>
 8009154:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009158:	fa02 f303 	lsl.w	r3, r2, r3
 800915c:	ea03 0a0a 	and.w	sl, r3, sl
 8009160:	e7b0      	b.n	80090c4 <_strtod_l+0x604>
 8009162:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009164:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009166:	2d00      	cmp	r5, #0
 8009168:	bfab      	itete	ge
 800916a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800916c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800916e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009170:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009172:	bfac      	ite	ge
 8009174:	18ef      	addge	r7, r5, r3
 8009176:	1b5e      	sublt	r6, r3, r5
 8009178:	9b08      	ldr	r3, [sp, #32]
 800917a:	1aed      	subs	r5, r5, r3
 800917c:	4415      	add	r5, r2
 800917e:	4b66      	ldr	r3, [pc, #408]	@ (8009318 <_strtod_l+0x858>)
 8009180:	3d01      	subs	r5, #1
 8009182:	429d      	cmp	r5, r3
 8009184:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009188:	da50      	bge.n	800922c <_strtod_l+0x76c>
 800918a:	1b5b      	subs	r3, r3, r5
 800918c:	2b1f      	cmp	r3, #31
 800918e:	eba2 0203 	sub.w	r2, r2, r3
 8009192:	f04f 0101 	mov.w	r1, #1
 8009196:	dc3d      	bgt.n	8009214 <_strtod_l+0x754>
 8009198:	fa01 f303 	lsl.w	r3, r1, r3
 800919c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800919e:	2300      	movs	r3, #0
 80091a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80091a2:	18bd      	adds	r5, r7, r2
 80091a4:	9b08      	ldr	r3, [sp, #32]
 80091a6:	42af      	cmp	r7, r5
 80091a8:	4416      	add	r6, r2
 80091aa:	441e      	add	r6, r3
 80091ac:	463b      	mov	r3, r7
 80091ae:	bfa8      	it	ge
 80091b0:	462b      	movge	r3, r5
 80091b2:	42b3      	cmp	r3, r6
 80091b4:	bfa8      	it	ge
 80091b6:	4633      	movge	r3, r6
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	bfc2      	ittt	gt
 80091bc:	1aed      	subgt	r5, r5, r3
 80091be:	1af6      	subgt	r6, r6, r3
 80091c0:	1aff      	subgt	r7, r7, r3
 80091c2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	dd16      	ble.n	80091f6 <_strtod_l+0x736>
 80091c8:	4641      	mov	r1, r8
 80091ca:	9805      	ldr	r0, [sp, #20]
 80091cc:	461a      	mov	r2, r3
 80091ce:	f001 fb5b 	bl	800a888 <__pow5mult>
 80091d2:	4680      	mov	r8, r0
 80091d4:	2800      	cmp	r0, #0
 80091d6:	d0ba      	beq.n	800914e <_strtod_l+0x68e>
 80091d8:	4601      	mov	r1, r0
 80091da:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80091dc:	9805      	ldr	r0, [sp, #20]
 80091de:	f001 faa9 	bl	800a734 <__multiply>
 80091e2:	900e      	str	r0, [sp, #56]	@ 0x38
 80091e4:	2800      	cmp	r0, #0
 80091e6:	f43f ae8a 	beq.w	8008efe <_strtod_l+0x43e>
 80091ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091ec:	9805      	ldr	r0, [sp, #20]
 80091ee:	f001 f98d 	bl	800a50c <_Bfree>
 80091f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80091f6:	2d00      	cmp	r5, #0
 80091f8:	dc1d      	bgt.n	8009236 <_strtod_l+0x776>
 80091fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	dd23      	ble.n	8009248 <_strtod_l+0x788>
 8009200:	4649      	mov	r1, r9
 8009202:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009204:	9805      	ldr	r0, [sp, #20]
 8009206:	f001 fb3f 	bl	800a888 <__pow5mult>
 800920a:	4681      	mov	r9, r0
 800920c:	b9e0      	cbnz	r0, 8009248 <_strtod_l+0x788>
 800920e:	f04f 0900 	mov.w	r9, #0
 8009212:	e674      	b.n	8008efe <_strtod_l+0x43e>
 8009214:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009218:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800921c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009220:	35e2      	adds	r5, #226	@ 0xe2
 8009222:	fa01 f305 	lsl.w	r3, r1, r5
 8009226:	9310      	str	r3, [sp, #64]	@ 0x40
 8009228:	9113      	str	r1, [sp, #76]	@ 0x4c
 800922a:	e7ba      	b.n	80091a2 <_strtod_l+0x6e2>
 800922c:	2300      	movs	r3, #0
 800922e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009230:	2301      	movs	r3, #1
 8009232:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009234:	e7b5      	b.n	80091a2 <_strtod_l+0x6e2>
 8009236:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009238:	9805      	ldr	r0, [sp, #20]
 800923a:	462a      	mov	r2, r5
 800923c:	f001 fb7e 	bl	800a93c <__lshift>
 8009240:	901a      	str	r0, [sp, #104]	@ 0x68
 8009242:	2800      	cmp	r0, #0
 8009244:	d1d9      	bne.n	80091fa <_strtod_l+0x73a>
 8009246:	e65a      	b.n	8008efe <_strtod_l+0x43e>
 8009248:	2e00      	cmp	r6, #0
 800924a:	dd07      	ble.n	800925c <_strtod_l+0x79c>
 800924c:	4649      	mov	r1, r9
 800924e:	9805      	ldr	r0, [sp, #20]
 8009250:	4632      	mov	r2, r6
 8009252:	f001 fb73 	bl	800a93c <__lshift>
 8009256:	4681      	mov	r9, r0
 8009258:	2800      	cmp	r0, #0
 800925a:	d0d8      	beq.n	800920e <_strtod_l+0x74e>
 800925c:	2f00      	cmp	r7, #0
 800925e:	dd08      	ble.n	8009272 <_strtod_l+0x7b2>
 8009260:	4641      	mov	r1, r8
 8009262:	9805      	ldr	r0, [sp, #20]
 8009264:	463a      	mov	r2, r7
 8009266:	f001 fb69 	bl	800a93c <__lshift>
 800926a:	4680      	mov	r8, r0
 800926c:	2800      	cmp	r0, #0
 800926e:	f43f ae46 	beq.w	8008efe <_strtod_l+0x43e>
 8009272:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009274:	9805      	ldr	r0, [sp, #20]
 8009276:	464a      	mov	r2, r9
 8009278:	f001 fbe8 	bl	800aa4c <__mdiff>
 800927c:	4604      	mov	r4, r0
 800927e:	2800      	cmp	r0, #0
 8009280:	f43f ae3d 	beq.w	8008efe <_strtod_l+0x43e>
 8009284:	68c3      	ldr	r3, [r0, #12]
 8009286:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009288:	2300      	movs	r3, #0
 800928a:	60c3      	str	r3, [r0, #12]
 800928c:	4641      	mov	r1, r8
 800928e:	f001 fbc1 	bl	800aa14 <__mcmp>
 8009292:	2800      	cmp	r0, #0
 8009294:	da46      	bge.n	8009324 <_strtod_l+0x864>
 8009296:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009298:	ea53 030a 	orrs.w	r3, r3, sl
 800929c:	d16c      	bne.n	8009378 <_strtod_l+0x8b8>
 800929e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d168      	bne.n	8009378 <_strtod_l+0x8b8>
 80092a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80092aa:	0d1b      	lsrs	r3, r3, #20
 80092ac:	051b      	lsls	r3, r3, #20
 80092ae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80092b2:	d961      	bls.n	8009378 <_strtod_l+0x8b8>
 80092b4:	6963      	ldr	r3, [r4, #20]
 80092b6:	b913      	cbnz	r3, 80092be <_strtod_l+0x7fe>
 80092b8:	6923      	ldr	r3, [r4, #16]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	dd5c      	ble.n	8009378 <_strtod_l+0x8b8>
 80092be:	4621      	mov	r1, r4
 80092c0:	2201      	movs	r2, #1
 80092c2:	9805      	ldr	r0, [sp, #20]
 80092c4:	f001 fb3a 	bl	800a93c <__lshift>
 80092c8:	4641      	mov	r1, r8
 80092ca:	4604      	mov	r4, r0
 80092cc:	f001 fba2 	bl	800aa14 <__mcmp>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	dd51      	ble.n	8009378 <_strtod_l+0x8b8>
 80092d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80092d8:	9a08      	ldr	r2, [sp, #32]
 80092da:	0d1b      	lsrs	r3, r3, #20
 80092dc:	051b      	lsls	r3, r3, #20
 80092de:	2a00      	cmp	r2, #0
 80092e0:	d06b      	beq.n	80093ba <_strtod_l+0x8fa>
 80092e2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80092e6:	d868      	bhi.n	80093ba <_strtod_l+0x8fa>
 80092e8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80092ec:	f67f ae9d 	bls.w	800902a <_strtod_l+0x56a>
 80092f0:	4b0a      	ldr	r3, [pc, #40]	@ (800931c <_strtod_l+0x85c>)
 80092f2:	4650      	mov	r0, sl
 80092f4:	4659      	mov	r1, fp
 80092f6:	2200      	movs	r2, #0
 80092f8:	f7f7 f9b6 	bl	8000668 <__aeabi_dmul>
 80092fc:	4b08      	ldr	r3, [pc, #32]	@ (8009320 <_strtod_l+0x860>)
 80092fe:	400b      	ands	r3, r1
 8009300:	4682      	mov	sl, r0
 8009302:	468b      	mov	fp, r1
 8009304:	2b00      	cmp	r3, #0
 8009306:	f47f ae05 	bne.w	8008f14 <_strtod_l+0x454>
 800930a:	9a05      	ldr	r2, [sp, #20]
 800930c:	2322      	movs	r3, #34	@ 0x22
 800930e:	6013      	str	r3, [r2, #0]
 8009310:	e600      	b.n	8008f14 <_strtod_l+0x454>
 8009312:	bf00      	nop
 8009314:	0800b908 	.word	0x0800b908
 8009318:	fffffc02 	.word	0xfffffc02
 800931c:	39500000 	.word	0x39500000
 8009320:	7ff00000 	.word	0x7ff00000
 8009324:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009328:	d165      	bne.n	80093f6 <_strtod_l+0x936>
 800932a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800932c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009330:	b35a      	cbz	r2, 800938a <_strtod_l+0x8ca>
 8009332:	4a9f      	ldr	r2, [pc, #636]	@ (80095b0 <_strtod_l+0xaf0>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d12b      	bne.n	8009390 <_strtod_l+0x8d0>
 8009338:	9b08      	ldr	r3, [sp, #32]
 800933a:	4651      	mov	r1, sl
 800933c:	b303      	cbz	r3, 8009380 <_strtod_l+0x8c0>
 800933e:	4b9d      	ldr	r3, [pc, #628]	@ (80095b4 <_strtod_l+0xaf4>)
 8009340:	465a      	mov	r2, fp
 8009342:	4013      	ands	r3, r2
 8009344:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009348:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800934c:	d81b      	bhi.n	8009386 <_strtod_l+0x8c6>
 800934e:	0d1b      	lsrs	r3, r3, #20
 8009350:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009354:	fa02 f303 	lsl.w	r3, r2, r3
 8009358:	4299      	cmp	r1, r3
 800935a:	d119      	bne.n	8009390 <_strtod_l+0x8d0>
 800935c:	4b96      	ldr	r3, [pc, #600]	@ (80095b8 <_strtod_l+0xaf8>)
 800935e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009360:	429a      	cmp	r2, r3
 8009362:	d102      	bne.n	800936a <_strtod_l+0x8aa>
 8009364:	3101      	adds	r1, #1
 8009366:	f43f adca 	beq.w	8008efe <_strtod_l+0x43e>
 800936a:	4b92      	ldr	r3, [pc, #584]	@ (80095b4 <_strtod_l+0xaf4>)
 800936c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800936e:	401a      	ands	r2, r3
 8009370:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009374:	f04f 0a00 	mov.w	sl, #0
 8009378:	9b08      	ldr	r3, [sp, #32]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1b8      	bne.n	80092f0 <_strtod_l+0x830>
 800937e:	e5c9      	b.n	8008f14 <_strtod_l+0x454>
 8009380:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009384:	e7e8      	b.n	8009358 <_strtod_l+0x898>
 8009386:	4613      	mov	r3, r2
 8009388:	e7e6      	b.n	8009358 <_strtod_l+0x898>
 800938a:	ea53 030a 	orrs.w	r3, r3, sl
 800938e:	d0a1      	beq.n	80092d4 <_strtod_l+0x814>
 8009390:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009392:	b1db      	cbz	r3, 80093cc <_strtod_l+0x90c>
 8009394:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009396:	4213      	tst	r3, r2
 8009398:	d0ee      	beq.n	8009378 <_strtod_l+0x8b8>
 800939a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800939c:	9a08      	ldr	r2, [sp, #32]
 800939e:	4650      	mov	r0, sl
 80093a0:	4659      	mov	r1, fp
 80093a2:	b1bb      	cbz	r3, 80093d4 <_strtod_l+0x914>
 80093a4:	f7ff fb6b 	bl	8008a7e <sulp>
 80093a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093ac:	ec53 2b10 	vmov	r2, r3, d0
 80093b0:	f7f6 ffa4 	bl	80002fc <__adddf3>
 80093b4:	4682      	mov	sl, r0
 80093b6:	468b      	mov	fp, r1
 80093b8:	e7de      	b.n	8009378 <_strtod_l+0x8b8>
 80093ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80093be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80093c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80093c6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80093ca:	e7d5      	b.n	8009378 <_strtod_l+0x8b8>
 80093cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80093ce:	ea13 0f0a 	tst.w	r3, sl
 80093d2:	e7e1      	b.n	8009398 <_strtod_l+0x8d8>
 80093d4:	f7ff fb53 	bl	8008a7e <sulp>
 80093d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093dc:	ec53 2b10 	vmov	r2, r3, d0
 80093e0:	f7f6 ff8a 	bl	80002f8 <__aeabi_dsub>
 80093e4:	2200      	movs	r2, #0
 80093e6:	2300      	movs	r3, #0
 80093e8:	4682      	mov	sl, r0
 80093ea:	468b      	mov	fp, r1
 80093ec:	f7f7 fba4 	bl	8000b38 <__aeabi_dcmpeq>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d0c1      	beq.n	8009378 <_strtod_l+0x8b8>
 80093f4:	e619      	b.n	800902a <_strtod_l+0x56a>
 80093f6:	4641      	mov	r1, r8
 80093f8:	4620      	mov	r0, r4
 80093fa:	f001 fc83 	bl	800ad04 <__ratio>
 80093fe:	ec57 6b10 	vmov	r6, r7, d0
 8009402:	2200      	movs	r2, #0
 8009404:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009408:	4630      	mov	r0, r6
 800940a:	4639      	mov	r1, r7
 800940c:	f7f7 fba8 	bl	8000b60 <__aeabi_dcmple>
 8009410:	2800      	cmp	r0, #0
 8009412:	d06f      	beq.n	80094f4 <_strtod_l+0xa34>
 8009414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009416:	2b00      	cmp	r3, #0
 8009418:	d17a      	bne.n	8009510 <_strtod_l+0xa50>
 800941a:	f1ba 0f00 	cmp.w	sl, #0
 800941e:	d158      	bne.n	80094d2 <_strtod_l+0xa12>
 8009420:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009422:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009426:	2b00      	cmp	r3, #0
 8009428:	d15a      	bne.n	80094e0 <_strtod_l+0xa20>
 800942a:	4b64      	ldr	r3, [pc, #400]	@ (80095bc <_strtod_l+0xafc>)
 800942c:	2200      	movs	r2, #0
 800942e:	4630      	mov	r0, r6
 8009430:	4639      	mov	r1, r7
 8009432:	f7f7 fb8b 	bl	8000b4c <__aeabi_dcmplt>
 8009436:	2800      	cmp	r0, #0
 8009438:	d159      	bne.n	80094ee <_strtod_l+0xa2e>
 800943a:	4630      	mov	r0, r6
 800943c:	4639      	mov	r1, r7
 800943e:	4b60      	ldr	r3, [pc, #384]	@ (80095c0 <_strtod_l+0xb00>)
 8009440:	2200      	movs	r2, #0
 8009442:	f7f7 f911 	bl	8000668 <__aeabi_dmul>
 8009446:	4606      	mov	r6, r0
 8009448:	460f      	mov	r7, r1
 800944a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800944e:	9606      	str	r6, [sp, #24]
 8009450:	9307      	str	r3, [sp, #28]
 8009452:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009456:	4d57      	ldr	r5, [pc, #348]	@ (80095b4 <_strtod_l+0xaf4>)
 8009458:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800945c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800945e:	401d      	ands	r5, r3
 8009460:	4b58      	ldr	r3, [pc, #352]	@ (80095c4 <_strtod_l+0xb04>)
 8009462:	429d      	cmp	r5, r3
 8009464:	f040 80b2 	bne.w	80095cc <_strtod_l+0xb0c>
 8009468:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800946a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800946e:	ec4b ab10 	vmov	d0, sl, fp
 8009472:	f001 fb7f 	bl	800ab74 <__ulp>
 8009476:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800947a:	ec51 0b10 	vmov	r0, r1, d0
 800947e:	f7f7 f8f3 	bl	8000668 <__aeabi_dmul>
 8009482:	4652      	mov	r2, sl
 8009484:	465b      	mov	r3, fp
 8009486:	f7f6 ff39 	bl	80002fc <__adddf3>
 800948a:	460b      	mov	r3, r1
 800948c:	4949      	ldr	r1, [pc, #292]	@ (80095b4 <_strtod_l+0xaf4>)
 800948e:	4a4e      	ldr	r2, [pc, #312]	@ (80095c8 <_strtod_l+0xb08>)
 8009490:	4019      	ands	r1, r3
 8009492:	4291      	cmp	r1, r2
 8009494:	4682      	mov	sl, r0
 8009496:	d942      	bls.n	800951e <_strtod_l+0xa5e>
 8009498:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800949a:	4b47      	ldr	r3, [pc, #284]	@ (80095b8 <_strtod_l+0xaf8>)
 800949c:	429a      	cmp	r2, r3
 800949e:	d103      	bne.n	80094a8 <_strtod_l+0x9e8>
 80094a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80094a2:	3301      	adds	r3, #1
 80094a4:	f43f ad2b 	beq.w	8008efe <_strtod_l+0x43e>
 80094a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80095b8 <_strtod_l+0xaf8>
 80094ac:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80094b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094b2:	9805      	ldr	r0, [sp, #20]
 80094b4:	f001 f82a 	bl	800a50c <_Bfree>
 80094b8:	9805      	ldr	r0, [sp, #20]
 80094ba:	4649      	mov	r1, r9
 80094bc:	f001 f826 	bl	800a50c <_Bfree>
 80094c0:	9805      	ldr	r0, [sp, #20]
 80094c2:	4641      	mov	r1, r8
 80094c4:	f001 f822 	bl	800a50c <_Bfree>
 80094c8:	9805      	ldr	r0, [sp, #20]
 80094ca:	4621      	mov	r1, r4
 80094cc:	f001 f81e 	bl	800a50c <_Bfree>
 80094d0:	e618      	b.n	8009104 <_strtod_l+0x644>
 80094d2:	f1ba 0f01 	cmp.w	sl, #1
 80094d6:	d103      	bne.n	80094e0 <_strtod_l+0xa20>
 80094d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f43f ada5 	beq.w	800902a <_strtod_l+0x56a>
 80094e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009590 <_strtod_l+0xad0>
 80094e4:	4f35      	ldr	r7, [pc, #212]	@ (80095bc <_strtod_l+0xafc>)
 80094e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80094ea:	2600      	movs	r6, #0
 80094ec:	e7b1      	b.n	8009452 <_strtod_l+0x992>
 80094ee:	4f34      	ldr	r7, [pc, #208]	@ (80095c0 <_strtod_l+0xb00>)
 80094f0:	2600      	movs	r6, #0
 80094f2:	e7aa      	b.n	800944a <_strtod_l+0x98a>
 80094f4:	4b32      	ldr	r3, [pc, #200]	@ (80095c0 <_strtod_l+0xb00>)
 80094f6:	4630      	mov	r0, r6
 80094f8:	4639      	mov	r1, r7
 80094fa:	2200      	movs	r2, #0
 80094fc:	f7f7 f8b4 	bl	8000668 <__aeabi_dmul>
 8009500:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009502:	4606      	mov	r6, r0
 8009504:	460f      	mov	r7, r1
 8009506:	2b00      	cmp	r3, #0
 8009508:	d09f      	beq.n	800944a <_strtod_l+0x98a>
 800950a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800950e:	e7a0      	b.n	8009452 <_strtod_l+0x992>
 8009510:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009598 <_strtod_l+0xad8>
 8009514:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009518:	ec57 6b17 	vmov	r6, r7, d7
 800951c:	e799      	b.n	8009452 <_strtod_l+0x992>
 800951e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009522:	9b08      	ldr	r3, [sp, #32]
 8009524:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1c1      	bne.n	80094b0 <_strtod_l+0x9f0>
 800952c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009530:	0d1b      	lsrs	r3, r3, #20
 8009532:	051b      	lsls	r3, r3, #20
 8009534:	429d      	cmp	r5, r3
 8009536:	d1bb      	bne.n	80094b0 <_strtod_l+0x9f0>
 8009538:	4630      	mov	r0, r6
 800953a:	4639      	mov	r1, r7
 800953c:	f7f7 fb8e 	bl	8000c5c <__aeabi_d2lz>
 8009540:	f7f7 f864 	bl	800060c <__aeabi_l2d>
 8009544:	4602      	mov	r2, r0
 8009546:	460b      	mov	r3, r1
 8009548:	4630      	mov	r0, r6
 800954a:	4639      	mov	r1, r7
 800954c:	f7f6 fed4 	bl	80002f8 <__aeabi_dsub>
 8009550:	460b      	mov	r3, r1
 8009552:	4602      	mov	r2, r0
 8009554:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009558:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800955c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800955e:	ea46 060a 	orr.w	r6, r6, sl
 8009562:	431e      	orrs	r6, r3
 8009564:	d06f      	beq.n	8009646 <_strtod_l+0xb86>
 8009566:	a30e      	add	r3, pc, #56	@ (adr r3, 80095a0 <_strtod_l+0xae0>)
 8009568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956c:	f7f7 faee 	bl	8000b4c <__aeabi_dcmplt>
 8009570:	2800      	cmp	r0, #0
 8009572:	f47f accf 	bne.w	8008f14 <_strtod_l+0x454>
 8009576:	a30c      	add	r3, pc, #48	@ (adr r3, 80095a8 <_strtod_l+0xae8>)
 8009578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009580:	f7f7 fb02 	bl	8000b88 <__aeabi_dcmpgt>
 8009584:	2800      	cmp	r0, #0
 8009586:	d093      	beq.n	80094b0 <_strtod_l+0x9f0>
 8009588:	e4c4      	b.n	8008f14 <_strtod_l+0x454>
 800958a:	bf00      	nop
 800958c:	f3af 8000 	nop.w
 8009590:	00000000 	.word	0x00000000
 8009594:	bff00000 	.word	0xbff00000
 8009598:	00000000 	.word	0x00000000
 800959c:	3ff00000 	.word	0x3ff00000
 80095a0:	94a03595 	.word	0x94a03595
 80095a4:	3fdfffff 	.word	0x3fdfffff
 80095a8:	35afe535 	.word	0x35afe535
 80095ac:	3fe00000 	.word	0x3fe00000
 80095b0:	000fffff 	.word	0x000fffff
 80095b4:	7ff00000 	.word	0x7ff00000
 80095b8:	7fefffff 	.word	0x7fefffff
 80095bc:	3ff00000 	.word	0x3ff00000
 80095c0:	3fe00000 	.word	0x3fe00000
 80095c4:	7fe00000 	.word	0x7fe00000
 80095c8:	7c9fffff 	.word	0x7c9fffff
 80095cc:	9b08      	ldr	r3, [sp, #32]
 80095ce:	b323      	cbz	r3, 800961a <_strtod_l+0xb5a>
 80095d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80095d4:	d821      	bhi.n	800961a <_strtod_l+0xb5a>
 80095d6:	a328      	add	r3, pc, #160	@ (adr r3, 8009678 <_strtod_l+0xbb8>)
 80095d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095dc:	4630      	mov	r0, r6
 80095de:	4639      	mov	r1, r7
 80095e0:	f7f7 fabe 	bl	8000b60 <__aeabi_dcmple>
 80095e4:	b1a0      	cbz	r0, 8009610 <_strtod_l+0xb50>
 80095e6:	4639      	mov	r1, r7
 80095e8:	4630      	mov	r0, r6
 80095ea:	f7f7 faff 	bl	8000bec <__aeabi_d2uiz>
 80095ee:	2801      	cmp	r0, #1
 80095f0:	bf38      	it	cc
 80095f2:	2001      	movcc	r0, #1
 80095f4:	f7f6 ffbe 	bl	8000574 <__aeabi_ui2d>
 80095f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095fa:	4606      	mov	r6, r0
 80095fc:	460f      	mov	r7, r1
 80095fe:	b9fb      	cbnz	r3, 8009640 <_strtod_l+0xb80>
 8009600:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009604:	9014      	str	r0, [sp, #80]	@ 0x50
 8009606:	9315      	str	r3, [sp, #84]	@ 0x54
 8009608:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800960c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009610:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009612:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009616:	1b5b      	subs	r3, r3, r5
 8009618:	9311      	str	r3, [sp, #68]	@ 0x44
 800961a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800961e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009622:	f001 faa7 	bl	800ab74 <__ulp>
 8009626:	4650      	mov	r0, sl
 8009628:	ec53 2b10 	vmov	r2, r3, d0
 800962c:	4659      	mov	r1, fp
 800962e:	f7f7 f81b 	bl	8000668 <__aeabi_dmul>
 8009632:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009636:	f7f6 fe61 	bl	80002fc <__adddf3>
 800963a:	4682      	mov	sl, r0
 800963c:	468b      	mov	fp, r1
 800963e:	e770      	b.n	8009522 <_strtod_l+0xa62>
 8009640:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009644:	e7e0      	b.n	8009608 <_strtod_l+0xb48>
 8009646:	a30e      	add	r3, pc, #56	@ (adr r3, 8009680 <_strtod_l+0xbc0>)
 8009648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964c:	f7f7 fa7e 	bl	8000b4c <__aeabi_dcmplt>
 8009650:	e798      	b.n	8009584 <_strtod_l+0xac4>
 8009652:	2300      	movs	r3, #0
 8009654:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009656:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009658:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800965a:	6013      	str	r3, [r2, #0]
 800965c:	f7ff ba6d 	b.w	8008b3a <_strtod_l+0x7a>
 8009660:	2a65      	cmp	r2, #101	@ 0x65
 8009662:	f43f ab66 	beq.w	8008d32 <_strtod_l+0x272>
 8009666:	2a45      	cmp	r2, #69	@ 0x45
 8009668:	f43f ab63 	beq.w	8008d32 <_strtod_l+0x272>
 800966c:	2301      	movs	r3, #1
 800966e:	f7ff bb9e 	b.w	8008dae <_strtod_l+0x2ee>
 8009672:	bf00      	nop
 8009674:	f3af 8000 	nop.w
 8009678:	ffc00000 	.word	0xffc00000
 800967c:	41dfffff 	.word	0x41dfffff
 8009680:	94a03595 	.word	0x94a03595
 8009684:	3fcfffff 	.word	0x3fcfffff

08009688 <strtod>:
 8009688:	460a      	mov	r2, r1
 800968a:	4601      	mov	r1, r0
 800968c:	4802      	ldr	r0, [pc, #8]	@ (8009698 <strtod+0x10>)
 800968e:	4b03      	ldr	r3, [pc, #12]	@ (800969c <strtod+0x14>)
 8009690:	6800      	ldr	r0, [r0, #0]
 8009692:	f7ff ba15 	b.w	8008ac0 <_strtod_l>
 8009696:	bf00      	nop
 8009698:	200002c0 	.word	0x200002c0
 800969c:	20000154 	.word	0x20000154

080096a0 <_strtol_l.constprop.0>:
 80096a0:	2b24      	cmp	r3, #36	@ 0x24
 80096a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096a6:	4686      	mov	lr, r0
 80096a8:	4690      	mov	r8, r2
 80096aa:	d801      	bhi.n	80096b0 <_strtol_l.constprop.0+0x10>
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d106      	bne.n	80096be <_strtol_l.constprop.0+0x1e>
 80096b0:	f000 fa3c 	bl	8009b2c <__errno>
 80096b4:	2316      	movs	r3, #22
 80096b6:	6003      	str	r3, [r0, #0]
 80096b8:	2000      	movs	r0, #0
 80096ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096be:	4834      	ldr	r0, [pc, #208]	@ (8009790 <_strtol_l.constprop.0+0xf0>)
 80096c0:	460d      	mov	r5, r1
 80096c2:	462a      	mov	r2, r5
 80096c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096c8:	5d06      	ldrb	r6, [r0, r4]
 80096ca:	f016 0608 	ands.w	r6, r6, #8
 80096ce:	d1f8      	bne.n	80096c2 <_strtol_l.constprop.0+0x22>
 80096d0:	2c2d      	cmp	r4, #45	@ 0x2d
 80096d2:	d12d      	bne.n	8009730 <_strtol_l.constprop.0+0x90>
 80096d4:	782c      	ldrb	r4, [r5, #0]
 80096d6:	2601      	movs	r6, #1
 80096d8:	1c95      	adds	r5, r2, #2
 80096da:	f033 0210 	bics.w	r2, r3, #16
 80096de:	d109      	bne.n	80096f4 <_strtol_l.constprop.0+0x54>
 80096e0:	2c30      	cmp	r4, #48	@ 0x30
 80096e2:	d12a      	bne.n	800973a <_strtol_l.constprop.0+0x9a>
 80096e4:	782a      	ldrb	r2, [r5, #0]
 80096e6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80096ea:	2a58      	cmp	r2, #88	@ 0x58
 80096ec:	d125      	bne.n	800973a <_strtol_l.constprop.0+0x9a>
 80096ee:	786c      	ldrb	r4, [r5, #1]
 80096f0:	2310      	movs	r3, #16
 80096f2:	3502      	adds	r5, #2
 80096f4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80096f8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80096fc:	2200      	movs	r2, #0
 80096fe:	fbbc f9f3 	udiv	r9, ip, r3
 8009702:	4610      	mov	r0, r2
 8009704:	fb03 ca19 	mls	sl, r3, r9, ip
 8009708:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800970c:	2f09      	cmp	r7, #9
 800970e:	d81b      	bhi.n	8009748 <_strtol_l.constprop.0+0xa8>
 8009710:	463c      	mov	r4, r7
 8009712:	42a3      	cmp	r3, r4
 8009714:	dd27      	ble.n	8009766 <_strtol_l.constprop.0+0xc6>
 8009716:	1c57      	adds	r7, r2, #1
 8009718:	d007      	beq.n	800972a <_strtol_l.constprop.0+0x8a>
 800971a:	4581      	cmp	r9, r0
 800971c:	d320      	bcc.n	8009760 <_strtol_l.constprop.0+0xc0>
 800971e:	d101      	bne.n	8009724 <_strtol_l.constprop.0+0x84>
 8009720:	45a2      	cmp	sl, r4
 8009722:	db1d      	blt.n	8009760 <_strtol_l.constprop.0+0xc0>
 8009724:	fb00 4003 	mla	r0, r0, r3, r4
 8009728:	2201      	movs	r2, #1
 800972a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800972e:	e7eb      	b.n	8009708 <_strtol_l.constprop.0+0x68>
 8009730:	2c2b      	cmp	r4, #43	@ 0x2b
 8009732:	bf04      	itt	eq
 8009734:	782c      	ldrbeq	r4, [r5, #0]
 8009736:	1c95      	addeq	r5, r2, #2
 8009738:	e7cf      	b.n	80096da <_strtol_l.constprop.0+0x3a>
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1da      	bne.n	80096f4 <_strtol_l.constprop.0+0x54>
 800973e:	2c30      	cmp	r4, #48	@ 0x30
 8009740:	bf0c      	ite	eq
 8009742:	2308      	moveq	r3, #8
 8009744:	230a      	movne	r3, #10
 8009746:	e7d5      	b.n	80096f4 <_strtol_l.constprop.0+0x54>
 8009748:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800974c:	2f19      	cmp	r7, #25
 800974e:	d801      	bhi.n	8009754 <_strtol_l.constprop.0+0xb4>
 8009750:	3c37      	subs	r4, #55	@ 0x37
 8009752:	e7de      	b.n	8009712 <_strtol_l.constprop.0+0x72>
 8009754:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009758:	2f19      	cmp	r7, #25
 800975a:	d804      	bhi.n	8009766 <_strtol_l.constprop.0+0xc6>
 800975c:	3c57      	subs	r4, #87	@ 0x57
 800975e:	e7d8      	b.n	8009712 <_strtol_l.constprop.0+0x72>
 8009760:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009764:	e7e1      	b.n	800972a <_strtol_l.constprop.0+0x8a>
 8009766:	1c53      	adds	r3, r2, #1
 8009768:	d108      	bne.n	800977c <_strtol_l.constprop.0+0xdc>
 800976a:	2322      	movs	r3, #34	@ 0x22
 800976c:	f8ce 3000 	str.w	r3, [lr]
 8009770:	4660      	mov	r0, ip
 8009772:	f1b8 0f00 	cmp.w	r8, #0
 8009776:	d0a0      	beq.n	80096ba <_strtol_l.constprop.0+0x1a>
 8009778:	1e69      	subs	r1, r5, #1
 800977a:	e006      	b.n	800978a <_strtol_l.constprop.0+0xea>
 800977c:	b106      	cbz	r6, 8009780 <_strtol_l.constprop.0+0xe0>
 800977e:	4240      	negs	r0, r0
 8009780:	f1b8 0f00 	cmp.w	r8, #0
 8009784:	d099      	beq.n	80096ba <_strtol_l.constprop.0+0x1a>
 8009786:	2a00      	cmp	r2, #0
 8009788:	d1f6      	bne.n	8009778 <_strtol_l.constprop.0+0xd8>
 800978a:	f8c8 1000 	str.w	r1, [r8]
 800978e:	e794      	b.n	80096ba <_strtol_l.constprop.0+0x1a>
 8009790:	0800b931 	.word	0x0800b931

08009794 <strtol>:
 8009794:	4613      	mov	r3, r2
 8009796:	460a      	mov	r2, r1
 8009798:	4601      	mov	r1, r0
 800979a:	4802      	ldr	r0, [pc, #8]	@ (80097a4 <strtol+0x10>)
 800979c:	6800      	ldr	r0, [r0, #0]
 800979e:	f7ff bf7f 	b.w	80096a0 <_strtol_l.constprop.0>
 80097a2:	bf00      	nop
 80097a4:	200002c0 	.word	0x200002c0

080097a8 <std>:
 80097a8:	2300      	movs	r3, #0
 80097aa:	b510      	push	{r4, lr}
 80097ac:	4604      	mov	r4, r0
 80097ae:	e9c0 3300 	strd	r3, r3, [r0]
 80097b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097b6:	6083      	str	r3, [r0, #8]
 80097b8:	8181      	strh	r1, [r0, #12]
 80097ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80097bc:	81c2      	strh	r2, [r0, #14]
 80097be:	6183      	str	r3, [r0, #24]
 80097c0:	4619      	mov	r1, r3
 80097c2:	2208      	movs	r2, #8
 80097c4:	305c      	adds	r0, #92	@ 0x5c
 80097c6:	f000 f8f4 	bl	80099b2 <memset>
 80097ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009800 <std+0x58>)
 80097cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80097ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009804 <std+0x5c>)
 80097d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80097d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009808 <std+0x60>)
 80097d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80097d6:	4b0d      	ldr	r3, [pc, #52]	@ (800980c <std+0x64>)
 80097d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80097da:	4b0d      	ldr	r3, [pc, #52]	@ (8009810 <std+0x68>)
 80097dc:	6224      	str	r4, [r4, #32]
 80097de:	429c      	cmp	r4, r3
 80097e0:	d006      	beq.n	80097f0 <std+0x48>
 80097e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80097e6:	4294      	cmp	r4, r2
 80097e8:	d002      	beq.n	80097f0 <std+0x48>
 80097ea:	33d0      	adds	r3, #208	@ 0xd0
 80097ec:	429c      	cmp	r4, r3
 80097ee:	d105      	bne.n	80097fc <std+0x54>
 80097f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80097f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097f8:	f000 b9c2 	b.w	8009b80 <__retarget_lock_init_recursive>
 80097fc:	bd10      	pop	{r4, pc}
 80097fe:	bf00      	nop
 8009800:	0800992d 	.word	0x0800992d
 8009804:	0800994f 	.word	0x0800994f
 8009808:	08009987 	.word	0x08009987
 800980c:	080099ab 	.word	0x080099ab
 8009810:	200006d4 	.word	0x200006d4

08009814 <stdio_exit_handler>:
 8009814:	4a02      	ldr	r2, [pc, #8]	@ (8009820 <stdio_exit_handler+0xc>)
 8009816:	4903      	ldr	r1, [pc, #12]	@ (8009824 <stdio_exit_handler+0x10>)
 8009818:	4803      	ldr	r0, [pc, #12]	@ (8009828 <stdio_exit_handler+0x14>)
 800981a:	f000 b869 	b.w	80098f0 <_fwalk_sglue>
 800981e:	bf00      	nop
 8009820:	20000148 	.word	0x20000148
 8009824:	0800af15 	.word	0x0800af15
 8009828:	200002c4 	.word	0x200002c4

0800982c <cleanup_stdio>:
 800982c:	6841      	ldr	r1, [r0, #4]
 800982e:	4b0c      	ldr	r3, [pc, #48]	@ (8009860 <cleanup_stdio+0x34>)
 8009830:	4299      	cmp	r1, r3
 8009832:	b510      	push	{r4, lr}
 8009834:	4604      	mov	r4, r0
 8009836:	d001      	beq.n	800983c <cleanup_stdio+0x10>
 8009838:	f001 fb6c 	bl	800af14 <_fflush_r>
 800983c:	68a1      	ldr	r1, [r4, #8]
 800983e:	4b09      	ldr	r3, [pc, #36]	@ (8009864 <cleanup_stdio+0x38>)
 8009840:	4299      	cmp	r1, r3
 8009842:	d002      	beq.n	800984a <cleanup_stdio+0x1e>
 8009844:	4620      	mov	r0, r4
 8009846:	f001 fb65 	bl	800af14 <_fflush_r>
 800984a:	68e1      	ldr	r1, [r4, #12]
 800984c:	4b06      	ldr	r3, [pc, #24]	@ (8009868 <cleanup_stdio+0x3c>)
 800984e:	4299      	cmp	r1, r3
 8009850:	d004      	beq.n	800985c <cleanup_stdio+0x30>
 8009852:	4620      	mov	r0, r4
 8009854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009858:	f001 bb5c 	b.w	800af14 <_fflush_r>
 800985c:	bd10      	pop	{r4, pc}
 800985e:	bf00      	nop
 8009860:	200006d4 	.word	0x200006d4
 8009864:	2000073c 	.word	0x2000073c
 8009868:	200007a4 	.word	0x200007a4

0800986c <global_stdio_init.part.0>:
 800986c:	b510      	push	{r4, lr}
 800986e:	4b0b      	ldr	r3, [pc, #44]	@ (800989c <global_stdio_init.part.0+0x30>)
 8009870:	4c0b      	ldr	r4, [pc, #44]	@ (80098a0 <global_stdio_init.part.0+0x34>)
 8009872:	4a0c      	ldr	r2, [pc, #48]	@ (80098a4 <global_stdio_init.part.0+0x38>)
 8009874:	601a      	str	r2, [r3, #0]
 8009876:	4620      	mov	r0, r4
 8009878:	2200      	movs	r2, #0
 800987a:	2104      	movs	r1, #4
 800987c:	f7ff ff94 	bl	80097a8 <std>
 8009880:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009884:	2201      	movs	r2, #1
 8009886:	2109      	movs	r1, #9
 8009888:	f7ff ff8e 	bl	80097a8 <std>
 800988c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009890:	2202      	movs	r2, #2
 8009892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009896:	2112      	movs	r1, #18
 8009898:	f7ff bf86 	b.w	80097a8 <std>
 800989c:	2000080c 	.word	0x2000080c
 80098a0:	200006d4 	.word	0x200006d4
 80098a4:	08009815 	.word	0x08009815

080098a8 <__sfp_lock_acquire>:
 80098a8:	4801      	ldr	r0, [pc, #4]	@ (80098b0 <__sfp_lock_acquire+0x8>)
 80098aa:	f000 b96a 	b.w	8009b82 <__retarget_lock_acquire_recursive>
 80098ae:	bf00      	nop
 80098b0:	20000815 	.word	0x20000815

080098b4 <__sfp_lock_release>:
 80098b4:	4801      	ldr	r0, [pc, #4]	@ (80098bc <__sfp_lock_release+0x8>)
 80098b6:	f000 b965 	b.w	8009b84 <__retarget_lock_release_recursive>
 80098ba:	bf00      	nop
 80098bc:	20000815 	.word	0x20000815

080098c0 <__sinit>:
 80098c0:	b510      	push	{r4, lr}
 80098c2:	4604      	mov	r4, r0
 80098c4:	f7ff fff0 	bl	80098a8 <__sfp_lock_acquire>
 80098c8:	6a23      	ldr	r3, [r4, #32]
 80098ca:	b11b      	cbz	r3, 80098d4 <__sinit+0x14>
 80098cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098d0:	f7ff bff0 	b.w	80098b4 <__sfp_lock_release>
 80098d4:	4b04      	ldr	r3, [pc, #16]	@ (80098e8 <__sinit+0x28>)
 80098d6:	6223      	str	r3, [r4, #32]
 80098d8:	4b04      	ldr	r3, [pc, #16]	@ (80098ec <__sinit+0x2c>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1f5      	bne.n	80098cc <__sinit+0xc>
 80098e0:	f7ff ffc4 	bl	800986c <global_stdio_init.part.0>
 80098e4:	e7f2      	b.n	80098cc <__sinit+0xc>
 80098e6:	bf00      	nop
 80098e8:	0800982d 	.word	0x0800982d
 80098ec:	2000080c 	.word	0x2000080c

080098f0 <_fwalk_sglue>:
 80098f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098f4:	4607      	mov	r7, r0
 80098f6:	4688      	mov	r8, r1
 80098f8:	4614      	mov	r4, r2
 80098fa:	2600      	movs	r6, #0
 80098fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009900:	f1b9 0901 	subs.w	r9, r9, #1
 8009904:	d505      	bpl.n	8009912 <_fwalk_sglue+0x22>
 8009906:	6824      	ldr	r4, [r4, #0]
 8009908:	2c00      	cmp	r4, #0
 800990a:	d1f7      	bne.n	80098fc <_fwalk_sglue+0xc>
 800990c:	4630      	mov	r0, r6
 800990e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009912:	89ab      	ldrh	r3, [r5, #12]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d907      	bls.n	8009928 <_fwalk_sglue+0x38>
 8009918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800991c:	3301      	adds	r3, #1
 800991e:	d003      	beq.n	8009928 <_fwalk_sglue+0x38>
 8009920:	4629      	mov	r1, r5
 8009922:	4638      	mov	r0, r7
 8009924:	47c0      	blx	r8
 8009926:	4306      	orrs	r6, r0
 8009928:	3568      	adds	r5, #104	@ 0x68
 800992a:	e7e9      	b.n	8009900 <_fwalk_sglue+0x10>

0800992c <__sread>:
 800992c:	b510      	push	{r4, lr}
 800992e:	460c      	mov	r4, r1
 8009930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009934:	f000 f8d6 	bl	8009ae4 <_read_r>
 8009938:	2800      	cmp	r0, #0
 800993a:	bfab      	itete	ge
 800993c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800993e:	89a3      	ldrhlt	r3, [r4, #12]
 8009940:	181b      	addge	r3, r3, r0
 8009942:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009946:	bfac      	ite	ge
 8009948:	6563      	strge	r3, [r4, #84]	@ 0x54
 800994a:	81a3      	strhlt	r3, [r4, #12]
 800994c:	bd10      	pop	{r4, pc}

0800994e <__swrite>:
 800994e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009952:	461f      	mov	r7, r3
 8009954:	898b      	ldrh	r3, [r1, #12]
 8009956:	05db      	lsls	r3, r3, #23
 8009958:	4605      	mov	r5, r0
 800995a:	460c      	mov	r4, r1
 800995c:	4616      	mov	r6, r2
 800995e:	d505      	bpl.n	800996c <__swrite+0x1e>
 8009960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009964:	2302      	movs	r3, #2
 8009966:	2200      	movs	r2, #0
 8009968:	f000 f8aa 	bl	8009ac0 <_lseek_r>
 800996c:	89a3      	ldrh	r3, [r4, #12]
 800996e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009972:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009976:	81a3      	strh	r3, [r4, #12]
 8009978:	4632      	mov	r2, r6
 800997a:	463b      	mov	r3, r7
 800997c:	4628      	mov	r0, r5
 800997e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009982:	f000 b8c1 	b.w	8009b08 <_write_r>

08009986 <__sseek>:
 8009986:	b510      	push	{r4, lr}
 8009988:	460c      	mov	r4, r1
 800998a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800998e:	f000 f897 	bl	8009ac0 <_lseek_r>
 8009992:	1c43      	adds	r3, r0, #1
 8009994:	89a3      	ldrh	r3, [r4, #12]
 8009996:	bf15      	itete	ne
 8009998:	6560      	strne	r0, [r4, #84]	@ 0x54
 800999a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800999e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80099a2:	81a3      	strheq	r3, [r4, #12]
 80099a4:	bf18      	it	ne
 80099a6:	81a3      	strhne	r3, [r4, #12]
 80099a8:	bd10      	pop	{r4, pc}

080099aa <__sclose>:
 80099aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ae:	f000 b877 	b.w	8009aa0 <_close_r>

080099b2 <memset>:
 80099b2:	4402      	add	r2, r0
 80099b4:	4603      	mov	r3, r0
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d100      	bne.n	80099bc <memset+0xa>
 80099ba:	4770      	bx	lr
 80099bc:	f803 1b01 	strb.w	r1, [r3], #1
 80099c0:	e7f9      	b.n	80099b6 <memset+0x4>

080099c2 <strncmp>:
 80099c2:	b510      	push	{r4, lr}
 80099c4:	b16a      	cbz	r2, 80099e2 <strncmp+0x20>
 80099c6:	3901      	subs	r1, #1
 80099c8:	1884      	adds	r4, r0, r2
 80099ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d103      	bne.n	80099de <strncmp+0x1c>
 80099d6:	42a0      	cmp	r0, r4
 80099d8:	d001      	beq.n	80099de <strncmp+0x1c>
 80099da:	2a00      	cmp	r2, #0
 80099dc:	d1f5      	bne.n	80099ca <strncmp+0x8>
 80099de:	1ad0      	subs	r0, r2, r3
 80099e0:	bd10      	pop	{r4, pc}
 80099e2:	4610      	mov	r0, r2
 80099e4:	e7fc      	b.n	80099e0 <strncmp+0x1e>
	...

080099e8 <strtok>:
 80099e8:	4b16      	ldr	r3, [pc, #88]	@ (8009a44 <strtok+0x5c>)
 80099ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ee:	681f      	ldr	r7, [r3, #0]
 80099f0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80099f2:	4605      	mov	r5, r0
 80099f4:	460e      	mov	r6, r1
 80099f6:	b9ec      	cbnz	r4, 8009a34 <strtok+0x4c>
 80099f8:	2050      	movs	r0, #80	@ 0x50
 80099fa:	f000 fc7f 	bl	800a2fc <malloc>
 80099fe:	4602      	mov	r2, r0
 8009a00:	6478      	str	r0, [r7, #68]	@ 0x44
 8009a02:	b920      	cbnz	r0, 8009a0e <strtok+0x26>
 8009a04:	4b10      	ldr	r3, [pc, #64]	@ (8009a48 <strtok+0x60>)
 8009a06:	4811      	ldr	r0, [pc, #68]	@ (8009a4c <strtok+0x64>)
 8009a08:	215b      	movs	r1, #91	@ 0x5b
 8009a0a:	f000 f8d5 	bl	8009bb8 <__assert_func>
 8009a0e:	e9c0 4400 	strd	r4, r4, [r0]
 8009a12:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009a16:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009a1a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009a1e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009a22:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009a26:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009a2a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009a2e:	6184      	str	r4, [r0, #24]
 8009a30:	7704      	strb	r4, [r0, #28]
 8009a32:	6244      	str	r4, [r0, #36]	@ 0x24
 8009a34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a36:	4631      	mov	r1, r6
 8009a38:	4628      	mov	r0, r5
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a40:	f000 b806 	b.w	8009a50 <__strtok_r>
 8009a44:	200002c0 	.word	0x200002c0
 8009a48:	0800ba31 	.word	0x0800ba31
 8009a4c:	0800ba48 	.word	0x0800ba48

08009a50 <__strtok_r>:
 8009a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a52:	4604      	mov	r4, r0
 8009a54:	b908      	cbnz	r0, 8009a5a <__strtok_r+0xa>
 8009a56:	6814      	ldr	r4, [r2, #0]
 8009a58:	b144      	cbz	r4, 8009a6c <__strtok_r+0x1c>
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009a60:	460f      	mov	r7, r1
 8009a62:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009a66:	b91e      	cbnz	r6, 8009a70 <__strtok_r+0x20>
 8009a68:	b965      	cbnz	r5, 8009a84 <__strtok_r+0x34>
 8009a6a:	6015      	str	r5, [r2, #0]
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	e005      	b.n	8009a7c <__strtok_r+0x2c>
 8009a70:	42b5      	cmp	r5, r6
 8009a72:	d1f6      	bne.n	8009a62 <__strtok_r+0x12>
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1f0      	bne.n	8009a5a <__strtok_r+0xa>
 8009a78:	6014      	str	r4, [r2, #0]
 8009a7a:	7003      	strb	r3, [r0, #0]
 8009a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a7e:	461c      	mov	r4, r3
 8009a80:	e00c      	b.n	8009a9c <__strtok_r+0x4c>
 8009a82:	b915      	cbnz	r5, 8009a8a <__strtok_r+0x3a>
 8009a84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a88:	460e      	mov	r6, r1
 8009a8a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009a8e:	42ab      	cmp	r3, r5
 8009a90:	d1f7      	bne.n	8009a82 <__strtok_r+0x32>
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d0f3      	beq.n	8009a7e <__strtok_r+0x2e>
 8009a96:	2300      	movs	r3, #0
 8009a98:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009a9c:	6014      	str	r4, [r2, #0]
 8009a9e:	e7ed      	b.n	8009a7c <__strtok_r+0x2c>

08009aa0 <_close_r>:
 8009aa0:	b538      	push	{r3, r4, r5, lr}
 8009aa2:	4d06      	ldr	r5, [pc, #24]	@ (8009abc <_close_r+0x1c>)
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	4608      	mov	r0, r1
 8009aaa:	602b      	str	r3, [r5, #0]
 8009aac:	f7f7 ff7c 	bl	80019a8 <_close>
 8009ab0:	1c43      	adds	r3, r0, #1
 8009ab2:	d102      	bne.n	8009aba <_close_r+0x1a>
 8009ab4:	682b      	ldr	r3, [r5, #0]
 8009ab6:	b103      	cbz	r3, 8009aba <_close_r+0x1a>
 8009ab8:	6023      	str	r3, [r4, #0]
 8009aba:	bd38      	pop	{r3, r4, r5, pc}
 8009abc:	20000810 	.word	0x20000810

08009ac0 <_lseek_r>:
 8009ac0:	b538      	push	{r3, r4, r5, lr}
 8009ac2:	4d07      	ldr	r5, [pc, #28]	@ (8009ae0 <_lseek_r+0x20>)
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	4608      	mov	r0, r1
 8009ac8:	4611      	mov	r1, r2
 8009aca:	2200      	movs	r2, #0
 8009acc:	602a      	str	r2, [r5, #0]
 8009ace:	461a      	mov	r2, r3
 8009ad0:	f7f7 ff91 	bl	80019f6 <_lseek>
 8009ad4:	1c43      	adds	r3, r0, #1
 8009ad6:	d102      	bne.n	8009ade <_lseek_r+0x1e>
 8009ad8:	682b      	ldr	r3, [r5, #0]
 8009ada:	b103      	cbz	r3, 8009ade <_lseek_r+0x1e>
 8009adc:	6023      	str	r3, [r4, #0]
 8009ade:	bd38      	pop	{r3, r4, r5, pc}
 8009ae0:	20000810 	.word	0x20000810

08009ae4 <_read_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	4d07      	ldr	r5, [pc, #28]	@ (8009b04 <_read_r+0x20>)
 8009ae8:	4604      	mov	r4, r0
 8009aea:	4608      	mov	r0, r1
 8009aec:	4611      	mov	r1, r2
 8009aee:	2200      	movs	r2, #0
 8009af0:	602a      	str	r2, [r5, #0]
 8009af2:	461a      	mov	r2, r3
 8009af4:	f7f7 ff1f 	bl	8001936 <_read>
 8009af8:	1c43      	adds	r3, r0, #1
 8009afa:	d102      	bne.n	8009b02 <_read_r+0x1e>
 8009afc:	682b      	ldr	r3, [r5, #0]
 8009afe:	b103      	cbz	r3, 8009b02 <_read_r+0x1e>
 8009b00:	6023      	str	r3, [r4, #0]
 8009b02:	bd38      	pop	{r3, r4, r5, pc}
 8009b04:	20000810 	.word	0x20000810

08009b08 <_write_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	4d07      	ldr	r5, [pc, #28]	@ (8009b28 <_write_r+0x20>)
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	4608      	mov	r0, r1
 8009b10:	4611      	mov	r1, r2
 8009b12:	2200      	movs	r2, #0
 8009b14:	602a      	str	r2, [r5, #0]
 8009b16:	461a      	mov	r2, r3
 8009b18:	f7f7 ff2a 	bl	8001970 <_write>
 8009b1c:	1c43      	adds	r3, r0, #1
 8009b1e:	d102      	bne.n	8009b26 <_write_r+0x1e>
 8009b20:	682b      	ldr	r3, [r5, #0]
 8009b22:	b103      	cbz	r3, 8009b26 <_write_r+0x1e>
 8009b24:	6023      	str	r3, [r4, #0]
 8009b26:	bd38      	pop	{r3, r4, r5, pc}
 8009b28:	20000810 	.word	0x20000810

08009b2c <__errno>:
 8009b2c:	4b01      	ldr	r3, [pc, #4]	@ (8009b34 <__errno+0x8>)
 8009b2e:	6818      	ldr	r0, [r3, #0]
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	200002c0 	.word	0x200002c0

08009b38 <__libc_init_array>:
 8009b38:	b570      	push	{r4, r5, r6, lr}
 8009b3a:	4d0d      	ldr	r5, [pc, #52]	@ (8009b70 <__libc_init_array+0x38>)
 8009b3c:	4c0d      	ldr	r4, [pc, #52]	@ (8009b74 <__libc_init_array+0x3c>)
 8009b3e:	1b64      	subs	r4, r4, r5
 8009b40:	10a4      	asrs	r4, r4, #2
 8009b42:	2600      	movs	r6, #0
 8009b44:	42a6      	cmp	r6, r4
 8009b46:	d109      	bne.n	8009b5c <__libc_init_array+0x24>
 8009b48:	4d0b      	ldr	r5, [pc, #44]	@ (8009b78 <__libc_init_array+0x40>)
 8009b4a:	4c0c      	ldr	r4, [pc, #48]	@ (8009b7c <__libc_init_array+0x44>)
 8009b4c:	f001 fe72 	bl	800b834 <_init>
 8009b50:	1b64      	subs	r4, r4, r5
 8009b52:	10a4      	asrs	r4, r4, #2
 8009b54:	2600      	movs	r6, #0
 8009b56:	42a6      	cmp	r6, r4
 8009b58:	d105      	bne.n	8009b66 <__libc_init_array+0x2e>
 8009b5a:	bd70      	pop	{r4, r5, r6, pc}
 8009b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b60:	4798      	blx	r3
 8009b62:	3601      	adds	r6, #1
 8009b64:	e7ee      	b.n	8009b44 <__libc_init_array+0xc>
 8009b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b6a:	4798      	blx	r3
 8009b6c:	3601      	adds	r6, #1
 8009b6e:	e7f2      	b.n	8009b56 <__libc_init_array+0x1e>
 8009b70:	0800bcec 	.word	0x0800bcec
 8009b74:	0800bcec 	.word	0x0800bcec
 8009b78:	0800bcec 	.word	0x0800bcec
 8009b7c:	0800bcf0 	.word	0x0800bcf0

08009b80 <__retarget_lock_init_recursive>:
 8009b80:	4770      	bx	lr

08009b82 <__retarget_lock_acquire_recursive>:
 8009b82:	4770      	bx	lr

08009b84 <__retarget_lock_release_recursive>:
 8009b84:	4770      	bx	lr

08009b86 <memcpy>:
 8009b86:	440a      	add	r2, r1
 8009b88:	4291      	cmp	r1, r2
 8009b8a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009b8e:	d100      	bne.n	8009b92 <memcpy+0xc>
 8009b90:	4770      	bx	lr
 8009b92:	b510      	push	{r4, lr}
 8009b94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b9c:	4291      	cmp	r1, r2
 8009b9e:	d1f9      	bne.n	8009b94 <memcpy+0xe>
 8009ba0:	bd10      	pop	{r4, pc}
 8009ba2:	0000      	movs	r0, r0
 8009ba4:	0000      	movs	r0, r0
	...

08009ba8 <nan>:
 8009ba8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009bb0 <nan+0x8>
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	00000000 	.word	0x00000000
 8009bb4:	7ff80000 	.word	0x7ff80000

08009bb8 <__assert_func>:
 8009bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bba:	4614      	mov	r4, r2
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	4b09      	ldr	r3, [pc, #36]	@ (8009be4 <__assert_func+0x2c>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4605      	mov	r5, r0
 8009bc4:	68d8      	ldr	r0, [r3, #12]
 8009bc6:	b954      	cbnz	r4, 8009bde <__assert_func+0x26>
 8009bc8:	4b07      	ldr	r3, [pc, #28]	@ (8009be8 <__assert_func+0x30>)
 8009bca:	461c      	mov	r4, r3
 8009bcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009bd0:	9100      	str	r1, [sp, #0]
 8009bd2:	462b      	mov	r3, r5
 8009bd4:	4905      	ldr	r1, [pc, #20]	@ (8009bec <__assert_func+0x34>)
 8009bd6:	f001 f9c5 	bl	800af64 <fiprintf>
 8009bda:	f001 f9e5 	bl	800afa8 <abort>
 8009bde:	4b04      	ldr	r3, [pc, #16]	@ (8009bf0 <__assert_func+0x38>)
 8009be0:	e7f4      	b.n	8009bcc <__assert_func+0x14>
 8009be2:	bf00      	nop
 8009be4:	200002c0 	.word	0x200002c0
 8009be8:	0800bae5 	.word	0x0800bae5
 8009bec:	0800bab7 	.word	0x0800bab7
 8009bf0:	0800baaa 	.word	0x0800baaa

08009bf4 <_free_r>:
 8009bf4:	b538      	push	{r3, r4, r5, lr}
 8009bf6:	4605      	mov	r5, r0
 8009bf8:	2900      	cmp	r1, #0
 8009bfa:	d041      	beq.n	8009c80 <_free_r+0x8c>
 8009bfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c00:	1f0c      	subs	r4, r1, #4
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	bfb8      	it	lt
 8009c06:	18e4      	addlt	r4, r4, r3
 8009c08:	f000 fc34 	bl	800a474 <__malloc_lock>
 8009c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8009c84 <_free_r+0x90>)
 8009c0e:	6813      	ldr	r3, [r2, #0]
 8009c10:	b933      	cbnz	r3, 8009c20 <_free_r+0x2c>
 8009c12:	6063      	str	r3, [r4, #4]
 8009c14:	6014      	str	r4, [r2, #0]
 8009c16:	4628      	mov	r0, r5
 8009c18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c1c:	f000 bc30 	b.w	800a480 <__malloc_unlock>
 8009c20:	42a3      	cmp	r3, r4
 8009c22:	d908      	bls.n	8009c36 <_free_r+0x42>
 8009c24:	6820      	ldr	r0, [r4, #0]
 8009c26:	1821      	adds	r1, r4, r0
 8009c28:	428b      	cmp	r3, r1
 8009c2a:	bf01      	itttt	eq
 8009c2c:	6819      	ldreq	r1, [r3, #0]
 8009c2e:	685b      	ldreq	r3, [r3, #4]
 8009c30:	1809      	addeq	r1, r1, r0
 8009c32:	6021      	streq	r1, [r4, #0]
 8009c34:	e7ed      	b.n	8009c12 <_free_r+0x1e>
 8009c36:	461a      	mov	r2, r3
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	b10b      	cbz	r3, 8009c40 <_free_r+0x4c>
 8009c3c:	42a3      	cmp	r3, r4
 8009c3e:	d9fa      	bls.n	8009c36 <_free_r+0x42>
 8009c40:	6811      	ldr	r1, [r2, #0]
 8009c42:	1850      	adds	r0, r2, r1
 8009c44:	42a0      	cmp	r0, r4
 8009c46:	d10b      	bne.n	8009c60 <_free_r+0x6c>
 8009c48:	6820      	ldr	r0, [r4, #0]
 8009c4a:	4401      	add	r1, r0
 8009c4c:	1850      	adds	r0, r2, r1
 8009c4e:	4283      	cmp	r3, r0
 8009c50:	6011      	str	r1, [r2, #0]
 8009c52:	d1e0      	bne.n	8009c16 <_free_r+0x22>
 8009c54:	6818      	ldr	r0, [r3, #0]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	6053      	str	r3, [r2, #4]
 8009c5a:	4408      	add	r0, r1
 8009c5c:	6010      	str	r0, [r2, #0]
 8009c5e:	e7da      	b.n	8009c16 <_free_r+0x22>
 8009c60:	d902      	bls.n	8009c68 <_free_r+0x74>
 8009c62:	230c      	movs	r3, #12
 8009c64:	602b      	str	r3, [r5, #0]
 8009c66:	e7d6      	b.n	8009c16 <_free_r+0x22>
 8009c68:	6820      	ldr	r0, [r4, #0]
 8009c6a:	1821      	adds	r1, r4, r0
 8009c6c:	428b      	cmp	r3, r1
 8009c6e:	bf04      	itt	eq
 8009c70:	6819      	ldreq	r1, [r3, #0]
 8009c72:	685b      	ldreq	r3, [r3, #4]
 8009c74:	6063      	str	r3, [r4, #4]
 8009c76:	bf04      	itt	eq
 8009c78:	1809      	addeq	r1, r1, r0
 8009c7a:	6021      	streq	r1, [r4, #0]
 8009c7c:	6054      	str	r4, [r2, #4]
 8009c7e:	e7ca      	b.n	8009c16 <_free_r+0x22>
 8009c80:	bd38      	pop	{r3, r4, r5, pc}
 8009c82:	bf00      	nop
 8009c84:	2000081c 	.word	0x2000081c

08009c88 <rshift>:
 8009c88:	6903      	ldr	r3, [r0, #16]
 8009c8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009c8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c92:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009c96:	f100 0414 	add.w	r4, r0, #20
 8009c9a:	dd45      	ble.n	8009d28 <rshift+0xa0>
 8009c9c:	f011 011f 	ands.w	r1, r1, #31
 8009ca0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ca4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ca8:	d10c      	bne.n	8009cc4 <rshift+0x3c>
 8009caa:	f100 0710 	add.w	r7, r0, #16
 8009cae:	4629      	mov	r1, r5
 8009cb0:	42b1      	cmp	r1, r6
 8009cb2:	d334      	bcc.n	8009d1e <rshift+0x96>
 8009cb4:	1a9b      	subs	r3, r3, r2
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	1eea      	subs	r2, r5, #3
 8009cba:	4296      	cmp	r6, r2
 8009cbc:	bf38      	it	cc
 8009cbe:	2300      	movcc	r3, #0
 8009cc0:	4423      	add	r3, r4
 8009cc2:	e015      	b.n	8009cf0 <rshift+0x68>
 8009cc4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009cc8:	f1c1 0820 	rsb	r8, r1, #32
 8009ccc:	40cf      	lsrs	r7, r1
 8009cce:	f105 0e04 	add.w	lr, r5, #4
 8009cd2:	46a1      	mov	r9, r4
 8009cd4:	4576      	cmp	r6, lr
 8009cd6:	46f4      	mov	ip, lr
 8009cd8:	d815      	bhi.n	8009d06 <rshift+0x7e>
 8009cda:	1a9a      	subs	r2, r3, r2
 8009cdc:	0092      	lsls	r2, r2, #2
 8009cde:	3a04      	subs	r2, #4
 8009ce0:	3501      	adds	r5, #1
 8009ce2:	42ae      	cmp	r6, r5
 8009ce4:	bf38      	it	cc
 8009ce6:	2200      	movcc	r2, #0
 8009ce8:	18a3      	adds	r3, r4, r2
 8009cea:	50a7      	str	r7, [r4, r2]
 8009cec:	b107      	cbz	r7, 8009cf0 <rshift+0x68>
 8009cee:	3304      	adds	r3, #4
 8009cf0:	1b1a      	subs	r2, r3, r4
 8009cf2:	42a3      	cmp	r3, r4
 8009cf4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009cf8:	bf08      	it	eq
 8009cfa:	2300      	moveq	r3, #0
 8009cfc:	6102      	str	r2, [r0, #16]
 8009cfe:	bf08      	it	eq
 8009d00:	6143      	streq	r3, [r0, #20]
 8009d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d06:	f8dc c000 	ldr.w	ip, [ip]
 8009d0a:	fa0c fc08 	lsl.w	ip, ip, r8
 8009d0e:	ea4c 0707 	orr.w	r7, ip, r7
 8009d12:	f849 7b04 	str.w	r7, [r9], #4
 8009d16:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d1a:	40cf      	lsrs	r7, r1
 8009d1c:	e7da      	b.n	8009cd4 <rshift+0x4c>
 8009d1e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009d22:	f847 cf04 	str.w	ip, [r7, #4]!
 8009d26:	e7c3      	b.n	8009cb0 <rshift+0x28>
 8009d28:	4623      	mov	r3, r4
 8009d2a:	e7e1      	b.n	8009cf0 <rshift+0x68>

08009d2c <__hexdig_fun>:
 8009d2c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009d30:	2b09      	cmp	r3, #9
 8009d32:	d802      	bhi.n	8009d3a <__hexdig_fun+0xe>
 8009d34:	3820      	subs	r0, #32
 8009d36:	b2c0      	uxtb	r0, r0
 8009d38:	4770      	bx	lr
 8009d3a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009d3e:	2b05      	cmp	r3, #5
 8009d40:	d801      	bhi.n	8009d46 <__hexdig_fun+0x1a>
 8009d42:	3847      	subs	r0, #71	@ 0x47
 8009d44:	e7f7      	b.n	8009d36 <__hexdig_fun+0xa>
 8009d46:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009d4a:	2b05      	cmp	r3, #5
 8009d4c:	d801      	bhi.n	8009d52 <__hexdig_fun+0x26>
 8009d4e:	3827      	subs	r0, #39	@ 0x27
 8009d50:	e7f1      	b.n	8009d36 <__hexdig_fun+0xa>
 8009d52:	2000      	movs	r0, #0
 8009d54:	4770      	bx	lr
	...

08009d58 <__gethex>:
 8009d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5c:	b085      	sub	sp, #20
 8009d5e:	468a      	mov	sl, r1
 8009d60:	9302      	str	r3, [sp, #8]
 8009d62:	680b      	ldr	r3, [r1, #0]
 8009d64:	9001      	str	r0, [sp, #4]
 8009d66:	4690      	mov	r8, r2
 8009d68:	1c9c      	adds	r4, r3, #2
 8009d6a:	46a1      	mov	r9, r4
 8009d6c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009d70:	2830      	cmp	r0, #48	@ 0x30
 8009d72:	d0fa      	beq.n	8009d6a <__gethex+0x12>
 8009d74:	eba9 0303 	sub.w	r3, r9, r3
 8009d78:	f1a3 0b02 	sub.w	fp, r3, #2
 8009d7c:	f7ff ffd6 	bl	8009d2c <__hexdig_fun>
 8009d80:	4605      	mov	r5, r0
 8009d82:	2800      	cmp	r0, #0
 8009d84:	d168      	bne.n	8009e58 <__gethex+0x100>
 8009d86:	49a0      	ldr	r1, [pc, #640]	@ (800a008 <__gethex+0x2b0>)
 8009d88:	2201      	movs	r2, #1
 8009d8a:	4648      	mov	r0, r9
 8009d8c:	f7ff fe19 	bl	80099c2 <strncmp>
 8009d90:	4607      	mov	r7, r0
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d167      	bne.n	8009e66 <__gethex+0x10e>
 8009d96:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009d9a:	4626      	mov	r6, r4
 8009d9c:	f7ff ffc6 	bl	8009d2c <__hexdig_fun>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	d062      	beq.n	8009e6a <__gethex+0x112>
 8009da4:	4623      	mov	r3, r4
 8009da6:	7818      	ldrb	r0, [r3, #0]
 8009da8:	2830      	cmp	r0, #48	@ 0x30
 8009daa:	4699      	mov	r9, r3
 8009dac:	f103 0301 	add.w	r3, r3, #1
 8009db0:	d0f9      	beq.n	8009da6 <__gethex+0x4e>
 8009db2:	f7ff ffbb 	bl	8009d2c <__hexdig_fun>
 8009db6:	fab0 f580 	clz	r5, r0
 8009dba:	096d      	lsrs	r5, r5, #5
 8009dbc:	f04f 0b01 	mov.w	fp, #1
 8009dc0:	464a      	mov	r2, r9
 8009dc2:	4616      	mov	r6, r2
 8009dc4:	3201      	adds	r2, #1
 8009dc6:	7830      	ldrb	r0, [r6, #0]
 8009dc8:	f7ff ffb0 	bl	8009d2c <__hexdig_fun>
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	d1f8      	bne.n	8009dc2 <__gethex+0x6a>
 8009dd0:	498d      	ldr	r1, [pc, #564]	@ (800a008 <__gethex+0x2b0>)
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	4630      	mov	r0, r6
 8009dd6:	f7ff fdf4 	bl	80099c2 <strncmp>
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	d13f      	bne.n	8009e5e <__gethex+0x106>
 8009dde:	b944      	cbnz	r4, 8009df2 <__gethex+0x9a>
 8009de0:	1c74      	adds	r4, r6, #1
 8009de2:	4622      	mov	r2, r4
 8009de4:	4616      	mov	r6, r2
 8009de6:	3201      	adds	r2, #1
 8009de8:	7830      	ldrb	r0, [r6, #0]
 8009dea:	f7ff ff9f 	bl	8009d2c <__hexdig_fun>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	d1f8      	bne.n	8009de4 <__gethex+0x8c>
 8009df2:	1ba4      	subs	r4, r4, r6
 8009df4:	00a7      	lsls	r7, r4, #2
 8009df6:	7833      	ldrb	r3, [r6, #0]
 8009df8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009dfc:	2b50      	cmp	r3, #80	@ 0x50
 8009dfe:	d13e      	bne.n	8009e7e <__gethex+0x126>
 8009e00:	7873      	ldrb	r3, [r6, #1]
 8009e02:	2b2b      	cmp	r3, #43	@ 0x2b
 8009e04:	d033      	beq.n	8009e6e <__gethex+0x116>
 8009e06:	2b2d      	cmp	r3, #45	@ 0x2d
 8009e08:	d034      	beq.n	8009e74 <__gethex+0x11c>
 8009e0a:	1c71      	adds	r1, r6, #1
 8009e0c:	2400      	movs	r4, #0
 8009e0e:	7808      	ldrb	r0, [r1, #0]
 8009e10:	f7ff ff8c 	bl	8009d2c <__hexdig_fun>
 8009e14:	1e43      	subs	r3, r0, #1
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	2b18      	cmp	r3, #24
 8009e1a:	d830      	bhi.n	8009e7e <__gethex+0x126>
 8009e1c:	f1a0 0210 	sub.w	r2, r0, #16
 8009e20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e24:	f7ff ff82 	bl	8009d2c <__hexdig_fun>
 8009e28:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8009e2c:	fa5f fc8c 	uxtb.w	ip, ip
 8009e30:	f1bc 0f18 	cmp.w	ip, #24
 8009e34:	f04f 030a 	mov.w	r3, #10
 8009e38:	d91e      	bls.n	8009e78 <__gethex+0x120>
 8009e3a:	b104      	cbz	r4, 8009e3e <__gethex+0xe6>
 8009e3c:	4252      	negs	r2, r2
 8009e3e:	4417      	add	r7, r2
 8009e40:	f8ca 1000 	str.w	r1, [sl]
 8009e44:	b1ed      	cbz	r5, 8009e82 <__gethex+0x12a>
 8009e46:	f1bb 0f00 	cmp.w	fp, #0
 8009e4a:	bf0c      	ite	eq
 8009e4c:	2506      	moveq	r5, #6
 8009e4e:	2500      	movne	r5, #0
 8009e50:	4628      	mov	r0, r5
 8009e52:	b005      	add	sp, #20
 8009e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e58:	2500      	movs	r5, #0
 8009e5a:	462c      	mov	r4, r5
 8009e5c:	e7b0      	b.n	8009dc0 <__gethex+0x68>
 8009e5e:	2c00      	cmp	r4, #0
 8009e60:	d1c7      	bne.n	8009df2 <__gethex+0x9a>
 8009e62:	4627      	mov	r7, r4
 8009e64:	e7c7      	b.n	8009df6 <__gethex+0x9e>
 8009e66:	464e      	mov	r6, r9
 8009e68:	462f      	mov	r7, r5
 8009e6a:	2501      	movs	r5, #1
 8009e6c:	e7c3      	b.n	8009df6 <__gethex+0x9e>
 8009e6e:	2400      	movs	r4, #0
 8009e70:	1cb1      	adds	r1, r6, #2
 8009e72:	e7cc      	b.n	8009e0e <__gethex+0xb6>
 8009e74:	2401      	movs	r4, #1
 8009e76:	e7fb      	b.n	8009e70 <__gethex+0x118>
 8009e78:	fb03 0002 	mla	r0, r3, r2, r0
 8009e7c:	e7ce      	b.n	8009e1c <__gethex+0xc4>
 8009e7e:	4631      	mov	r1, r6
 8009e80:	e7de      	b.n	8009e40 <__gethex+0xe8>
 8009e82:	eba6 0309 	sub.w	r3, r6, r9
 8009e86:	3b01      	subs	r3, #1
 8009e88:	4629      	mov	r1, r5
 8009e8a:	2b07      	cmp	r3, #7
 8009e8c:	dc0a      	bgt.n	8009ea4 <__gethex+0x14c>
 8009e8e:	9801      	ldr	r0, [sp, #4]
 8009e90:	f000 fafc 	bl	800a48c <_Balloc>
 8009e94:	4604      	mov	r4, r0
 8009e96:	b940      	cbnz	r0, 8009eaa <__gethex+0x152>
 8009e98:	4b5c      	ldr	r3, [pc, #368]	@ (800a00c <__gethex+0x2b4>)
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	21e4      	movs	r1, #228	@ 0xe4
 8009e9e:	485c      	ldr	r0, [pc, #368]	@ (800a010 <__gethex+0x2b8>)
 8009ea0:	f7ff fe8a 	bl	8009bb8 <__assert_func>
 8009ea4:	3101      	adds	r1, #1
 8009ea6:	105b      	asrs	r3, r3, #1
 8009ea8:	e7ef      	b.n	8009e8a <__gethex+0x132>
 8009eaa:	f100 0a14 	add.w	sl, r0, #20
 8009eae:	2300      	movs	r3, #0
 8009eb0:	4655      	mov	r5, sl
 8009eb2:	469b      	mov	fp, r3
 8009eb4:	45b1      	cmp	r9, r6
 8009eb6:	d337      	bcc.n	8009f28 <__gethex+0x1d0>
 8009eb8:	f845 bb04 	str.w	fp, [r5], #4
 8009ebc:	eba5 050a 	sub.w	r5, r5, sl
 8009ec0:	10ad      	asrs	r5, r5, #2
 8009ec2:	6125      	str	r5, [r4, #16]
 8009ec4:	4658      	mov	r0, fp
 8009ec6:	f000 fbd3 	bl	800a670 <__hi0bits>
 8009eca:	016d      	lsls	r5, r5, #5
 8009ecc:	f8d8 6000 	ldr.w	r6, [r8]
 8009ed0:	1a2d      	subs	r5, r5, r0
 8009ed2:	42b5      	cmp	r5, r6
 8009ed4:	dd54      	ble.n	8009f80 <__gethex+0x228>
 8009ed6:	1bad      	subs	r5, r5, r6
 8009ed8:	4629      	mov	r1, r5
 8009eda:	4620      	mov	r0, r4
 8009edc:	f000 ff67 	bl	800adae <__any_on>
 8009ee0:	4681      	mov	r9, r0
 8009ee2:	b178      	cbz	r0, 8009f04 <__gethex+0x1ac>
 8009ee4:	1e6b      	subs	r3, r5, #1
 8009ee6:	1159      	asrs	r1, r3, #5
 8009ee8:	f003 021f 	and.w	r2, r3, #31
 8009eec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009ef0:	f04f 0901 	mov.w	r9, #1
 8009ef4:	fa09 f202 	lsl.w	r2, r9, r2
 8009ef8:	420a      	tst	r2, r1
 8009efa:	d003      	beq.n	8009f04 <__gethex+0x1ac>
 8009efc:	454b      	cmp	r3, r9
 8009efe:	dc36      	bgt.n	8009f6e <__gethex+0x216>
 8009f00:	f04f 0902 	mov.w	r9, #2
 8009f04:	4629      	mov	r1, r5
 8009f06:	4620      	mov	r0, r4
 8009f08:	f7ff febe 	bl	8009c88 <rshift>
 8009f0c:	442f      	add	r7, r5
 8009f0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f12:	42bb      	cmp	r3, r7
 8009f14:	da42      	bge.n	8009f9c <__gethex+0x244>
 8009f16:	9801      	ldr	r0, [sp, #4]
 8009f18:	4621      	mov	r1, r4
 8009f1a:	f000 faf7 	bl	800a50c <_Bfree>
 8009f1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f20:	2300      	movs	r3, #0
 8009f22:	6013      	str	r3, [r2, #0]
 8009f24:	25a3      	movs	r5, #163	@ 0xa3
 8009f26:	e793      	b.n	8009e50 <__gethex+0xf8>
 8009f28:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009f2c:	2a2e      	cmp	r2, #46	@ 0x2e
 8009f2e:	d012      	beq.n	8009f56 <__gethex+0x1fe>
 8009f30:	2b20      	cmp	r3, #32
 8009f32:	d104      	bne.n	8009f3e <__gethex+0x1e6>
 8009f34:	f845 bb04 	str.w	fp, [r5], #4
 8009f38:	f04f 0b00 	mov.w	fp, #0
 8009f3c:	465b      	mov	r3, fp
 8009f3e:	7830      	ldrb	r0, [r6, #0]
 8009f40:	9303      	str	r3, [sp, #12]
 8009f42:	f7ff fef3 	bl	8009d2c <__hexdig_fun>
 8009f46:	9b03      	ldr	r3, [sp, #12]
 8009f48:	f000 000f 	and.w	r0, r0, #15
 8009f4c:	4098      	lsls	r0, r3
 8009f4e:	ea4b 0b00 	orr.w	fp, fp, r0
 8009f52:	3304      	adds	r3, #4
 8009f54:	e7ae      	b.n	8009eb4 <__gethex+0x15c>
 8009f56:	45b1      	cmp	r9, r6
 8009f58:	d8ea      	bhi.n	8009f30 <__gethex+0x1d8>
 8009f5a:	492b      	ldr	r1, [pc, #172]	@ (800a008 <__gethex+0x2b0>)
 8009f5c:	9303      	str	r3, [sp, #12]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	4630      	mov	r0, r6
 8009f62:	f7ff fd2e 	bl	80099c2 <strncmp>
 8009f66:	9b03      	ldr	r3, [sp, #12]
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	d1e1      	bne.n	8009f30 <__gethex+0x1d8>
 8009f6c:	e7a2      	b.n	8009eb4 <__gethex+0x15c>
 8009f6e:	1ea9      	subs	r1, r5, #2
 8009f70:	4620      	mov	r0, r4
 8009f72:	f000 ff1c 	bl	800adae <__any_on>
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d0c2      	beq.n	8009f00 <__gethex+0x1a8>
 8009f7a:	f04f 0903 	mov.w	r9, #3
 8009f7e:	e7c1      	b.n	8009f04 <__gethex+0x1ac>
 8009f80:	da09      	bge.n	8009f96 <__gethex+0x23e>
 8009f82:	1b75      	subs	r5, r6, r5
 8009f84:	4621      	mov	r1, r4
 8009f86:	9801      	ldr	r0, [sp, #4]
 8009f88:	462a      	mov	r2, r5
 8009f8a:	f000 fcd7 	bl	800a93c <__lshift>
 8009f8e:	1b7f      	subs	r7, r7, r5
 8009f90:	4604      	mov	r4, r0
 8009f92:	f100 0a14 	add.w	sl, r0, #20
 8009f96:	f04f 0900 	mov.w	r9, #0
 8009f9a:	e7b8      	b.n	8009f0e <__gethex+0x1b6>
 8009f9c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009fa0:	42bd      	cmp	r5, r7
 8009fa2:	dd6f      	ble.n	800a084 <__gethex+0x32c>
 8009fa4:	1bed      	subs	r5, r5, r7
 8009fa6:	42ae      	cmp	r6, r5
 8009fa8:	dc34      	bgt.n	800a014 <__gethex+0x2bc>
 8009faa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d022      	beq.n	8009ff8 <__gethex+0x2a0>
 8009fb2:	2b03      	cmp	r3, #3
 8009fb4:	d024      	beq.n	800a000 <__gethex+0x2a8>
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d115      	bne.n	8009fe6 <__gethex+0x28e>
 8009fba:	42ae      	cmp	r6, r5
 8009fbc:	d113      	bne.n	8009fe6 <__gethex+0x28e>
 8009fbe:	2e01      	cmp	r6, #1
 8009fc0:	d10b      	bne.n	8009fda <__gethex+0x282>
 8009fc2:	9a02      	ldr	r2, [sp, #8]
 8009fc4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009fc8:	6013      	str	r3, [r2, #0]
 8009fca:	2301      	movs	r3, #1
 8009fcc:	6123      	str	r3, [r4, #16]
 8009fce:	f8ca 3000 	str.w	r3, [sl]
 8009fd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fd4:	2562      	movs	r5, #98	@ 0x62
 8009fd6:	601c      	str	r4, [r3, #0]
 8009fd8:	e73a      	b.n	8009e50 <__gethex+0xf8>
 8009fda:	1e71      	subs	r1, r6, #1
 8009fdc:	4620      	mov	r0, r4
 8009fde:	f000 fee6 	bl	800adae <__any_on>
 8009fe2:	2800      	cmp	r0, #0
 8009fe4:	d1ed      	bne.n	8009fc2 <__gethex+0x26a>
 8009fe6:	9801      	ldr	r0, [sp, #4]
 8009fe8:	4621      	mov	r1, r4
 8009fea:	f000 fa8f 	bl	800a50c <_Bfree>
 8009fee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	6013      	str	r3, [r2, #0]
 8009ff4:	2550      	movs	r5, #80	@ 0x50
 8009ff6:	e72b      	b.n	8009e50 <__gethex+0xf8>
 8009ff8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d1f3      	bne.n	8009fe6 <__gethex+0x28e>
 8009ffe:	e7e0      	b.n	8009fc2 <__gethex+0x26a>
 800a000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a002:	2b00      	cmp	r3, #0
 800a004:	d1dd      	bne.n	8009fc2 <__gethex+0x26a>
 800a006:	e7ee      	b.n	8009fe6 <__gethex+0x28e>
 800a008:	0800b8cc 	.word	0x0800b8cc
 800a00c:	0800bae6 	.word	0x0800bae6
 800a010:	0800baf7 	.word	0x0800baf7
 800a014:	1e6f      	subs	r7, r5, #1
 800a016:	f1b9 0f00 	cmp.w	r9, #0
 800a01a:	d130      	bne.n	800a07e <__gethex+0x326>
 800a01c:	b127      	cbz	r7, 800a028 <__gethex+0x2d0>
 800a01e:	4639      	mov	r1, r7
 800a020:	4620      	mov	r0, r4
 800a022:	f000 fec4 	bl	800adae <__any_on>
 800a026:	4681      	mov	r9, r0
 800a028:	117a      	asrs	r2, r7, #5
 800a02a:	2301      	movs	r3, #1
 800a02c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a030:	f007 071f 	and.w	r7, r7, #31
 800a034:	40bb      	lsls	r3, r7
 800a036:	4213      	tst	r3, r2
 800a038:	4629      	mov	r1, r5
 800a03a:	4620      	mov	r0, r4
 800a03c:	bf18      	it	ne
 800a03e:	f049 0902 	orrne.w	r9, r9, #2
 800a042:	f7ff fe21 	bl	8009c88 <rshift>
 800a046:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a04a:	1b76      	subs	r6, r6, r5
 800a04c:	2502      	movs	r5, #2
 800a04e:	f1b9 0f00 	cmp.w	r9, #0
 800a052:	d047      	beq.n	800a0e4 <__gethex+0x38c>
 800a054:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d015      	beq.n	800a088 <__gethex+0x330>
 800a05c:	2b03      	cmp	r3, #3
 800a05e:	d017      	beq.n	800a090 <__gethex+0x338>
 800a060:	2b01      	cmp	r3, #1
 800a062:	d109      	bne.n	800a078 <__gethex+0x320>
 800a064:	f019 0f02 	tst.w	r9, #2
 800a068:	d006      	beq.n	800a078 <__gethex+0x320>
 800a06a:	f8da 3000 	ldr.w	r3, [sl]
 800a06e:	ea49 0903 	orr.w	r9, r9, r3
 800a072:	f019 0f01 	tst.w	r9, #1
 800a076:	d10e      	bne.n	800a096 <__gethex+0x33e>
 800a078:	f045 0510 	orr.w	r5, r5, #16
 800a07c:	e032      	b.n	800a0e4 <__gethex+0x38c>
 800a07e:	f04f 0901 	mov.w	r9, #1
 800a082:	e7d1      	b.n	800a028 <__gethex+0x2d0>
 800a084:	2501      	movs	r5, #1
 800a086:	e7e2      	b.n	800a04e <__gethex+0x2f6>
 800a088:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a08a:	f1c3 0301 	rsb	r3, r3, #1
 800a08e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a090:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a092:	2b00      	cmp	r3, #0
 800a094:	d0f0      	beq.n	800a078 <__gethex+0x320>
 800a096:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a09a:	f104 0314 	add.w	r3, r4, #20
 800a09e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a0a2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a0a6:	f04f 0c00 	mov.w	ip, #0
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0b0:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800a0b4:	d01b      	beq.n	800a0ee <__gethex+0x396>
 800a0b6:	3201      	adds	r2, #1
 800a0b8:	6002      	str	r2, [r0, #0]
 800a0ba:	2d02      	cmp	r5, #2
 800a0bc:	f104 0314 	add.w	r3, r4, #20
 800a0c0:	d13c      	bne.n	800a13c <__gethex+0x3e4>
 800a0c2:	f8d8 2000 	ldr.w	r2, [r8]
 800a0c6:	3a01      	subs	r2, #1
 800a0c8:	42b2      	cmp	r2, r6
 800a0ca:	d109      	bne.n	800a0e0 <__gethex+0x388>
 800a0cc:	1171      	asrs	r1, r6, #5
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a0d4:	f006 061f 	and.w	r6, r6, #31
 800a0d8:	fa02 f606 	lsl.w	r6, r2, r6
 800a0dc:	421e      	tst	r6, r3
 800a0de:	d13a      	bne.n	800a156 <__gethex+0x3fe>
 800a0e0:	f045 0520 	orr.w	r5, r5, #32
 800a0e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0e6:	601c      	str	r4, [r3, #0]
 800a0e8:	9b02      	ldr	r3, [sp, #8]
 800a0ea:	601f      	str	r7, [r3, #0]
 800a0ec:	e6b0      	b.n	8009e50 <__gethex+0xf8>
 800a0ee:	4299      	cmp	r1, r3
 800a0f0:	f843 cc04 	str.w	ip, [r3, #-4]
 800a0f4:	d8d9      	bhi.n	800a0aa <__gethex+0x352>
 800a0f6:	68a3      	ldr	r3, [r4, #8]
 800a0f8:	459b      	cmp	fp, r3
 800a0fa:	db17      	blt.n	800a12c <__gethex+0x3d4>
 800a0fc:	6861      	ldr	r1, [r4, #4]
 800a0fe:	9801      	ldr	r0, [sp, #4]
 800a100:	3101      	adds	r1, #1
 800a102:	f000 f9c3 	bl	800a48c <_Balloc>
 800a106:	4681      	mov	r9, r0
 800a108:	b918      	cbnz	r0, 800a112 <__gethex+0x3ba>
 800a10a:	4b1a      	ldr	r3, [pc, #104]	@ (800a174 <__gethex+0x41c>)
 800a10c:	4602      	mov	r2, r0
 800a10e:	2184      	movs	r1, #132	@ 0x84
 800a110:	e6c5      	b.n	8009e9e <__gethex+0x146>
 800a112:	6922      	ldr	r2, [r4, #16]
 800a114:	3202      	adds	r2, #2
 800a116:	f104 010c 	add.w	r1, r4, #12
 800a11a:	0092      	lsls	r2, r2, #2
 800a11c:	300c      	adds	r0, #12
 800a11e:	f7ff fd32 	bl	8009b86 <memcpy>
 800a122:	4621      	mov	r1, r4
 800a124:	9801      	ldr	r0, [sp, #4]
 800a126:	f000 f9f1 	bl	800a50c <_Bfree>
 800a12a:	464c      	mov	r4, r9
 800a12c:	6923      	ldr	r3, [r4, #16]
 800a12e:	1c5a      	adds	r2, r3, #1
 800a130:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a134:	6122      	str	r2, [r4, #16]
 800a136:	2201      	movs	r2, #1
 800a138:	615a      	str	r2, [r3, #20]
 800a13a:	e7be      	b.n	800a0ba <__gethex+0x362>
 800a13c:	6922      	ldr	r2, [r4, #16]
 800a13e:	455a      	cmp	r2, fp
 800a140:	dd0b      	ble.n	800a15a <__gethex+0x402>
 800a142:	2101      	movs	r1, #1
 800a144:	4620      	mov	r0, r4
 800a146:	f7ff fd9f 	bl	8009c88 <rshift>
 800a14a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a14e:	3701      	adds	r7, #1
 800a150:	42bb      	cmp	r3, r7
 800a152:	f6ff aee0 	blt.w	8009f16 <__gethex+0x1be>
 800a156:	2501      	movs	r5, #1
 800a158:	e7c2      	b.n	800a0e0 <__gethex+0x388>
 800a15a:	f016 061f 	ands.w	r6, r6, #31
 800a15e:	d0fa      	beq.n	800a156 <__gethex+0x3fe>
 800a160:	4453      	add	r3, sl
 800a162:	f1c6 0620 	rsb	r6, r6, #32
 800a166:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a16a:	f000 fa81 	bl	800a670 <__hi0bits>
 800a16e:	42b0      	cmp	r0, r6
 800a170:	dbe7      	blt.n	800a142 <__gethex+0x3ea>
 800a172:	e7f0      	b.n	800a156 <__gethex+0x3fe>
 800a174:	0800bae6 	.word	0x0800bae6

0800a178 <L_shift>:
 800a178:	f1c2 0208 	rsb	r2, r2, #8
 800a17c:	0092      	lsls	r2, r2, #2
 800a17e:	b570      	push	{r4, r5, r6, lr}
 800a180:	f1c2 0620 	rsb	r6, r2, #32
 800a184:	6843      	ldr	r3, [r0, #4]
 800a186:	6804      	ldr	r4, [r0, #0]
 800a188:	fa03 f506 	lsl.w	r5, r3, r6
 800a18c:	432c      	orrs	r4, r5
 800a18e:	40d3      	lsrs	r3, r2
 800a190:	6004      	str	r4, [r0, #0]
 800a192:	f840 3f04 	str.w	r3, [r0, #4]!
 800a196:	4288      	cmp	r0, r1
 800a198:	d3f4      	bcc.n	800a184 <L_shift+0xc>
 800a19a:	bd70      	pop	{r4, r5, r6, pc}

0800a19c <__match>:
 800a19c:	b530      	push	{r4, r5, lr}
 800a19e:	6803      	ldr	r3, [r0, #0]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1a6:	b914      	cbnz	r4, 800a1ae <__match+0x12>
 800a1a8:	6003      	str	r3, [r0, #0]
 800a1aa:	2001      	movs	r0, #1
 800a1ac:	bd30      	pop	{r4, r5, pc}
 800a1ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1b2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a1b6:	2d19      	cmp	r5, #25
 800a1b8:	bf98      	it	ls
 800a1ba:	3220      	addls	r2, #32
 800a1bc:	42a2      	cmp	r2, r4
 800a1be:	d0f0      	beq.n	800a1a2 <__match+0x6>
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	e7f3      	b.n	800a1ac <__match+0x10>

0800a1c4 <__hexnan>:
 800a1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c8:	680b      	ldr	r3, [r1, #0]
 800a1ca:	6801      	ldr	r1, [r0, #0]
 800a1cc:	115e      	asrs	r6, r3, #5
 800a1ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a1d2:	f013 031f 	ands.w	r3, r3, #31
 800a1d6:	b087      	sub	sp, #28
 800a1d8:	bf18      	it	ne
 800a1da:	3604      	addne	r6, #4
 800a1dc:	2500      	movs	r5, #0
 800a1de:	1f37      	subs	r7, r6, #4
 800a1e0:	4682      	mov	sl, r0
 800a1e2:	4690      	mov	r8, r2
 800a1e4:	9301      	str	r3, [sp, #4]
 800a1e6:	f846 5c04 	str.w	r5, [r6, #-4]
 800a1ea:	46b9      	mov	r9, r7
 800a1ec:	463c      	mov	r4, r7
 800a1ee:	9502      	str	r5, [sp, #8]
 800a1f0:	46ab      	mov	fp, r5
 800a1f2:	784a      	ldrb	r2, [r1, #1]
 800a1f4:	1c4b      	adds	r3, r1, #1
 800a1f6:	9303      	str	r3, [sp, #12]
 800a1f8:	b342      	cbz	r2, 800a24c <__hexnan+0x88>
 800a1fa:	4610      	mov	r0, r2
 800a1fc:	9105      	str	r1, [sp, #20]
 800a1fe:	9204      	str	r2, [sp, #16]
 800a200:	f7ff fd94 	bl	8009d2c <__hexdig_fun>
 800a204:	2800      	cmp	r0, #0
 800a206:	d151      	bne.n	800a2ac <__hexnan+0xe8>
 800a208:	9a04      	ldr	r2, [sp, #16]
 800a20a:	9905      	ldr	r1, [sp, #20]
 800a20c:	2a20      	cmp	r2, #32
 800a20e:	d818      	bhi.n	800a242 <__hexnan+0x7e>
 800a210:	9b02      	ldr	r3, [sp, #8]
 800a212:	459b      	cmp	fp, r3
 800a214:	dd13      	ble.n	800a23e <__hexnan+0x7a>
 800a216:	454c      	cmp	r4, r9
 800a218:	d206      	bcs.n	800a228 <__hexnan+0x64>
 800a21a:	2d07      	cmp	r5, #7
 800a21c:	dc04      	bgt.n	800a228 <__hexnan+0x64>
 800a21e:	462a      	mov	r2, r5
 800a220:	4649      	mov	r1, r9
 800a222:	4620      	mov	r0, r4
 800a224:	f7ff ffa8 	bl	800a178 <L_shift>
 800a228:	4544      	cmp	r4, r8
 800a22a:	d952      	bls.n	800a2d2 <__hexnan+0x10e>
 800a22c:	2300      	movs	r3, #0
 800a22e:	f1a4 0904 	sub.w	r9, r4, #4
 800a232:	f844 3c04 	str.w	r3, [r4, #-4]
 800a236:	f8cd b008 	str.w	fp, [sp, #8]
 800a23a:	464c      	mov	r4, r9
 800a23c:	461d      	mov	r5, r3
 800a23e:	9903      	ldr	r1, [sp, #12]
 800a240:	e7d7      	b.n	800a1f2 <__hexnan+0x2e>
 800a242:	2a29      	cmp	r2, #41	@ 0x29
 800a244:	d157      	bne.n	800a2f6 <__hexnan+0x132>
 800a246:	3102      	adds	r1, #2
 800a248:	f8ca 1000 	str.w	r1, [sl]
 800a24c:	f1bb 0f00 	cmp.w	fp, #0
 800a250:	d051      	beq.n	800a2f6 <__hexnan+0x132>
 800a252:	454c      	cmp	r4, r9
 800a254:	d206      	bcs.n	800a264 <__hexnan+0xa0>
 800a256:	2d07      	cmp	r5, #7
 800a258:	dc04      	bgt.n	800a264 <__hexnan+0xa0>
 800a25a:	462a      	mov	r2, r5
 800a25c:	4649      	mov	r1, r9
 800a25e:	4620      	mov	r0, r4
 800a260:	f7ff ff8a 	bl	800a178 <L_shift>
 800a264:	4544      	cmp	r4, r8
 800a266:	d936      	bls.n	800a2d6 <__hexnan+0x112>
 800a268:	f1a8 0204 	sub.w	r2, r8, #4
 800a26c:	4623      	mov	r3, r4
 800a26e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a272:	f842 1f04 	str.w	r1, [r2, #4]!
 800a276:	429f      	cmp	r7, r3
 800a278:	d2f9      	bcs.n	800a26e <__hexnan+0xaa>
 800a27a:	1b3b      	subs	r3, r7, r4
 800a27c:	f023 0303 	bic.w	r3, r3, #3
 800a280:	3304      	adds	r3, #4
 800a282:	3401      	adds	r4, #1
 800a284:	3e03      	subs	r6, #3
 800a286:	42b4      	cmp	r4, r6
 800a288:	bf88      	it	hi
 800a28a:	2304      	movhi	r3, #4
 800a28c:	4443      	add	r3, r8
 800a28e:	2200      	movs	r2, #0
 800a290:	f843 2b04 	str.w	r2, [r3], #4
 800a294:	429f      	cmp	r7, r3
 800a296:	d2fb      	bcs.n	800a290 <__hexnan+0xcc>
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	b91b      	cbnz	r3, 800a2a4 <__hexnan+0xe0>
 800a29c:	4547      	cmp	r7, r8
 800a29e:	d128      	bne.n	800a2f2 <__hexnan+0x12e>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	603b      	str	r3, [r7, #0]
 800a2a4:	2005      	movs	r0, #5
 800a2a6:	b007      	add	sp, #28
 800a2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ac:	3501      	adds	r5, #1
 800a2ae:	2d08      	cmp	r5, #8
 800a2b0:	f10b 0b01 	add.w	fp, fp, #1
 800a2b4:	dd06      	ble.n	800a2c4 <__hexnan+0x100>
 800a2b6:	4544      	cmp	r4, r8
 800a2b8:	d9c1      	bls.n	800a23e <__hexnan+0x7a>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	f844 3c04 	str.w	r3, [r4, #-4]
 800a2c0:	2501      	movs	r5, #1
 800a2c2:	3c04      	subs	r4, #4
 800a2c4:	6822      	ldr	r2, [r4, #0]
 800a2c6:	f000 000f 	and.w	r0, r0, #15
 800a2ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a2ce:	6020      	str	r0, [r4, #0]
 800a2d0:	e7b5      	b.n	800a23e <__hexnan+0x7a>
 800a2d2:	2508      	movs	r5, #8
 800a2d4:	e7b3      	b.n	800a23e <__hexnan+0x7a>
 800a2d6:	9b01      	ldr	r3, [sp, #4]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d0dd      	beq.n	800a298 <__hexnan+0xd4>
 800a2dc:	f1c3 0320 	rsb	r3, r3, #32
 800a2e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a2e4:	40da      	lsrs	r2, r3
 800a2e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a2ea:	4013      	ands	r3, r2
 800a2ec:	f846 3c04 	str.w	r3, [r6, #-4]
 800a2f0:	e7d2      	b.n	800a298 <__hexnan+0xd4>
 800a2f2:	3f04      	subs	r7, #4
 800a2f4:	e7d0      	b.n	800a298 <__hexnan+0xd4>
 800a2f6:	2004      	movs	r0, #4
 800a2f8:	e7d5      	b.n	800a2a6 <__hexnan+0xe2>
	...

0800a2fc <malloc>:
 800a2fc:	4b02      	ldr	r3, [pc, #8]	@ (800a308 <malloc+0xc>)
 800a2fe:	4601      	mov	r1, r0
 800a300:	6818      	ldr	r0, [r3, #0]
 800a302:	f000 b825 	b.w	800a350 <_malloc_r>
 800a306:	bf00      	nop
 800a308:	200002c0 	.word	0x200002c0

0800a30c <sbrk_aligned>:
 800a30c:	b570      	push	{r4, r5, r6, lr}
 800a30e:	4e0f      	ldr	r6, [pc, #60]	@ (800a34c <sbrk_aligned+0x40>)
 800a310:	460c      	mov	r4, r1
 800a312:	6831      	ldr	r1, [r6, #0]
 800a314:	4605      	mov	r5, r0
 800a316:	b911      	cbnz	r1, 800a31e <sbrk_aligned+0x12>
 800a318:	f000 fe36 	bl	800af88 <_sbrk_r>
 800a31c:	6030      	str	r0, [r6, #0]
 800a31e:	4621      	mov	r1, r4
 800a320:	4628      	mov	r0, r5
 800a322:	f000 fe31 	bl	800af88 <_sbrk_r>
 800a326:	1c43      	adds	r3, r0, #1
 800a328:	d103      	bne.n	800a332 <sbrk_aligned+0x26>
 800a32a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a32e:	4620      	mov	r0, r4
 800a330:	bd70      	pop	{r4, r5, r6, pc}
 800a332:	1cc4      	adds	r4, r0, #3
 800a334:	f024 0403 	bic.w	r4, r4, #3
 800a338:	42a0      	cmp	r0, r4
 800a33a:	d0f8      	beq.n	800a32e <sbrk_aligned+0x22>
 800a33c:	1a21      	subs	r1, r4, r0
 800a33e:	4628      	mov	r0, r5
 800a340:	f000 fe22 	bl	800af88 <_sbrk_r>
 800a344:	3001      	adds	r0, #1
 800a346:	d1f2      	bne.n	800a32e <sbrk_aligned+0x22>
 800a348:	e7ef      	b.n	800a32a <sbrk_aligned+0x1e>
 800a34a:	bf00      	nop
 800a34c:	20000818 	.word	0x20000818

0800a350 <_malloc_r>:
 800a350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a354:	1ccd      	adds	r5, r1, #3
 800a356:	f025 0503 	bic.w	r5, r5, #3
 800a35a:	3508      	adds	r5, #8
 800a35c:	2d0c      	cmp	r5, #12
 800a35e:	bf38      	it	cc
 800a360:	250c      	movcc	r5, #12
 800a362:	2d00      	cmp	r5, #0
 800a364:	4606      	mov	r6, r0
 800a366:	db01      	blt.n	800a36c <_malloc_r+0x1c>
 800a368:	42a9      	cmp	r1, r5
 800a36a:	d904      	bls.n	800a376 <_malloc_r+0x26>
 800a36c:	230c      	movs	r3, #12
 800a36e:	6033      	str	r3, [r6, #0]
 800a370:	2000      	movs	r0, #0
 800a372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a376:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a44c <_malloc_r+0xfc>
 800a37a:	f000 f87b 	bl	800a474 <__malloc_lock>
 800a37e:	f8d8 3000 	ldr.w	r3, [r8]
 800a382:	461c      	mov	r4, r3
 800a384:	bb44      	cbnz	r4, 800a3d8 <_malloc_r+0x88>
 800a386:	4629      	mov	r1, r5
 800a388:	4630      	mov	r0, r6
 800a38a:	f7ff ffbf 	bl	800a30c <sbrk_aligned>
 800a38e:	1c43      	adds	r3, r0, #1
 800a390:	4604      	mov	r4, r0
 800a392:	d158      	bne.n	800a446 <_malloc_r+0xf6>
 800a394:	f8d8 4000 	ldr.w	r4, [r8]
 800a398:	4627      	mov	r7, r4
 800a39a:	2f00      	cmp	r7, #0
 800a39c:	d143      	bne.n	800a426 <_malloc_r+0xd6>
 800a39e:	2c00      	cmp	r4, #0
 800a3a0:	d04b      	beq.n	800a43a <_malloc_r+0xea>
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	4639      	mov	r1, r7
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	eb04 0903 	add.w	r9, r4, r3
 800a3ac:	f000 fdec 	bl	800af88 <_sbrk_r>
 800a3b0:	4581      	cmp	r9, r0
 800a3b2:	d142      	bne.n	800a43a <_malloc_r+0xea>
 800a3b4:	6821      	ldr	r1, [r4, #0]
 800a3b6:	1a6d      	subs	r5, r5, r1
 800a3b8:	4629      	mov	r1, r5
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	f7ff ffa6 	bl	800a30c <sbrk_aligned>
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	d03a      	beq.n	800a43a <_malloc_r+0xea>
 800a3c4:	6823      	ldr	r3, [r4, #0]
 800a3c6:	442b      	add	r3, r5
 800a3c8:	6023      	str	r3, [r4, #0]
 800a3ca:	f8d8 3000 	ldr.w	r3, [r8]
 800a3ce:	685a      	ldr	r2, [r3, #4]
 800a3d0:	bb62      	cbnz	r2, 800a42c <_malloc_r+0xdc>
 800a3d2:	f8c8 7000 	str.w	r7, [r8]
 800a3d6:	e00f      	b.n	800a3f8 <_malloc_r+0xa8>
 800a3d8:	6822      	ldr	r2, [r4, #0]
 800a3da:	1b52      	subs	r2, r2, r5
 800a3dc:	d420      	bmi.n	800a420 <_malloc_r+0xd0>
 800a3de:	2a0b      	cmp	r2, #11
 800a3e0:	d917      	bls.n	800a412 <_malloc_r+0xc2>
 800a3e2:	1961      	adds	r1, r4, r5
 800a3e4:	42a3      	cmp	r3, r4
 800a3e6:	6025      	str	r5, [r4, #0]
 800a3e8:	bf18      	it	ne
 800a3ea:	6059      	strne	r1, [r3, #4]
 800a3ec:	6863      	ldr	r3, [r4, #4]
 800a3ee:	bf08      	it	eq
 800a3f0:	f8c8 1000 	streq.w	r1, [r8]
 800a3f4:	5162      	str	r2, [r4, r5]
 800a3f6:	604b      	str	r3, [r1, #4]
 800a3f8:	4630      	mov	r0, r6
 800a3fa:	f000 f841 	bl	800a480 <__malloc_unlock>
 800a3fe:	f104 000b 	add.w	r0, r4, #11
 800a402:	1d23      	adds	r3, r4, #4
 800a404:	f020 0007 	bic.w	r0, r0, #7
 800a408:	1ac2      	subs	r2, r0, r3
 800a40a:	bf1c      	itt	ne
 800a40c:	1a1b      	subne	r3, r3, r0
 800a40e:	50a3      	strne	r3, [r4, r2]
 800a410:	e7af      	b.n	800a372 <_malloc_r+0x22>
 800a412:	6862      	ldr	r2, [r4, #4]
 800a414:	42a3      	cmp	r3, r4
 800a416:	bf0c      	ite	eq
 800a418:	f8c8 2000 	streq.w	r2, [r8]
 800a41c:	605a      	strne	r2, [r3, #4]
 800a41e:	e7eb      	b.n	800a3f8 <_malloc_r+0xa8>
 800a420:	4623      	mov	r3, r4
 800a422:	6864      	ldr	r4, [r4, #4]
 800a424:	e7ae      	b.n	800a384 <_malloc_r+0x34>
 800a426:	463c      	mov	r4, r7
 800a428:	687f      	ldr	r7, [r7, #4]
 800a42a:	e7b6      	b.n	800a39a <_malloc_r+0x4a>
 800a42c:	461a      	mov	r2, r3
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	42a3      	cmp	r3, r4
 800a432:	d1fb      	bne.n	800a42c <_malloc_r+0xdc>
 800a434:	2300      	movs	r3, #0
 800a436:	6053      	str	r3, [r2, #4]
 800a438:	e7de      	b.n	800a3f8 <_malloc_r+0xa8>
 800a43a:	230c      	movs	r3, #12
 800a43c:	6033      	str	r3, [r6, #0]
 800a43e:	4630      	mov	r0, r6
 800a440:	f000 f81e 	bl	800a480 <__malloc_unlock>
 800a444:	e794      	b.n	800a370 <_malloc_r+0x20>
 800a446:	6005      	str	r5, [r0, #0]
 800a448:	e7d6      	b.n	800a3f8 <_malloc_r+0xa8>
 800a44a:	bf00      	nop
 800a44c:	2000081c 	.word	0x2000081c

0800a450 <__ascii_mbtowc>:
 800a450:	b082      	sub	sp, #8
 800a452:	b901      	cbnz	r1, 800a456 <__ascii_mbtowc+0x6>
 800a454:	a901      	add	r1, sp, #4
 800a456:	b142      	cbz	r2, 800a46a <__ascii_mbtowc+0x1a>
 800a458:	b14b      	cbz	r3, 800a46e <__ascii_mbtowc+0x1e>
 800a45a:	7813      	ldrb	r3, [r2, #0]
 800a45c:	600b      	str	r3, [r1, #0]
 800a45e:	7812      	ldrb	r2, [r2, #0]
 800a460:	1e10      	subs	r0, r2, #0
 800a462:	bf18      	it	ne
 800a464:	2001      	movne	r0, #1
 800a466:	b002      	add	sp, #8
 800a468:	4770      	bx	lr
 800a46a:	4610      	mov	r0, r2
 800a46c:	e7fb      	b.n	800a466 <__ascii_mbtowc+0x16>
 800a46e:	f06f 0001 	mvn.w	r0, #1
 800a472:	e7f8      	b.n	800a466 <__ascii_mbtowc+0x16>

0800a474 <__malloc_lock>:
 800a474:	4801      	ldr	r0, [pc, #4]	@ (800a47c <__malloc_lock+0x8>)
 800a476:	f7ff bb84 	b.w	8009b82 <__retarget_lock_acquire_recursive>
 800a47a:	bf00      	nop
 800a47c:	20000814 	.word	0x20000814

0800a480 <__malloc_unlock>:
 800a480:	4801      	ldr	r0, [pc, #4]	@ (800a488 <__malloc_unlock+0x8>)
 800a482:	f7ff bb7f 	b.w	8009b84 <__retarget_lock_release_recursive>
 800a486:	bf00      	nop
 800a488:	20000814 	.word	0x20000814

0800a48c <_Balloc>:
 800a48c:	b570      	push	{r4, r5, r6, lr}
 800a48e:	69c6      	ldr	r6, [r0, #28]
 800a490:	4604      	mov	r4, r0
 800a492:	460d      	mov	r5, r1
 800a494:	b976      	cbnz	r6, 800a4b4 <_Balloc+0x28>
 800a496:	2010      	movs	r0, #16
 800a498:	f7ff ff30 	bl	800a2fc <malloc>
 800a49c:	4602      	mov	r2, r0
 800a49e:	61e0      	str	r0, [r4, #28]
 800a4a0:	b920      	cbnz	r0, 800a4ac <_Balloc+0x20>
 800a4a2:	4b18      	ldr	r3, [pc, #96]	@ (800a504 <_Balloc+0x78>)
 800a4a4:	4818      	ldr	r0, [pc, #96]	@ (800a508 <_Balloc+0x7c>)
 800a4a6:	216b      	movs	r1, #107	@ 0x6b
 800a4a8:	f7ff fb86 	bl	8009bb8 <__assert_func>
 800a4ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4b0:	6006      	str	r6, [r0, #0]
 800a4b2:	60c6      	str	r6, [r0, #12]
 800a4b4:	69e6      	ldr	r6, [r4, #28]
 800a4b6:	68f3      	ldr	r3, [r6, #12]
 800a4b8:	b183      	cbz	r3, 800a4dc <_Balloc+0x50>
 800a4ba:	69e3      	ldr	r3, [r4, #28]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4c2:	b9b8      	cbnz	r0, 800a4f4 <_Balloc+0x68>
 800a4c4:	2101      	movs	r1, #1
 800a4c6:	fa01 f605 	lsl.w	r6, r1, r5
 800a4ca:	1d72      	adds	r2, r6, #5
 800a4cc:	0092      	lsls	r2, r2, #2
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	f000 fd71 	bl	800afb6 <_calloc_r>
 800a4d4:	b160      	cbz	r0, 800a4f0 <_Balloc+0x64>
 800a4d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4da:	e00e      	b.n	800a4fa <_Balloc+0x6e>
 800a4dc:	2221      	movs	r2, #33	@ 0x21
 800a4de:	2104      	movs	r1, #4
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f000 fd68 	bl	800afb6 <_calloc_r>
 800a4e6:	69e3      	ldr	r3, [r4, #28]
 800a4e8:	60f0      	str	r0, [r6, #12]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1e4      	bne.n	800a4ba <_Balloc+0x2e>
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	bd70      	pop	{r4, r5, r6, pc}
 800a4f4:	6802      	ldr	r2, [r0, #0]
 800a4f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a500:	e7f7      	b.n	800a4f2 <_Balloc+0x66>
 800a502:	bf00      	nop
 800a504:	0800ba31 	.word	0x0800ba31
 800a508:	0800bb57 	.word	0x0800bb57

0800a50c <_Bfree>:
 800a50c:	b570      	push	{r4, r5, r6, lr}
 800a50e:	69c6      	ldr	r6, [r0, #28]
 800a510:	4605      	mov	r5, r0
 800a512:	460c      	mov	r4, r1
 800a514:	b976      	cbnz	r6, 800a534 <_Bfree+0x28>
 800a516:	2010      	movs	r0, #16
 800a518:	f7ff fef0 	bl	800a2fc <malloc>
 800a51c:	4602      	mov	r2, r0
 800a51e:	61e8      	str	r0, [r5, #28]
 800a520:	b920      	cbnz	r0, 800a52c <_Bfree+0x20>
 800a522:	4b09      	ldr	r3, [pc, #36]	@ (800a548 <_Bfree+0x3c>)
 800a524:	4809      	ldr	r0, [pc, #36]	@ (800a54c <_Bfree+0x40>)
 800a526:	218f      	movs	r1, #143	@ 0x8f
 800a528:	f7ff fb46 	bl	8009bb8 <__assert_func>
 800a52c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a530:	6006      	str	r6, [r0, #0]
 800a532:	60c6      	str	r6, [r0, #12]
 800a534:	b13c      	cbz	r4, 800a546 <_Bfree+0x3a>
 800a536:	69eb      	ldr	r3, [r5, #28]
 800a538:	6862      	ldr	r2, [r4, #4]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a540:	6021      	str	r1, [r4, #0]
 800a542:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a546:	bd70      	pop	{r4, r5, r6, pc}
 800a548:	0800ba31 	.word	0x0800ba31
 800a54c:	0800bb57 	.word	0x0800bb57

0800a550 <__multadd>:
 800a550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a554:	690d      	ldr	r5, [r1, #16]
 800a556:	4607      	mov	r7, r0
 800a558:	460c      	mov	r4, r1
 800a55a:	461e      	mov	r6, r3
 800a55c:	f101 0c14 	add.w	ip, r1, #20
 800a560:	2000      	movs	r0, #0
 800a562:	f8dc 3000 	ldr.w	r3, [ip]
 800a566:	b299      	uxth	r1, r3
 800a568:	fb02 6101 	mla	r1, r2, r1, r6
 800a56c:	0c1e      	lsrs	r6, r3, #16
 800a56e:	0c0b      	lsrs	r3, r1, #16
 800a570:	fb02 3306 	mla	r3, r2, r6, r3
 800a574:	b289      	uxth	r1, r1
 800a576:	3001      	adds	r0, #1
 800a578:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a57c:	4285      	cmp	r5, r0
 800a57e:	f84c 1b04 	str.w	r1, [ip], #4
 800a582:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a586:	dcec      	bgt.n	800a562 <__multadd+0x12>
 800a588:	b30e      	cbz	r6, 800a5ce <__multadd+0x7e>
 800a58a:	68a3      	ldr	r3, [r4, #8]
 800a58c:	42ab      	cmp	r3, r5
 800a58e:	dc19      	bgt.n	800a5c4 <__multadd+0x74>
 800a590:	6861      	ldr	r1, [r4, #4]
 800a592:	4638      	mov	r0, r7
 800a594:	3101      	adds	r1, #1
 800a596:	f7ff ff79 	bl	800a48c <_Balloc>
 800a59a:	4680      	mov	r8, r0
 800a59c:	b928      	cbnz	r0, 800a5aa <__multadd+0x5a>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a5d4 <__multadd+0x84>)
 800a5a2:	480d      	ldr	r0, [pc, #52]	@ (800a5d8 <__multadd+0x88>)
 800a5a4:	21ba      	movs	r1, #186	@ 0xba
 800a5a6:	f7ff fb07 	bl	8009bb8 <__assert_func>
 800a5aa:	6922      	ldr	r2, [r4, #16]
 800a5ac:	3202      	adds	r2, #2
 800a5ae:	f104 010c 	add.w	r1, r4, #12
 800a5b2:	0092      	lsls	r2, r2, #2
 800a5b4:	300c      	adds	r0, #12
 800a5b6:	f7ff fae6 	bl	8009b86 <memcpy>
 800a5ba:	4621      	mov	r1, r4
 800a5bc:	4638      	mov	r0, r7
 800a5be:	f7ff ffa5 	bl	800a50c <_Bfree>
 800a5c2:	4644      	mov	r4, r8
 800a5c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a5c8:	3501      	adds	r5, #1
 800a5ca:	615e      	str	r6, [r3, #20]
 800a5cc:	6125      	str	r5, [r4, #16]
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5d4:	0800bae6 	.word	0x0800bae6
 800a5d8:	0800bb57 	.word	0x0800bb57

0800a5dc <__s2b>:
 800a5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5e0:	460c      	mov	r4, r1
 800a5e2:	4615      	mov	r5, r2
 800a5e4:	461f      	mov	r7, r3
 800a5e6:	2209      	movs	r2, #9
 800a5e8:	3308      	adds	r3, #8
 800a5ea:	4606      	mov	r6, r0
 800a5ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	db09      	blt.n	800a60c <__s2b+0x30>
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	f7ff ff47 	bl	800a48c <_Balloc>
 800a5fe:	b940      	cbnz	r0, 800a612 <__s2b+0x36>
 800a600:	4602      	mov	r2, r0
 800a602:	4b19      	ldr	r3, [pc, #100]	@ (800a668 <__s2b+0x8c>)
 800a604:	4819      	ldr	r0, [pc, #100]	@ (800a66c <__s2b+0x90>)
 800a606:	21d3      	movs	r1, #211	@ 0xd3
 800a608:	f7ff fad6 	bl	8009bb8 <__assert_func>
 800a60c:	0052      	lsls	r2, r2, #1
 800a60e:	3101      	adds	r1, #1
 800a610:	e7f0      	b.n	800a5f4 <__s2b+0x18>
 800a612:	9b08      	ldr	r3, [sp, #32]
 800a614:	6143      	str	r3, [r0, #20]
 800a616:	2d09      	cmp	r5, #9
 800a618:	f04f 0301 	mov.w	r3, #1
 800a61c:	6103      	str	r3, [r0, #16]
 800a61e:	dd16      	ble.n	800a64e <__s2b+0x72>
 800a620:	f104 0909 	add.w	r9, r4, #9
 800a624:	46c8      	mov	r8, r9
 800a626:	442c      	add	r4, r5
 800a628:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a62c:	4601      	mov	r1, r0
 800a62e:	3b30      	subs	r3, #48	@ 0x30
 800a630:	220a      	movs	r2, #10
 800a632:	4630      	mov	r0, r6
 800a634:	f7ff ff8c 	bl	800a550 <__multadd>
 800a638:	45a0      	cmp	r8, r4
 800a63a:	d1f5      	bne.n	800a628 <__s2b+0x4c>
 800a63c:	f1a5 0408 	sub.w	r4, r5, #8
 800a640:	444c      	add	r4, r9
 800a642:	1b2d      	subs	r5, r5, r4
 800a644:	1963      	adds	r3, r4, r5
 800a646:	42bb      	cmp	r3, r7
 800a648:	db04      	blt.n	800a654 <__s2b+0x78>
 800a64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a64e:	340a      	adds	r4, #10
 800a650:	2509      	movs	r5, #9
 800a652:	e7f6      	b.n	800a642 <__s2b+0x66>
 800a654:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a658:	4601      	mov	r1, r0
 800a65a:	3b30      	subs	r3, #48	@ 0x30
 800a65c:	220a      	movs	r2, #10
 800a65e:	4630      	mov	r0, r6
 800a660:	f7ff ff76 	bl	800a550 <__multadd>
 800a664:	e7ee      	b.n	800a644 <__s2b+0x68>
 800a666:	bf00      	nop
 800a668:	0800bae6 	.word	0x0800bae6
 800a66c:	0800bb57 	.word	0x0800bb57

0800a670 <__hi0bits>:
 800a670:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a674:	4603      	mov	r3, r0
 800a676:	bf36      	itet	cc
 800a678:	0403      	lslcc	r3, r0, #16
 800a67a:	2000      	movcs	r0, #0
 800a67c:	2010      	movcc	r0, #16
 800a67e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a682:	bf3c      	itt	cc
 800a684:	021b      	lslcc	r3, r3, #8
 800a686:	3008      	addcc	r0, #8
 800a688:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a68c:	bf3c      	itt	cc
 800a68e:	011b      	lslcc	r3, r3, #4
 800a690:	3004      	addcc	r0, #4
 800a692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a696:	bf3c      	itt	cc
 800a698:	009b      	lslcc	r3, r3, #2
 800a69a:	3002      	addcc	r0, #2
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	db05      	blt.n	800a6ac <__hi0bits+0x3c>
 800a6a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a6a4:	f100 0001 	add.w	r0, r0, #1
 800a6a8:	bf08      	it	eq
 800a6aa:	2020      	moveq	r0, #32
 800a6ac:	4770      	bx	lr

0800a6ae <__lo0bits>:
 800a6ae:	6803      	ldr	r3, [r0, #0]
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	f013 0007 	ands.w	r0, r3, #7
 800a6b6:	d00b      	beq.n	800a6d0 <__lo0bits+0x22>
 800a6b8:	07d9      	lsls	r1, r3, #31
 800a6ba:	d421      	bmi.n	800a700 <__lo0bits+0x52>
 800a6bc:	0798      	lsls	r0, r3, #30
 800a6be:	bf49      	itett	mi
 800a6c0:	085b      	lsrmi	r3, r3, #1
 800a6c2:	089b      	lsrpl	r3, r3, #2
 800a6c4:	2001      	movmi	r0, #1
 800a6c6:	6013      	strmi	r3, [r2, #0]
 800a6c8:	bf5c      	itt	pl
 800a6ca:	6013      	strpl	r3, [r2, #0]
 800a6cc:	2002      	movpl	r0, #2
 800a6ce:	4770      	bx	lr
 800a6d0:	b299      	uxth	r1, r3
 800a6d2:	b909      	cbnz	r1, 800a6d8 <__lo0bits+0x2a>
 800a6d4:	0c1b      	lsrs	r3, r3, #16
 800a6d6:	2010      	movs	r0, #16
 800a6d8:	b2d9      	uxtb	r1, r3
 800a6da:	b909      	cbnz	r1, 800a6e0 <__lo0bits+0x32>
 800a6dc:	3008      	adds	r0, #8
 800a6de:	0a1b      	lsrs	r3, r3, #8
 800a6e0:	0719      	lsls	r1, r3, #28
 800a6e2:	bf04      	itt	eq
 800a6e4:	091b      	lsreq	r3, r3, #4
 800a6e6:	3004      	addeq	r0, #4
 800a6e8:	0799      	lsls	r1, r3, #30
 800a6ea:	bf04      	itt	eq
 800a6ec:	089b      	lsreq	r3, r3, #2
 800a6ee:	3002      	addeq	r0, #2
 800a6f0:	07d9      	lsls	r1, r3, #31
 800a6f2:	d403      	bmi.n	800a6fc <__lo0bits+0x4e>
 800a6f4:	085b      	lsrs	r3, r3, #1
 800a6f6:	f100 0001 	add.w	r0, r0, #1
 800a6fa:	d003      	beq.n	800a704 <__lo0bits+0x56>
 800a6fc:	6013      	str	r3, [r2, #0]
 800a6fe:	4770      	bx	lr
 800a700:	2000      	movs	r0, #0
 800a702:	4770      	bx	lr
 800a704:	2020      	movs	r0, #32
 800a706:	4770      	bx	lr

0800a708 <__i2b>:
 800a708:	b510      	push	{r4, lr}
 800a70a:	460c      	mov	r4, r1
 800a70c:	2101      	movs	r1, #1
 800a70e:	f7ff febd 	bl	800a48c <_Balloc>
 800a712:	4602      	mov	r2, r0
 800a714:	b928      	cbnz	r0, 800a722 <__i2b+0x1a>
 800a716:	4b05      	ldr	r3, [pc, #20]	@ (800a72c <__i2b+0x24>)
 800a718:	4805      	ldr	r0, [pc, #20]	@ (800a730 <__i2b+0x28>)
 800a71a:	f240 1145 	movw	r1, #325	@ 0x145
 800a71e:	f7ff fa4b 	bl	8009bb8 <__assert_func>
 800a722:	2301      	movs	r3, #1
 800a724:	6144      	str	r4, [r0, #20]
 800a726:	6103      	str	r3, [r0, #16]
 800a728:	bd10      	pop	{r4, pc}
 800a72a:	bf00      	nop
 800a72c:	0800bae6 	.word	0x0800bae6
 800a730:	0800bb57 	.word	0x0800bb57

0800a734 <__multiply>:
 800a734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a738:	4614      	mov	r4, r2
 800a73a:	690a      	ldr	r2, [r1, #16]
 800a73c:	6923      	ldr	r3, [r4, #16]
 800a73e:	429a      	cmp	r2, r3
 800a740:	bfa8      	it	ge
 800a742:	4623      	movge	r3, r4
 800a744:	460f      	mov	r7, r1
 800a746:	bfa4      	itt	ge
 800a748:	460c      	movge	r4, r1
 800a74a:	461f      	movge	r7, r3
 800a74c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a750:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a754:	68a3      	ldr	r3, [r4, #8]
 800a756:	6861      	ldr	r1, [r4, #4]
 800a758:	eb0a 0609 	add.w	r6, sl, r9
 800a75c:	42b3      	cmp	r3, r6
 800a75e:	b085      	sub	sp, #20
 800a760:	bfb8      	it	lt
 800a762:	3101      	addlt	r1, #1
 800a764:	f7ff fe92 	bl	800a48c <_Balloc>
 800a768:	b930      	cbnz	r0, 800a778 <__multiply+0x44>
 800a76a:	4602      	mov	r2, r0
 800a76c:	4b44      	ldr	r3, [pc, #272]	@ (800a880 <__multiply+0x14c>)
 800a76e:	4845      	ldr	r0, [pc, #276]	@ (800a884 <__multiply+0x150>)
 800a770:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a774:	f7ff fa20 	bl	8009bb8 <__assert_func>
 800a778:	f100 0514 	add.w	r5, r0, #20
 800a77c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a780:	462b      	mov	r3, r5
 800a782:	2200      	movs	r2, #0
 800a784:	4543      	cmp	r3, r8
 800a786:	d321      	bcc.n	800a7cc <__multiply+0x98>
 800a788:	f107 0114 	add.w	r1, r7, #20
 800a78c:	f104 0214 	add.w	r2, r4, #20
 800a790:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a794:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a798:	9302      	str	r3, [sp, #8]
 800a79a:	1b13      	subs	r3, r2, r4
 800a79c:	3b15      	subs	r3, #21
 800a79e:	f023 0303 	bic.w	r3, r3, #3
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	f104 0715 	add.w	r7, r4, #21
 800a7a8:	42ba      	cmp	r2, r7
 800a7aa:	bf38      	it	cc
 800a7ac:	2304      	movcc	r3, #4
 800a7ae:	9301      	str	r3, [sp, #4]
 800a7b0:	9b02      	ldr	r3, [sp, #8]
 800a7b2:	9103      	str	r1, [sp, #12]
 800a7b4:	428b      	cmp	r3, r1
 800a7b6:	d80c      	bhi.n	800a7d2 <__multiply+0x9e>
 800a7b8:	2e00      	cmp	r6, #0
 800a7ba:	dd03      	ble.n	800a7c4 <__multiply+0x90>
 800a7bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d05b      	beq.n	800a87c <__multiply+0x148>
 800a7c4:	6106      	str	r6, [r0, #16]
 800a7c6:	b005      	add	sp, #20
 800a7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7cc:	f843 2b04 	str.w	r2, [r3], #4
 800a7d0:	e7d8      	b.n	800a784 <__multiply+0x50>
 800a7d2:	f8b1 a000 	ldrh.w	sl, [r1]
 800a7d6:	f1ba 0f00 	cmp.w	sl, #0
 800a7da:	d024      	beq.n	800a826 <__multiply+0xf2>
 800a7dc:	f104 0e14 	add.w	lr, r4, #20
 800a7e0:	46a9      	mov	r9, r5
 800a7e2:	f04f 0c00 	mov.w	ip, #0
 800a7e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a7ea:	f8d9 3000 	ldr.w	r3, [r9]
 800a7ee:	fa1f fb87 	uxth.w	fp, r7
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	fb0a 330b 	mla	r3, sl, fp, r3
 800a7f8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a7fc:	f8d9 7000 	ldr.w	r7, [r9]
 800a800:	4463      	add	r3, ip
 800a802:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a806:	fb0a c70b 	mla	r7, sl, fp, ip
 800a80a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a80e:	b29b      	uxth	r3, r3
 800a810:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a814:	4572      	cmp	r2, lr
 800a816:	f849 3b04 	str.w	r3, [r9], #4
 800a81a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a81e:	d8e2      	bhi.n	800a7e6 <__multiply+0xb2>
 800a820:	9b01      	ldr	r3, [sp, #4]
 800a822:	f845 c003 	str.w	ip, [r5, r3]
 800a826:	9b03      	ldr	r3, [sp, #12]
 800a828:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a82c:	3104      	adds	r1, #4
 800a82e:	f1b9 0f00 	cmp.w	r9, #0
 800a832:	d021      	beq.n	800a878 <__multiply+0x144>
 800a834:	682b      	ldr	r3, [r5, #0]
 800a836:	f104 0c14 	add.w	ip, r4, #20
 800a83a:	46ae      	mov	lr, r5
 800a83c:	f04f 0a00 	mov.w	sl, #0
 800a840:	f8bc b000 	ldrh.w	fp, [ip]
 800a844:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a848:	fb09 770b 	mla	r7, r9, fp, r7
 800a84c:	4457      	add	r7, sl
 800a84e:	b29b      	uxth	r3, r3
 800a850:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a854:	f84e 3b04 	str.w	r3, [lr], #4
 800a858:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a85c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a860:	f8be 3000 	ldrh.w	r3, [lr]
 800a864:	fb09 330a 	mla	r3, r9, sl, r3
 800a868:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a86c:	4562      	cmp	r2, ip
 800a86e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a872:	d8e5      	bhi.n	800a840 <__multiply+0x10c>
 800a874:	9f01      	ldr	r7, [sp, #4]
 800a876:	51eb      	str	r3, [r5, r7]
 800a878:	3504      	adds	r5, #4
 800a87a:	e799      	b.n	800a7b0 <__multiply+0x7c>
 800a87c:	3e01      	subs	r6, #1
 800a87e:	e79b      	b.n	800a7b8 <__multiply+0x84>
 800a880:	0800bae6 	.word	0x0800bae6
 800a884:	0800bb57 	.word	0x0800bb57

0800a888 <__pow5mult>:
 800a888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a88c:	4615      	mov	r5, r2
 800a88e:	f012 0203 	ands.w	r2, r2, #3
 800a892:	4607      	mov	r7, r0
 800a894:	460e      	mov	r6, r1
 800a896:	d007      	beq.n	800a8a8 <__pow5mult+0x20>
 800a898:	4c25      	ldr	r4, [pc, #148]	@ (800a930 <__pow5mult+0xa8>)
 800a89a:	3a01      	subs	r2, #1
 800a89c:	2300      	movs	r3, #0
 800a89e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a8a2:	f7ff fe55 	bl	800a550 <__multadd>
 800a8a6:	4606      	mov	r6, r0
 800a8a8:	10ad      	asrs	r5, r5, #2
 800a8aa:	d03d      	beq.n	800a928 <__pow5mult+0xa0>
 800a8ac:	69fc      	ldr	r4, [r7, #28]
 800a8ae:	b97c      	cbnz	r4, 800a8d0 <__pow5mult+0x48>
 800a8b0:	2010      	movs	r0, #16
 800a8b2:	f7ff fd23 	bl	800a2fc <malloc>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	61f8      	str	r0, [r7, #28]
 800a8ba:	b928      	cbnz	r0, 800a8c8 <__pow5mult+0x40>
 800a8bc:	4b1d      	ldr	r3, [pc, #116]	@ (800a934 <__pow5mult+0xac>)
 800a8be:	481e      	ldr	r0, [pc, #120]	@ (800a938 <__pow5mult+0xb0>)
 800a8c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a8c4:	f7ff f978 	bl	8009bb8 <__assert_func>
 800a8c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8cc:	6004      	str	r4, [r0, #0]
 800a8ce:	60c4      	str	r4, [r0, #12]
 800a8d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a8d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a8d8:	b94c      	cbnz	r4, 800a8ee <__pow5mult+0x66>
 800a8da:	f240 2171 	movw	r1, #625	@ 0x271
 800a8de:	4638      	mov	r0, r7
 800a8e0:	f7ff ff12 	bl	800a708 <__i2b>
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	6003      	str	r3, [r0, #0]
 800a8ee:	f04f 0900 	mov.w	r9, #0
 800a8f2:	07eb      	lsls	r3, r5, #31
 800a8f4:	d50a      	bpl.n	800a90c <__pow5mult+0x84>
 800a8f6:	4631      	mov	r1, r6
 800a8f8:	4622      	mov	r2, r4
 800a8fa:	4638      	mov	r0, r7
 800a8fc:	f7ff ff1a 	bl	800a734 <__multiply>
 800a900:	4631      	mov	r1, r6
 800a902:	4680      	mov	r8, r0
 800a904:	4638      	mov	r0, r7
 800a906:	f7ff fe01 	bl	800a50c <_Bfree>
 800a90a:	4646      	mov	r6, r8
 800a90c:	106d      	asrs	r5, r5, #1
 800a90e:	d00b      	beq.n	800a928 <__pow5mult+0xa0>
 800a910:	6820      	ldr	r0, [r4, #0]
 800a912:	b938      	cbnz	r0, 800a924 <__pow5mult+0x9c>
 800a914:	4622      	mov	r2, r4
 800a916:	4621      	mov	r1, r4
 800a918:	4638      	mov	r0, r7
 800a91a:	f7ff ff0b 	bl	800a734 <__multiply>
 800a91e:	6020      	str	r0, [r4, #0]
 800a920:	f8c0 9000 	str.w	r9, [r0]
 800a924:	4604      	mov	r4, r0
 800a926:	e7e4      	b.n	800a8f2 <__pow5mult+0x6a>
 800a928:	4630      	mov	r0, r6
 800a92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a92e:	bf00      	nop
 800a930:	0800bbb0 	.word	0x0800bbb0
 800a934:	0800ba31 	.word	0x0800ba31
 800a938:	0800bb57 	.word	0x0800bb57

0800a93c <__lshift>:
 800a93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a940:	460c      	mov	r4, r1
 800a942:	6849      	ldr	r1, [r1, #4]
 800a944:	6923      	ldr	r3, [r4, #16]
 800a946:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a94a:	68a3      	ldr	r3, [r4, #8]
 800a94c:	4607      	mov	r7, r0
 800a94e:	4691      	mov	r9, r2
 800a950:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a954:	f108 0601 	add.w	r6, r8, #1
 800a958:	42b3      	cmp	r3, r6
 800a95a:	db0b      	blt.n	800a974 <__lshift+0x38>
 800a95c:	4638      	mov	r0, r7
 800a95e:	f7ff fd95 	bl	800a48c <_Balloc>
 800a962:	4605      	mov	r5, r0
 800a964:	b948      	cbnz	r0, 800a97a <__lshift+0x3e>
 800a966:	4602      	mov	r2, r0
 800a968:	4b28      	ldr	r3, [pc, #160]	@ (800aa0c <__lshift+0xd0>)
 800a96a:	4829      	ldr	r0, [pc, #164]	@ (800aa10 <__lshift+0xd4>)
 800a96c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a970:	f7ff f922 	bl	8009bb8 <__assert_func>
 800a974:	3101      	adds	r1, #1
 800a976:	005b      	lsls	r3, r3, #1
 800a978:	e7ee      	b.n	800a958 <__lshift+0x1c>
 800a97a:	2300      	movs	r3, #0
 800a97c:	f100 0114 	add.w	r1, r0, #20
 800a980:	f100 0210 	add.w	r2, r0, #16
 800a984:	4618      	mov	r0, r3
 800a986:	4553      	cmp	r3, sl
 800a988:	db33      	blt.n	800a9f2 <__lshift+0xb6>
 800a98a:	6920      	ldr	r0, [r4, #16]
 800a98c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a990:	f104 0314 	add.w	r3, r4, #20
 800a994:	f019 091f 	ands.w	r9, r9, #31
 800a998:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a99c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a9a0:	d02b      	beq.n	800a9fa <__lshift+0xbe>
 800a9a2:	f1c9 0e20 	rsb	lr, r9, #32
 800a9a6:	468a      	mov	sl, r1
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	6818      	ldr	r0, [r3, #0]
 800a9ac:	fa00 f009 	lsl.w	r0, r0, r9
 800a9b0:	4310      	orrs	r0, r2
 800a9b2:	f84a 0b04 	str.w	r0, [sl], #4
 800a9b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ba:	459c      	cmp	ip, r3
 800a9bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800a9c0:	d8f3      	bhi.n	800a9aa <__lshift+0x6e>
 800a9c2:	ebac 0304 	sub.w	r3, ip, r4
 800a9c6:	3b15      	subs	r3, #21
 800a9c8:	f023 0303 	bic.w	r3, r3, #3
 800a9cc:	3304      	adds	r3, #4
 800a9ce:	f104 0015 	add.w	r0, r4, #21
 800a9d2:	4584      	cmp	ip, r0
 800a9d4:	bf38      	it	cc
 800a9d6:	2304      	movcc	r3, #4
 800a9d8:	50ca      	str	r2, [r1, r3]
 800a9da:	b10a      	cbz	r2, 800a9e0 <__lshift+0xa4>
 800a9dc:	f108 0602 	add.w	r6, r8, #2
 800a9e0:	3e01      	subs	r6, #1
 800a9e2:	4638      	mov	r0, r7
 800a9e4:	612e      	str	r6, [r5, #16]
 800a9e6:	4621      	mov	r1, r4
 800a9e8:	f7ff fd90 	bl	800a50c <_Bfree>
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	e7c5      	b.n	800a986 <__lshift+0x4a>
 800a9fa:	3904      	subs	r1, #4
 800a9fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa00:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa04:	459c      	cmp	ip, r3
 800aa06:	d8f9      	bhi.n	800a9fc <__lshift+0xc0>
 800aa08:	e7ea      	b.n	800a9e0 <__lshift+0xa4>
 800aa0a:	bf00      	nop
 800aa0c:	0800bae6 	.word	0x0800bae6
 800aa10:	0800bb57 	.word	0x0800bb57

0800aa14 <__mcmp>:
 800aa14:	690a      	ldr	r2, [r1, #16]
 800aa16:	4603      	mov	r3, r0
 800aa18:	6900      	ldr	r0, [r0, #16]
 800aa1a:	1a80      	subs	r0, r0, r2
 800aa1c:	b530      	push	{r4, r5, lr}
 800aa1e:	d10e      	bne.n	800aa3e <__mcmp+0x2a>
 800aa20:	3314      	adds	r3, #20
 800aa22:	3114      	adds	r1, #20
 800aa24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aa28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aa2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aa30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aa34:	4295      	cmp	r5, r2
 800aa36:	d003      	beq.n	800aa40 <__mcmp+0x2c>
 800aa38:	d205      	bcs.n	800aa46 <__mcmp+0x32>
 800aa3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa3e:	bd30      	pop	{r4, r5, pc}
 800aa40:	42a3      	cmp	r3, r4
 800aa42:	d3f3      	bcc.n	800aa2c <__mcmp+0x18>
 800aa44:	e7fb      	b.n	800aa3e <__mcmp+0x2a>
 800aa46:	2001      	movs	r0, #1
 800aa48:	e7f9      	b.n	800aa3e <__mcmp+0x2a>
	...

0800aa4c <__mdiff>:
 800aa4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa50:	4689      	mov	r9, r1
 800aa52:	4606      	mov	r6, r0
 800aa54:	4611      	mov	r1, r2
 800aa56:	4648      	mov	r0, r9
 800aa58:	4614      	mov	r4, r2
 800aa5a:	f7ff ffdb 	bl	800aa14 <__mcmp>
 800aa5e:	1e05      	subs	r5, r0, #0
 800aa60:	d112      	bne.n	800aa88 <__mdiff+0x3c>
 800aa62:	4629      	mov	r1, r5
 800aa64:	4630      	mov	r0, r6
 800aa66:	f7ff fd11 	bl	800a48c <_Balloc>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	b928      	cbnz	r0, 800aa7a <__mdiff+0x2e>
 800aa6e:	4b3f      	ldr	r3, [pc, #252]	@ (800ab6c <__mdiff+0x120>)
 800aa70:	f240 2137 	movw	r1, #567	@ 0x237
 800aa74:	483e      	ldr	r0, [pc, #248]	@ (800ab70 <__mdiff+0x124>)
 800aa76:	f7ff f89f 	bl	8009bb8 <__assert_func>
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa80:	4610      	mov	r0, r2
 800aa82:	b003      	add	sp, #12
 800aa84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa88:	bfbc      	itt	lt
 800aa8a:	464b      	movlt	r3, r9
 800aa8c:	46a1      	movlt	r9, r4
 800aa8e:	4630      	mov	r0, r6
 800aa90:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aa94:	bfba      	itte	lt
 800aa96:	461c      	movlt	r4, r3
 800aa98:	2501      	movlt	r5, #1
 800aa9a:	2500      	movge	r5, #0
 800aa9c:	f7ff fcf6 	bl	800a48c <_Balloc>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	b918      	cbnz	r0, 800aaac <__mdiff+0x60>
 800aaa4:	4b31      	ldr	r3, [pc, #196]	@ (800ab6c <__mdiff+0x120>)
 800aaa6:	f240 2145 	movw	r1, #581	@ 0x245
 800aaaa:	e7e3      	b.n	800aa74 <__mdiff+0x28>
 800aaac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aab0:	6926      	ldr	r6, [r4, #16]
 800aab2:	60c5      	str	r5, [r0, #12]
 800aab4:	f109 0310 	add.w	r3, r9, #16
 800aab8:	f109 0514 	add.w	r5, r9, #20
 800aabc:	f104 0e14 	add.w	lr, r4, #20
 800aac0:	f100 0b14 	add.w	fp, r0, #20
 800aac4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aac8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aacc:	9301      	str	r3, [sp, #4]
 800aace:	46d9      	mov	r9, fp
 800aad0:	f04f 0c00 	mov.w	ip, #0
 800aad4:	9b01      	ldr	r3, [sp, #4]
 800aad6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aada:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aade:	9301      	str	r3, [sp, #4]
 800aae0:	fa1f f38a 	uxth.w	r3, sl
 800aae4:	4619      	mov	r1, r3
 800aae6:	b283      	uxth	r3, r0
 800aae8:	1acb      	subs	r3, r1, r3
 800aaea:	0c00      	lsrs	r0, r0, #16
 800aaec:	4463      	add	r3, ip
 800aaee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aaf2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aafc:	4576      	cmp	r6, lr
 800aafe:	f849 3b04 	str.w	r3, [r9], #4
 800ab02:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab06:	d8e5      	bhi.n	800aad4 <__mdiff+0x88>
 800ab08:	1b33      	subs	r3, r6, r4
 800ab0a:	3b15      	subs	r3, #21
 800ab0c:	f023 0303 	bic.w	r3, r3, #3
 800ab10:	3415      	adds	r4, #21
 800ab12:	3304      	adds	r3, #4
 800ab14:	42a6      	cmp	r6, r4
 800ab16:	bf38      	it	cc
 800ab18:	2304      	movcc	r3, #4
 800ab1a:	441d      	add	r5, r3
 800ab1c:	445b      	add	r3, fp
 800ab1e:	461e      	mov	r6, r3
 800ab20:	462c      	mov	r4, r5
 800ab22:	4544      	cmp	r4, r8
 800ab24:	d30e      	bcc.n	800ab44 <__mdiff+0xf8>
 800ab26:	f108 0103 	add.w	r1, r8, #3
 800ab2a:	1b49      	subs	r1, r1, r5
 800ab2c:	f021 0103 	bic.w	r1, r1, #3
 800ab30:	3d03      	subs	r5, #3
 800ab32:	45a8      	cmp	r8, r5
 800ab34:	bf38      	it	cc
 800ab36:	2100      	movcc	r1, #0
 800ab38:	440b      	add	r3, r1
 800ab3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab3e:	b191      	cbz	r1, 800ab66 <__mdiff+0x11a>
 800ab40:	6117      	str	r7, [r2, #16]
 800ab42:	e79d      	b.n	800aa80 <__mdiff+0x34>
 800ab44:	f854 1b04 	ldr.w	r1, [r4], #4
 800ab48:	46e6      	mov	lr, ip
 800ab4a:	0c08      	lsrs	r0, r1, #16
 800ab4c:	fa1c fc81 	uxtah	ip, ip, r1
 800ab50:	4471      	add	r1, lr
 800ab52:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ab56:	b289      	uxth	r1, r1
 800ab58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ab5c:	f846 1b04 	str.w	r1, [r6], #4
 800ab60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab64:	e7dd      	b.n	800ab22 <__mdiff+0xd6>
 800ab66:	3f01      	subs	r7, #1
 800ab68:	e7e7      	b.n	800ab3a <__mdiff+0xee>
 800ab6a:	bf00      	nop
 800ab6c:	0800bae6 	.word	0x0800bae6
 800ab70:	0800bb57 	.word	0x0800bb57

0800ab74 <__ulp>:
 800ab74:	b082      	sub	sp, #8
 800ab76:	ed8d 0b00 	vstr	d0, [sp]
 800ab7a:	9a01      	ldr	r2, [sp, #4]
 800ab7c:	4b0f      	ldr	r3, [pc, #60]	@ (800abbc <__ulp+0x48>)
 800ab7e:	4013      	ands	r3, r2
 800ab80:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	dc08      	bgt.n	800ab9a <__ulp+0x26>
 800ab88:	425b      	negs	r3, r3
 800ab8a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ab8e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ab92:	da04      	bge.n	800ab9e <__ulp+0x2a>
 800ab94:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ab98:	4113      	asrs	r3, r2
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	e008      	b.n	800abb0 <__ulp+0x3c>
 800ab9e:	f1a2 0314 	sub.w	r3, r2, #20
 800aba2:	2b1e      	cmp	r3, #30
 800aba4:	bfda      	itte	le
 800aba6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800abaa:	40da      	lsrle	r2, r3
 800abac:	2201      	movgt	r2, #1
 800abae:	2300      	movs	r3, #0
 800abb0:	4619      	mov	r1, r3
 800abb2:	4610      	mov	r0, r2
 800abb4:	ec41 0b10 	vmov	d0, r0, r1
 800abb8:	b002      	add	sp, #8
 800abba:	4770      	bx	lr
 800abbc:	7ff00000 	.word	0x7ff00000

0800abc0 <__b2d>:
 800abc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abc4:	6906      	ldr	r6, [r0, #16]
 800abc6:	f100 0814 	add.w	r8, r0, #20
 800abca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800abce:	1f37      	subs	r7, r6, #4
 800abd0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800abd4:	4610      	mov	r0, r2
 800abd6:	f7ff fd4b 	bl	800a670 <__hi0bits>
 800abda:	f1c0 0320 	rsb	r3, r0, #32
 800abde:	280a      	cmp	r0, #10
 800abe0:	600b      	str	r3, [r1, #0]
 800abe2:	491b      	ldr	r1, [pc, #108]	@ (800ac50 <__b2d+0x90>)
 800abe4:	dc15      	bgt.n	800ac12 <__b2d+0x52>
 800abe6:	f1c0 0c0b 	rsb	ip, r0, #11
 800abea:	fa22 f30c 	lsr.w	r3, r2, ip
 800abee:	45b8      	cmp	r8, r7
 800abf0:	ea43 0501 	orr.w	r5, r3, r1
 800abf4:	bf34      	ite	cc
 800abf6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800abfa:	2300      	movcs	r3, #0
 800abfc:	3015      	adds	r0, #21
 800abfe:	fa02 f000 	lsl.w	r0, r2, r0
 800ac02:	fa23 f30c 	lsr.w	r3, r3, ip
 800ac06:	4303      	orrs	r3, r0
 800ac08:	461c      	mov	r4, r3
 800ac0a:	ec45 4b10 	vmov	d0, r4, r5
 800ac0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac12:	45b8      	cmp	r8, r7
 800ac14:	bf3a      	itte	cc
 800ac16:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ac1a:	f1a6 0708 	subcc.w	r7, r6, #8
 800ac1e:	2300      	movcs	r3, #0
 800ac20:	380b      	subs	r0, #11
 800ac22:	d012      	beq.n	800ac4a <__b2d+0x8a>
 800ac24:	f1c0 0120 	rsb	r1, r0, #32
 800ac28:	fa23 f401 	lsr.w	r4, r3, r1
 800ac2c:	4082      	lsls	r2, r0
 800ac2e:	4322      	orrs	r2, r4
 800ac30:	4547      	cmp	r7, r8
 800ac32:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ac36:	bf8c      	ite	hi
 800ac38:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ac3c:	2200      	movls	r2, #0
 800ac3e:	4083      	lsls	r3, r0
 800ac40:	40ca      	lsrs	r2, r1
 800ac42:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ac46:	4313      	orrs	r3, r2
 800ac48:	e7de      	b.n	800ac08 <__b2d+0x48>
 800ac4a:	ea42 0501 	orr.w	r5, r2, r1
 800ac4e:	e7db      	b.n	800ac08 <__b2d+0x48>
 800ac50:	3ff00000 	.word	0x3ff00000

0800ac54 <__d2b>:
 800ac54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac58:	460f      	mov	r7, r1
 800ac5a:	2101      	movs	r1, #1
 800ac5c:	ec59 8b10 	vmov	r8, r9, d0
 800ac60:	4616      	mov	r6, r2
 800ac62:	f7ff fc13 	bl	800a48c <_Balloc>
 800ac66:	4604      	mov	r4, r0
 800ac68:	b930      	cbnz	r0, 800ac78 <__d2b+0x24>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	4b23      	ldr	r3, [pc, #140]	@ (800acfc <__d2b+0xa8>)
 800ac6e:	4824      	ldr	r0, [pc, #144]	@ (800ad00 <__d2b+0xac>)
 800ac70:	f240 310f 	movw	r1, #783	@ 0x30f
 800ac74:	f7fe ffa0 	bl	8009bb8 <__assert_func>
 800ac78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac80:	b10d      	cbz	r5, 800ac86 <__d2b+0x32>
 800ac82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac86:	9301      	str	r3, [sp, #4]
 800ac88:	f1b8 0300 	subs.w	r3, r8, #0
 800ac8c:	d023      	beq.n	800acd6 <__d2b+0x82>
 800ac8e:	4668      	mov	r0, sp
 800ac90:	9300      	str	r3, [sp, #0]
 800ac92:	f7ff fd0c 	bl	800a6ae <__lo0bits>
 800ac96:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ac9a:	b1d0      	cbz	r0, 800acd2 <__d2b+0x7e>
 800ac9c:	f1c0 0320 	rsb	r3, r0, #32
 800aca0:	fa02 f303 	lsl.w	r3, r2, r3
 800aca4:	430b      	orrs	r3, r1
 800aca6:	40c2      	lsrs	r2, r0
 800aca8:	6163      	str	r3, [r4, #20]
 800acaa:	9201      	str	r2, [sp, #4]
 800acac:	9b01      	ldr	r3, [sp, #4]
 800acae:	61a3      	str	r3, [r4, #24]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	bf0c      	ite	eq
 800acb4:	2201      	moveq	r2, #1
 800acb6:	2202      	movne	r2, #2
 800acb8:	6122      	str	r2, [r4, #16]
 800acba:	b1a5      	cbz	r5, 800ace6 <__d2b+0x92>
 800acbc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800acc0:	4405      	add	r5, r0
 800acc2:	603d      	str	r5, [r7, #0]
 800acc4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800acc8:	6030      	str	r0, [r6, #0]
 800acca:	4620      	mov	r0, r4
 800accc:	b003      	add	sp, #12
 800acce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acd2:	6161      	str	r1, [r4, #20]
 800acd4:	e7ea      	b.n	800acac <__d2b+0x58>
 800acd6:	a801      	add	r0, sp, #4
 800acd8:	f7ff fce9 	bl	800a6ae <__lo0bits>
 800acdc:	9b01      	ldr	r3, [sp, #4]
 800acde:	6163      	str	r3, [r4, #20]
 800ace0:	3020      	adds	r0, #32
 800ace2:	2201      	movs	r2, #1
 800ace4:	e7e8      	b.n	800acb8 <__d2b+0x64>
 800ace6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800acea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800acee:	6038      	str	r0, [r7, #0]
 800acf0:	6918      	ldr	r0, [r3, #16]
 800acf2:	f7ff fcbd 	bl	800a670 <__hi0bits>
 800acf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800acfa:	e7e5      	b.n	800acc8 <__d2b+0x74>
 800acfc:	0800bae6 	.word	0x0800bae6
 800ad00:	0800bb57 	.word	0x0800bb57

0800ad04 <__ratio>:
 800ad04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad08:	b085      	sub	sp, #20
 800ad0a:	e9cd 1000 	strd	r1, r0, [sp]
 800ad0e:	a902      	add	r1, sp, #8
 800ad10:	f7ff ff56 	bl	800abc0 <__b2d>
 800ad14:	9800      	ldr	r0, [sp, #0]
 800ad16:	a903      	add	r1, sp, #12
 800ad18:	ec55 4b10 	vmov	r4, r5, d0
 800ad1c:	f7ff ff50 	bl	800abc0 <__b2d>
 800ad20:	9b01      	ldr	r3, [sp, #4]
 800ad22:	6919      	ldr	r1, [r3, #16]
 800ad24:	9b00      	ldr	r3, [sp, #0]
 800ad26:	691b      	ldr	r3, [r3, #16]
 800ad28:	1ac9      	subs	r1, r1, r3
 800ad2a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ad2e:	1a9b      	subs	r3, r3, r2
 800ad30:	ec5b ab10 	vmov	sl, fp, d0
 800ad34:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	bfce      	itee	gt
 800ad3c:	462a      	movgt	r2, r5
 800ad3e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ad42:	465a      	movle	r2, fp
 800ad44:	462f      	mov	r7, r5
 800ad46:	46d9      	mov	r9, fp
 800ad48:	bfcc      	ite	gt
 800ad4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ad4e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ad52:	464b      	mov	r3, r9
 800ad54:	4652      	mov	r2, sl
 800ad56:	4620      	mov	r0, r4
 800ad58:	4639      	mov	r1, r7
 800ad5a:	f7f5 fdaf 	bl	80008bc <__aeabi_ddiv>
 800ad5e:	ec41 0b10 	vmov	d0, r0, r1
 800ad62:	b005      	add	sp, #20
 800ad64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad68 <__copybits>:
 800ad68:	3901      	subs	r1, #1
 800ad6a:	b570      	push	{r4, r5, r6, lr}
 800ad6c:	1149      	asrs	r1, r1, #5
 800ad6e:	6914      	ldr	r4, [r2, #16]
 800ad70:	3101      	adds	r1, #1
 800ad72:	f102 0314 	add.w	r3, r2, #20
 800ad76:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ad7a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ad7e:	1f05      	subs	r5, r0, #4
 800ad80:	42a3      	cmp	r3, r4
 800ad82:	d30c      	bcc.n	800ad9e <__copybits+0x36>
 800ad84:	1aa3      	subs	r3, r4, r2
 800ad86:	3b11      	subs	r3, #17
 800ad88:	f023 0303 	bic.w	r3, r3, #3
 800ad8c:	3211      	adds	r2, #17
 800ad8e:	42a2      	cmp	r2, r4
 800ad90:	bf88      	it	hi
 800ad92:	2300      	movhi	r3, #0
 800ad94:	4418      	add	r0, r3
 800ad96:	2300      	movs	r3, #0
 800ad98:	4288      	cmp	r0, r1
 800ad9a:	d305      	bcc.n	800ada8 <__copybits+0x40>
 800ad9c:	bd70      	pop	{r4, r5, r6, pc}
 800ad9e:	f853 6b04 	ldr.w	r6, [r3], #4
 800ada2:	f845 6f04 	str.w	r6, [r5, #4]!
 800ada6:	e7eb      	b.n	800ad80 <__copybits+0x18>
 800ada8:	f840 3b04 	str.w	r3, [r0], #4
 800adac:	e7f4      	b.n	800ad98 <__copybits+0x30>

0800adae <__any_on>:
 800adae:	f100 0214 	add.w	r2, r0, #20
 800adb2:	6900      	ldr	r0, [r0, #16]
 800adb4:	114b      	asrs	r3, r1, #5
 800adb6:	4298      	cmp	r0, r3
 800adb8:	b510      	push	{r4, lr}
 800adba:	db11      	blt.n	800ade0 <__any_on+0x32>
 800adbc:	dd0a      	ble.n	800add4 <__any_on+0x26>
 800adbe:	f011 011f 	ands.w	r1, r1, #31
 800adc2:	d007      	beq.n	800add4 <__any_on+0x26>
 800adc4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800adc8:	fa24 f001 	lsr.w	r0, r4, r1
 800adcc:	fa00 f101 	lsl.w	r1, r0, r1
 800add0:	428c      	cmp	r4, r1
 800add2:	d10b      	bne.n	800adec <__any_on+0x3e>
 800add4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800add8:	4293      	cmp	r3, r2
 800adda:	d803      	bhi.n	800ade4 <__any_on+0x36>
 800addc:	2000      	movs	r0, #0
 800adde:	bd10      	pop	{r4, pc}
 800ade0:	4603      	mov	r3, r0
 800ade2:	e7f7      	b.n	800add4 <__any_on+0x26>
 800ade4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ade8:	2900      	cmp	r1, #0
 800adea:	d0f5      	beq.n	800add8 <__any_on+0x2a>
 800adec:	2001      	movs	r0, #1
 800adee:	e7f6      	b.n	800adde <__any_on+0x30>

0800adf0 <__ascii_wctomb>:
 800adf0:	4603      	mov	r3, r0
 800adf2:	4608      	mov	r0, r1
 800adf4:	b141      	cbz	r1, 800ae08 <__ascii_wctomb+0x18>
 800adf6:	2aff      	cmp	r2, #255	@ 0xff
 800adf8:	d904      	bls.n	800ae04 <__ascii_wctomb+0x14>
 800adfa:	228a      	movs	r2, #138	@ 0x8a
 800adfc:	601a      	str	r2, [r3, #0]
 800adfe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae02:	4770      	bx	lr
 800ae04:	700a      	strb	r2, [r1, #0]
 800ae06:	2001      	movs	r0, #1
 800ae08:	4770      	bx	lr
	...

0800ae0c <__sflush_r>:
 800ae0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae14:	0716      	lsls	r6, r2, #28
 800ae16:	4605      	mov	r5, r0
 800ae18:	460c      	mov	r4, r1
 800ae1a:	d454      	bmi.n	800aec6 <__sflush_r+0xba>
 800ae1c:	684b      	ldr	r3, [r1, #4]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	dc02      	bgt.n	800ae28 <__sflush_r+0x1c>
 800ae22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	dd48      	ble.n	800aeba <__sflush_r+0xae>
 800ae28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae2a:	2e00      	cmp	r6, #0
 800ae2c:	d045      	beq.n	800aeba <__sflush_r+0xae>
 800ae2e:	2300      	movs	r3, #0
 800ae30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ae34:	682f      	ldr	r7, [r5, #0]
 800ae36:	6a21      	ldr	r1, [r4, #32]
 800ae38:	602b      	str	r3, [r5, #0]
 800ae3a:	d030      	beq.n	800ae9e <__sflush_r+0x92>
 800ae3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ae3e:	89a3      	ldrh	r3, [r4, #12]
 800ae40:	0759      	lsls	r1, r3, #29
 800ae42:	d505      	bpl.n	800ae50 <__sflush_r+0x44>
 800ae44:	6863      	ldr	r3, [r4, #4]
 800ae46:	1ad2      	subs	r2, r2, r3
 800ae48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae4a:	b10b      	cbz	r3, 800ae50 <__sflush_r+0x44>
 800ae4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae4e:	1ad2      	subs	r2, r2, r3
 800ae50:	2300      	movs	r3, #0
 800ae52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae54:	6a21      	ldr	r1, [r4, #32]
 800ae56:	4628      	mov	r0, r5
 800ae58:	47b0      	blx	r6
 800ae5a:	1c43      	adds	r3, r0, #1
 800ae5c:	89a3      	ldrh	r3, [r4, #12]
 800ae5e:	d106      	bne.n	800ae6e <__sflush_r+0x62>
 800ae60:	6829      	ldr	r1, [r5, #0]
 800ae62:	291d      	cmp	r1, #29
 800ae64:	d82b      	bhi.n	800aebe <__sflush_r+0xb2>
 800ae66:	4a2a      	ldr	r2, [pc, #168]	@ (800af10 <__sflush_r+0x104>)
 800ae68:	410a      	asrs	r2, r1
 800ae6a:	07d6      	lsls	r6, r2, #31
 800ae6c:	d427      	bmi.n	800aebe <__sflush_r+0xb2>
 800ae6e:	2200      	movs	r2, #0
 800ae70:	6062      	str	r2, [r4, #4]
 800ae72:	04d9      	lsls	r1, r3, #19
 800ae74:	6922      	ldr	r2, [r4, #16]
 800ae76:	6022      	str	r2, [r4, #0]
 800ae78:	d504      	bpl.n	800ae84 <__sflush_r+0x78>
 800ae7a:	1c42      	adds	r2, r0, #1
 800ae7c:	d101      	bne.n	800ae82 <__sflush_r+0x76>
 800ae7e:	682b      	ldr	r3, [r5, #0]
 800ae80:	b903      	cbnz	r3, 800ae84 <__sflush_r+0x78>
 800ae82:	6560      	str	r0, [r4, #84]	@ 0x54
 800ae84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae86:	602f      	str	r7, [r5, #0]
 800ae88:	b1b9      	cbz	r1, 800aeba <__sflush_r+0xae>
 800ae8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae8e:	4299      	cmp	r1, r3
 800ae90:	d002      	beq.n	800ae98 <__sflush_r+0x8c>
 800ae92:	4628      	mov	r0, r5
 800ae94:	f7fe feae 	bl	8009bf4 <_free_r>
 800ae98:	2300      	movs	r3, #0
 800ae9a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae9c:	e00d      	b.n	800aeba <__sflush_r+0xae>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	4628      	mov	r0, r5
 800aea2:	47b0      	blx	r6
 800aea4:	4602      	mov	r2, r0
 800aea6:	1c50      	adds	r0, r2, #1
 800aea8:	d1c9      	bne.n	800ae3e <__sflush_r+0x32>
 800aeaa:	682b      	ldr	r3, [r5, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d0c6      	beq.n	800ae3e <__sflush_r+0x32>
 800aeb0:	2b1d      	cmp	r3, #29
 800aeb2:	d001      	beq.n	800aeb8 <__sflush_r+0xac>
 800aeb4:	2b16      	cmp	r3, #22
 800aeb6:	d11e      	bne.n	800aef6 <__sflush_r+0xea>
 800aeb8:	602f      	str	r7, [r5, #0]
 800aeba:	2000      	movs	r0, #0
 800aebc:	e022      	b.n	800af04 <__sflush_r+0xf8>
 800aebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aec2:	b21b      	sxth	r3, r3
 800aec4:	e01b      	b.n	800aefe <__sflush_r+0xf2>
 800aec6:	690f      	ldr	r7, [r1, #16]
 800aec8:	2f00      	cmp	r7, #0
 800aeca:	d0f6      	beq.n	800aeba <__sflush_r+0xae>
 800aecc:	0793      	lsls	r3, r2, #30
 800aece:	680e      	ldr	r6, [r1, #0]
 800aed0:	bf08      	it	eq
 800aed2:	694b      	ldreq	r3, [r1, #20]
 800aed4:	600f      	str	r7, [r1, #0]
 800aed6:	bf18      	it	ne
 800aed8:	2300      	movne	r3, #0
 800aeda:	eba6 0807 	sub.w	r8, r6, r7
 800aede:	608b      	str	r3, [r1, #8]
 800aee0:	f1b8 0f00 	cmp.w	r8, #0
 800aee4:	dde9      	ble.n	800aeba <__sflush_r+0xae>
 800aee6:	6a21      	ldr	r1, [r4, #32]
 800aee8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aeea:	4643      	mov	r3, r8
 800aeec:	463a      	mov	r2, r7
 800aeee:	4628      	mov	r0, r5
 800aef0:	47b0      	blx	r6
 800aef2:	2800      	cmp	r0, #0
 800aef4:	dc08      	bgt.n	800af08 <__sflush_r+0xfc>
 800aef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aefa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aefe:	81a3      	strh	r3, [r4, #12]
 800af00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af08:	4407      	add	r7, r0
 800af0a:	eba8 0800 	sub.w	r8, r8, r0
 800af0e:	e7e7      	b.n	800aee0 <__sflush_r+0xd4>
 800af10:	dfbffffe 	.word	0xdfbffffe

0800af14 <_fflush_r>:
 800af14:	b538      	push	{r3, r4, r5, lr}
 800af16:	690b      	ldr	r3, [r1, #16]
 800af18:	4605      	mov	r5, r0
 800af1a:	460c      	mov	r4, r1
 800af1c:	b913      	cbnz	r3, 800af24 <_fflush_r+0x10>
 800af1e:	2500      	movs	r5, #0
 800af20:	4628      	mov	r0, r5
 800af22:	bd38      	pop	{r3, r4, r5, pc}
 800af24:	b118      	cbz	r0, 800af2e <_fflush_r+0x1a>
 800af26:	6a03      	ldr	r3, [r0, #32]
 800af28:	b90b      	cbnz	r3, 800af2e <_fflush_r+0x1a>
 800af2a:	f7fe fcc9 	bl	80098c0 <__sinit>
 800af2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d0f3      	beq.n	800af1e <_fflush_r+0xa>
 800af36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800af38:	07d0      	lsls	r0, r2, #31
 800af3a:	d404      	bmi.n	800af46 <_fflush_r+0x32>
 800af3c:	0599      	lsls	r1, r3, #22
 800af3e:	d402      	bmi.n	800af46 <_fflush_r+0x32>
 800af40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af42:	f7fe fe1e 	bl	8009b82 <__retarget_lock_acquire_recursive>
 800af46:	4628      	mov	r0, r5
 800af48:	4621      	mov	r1, r4
 800af4a:	f7ff ff5f 	bl	800ae0c <__sflush_r>
 800af4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af50:	07da      	lsls	r2, r3, #31
 800af52:	4605      	mov	r5, r0
 800af54:	d4e4      	bmi.n	800af20 <_fflush_r+0xc>
 800af56:	89a3      	ldrh	r3, [r4, #12]
 800af58:	059b      	lsls	r3, r3, #22
 800af5a:	d4e1      	bmi.n	800af20 <_fflush_r+0xc>
 800af5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af5e:	f7fe fe11 	bl	8009b84 <__retarget_lock_release_recursive>
 800af62:	e7dd      	b.n	800af20 <_fflush_r+0xc>

0800af64 <fiprintf>:
 800af64:	b40e      	push	{r1, r2, r3}
 800af66:	b503      	push	{r0, r1, lr}
 800af68:	4601      	mov	r1, r0
 800af6a:	ab03      	add	r3, sp, #12
 800af6c:	4805      	ldr	r0, [pc, #20]	@ (800af84 <fiprintf+0x20>)
 800af6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af72:	6800      	ldr	r0, [r0, #0]
 800af74:	9301      	str	r3, [sp, #4]
 800af76:	f000 f85b 	bl	800b030 <_vfiprintf_r>
 800af7a:	b002      	add	sp, #8
 800af7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800af80:	b003      	add	sp, #12
 800af82:	4770      	bx	lr
 800af84:	200002c0 	.word	0x200002c0

0800af88 <_sbrk_r>:
 800af88:	b538      	push	{r3, r4, r5, lr}
 800af8a:	4d06      	ldr	r5, [pc, #24]	@ (800afa4 <_sbrk_r+0x1c>)
 800af8c:	2300      	movs	r3, #0
 800af8e:	4604      	mov	r4, r0
 800af90:	4608      	mov	r0, r1
 800af92:	602b      	str	r3, [r5, #0]
 800af94:	f7f6 fd3c 	bl	8001a10 <_sbrk>
 800af98:	1c43      	adds	r3, r0, #1
 800af9a:	d102      	bne.n	800afa2 <_sbrk_r+0x1a>
 800af9c:	682b      	ldr	r3, [r5, #0]
 800af9e:	b103      	cbz	r3, 800afa2 <_sbrk_r+0x1a>
 800afa0:	6023      	str	r3, [r4, #0]
 800afa2:	bd38      	pop	{r3, r4, r5, pc}
 800afa4:	20000810 	.word	0x20000810

0800afa8 <abort>:
 800afa8:	b508      	push	{r3, lr}
 800afaa:	2006      	movs	r0, #6
 800afac:	f000 fba2 	bl	800b6f4 <raise>
 800afb0:	2001      	movs	r0, #1
 800afb2:	f7f6 fcb5 	bl	8001920 <_exit>

0800afb6 <_calloc_r>:
 800afb6:	b570      	push	{r4, r5, r6, lr}
 800afb8:	fba1 5402 	umull	r5, r4, r1, r2
 800afbc:	b93c      	cbnz	r4, 800afce <_calloc_r+0x18>
 800afbe:	4629      	mov	r1, r5
 800afc0:	f7ff f9c6 	bl	800a350 <_malloc_r>
 800afc4:	4606      	mov	r6, r0
 800afc6:	b928      	cbnz	r0, 800afd4 <_calloc_r+0x1e>
 800afc8:	2600      	movs	r6, #0
 800afca:	4630      	mov	r0, r6
 800afcc:	bd70      	pop	{r4, r5, r6, pc}
 800afce:	220c      	movs	r2, #12
 800afd0:	6002      	str	r2, [r0, #0]
 800afd2:	e7f9      	b.n	800afc8 <_calloc_r+0x12>
 800afd4:	462a      	mov	r2, r5
 800afd6:	4621      	mov	r1, r4
 800afd8:	f7fe fceb 	bl	80099b2 <memset>
 800afdc:	e7f5      	b.n	800afca <_calloc_r+0x14>

0800afde <__sfputc_r>:
 800afde:	6893      	ldr	r3, [r2, #8]
 800afe0:	3b01      	subs	r3, #1
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	b410      	push	{r4}
 800afe6:	6093      	str	r3, [r2, #8]
 800afe8:	da08      	bge.n	800affc <__sfputc_r+0x1e>
 800afea:	6994      	ldr	r4, [r2, #24]
 800afec:	42a3      	cmp	r3, r4
 800afee:	db01      	blt.n	800aff4 <__sfputc_r+0x16>
 800aff0:	290a      	cmp	r1, #10
 800aff2:	d103      	bne.n	800affc <__sfputc_r+0x1e>
 800aff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aff8:	f000 bac0 	b.w	800b57c <__swbuf_r>
 800affc:	6813      	ldr	r3, [r2, #0]
 800affe:	1c58      	adds	r0, r3, #1
 800b000:	6010      	str	r0, [r2, #0]
 800b002:	7019      	strb	r1, [r3, #0]
 800b004:	4608      	mov	r0, r1
 800b006:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <__sfputs_r>:
 800b00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00e:	4606      	mov	r6, r0
 800b010:	460f      	mov	r7, r1
 800b012:	4614      	mov	r4, r2
 800b014:	18d5      	adds	r5, r2, r3
 800b016:	42ac      	cmp	r4, r5
 800b018:	d101      	bne.n	800b01e <__sfputs_r+0x12>
 800b01a:	2000      	movs	r0, #0
 800b01c:	e007      	b.n	800b02e <__sfputs_r+0x22>
 800b01e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b022:	463a      	mov	r2, r7
 800b024:	4630      	mov	r0, r6
 800b026:	f7ff ffda 	bl	800afde <__sfputc_r>
 800b02a:	1c43      	adds	r3, r0, #1
 800b02c:	d1f3      	bne.n	800b016 <__sfputs_r+0xa>
 800b02e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b030 <_vfiprintf_r>:
 800b030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b034:	460d      	mov	r5, r1
 800b036:	b09d      	sub	sp, #116	@ 0x74
 800b038:	4614      	mov	r4, r2
 800b03a:	4698      	mov	r8, r3
 800b03c:	4606      	mov	r6, r0
 800b03e:	b118      	cbz	r0, 800b048 <_vfiprintf_r+0x18>
 800b040:	6a03      	ldr	r3, [r0, #32]
 800b042:	b90b      	cbnz	r3, 800b048 <_vfiprintf_r+0x18>
 800b044:	f7fe fc3c 	bl	80098c0 <__sinit>
 800b048:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b04a:	07d9      	lsls	r1, r3, #31
 800b04c:	d405      	bmi.n	800b05a <_vfiprintf_r+0x2a>
 800b04e:	89ab      	ldrh	r3, [r5, #12]
 800b050:	059a      	lsls	r2, r3, #22
 800b052:	d402      	bmi.n	800b05a <_vfiprintf_r+0x2a>
 800b054:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b056:	f7fe fd94 	bl	8009b82 <__retarget_lock_acquire_recursive>
 800b05a:	89ab      	ldrh	r3, [r5, #12]
 800b05c:	071b      	lsls	r3, r3, #28
 800b05e:	d501      	bpl.n	800b064 <_vfiprintf_r+0x34>
 800b060:	692b      	ldr	r3, [r5, #16]
 800b062:	b99b      	cbnz	r3, 800b08c <_vfiprintf_r+0x5c>
 800b064:	4629      	mov	r1, r5
 800b066:	4630      	mov	r0, r6
 800b068:	f000 fac6 	bl	800b5f8 <__swsetup_r>
 800b06c:	b170      	cbz	r0, 800b08c <_vfiprintf_r+0x5c>
 800b06e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b070:	07dc      	lsls	r4, r3, #31
 800b072:	d504      	bpl.n	800b07e <_vfiprintf_r+0x4e>
 800b074:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b078:	b01d      	add	sp, #116	@ 0x74
 800b07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b07e:	89ab      	ldrh	r3, [r5, #12]
 800b080:	0598      	lsls	r0, r3, #22
 800b082:	d4f7      	bmi.n	800b074 <_vfiprintf_r+0x44>
 800b084:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b086:	f7fe fd7d 	bl	8009b84 <__retarget_lock_release_recursive>
 800b08a:	e7f3      	b.n	800b074 <_vfiprintf_r+0x44>
 800b08c:	2300      	movs	r3, #0
 800b08e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b090:	2320      	movs	r3, #32
 800b092:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b096:	f8cd 800c 	str.w	r8, [sp, #12]
 800b09a:	2330      	movs	r3, #48	@ 0x30
 800b09c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b24c <_vfiprintf_r+0x21c>
 800b0a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0a4:	f04f 0901 	mov.w	r9, #1
 800b0a8:	4623      	mov	r3, r4
 800b0aa:	469a      	mov	sl, r3
 800b0ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0b0:	b10a      	cbz	r2, 800b0b6 <_vfiprintf_r+0x86>
 800b0b2:	2a25      	cmp	r2, #37	@ 0x25
 800b0b4:	d1f9      	bne.n	800b0aa <_vfiprintf_r+0x7a>
 800b0b6:	ebba 0b04 	subs.w	fp, sl, r4
 800b0ba:	d00b      	beq.n	800b0d4 <_vfiprintf_r+0xa4>
 800b0bc:	465b      	mov	r3, fp
 800b0be:	4622      	mov	r2, r4
 800b0c0:	4629      	mov	r1, r5
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	f7ff ffa2 	bl	800b00c <__sfputs_r>
 800b0c8:	3001      	adds	r0, #1
 800b0ca:	f000 80a7 	beq.w	800b21c <_vfiprintf_r+0x1ec>
 800b0ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0d0:	445a      	add	r2, fp
 800b0d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f000 809f 	beq.w	800b21c <_vfiprintf_r+0x1ec>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b0e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0e8:	f10a 0a01 	add.w	sl, sl, #1
 800b0ec:	9304      	str	r3, [sp, #16]
 800b0ee:	9307      	str	r3, [sp, #28]
 800b0f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0f6:	4654      	mov	r4, sl
 800b0f8:	2205      	movs	r2, #5
 800b0fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0fe:	4853      	ldr	r0, [pc, #332]	@ (800b24c <_vfiprintf_r+0x21c>)
 800b100:	f7f5 f8a6 	bl	8000250 <memchr>
 800b104:	9a04      	ldr	r2, [sp, #16]
 800b106:	b9d8      	cbnz	r0, 800b140 <_vfiprintf_r+0x110>
 800b108:	06d1      	lsls	r1, r2, #27
 800b10a:	bf44      	itt	mi
 800b10c:	2320      	movmi	r3, #32
 800b10e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b112:	0713      	lsls	r3, r2, #28
 800b114:	bf44      	itt	mi
 800b116:	232b      	movmi	r3, #43	@ 0x2b
 800b118:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b11c:	f89a 3000 	ldrb.w	r3, [sl]
 800b120:	2b2a      	cmp	r3, #42	@ 0x2a
 800b122:	d015      	beq.n	800b150 <_vfiprintf_r+0x120>
 800b124:	9a07      	ldr	r2, [sp, #28]
 800b126:	4654      	mov	r4, sl
 800b128:	2000      	movs	r0, #0
 800b12a:	f04f 0c0a 	mov.w	ip, #10
 800b12e:	4621      	mov	r1, r4
 800b130:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b134:	3b30      	subs	r3, #48	@ 0x30
 800b136:	2b09      	cmp	r3, #9
 800b138:	d94b      	bls.n	800b1d2 <_vfiprintf_r+0x1a2>
 800b13a:	b1b0      	cbz	r0, 800b16a <_vfiprintf_r+0x13a>
 800b13c:	9207      	str	r2, [sp, #28]
 800b13e:	e014      	b.n	800b16a <_vfiprintf_r+0x13a>
 800b140:	eba0 0308 	sub.w	r3, r0, r8
 800b144:	fa09 f303 	lsl.w	r3, r9, r3
 800b148:	4313      	orrs	r3, r2
 800b14a:	9304      	str	r3, [sp, #16]
 800b14c:	46a2      	mov	sl, r4
 800b14e:	e7d2      	b.n	800b0f6 <_vfiprintf_r+0xc6>
 800b150:	9b03      	ldr	r3, [sp, #12]
 800b152:	1d19      	adds	r1, r3, #4
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	9103      	str	r1, [sp, #12]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	bfbb      	ittet	lt
 800b15c:	425b      	neglt	r3, r3
 800b15e:	f042 0202 	orrlt.w	r2, r2, #2
 800b162:	9307      	strge	r3, [sp, #28]
 800b164:	9307      	strlt	r3, [sp, #28]
 800b166:	bfb8      	it	lt
 800b168:	9204      	strlt	r2, [sp, #16]
 800b16a:	7823      	ldrb	r3, [r4, #0]
 800b16c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b16e:	d10a      	bne.n	800b186 <_vfiprintf_r+0x156>
 800b170:	7863      	ldrb	r3, [r4, #1]
 800b172:	2b2a      	cmp	r3, #42	@ 0x2a
 800b174:	d132      	bne.n	800b1dc <_vfiprintf_r+0x1ac>
 800b176:	9b03      	ldr	r3, [sp, #12]
 800b178:	1d1a      	adds	r2, r3, #4
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	9203      	str	r2, [sp, #12]
 800b17e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b182:	3402      	adds	r4, #2
 800b184:	9305      	str	r3, [sp, #20]
 800b186:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b25c <_vfiprintf_r+0x22c>
 800b18a:	7821      	ldrb	r1, [r4, #0]
 800b18c:	2203      	movs	r2, #3
 800b18e:	4650      	mov	r0, sl
 800b190:	f7f5 f85e 	bl	8000250 <memchr>
 800b194:	b138      	cbz	r0, 800b1a6 <_vfiprintf_r+0x176>
 800b196:	9b04      	ldr	r3, [sp, #16]
 800b198:	eba0 000a 	sub.w	r0, r0, sl
 800b19c:	2240      	movs	r2, #64	@ 0x40
 800b19e:	4082      	lsls	r2, r0
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	3401      	adds	r4, #1
 800b1a4:	9304      	str	r3, [sp, #16]
 800b1a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1aa:	4829      	ldr	r0, [pc, #164]	@ (800b250 <_vfiprintf_r+0x220>)
 800b1ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1b0:	2206      	movs	r2, #6
 800b1b2:	f7f5 f84d 	bl	8000250 <memchr>
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	d03f      	beq.n	800b23a <_vfiprintf_r+0x20a>
 800b1ba:	4b26      	ldr	r3, [pc, #152]	@ (800b254 <_vfiprintf_r+0x224>)
 800b1bc:	bb1b      	cbnz	r3, 800b206 <_vfiprintf_r+0x1d6>
 800b1be:	9b03      	ldr	r3, [sp, #12]
 800b1c0:	3307      	adds	r3, #7
 800b1c2:	f023 0307 	bic.w	r3, r3, #7
 800b1c6:	3308      	adds	r3, #8
 800b1c8:	9303      	str	r3, [sp, #12]
 800b1ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1cc:	443b      	add	r3, r7
 800b1ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1d0:	e76a      	b.n	800b0a8 <_vfiprintf_r+0x78>
 800b1d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	2001      	movs	r0, #1
 800b1da:	e7a8      	b.n	800b12e <_vfiprintf_r+0xfe>
 800b1dc:	2300      	movs	r3, #0
 800b1de:	3401      	adds	r4, #1
 800b1e0:	9305      	str	r3, [sp, #20]
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	f04f 0c0a 	mov.w	ip, #10
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1ee:	3a30      	subs	r2, #48	@ 0x30
 800b1f0:	2a09      	cmp	r2, #9
 800b1f2:	d903      	bls.n	800b1fc <_vfiprintf_r+0x1cc>
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d0c6      	beq.n	800b186 <_vfiprintf_r+0x156>
 800b1f8:	9105      	str	r1, [sp, #20]
 800b1fa:	e7c4      	b.n	800b186 <_vfiprintf_r+0x156>
 800b1fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b200:	4604      	mov	r4, r0
 800b202:	2301      	movs	r3, #1
 800b204:	e7f0      	b.n	800b1e8 <_vfiprintf_r+0x1b8>
 800b206:	ab03      	add	r3, sp, #12
 800b208:	9300      	str	r3, [sp, #0]
 800b20a:	462a      	mov	r2, r5
 800b20c:	4b12      	ldr	r3, [pc, #72]	@ (800b258 <_vfiprintf_r+0x228>)
 800b20e:	a904      	add	r1, sp, #16
 800b210:	4630      	mov	r0, r6
 800b212:	f3af 8000 	nop.w
 800b216:	4607      	mov	r7, r0
 800b218:	1c78      	adds	r0, r7, #1
 800b21a:	d1d6      	bne.n	800b1ca <_vfiprintf_r+0x19a>
 800b21c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b21e:	07d9      	lsls	r1, r3, #31
 800b220:	d405      	bmi.n	800b22e <_vfiprintf_r+0x1fe>
 800b222:	89ab      	ldrh	r3, [r5, #12]
 800b224:	059a      	lsls	r2, r3, #22
 800b226:	d402      	bmi.n	800b22e <_vfiprintf_r+0x1fe>
 800b228:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b22a:	f7fe fcab 	bl	8009b84 <__retarget_lock_release_recursive>
 800b22e:	89ab      	ldrh	r3, [r5, #12]
 800b230:	065b      	lsls	r3, r3, #25
 800b232:	f53f af1f 	bmi.w	800b074 <_vfiprintf_r+0x44>
 800b236:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b238:	e71e      	b.n	800b078 <_vfiprintf_r+0x48>
 800b23a:	ab03      	add	r3, sp, #12
 800b23c:	9300      	str	r3, [sp, #0]
 800b23e:	462a      	mov	r2, r5
 800b240:	4b05      	ldr	r3, [pc, #20]	@ (800b258 <_vfiprintf_r+0x228>)
 800b242:	a904      	add	r1, sp, #16
 800b244:	4630      	mov	r0, r6
 800b246:	f000 f879 	bl	800b33c <_printf_i>
 800b24a:	e7e4      	b.n	800b216 <_vfiprintf_r+0x1e6>
 800b24c:	0800bcb0 	.word	0x0800bcb0
 800b250:	0800bcba 	.word	0x0800bcba
 800b254:	00000000 	.word	0x00000000
 800b258:	0800b00d 	.word	0x0800b00d
 800b25c:	0800bcb6 	.word	0x0800bcb6

0800b260 <_printf_common>:
 800b260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b264:	4616      	mov	r6, r2
 800b266:	4698      	mov	r8, r3
 800b268:	688a      	ldr	r2, [r1, #8]
 800b26a:	690b      	ldr	r3, [r1, #16]
 800b26c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b270:	4293      	cmp	r3, r2
 800b272:	bfb8      	it	lt
 800b274:	4613      	movlt	r3, r2
 800b276:	6033      	str	r3, [r6, #0]
 800b278:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b27c:	4607      	mov	r7, r0
 800b27e:	460c      	mov	r4, r1
 800b280:	b10a      	cbz	r2, 800b286 <_printf_common+0x26>
 800b282:	3301      	adds	r3, #1
 800b284:	6033      	str	r3, [r6, #0]
 800b286:	6823      	ldr	r3, [r4, #0]
 800b288:	0699      	lsls	r1, r3, #26
 800b28a:	bf42      	ittt	mi
 800b28c:	6833      	ldrmi	r3, [r6, #0]
 800b28e:	3302      	addmi	r3, #2
 800b290:	6033      	strmi	r3, [r6, #0]
 800b292:	6825      	ldr	r5, [r4, #0]
 800b294:	f015 0506 	ands.w	r5, r5, #6
 800b298:	d106      	bne.n	800b2a8 <_printf_common+0x48>
 800b29a:	f104 0a19 	add.w	sl, r4, #25
 800b29e:	68e3      	ldr	r3, [r4, #12]
 800b2a0:	6832      	ldr	r2, [r6, #0]
 800b2a2:	1a9b      	subs	r3, r3, r2
 800b2a4:	42ab      	cmp	r3, r5
 800b2a6:	dc26      	bgt.n	800b2f6 <_printf_common+0x96>
 800b2a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b2ac:	6822      	ldr	r2, [r4, #0]
 800b2ae:	3b00      	subs	r3, #0
 800b2b0:	bf18      	it	ne
 800b2b2:	2301      	movne	r3, #1
 800b2b4:	0692      	lsls	r2, r2, #26
 800b2b6:	d42b      	bmi.n	800b310 <_printf_common+0xb0>
 800b2b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2bc:	4641      	mov	r1, r8
 800b2be:	4638      	mov	r0, r7
 800b2c0:	47c8      	blx	r9
 800b2c2:	3001      	adds	r0, #1
 800b2c4:	d01e      	beq.n	800b304 <_printf_common+0xa4>
 800b2c6:	6823      	ldr	r3, [r4, #0]
 800b2c8:	6922      	ldr	r2, [r4, #16]
 800b2ca:	f003 0306 	and.w	r3, r3, #6
 800b2ce:	2b04      	cmp	r3, #4
 800b2d0:	bf02      	ittt	eq
 800b2d2:	68e5      	ldreq	r5, [r4, #12]
 800b2d4:	6833      	ldreq	r3, [r6, #0]
 800b2d6:	1aed      	subeq	r5, r5, r3
 800b2d8:	68a3      	ldr	r3, [r4, #8]
 800b2da:	bf0c      	ite	eq
 800b2dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2e0:	2500      	movne	r5, #0
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	bfc4      	itt	gt
 800b2e6:	1a9b      	subgt	r3, r3, r2
 800b2e8:	18ed      	addgt	r5, r5, r3
 800b2ea:	2600      	movs	r6, #0
 800b2ec:	341a      	adds	r4, #26
 800b2ee:	42b5      	cmp	r5, r6
 800b2f0:	d11a      	bne.n	800b328 <_printf_common+0xc8>
 800b2f2:	2000      	movs	r0, #0
 800b2f4:	e008      	b.n	800b308 <_printf_common+0xa8>
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	4652      	mov	r2, sl
 800b2fa:	4641      	mov	r1, r8
 800b2fc:	4638      	mov	r0, r7
 800b2fe:	47c8      	blx	r9
 800b300:	3001      	adds	r0, #1
 800b302:	d103      	bne.n	800b30c <_printf_common+0xac>
 800b304:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b30c:	3501      	adds	r5, #1
 800b30e:	e7c6      	b.n	800b29e <_printf_common+0x3e>
 800b310:	18e1      	adds	r1, r4, r3
 800b312:	1c5a      	adds	r2, r3, #1
 800b314:	2030      	movs	r0, #48	@ 0x30
 800b316:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b31a:	4422      	add	r2, r4
 800b31c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b320:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b324:	3302      	adds	r3, #2
 800b326:	e7c7      	b.n	800b2b8 <_printf_common+0x58>
 800b328:	2301      	movs	r3, #1
 800b32a:	4622      	mov	r2, r4
 800b32c:	4641      	mov	r1, r8
 800b32e:	4638      	mov	r0, r7
 800b330:	47c8      	blx	r9
 800b332:	3001      	adds	r0, #1
 800b334:	d0e6      	beq.n	800b304 <_printf_common+0xa4>
 800b336:	3601      	adds	r6, #1
 800b338:	e7d9      	b.n	800b2ee <_printf_common+0x8e>
	...

0800b33c <_printf_i>:
 800b33c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b340:	7e0f      	ldrb	r7, [r1, #24]
 800b342:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b344:	2f78      	cmp	r7, #120	@ 0x78
 800b346:	4691      	mov	r9, r2
 800b348:	4680      	mov	r8, r0
 800b34a:	460c      	mov	r4, r1
 800b34c:	469a      	mov	sl, r3
 800b34e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b352:	d807      	bhi.n	800b364 <_printf_i+0x28>
 800b354:	2f62      	cmp	r7, #98	@ 0x62
 800b356:	d80a      	bhi.n	800b36e <_printf_i+0x32>
 800b358:	2f00      	cmp	r7, #0
 800b35a:	f000 80d2 	beq.w	800b502 <_printf_i+0x1c6>
 800b35e:	2f58      	cmp	r7, #88	@ 0x58
 800b360:	f000 80b9 	beq.w	800b4d6 <_printf_i+0x19a>
 800b364:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b368:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b36c:	e03a      	b.n	800b3e4 <_printf_i+0xa8>
 800b36e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b372:	2b15      	cmp	r3, #21
 800b374:	d8f6      	bhi.n	800b364 <_printf_i+0x28>
 800b376:	a101      	add	r1, pc, #4	@ (adr r1, 800b37c <_printf_i+0x40>)
 800b378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b37c:	0800b3d5 	.word	0x0800b3d5
 800b380:	0800b3e9 	.word	0x0800b3e9
 800b384:	0800b365 	.word	0x0800b365
 800b388:	0800b365 	.word	0x0800b365
 800b38c:	0800b365 	.word	0x0800b365
 800b390:	0800b365 	.word	0x0800b365
 800b394:	0800b3e9 	.word	0x0800b3e9
 800b398:	0800b365 	.word	0x0800b365
 800b39c:	0800b365 	.word	0x0800b365
 800b3a0:	0800b365 	.word	0x0800b365
 800b3a4:	0800b365 	.word	0x0800b365
 800b3a8:	0800b4e9 	.word	0x0800b4e9
 800b3ac:	0800b413 	.word	0x0800b413
 800b3b0:	0800b4a3 	.word	0x0800b4a3
 800b3b4:	0800b365 	.word	0x0800b365
 800b3b8:	0800b365 	.word	0x0800b365
 800b3bc:	0800b50b 	.word	0x0800b50b
 800b3c0:	0800b365 	.word	0x0800b365
 800b3c4:	0800b413 	.word	0x0800b413
 800b3c8:	0800b365 	.word	0x0800b365
 800b3cc:	0800b365 	.word	0x0800b365
 800b3d0:	0800b4ab 	.word	0x0800b4ab
 800b3d4:	6833      	ldr	r3, [r6, #0]
 800b3d6:	1d1a      	adds	r2, r3, #4
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	6032      	str	r2, [r6, #0]
 800b3dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	e09d      	b.n	800b524 <_printf_i+0x1e8>
 800b3e8:	6833      	ldr	r3, [r6, #0]
 800b3ea:	6820      	ldr	r0, [r4, #0]
 800b3ec:	1d19      	adds	r1, r3, #4
 800b3ee:	6031      	str	r1, [r6, #0]
 800b3f0:	0606      	lsls	r6, r0, #24
 800b3f2:	d501      	bpl.n	800b3f8 <_printf_i+0xbc>
 800b3f4:	681d      	ldr	r5, [r3, #0]
 800b3f6:	e003      	b.n	800b400 <_printf_i+0xc4>
 800b3f8:	0645      	lsls	r5, r0, #25
 800b3fa:	d5fb      	bpl.n	800b3f4 <_printf_i+0xb8>
 800b3fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b400:	2d00      	cmp	r5, #0
 800b402:	da03      	bge.n	800b40c <_printf_i+0xd0>
 800b404:	232d      	movs	r3, #45	@ 0x2d
 800b406:	426d      	negs	r5, r5
 800b408:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b40c:	4859      	ldr	r0, [pc, #356]	@ (800b574 <_printf_i+0x238>)
 800b40e:	230a      	movs	r3, #10
 800b410:	e011      	b.n	800b436 <_printf_i+0xfa>
 800b412:	6821      	ldr	r1, [r4, #0]
 800b414:	6833      	ldr	r3, [r6, #0]
 800b416:	0608      	lsls	r0, r1, #24
 800b418:	f853 5b04 	ldr.w	r5, [r3], #4
 800b41c:	d402      	bmi.n	800b424 <_printf_i+0xe8>
 800b41e:	0649      	lsls	r1, r1, #25
 800b420:	bf48      	it	mi
 800b422:	b2ad      	uxthmi	r5, r5
 800b424:	2f6f      	cmp	r7, #111	@ 0x6f
 800b426:	4853      	ldr	r0, [pc, #332]	@ (800b574 <_printf_i+0x238>)
 800b428:	6033      	str	r3, [r6, #0]
 800b42a:	bf14      	ite	ne
 800b42c:	230a      	movne	r3, #10
 800b42e:	2308      	moveq	r3, #8
 800b430:	2100      	movs	r1, #0
 800b432:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b436:	6866      	ldr	r6, [r4, #4]
 800b438:	60a6      	str	r6, [r4, #8]
 800b43a:	2e00      	cmp	r6, #0
 800b43c:	bfa2      	ittt	ge
 800b43e:	6821      	ldrge	r1, [r4, #0]
 800b440:	f021 0104 	bicge.w	r1, r1, #4
 800b444:	6021      	strge	r1, [r4, #0]
 800b446:	b90d      	cbnz	r5, 800b44c <_printf_i+0x110>
 800b448:	2e00      	cmp	r6, #0
 800b44a:	d04b      	beq.n	800b4e4 <_printf_i+0x1a8>
 800b44c:	4616      	mov	r6, r2
 800b44e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b452:	fb03 5711 	mls	r7, r3, r1, r5
 800b456:	5dc7      	ldrb	r7, [r0, r7]
 800b458:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b45c:	462f      	mov	r7, r5
 800b45e:	42bb      	cmp	r3, r7
 800b460:	460d      	mov	r5, r1
 800b462:	d9f4      	bls.n	800b44e <_printf_i+0x112>
 800b464:	2b08      	cmp	r3, #8
 800b466:	d10b      	bne.n	800b480 <_printf_i+0x144>
 800b468:	6823      	ldr	r3, [r4, #0]
 800b46a:	07df      	lsls	r7, r3, #31
 800b46c:	d508      	bpl.n	800b480 <_printf_i+0x144>
 800b46e:	6923      	ldr	r3, [r4, #16]
 800b470:	6861      	ldr	r1, [r4, #4]
 800b472:	4299      	cmp	r1, r3
 800b474:	bfde      	ittt	le
 800b476:	2330      	movle	r3, #48	@ 0x30
 800b478:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b47c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b480:	1b92      	subs	r2, r2, r6
 800b482:	6122      	str	r2, [r4, #16]
 800b484:	f8cd a000 	str.w	sl, [sp]
 800b488:	464b      	mov	r3, r9
 800b48a:	aa03      	add	r2, sp, #12
 800b48c:	4621      	mov	r1, r4
 800b48e:	4640      	mov	r0, r8
 800b490:	f7ff fee6 	bl	800b260 <_printf_common>
 800b494:	3001      	adds	r0, #1
 800b496:	d14a      	bne.n	800b52e <_printf_i+0x1f2>
 800b498:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b49c:	b004      	add	sp, #16
 800b49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a2:	6823      	ldr	r3, [r4, #0]
 800b4a4:	f043 0320 	orr.w	r3, r3, #32
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	4833      	ldr	r0, [pc, #204]	@ (800b578 <_printf_i+0x23c>)
 800b4ac:	2778      	movs	r7, #120	@ 0x78
 800b4ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b4b2:	6823      	ldr	r3, [r4, #0]
 800b4b4:	6831      	ldr	r1, [r6, #0]
 800b4b6:	061f      	lsls	r7, r3, #24
 800b4b8:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4bc:	d402      	bmi.n	800b4c4 <_printf_i+0x188>
 800b4be:	065f      	lsls	r7, r3, #25
 800b4c0:	bf48      	it	mi
 800b4c2:	b2ad      	uxthmi	r5, r5
 800b4c4:	6031      	str	r1, [r6, #0]
 800b4c6:	07d9      	lsls	r1, r3, #31
 800b4c8:	bf44      	itt	mi
 800b4ca:	f043 0320 	orrmi.w	r3, r3, #32
 800b4ce:	6023      	strmi	r3, [r4, #0]
 800b4d0:	b11d      	cbz	r5, 800b4da <_printf_i+0x19e>
 800b4d2:	2310      	movs	r3, #16
 800b4d4:	e7ac      	b.n	800b430 <_printf_i+0xf4>
 800b4d6:	4827      	ldr	r0, [pc, #156]	@ (800b574 <_printf_i+0x238>)
 800b4d8:	e7e9      	b.n	800b4ae <_printf_i+0x172>
 800b4da:	6823      	ldr	r3, [r4, #0]
 800b4dc:	f023 0320 	bic.w	r3, r3, #32
 800b4e0:	6023      	str	r3, [r4, #0]
 800b4e2:	e7f6      	b.n	800b4d2 <_printf_i+0x196>
 800b4e4:	4616      	mov	r6, r2
 800b4e6:	e7bd      	b.n	800b464 <_printf_i+0x128>
 800b4e8:	6833      	ldr	r3, [r6, #0]
 800b4ea:	6825      	ldr	r5, [r4, #0]
 800b4ec:	6961      	ldr	r1, [r4, #20]
 800b4ee:	1d18      	adds	r0, r3, #4
 800b4f0:	6030      	str	r0, [r6, #0]
 800b4f2:	062e      	lsls	r6, r5, #24
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	d501      	bpl.n	800b4fc <_printf_i+0x1c0>
 800b4f8:	6019      	str	r1, [r3, #0]
 800b4fa:	e002      	b.n	800b502 <_printf_i+0x1c6>
 800b4fc:	0668      	lsls	r0, r5, #25
 800b4fe:	d5fb      	bpl.n	800b4f8 <_printf_i+0x1bc>
 800b500:	8019      	strh	r1, [r3, #0]
 800b502:	2300      	movs	r3, #0
 800b504:	6123      	str	r3, [r4, #16]
 800b506:	4616      	mov	r6, r2
 800b508:	e7bc      	b.n	800b484 <_printf_i+0x148>
 800b50a:	6833      	ldr	r3, [r6, #0]
 800b50c:	1d1a      	adds	r2, r3, #4
 800b50e:	6032      	str	r2, [r6, #0]
 800b510:	681e      	ldr	r6, [r3, #0]
 800b512:	6862      	ldr	r2, [r4, #4]
 800b514:	2100      	movs	r1, #0
 800b516:	4630      	mov	r0, r6
 800b518:	f7f4 fe9a 	bl	8000250 <memchr>
 800b51c:	b108      	cbz	r0, 800b522 <_printf_i+0x1e6>
 800b51e:	1b80      	subs	r0, r0, r6
 800b520:	6060      	str	r0, [r4, #4]
 800b522:	6863      	ldr	r3, [r4, #4]
 800b524:	6123      	str	r3, [r4, #16]
 800b526:	2300      	movs	r3, #0
 800b528:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b52c:	e7aa      	b.n	800b484 <_printf_i+0x148>
 800b52e:	6923      	ldr	r3, [r4, #16]
 800b530:	4632      	mov	r2, r6
 800b532:	4649      	mov	r1, r9
 800b534:	4640      	mov	r0, r8
 800b536:	47d0      	blx	sl
 800b538:	3001      	adds	r0, #1
 800b53a:	d0ad      	beq.n	800b498 <_printf_i+0x15c>
 800b53c:	6823      	ldr	r3, [r4, #0]
 800b53e:	079b      	lsls	r3, r3, #30
 800b540:	d413      	bmi.n	800b56a <_printf_i+0x22e>
 800b542:	68e0      	ldr	r0, [r4, #12]
 800b544:	9b03      	ldr	r3, [sp, #12]
 800b546:	4298      	cmp	r0, r3
 800b548:	bfb8      	it	lt
 800b54a:	4618      	movlt	r0, r3
 800b54c:	e7a6      	b.n	800b49c <_printf_i+0x160>
 800b54e:	2301      	movs	r3, #1
 800b550:	4632      	mov	r2, r6
 800b552:	4649      	mov	r1, r9
 800b554:	4640      	mov	r0, r8
 800b556:	47d0      	blx	sl
 800b558:	3001      	adds	r0, #1
 800b55a:	d09d      	beq.n	800b498 <_printf_i+0x15c>
 800b55c:	3501      	adds	r5, #1
 800b55e:	68e3      	ldr	r3, [r4, #12]
 800b560:	9903      	ldr	r1, [sp, #12]
 800b562:	1a5b      	subs	r3, r3, r1
 800b564:	42ab      	cmp	r3, r5
 800b566:	dcf2      	bgt.n	800b54e <_printf_i+0x212>
 800b568:	e7eb      	b.n	800b542 <_printf_i+0x206>
 800b56a:	2500      	movs	r5, #0
 800b56c:	f104 0619 	add.w	r6, r4, #25
 800b570:	e7f5      	b.n	800b55e <_printf_i+0x222>
 800b572:	bf00      	nop
 800b574:	0800bcc1 	.word	0x0800bcc1
 800b578:	0800bcd2 	.word	0x0800bcd2

0800b57c <__swbuf_r>:
 800b57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b57e:	460e      	mov	r6, r1
 800b580:	4614      	mov	r4, r2
 800b582:	4605      	mov	r5, r0
 800b584:	b118      	cbz	r0, 800b58e <__swbuf_r+0x12>
 800b586:	6a03      	ldr	r3, [r0, #32]
 800b588:	b90b      	cbnz	r3, 800b58e <__swbuf_r+0x12>
 800b58a:	f7fe f999 	bl	80098c0 <__sinit>
 800b58e:	69a3      	ldr	r3, [r4, #24]
 800b590:	60a3      	str	r3, [r4, #8]
 800b592:	89a3      	ldrh	r3, [r4, #12]
 800b594:	071a      	lsls	r2, r3, #28
 800b596:	d501      	bpl.n	800b59c <__swbuf_r+0x20>
 800b598:	6923      	ldr	r3, [r4, #16]
 800b59a:	b943      	cbnz	r3, 800b5ae <__swbuf_r+0x32>
 800b59c:	4621      	mov	r1, r4
 800b59e:	4628      	mov	r0, r5
 800b5a0:	f000 f82a 	bl	800b5f8 <__swsetup_r>
 800b5a4:	b118      	cbz	r0, 800b5ae <__swbuf_r+0x32>
 800b5a6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b5aa:	4638      	mov	r0, r7
 800b5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5ae:	6823      	ldr	r3, [r4, #0]
 800b5b0:	6922      	ldr	r2, [r4, #16]
 800b5b2:	1a98      	subs	r0, r3, r2
 800b5b4:	6963      	ldr	r3, [r4, #20]
 800b5b6:	b2f6      	uxtb	r6, r6
 800b5b8:	4283      	cmp	r3, r0
 800b5ba:	4637      	mov	r7, r6
 800b5bc:	dc05      	bgt.n	800b5ca <__swbuf_r+0x4e>
 800b5be:	4621      	mov	r1, r4
 800b5c0:	4628      	mov	r0, r5
 800b5c2:	f7ff fca7 	bl	800af14 <_fflush_r>
 800b5c6:	2800      	cmp	r0, #0
 800b5c8:	d1ed      	bne.n	800b5a6 <__swbuf_r+0x2a>
 800b5ca:	68a3      	ldr	r3, [r4, #8]
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	60a3      	str	r3, [r4, #8]
 800b5d0:	6823      	ldr	r3, [r4, #0]
 800b5d2:	1c5a      	adds	r2, r3, #1
 800b5d4:	6022      	str	r2, [r4, #0]
 800b5d6:	701e      	strb	r6, [r3, #0]
 800b5d8:	6962      	ldr	r2, [r4, #20]
 800b5da:	1c43      	adds	r3, r0, #1
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d004      	beq.n	800b5ea <__swbuf_r+0x6e>
 800b5e0:	89a3      	ldrh	r3, [r4, #12]
 800b5e2:	07db      	lsls	r3, r3, #31
 800b5e4:	d5e1      	bpl.n	800b5aa <__swbuf_r+0x2e>
 800b5e6:	2e0a      	cmp	r6, #10
 800b5e8:	d1df      	bne.n	800b5aa <__swbuf_r+0x2e>
 800b5ea:	4621      	mov	r1, r4
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	f7ff fc91 	bl	800af14 <_fflush_r>
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	d0d9      	beq.n	800b5aa <__swbuf_r+0x2e>
 800b5f6:	e7d6      	b.n	800b5a6 <__swbuf_r+0x2a>

0800b5f8 <__swsetup_r>:
 800b5f8:	b538      	push	{r3, r4, r5, lr}
 800b5fa:	4b29      	ldr	r3, [pc, #164]	@ (800b6a0 <__swsetup_r+0xa8>)
 800b5fc:	4605      	mov	r5, r0
 800b5fe:	6818      	ldr	r0, [r3, #0]
 800b600:	460c      	mov	r4, r1
 800b602:	b118      	cbz	r0, 800b60c <__swsetup_r+0x14>
 800b604:	6a03      	ldr	r3, [r0, #32]
 800b606:	b90b      	cbnz	r3, 800b60c <__swsetup_r+0x14>
 800b608:	f7fe f95a 	bl	80098c0 <__sinit>
 800b60c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b610:	0719      	lsls	r1, r3, #28
 800b612:	d422      	bmi.n	800b65a <__swsetup_r+0x62>
 800b614:	06da      	lsls	r2, r3, #27
 800b616:	d407      	bmi.n	800b628 <__swsetup_r+0x30>
 800b618:	2209      	movs	r2, #9
 800b61a:	602a      	str	r2, [r5, #0]
 800b61c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b620:	81a3      	strh	r3, [r4, #12]
 800b622:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b626:	e033      	b.n	800b690 <__swsetup_r+0x98>
 800b628:	0758      	lsls	r0, r3, #29
 800b62a:	d512      	bpl.n	800b652 <__swsetup_r+0x5a>
 800b62c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b62e:	b141      	cbz	r1, 800b642 <__swsetup_r+0x4a>
 800b630:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b634:	4299      	cmp	r1, r3
 800b636:	d002      	beq.n	800b63e <__swsetup_r+0x46>
 800b638:	4628      	mov	r0, r5
 800b63a:	f7fe fadb 	bl	8009bf4 <_free_r>
 800b63e:	2300      	movs	r3, #0
 800b640:	6363      	str	r3, [r4, #52]	@ 0x34
 800b642:	89a3      	ldrh	r3, [r4, #12]
 800b644:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b648:	81a3      	strh	r3, [r4, #12]
 800b64a:	2300      	movs	r3, #0
 800b64c:	6063      	str	r3, [r4, #4]
 800b64e:	6923      	ldr	r3, [r4, #16]
 800b650:	6023      	str	r3, [r4, #0]
 800b652:	89a3      	ldrh	r3, [r4, #12]
 800b654:	f043 0308 	orr.w	r3, r3, #8
 800b658:	81a3      	strh	r3, [r4, #12]
 800b65a:	6923      	ldr	r3, [r4, #16]
 800b65c:	b94b      	cbnz	r3, 800b672 <__swsetup_r+0x7a>
 800b65e:	89a3      	ldrh	r3, [r4, #12]
 800b660:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b668:	d003      	beq.n	800b672 <__swsetup_r+0x7a>
 800b66a:	4621      	mov	r1, r4
 800b66c:	4628      	mov	r0, r5
 800b66e:	f000 f883 	bl	800b778 <__smakebuf_r>
 800b672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b676:	f013 0201 	ands.w	r2, r3, #1
 800b67a:	d00a      	beq.n	800b692 <__swsetup_r+0x9a>
 800b67c:	2200      	movs	r2, #0
 800b67e:	60a2      	str	r2, [r4, #8]
 800b680:	6962      	ldr	r2, [r4, #20]
 800b682:	4252      	negs	r2, r2
 800b684:	61a2      	str	r2, [r4, #24]
 800b686:	6922      	ldr	r2, [r4, #16]
 800b688:	b942      	cbnz	r2, 800b69c <__swsetup_r+0xa4>
 800b68a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b68e:	d1c5      	bne.n	800b61c <__swsetup_r+0x24>
 800b690:	bd38      	pop	{r3, r4, r5, pc}
 800b692:	0799      	lsls	r1, r3, #30
 800b694:	bf58      	it	pl
 800b696:	6962      	ldrpl	r2, [r4, #20]
 800b698:	60a2      	str	r2, [r4, #8]
 800b69a:	e7f4      	b.n	800b686 <__swsetup_r+0x8e>
 800b69c:	2000      	movs	r0, #0
 800b69e:	e7f7      	b.n	800b690 <__swsetup_r+0x98>
 800b6a0:	200002c0 	.word	0x200002c0

0800b6a4 <_raise_r>:
 800b6a4:	291f      	cmp	r1, #31
 800b6a6:	b538      	push	{r3, r4, r5, lr}
 800b6a8:	4605      	mov	r5, r0
 800b6aa:	460c      	mov	r4, r1
 800b6ac:	d904      	bls.n	800b6b8 <_raise_r+0x14>
 800b6ae:	2316      	movs	r3, #22
 800b6b0:	6003      	str	r3, [r0, #0]
 800b6b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b6b6:	bd38      	pop	{r3, r4, r5, pc}
 800b6b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b6ba:	b112      	cbz	r2, 800b6c2 <_raise_r+0x1e>
 800b6bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6c0:	b94b      	cbnz	r3, 800b6d6 <_raise_r+0x32>
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	f000 f830 	bl	800b728 <_getpid_r>
 800b6c8:	4622      	mov	r2, r4
 800b6ca:	4601      	mov	r1, r0
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6d2:	f000 b817 	b.w	800b704 <_kill_r>
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d00a      	beq.n	800b6f0 <_raise_r+0x4c>
 800b6da:	1c59      	adds	r1, r3, #1
 800b6dc:	d103      	bne.n	800b6e6 <_raise_r+0x42>
 800b6de:	2316      	movs	r3, #22
 800b6e0:	6003      	str	r3, [r0, #0]
 800b6e2:	2001      	movs	r0, #1
 800b6e4:	e7e7      	b.n	800b6b6 <_raise_r+0x12>
 800b6e6:	2100      	movs	r1, #0
 800b6e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	4798      	blx	r3
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	e7e0      	b.n	800b6b6 <_raise_r+0x12>

0800b6f4 <raise>:
 800b6f4:	4b02      	ldr	r3, [pc, #8]	@ (800b700 <raise+0xc>)
 800b6f6:	4601      	mov	r1, r0
 800b6f8:	6818      	ldr	r0, [r3, #0]
 800b6fa:	f7ff bfd3 	b.w	800b6a4 <_raise_r>
 800b6fe:	bf00      	nop
 800b700:	200002c0 	.word	0x200002c0

0800b704 <_kill_r>:
 800b704:	b538      	push	{r3, r4, r5, lr}
 800b706:	4d07      	ldr	r5, [pc, #28]	@ (800b724 <_kill_r+0x20>)
 800b708:	2300      	movs	r3, #0
 800b70a:	4604      	mov	r4, r0
 800b70c:	4608      	mov	r0, r1
 800b70e:	4611      	mov	r1, r2
 800b710:	602b      	str	r3, [r5, #0]
 800b712:	f7f6 f8f5 	bl	8001900 <_kill>
 800b716:	1c43      	adds	r3, r0, #1
 800b718:	d102      	bne.n	800b720 <_kill_r+0x1c>
 800b71a:	682b      	ldr	r3, [r5, #0]
 800b71c:	b103      	cbz	r3, 800b720 <_kill_r+0x1c>
 800b71e:	6023      	str	r3, [r4, #0]
 800b720:	bd38      	pop	{r3, r4, r5, pc}
 800b722:	bf00      	nop
 800b724:	20000810 	.word	0x20000810

0800b728 <_getpid_r>:
 800b728:	f7f6 b8e2 	b.w	80018f0 <_getpid>

0800b72c <__swhatbuf_r>:
 800b72c:	b570      	push	{r4, r5, r6, lr}
 800b72e:	460c      	mov	r4, r1
 800b730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b734:	2900      	cmp	r1, #0
 800b736:	b096      	sub	sp, #88	@ 0x58
 800b738:	4615      	mov	r5, r2
 800b73a:	461e      	mov	r6, r3
 800b73c:	da0d      	bge.n	800b75a <__swhatbuf_r+0x2e>
 800b73e:	89a3      	ldrh	r3, [r4, #12]
 800b740:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b744:	f04f 0100 	mov.w	r1, #0
 800b748:	bf14      	ite	ne
 800b74a:	2340      	movne	r3, #64	@ 0x40
 800b74c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b750:	2000      	movs	r0, #0
 800b752:	6031      	str	r1, [r6, #0]
 800b754:	602b      	str	r3, [r5, #0]
 800b756:	b016      	add	sp, #88	@ 0x58
 800b758:	bd70      	pop	{r4, r5, r6, pc}
 800b75a:	466a      	mov	r2, sp
 800b75c:	f000 f848 	bl	800b7f0 <_fstat_r>
 800b760:	2800      	cmp	r0, #0
 800b762:	dbec      	blt.n	800b73e <__swhatbuf_r+0x12>
 800b764:	9901      	ldr	r1, [sp, #4]
 800b766:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b76a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b76e:	4259      	negs	r1, r3
 800b770:	4159      	adcs	r1, r3
 800b772:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b776:	e7eb      	b.n	800b750 <__swhatbuf_r+0x24>

0800b778 <__smakebuf_r>:
 800b778:	898b      	ldrh	r3, [r1, #12]
 800b77a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b77c:	079d      	lsls	r5, r3, #30
 800b77e:	4606      	mov	r6, r0
 800b780:	460c      	mov	r4, r1
 800b782:	d507      	bpl.n	800b794 <__smakebuf_r+0x1c>
 800b784:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b788:	6023      	str	r3, [r4, #0]
 800b78a:	6123      	str	r3, [r4, #16]
 800b78c:	2301      	movs	r3, #1
 800b78e:	6163      	str	r3, [r4, #20]
 800b790:	b003      	add	sp, #12
 800b792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b794:	ab01      	add	r3, sp, #4
 800b796:	466a      	mov	r2, sp
 800b798:	f7ff ffc8 	bl	800b72c <__swhatbuf_r>
 800b79c:	9f00      	ldr	r7, [sp, #0]
 800b79e:	4605      	mov	r5, r0
 800b7a0:	4639      	mov	r1, r7
 800b7a2:	4630      	mov	r0, r6
 800b7a4:	f7fe fdd4 	bl	800a350 <_malloc_r>
 800b7a8:	b948      	cbnz	r0, 800b7be <__smakebuf_r+0x46>
 800b7aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ae:	059a      	lsls	r2, r3, #22
 800b7b0:	d4ee      	bmi.n	800b790 <__smakebuf_r+0x18>
 800b7b2:	f023 0303 	bic.w	r3, r3, #3
 800b7b6:	f043 0302 	orr.w	r3, r3, #2
 800b7ba:	81a3      	strh	r3, [r4, #12]
 800b7bc:	e7e2      	b.n	800b784 <__smakebuf_r+0xc>
 800b7be:	89a3      	ldrh	r3, [r4, #12]
 800b7c0:	6020      	str	r0, [r4, #0]
 800b7c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7c6:	81a3      	strh	r3, [r4, #12]
 800b7c8:	9b01      	ldr	r3, [sp, #4]
 800b7ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b7ce:	b15b      	cbz	r3, 800b7e8 <__smakebuf_r+0x70>
 800b7d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7d4:	4630      	mov	r0, r6
 800b7d6:	f000 f81d 	bl	800b814 <_isatty_r>
 800b7da:	b128      	cbz	r0, 800b7e8 <__smakebuf_r+0x70>
 800b7dc:	89a3      	ldrh	r3, [r4, #12]
 800b7de:	f023 0303 	bic.w	r3, r3, #3
 800b7e2:	f043 0301 	orr.w	r3, r3, #1
 800b7e6:	81a3      	strh	r3, [r4, #12]
 800b7e8:	89a3      	ldrh	r3, [r4, #12]
 800b7ea:	431d      	orrs	r5, r3
 800b7ec:	81a5      	strh	r5, [r4, #12]
 800b7ee:	e7cf      	b.n	800b790 <__smakebuf_r+0x18>

0800b7f0 <_fstat_r>:
 800b7f0:	b538      	push	{r3, r4, r5, lr}
 800b7f2:	4d07      	ldr	r5, [pc, #28]	@ (800b810 <_fstat_r+0x20>)
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	4608      	mov	r0, r1
 800b7fa:	4611      	mov	r1, r2
 800b7fc:	602b      	str	r3, [r5, #0]
 800b7fe:	f7f6 f8df 	bl	80019c0 <_fstat>
 800b802:	1c43      	adds	r3, r0, #1
 800b804:	d102      	bne.n	800b80c <_fstat_r+0x1c>
 800b806:	682b      	ldr	r3, [r5, #0]
 800b808:	b103      	cbz	r3, 800b80c <_fstat_r+0x1c>
 800b80a:	6023      	str	r3, [r4, #0]
 800b80c:	bd38      	pop	{r3, r4, r5, pc}
 800b80e:	bf00      	nop
 800b810:	20000810 	.word	0x20000810

0800b814 <_isatty_r>:
 800b814:	b538      	push	{r3, r4, r5, lr}
 800b816:	4d06      	ldr	r5, [pc, #24]	@ (800b830 <_isatty_r+0x1c>)
 800b818:	2300      	movs	r3, #0
 800b81a:	4604      	mov	r4, r0
 800b81c:	4608      	mov	r0, r1
 800b81e:	602b      	str	r3, [r5, #0]
 800b820:	f7f6 f8de 	bl	80019e0 <_isatty>
 800b824:	1c43      	adds	r3, r0, #1
 800b826:	d102      	bne.n	800b82e <_isatty_r+0x1a>
 800b828:	682b      	ldr	r3, [r5, #0]
 800b82a:	b103      	cbz	r3, 800b82e <_isatty_r+0x1a>
 800b82c:	6023      	str	r3, [r4, #0]
 800b82e:	bd38      	pop	{r3, r4, r5, pc}
 800b830:	20000810 	.word	0x20000810

0800b834 <_init>:
 800b834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b836:	bf00      	nop
 800b838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b83a:	bc08      	pop	{r3}
 800b83c:	469e      	mov	lr, r3
 800b83e:	4770      	bx	lr

0800b840 <_fini>:
 800b840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b842:	bf00      	nop
 800b844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b846:	bc08      	pop	{r3}
 800b848:	469e      	mov	lr, r3
 800b84a:	4770      	bx	lr
