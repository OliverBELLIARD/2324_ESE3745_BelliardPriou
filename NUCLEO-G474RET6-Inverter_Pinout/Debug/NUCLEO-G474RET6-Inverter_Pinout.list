
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b36c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  0800b550  0800b550  0000c550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9d4  0800b9d4  0000d310  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9d4  0800b9d4  0000c9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9dc  0800b9dc  0000d310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9dc  0800b9dc  0000c9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9e0  0800b9e0  0000c9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000310  20000000  0800b9e4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000310  0800bcf4  0000d310  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000081c  0800bcf4  0000d81c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d310  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a519  00000000  00000000  0000d340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003642  00000000  00000000  00027859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  0002aea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001115  00000000  00000000  0002c4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a244  00000000  00000000  0002d5cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a4c1  00000000  00000000  00057811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011462d  00000000  00000000  00071cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001862ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007014  00000000  00000000  00186344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  0018d358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000310 	.word	0x20000310
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b534 	.word	0x0800b534

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000314 	.word	0x20000314
 800021c:	0800b534 	.word	0x0800b534

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2iz>:
 8000b9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba4:	d215      	bcs.n	8000bd2 <__aeabi_d2iz+0x36>
 8000ba6:	d511      	bpl.n	8000bcc <__aeabi_d2iz+0x30>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d912      	bls.n	8000bd8 <__aeabi_d2iz+0x3c>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	4770      	bx	lr
 8000bcc:	f04f 0000 	mov.w	r0, #0
 8000bd0:	4770      	bx	lr
 8000bd2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd6:	d105      	bne.n	8000be4 <__aeabi_d2iz+0x48>
 8000bd8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bdc:	bf08      	it	eq
 8000bde:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__aeabi_d2uiz>:
 8000bec:	004a      	lsls	r2, r1, #1
 8000bee:	d211      	bcs.n	8000c14 <__aeabi_d2uiz+0x28>
 8000bf0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf4:	d211      	bcs.n	8000c1a <__aeabi_d2uiz+0x2e>
 8000bf6:	d50d      	bpl.n	8000c14 <__aeabi_d2uiz+0x28>
 8000bf8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c00:	d40e      	bmi.n	8000c20 <__aeabi_d2uiz+0x34>
 8000c02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c12:	4770      	bx	lr
 8000c14:	f04f 0000 	mov.w	r0, #0
 8000c18:	4770      	bx	lr
 8000c1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1e:	d102      	bne.n	8000c26 <__aeabi_d2uiz+0x3a>
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c24:	4770      	bx	lr
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	4770      	bx	lr

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c40:	f000 b9a0 	b.w	8000f84 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f83c 	bl	8000cc8 <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__aeabi_d2lz>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	f7ff ff71 	bl	8000b4c <__aeabi_dcmplt>
 8000c6a:	b928      	cbnz	r0, 8000c78 <__aeabi_d2lz+0x1c>
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4629      	mov	r1, r5
 8000c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c74:	f000 b80a 	b.w	8000c8c <__aeabi_d2ulz>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c7e:	f000 f805 	bl	8000c8c <__aeabi_d2ulz>
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop

08000c8c <__aeabi_d2ulz>:
 8000c8c:	b5d0      	push	{r4, r6, r7, lr}
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <__aeabi_d2ulz+0x34>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	4606      	mov	r6, r0
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fce7 	bl	8000668 <__aeabi_dmul>
 8000c9a:	f7ff ffa7 	bl	8000bec <__aeabi_d2uiz>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fc68 	bl	8000574 <__aeabi_ui2d>
 8000ca4:	4b07      	ldr	r3, [pc, #28]	@ (8000cc4 <__aeabi_d2ulz+0x38>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f7ff fcde 	bl	8000668 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff fb20 	bl	80002f8 <__aeabi_dsub>
 8000cb8:	f7ff ff98 	bl	8000bec <__aeabi_d2uiz>
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc0:	3df00000 	.word	0x3df00000
 8000cc4:	41f00000 	.word	0x41f00000

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08c      	sub	sp, #48	@ 0x30
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f008 fb86 	bl	80096b2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fa6:	4b32      	ldr	r3, [pc, #200]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fa8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000fac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fae:	4b30      	ldr	r3, [pc, #192]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fb0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000fb4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fc8:	4b29      	ldr	r3, [pc, #164]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fce:	4b28      	ldr	r3, [pc, #160]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fd4:	4b26      	ldr	r3, [pc, #152]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fda:	4b25      	ldr	r3, [pc, #148]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000fe0:	4b23      	ldr	r3, [pc, #140]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fe6:	4b22      	ldr	r3, [pc, #136]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fee:	4b20      	ldr	r3, [pc, #128]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001002:	4b1b      	ldr	r3, [pc, #108]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8001004:	2200      	movs	r2, #0
 8001006:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001008:	4b19      	ldr	r3, [pc, #100]	@ (8001070 <MX_ADC1_Init+0xe8>)
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001010:	4817      	ldr	r0, [pc, #92]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8001012:	f001 fbb3 	bl	800277c <HAL_ADC_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800101c:	f000 fb36 	bl	800168c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001024:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001028:	4619      	mov	r1, r3
 800102a:	4811      	ldr	r0, [pc, #68]	@ (8001070 <MX_ADC1_Init+0xe8>)
 800102c:	f002 f9ce 	bl	80033cc <HAL_ADCEx_MultiModeConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001036:	f000 fb29 	bl	800168c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800103a:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <MX_ADC1_Init+0xec>)
 800103c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800103e:	2306      	movs	r3, #6
 8001040:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001046:	237f      	movs	r3, #127	@ 0x7f
 8001048:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800104a:	2304      	movs	r3, #4
 800104c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	4619      	mov	r1, r3
 8001056:	4806      	ldr	r0, [pc, #24]	@ (8001070 <MX_ADC1_Init+0xe8>)
 8001058:	f001 fd52 	bl	8002b00 <HAL_ADC_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001062:	f000 fb13 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001066:	bf00      	nop
 8001068:	3730      	adds	r7, #48	@ 0x30
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2000032c 	.word	0x2000032c
 8001074:	21800100 	.word	0x21800100

08001078 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800107e:	463b      	mov	r3, r7
 8001080:	2220      	movs	r2, #32
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f008 fb14 	bl	80096b2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800108a:	4b2b      	ldr	r3, [pc, #172]	@ (8001138 <MX_ADC2_Init+0xc0>)
 800108c:	4a2b      	ldr	r2, [pc, #172]	@ (800113c <MX_ADC2_Init+0xc4>)
 800108e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001090:	4b29      	ldr	r3, [pc, #164]	@ (8001138 <MX_ADC2_Init+0xc0>)
 8001092:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001096:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001098:	4b27      	ldr	r3, [pc, #156]	@ (8001138 <MX_ADC2_Init+0xc0>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800109e:	4b26      	ldr	r3, [pc, #152]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010a4:	4b24      	ldr	r3, [pc, #144]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010aa:	4b23      	ldr	r3, [pc, #140]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b0:	4b21      	ldr	r3, [pc, #132]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010b2:	2204      	movs	r2, #4
 80010b4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010b6:	4b20      	ldr	r3, [pc, #128]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80010c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d0:	4b19      	ldr	r3, [pc, #100]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010d6:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010dc:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010e4:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80010ea:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010f2:	4811      	ldr	r0, [pc, #68]	@ (8001138 <MX_ADC2_Init+0xc0>)
 80010f4:	f001 fb42 	bl	800277c <HAL_ADC_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80010fe:	f000 fac5 	bl	800168c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001102:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <MX_ADC2_Init+0xc8>)
 8001104:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001106:	2306      	movs	r3, #6
 8001108:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800110e:	237f      	movs	r3, #127	@ 0x7f
 8001110:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001112:	2304      	movs	r3, #4
 8001114:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800111a:	463b      	mov	r3, r7
 800111c:	4619      	mov	r1, r3
 800111e:	4806      	ldr	r0, [pc, #24]	@ (8001138 <MX_ADC2_Init+0xc0>)
 8001120:	f001 fcee 	bl	8002b00 <HAL_ADC_ConfigChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800112a:	f000 faaf 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	3720      	adds	r7, #32
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000398 	.word	0x20000398
 800113c:	50000100 	.word	0x50000100
 8001140:	19200040 	.word	0x19200040

08001144 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b0a4      	sub	sp, #144	@ 0x90
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800115c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001160:	2254      	movs	r2, #84	@ 0x54
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f008 faa4 	bl	80096b2 <memset>
  if(adcHandle->Instance==ADC1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001172:	d174      	bne.n	800125e <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001174:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001178:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800117a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800117e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001180:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001184:	4618      	mov	r0, r3
 8001186:	f003 fba1 	bl	80048cc <HAL_RCCEx_PeriphCLKConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001190:	f000 fa7c 	bl	800168c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001194:	4b63      	ldr	r3, [pc, #396]	@ (8001324 <HAL_ADC_MspInit+0x1e0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3301      	adds	r3, #1
 800119a:	4a62      	ldr	r2, [pc, #392]	@ (8001324 <HAL_ADC_MspInit+0x1e0>)
 800119c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800119e:	4b61      	ldr	r3, [pc, #388]	@ (8001324 <HAL_ADC_MspInit+0x1e0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d10b      	bne.n	80011be <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011a6:	4b60      	ldr	r3, [pc, #384]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	4a5f      	ldr	r2, [pc, #380]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80011bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	4b5a      	ldr	r3, [pc, #360]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	4a59      	ldr	r2, [pc, #356]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011c4:	f043 0304 	orr.w	r3, r3, #4
 80011c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ca:	4b57      	ldr	r3, [pc, #348]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	f003 0304 	and.w	r3, r3, #4
 80011d2:	623b      	str	r3, [r7, #32]
 80011d4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	4b54      	ldr	r3, [pc, #336]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	4a53      	ldr	r2, [pc, #332]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e2:	4b51      	ldr	r3, [pc, #324]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	4a4d      	ldr	r2, [pc, #308]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fa:	4b4b      	ldr	r3, [pc, #300]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	61bb      	str	r3, [r7, #24]
 8001204:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8001206:	2304      	movs	r3, #4
 8001208:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120a:	2303      	movs	r3, #3
 800120c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8001216:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800121a:	4619      	mov	r1, r3
 800121c:	4843      	ldr	r0, [pc, #268]	@ (800132c <HAL_ADC_MspInit+0x1e8>)
 800121e:	f002 fb7d 	bl	800391c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8001222:	2302      	movs	r3, #2
 8001224:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001226:	2303      	movs	r3, #3
 8001228:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8001232:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001236:	4619      	mov	r1, r3
 8001238:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123c:	f002 fb6e 	bl	800391c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001240:	2303      	movs	r3, #3
 8001242:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001244:	2303      	movs	r3, #3
 8001246:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001250:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001254:	4619      	mov	r1, r3
 8001256:	4836      	ldr	r0, [pc, #216]	@ (8001330 <HAL_ADC_MspInit+0x1ec>)
 8001258:	f002 fb60 	bl	800391c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800125c:	e05e      	b.n	800131c <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a34      	ldr	r2, [pc, #208]	@ (8001334 <HAL_ADC_MspInit+0x1f0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d159      	bne.n	800131c <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001268:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800126c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800126e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001272:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001274:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001278:	4618      	mov	r0, r3
 800127a:	f003 fb27 	bl	80048cc <HAL_RCCEx_PeriphCLKConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 8001284:	f000 fa02 	bl	800168c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001288:	4b26      	ldr	r3, [pc, #152]	@ (8001324 <HAL_ADC_MspInit+0x1e0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	4a25      	ldr	r2, [pc, #148]	@ (8001324 <HAL_ADC_MspInit+0x1e0>)
 8001290:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001292:	4b24      	ldr	r3, [pc, #144]	@ (8001324 <HAL_ADC_MspInit+0x1e0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d10b      	bne.n	80012b2 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800129a:	4b23      	ldr	r3, [pc, #140]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129e:	4a22      	ldr	r2, [pc, #136]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80012a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012a6:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012be:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	4b17      	ldr	r3, [pc, #92]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ce:	4a16      	ldr	r2, [pc, #88]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d6:	4b14      	ldr	r3, [pc, #80]	@ (8001328 <HAL_ADC_MspInit+0x1e4>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80012e2:	230b      	movs	r3, #11
 80012e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e6:	2303      	movs	r3, #3
 80012e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012f6:	4619      	mov	r1, r3
 80012f8:	480c      	ldr	r0, [pc, #48]	@ (800132c <HAL_ADC_MspInit+0x1e8>)
 80012fa:	f002 fb0f 	bl	800391c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80012fe:	2301      	movs	r3, #1
 8001300:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001302:	2303      	movs	r3, #3
 8001304:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001318:	f002 fb00 	bl	800391c <HAL_GPIO_Init>
}
 800131c:	bf00      	nop
 800131e:	3790      	adds	r7, #144	@ 0x90
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000404 	.word	0x20000404
 8001328:	40021000 	.word	0x40021000
 800132c:	48000800 	.word	0x48000800
 8001330:	48000400 	.word	0x48000400
 8001334:	50000100 	.word	0x50000100

08001338 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	@ 0x28
 800133c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	4b3f      	ldr	r3, [pc, #252]	@ (800144c <MX_GPIO_Init+0x114>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	4a3e      	ldr	r2, [pc, #248]	@ (800144c <MX_GPIO_Init+0x114>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135a:	4b3c      	ldr	r3, [pc, #240]	@ (800144c <MX_GPIO_Init+0x114>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001366:	4b39      	ldr	r3, [pc, #228]	@ (800144c <MX_GPIO_Init+0x114>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	4a38      	ldr	r2, [pc, #224]	@ (800144c <MX_GPIO_Init+0x114>)
 800136c:	f043 0320 	orr.w	r3, r3, #32
 8001370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001372:	4b36      	ldr	r3, [pc, #216]	@ (800144c <MX_GPIO_Init+0x114>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	f003 0320 	and.w	r3, r3, #32
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b33      	ldr	r3, [pc, #204]	@ (800144c <MX_GPIO_Init+0x114>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	4a32      	ldr	r2, [pc, #200]	@ (800144c <MX_GPIO_Init+0x114>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138a:	4b30      	ldr	r3, [pc, #192]	@ (800144c <MX_GPIO_Init+0x114>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	4b2d      	ldr	r3, [pc, #180]	@ (800144c <MX_GPIO_Init+0x114>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	4a2c      	ldr	r2, [pc, #176]	@ (800144c <MX_GPIO_Init+0x114>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a2:	4b2a      	ldr	r3, [pc, #168]	@ (800144c <MX_GPIO_Init+0x114>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ae:	4b27      	ldr	r3, [pc, #156]	@ (800144c <MX_GPIO_Init+0x114>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b2:	4a26      	ldr	r2, [pc, #152]	@ (800144c <MX_GPIO_Init+0x114>)
 80013b4:	f043 0308 	orr.w	r3, r3, #8
 80013b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ba:	4b24      	ldr	r3, [pc, #144]	@ (800144c <MX_GPIO_Init+0x114>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2120      	movs	r1, #32
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ce:	f002 fc27 	bl	8003c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2104      	movs	r1, #4
 80013d6:	481e      	ldr	r0, [pc, #120]	@ (8001450 <MX_GPIO_Init+0x118>)
 80013d8:	f002 fc22 	bl	8003c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 80013dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	4818      	ldr	r0, [pc, #96]	@ (8001454 <MX_GPIO_Init+0x11c>)
 80013f4:	f002 fa92 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 80013f8:	2320      	movs	r3, #32
 80013fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4619      	mov	r1, r3
 800140e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001412:	f002 fa83 	bl	800391c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8001416:	2304      	movs	r3, #4
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4808      	ldr	r0, [pc, #32]	@ (8001450 <MX_GPIO_Init+0x118>)
 800142e:	f002 fa75 	bl	800391c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	2028      	movs	r0, #40	@ 0x28
 8001438:	f002 f988 	bl	800374c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800143c:	2028      	movs	r0, #40	@ 0x28
 800143e:	f002 f99f 	bl	8003780 <HAL_NVIC_EnableIRQ>

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	@ 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	48000c00 	.word	0x48000c00
 8001454:	48000800 	.word	0x48000800

08001458 <__io_putchar>:
 * @brief	Character transmission rewriting.
 * @param	int	Character to send.
 * @return	int	Character sent.
 */
int __io_putchar(int ch)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001460:	1d39      	adds	r1, r7, #4
 8001462:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001466:	2201      	movs	r2, #1
 8001468:	4803      	ldr	r0, [pc, #12]	@ (8001478 <__io_putchar+0x20>)
 800146a:	f005 f95c 	bl	8006726 <HAL_UART_Transmit>
	return ch;
 800146e:	687b      	ldr	r3, [r7, #4]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200004f0 	.word	0x200004f0

0800147c <set_PWM>:
/**
 * @brief	Sets the offset PWM for all channel of TIM1.
 * @param	int	pulse to apply.
 */
void set_PWM(int pulse)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <set_PWM+0x2c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, __HAL_TIM_GET_AUTORELOAD(&htim1) - pulse);
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <set_PWM+0x2c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	4b04      	ldr	r3, [pc, #16]	@ (80014a8 <set_PWM+0x2c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	1a8a      	subs	r2, r1, r2
 800149a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	20000458 	.word	0x20000458
 80014ac:	00000000 	.word	0x00000000

080014b0 <set_PWM_ratio>:
/**
 * @brief	Sets the PWM for a channel of TIM1.
 * @return	double	Desired PWM duty cycle ratio (0.0 to 1.0) with a 12 bits resolution.
 */
void set_PWM_ratio(double ratio)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	ed87 0b00 	vstr	d0, [r7]
	if (ratio > 1)
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	4b1c      	ldr	r3, [pc, #112]	@ (8001530 <set_PWM_ratio+0x80>)
 80014c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014c4:	f7ff fb60 	bl	8000b88 <__aeabi_dcmpgt>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <set_PWM_ratio+0x2a>
	{
		ratio = 1;
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <set_PWM_ratio+0x80>)
 80014d4:	e9c7 2300 	strd	r2, r3, [r7]
 80014d8:	e010      	b.n	80014fc <set_PWM_ratio+0x4c>
	}
	else if (ratio < 0)
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	f04f 0300 	mov.w	r3, #0
 80014e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014e6:	f7ff fb31 	bl	8000b4c <__aeabi_dcmplt>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <set_PWM_ratio+0x4c>
	{
		ratio = 0;
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	e9c7 2300 	strd	r2, r3, [r7]
	}

	int main_pulse = (int)(ratio * PWM_MAX_VAL);
 80014fc:	a30a      	add	r3, pc, #40	@ (adr r3, 8001528 <set_PWM_ratio+0x78>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001506:	f7ff f8af 	bl	8000668 <__aeabi_dmul>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f7ff fb43 	bl	8000b9c <__aeabi_d2iz>
 8001516:	4603      	mov	r3, r0
 8001518:	60fb      	str	r3, [r7, #12]

	// Set main PWM pulse width for Channel 1 and Channel 2
	set_PWM(main_pulse);
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f7ff ffae 	bl	800147c <set_PWM>
}
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	00000000 	.word	0x00000000
 800152c:	40b09a00 	.word	0x40b09a00
 8001530:	3ff00000 	.word	0x3ff00000

08001534 <set_PWM_speed>:
/**
 * @brief	Sets the PWM for a channel of TIM1.
 * @return	int Desired PWM duty pulse (0 to PWM_MAX_VAL).
 */
void set_PWM_speed(int speed)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	if (speed > PWM_MAX_VAL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f241 029a 	movw	r2, #4250	@ 0x109a
 8001542:	4293      	cmp	r3, r2
 8001544:	dd03      	ble.n	800154e <set_PWM_speed+0x1a>
	{
		speed = PWM_MAX_VAL;
 8001546:	f241 039a 	movw	r3, #4250	@ 0x109a
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	e004      	b.n	8001558 <set_PWM_speed+0x24>
	}
	else if (speed < 0)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	da01      	bge.n	8001558 <set_PWM_speed+0x24>
	{
		speed = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
	}

	// Set main PWM pulse width for Channel 1 and Channel 2
	set_PWM(speed);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff8f 	bl	800147c <set_PWM>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800156c:	f000 fef5 	bl	800235a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001570:	f000 f830 	bl	80015d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001574:	f7ff fee0 	bl	8001338 <MX_GPIO_Init>
  MX_ADC2_Init();
 8001578:	f7ff fd7e 	bl	8001078 <MX_ADC2_Init>
  MX_ADC1_Init();
 800157c:	f7ff fd04 	bl	8000f88 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001580:	f000 fa48 	bl	8001a14 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001584:	f000 faf8 	bl	8001b78 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001588:	f000 fc2c 	bl	8001de4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800158c:	f000 fc76 	bl	8001e7c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001590:	2100      	movs	r1, #0
 8001592:	480f      	ldr	r0, [pc, #60]	@ (80015d0 <main+0x68>)
 8001594:	f003 fd1a 	bl	8004fcc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001598:	2100      	movs	r1, #0
 800159a:	480d      	ldr	r0, [pc, #52]	@ (80015d0 <main+0x68>)
 800159c:	f004 fdfe 	bl	800619c <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80015a0:	2104      	movs	r1, #4
 80015a2:	480b      	ldr	r0, [pc, #44]	@ (80015d0 <main+0x68>)
 80015a4:	f003 fd12 	bl	8004fcc <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80015a8:	2104      	movs	r1, #4
 80015aa:	4809      	ldr	r0, [pc, #36]	@ (80015d0 <main+0x68>)
 80015ac:	f004 fdf6 	bl	800619c <HAL_TIMEx_PWMN_Start>

	set_PWM_ratio(0.6);
 80015b0:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 80015c8 <main+0x60>
 80015b4:	f7ff ff7c 	bl	80014b0 <set_PWM_ratio>

	Shell_Init();
 80015b8:	f000 fd54 	bl	8002064 <Shell_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 80015bc:	f000 fd92 	bl	80020e4 <Shell_Loop>
 80015c0:	e7fc      	b.n	80015bc <main+0x54>
 80015c2:	bf00      	nop
 80015c4:	f3af 8000 	nop.w
 80015c8:	33333333 	.word	0x33333333
 80015cc:	3fe33333 	.word	0x3fe33333
 80015d0:	20000458 	.word	0x20000458

080015d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b094      	sub	sp, #80	@ 0x50
 80015d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015da:	f107 0318 	add.w	r3, r7, #24
 80015de:	2238      	movs	r2, #56	@ 0x38
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f008 f865 	bl	80096b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80015f6:	2000      	movs	r0, #0
 80015f8:	f002 fb4e 	bl	8003c98 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015fc:	2301      	movs	r3, #1
 80015fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001600:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001604:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001606:	2302      	movs	r3, #2
 8001608:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800160a:	2303      	movs	r3, #3
 800160c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800160e:	2306      	movs	r3, #6
 8001610:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001612:	2355      	movs	r3, #85	@ 0x55
 8001614:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001616:	2302      	movs	r3, #2
 8001618:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800161a:	2302      	movs	r3, #2
 800161c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800161e:	2302      	movs	r3, #2
 8001620:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001622:	f107 0318 	add.w	r3, r7, #24
 8001626:	4618      	mov	r0, r3
 8001628:	f002 fbea 	bl	8003e00 <HAL_RCC_OscConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001632:	f000 f82b 	bl	800168c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001636:	230f      	movs	r3, #15
 8001638:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163a:	2303      	movs	r3, #3
 800163c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2104      	movs	r1, #4
 800164e:	4618      	mov	r0, r3
 8001650:	f002 feee 	bl	8004430 <HAL_RCC_ClockConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800165a:	f000 f817 	bl	800168c <Error_Handler>
  }
}
 800165e:	bf00      	nop
 8001660:	3750      	adds	r7, #80	@ 0x50
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a04      	ldr	r2, [pc, #16]	@ (8001688 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d101      	bne.n	800167e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800167a:	f000 fe87 	bl	800238c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40001000 	.word	0x40001000

0800168c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001690:	b672      	cpsid	i
}
 8001692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <Error_Handler+0x8>

08001698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <HAL_MspInit+0x44>)
 80016a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a2:	4a0e      	ldr	r2, [pc, #56]	@ (80016dc <HAL_MspInit+0x44>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <HAL_MspInit+0x44>)
 80016ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <HAL_MspInit+0x44>)
 80016b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ba:	4a08      	ldr	r2, [pc, #32]	@ (80016dc <HAL_MspInit+0x44>)
 80016bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_MspInit+0x44>)
 80016c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016ce:	f002 fb87 	bl	8003de0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08c      	sub	sp, #48	@ 0x30
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016f0:	4b2c      	ldr	r3, [pc, #176]	@ (80017a4 <HAL_InitTick+0xc4>)
 80016f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f4:	4a2b      	ldr	r2, [pc, #172]	@ (80017a4 <HAL_InitTick+0xc4>)
 80016f6:	f043 0310 	orr.w	r3, r3, #16
 80016fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80016fc:	4b29      	ldr	r3, [pc, #164]	@ (80017a4 <HAL_InitTick+0xc4>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001708:	f107 020c 	add.w	r2, r7, #12
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f003 f862 	bl	80047dc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001718:	f003 f834 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 800171c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800171e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001720:	4a21      	ldr	r2, [pc, #132]	@ (80017a8 <HAL_InitTick+0xc8>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	0c9b      	lsrs	r3, r3, #18
 8001728:	3b01      	subs	r3, #1
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800172c:	4b1f      	ldr	r3, [pc, #124]	@ (80017ac <HAL_InitTick+0xcc>)
 800172e:	4a20      	ldr	r2, [pc, #128]	@ (80017b0 <HAL_InitTick+0xd0>)
 8001730:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001732:	4b1e      	ldr	r3, [pc, #120]	@ (80017ac <HAL_InitTick+0xcc>)
 8001734:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001738:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800173a:	4a1c      	ldr	r2, [pc, #112]	@ (80017ac <HAL_InitTick+0xcc>)
 800173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001740:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <HAL_InitTick+0xcc>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001746:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <HAL_InitTick+0xcc>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800174c:	4817      	ldr	r0, [pc, #92]	@ (80017ac <HAL_InitTick+0xcc>)
 800174e:	f003 fb0b 	bl	8004d68 <HAL_TIM_Base_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001758:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800175c:	2b00      	cmp	r3, #0
 800175e:	d11b      	bne.n	8001798 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001760:	4812      	ldr	r0, [pc, #72]	@ (80017ac <HAL_InitTick+0xcc>)
 8001762:	f003 fb63 	bl	8004e2c <HAL_TIM_Base_Start_IT>
 8001766:	4603      	mov	r3, r0
 8001768:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800176c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001770:	2b00      	cmp	r3, #0
 8001772:	d111      	bne.n	8001798 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001774:	2036      	movs	r0, #54	@ 0x36
 8001776:	f002 f803 	bl	8003780 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b0f      	cmp	r3, #15
 800177e:	d808      	bhi.n	8001792 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001780:	2200      	movs	r2, #0
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	2036      	movs	r0, #54	@ 0x36
 8001786:	f001 ffe1 	bl	800374c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800178a:	4a0a      	ldr	r2, [pc, #40]	@ (80017b4 <HAL_InitTick+0xd4>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	e002      	b.n	8001798 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001798:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800179c:	4618      	mov	r0, r3
 800179e:	3730      	adds	r7, #48	@ 0x30
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021000 	.word	0x40021000
 80017a8:	431bde83 	.word	0x431bde83
 80017ac:	20000408 	.word	0x20000408
 80017b0:	40001000 	.word	0x40001000
 80017b4:	20000140 	.word	0x20000140

080017b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <NMI_Handler+0x4>

080017c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <HardFault_Handler+0x4>

080017c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <MemManage_Handler+0x4>

080017d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <BusFault_Handler+0x4>

080017d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <UsageFault_Handler+0x4>

080017e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <USART2_IRQHandler+0x10>)
 800181e:	f005 f86f 	bl	8006900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200004f0 	.word	0x200004f0

0800182c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001830:	4802      	ldr	r0, [pc, #8]	@ (800183c <USART3_IRQHandler+0x10>)
 8001832:	f005 f865 	bl	8006900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000580 	.word	0x20000580

08001840 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001844:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001848:	f002 fa02 	bl	8003c50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}

08001850 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001854:	4802      	ldr	r0, [pc, #8]	@ (8001860 <TIM6_DAC_IRQHandler+0x10>)
 8001856:	f003 fccb 	bl	80051f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000408 	.word	0x20000408

08001864 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return 1;
 8001868:	2301      	movs	r3, #1
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <_kill>:

int _kill(int pid, int sig)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800187e:	f007 ffd5 	bl	800982c <__errno>
 8001882:	4603      	mov	r3, r0
 8001884:	2216      	movs	r2, #22
 8001886:	601a      	str	r2, [r3, #0]
  return -1;
 8001888:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <_exit>:

void _exit (int status)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800189c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ffe7 	bl	8001874 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018a6:	bf00      	nop
 80018a8:	e7fd      	b.n	80018a6 <_exit+0x12>

080018aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b086      	sub	sp, #24
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	e00a      	b.n	80018d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018bc:	f3af 8000 	nop.w
 80018c0:	4601      	mov	r1, r0
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	60ba      	str	r2, [r7, #8]
 80018c8:	b2ca      	uxtb	r2, r1
 80018ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3301      	adds	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	dbf0      	blt.n	80018bc <_read+0x12>
  }

  return len;
 80018da:	687b      	ldr	r3, [r7, #4]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	e009      	b.n	800190a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	60ba      	str	r2, [r7, #8]
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fdaa 	bl	8001458 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	3301      	adds	r3, #1
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	429a      	cmp	r2, r3
 8001910:	dbf1      	blt.n	80018f6 <_write+0x12>
  }
  return len;
 8001912:	687b      	ldr	r3, [r7, #4]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <_close>:

int _close(int file)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001944:	605a      	str	r2, [r3, #4]
  return 0;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <_isatty>:

int _isatty(int file)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800196a:	b480      	push	{r7}
 800196c:	b085      	sub	sp, #20
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800198c:	4a14      	ldr	r2, [pc, #80]	@ (80019e0 <_sbrk+0x5c>)
 800198e:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <_sbrk+0x60>)
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001998:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <_sbrk+0x64>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a0:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <_sbrk+0x64>)
 80019a2:	4a12      	ldr	r2, [pc, #72]	@ (80019ec <_sbrk+0x68>)
 80019a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019a6:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d207      	bcs.n	80019c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b4:	f007 ff3a 	bl	800982c <__errno>
 80019b8:	4603      	mov	r3, r0
 80019ba:	220c      	movs	r2, #12
 80019bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019c2:	e009      	b.n	80019d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ca:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	4a05      	ldr	r2, [pc, #20]	@ (80019e8 <_sbrk+0x64>)
 80019d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019d6:	68fb      	ldr	r3, [r7, #12]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20020000 	.word	0x20020000
 80019e4:	00000400 	.word	0x00000400
 80019e8:	20000454 	.word	0x20000454
 80019ec:	20000820 	.word	0x20000820

080019f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <SystemInit+0x20>)
 80019f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019fa:	4a05      	ldr	r2, [pc, #20]	@ (8001a10 <SystemInit+0x20>)
 80019fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b098      	sub	sp, #96	@ 0x60
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a26:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
 8001a34:	611a      	str	r2, [r3, #16]
 8001a36:	615a      	str	r2, [r3, #20]
 8001a38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2234      	movs	r2, #52	@ 0x34
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f007 fe36 	bl	80096b2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a46:	4b4a      	ldr	r3, [pc, #296]	@ (8001b70 <MX_TIM1_Init+0x15c>)
 8001a48:	4a4a      	ldr	r2, [pc, #296]	@ (8001b74 <MX_TIM1_Init+0x160>)
 8001a4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a4c:	4b48      	ldr	r3, [pc, #288]	@ (8001b70 <MX_TIM1_Init+0x15c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001a52:	4b47      	ldr	r3, [pc, #284]	@ (8001b70 <MX_TIM1_Init+0x15c>)
 8001a54:	2220      	movs	r2, #32
 8001a56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4249;
 8001a58:	4b45      	ldr	r3, [pc, #276]	@ (8001b70 <MX_TIM1_Init+0x15c>)
 8001a5a:	f241 0299 	movw	r2, #4249	@ 0x1099
 8001a5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a60:	4b43      	ldr	r3, [pc, #268]	@ (8001b70 <MX_TIM1_Init+0x15c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a66:	4b42      	ldr	r3, [pc, #264]	@ (8001b70 <MX_TIM1_Init+0x15c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6c:	4b40      	ldr	r3, [pc, #256]	@ (8001b70 <MX_TIM1_Init+0x15c>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a72:	483f      	ldr	r0, [pc, #252]	@ (8001b70 <MX_TIM1_Init+0x15c>)
 8001a74:	f003 fa52 	bl	8004f1c <HAL_TIM_PWM_Init>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001a7e:	f7ff fe05 	bl	800168c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a8e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a92:	4619      	mov	r1, r3
 8001a94:	4836      	ldr	r0, [pc, #216]	@ (8001b70 <MX_TIM1_Init+0x15c>)
 8001a96:	f004 fc43 	bl	8006320 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001aa0:	f7ff fdf4 	bl	800168c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa4:	2360      	movs	r3, #96	@ 0x60
 8001aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 3000;
 8001aa8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ac2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4829      	ldr	r0, [pc, #164]	@ (8001b70 <MX_TIM1_Init+0x15c>)
 8001acc:	f003 fd10 	bl	80054f0 <HAL_TIM_PWM_ConfigChannel>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001ad6:	f7ff fdd9 	bl	800168c <Error_Handler>
  }
  sConfigOC.Pulse = 5000;
 8001ada:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ae0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ae4:	2204      	movs	r2, #4
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4821      	ldr	r0, [pc, #132]	@ (8001b70 <MX_TIM1_Init+0x15c>)
 8001aea:	f003 fd01 	bl	80054f0 <HAL_TIM_PWM_ConfigChannel>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8001af4:	f7ff fdca 	bl	800168c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001afc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b00:	2208      	movs	r2, #8
 8001b02:	4619      	mov	r1, r3
 8001b04:	481a      	ldr	r0, [pc, #104]	@ (8001b70 <MX_TIM1_Init+0x15c>)
 8001b06:	f003 fcf3 	bl	80054f0 <HAL_TIM_PWM_ConfigChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001b10:	f7ff fdbc 	bl	800168c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 34;
 8001b20:	2322      	movs	r3, #34	@ 0x22
 8001b22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001b44:	2300      	movs	r3, #0
 8001b46:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4807      	ldr	r0, [pc, #28]	@ (8001b70 <MX_TIM1_Init+0x15c>)
 8001b52:	f004 fc7b 	bl	800644c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8001b5c:	f7ff fd96 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b60:	4803      	ldr	r0, [pc, #12]	@ (8001b70 <MX_TIM1_Init+0x15c>)
 8001b62:	f000 f8d7 	bl	8001d14 <HAL_TIM_MspPostInit>

}
 8001b66:	bf00      	nop
 8001b68:	3760      	adds	r7, #96	@ 0x60
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000458 	.word	0x20000458
 8001b74:	40012c00 	.word	0x40012c00

08001b78 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001b7e:	f107 0310 	add.w	r3, r7, #16
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b96:	4b1c      	ldr	r3, [pc, #112]	@ (8001c08 <MX_TIM3_Init+0x90>)
 8001b98:	4a1c      	ldr	r2, [pc, #112]	@ (8001c0c <MX_TIM3_Init+0x94>)
 8001b9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c08 <MX_TIM3_Init+0x90>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba2:	4b19      	ldr	r3, [pc, #100]	@ (8001c08 <MX_TIM3_Init+0x90>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ba8:	4b17      	ldr	r3, [pc, #92]	@ (8001c08 <MX_TIM3_Init+0x90>)
 8001baa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb0:	4b15      	ldr	r3, [pc, #84]	@ (8001c08 <MX_TIM3_Init+0x90>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	@ (8001c08 <MX_TIM3_Init+0x90>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001bcc:	f107 0310 	add.w	r3, r7, #16
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480d      	ldr	r0, [pc, #52]	@ (8001c08 <MX_TIM3_Init+0x90>)
 8001bd4:	f004 fa33 	bl	800603e <HAL_TIMEx_HallSensor_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001bde:	f7ff fd55 	bl	800168c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001be2:	2350      	movs	r3, #80	@ 0x50
 8001be4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	4619      	mov	r1, r3
 8001bee:	4806      	ldr	r0, [pc, #24]	@ (8001c08 <MX_TIM3_Init+0x90>)
 8001bf0:	f004 fb96 	bl	8006320 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001bfa:	f7ff fd47 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	3720      	adds	r7, #32
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200004a4 	.word	0x200004a4
 8001c0c:	40000400 	.word	0x40000400

08001c10 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c48 <HAL_TIM_PWM_MspInit+0x38>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d10b      	bne.n	8001c3a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c22:	4b0a      	ldr	r3, [pc, #40]	@ (8001c4c <HAL_TIM_PWM_MspInit+0x3c>)
 8001c24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c26:	4a09      	ldr	r2, [pc, #36]	@ (8001c4c <HAL_TIM_PWM_MspInit+0x3c>)
 8001c28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c2e:	4b07      	ldr	r3, [pc, #28]	@ (8001c4c <HAL_TIM_PWM_MspInit+0x3c>)
 8001c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40012c00 	.word	0x40012c00
 8001c4c:	40021000 	.word	0x40021000

08001c50 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	@ 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a26      	ldr	r2, [pc, #152]	@ (8001d08 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d145      	bne.n	8001cfe <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c72:	4b26      	ldr	r3, [pc, #152]	@ (8001d0c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c76:	4a25      	ldr	r2, [pc, #148]	@ (8001d0c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c78:	f043 0302 	orr.w	r3, r3, #2
 8001c7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c7e:	4b23      	ldr	r3, [pc, #140]	@ (8001d0c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8a:	4b20      	ldr	r3, [pc, #128]	@ (8001d0c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8001d0c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c96:	4b1d      	ldr	r3, [pc, #116]	@ (8001d0c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d0c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca6:	4a19      	ldr	r2, [pc, #100]	@ (8001d0c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ca8:	f043 0304 	orr.w	r3, r3, #4
 8001cac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cae:	4b17      	ldr	r3, [pc, #92]	@ (8001d0c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001cba:	2350      	movs	r3, #80	@ 0x50
 8001cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cd8:	f001 fe20 	bl	800391c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001cfa:	f001 fe0f 	bl	800391c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001cfe:	bf00      	nop
 8001d00:	3728      	adds	r7, #40	@ 0x28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40000400 	.word	0x40000400
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	48000800 	.word	0x48000800

08001d14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	@ 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a29      	ldr	r2, [pc, #164]	@ (8001dd8 <HAL_TIM_MspPostInit+0xc4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d14b      	bne.n	8001dce <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	4b29      	ldr	r3, [pc, #164]	@ (8001ddc <HAL_TIM_MspPostInit+0xc8>)
 8001d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3a:	4a28      	ldr	r2, [pc, #160]	@ (8001ddc <HAL_TIM_MspPostInit+0xc8>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d42:	4b26      	ldr	r3, [pc, #152]	@ (8001ddc <HAL_TIM_MspPostInit+0xc8>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4e:	4b23      	ldr	r3, [pc, #140]	@ (8001ddc <HAL_TIM_MspPostInit+0xc8>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d52:	4a22      	ldr	r2, [pc, #136]	@ (8001ddc <HAL_TIM_MspPostInit+0xc8>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d5a:	4b20      	ldr	r3, [pc, #128]	@ (8001ddc <HAL_TIM_MspPostInit+0xc8>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001d66:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001d78:	2306      	movs	r3, #6
 8001d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	4619      	mov	r1, r3
 8001d82:	4817      	ldr	r0, [pc, #92]	@ (8001de0 <HAL_TIM_MspPostInit+0xcc>)
 8001d84:	f001 fdca 	bl	800391c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001d88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4619      	mov	r1, r3
 8001da4:	480e      	ldr	r0, [pc, #56]	@ (8001de0 <HAL_TIM_MspPostInit+0xcc>)
 8001da6:	f001 fdb9 	bl	800391c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001daa:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db8:	2300      	movs	r3, #0
 8001dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001dbc:	2306      	movs	r3, #6
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dca:	f001 fda7 	bl	800391c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001dce:	bf00      	nop
 8001dd0:	3728      	adds	r7, #40	@ 0x28
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40012c00 	.word	0x40012c00
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	48000400 	.word	0x48000400

08001de4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001de8:	4b22      	ldr	r3, [pc, #136]	@ (8001e74 <MX_USART2_UART_Init+0x90>)
 8001dea:	4a23      	ldr	r2, [pc, #140]	@ (8001e78 <MX_USART2_UART_Init+0x94>)
 8001dec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dee:	4b21      	ldr	r3, [pc, #132]	@ (8001e74 <MX_USART2_UART_Init+0x90>)
 8001df0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001df4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001df6:	4b1f      	ldr	r3, [pc, #124]	@ (8001e74 <MX_USART2_UART_Init+0x90>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e74 <MX_USART2_UART_Init+0x90>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e02:	4b1c      	ldr	r3, [pc, #112]	@ (8001e74 <MX_USART2_UART_Init+0x90>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e08:	4b1a      	ldr	r3, [pc, #104]	@ (8001e74 <MX_USART2_UART_Init+0x90>)
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e0e:	4b19      	ldr	r3, [pc, #100]	@ (8001e74 <MX_USART2_UART_Init+0x90>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e14:	4b17      	ldr	r3, [pc, #92]	@ (8001e74 <MX_USART2_UART_Init+0x90>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e1a:	4b16      	ldr	r3, [pc, #88]	@ (8001e74 <MX_USART2_UART_Init+0x90>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e20:	4b14      	ldr	r3, [pc, #80]	@ (8001e74 <MX_USART2_UART_Init+0x90>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e26:	4b13      	ldr	r3, [pc, #76]	@ (8001e74 <MX_USART2_UART_Init+0x90>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e2c:	4811      	ldr	r0, [pc, #68]	@ (8001e74 <MX_USART2_UART_Init+0x90>)
 8001e2e:	f004 fc2a 	bl	8006686 <HAL_UART_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001e38:	f7ff fc28 	bl	800168c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	480d      	ldr	r0, [pc, #52]	@ (8001e74 <MX_USART2_UART_Init+0x90>)
 8001e40:	f006 fbcd 	bl	80085de <HAL_UARTEx_SetTxFifoThreshold>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001e4a:	f7ff fc1f 	bl	800168c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4808      	ldr	r0, [pc, #32]	@ (8001e74 <MX_USART2_UART_Init+0x90>)
 8001e52:	f006 fc02 	bl	800865a <HAL_UARTEx_SetRxFifoThreshold>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001e5c:	f7ff fc16 	bl	800168c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001e60:	4804      	ldr	r0, [pc, #16]	@ (8001e74 <MX_USART2_UART_Init+0x90>)
 8001e62:	f006 fb83 	bl	800856c <HAL_UARTEx_DisableFifoMode>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001e6c:	f7ff fc0e 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	200004f0 	.word	0x200004f0
 8001e78:	40004400 	.word	0x40004400

08001e7c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e80:	4b22      	ldr	r3, [pc, #136]	@ (8001f0c <MX_USART3_UART_Init+0x90>)
 8001e82:	4a23      	ldr	r2, [pc, #140]	@ (8001f10 <MX_USART3_UART_Init+0x94>)
 8001e84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e86:	4b21      	ldr	r3, [pc, #132]	@ (8001f0c <MX_USART3_UART_Init+0x90>)
 8001e88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f0c <MX_USART3_UART_Init+0x90>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e94:	4b1d      	ldr	r3, [pc, #116]	@ (8001f0c <MX_USART3_UART_Init+0x90>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f0c <MX_USART3_UART_Init+0x90>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f0c <MX_USART3_UART_Init+0x90>)
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea6:	4b19      	ldr	r3, [pc, #100]	@ (8001f0c <MX_USART3_UART_Init+0x90>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eac:	4b17      	ldr	r3, [pc, #92]	@ (8001f0c <MX_USART3_UART_Init+0x90>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eb2:	4b16      	ldr	r3, [pc, #88]	@ (8001f0c <MX_USART3_UART_Init+0x90>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001eb8:	4b14      	ldr	r3, [pc, #80]	@ (8001f0c <MX_USART3_UART_Init+0x90>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ebe:	4b13      	ldr	r3, [pc, #76]	@ (8001f0c <MX_USART3_UART_Init+0x90>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ec4:	4811      	ldr	r0, [pc, #68]	@ (8001f0c <MX_USART3_UART_Init+0x90>)
 8001ec6:	f004 fbde 	bl	8006686 <HAL_UART_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ed0:	f7ff fbdc 	bl	800168c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	480d      	ldr	r0, [pc, #52]	@ (8001f0c <MX_USART3_UART_Init+0x90>)
 8001ed8:	f006 fb81 	bl	80085de <HAL_UARTEx_SetTxFifoThreshold>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001ee2:	f7ff fbd3 	bl	800168c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4808      	ldr	r0, [pc, #32]	@ (8001f0c <MX_USART3_UART_Init+0x90>)
 8001eea:	f006 fbb6 	bl	800865a <HAL_UARTEx_SetRxFifoThreshold>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001ef4:	f7ff fbca 	bl	800168c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001ef8:	4804      	ldr	r0, [pc, #16]	@ (8001f0c <MX_USART3_UART_Init+0x90>)
 8001efa:	f006 fb37 	bl	800856c <HAL_UARTEx_DisableFifoMode>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f04:	f7ff fbc2 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000580 	.word	0x20000580
 8001f10:	40004800 	.word	0x40004800

08001f14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b0a0      	sub	sp, #128	@ 0x80
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f2c:	f107 0318 	add.w	r3, r7, #24
 8001f30:	2254      	movs	r2, #84	@ 0x54
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f007 fbbc 	bl	80096b2 <memset>
  if(uartHandle->Instance==USART2)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a45      	ldr	r2, [pc, #276]	@ (8002054 <HAL_UART_MspInit+0x140>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d13f      	bne.n	8001fc4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f44:	2302      	movs	r3, #2
 8001f46:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f4c:	f107 0318 	add.w	r3, r7, #24
 8001f50:	4618      	mov	r0, r3
 8001f52:	f002 fcbb 	bl	80048cc <HAL_RCCEx_PeriphCLKConfig>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f5c:	f7ff fb96 	bl	800168c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f60:	4b3d      	ldr	r3, [pc, #244]	@ (8002058 <HAL_UART_MspInit+0x144>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f64:	4a3c      	ldr	r2, [pc, #240]	@ (8002058 <HAL_UART_MspInit+0x144>)
 8001f66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f6c:	4b3a      	ldr	r3, [pc, #232]	@ (8002058 <HAL_UART_MspInit+0x144>)
 8001f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f78:	4b37      	ldr	r3, [pc, #220]	@ (8002058 <HAL_UART_MspInit+0x144>)
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7c:	4a36      	ldr	r2, [pc, #216]	@ (8002058 <HAL_UART_MspInit+0x144>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f84:	4b34      	ldr	r3, [pc, #208]	@ (8002058 <HAL_UART_MspInit+0x144>)
 8001f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f90:	230c      	movs	r3, #12
 8001f92:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fa0:	2307      	movs	r3, #7
 8001fa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fae:	f001 fcb5 	bl	800391c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2026      	movs	r0, #38	@ 0x26
 8001fb8:	f001 fbc8 	bl	800374c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fbc:	2026      	movs	r0, #38	@ 0x26
 8001fbe:	f001 fbdf 	bl	8003780 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001fc2:	e043      	b.n	800204c <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a24      	ldr	r2, [pc, #144]	@ (800205c <HAL_UART_MspInit+0x148>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d13e      	bne.n	800204c <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001fce:	2304      	movs	r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fd6:	f107 0318 	add.w	r3, r7, #24
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f002 fc76 	bl	80048cc <HAL_RCCEx_PeriphCLKConfig>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001fe6:	f7ff fb51 	bl	800168c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fea:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <HAL_UART_MspInit+0x144>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fee:	4a1a      	ldr	r2, [pc, #104]	@ (8002058 <HAL_UART_MspInit+0x144>)
 8001ff0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ff4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ff6:	4b18      	ldr	r3, [pc, #96]	@ (8002058 <HAL_UART_MspInit+0x144>)
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002002:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <HAL_UART_MspInit+0x144>)
 8002004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002006:	4a14      	ldr	r2, [pc, #80]	@ (8002058 <HAL_UART_MspInit+0x144>)
 8002008:	f043 0304 	orr.w	r3, r3, #4
 800200c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800200e:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <HAL_UART_MspInit+0x144>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800201a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800201e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2300      	movs	r3, #0
 800202a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800202c:	2307      	movs	r3, #7
 800202e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002030:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002034:	4619      	mov	r1, r3
 8002036:	480a      	ldr	r0, [pc, #40]	@ (8002060 <HAL_UART_MspInit+0x14c>)
 8002038:	f001 fc70 	bl	800391c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800203c:	2200      	movs	r2, #0
 800203e:	2100      	movs	r1, #0
 8002040:	2027      	movs	r0, #39	@ 0x27
 8002042:	f001 fb83 	bl	800374c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002046:	2027      	movs	r0, #39	@ 0x27
 8002048:	f001 fb9a 	bl	8003780 <HAL_NVIC_EnableIRQ>
}
 800204c:	bf00      	nop
 800204e:	3780      	adds	r7, #128	@ 0x80
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40004400 	.word	0x40004400
 8002058:	40021000 	.word	0x40021000
 800205c:	40004800 	.word	0x40004800
 8002060:	48000800 	.word	0x48000800

08002064 <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8002068:	2224      	movs	r2, #36	@ 0x24
 800206a:	2100      	movs	r1, #0
 800206c:	4816      	ldr	r0, [pc, #88]	@ (80020c8 <Shell_Init+0x64>)
 800206e:	f007 fb20 	bl	80096b2 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 8002072:	2240      	movs	r2, #64	@ 0x40
 8002074:	2100      	movs	r1, #0
 8002076:	4815      	ldr	r0, [pc, #84]	@ (80020cc <Shell_Init+0x68>)
 8002078:	f007 fb1b 	bl	80096b2 <memset>
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 800207c:	4b14      	ldr	r3, [pc, #80]	@ (80020d0 <Shell_Init+0x6c>)
 800207e:	2200      	movs	r2, #0
 8002080:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8002082:	2240      	movs	r2, #64	@ 0x40
 8002084:	2100      	movs	r1, #0
 8002086:	4813      	ldr	r0, [pc, #76]	@ (80020d4 <Shell_Init+0x70>)
 8002088:	f007 fb13 	bl	80096b2 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800208c:	2201      	movs	r2, #1
 800208e:	4910      	ldr	r1, [pc, #64]	@ (80020d0 <Shell_Init+0x6c>)
 8002090:	4811      	ldr	r0, [pc, #68]	@ (80020d8 <Shell_Init+0x74>)
 8002092:	f004 fbdf 	bl	8006854 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8002096:	4811      	ldr	r0, [pc, #68]	@ (80020dc <Shell_Init+0x78>)
 8002098:	f7fe f8cc 	bl	8000234 <strlen>
 800209c:	4603      	mov	r3, r0
 800209e:	b29a      	uxth	r2, r3
 80020a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020a4:	490d      	ldr	r1, [pc, #52]	@ (80020dc <Shell_Init+0x78>)
 80020a6:	480c      	ldr	r0, [pc, #48]	@ (80020d8 <Shell_Init+0x74>)
 80020a8:	f004 fb3d 	bl	8006726 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 80020ac:	480c      	ldr	r0, [pc, #48]	@ (80020e0 <Shell_Init+0x7c>)
 80020ae:	f7fe f8c1 	bl	8000234 <strlen>
 80020b2:	4603      	mov	r3, r0
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020ba:	4909      	ldr	r1, [pc, #36]	@ (80020e0 <Shell_Init+0x7c>)
 80020bc:	4806      	ldr	r0, [pc, #24]	@ (80020d8 <Shell_Init+0x74>)
 80020be:	f004 fb32 	bl	8006726 <HAL_UART_Transmit>
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	2000069c 	.word	0x2000069c
 80020cc:	20000658 	.word	0x20000658
 80020d0:	20000614 	.word	0x20000614
 80020d4:	20000618 	.word	0x20000618
 80020d8:	200004f0 	.word	0x200004f0
 80020dc:	20000020 	.word	0x20000020
 80020e0:	20000004 	.word	0x20000004

080020e4 <Shell_Loop>:

void Shell_Loop(void){
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 80020e8:	4b68      	ldr	r3, [pc, #416]	@ (800228c <Shell_Loop+0x1a8>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d05b      	beq.n	80021a8 <Shell_Loop+0xc4>
		switch(uartRxBuffer[0]){
 80020f0:	4b67      	ldr	r3, [pc, #412]	@ (8002290 <Shell_Loop+0x1ac>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d034      	beq.n	8002162 <Shell_Loop+0x7e>
 80020f8:	2b0d      	cmp	r3, #13
 80020fa:	d142      	bne.n	8002182 <Shell_Loop+0x9e>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80020fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002100:	2203      	movs	r2, #3
 8002102:	4964      	ldr	r1, [pc, #400]	@ (8002294 <Shell_Loop+0x1b0>)
 8002104:	4864      	ldr	r0, [pc, #400]	@ (8002298 <Shell_Loop+0x1b4>)
 8002106:	f004 fb0e 	bl	8006726 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 800210a:	4b64      	ldr	r3, [pc, #400]	@ (800229c <Shell_Loop+0x1b8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a64      	ldr	r2, [pc, #400]	@ (80022a0 <Shell_Loop+0x1bc>)
 8002110:	2100      	movs	r1, #0
 8002112:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8002114:	4b63      	ldr	r3, [pc, #396]	@ (80022a4 <Shell_Loop+0x1c0>)
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 800211a:	4963      	ldr	r1, [pc, #396]	@ (80022a8 <Shell_Loop+0x1c4>)
 800211c:	4860      	ldr	r0, [pc, #384]	@ (80022a0 <Shell_Loop+0x1bc>)
 800211e:	f007 fae3 	bl	80096e8 <strtok>
 8002122:	4603      	mov	r3, r0
 8002124:	4a61      	ldr	r2, [pc, #388]	@ (80022ac <Shell_Loop+0x1c8>)
 8002126:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8002128:	e010      	b.n	800214c <Shell_Loop+0x68>
				argv[argc++] = token;
 800212a:	4b5e      	ldr	r3, [pc, #376]	@ (80022a4 <Shell_Loop+0x1c0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	495c      	ldr	r1, [pc, #368]	@ (80022a4 <Shell_Loop+0x1c0>)
 8002132:	600a      	str	r2, [r1, #0]
 8002134:	4a5d      	ldr	r2, [pc, #372]	@ (80022ac <Shell_Loop+0x1c8>)
 8002136:	6812      	ldr	r2, [r2, #0]
 8002138:	495d      	ldr	r1, [pc, #372]	@ (80022b0 <Shell_Loop+0x1cc>)
 800213a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 800213e:	495a      	ldr	r1, [pc, #360]	@ (80022a8 <Shell_Loop+0x1c4>)
 8002140:	2000      	movs	r0, #0
 8002142:	f007 fad1 	bl	80096e8 <strtok>
 8002146:	4603      	mov	r3, r0
 8002148:	4a58      	ldr	r2, [pc, #352]	@ (80022ac <Shell_Loop+0x1c8>)
 800214a:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800214c:	4b57      	ldr	r3, [pc, #348]	@ (80022ac <Shell_Loop+0x1c8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1ea      	bne.n	800212a <Shell_Loop+0x46>
			}
			idx_cmd = 0;
 8002154:	4b51      	ldr	r3, [pc, #324]	@ (800229c <Shell_Loop+0x1b8>)
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 800215a:	4b56      	ldr	r3, [pc, #344]	@ (80022b4 <Shell_Loop+0x1d0>)
 800215c:	2201      	movs	r2, #1
 800215e:	601a      	str	r2, [r3, #0]
			break;
 8002160:	e01f      	b.n	80021a2 <Shell_Loop+0xbe>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8002162:	4b4e      	ldr	r3, [pc, #312]	@ (800229c <Shell_Loop+0x1b8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	1e5a      	subs	r2, r3, #1
 8002168:	494c      	ldr	r1, [pc, #304]	@ (800229c <Shell_Loop+0x1b8>)
 800216a:	600a      	str	r2, [r1, #0]
 800216c:	4a4c      	ldr	r2, [pc, #304]	@ (80022a0 <Shell_Loop+0x1bc>)
 800216e:	2100      	movs	r1, #0
 8002170:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8002172:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002176:	2204      	movs	r2, #4
 8002178:	494f      	ldr	r1, [pc, #316]	@ (80022b8 <Shell_Loop+0x1d4>)
 800217a:	4847      	ldr	r0, [pc, #284]	@ (8002298 <Shell_Loop+0x1b4>)
 800217c:	f004 fad3 	bl	8006726 <HAL_UART_Transmit>
			break;
 8002180:	e00f      	b.n	80021a2 <Shell_Loop+0xbe>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8002182:	4b46      	ldr	r3, [pc, #280]	@ (800229c <Shell_Loop+0x1b8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	4944      	ldr	r1, [pc, #272]	@ (800229c <Shell_Loop+0x1b8>)
 800218a:	600a      	str	r2, [r1, #0]
 800218c:	4a40      	ldr	r2, [pc, #256]	@ (8002290 <Shell_Loop+0x1ac>)
 800218e:	7811      	ldrb	r1, [r2, #0]
 8002190:	4a43      	ldr	r2, [pc, #268]	@ (80022a0 <Shell_Loop+0x1bc>)
 8002192:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8002194:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002198:	2201      	movs	r2, #1
 800219a:	493d      	ldr	r1, [pc, #244]	@ (8002290 <Shell_Loop+0x1ac>)
 800219c:	483e      	ldr	r0, [pc, #248]	@ (8002298 <Shell_Loop+0x1b4>)
 800219e:	f004 fac2 	bl	8006726 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 80021a2:	4b3a      	ldr	r3, [pc, #232]	@ (800228c <Shell_Loop+0x1a8>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 80021a8:	4b42      	ldr	r3, [pc, #264]	@ (80022b4 <Shell_Loop+0x1d0>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d06a      	beq.n	8002286 <Shell_Loop+0x1a2>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 80021b0:	4b3f      	ldr	r3, [pc, #252]	@ (80022b0 <Shell_Loop+0x1cc>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4941      	ldr	r1, [pc, #260]	@ (80022bc <Shell_Loop+0x1d8>)
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe f832 	bl	8000220 <strcmp>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d107      	bne.n	80021d2 <Shell_Loop+0xee>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021c6:	221a      	movs	r2, #26
 80021c8:	493d      	ldr	r1, [pc, #244]	@ (80022c0 <Shell_Loop+0x1dc>)
 80021ca:	4833      	ldr	r0, [pc, #204]	@ (8002298 <Shell_Loop+0x1b4>)
 80021cc:	f004 faab 	bl	8006726 <HAL_UART_Transmit>
 80021d0:	e04f      	b.n	8002272 <Shell_Loop+0x18e>
		}
		else if(strcmp(argv[0],"help")==0){
 80021d2:	4b37      	ldr	r3, [pc, #220]	@ (80022b0 <Shell_Loop+0x1cc>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	493b      	ldr	r1, [pc, #236]	@ (80022c4 <Shell_Loop+0x1e0>)
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe f821 	bl	8000220 <strcmp>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10b      	bne.n	80021fc <Shell_Loop+0x118>
			HAL_UART_Transmit(&huart2, helpMessage, strlen((char *)helpMessage), HAL_MAX_DELAY);
 80021e4:	4838      	ldr	r0, [pc, #224]	@ (80022c8 <Shell_Loop+0x1e4>)
 80021e6:	f7fe f825 	bl	8000234 <strlen>
 80021ea:	4603      	mov	r3, r0
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021f2:	4935      	ldr	r1, [pc, #212]	@ (80022c8 <Shell_Loop+0x1e4>)
 80021f4:	4828      	ldr	r0, [pc, #160]	@ (8002298 <Shell_Loop+0x1b4>)
 80021f6:	f004 fa96 	bl	8006726 <HAL_UART_Transmit>
 80021fa:	e03a      	b.n	8002272 <Shell_Loop+0x18e>
		}
		else if(strcmp(argv[0],"ratio")==0){
 80021fc:	4b2c      	ldr	r3, [pc, #176]	@ (80022b0 <Shell_Loop+0x1cc>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4932      	ldr	r1, [pc, #200]	@ (80022cc <Shell_Loop+0x1e8>)
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe f80c 	bl	8000220 <strcmp>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d113      	bne.n	8002236 <Shell_Loop+0x152>
			if (argc > 1) {
 800220e:	4b25      	ldr	r3, [pc, #148]	@ (80022a4 <Shell_Loop+0x1c0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b01      	cmp	r3, #1
 8002214:	dd2d      	ble.n	8002272 <Shell_Loop+0x18e>
				set_PWM_ratio(atof(argv[1]));
 8002216:	4b26      	ldr	r3, [pc, #152]	@ (80022b0 <Shell_Loop+0x1cc>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	4618      	mov	r0, r3
 800221c:	f006 faaa 	bl	8008774 <atof>
 8002220:	eeb0 7a40 	vmov.f32	s14, s0
 8002224:	eef0 7a60 	vmov.f32	s15, s1
 8002228:	eeb0 0a47 	vmov.f32	s0, s14
 800222c:	eef0 0a67 	vmov.f32	s1, s15
 8002230:	f7ff f93e 	bl	80014b0 <set_PWM_ratio>
 8002234:	e01d      	b.n	8002272 <Shell_Loop+0x18e>
			}
		}
		else if(strcmp(argv[0],"speed")==0){
 8002236:	4b1e      	ldr	r3, [pc, #120]	@ (80022b0 <Shell_Loop+0x1cc>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4925      	ldr	r1, [pc, #148]	@ (80022d0 <Shell_Loop+0x1ec>)
 800223c:	4618      	mov	r0, r3
 800223e:	f7fd ffef 	bl	8000220 <strcmp>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10d      	bne.n	8002264 <Shell_Loop+0x180>
			if (argc > 1) {
 8002248:	4b16      	ldr	r3, [pc, #88]	@ (80022a4 <Shell_Loop+0x1c0>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b01      	cmp	r3, #1
 800224e:	dd10      	ble.n	8002272 <Shell_Loop+0x18e>
				set_PWM_speed(atoi(argv[1]));
 8002250:	4b17      	ldr	r3, [pc, #92]	@ (80022b0 <Shell_Loop+0x1cc>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	4618      	mov	r0, r3
 8002256:	f006 fa90 	bl	800877a <atoi>
 800225a:	4603      	mov	r3, r0
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff f969 	bl	8001534 <set_PWM_speed>
 8002262:	e006      	b.n	8002272 <Shell_Loop+0x18e>
			}
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8002264:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002268:	2214      	movs	r2, #20
 800226a:	491a      	ldr	r1, [pc, #104]	@ (80022d4 <Shell_Loop+0x1f0>)
 800226c:	480a      	ldr	r0, [pc, #40]	@ (8002298 <Shell_Loop+0x1b4>)
 800226e:	f004 fa5a 	bl	8006726 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002272:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002276:	221c      	movs	r2, #28
 8002278:	4917      	ldr	r1, [pc, #92]	@ (80022d8 <Shell_Loop+0x1f4>)
 800227a:	4807      	ldr	r0, [pc, #28]	@ (8002298 <Shell_Loop+0x1b4>)
 800227c:	f004 fa53 	bl	8006726 <HAL_UART_Transmit>
		newCmdReady = 0;
 8002280:	4b0c      	ldr	r3, [pc, #48]	@ (80022b4 <Shell_Loop+0x1d0>)
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
	}
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000610 	.word	0x20000610
 8002290:	20000614 	.word	0x20000614
 8002294:	20000088 	.word	0x20000088
 8002298:	200004f0 	.word	0x200004f0
 800229c:	20000698 	.word	0x20000698
 80022a0:	20000658 	.word	0x20000658
 80022a4:	200006c0 	.word	0x200006c0
 80022a8:	0800b550 	.word	0x0800b550
 80022ac:	200006c4 	.word	0x200006c4
 80022b0:	2000069c 	.word	0x2000069c
 80022b4:	200006c8 	.word	0x200006c8
 80022b8:	2000008c 	.word	0x2000008c
 80022bc:	0800b554 	.word	0x0800b554
 80022c0:	200000a4 	.word	0x200000a4
 80022c4:	0800b564 	.word	0x0800b564
 80022c8:	200000c0 	.word	0x200000c0
 80022cc:	0800b56c 	.word	0x0800b56c
 80022d0:	0800b574 	.word	0x0800b574
 80022d4:	20000090 	.word	0x20000090
 80022d8:	20000004 	.word	0x20000004

080022dc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80022e4:	4b05      	ldr	r3, [pc, #20]	@ (80022fc <HAL_UART_RxCpltCallback+0x20>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80022ea:	2201      	movs	r2, #1
 80022ec:	4904      	ldr	r1, [pc, #16]	@ (8002300 <HAL_UART_RxCpltCallback+0x24>)
 80022ee:	4805      	ldr	r0, [pc, #20]	@ (8002304 <HAL_UART_RxCpltCallback+0x28>)
 80022f0:	f004 fab0 	bl	8006854 <HAL_UART_Receive_IT>
}
 80022f4:	bf00      	nop
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000610 	.word	0x20000610
 8002300:	20000614 	.word	0x20000614
 8002304:	200004f0 	.word	0x200004f0

08002308 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002308:	480d      	ldr	r0, [pc, #52]	@ (8002340 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800230a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800230c:	480d      	ldr	r0, [pc, #52]	@ (8002344 <LoopForever+0x6>)
  ldr r1, =_edata
 800230e:	490e      	ldr	r1, [pc, #56]	@ (8002348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002310:	4a0e      	ldr	r2, [pc, #56]	@ (800234c <LoopForever+0xe>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002314:	e002      	b.n	800231c <LoopCopyDataInit>

08002316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231a:	3304      	adds	r3, #4

0800231c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800231c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002320:	d3f9      	bcc.n	8002316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002322:	4a0b      	ldr	r2, [pc, #44]	@ (8002350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002324:	4c0b      	ldr	r4, [pc, #44]	@ (8002354 <LoopForever+0x16>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002328:	e001      	b.n	800232e <LoopFillZerobss>

0800232a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800232c:	3204      	adds	r2, #4

0800232e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002330:	d3fb      	bcc.n	800232a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002332:	f7ff fb5d 	bl	80019f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002336:	f007 fa7f 	bl	8009838 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800233a:	f7ff f915 	bl	8001568 <main>

0800233e <LoopForever>:

LoopForever:
    b LoopForever
 800233e:	e7fe      	b.n	800233e <LoopForever>
  ldr   r0, =_estack
 8002340:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002348:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 800234c:	0800b9e4 	.word	0x0800b9e4
  ldr r2, =_sbss
 8002350:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 8002354:	2000081c 	.word	0x2000081c

08002358 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002358:	e7fe      	b.n	8002358 <ADC1_2_IRQHandler>

0800235a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002364:	2003      	movs	r0, #3
 8002366:	f001 f9e6 	bl	8003736 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800236a:	200f      	movs	r0, #15
 800236c:	f7ff f9b8 	bl	80016e0 <HAL_InitTick>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	71fb      	strb	r3, [r7, #7]
 800237a:	e001      	b.n	8002380 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800237c:	f7ff f98c 	bl	8001698 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002380:	79fb      	ldrb	r3, [r7, #7]

}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002390:	4b05      	ldr	r3, [pc, #20]	@ (80023a8 <HAL_IncTick+0x1c>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b05      	ldr	r3, [pc, #20]	@ (80023ac <HAL_IncTick+0x20>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4413      	add	r3, r2
 800239a:	4a03      	ldr	r2, [pc, #12]	@ (80023a8 <HAL_IncTick+0x1c>)
 800239c:	6013      	str	r3, [r2, #0]
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	200006cc 	.word	0x200006cc
 80023ac:	20000144 	.word	0x20000144

080023b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return uwTick;
 80023b4:	4b03      	ldr	r3, [pc, #12]	@ (80023c4 <HAL_GetTick+0x14>)
 80023b6:	681b      	ldr	r3, [r3, #0]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	200006cc 	.word	0x200006cc

080023c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	609a      	str	r2, [r3, #8]
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	609a      	str	r2, [r3, #8]
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3360      	adds	r3, #96	@ 0x60
 8002442:	461a      	mov	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4b08      	ldr	r3, [pc, #32]	@ (8002474 <LL_ADC_SetOffset+0x44>)
 8002452:	4013      	ands	r3, r2
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	4313      	orrs	r3, r2
 8002460:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002468:	bf00      	nop
 800246a:	371c      	adds	r7, #28
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	03fff000 	.word	0x03fff000

08002478 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3360      	adds	r3, #96	@ 0x60
 8002486:	461a      	mov	r2, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	3360      	adds	r3, #96	@ 0x60
 80024b4:	461a      	mov	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4413      	add	r3, r2
 80024bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	431a      	orrs	r2, r3
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80024ce:	bf00      	nop
 80024d0:	371c      	adds	r7, #28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80024da:	b480      	push	{r7}
 80024dc:	b087      	sub	sp, #28
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	3360      	adds	r3, #96	@ 0x60
 80024ea:	461a      	mov	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	431a      	orrs	r2, r3
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002504:	bf00      	nop
 8002506:	371c      	adds	r7, #28
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	3360      	adds	r3, #96	@ 0x60
 8002520:	461a      	mov	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	431a      	orrs	r2, r3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800253a:	bf00      	nop
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	615a      	str	r2, [r3, #20]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	3330      	adds	r3, #48	@ 0x30
 800257c:	461a      	mov	r2, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	4413      	add	r3, r2
 800258a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f003 031f 	and.w	r3, r3, #31
 8002596:	211f      	movs	r1, #31
 8002598:	fa01 f303 	lsl.w	r3, r1, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	401a      	ands	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	0e9b      	lsrs	r3, r3, #26
 80025a4:	f003 011f 	and.w	r1, r3, #31
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f003 031f 	and.w	r3, r3, #31
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	431a      	orrs	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025b8:	bf00      	nop
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	3314      	adds	r3, #20
 80025d4:	461a      	mov	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	0e5b      	lsrs	r3, r3, #25
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	4413      	add	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	0d1b      	lsrs	r3, r3, #20
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	2107      	movs	r1, #7
 80025f2:	fa01 f303 	lsl.w	r3, r1, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	401a      	ands	r2, r3
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	0d1b      	lsrs	r3, r3, #20
 80025fe:	f003 031f 	and.w	r3, r3, #31
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	fa01 f303 	lsl.w	r3, r1, r3
 8002608:	431a      	orrs	r2, r3
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800260e:	bf00      	nop
 8002610:	371c      	adds	r7, #28
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a0f      	ldr	r2, [pc, #60]	@ (8002668 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d10a      	bne.n	8002646 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263c:	431a      	orrs	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002644:	e00a      	b.n	800265c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002652:	43db      	mvns	r3, r3
 8002654:	401a      	ands	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	407f0000 	.word	0x407f0000

0800266c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800267c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6093      	str	r3, [r2, #8]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026a4:	d101      	bne.n	80026aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80026c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026f4:	d101      	bne.n	80026fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <LL_ADC_IsEnabled+0x18>
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <LL_ADC_IsEnabled+0x1a>
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b04      	cmp	r3, #4
 8002740:	d101      	bne.n	8002746 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b08      	cmp	r3, #8
 8002766:	d101      	bne.n	800276c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
	...

0800277c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800277c:	b590      	push	{r4, r7, lr}
 800277e:	b089      	sub	sp, #36	@ 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002788:	2300      	movs	r3, #0
 800278a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e1af      	b.n	8002af6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d109      	bne.n	80027b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7fe fccd 	bl	8001144 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff ff67 	bl	8002690 <LL_ADC_IsDeepPowerDownEnabled>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d004      	beq.n	80027d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff4d 	bl	800266c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff ff82 	bl	80026e0 <LL_ADC_IsInternalRegulatorEnabled>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d115      	bne.n	800280e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff ff66 	bl	80026b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027ec:	4b9f      	ldr	r3, [pc, #636]	@ (8002a6c <HAL_ADC_Init+0x2f0>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	099b      	lsrs	r3, r3, #6
 80027f2:	4a9f      	ldr	r2, [pc, #636]	@ (8002a70 <HAL_ADC_Init+0x2f4>)
 80027f4:	fba2 2303 	umull	r2, r3, r2, r3
 80027f8:	099b      	lsrs	r3, r3, #6
 80027fa:	3301      	adds	r3, #1
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002800:	e002      	b.n	8002808 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	3b01      	subs	r3, #1
 8002806:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f9      	bne.n	8002802 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff64 	bl	80026e0 <LL_ADC_IsInternalRegulatorEnabled>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10d      	bne.n	800283a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002822:	f043 0210 	orr.w	r2, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800282e:	f043 0201 	orr.w	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff ff75 	bl	800272e <LL_ADC_REG_IsConversionOngoing>
 8002844:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	2b00      	cmp	r3, #0
 8002850:	f040 8148 	bne.w	8002ae4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2b00      	cmp	r3, #0
 8002858:	f040 8144 	bne.w	8002ae4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002860:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002864:	f043 0202 	orr.w	r2, r3, #2
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff49 	bl	8002708 <LL_ADC_IsEnabled>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d141      	bne.n	8002900 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002884:	d004      	beq.n	8002890 <HAL_ADC_Init+0x114>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a7a      	ldr	r2, [pc, #488]	@ (8002a74 <HAL_ADC_Init+0x2f8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d10f      	bne.n	80028b0 <HAL_ADC_Init+0x134>
 8002890:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002894:	f7ff ff38 	bl	8002708 <LL_ADC_IsEnabled>
 8002898:	4604      	mov	r4, r0
 800289a:	4876      	ldr	r0, [pc, #472]	@ (8002a74 <HAL_ADC_Init+0x2f8>)
 800289c:	f7ff ff34 	bl	8002708 <LL_ADC_IsEnabled>
 80028a0:	4603      	mov	r3, r0
 80028a2:	4323      	orrs	r3, r4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bf0c      	ite	eq
 80028a8:	2301      	moveq	r3, #1
 80028aa:	2300      	movne	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	e012      	b.n	80028d6 <HAL_ADC_Init+0x15a>
 80028b0:	4871      	ldr	r0, [pc, #452]	@ (8002a78 <HAL_ADC_Init+0x2fc>)
 80028b2:	f7ff ff29 	bl	8002708 <LL_ADC_IsEnabled>
 80028b6:	4604      	mov	r4, r0
 80028b8:	4870      	ldr	r0, [pc, #448]	@ (8002a7c <HAL_ADC_Init+0x300>)
 80028ba:	f7ff ff25 	bl	8002708 <LL_ADC_IsEnabled>
 80028be:	4603      	mov	r3, r0
 80028c0:	431c      	orrs	r4, r3
 80028c2:	486f      	ldr	r0, [pc, #444]	@ (8002a80 <HAL_ADC_Init+0x304>)
 80028c4:	f7ff ff20 	bl	8002708 <LL_ADC_IsEnabled>
 80028c8:	4603      	mov	r3, r0
 80028ca:	4323      	orrs	r3, r4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d012      	beq.n	8002900 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028e2:	d004      	beq.n	80028ee <HAL_ADC_Init+0x172>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a62      	ldr	r2, [pc, #392]	@ (8002a74 <HAL_ADC_Init+0x2f8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_Init+0x176>
 80028ee:	4a65      	ldr	r2, [pc, #404]	@ (8002a84 <HAL_ADC_Init+0x308>)
 80028f0:	e000      	b.n	80028f4 <HAL_ADC_Init+0x178>
 80028f2:	4a65      	ldr	r2, [pc, #404]	@ (8002a88 <HAL_ADC_Init+0x30c>)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4619      	mov	r1, r3
 80028fa:	4610      	mov	r0, r2
 80028fc:	f7ff fd64 	bl	80023c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	7f5b      	ldrb	r3, [r3, #29]
 8002904:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800290a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002910:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002916:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800291e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800292a:	2b01      	cmp	r3, #1
 800292c:	d106      	bne.n	800293c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002932:	3b01      	subs	r3, #1
 8002934:	045b      	lsls	r3, r3, #17
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002940:	2b00      	cmp	r3, #0
 8002942:	d009      	beq.n	8002958 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002948:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002950:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	4b4b      	ldr	r3, [pc, #300]	@ (8002a8c <HAL_ADC_Init+0x310>)
 8002960:	4013      	ands	r3, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6812      	ldr	r2, [r2, #0]
 8002966:	69b9      	ldr	r1, [r7, #24]
 8002968:	430b      	orrs	r3, r1
 800296a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	430a      	orrs	r2, r1
 8002980:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fed1 	bl	800272e <LL_ADC_REG_IsConversionOngoing>
 800298c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fede 	bl	8002754 <LL_ADC_INJ_IsConversionOngoing>
 8002998:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d17f      	bne.n	8002aa0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d17c      	bne.n	8002aa0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80029aa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80029b2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029c2:	f023 0302 	bic.w	r3, r3, #2
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	69b9      	ldr	r1, [r7, #24]
 80029cc:	430b      	orrs	r3, r1
 80029ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d017      	beq.n	8002a08 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691a      	ldr	r2, [r3, #16]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80029e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80029f0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6911      	ldr	r1, [r2, #16]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	430b      	orrs	r3, r1
 8002a02:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002a06:	e013      	b.n	8002a30 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002a16:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a28:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a2c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d12a      	bne.n	8002a90 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002a44:	f023 0304 	bic.w	r3, r3, #4
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a50:	4311      	orrs	r1, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a56:	4311      	orrs	r1, r2
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f042 0201 	orr.w	r2, r2, #1
 8002a68:	611a      	str	r2, [r3, #16]
 8002a6a:	e019      	b.n	8002aa0 <HAL_ADC_Init+0x324>
 8002a6c:	20000000 	.word	0x20000000
 8002a70:	053e2d63 	.word	0x053e2d63
 8002a74:	50000100 	.word	0x50000100
 8002a78:	50000400 	.word	0x50000400
 8002a7c:	50000500 	.word	0x50000500
 8002a80:	50000600 	.word	0x50000600
 8002a84:	50000300 	.word	0x50000300
 8002a88:	50000700 	.word	0x50000700
 8002a8c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d10c      	bne.n	8002ac2 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aae:	f023 010f 	bic.w	r1, r3, #15
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	1e5a      	subs	r2, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ac0:	e007      	b.n	8002ad2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 020f 	bic.w	r2, r2, #15
 8002ad0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad6:	f023 0303 	bic.w	r3, r3, #3
 8002ada:	f043 0201 	orr.w	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ae2:	e007      	b.n	8002af4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae8:	f043 0210 	orr.w	r2, r3, #16
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002af4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3724      	adds	r7, #36	@ 0x24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd90      	pop	{r4, r7, pc}
 8002afe:	bf00      	nop

08002b00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b0b6      	sub	sp, #216	@ 0xd8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d102      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x24>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	f000 bc13 	b.w	800334a <HAL_ADC_ConfigChannel+0x84a>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fdfc 	bl	800272e <LL_ADC_REG_IsConversionOngoing>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f040 83f3 	bne.w	8003324 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6859      	ldr	r1, [r3, #4]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	f7ff fd0e 	bl	800256c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7ff fdea 	bl	800272e <LL_ADC_REG_IsConversionOngoing>
 8002b5a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fdf6 	bl	8002754 <LL_ADC_INJ_IsConversionOngoing>
 8002b68:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f040 81d9 	bne.w	8002f28 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f040 81d4 	bne.w	8002f28 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b88:	d10f      	bne.n	8002baa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2200      	movs	r2, #0
 8002b94:	4619      	mov	r1, r3
 8002b96:	f7ff fd15 	bl	80025c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fccf 	bl	8002546 <LL_ADC_SetSamplingTimeCommonConfig>
 8002ba8:	e00e      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6819      	ldr	r1, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f7ff fd04 	bl	80025c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fcbf 	bl	8002546 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	08db      	lsrs	r3, r3, #3
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d022      	beq.n	8002c30 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	6919      	ldr	r1, [r3, #16]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002bfa:	f7ff fc19 	bl	8002430 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6919      	ldr	r1, [r3, #16]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f7ff fc65 	bl	80024da <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6818      	ldr	r0, [r3, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	6919      	ldr	r1, [r3, #16]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	7f1b      	ldrb	r3, [r3, #28]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d102      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x126>
 8002c20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c24:	e000      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x128>
 8002c26:	2300      	movs	r3, #0
 8002c28:	461a      	mov	r2, r3
 8002c2a:	f7ff fc71 	bl	8002510 <LL_ADC_SetOffsetSaturation>
 8002c2e:	e17b      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2100      	movs	r1, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fc1e 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10a      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x15c>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fc13 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002c52:	4603      	mov	r3, r0
 8002c54:	0e9b      	lsrs	r3, r3, #26
 8002c56:	f003 021f 	and.w	r2, r3, #31
 8002c5a:	e01e      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x19a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2100      	movs	r1, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fc08 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c7e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002c8a:	2320      	movs	r3, #32
 8002c8c:	e004      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002c8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d105      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x1b2>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	0e9b      	lsrs	r3, r3, #26
 8002cac:	f003 031f 	and.w	r3, r3, #31
 8002cb0:	e018      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x1e4>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002cbe:	fa93 f3a3 	rbit	r3, r3
 8002cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002cce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002cd6:	2320      	movs	r3, #32
 8002cd8:	e004      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002cda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002cde:	fab3 f383 	clz	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d106      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2200      	movs	r2, #0
 8002cee:	2100      	movs	r1, #0
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fbd7 	bl	80024a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fbbb 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002d02:	4603      	mov	r3, r0
 8002d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10a      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x222>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2101      	movs	r1, #1
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fbb0 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	0e9b      	lsrs	r3, r3, #26
 8002d1c:	f003 021f 	and.w	r2, r3, #31
 8002d20:	e01e      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x260>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2101      	movs	r1, #1
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fba5 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002d40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002d48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002d50:	2320      	movs	r3, #32
 8002d52:	e004      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002d54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d58:	fab3 f383 	clz	r3, r3
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d105      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x278>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	0e9b      	lsrs	r3, r3, #26
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	e018      	b.n	8002daa <HAL_ADC_ConfigChannel+0x2aa>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d84:	fa93 f3a3 	rbit	r3, r3
 8002d88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002d8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002d9c:	2320      	movs	r3, #32
 8002d9e:	e004      	b.n	8002daa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002da4:	fab3 f383 	clz	r3, r3
 8002da8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d106      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2200      	movs	r2, #0
 8002db4:	2101      	movs	r1, #1
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff fb74 	bl	80024a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff fb58 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10a      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x2e8>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2102      	movs	r1, #2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fb4d 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002dde:	4603      	mov	r3, r0
 8002de0:	0e9b      	lsrs	r3, r3, #26
 8002de2:	f003 021f 	and.w	r2, r3, #31
 8002de6:	e01e      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x326>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2102      	movs	r1, #2
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fb42 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002dfe:	fa93 f3a3 	rbit	r3, r3
 8002e02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002e06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002e0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002e16:	2320      	movs	r3, #32
 8002e18:	e004      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002e1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e1e:	fab3 f383 	clz	r3, r3
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d105      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x33e>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	0e9b      	lsrs	r3, r3, #26
 8002e38:	f003 031f 	and.w	r3, r3, #31
 8002e3c:	e016      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x36c>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e46:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e4a:	fa93 f3a3 	rbit	r3, r3
 8002e4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002e50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002e56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002e5e:	2320      	movs	r3, #32
 8002e60:	e004      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002e62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d106      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2200      	movs	r2, #0
 8002e76:	2102      	movs	r1, #2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fb13 	bl	80024a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2103      	movs	r1, #3
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff faf7 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x3aa>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2103      	movs	r1, #3
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff faec 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	0e9b      	lsrs	r3, r3, #26
 8002ea4:	f003 021f 	and.w	r2, r3, #31
 8002ea8:	e017      	b.n	8002eda <HAL_ADC_ConfigChannel+0x3da>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2103      	movs	r1, #3
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fae1 	bl	8002478 <LL_ADC_GetOffsetChannel>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ebc:	fa93 f3a3 	rbit	r3, r3
 8002ec0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002ec2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ec4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002ec6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002ecc:	2320      	movs	r3, #32
 8002ece:	e003      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002ed0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ed2:	fab3 f383 	clz	r3, r3
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d105      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x3f2>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	0e9b      	lsrs	r3, r3, #26
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	e011      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x416>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002f00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f02:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002f04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002f0a:	2320      	movs	r3, #32
 8002f0c:	e003      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002f0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f10:	fab3 f383 	clz	r3, r3
 8002f14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d106      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2103      	movs	r1, #3
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff fabe 	bl	80024a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fbeb 	bl	8002708 <LL_ADC_IsEnabled>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f040 813d 	bne.w	80031b4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6818      	ldr	r0, [r3, #0]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6819      	ldr	r1, [r3, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	461a      	mov	r2, r3
 8002f48:	f7ff fb68 	bl	800261c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4aa2      	ldr	r2, [pc, #648]	@ (80031dc <HAL_ADC_ConfigChannel+0x6dc>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	f040 812e 	bne.w	80031b4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10b      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x480>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	0e9b      	lsrs	r3, r3, #26
 8002f6e:	3301      	adds	r3, #1
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	2b09      	cmp	r3, #9
 8002f76:	bf94      	ite	ls
 8002f78:	2301      	movls	r3, #1
 8002f7a:	2300      	movhi	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	e019      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x4b4>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f88:	fa93 f3a3 	rbit	r3, r3
 8002f8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002f8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f90:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002f92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002f98:	2320      	movs	r3, #32
 8002f9a:	e003      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002f9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f9e:	fab3 f383 	clz	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	2b09      	cmp	r3, #9
 8002fac:	bf94      	ite	ls
 8002fae:	2301      	movls	r3, #1
 8002fb0:	2300      	movhi	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d079      	beq.n	80030ac <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d107      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x4d4>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	0e9b      	lsrs	r3, r3, #26
 8002fca:	3301      	adds	r3, #1
 8002fcc:	069b      	lsls	r3, r3, #26
 8002fce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fd2:	e015      	b.n	8003000 <HAL_ADC_ConfigChannel+0x500>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fdc:	fa93 f3a3 	rbit	r3, r3
 8002fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fe4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002fec:	2320      	movs	r3, #32
 8002fee:	e003      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	069b      	lsls	r3, r3, #26
 8002ffc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003008:	2b00      	cmp	r3, #0
 800300a:	d109      	bne.n	8003020 <HAL_ADC_ConfigChannel+0x520>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	0e9b      	lsrs	r3, r3, #26
 8003012:	3301      	adds	r3, #1
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	2101      	movs	r1, #1
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	e017      	b.n	8003050 <HAL_ADC_ConfigChannel+0x550>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800302e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003030:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003032:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003038:	2320      	movs	r3, #32
 800303a:	e003      	b.n	8003044 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800303c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	3301      	adds	r3, #1
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	2101      	movs	r1, #1
 800304c:	fa01 f303 	lsl.w	r3, r1, r3
 8003050:	ea42 0103 	orr.w	r1, r2, r3
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10a      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x576>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	0e9b      	lsrs	r3, r3, #26
 8003066:	3301      	adds	r3, #1
 8003068:	f003 021f 	and.w	r2, r3, #31
 800306c:	4613      	mov	r3, r2
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	4413      	add	r3, r2
 8003072:	051b      	lsls	r3, r3, #20
 8003074:	e018      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x5a8>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800307e:	fa93 f3a3 	rbit	r3, r3
 8003082:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003086:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800308e:	2320      	movs	r3, #32
 8003090:	e003      	b.n	800309a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003094:	fab3 f383 	clz	r3, r3
 8003098:	b2db      	uxtb	r3, r3
 800309a:	3301      	adds	r3, #1
 800309c:	f003 021f 	and.w	r2, r3, #31
 80030a0:	4613      	mov	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030a8:	430b      	orrs	r3, r1
 80030aa:	e07e      	b.n	80031aa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d107      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x5c8>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	0e9b      	lsrs	r3, r3, #26
 80030be:	3301      	adds	r3, #1
 80030c0:	069b      	lsls	r3, r3, #26
 80030c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030c6:	e015      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x5f4>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d0:	fa93 f3a3 	rbit	r3, r3
 80030d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80030d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80030da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80030e0:	2320      	movs	r3, #32
 80030e2:	e003      	b.n	80030ec <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80030e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	3301      	adds	r3, #1
 80030ee:	069b      	lsls	r3, r3, #26
 80030f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d109      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x614>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	0e9b      	lsrs	r3, r3, #26
 8003106:	3301      	adds	r3, #1
 8003108:	f003 031f 	and.w	r3, r3, #31
 800310c:	2101      	movs	r1, #1
 800310e:	fa01 f303 	lsl.w	r3, r1, r3
 8003112:	e017      	b.n	8003144 <HAL_ADC_ConfigChannel+0x644>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	6a3b      	ldr	r3, [r7, #32]
 800311c:	fa93 f3a3 	rbit	r3, r3
 8003120:	61fb      	str	r3, [r7, #28]
  return result;
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800312c:	2320      	movs	r3, #32
 800312e:	e003      	b.n	8003138 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	3301      	adds	r3, #1
 800313a:	f003 031f 	and.w	r3, r3, #31
 800313e:	2101      	movs	r1, #1
 8003140:	fa01 f303 	lsl.w	r3, r1, r3
 8003144:	ea42 0103 	orr.w	r1, r2, r3
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10d      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x670>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	0e9b      	lsrs	r3, r3, #26
 800315a:	3301      	adds	r3, #1
 800315c:	f003 021f 	and.w	r2, r3, #31
 8003160:	4613      	mov	r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	4413      	add	r3, r2
 8003166:	3b1e      	subs	r3, #30
 8003168:	051b      	lsls	r3, r3, #20
 800316a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800316e:	e01b      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x6a8>
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	fa93 f3a3 	rbit	r3, r3
 800317c:	613b      	str	r3, [r7, #16]
  return result;
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003188:	2320      	movs	r3, #32
 800318a:	e003      	b.n	8003194 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	fab3 f383 	clz	r3, r3
 8003192:	b2db      	uxtb	r3, r3
 8003194:	3301      	adds	r3, #1
 8003196:	f003 021f 	and.w	r2, r3, #31
 800319a:	4613      	mov	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4413      	add	r3, r2
 80031a0:	3b1e      	subs	r3, #30
 80031a2:	051b      	lsls	r3, r3, #20
 80031a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031a8:	430b      	orrs	r3, r1
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	6892      	ldr	r2, [r2, #8]
 80031ae:	4619      	mov	r1, r3
 80031b0:	f7ff fa08 	bl	80025c4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	4b09      	ldr	r3, [pc, #36]	@ (80031e0 <HAL_ADC_ConfigChannel+0x6e0>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80be 	beq.w	800333e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031ca:	d004      	beq.n	80031d6 <HAL_ADC_ConfigChannel+0x6d6>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a04      	ldr	r2, [pc, #16]	@ (80031e4 <HAL_ADC_ConfigChannel+0x6e4>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d10a      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x6ec>
 80031d6:	4b04      	ldr	r3, [pc, #16]	@ (80031e8 <HAL_ADC_ConfigChannel+0x6e8>)
 80031d8:	e009      	b.n	80031ee <HAL_ADC_ConfigChannel+0x6ee>
 80031da:	bf00      	nop
 80031dc:	407f0000 	.word	0x407f0000
 80031e0:	80080000 	.word	0x80080000
 80031e4:	50000100 	.word	0x50000100
 80031e8:	50000300 	.word	0x50000300
 80031ec:	4b59      	ldr	r3, [pc, #356]	@ (8003354 <HAL_ADC_ConfigChannel+0x854>)
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff f910 	bl	8002414 <LL_ADC_GetCommonPathInternalCh>
 80031f4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a56      	ldr	r2, [pc, #344]	@ (8003358 <HAL_ADC_ConfigChannel+0x858>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d004      	beq.n	800320c <HAL_ADC_ConfigChannel+0x70c>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a55      	ldr	r2, [pc, #340]	@ (800335c <HAL_ADC_ConfigChannel+0x85c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d13a      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800320c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003210:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d134      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003220:	d005      	beq.n	800322e <HAL_ADC_ConfigChannel+0x72e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a4e      	ldr	r2, [pc, #312]	@ (8003360 <HAL_ADC_ConfigChannel+0x860>)
 8003228:	4293      	cmp	r3, r2
 800322a:	f040 8085 	bne.w	8003338 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003236:	d004      	beq.n	8003242 <HAL_ADC_ConfigChannel+0x742>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a49      	ldr	r2, [pc, #292]	@ (8003364 <HAL_ADC_ConfigChannel+0x864>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d101      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x746>
 8003242:	4a49      	ldr	r2, [pc, #292]	@ (8003368 <HAL_ADC_ConfigChannel+0x868>)
 8003244:	e000      	b.n	8003248 <HAL_ADC_ConfigChannel+0x748>
 8003246:	4a43      	ldr	r2, [pc, #268]	@ (8003354 <HAL_ADC_ConfigChannel+0x854>)
 8003248:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800324c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003250:	4619      	mov	r1, r3
 8003252:	4610      	mov	r0, r2
 8003254:	f7ff f8cb 	bl	80023ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003258:	4b44      	ldr	r3, [pc, #272]	@ (800336c <HAL_ADC_ConfigChannel+0x86c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	099b      	lsrs	r3, r3, #6
 800325e:	4a44      	ldr	r2, [pc, #272]	@ (8003370 <HAL_ADC_ConfigChannel+0x870>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	099b      	lsrs	r3, r3, #6
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	4613      	mov	r3, r2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003272:	e002      	b.n	800327a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	3b01      	subs	r3, #1
 8003278:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f9      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003280:	e05a      	b.n	8003338 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a3b      	ldr	r2, [pc, #236]	@ (8003374 <HAL_ADC_ConfigChannel+0x874>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d125      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x7d8>
 800328c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003290:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d11f      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a31      	ldr	r2, [pc, #196]	@ (8003364 <HAL_ADC_ConfigChannel+0x864>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d104      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x7ac>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a34      	ldr	r2, [pc, #208]	@ (8003378 <HAL_ADC_ConfigChannel+0x878>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d047      	beq.n	800333c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032b4:	d004      	beq.n	80032c0 <HAL_ADC_ConfigChannel+0x7c0>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a2a      	ldr	r2, [pc, #168]	@ (8003364 <HAL_ADC_ConfigChannel+0x864>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d101      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x7c4>
 80032c0:	4a29      	ldr	r2, [pc, #164]	@ (8003368 <HAL_ADC_ConfigChannel+0x868>)
 80032c2:	e000      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x7c6>
 80032c4:	4a23      	ldr	r2, [pc, #140]	@ (8003354 <HAL_ADC_ConfigChannel+0x854>)
 80032c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032ce:	4619      	mov	r1, r3
 80032d0:	4610      	mov	r0, r2
 80032d2:	f7ff f88c 	bl	80023ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032d6:	e031      	b.n	800333c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a27      	ldr	r2, [pc, #156]	@ (800337c <HAL_ADC_ConfigChannel+0x87c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d12d      	bne.n	800333e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d127      	bne.n	800333e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003364 <HAL_ADC_ConfigChannel+0x864>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d022      	beq.n	800333e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003300:	d004      	beq.n	800330c <HAL_ADC_ConfigChannel+0x80c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a17      	ldr	r2, [pc, #92]	@ (8003364 <HAL_ADC_ConfigChannel+0x864>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d101      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x810>
 800330c:	4a16      	ldr	r2, [pc, #88]	@ (8003368 <HAL_ADC_ConfigChannel+0x868>)
 800330e:	e000      	b.n	8003312 <HAL_ADC_ConfigChannel+0x812>
 8003310:	4a10      	ldr	r2, [pc, #64]	@ (8003354 <HAL_ADC_ConfigChannel+0x854>)
 8003312:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003316:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800331a:	4619      	mov	r1, r3
 800331c:	4610      	mov	r0, r2
 800331e:	f7ff f866 	bl	80023ee <LL_ADC_SetCommonPathInternalCh>
 8003322:	e00c      	b.n	800333e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003328:	f043 0220 	orr.w	r2, r3, #32
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003336:	e002      	b.n	800333e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003338:	bf00      	nop
 800333a:	e000      	b.n	800333e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800333c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003346:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800334a:	4618      	mov	r0, r3
 800334c:	37d8      	adds	r7, #216	@ 0xd8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	50000700 	.word	0x50000700
 8003358:	c3210000 	.word	0xc3210000
 800335c:	90c00010 	.word	0x90c00010
 8003360:	50000600 	.word	0x50000600
 8003364:	50000100 	.word	0x50000100
 8003368:	50000300 	.word	0x50000300
 800336c:	20000000 	.word	0x20000000
 8003370:	053e2d63 	.word	0x053e2d63
 8003374:	c7520000 	.word	0xc7520000
 8003378:	50000500 	.word	0x50000500
 800337c:	cb840000 	.word	0xcb840000

08003380 <LL_ADC_IsEnabled>:
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b01      	cmp	r3, #1
 8003392:	d101      	bne.n	8003398 <LL_ADC_IsEnabled+0x18>
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <LL_ADC_IsEnabled+0x1a>
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d101      	bne.n	80033be <LL_ADC_REG_IsConversionOngoing+0x18>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80033cc:	b590      	push	{r4, r7, lr}
 80033ce:	b0a1      	sub	sp, #132	@ 0x84
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e0e7      	b.n	80035ba <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80033f2:	2300      	movs	r3, #0
 80033f4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80033f6:	2300      	movs	r3, #0
 80033f8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003402:	d102      	bne.n	800340a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003404:	4b6f      	ldr	r3, [pc, #444]	@ (80035c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003406:	60bb      	str	r3, [r7, #8]
 8003408:	e009      	b.n	800341e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a6e      	ldr	r2, [pc, #440]	@ (80035c8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d102      	bne.n	800341a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003414:	4b6d      	ldr	r3, [pc, #436]	@ (80035cc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	e001      	b.n	800341e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800341a:	2300      	movs	r3, #0
 800341c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10b      	bne.n	800343c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003428:	f043 0220 	orr.w	r2, r3, #32
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e0be      	b.n	80035ba <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff ffb1 	bl	80033a6 <LL_ADC_REG_IsConversionOngoing>
 8003444:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff ffab 	bl	80033a6 <LL_ADC_REG_IsConversionOngoing>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	f040 80a0 	bne.w	8003598 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003458:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800345a:	2b00      	cmp	r3, #0
 800345c:	f040 809c 	bne.w	8003598 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003468:	d004      	beq.n	8003474 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a55      	ldr	r2, [pc, #340]	@ (80035c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d101      	bne.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003474:	4b56      	ldr	r3, [pc, #344]	@ (80035d0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003476:	e000      	b.n	800347a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003478:	4b56      	ldr	r3, [pc, #344]	@ (80035d4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800347a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d04b      	beq.n	800351c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003484:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003496:	035b      	lsls	r3, r3, #13
 8003498:	430b      	orrs	r3, r1
 800349a:	431a      	orrs	r2, r3
 800349c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800349e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034a8:	d004      	beq.n	80034b4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a45      	ldr	r2, [pc, #276]	@ (80035c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d10f      	bne.n	80034d4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80034b4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80034b8:	f7ff ff62 	bl	8003380 <LL_ADC_IsEnabled>
 80034bc:	4604      	mov	r4, r0
 80034be:	4841      	ldr	r0, [pc, #260]	@ (80035c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034c0:	f7ff ff5e 	bl	8003380 <LL_ADC_IsEnabled>
 80034c4:	4603      	mov	r3, r0
 80034c6:	4323      	orrs	r3, r4
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	bf0c      	ite	eq
 80034cc:	2301      	moveq	r3, #1
 80034ce:	2300      	movne	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	e012      	b.n	80034fa <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80034d4:	483c      	ldr	r0, [pc, #240]	@ (80035c8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80034d6:	f7ff ff53 	bl	8003380 <LL_ADC_IsEnabled>
 80034da:	4604      	mov	r4, r0
 80034dc:	483b      	ldr	r0, [pc, #236]	@ (80035cc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80034de:	f7ff ff4f 	bl	8003380 <LL_ADC_IsEnabled>
 80034e2:	4603      	mov	r3, r0
 80034e4:	431c      	orrs	r4, r3
 80034e6:	483c      	ldr	r0, [pc, #240]	@ (80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80034e8:	f7ff ff4a 	bl	8003380 <LL_ADC_IsEnabled>
 80034ec:	4603      	mov	r3, r0
 80034ee:	4323      	orrs	r3, r4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d056      	beq.n	80035ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80034fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003506:	f023 030f 	bic.w	r3, r3, #15
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	6811      	ldr	r1, [r2, #0]
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	6892      	ldr	r2, [r2, #8]
 8003512:	430a      	orrs	r2, r1
 8003514:	431a      	orrs	r2, r3
 8003516:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003518:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800351a:	e047      	b.n	80035ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800351c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003524:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003526:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003530:	d004      	beq.n	800353c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a23      	ldr	r2, [pc, #140]	@ (80035c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d10f      	bne.n	800355c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800353c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003540:	f7ff ff1e 	bl	8003380 <LL_ADC_IsEnabled>
 8003544:	4604      	mov	r4, r0
 8003546:	481f      	ldr	r0, [pc, #124]	@ (80035c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003548:	f7ff ff1a 	bl	8003380 <LL_ADC_IsEnabled>
 800354c:	4603      	mov	r3, r0
 800354e:	4323      	orrs	r3, r4
 8003550:	2b00      	cmp	r3, #0
 8003552:	bf0c      	ite	eq
 8003554:	2301      	moveq	r3, #1
 8003556:	2300      	movne	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	e012      	b.n	8003582 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800355c:	481a      	ldr	r0, [pc, #104]	@ (80035c8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800355e:	f7ff ff0f 	bl	8003380 <LL_ADC_IsEnabled>
 8003562:	4604      	mov	r4, r0
 8003564:	4819      	ldr	r0, [pc, #100]	@ (80035cc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003566:	f7ff ff0b 	bl	8003380 <LL_ADC_IsEnabled>
 800356a:	4603      	mov	r3, r0
 800356c:	431c      	orrs	r4, r3
 800356e:	481a      	ldr	r0, [pc, #104]	@ (80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003570:	f7ff ff06 	bl	8003380 <LL_ADC_IsEnabled>
 8003574:	4603      	mov	r3, r0
 8003576:	4323      	orrs	r3, r4
 8003578:	2b00      	cmp	r3, #0
 800357a:	bf0c      	ite	eq
 800357c:	2301      	moveq	r3, #1
 800357e:	2300      	movne	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d012      	beq.n	80035ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003586:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800358e:	f023 030f 	bic.w	r3, r3, #15
 8003592:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003594:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003596:	e009      	b.n	80035ac <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800359c:	f043 0220 	orr.w	r2, r3, #32
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80035aa:	e000      	b.n	80035ae <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80035b6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3784      	adds	r7, #132	@ 0x84
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd90      	pop	{r4, r7, pc}
 80035c2:	bf00      	nop
 80035c4:	50000100 	.word	0x50000100
 80035c8:	50000400 	.word	0x50000400
 80035cc:	50000500 	.word	0x50000500
 80035d0:	50000300 	.word	0x50000300
 80035d4:	50000700 	.word	0x50000700
 80035d8:	50000600 	.word	0x50000600

080035dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003620 <__NVIC_SetPriorityGrouping+0x44>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035f8:	4013      	ands	r3, r2
 80035fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003604:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800360c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800360e:	4a04      	ldr	r2, [pc, #16]	@ (8003620 <__NVIC_SetPriorityGrouping+0x44>)
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	60d3      	str	r3, [r2, #12]
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	e000ed00 	.word	0xe000ed00

08003624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003628:	4b04      	ldr	r3, [pc, #16]	@ (800363c <__NVIC_GetPriorityGrouping+0x18>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	0a1b      	lsrs	r3, r3, #8
 800362e:	f003 0307 	and.w	r3, r3, #7
}
 8003632:	4618      	mov	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800364a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364e:	2b00      	cmp	r3, #0
 8003650:	db0b      	blt.n	800366a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	f003 021f 	and.w	r2, r3, #31
 8003658:	4907      	ldr	r1, [pc, #28]	@ (8003678 <__NVIC_EnableIRQ+0x38>)
 800365a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	2001      	movs	r0, #1
 8003662:	fa00 f202 	lsl.w	r2, r0, r2
 8003666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	e000e100 	.word	0xe000e100

0800367c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	6039      	str	r1, [r7, #0]
 8003686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368c:	2b00      	cmp	r3, #0
 800368e:	db0a      	blt.n	80036a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	b2da      	uxtb	r2, r3
 8003694:	490c      	ldr	r1, [pc, #48]	@ (80036c8 <__NVIC_SetPriority+0x4c>)
 8003696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369a:	0112      	lsls	r2, r2, #4
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	440b      	add	r3, r1
 80036a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036a4:	e00a      	b.n	80036bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	4908      	ldr	r1, [pc, #32]	@ (80036cc <__NVIC_SetPriority+0x50>)
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	3b04      	subs	r3, #4
 80036b4:	0112      	lsls	r2, r2, #4
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	440b      	add	r3, r1
 80036ba:	761a      	strb	r2, [r3, #24]
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	e000e100 	.word	0xe000e100
 80036cc:	e000ed00 	.word	0xe000ed00

080036d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b089      	sub	sp, #36	@ 0x24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f1c3 0307 	rsb	r3, r3, #7
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	bf28      	it	cs
 80036ee:	2304      	movcs	r3, #4
 80036f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	3304      	adds	r3, #4
 80036f6:	2b06      	cmp	r3, #6
 80036f8:	d902      	bls.n	8003700 <NVIC_EncodePriority+0x30>
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	3b03      	subs	r3, #3
 80036fe:	e000      	b.n	8003702 <NVIC_EncodePriority+0x32>
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003704:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43da      	mvns	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	401a      	ands	r2, r3
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003718:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	fa01 f303 	lsl.w	r3, r1, r3
 8003722:	43d9      	mvns	r1, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003728:	4313      	orrs	r3, r2
         );
}
 800372a:	4618      	mov	r0, r3
 800372c:	3724      	adds	r7, #36	@ 0x24
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff ff4c 	bl	80035dc <__NVIC_SetPriorityGrouping>
}
 8003744:	bf00      	nop
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800375a:	f7ff ff63 	bl	8003624 <__NVIC_GetPriorityGrouping>
 800375e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	6978      	ldr	r0, [r7, #20]
 8003766:	f7ff ffb3 	bl	80036d0 <NVIC_EncodePriority>
 800376a:	4602      	mov	r2, r0
 800376c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff ff82 	bl	800367c <__NVIC_SetPriority>
}
 8003778:	bf00      	nop
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800378a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff ff56 	bl	8003640 <__NVIC_EnableIRQ>
}
 8003794:	bf00      	nop
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d005      	beq.n	80037c0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2204      	movs	r2, #4
 80037b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	73fb      	strb	r3, [r7, #15]
 80037be:	e037      	b.n	8003830 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 020e 	bic.w	r2, r2, #14
 80037ce:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037de:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f4:	f003 021f 	and.w	r2, r3, #31
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fc:	2101      	movs	r1, #1
 80037fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003802:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800380c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00c      	beq.n	8003830 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003820:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003824:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800382e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003840:	7bfb      	ldrb	r3, [r7, #15]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d00d      	beq.n	8003882 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2204      	movs	r2, #4
 800386a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
 8003880:	e047      	b.n	8003912 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 020e 	bic.w	r2, r2, #14
 8003890:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0201 	bic.w	r2, r2, #1
 80038a0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b6:	f003 021f 	and.w	r2, r3, #31
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	2101      	movs	r1, #1
 80038c0:	fa01 f202 	lsl.w	r2, r1, r2
 80038c4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038ce:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00c      	beq.n	80038f2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80038f0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	4798      	blx	r3
    }
  }
  return status;
 8003912:	7bfb      	ldrb	r3, [r7, #15]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800392a:	e15a      	b.n	8003be2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	2101      	movs	r1, #1
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	fa01 f303 	lsl.w	r3, r1, r3
 8003938:	4013      	ands	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 814c 	beq.w	8003bdc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	2b01      	cmp	r3, #1
 800394e:	d005      	beq.n	800395c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003958:	2b02      	cmp	r3, #2
 800395a:	d130      	bne.n	80039be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	2203      	movs	r2, #3
 8003968:	fa02 f303 	lsl.w	r3, r2, r3
 800396c:	43db      	mvns	r3, r3
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	4013      	ands	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003992:	2201      	movs	r2, #1
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	fa02 f303 	lsl.w	r3, r2, r3
 800399a:	43db      	mvns	r3, r3
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4013      	ands	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	091b      	lsrs	r3, r3, #4
 80039a8:	f003 0201 	and.w	r2, r3, #1
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d017      	beq.n	80039fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	2203      	movs	r2, #3
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4013      	ands	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d123      	bne.n	8003a4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	08da      	lsrs	r2, r3, #3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3208      	adds	r2, #8
 8003a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	220f      	movs	r2, #15
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43db      	mvns	r3, r3
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4013      	ands	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	691a      	ldr	r2, [r3, #16]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	08da      	lsrs	r2, r3, #3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3208      	adds	r2, #8
 8003a48:	6939      	ldr	r1, [r7, #16]
 8003a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	2203      	movs	r2, #3
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4013      	ands	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 0203 	and.w	r2, r3, #3
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80a6 	beq.w	8003bdc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a90:	4b5b      	ldr	r3, [pc, #364]	@ (8003c00 <HAL_GPIO_Init+0x2e4>)
 8003a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a94:	4a5a      	ldr	r2, [pc, #360]	@ (8003c00 <HAL_GPIO_Init+0x2e4>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a9c:	4b58      	ldr	r3, [pc, #352]	@ (8003c00 <HAL_GPIO_Init+0x2e4>)
 8003a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	60bb      	str	r3, [r7, #8]
 8003aa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aa8:	4a56      	ldr	r2, [pc, #344]	@ (8003c04 <HAL_GPIO_Init+0x2e8>)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	089b      	lsrs	r3, r3, #2
 8003aae:	3302      	adds	r3, #2
 8003ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	220f      	movs	r2, #15
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003ad2:	d01f      	beq.n	8003b14 <HAL_GPIO_Init+0x1f8>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a4c      	ldr	r2, [pc, #304]	@ (8003c08 <HAL_GPIO_Init+0x2ec>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d019      	beq.n	8003b10 <HAL_GPIO_Init+0x1f4>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a4b      	ldr	r2, [pc, #300]	@ (8003c0c <HAL_GPIO_Init+0x2f0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d013      	beq.n	8003b0c <HAL_GPIO_Init+0x1f0>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a4a      	ldr	r2, [pc, #296]	@ (8003c10 <HAL_GPIO_Init+0x2f4>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d00d      	beq.n	8003b08 <HAL_GPIO_Init+0x1ec>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a49      	ldr	r2, [pc, #292]	@ (8003c14 <HAL_GPIO_Init+0x2f8>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d007      	beq.n	8003b04 <HAL_GPIO_Init+0x1e8>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a48      	ldr	r2, [pc, #288]	@ (8003c18 <HAL_GPIO_Init+0x2fc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d101      	bne.n	8003b00 <HAL_GPIO_Init+0x1e4>
 8003afc:	2305      	movs	r3, #5
 8003afe:	e00a      	b.n	8003b16 <HAL_GPIO_Init+0x1fa>
 8003b00:	2306      	movs	r3, #6
 8003b02:	e008      	b.n	8003b16 <HAL_GPIO_Init+0x1fa>
 8003b04:	2304      	movs	r3, #4
 8003b06:	e006      	b.n	8003b16 <HAL_GPIO_Init+0x1fa>
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e004      	b.n	8003b16 <HAL_GPIO_Init+0x1fa>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e002      	b.n	8003b16 <HAL_GPIO_Init+0x1fa>
 8003b10:	2301      	movs	r3, #1
 8003b12:	e000      	b.n	8003b16 <HAL_GPIO_Init+0x1fa>
 8003b14:	2300      	movs	r3, #0
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	f002 0203 	and.w	r2, r2, #3
 8003b1c:	0092      	lsls	r2, r2, #2
 8003b1e:	4093      	lsls	r3, r2
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b26:	4937      	ldr	r1, [pc, #220]	@ (8003c04 <HAL_GPIO_Init+0x2e8>)
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	089b      	lsrs	r3, r3, #2
 8003b2c:	3302      	adds	r3, #2
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b34:	4b39      	ldr	r3, [pc, #228]	@ (8003c1c <HAL_GPIO_Init+0x300>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4013      	ands	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b58:	4a30      	ldr	r2, [pc, #192]	@ (8003c1c <HAL_GPIO_Init+0x300>)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8003c1c <HAL_GPIO_Init+0x300>)
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	43db      	mvns	r3, r3
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b82:	4a26      	ldr	r2, [pc, #152]	@ (8003c1c <HAL_GPIO_Init+0x300>)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003b88:	4b24      	ldr	r3, [pc, #144]	@ (8003c1c <HAL_GPIO_Init+0x300>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	43db      	mvns	r3, r3
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	4013      	ands	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bac:	4a1b      	ldr	r2, [pc, #108]	@ (8003c1c <HAL_GPIO_Init+0x300>)
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8003c1c <HAL_GPIO_Init+0x300>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bd6:	4a11      	ldr	r2, [pc, #68]	@ (8003c1c <HAL_GPIO_Init+0x300>)
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	3301      	adds	r3, #1
 8003be0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f47f ae9d 	bne.w	800392c <HAL_GPIO_Init+0x10>
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	bf00      	nop
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	40021000 	.word	0x40021000
 8003c04:	40010000 	.word	0x40010000
 8003c08:	48000400 	.word	0x48000400
 8003c0c:	48000800 	.word	0x48000800
 8003c10:	48000c00 	.word	0x48000c00
 8003c14:	48001000 	.word	0x48001000
 8003c18:	48001400 	.word	0x48001400
 8003c1c:	40010400 	.word	0x40010400

08003c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	807b      	strh	r3, [r7, #2]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c30:	787b      	ldrb	r3, [r7, #1]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c36:	887a      	ldrh	r2, [r7, #2]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c3c:	e002      	b.n	8003c44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c3e:	887a      	ldrh	r2, [r7, #2]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c5a:	4b08      	ldr	r3, [pc, #32]	@ (8003c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c5c:	695a      	ldr	r2, [r3, #20]
 8003c5e:	88fb      	ldrh	r3, [r7, #6]
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d006      	beq.n	8003c74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c66:	4a05      	ldr	r2, [pc, #20]	@ (8003c7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c68:	88fb      	ldrh	r3, [r7, #6]
 8003c6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 f806 	bl	8003c80 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c74:	bf00      	nop
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40010400 	.word	0x40010400

08003c80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d141      	bne.n	8003d2a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cb2:	d131      	bne.n	8003d18 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cb4:	4b47      	ldr	r3, [pc, #284]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cba:	4a46      	ldr	r2, [pc, #280]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cc4:	4b43      	ldr	r3, [pc, #268]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ccc:	4a41      	ldr	r2, [pc, #260]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cd4:	4b40      	ldr	r3, [pc, #256]	@ (8003dd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2232      	movs	r2, #50	@ 0x32
 8003cda:	fb02 f303 	mul.w	r3, r2, r3
 8003cde:	4a3f      	ldr	r2, [pc, #252]	@ (8003ddc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce4:	0c9b      	lsrs	r3, r3, #18
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cea:	e002      	b.n	8003cf2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cf2:	4b38      	ldr	r3, [pc, #224]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cfe:	d102      	bne.n	8003d06 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f2      	bne.n	8003cec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d06:	4b33      	ldr	r3, [pc, #204]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d12:	d158      	bne.n	8003dc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e057      	b.n	8003dc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d18:	4b2e      	ldr	r3, [pc, #184]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d1e:	4a2d      	ldr	r2, [pc, #180]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003d28:	e04d      	b.n	8003dc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d30:	d141      	bne.n	8003db6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d32:	4b28      	ldr	r3, [pc, #160]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d3e:	d131      	bne.n	8003da4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d40:	4b24      	ldr	r3, [pc, #144]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d46:	4a23      	ldr	r2, [pc, #140]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d50:	4b20      	ldr	r3, [pc, #128]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d58:	4a1e      	ldr	r2, [pc, #120]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d60:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2232      	movs	r2, #50	@ 0x32
 8003d66:	fb02 f303 	mul.w	r3, r2, r3
 8003d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8003ddc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d70:	0c9b      	lsrs	r3, r3, #18
 8003d72:	3301      	adds	r3, #1
 8003d74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d76:	e002      	b.n	8003d7e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d7e:	4b15      	ldr	r3, [pc, #84]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d8a:	d102      	bne.n	8003d92 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f2      	bne.n	8003d78 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d92:	4b10      	ldr	r3, [pc, #64]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d9e:	d112      	bne.n	8003dc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e011      	b.n	8003dc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003da4:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003daa:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003db0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003db4:	e007      	b.n	8003dc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003db6:	4b07      	ldr	r3, [pc, #28]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003dbe:	4a05      	ldr	r2, [pc, #20]	@ (8003dd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003dc4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	40007000 	.word	0x40007000
 8003dd8:	20000000 	.word	0x20000000
 8003ddc:	431bde83 	.word	0x431bde83

08003de0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003de4:	4b05      	ldr	r3, [pc, #20]	@ (8003dfc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	4a04      	ldr	r2, [pc, #16]	@ (8003dfc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003dea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dee:	6093      	str	r3, [r2, #8]
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40007000 	.word	0x40007000

08003e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e306      	b.n	8004420 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d075      	beq.n	8003f0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e1e:	4b97      	ldr	r3, [pc, #604]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e28:	4b94      	ldr	r3, [pc, #592]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0303 	and.w	r3, r3, #3
 8003e30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	2b0c      	cmp	r3, #12
 8003e36:	d102      	bne.n	8003e3e <HAL_RCC_OscConfig+0x3e>
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d002      	beq.n	8003e44 <HAL_RCC_OscConfig+0x44>
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d10b      	bne.n	8003e5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e44:	4b8d      	ldr	r3, [pc, #564]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d05b      	beq.n	8003f08 <HAL_RCC_OscConfig+0x108>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d157      	bne.n	8003f08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e2e1      	b.n	8004420 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e64:	d106      	bne.n	8003e74 <HAL_RCC_OscConfig+0x74>
 8003e66:	4b85      	ldr	r3, [pc, #532]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a84      	ldr	r2, [pc, #528]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	e01d      	b.n	8003eb0 <HAL_RCC_OscConfig+0xb0>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x98>
 8003e7e:	4b7f      	ldr	r3, [pc, #508]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a7e      	ldr	r2, [pc, #504]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	4b7c      	ldr	r3, [pc, #496]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a7b      	ldr	r2, [pc, #492]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	e00b      	b.n	8003eb0 <HAL_RCC_OscConfig+0xb0>
 8003e98:	4b78      	ldr	r3, [pc, #480]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a77      	ldr	r2, [pc, #476]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	4b75      	ldr	r3, [pc, #468]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a74      	ldr	r2, [pc, #464]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003eaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d013      	beq.n	8003ee0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb8:	f7fe fa7a 	bl	80023b0 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec0:	f7fe fa76 	bl	80023b0 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b64      	cmp	r3, #100	@ 0x64
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e2a6      	b.n	8004420 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ed2:	4b6a      	ldr	r3, [pc, #424]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0xc0>
 8003ede:	e014      	b.n	8003f0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7fe fa66 	bl	80023b0 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ee8:	f7fe fa62 	bl	80023b0 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b64      	cmp	r3, #100	@ 0x64
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e292      	b.n	8004420 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003efa:	4b60      	ldr	r3, [pc, #384]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0xe8>
 8003f06:	e000      	b.n	8003f0a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d075      	beq.n	8004002 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f16:	4b59      	ldr	r3, [pc, #356]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f20:	4b56      	ldr	r3, [pc, #344]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f003 0303 	and.w	r3, r3, #3
 8003f28:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b0c      	cmp	r3, #12
 8003f2e:	d102      	bne.n	8003f36 <HAL_RCC_OscConfig+0x136>
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d002      	beq.n	8003f3c <HAL_RCC_OscConfig+0x13c>
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d11f      	bne.n	8003f7c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f3c:	4b4f      	ldr	r3, [pc, #316]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_RCC_OscConfig+0x154>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e265      	b.n	8004420 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f54:	4b49      	ldr	r3, [pc, #292]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	061b      	lsls	r3, r3, #24
 8003f62:	4946      	ldr	r1, [pc, #280]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f68:	4b45      	ldr	r3, [pc, #276]	@ (8004080 <HAL_RCC_OscConfig+0x280>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7fd fbb7 	bl	80016e0 <HAL_InitTick>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d043      	beq.n	8004000 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e251      	b.n	8004420 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d023      	beq.n	8003fcc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f84:	4b3d      	ldr	r3, [pc, #244]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a3c      	ldr	r2, [pc, #240]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003f8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f90:	f7fe fa0e 	bl	80023b0 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f98:	f7fe fa0a 	bl	80023b0 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e23a      	b.n	8004420 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003faa:	4b34      	ldr	r3, [pc, #208]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb6:	4b31      	ldr	r3, [pc, #196]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	061b      	lsls	r3, r3, #24
 8003fc4:	492d      	ldr	r1, [pc, #180]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	604b      	str	r3, [r1, #4]
 8003fca:	e01a      	b.n	8004002 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a2a      	ldr	r2, [pc, #168]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003fd2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7fe f9ea 	bl	80023b0 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fe0:	f7fe f9e6 	bl	80023b0 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e216      	b.n	8004420 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ff2:	4b22      	ldr	r3, [pc, #136]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1f0      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x1e0>
 8003ffe:	e000      	b.n	8004002 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004000:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0308 	and.w	r3, r3, #8
 800400a:	2b00      	cmp	r3, #0
 800400c:	d041      	beq.n	8004092 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d01c      	beq.n	8004050 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004016:	4b19      	ldr	r3, [pc, #100]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8004018:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800401c:	4a17      	ldr	r2, [pc, #92]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004026:	f7fe f9c3 	bl	80023b0 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800402e:	f7fe f9bf 	bl	80023b0 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e1ef      	b.n	8004420 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004040:	4b0e      	ldr	r3, [pc, #56]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8004042:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0ef      	beq.n	800402e <HAL_RCC_OscConfig+0x22e>
 800404e:	e020      	b.n	8004092 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004050:	4b0a      	ldr	r3, [pc, #40]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8004052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004056:	4a09      	ldr	r2, [pc, #36]	@ (800407c <HAL_RCC_OscConfig+0x27c>)
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004060:	f7fe f9a6 	bl	80023b0 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004066:	e00d      	b.n	8004084 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004068:	f7fe f9a2 	bl	80023b0 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d906      	bls.n	8004084 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e1d2      	b.n	8004420 <HAL_RCC_OscConfig+0x620>
 800407a:	bf00      	nop
 800407c:	40021000 	.word	0x40021000
 8004080:	20000140 	.word	0x20000140
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004084:	4b8c      	ldr	r3, [pc, #560]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004086:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1ea      	bne.n	8004068 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 80a6 	beq.w	80041ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040a0:	2300      	movs	r3, #0
 80040a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040a4:	4b84      	ldr	r3, [pc, #528]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80040a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_RCC_OscConfig+0x2b4>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <HAL_RCC_OscConfig+0x2b6>
 80040b4:	2300      	movs	r3, #0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00d      	beq.n	80040d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ba:	4b7f      	ldr	r3, [pc, #508]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80040bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040be:	4a7e      	ldr	r2, [pc, #504]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80040c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80040c6:	4b7c      	ldr	r3, [pc, #496]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040d2:	2301      	movs	r3, #1
 80040d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040d6:	4b79      	ldr	r3, [pc, #484]	@ (80042bc <HAL_RCC_OscConfig+0x4bc>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d118      	bne.n	8004114 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040e2:	4b76      	ldr	r3, [pc, #472]	@ (80042bc <HAL_RCC_OscConfig+0x4bc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a75      	ldr	r2, [pc, #468]	@ (80042bc <HAL_RCC_OscConfig+0x4bc>)
 80040e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ee:	f7fe f95f 	bl	80023b0 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f6:	f7fe f95b 	bl	80023b0 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e18b      	b.n	8004420 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004108:	4b6c      	ldr	r3, [pc, #432]	@ (80042bc <HAL_RCC_OscConfig+0x4bc>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d108      	bne.n	800412e <HAL_RCC_OscConfig+0x32e>
 800411c:	4b66      	ldr	r3, [pc, #408]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004122:	4a65      	ldr	r2, [pc, #404]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800412c:	e024      	b.n	8004178 <HAL_RCC_OscConfig+0x378>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2b05      	cmp	r3, #5
 8004134:	d110      	bne.n	8004158 <HAL_RCC_OscConfig+0x358>
 8004136:	4b60      	ldr	r3, [pc, #384]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413c:	4a5e      	ldr	r2, [pc, #376]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800413e:	f043 0304 	orr.w	r3, r3, #4
 8004142:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004146:	4b5c      	ldr	r3, [pc, #368]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800414c:	4a5a      	ldr	r2, [pc, #360]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004156:	e00f      	b.n	8004178 <HAL_RCC_OscConfig+0x378>
 8004158:	4b57      	ldr	r3, [pc, #348]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800415e:	4a56      	ldr	r2, [pc, #344]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004160:	f023 0301 	bic.w	r3, r3, #1
 8004164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004168:	4b53      	ldr	r3, [pc, #332]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800416a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800416e:	4a52      	ldr	r2, [pc, #328]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004170:	f023 0304 	bic.w	r3, r3, #4
 8004174:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d016      	beq.n	80041ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004180:	f7fe f916 	bl	80023b0 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004186:	e00a      	b.n	800419e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004188:	f7fe f912 	bl	80023b0 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e140      	b.n	8004420 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800419e:	4b46      	ldr	r3, [pc, #280]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0ed      	beq.n	8004188 <HAL_RCC_OscConfig+0x388>
 80041ac:	e015      	b.n	80041da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ae:	f7fe f8ff 	bl	80023b0 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041b4:	e00a      	b.n	80041cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b6:	f7fe f8fb 	bl	80023b0 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e129      	b.n	8004420 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041cc:	4b3a      	ldr	r3, [pc, #232]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1ed      	bne.n	80041b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041da:	7ffb      	ldrb	r3, [r7, #31]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d105      	bne.n	80041ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e0:	4b35      	ldr	r3, [pc, #212]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80041e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e4:	4a34      	ldr	r2, [pc, #208]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 80041e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d03c      	beq.n	8004272 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01c      	beq.n	800423a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004200:	4b2d      	ldr	r3, [pc, #180]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004202:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004206:	4a2c      	ldr	r2, [pc, #176]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004210:	f7fe f8ce 	bl	80023b0 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004218:	f7fe f8ca 	bl	80023b0 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e0fa      	b.n	8004420 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800422a:	4b23      	ldr	r3, [pc, #140]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800422c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d0ef      	beq.n	8004218 <HAL_RCC_OscConfig+0x418>
 8004238:	e01b      	b.n	8004272 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800423a:	4b1f      	ldr	r3, [pc, #124]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800423c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004240:	4a1d      	ldr	r2, [pc, #116]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004242:	f023 0301 	bic.w	r3, r3, #1
 8004246:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424a:	f7fe f8b1 	bl	80023b0 <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004252:	f7fe f8ad 	bl	80023b0 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e0dd      	b.n	8004420 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004264:	4b14      	ldr	r3, [pc, #80]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004266:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1ef      	bne.n	8004252 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 80d1 	beq.w	800441e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800427c:	4b0e      	ldr	r3, [pc, #56]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 030c 	and.w	r3, r3, #12
 8004284:	2b0c      	cmp	r3, #12
 8004286:	f000 808b 	beq.w	80043a0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d15e      	bne.n	8004350 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004292:	4b09      	ldr	r3, [pc, #36]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a08      	ldr	r2, [pc, #32]	@ (80042b8 <HAL_RCC_OscConfig+0x4b8>)
 8004298:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800429c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429e:	f7fe f887 	bl	80023b0 <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042a4:	e00c      	b.n	80042c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a6:	f7fe f883 	bl	80023b0 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d905      	bls.n	80042c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e0b3      	b.n	8004420 <HAL_RCC_OscConfig+0x620>
 80042b8:	40021000 	.word	0x40021000
 80042bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042c0:	4b59      	ldr	r3, [pc, #356]	@ (8004428 <HAL_RCC_OscConfig+0x628>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1ec      	bne.n	80042a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042cc:	4b56      	ldr	r3, [pc, #344]	@ (8004428 <HAL_RCC_OscConfig+0x628>)
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	4b56      	ldr	r3, [pc, #344]	@ (800442c <HAL_RCC_OscConfig+0x62c>)
 80042d2:	4013      	ands	r3, r2
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6a11      	ldr	r1, [r2, #32]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042dc:	3a01      	subs	r2, #1
 80042de:	0112      	lsls	r2, r2, #4
 80042e0:	4311      	orrs	r1, r2
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80042e6:	0212      	lsls	r2, r2, #8
 80042e8:	4311      	orrs	r1, r2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80042ee:	0852      	lsrs	r2, r2, #1
 80042f0:	3a01      	subs	r2, #1
 80042f2:	0552      	lsls	r2, r2, #21
 80042f4:	4311      	orrs	r1, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80042fa:	0852      	lsrs	r2, r2, #1
 80042fc:	3a01      	subs	r2, #1
 80042fe:	0652      	lsls	r2, r2, #25
 8004300:	4311      	orrs	r1, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004306:	06d2      	lsls	r2, r2, #27
 8004308:	430a      	orrs	r2, r1
 800430a:	4947      	ldr	r1, [pc, #284]	@ (8004428 <HAL_RCC_OscConfig+0x628>)
 800430c:	4313      	orrs	r3, r2
 800430e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004310:	4b45      	ldr	r3, [pc, #276]	@ (8004428 <HAL_RCC_OscConfig+0x628>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a44      	ldr	r2, [pc, #272]	@ (8004428 <HAL_RCC_OscConfig+0x628>)
 8004316:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800431a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800431c:	4b42      	ldr	r3, [pc, #264]	@ (8004428 <HAL_RCC_OscConfig+0x628>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4a41      	ldr	r2, [pc, #260]	@ (8004428 <HAL_RCC_OscConfig+0x628>)
 8004322:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004326:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fe f842 	bl	80023b0 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004330:	f7fe f83e 	bl	80023b0 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e06e      	b.n	8004420 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004342:	4b39      	ldr	r3, [pc, #228]	@ (8004428 <HAL_RCC_OscConfig+0x628>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0x530>
 800434e:	e066      	b.n	800441e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004350:	4b35      	ldr	r3, [pc, #212]	@ (8004428 <HAL_RCC_OscConfig+0x628>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a34      	ldr	r2, [pc, #208]	@ (8004428 <HAL_RCC_OscConfig+0x628>)
 8004356:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800435a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800435c:	4b32      	ldr	r3, [pc, #200]	@ (8004428 <HAL_RCC_OscConfig+0x628>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4a31      	ldr	r2, [pc, #196]	@ (8004428 <HAL_RCC_OscConfig+0x628>)
 8004362:	f023 0303 	bic.w	r3, r3, #3
 8004366:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004368:	4b2f      	ldr	r3, [pc, #188]	@ (8004428 <HAL_RCC_OscConfig+0x628>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	4a2e      	ldr	r2, [pc, #184]	@ (8004428 <HAL_RCC_OscConfig+0x628>)
 800436e:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8004372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004376:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fe f81a 	bl	80023b0 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004380:	f7fe f816 	bl	80023b0 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e046      	b.n	8004420 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004392:	4b25      	ldr	r3, [pc, #148]	@ (8004428 <HAL_RCC_OscConfig+0x628>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x580>
 800439e:	e03e      	b.n	800441e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e039      	b.n	8004420 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80043ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004428 <HAL_RCC_OscConfig+0x628>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f003 0203 	and.w	r2, r3, #3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d12c      	bne.n	800441a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ca:	3b01      	subs	r3, #1
 80043cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d123      	bne.n	800441a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043de:	429a      	cmp	r2, r3
 80043e0:	d11b      	bne.n	800441a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d113      	bne.n	800441a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fc:	085b      	lsrs	r3, r3, #1
 80043fe:	3b01      	subs	r3, #1
 8004400:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004402:	429a      	cmp	r2, r3
 8004404:	d109      	bne.n	800441a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004410:	085b      	lsrs	r3, r3, #1
 8004412:	3b01      	subs	r3, #1
 8004414:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004416:	429a      	cmp	r2, r3
 8004418:	d001      	beq.n	800441e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3720      	adds	r7, #32
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40021000 	.word	0x40021000
 800442c:	019f800c 	.word	0x019f800c

08004430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e11e      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004448:	4b91      	ldr	r3, [pc, #580]	@ (8004690 <HAL_RCC_ClockConfig+0x260>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d910      	bls.n	8004478 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004456:	4b8e      	ldr	r3, [pc, #568]	@ (8004690 <HAL_RCC_ClockConfig+0x260>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f023 020f 	bic.w	r2, r3, #15
 800445e:	498c      	ldr	r1, [pc, #560]	@ (8004690 <HAL_RCC_ClockConfig+0x260>)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	4313      	orrs	r3, r2
 8004464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004466:	4b8a      	ldr	r3, [pc, #552]	@ (8004690 <HAL_RCC_ClockConfig+0x260>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d001      	beq.n	8004478 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e106      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d073      	beq.n	800456c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b03      	cmp	r3, #3
 800448a:	d129      	bne.n	80044e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800448c:	4b81      	ldr	r3, [pc, #516]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0f4      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800449c:	f000 f9d0 	bl	8004840 <RCC_GetSysClockFreqFromPLLSource>
 80044a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4a7c      	ldr	r2, [pc, #496]	@ (8004698 <HAL_RCC_ClockConfig+0x268>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d93f      	bls.n	800452a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044aa:	4b7a      	ldr	r3, [pc, #488]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d033      	beq.n	800452a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d12f      	bne.n	800452a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044ca:	4b72      	ldr	r3, [pc, #456]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044d2:	4a70      	ldr	r2, [pc, #448]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 80044d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044da:	2380      	movs	r3, #128	@ 0x80
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	e024      	b.n	800452a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d107      	bne.n	80044f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044e8:	4b6a      	ldr	r3, [pc, #424]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d109      	bne.n	8004508 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0c6      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044f8:	4b66      	ldr	r3, [pc, #408]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e0be      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004508:	f000 f8ce 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 800450c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	4a61      	ldr	r2, [pc, #388]	@ (8004698 <HAL_RCC_ClockConfig+0x268>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d909      	bls.n	800452a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004516:	4b5f      	ldr	r3, [pc, #380]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800451e:	4a5d      	ldr	r2, [pc, #372]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004524:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004526:	2380      	movs	r3, #128	@ 0x80
 8004528:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800452a:	4b5a      	ldr	r3, [pc, #360]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f023 0203 	bic.w	r2, r3, #3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	4957      	ldr	r1, [pc, #348]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004538:	4313      	orrs	r3, r2
 800453a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800453c:	f7fd ff38 	bl	80023b0 <HAL_GetTick>
 8004540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004542:	e00a      	b.n	800455a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004544:	f7fd ff34 	bl	80023b0 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004552:	4293      	cmp	r3, r2
 8004554:	d901      	bls.n	800455a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e095      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455a:	4b4e      	ldr	r3, [pc, #312]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 020c 	and.w	r2, r3, #12
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	429a      	cmp	r2, r3
 800456a:	d1eb      	bne.n	8004544 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d023      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004584:	4b43      	ldr	r3, [pc, #268]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	4a42      	ldr	r2, [pc, #264]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 800458a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800458e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d007      	beq.n	80045ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800459c:	4b3d      	ldr	r3, [pc, #244]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80045a4:	4a3b      	ldr	r2, [pc, #236]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 80045a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ac:	4b39      	ldr	r3, [pc, #228]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	4936      	ldr	r1, [pc, #216]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	608b      	str	r3, [r1, #8]
 80045be:	e008      	b.n	80045d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2b80      	cmp	r3, #128	@ 0x80
 80045c4:	d105      	bne.n	80045d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045c6:	4b33      	ldr	r3, [pc, #204]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	4a32      	ldr	r2, [pc, #200]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 80045cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004690 <HAL_RCC_ClockConfig+0x260>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d21d      	bcs.n	800461c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004690 <HAL_RCC_ClockConfig+0x260>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f023 020f 	bic.w	r2, r3, #15
 80045e8:	4929      	ldr	r1, [pc, #164]	@ (8004690 <HAL_RCC_ClockConfig+0x260>)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045f0:	f7fd fede 	bl	80023b0 <HAL_GetTick>
 80045f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f6:	e00a      	b.n	800460e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f8:	f7fd feda 	bl	80023b0 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e03b      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460e:	4b20      	ldr	r3, [pc, #128]	@ (8004690 <HAL_RCC_ClockConfig+0x260>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d1ed      	bne.n	80045f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	d008      	beq.n	800463a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004628:	4b1a      	ldr	r3, [pc, #104]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4917      	ldr	r1, [pc, #92]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004636:	4313      	orrs	r3, r2
 8004638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d009      	beq.n	800465a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004646:	4b13      	ldr	r3, [pc, #76]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	490f      	ldr	r1, [pc, #60]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004656:	4313      	orrs	r3, r2
 8004658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800465a:	f000 f825 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 800465e:	4602      	mov	r2, r0
 8004660:	4b0c      	ldr	r3, [pc, #48]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	091b      	lsrs	r3, r3, #4
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	490c      	ldr	r1, [pc, #48]	@ (800469c <HAL_RCC_ClockConfig+0x26c>)
 800466c:	5ccb      	ldrb	r3, [r1, r3]
 800466e:	f003 031f 	and.w	r3, r3, #31
 8004672:	fa22 f303 	lsr.w	r3, r2, r3
 8004676:	4a0a      	ldr	r2, [pc, #40]	@ (80046a0 <HAL_RCC_ClockConfig+0x270>)
 8004678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800467a:	4b0a      	ldr	r3, [pc, #40]	@ (80046a4 <HAL_RCC_ClockConfig+0x274>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f7fd f82e 	bl	80016e0 <HAL_InitTick>
 8004684:	4603      	mov	r3, r0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40022000 	.word	0x40022000
 8004694:	40021000 	.word	0x40021000
 8004698:	04c4b400 	.word	0x04c4b400
 800469c:	0800b57c 	.word	0x0800b57c
 80046a0:	20000000 	.word	0x20000000
 80046a4:	20000140 	.word	0x20000140

080046a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d102      	bne.n	80046c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004764 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046bc:	613b      	str	r3, [r7, #16]
 80046be:	e047      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80046c0:	4b27      	ldr	r3, [pc, #156]	@ (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 030c 	and.w	r3, r3, #12
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d102      	bne.n	80046d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046cc:	4b26      	ldr	r3, [pc, #152]	@ (8004768 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046ce:	613b      	str	r3, [r7, #16]
 80046d0:	e03e      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80046d2:	4b23      	ldr	r3, [pc, #140]	@ (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 030c 	and.w	r3, r3, #12
 80046da:	2b0c      	cmp	r3, #12
 80046dc:	d136      	bne.n	800474c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046de:	4b20      	ldr	r3, [pc, #128]	@ (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	091b      	lsrs	r3, r3, #4
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	3301      	adds	r3, #1
 80046f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d10c      	bne.n	8004716 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004768 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	fbb2 f3f3 	udiv	r3, r2, r3
 8004704:	4a16      	ldr	r2, [pc, #88]	@ (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004706:	68d2      	ldr	r2, [r2, #12]
 8004708:	0a12      	lsrs	r2, r2, #8
 800470a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800470e:	fb02 f303 	mul.w	r3, r2, r3
 8004712:	617b      	str	r3, [r7, #20]
      break;
 8004714:	e00c      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004716:	4a13      	ldr	r2, [pc, #76]	@ (8004764 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	fbb2 f3f3 	udiv	r3, r2, r3
 800471e:	4a10      	ldr	r2, [pc, #64]	@ (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004720:	68d2      	ldr	r2, [r2, #12]
 8004722:	0a12      	lsrs	r2, r2, #8
 8004724:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004728:	fb02 f303 	mul.w	r3, r2, r3
 800472c:	617b      	str	r3, [r7, #20]
      break;
 800472e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004730:	4b0b      	ldr	r3, [pc, #44]	@ (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	0e5b      	lsrs	r3, r3, #25
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	3301      	adds	r3, #1
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	fbb2 f3f3 	udiv	r3, r2, r3
 8004748:	613b      	str	r3, [r7, #16]
 800474a:	e001      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004750:	693b      	ldr	r3, [r7, #16]
}
 8004752:	4618      	mov	r0, r3
 8004754:	371c      	adds	r7, #28
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40021000 	.word	0x40021000
 8004764:	00f42400 	.word	0x00f42400
 8004768:	016e3600 	.word	0x016e3600

0800476c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004770:	4b03      	ldr	r3, [pc, #12]	@ (8004780 <HAL_RCC_GetHCLKFreq+0x14>)
 8004772:	681b      	ldr	r3, [r3, #0]
}
 8004774:	4618      	mov	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	20000000 	.word	0x20000000

08004784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004788:	f7ff fff0 	bl	800476c <HAL_RCC_GetHCLKFreq>
 800478c:	4602      	mov	r2, r0
 800478e:	4b06      	ldr	r3, [pc, #24]	@ (80047a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	0a1b      	lsrs	r3, r3, #8
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	4904      	ldr	r1, [pc, #16]	@ (80047ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800479a:	5ccb      	ldrb	r3, [r1, r3]
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40021000 	.word	0x40021000
 80047ac:	0800b58c 	.word	0x0800b58c

080047b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047b4:	f7ff ffda 	bl	800476c <HAL_RCC_GetHCLKFreq>
 80047b8:	4602      	mov	r2, r0
 80047ba:	4b06      	ldr	r3, [pc, #24]	@ (80047d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	0adb      	lsrs	r3, r3, #11
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	4904      	ldr	r1, [pc, #16]	@ (80047d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047c6:	5ccb      	ldrb	r3, [r1, r3]
 80047c8:	f003 031f 	and.w	r3, r3, #31
 80047cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40021000 	.word	0x40021000
 80047d8:	0800b58c 	.word	0x0800b58c

080047dc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	220f      	movs	r2, #15
 80047ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80047ec:	4b12      	ldr	r3, [pc, #72]	@ (8004838 <HAL_RCC_GetClockConfig+0x5c>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 0203 	and.w	r2, r3, #3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80047f8:	4b0f      	ldr	r3, [pc, #60]	@ (8004838 <HAL_RCC_GetClockConfig+0x5c>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004804:	4b0c      	ldr	r3, [pc, #48]	@ (8004838 <HAL_RCC_GetClockConfig+0x5c>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004810:	4b09      	ldr	r3, [pc, #36]	@ (8004838 <HAL_RCC_GetClockConfig+0x5c>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	08db      	lsrs	r3, r3, #3
 8004816:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800481e:	4b07      	ldr	r3, [pc, #28]	@ (800483c <HAL_RCC_GetClockConfig+0x60>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 020f 	and.w	r2, r3, #15
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	601a      	str	r2, [r3, #0]
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40021000 	.word	0x40021000
 800483c:	40022000 	.word	0x40022000

08004840 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004846:	4b1e      	ldr	r3, [pc, #120]	@ (80048c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004850:	4b1b      	ldr	r3, [pc, #108]	@ (80048c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	091b      	lsrs	r3, r3, #4
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	3301      	adds	r3, #1
 800485c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	2b03      	cmp	r3, #3
 8004862:	d10c      	bne.n	800487e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004864:	4a17      	ldr	r2, [pc, #92]	@ (80048c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	4a14      	ldr	r2, [pc, #80]	@ (80048c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800486e:	68d2      	ldr	r2, [r2, #12]
 8004870:	0a12      	lsrs	r2, r2, #8
 8004872:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004876:	fb02 f303 	mul.w	r3, r2, r3
 800487a:	617b      	str	r3, [r7, #20]
    break;
 800487c:	e00c      	b.n	8004898 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800487e:	4a12      	ldr	r2, [pc, #72]	@ (80048c8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	fbb2 f3f3 	udiv	r3, r2, r3
 8004886:	4a0e      	ldr	r2, [pc, #56]	@ (80048c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004888:	68d2      	ldr	r2, [r2, #12]
 800488a:	0a12      	lsrs	r2, r2, #8
 800488c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004890:	fb02 f303 	mul.w	r3, r2, r3
 8004894:	617b      	str	r3, [r7, #20]
    break;
 8004896:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004898:	4b09      	ldr	r3, [pc, #36]	@ (80048c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	0e5b      	lsrs	r3, r3, #25
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	3301      	adds	r3, #1
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80048b2:	687b      	ldr	r3, [r7, #4]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	371c      	adds	r7, #28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	40021000 	.word	0x40021000
 80048c4:	016e3600 	.word	0x016e3600
 80048c8:	00f42400 	.word	0x00f42400

080048cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048d4:	2300      	movs	r3, #0
 80048d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048d8:	2300      	movs	r3, #0
 80048da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 8098 	beq.w	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048ea:	2300      	movs	r3, #0
 80048ec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ee:	4b43      	ldr	r3, [pc, #268]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10d      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048fa:	4b40      	ldr	r3, [pc, #256]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fe:	4a3f      	ldr	r2, [pc, #252]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004904:	6593      	str	r3, [r2, #88]	@ 0x58
 8004906:	4b3d      	ldr	r3, [pc, #244]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800490e:	60bb      	str	r3, [r7, #8]
 8004910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004912:	2301      	movs	r3, #1
 8004914:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004916:	4b3a      	ldr	r3, [pc, #232]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a39      	ldr	r2, [pc, #228]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800491c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004920:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004922:	f7fd fd45 	bl	80023b0 <HAL_GetTick>
 8004926:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004928:	e009      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800492a:	f7fd fd41 	bl	80023b0 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d902      	bls.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	74fb      	strb	r3, [r7, #19]
        break;
 800493c:	e005      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800493e:	4b30      	ldr	r3, [pc, #192]	@ (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0ef      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800494a:	7cfb      	ldrb	r3, [r7, #19]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d159      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004950:	4b2a      	ldr	r3, [pc, #168]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800495a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d01e      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	429a      	cmp	r2, r3
 800496a:	d019      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800496c:	4b23      	ldr	r3, [pc, #140]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004972:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004976:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004978:	4b20      	ldr	r3, [pc, #128]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497e:	4a1f      	ldr	r2, [pc, #124]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004984:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004988:	4b1c      	ldr	r3, [pc, #112]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800498a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498e:	4a1b      	ldr	r2, [pc, #108]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004990:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004994:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004998:	4a18      	ldr	r2, [pc, #96]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d016      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049aa:	f7fd fd01 	bl	80023b0 <HAL_GetTick>
 80049ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049b0:	e00b      	b.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b2:	f7fd fcfd 	bl	80023b0 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d902      	bls.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	74fb      	strb	r3, [r7, #19]
            break;
 80049c8:	e006      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049ca:	4b0c      	ldr	r3, [pc, #48]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0ec      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80049d8:	7cfb      	ldrb	r3, [r7, #19]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10b      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049de:	4b07      	ldr	r3, [pc, #28]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ec:	4903      	ldr	r1, [pc, #12]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80049f4:	e008      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049f6:	7cfb      	ldrb	r3, [r7, #19]
 80049f8:	74bb      	strb	r3, [r7, #18]
 80049fa:	e005      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80049fc:	40021000 	.word	0x40021000
 8004a00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a04:	7cfb      	ldrb	r3, [r7, #19]
 8004a06:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a08:	7c7b      	ldrb	r3, [r7, #17]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d105      	bne.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a0e:	4ba7      	ldr	r3, [pc, #668]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a12:	4aa6      	ldr	r2, [pc, #664]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a18:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a26:	4ba1      	ldr	r3, [pc, #644]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2c:	f023 0203 	bic.w	r2, r3, #3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	499d      	ldr	r1, [pc, #628]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a48:	4b98      	ldr	r3, [pc, #608]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a4e:	f023 020c 	bic.w	r2, r3, #12
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	4995      	ldr	r1, [pc, #596]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0304 	and.w	r3, r3, #4
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a6a:	4b90      	ldr	r3, [pc, #576]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a70:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	498c      	ldr	r1, [pc, #560]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a8c:	4b87      	ldr	r3, [pc, #540]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a92:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	4984      	ldr	r1, [pc, #528]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0310 	and.w	r3, r3, #16
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004aae:	4b7f      	ldr	r3, [pc, #508]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	497b      	ldr	r1, [pc, #492]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ad0:	4b76      	ldr	r3, [pc, #472]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	4973      	ldr	r1, [pc, #460]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004af2:	4b6e      	ldr	r3, [pc, #440]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	496a      	ldr	r1, [pc, #424]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b14:	4b65      	ldr	r3, [pc, #404]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	4962      	ldr	r1, [pc, #392]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b36:	4b5d      	ldr	r3, [pc, #372]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b44:	4959      	ldr	r1, [pc, #356]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b58:	4b54      	ldr	r3, [pc, #336]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b5e:	f023 0203 	bic.w	r2, r3, #3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b66:	4951      	ldr	r1, [pc, #324]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00a      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b7a:	4b4c      	ldr	r3, [pc, #304]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b80:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b88:	4948      	ldr	r1, [pc, #288]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d015      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b9c:	4b43      	ldr	r3, [pc, #268]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004baa:	4940      	ldr	r1, [pc, #256]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bba:	d105      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	4a3a      	ldr	r2, [pc, #232]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bc6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d015      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bd4:	4b35      	ldr	r3, [pc, #212]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bda:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004be2:	4932      	ldr	r1, [pc, #200]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bf2:	d105      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	4a2c      	ldr	r2, [pc, #176]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bfe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d015      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c0c:	4b27      	ldr	r3, [pc, #156]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c12:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1a:	4924      	ldr	r1, [pc, #144]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c2a:	d105      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	4a1e      	ldr	r2, [pc, #120]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c36:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d015      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c44:	4b19      	ldr	r3, [pc, #100]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c52:	4916      	ldr	r1, [pc, #88]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c62:	d105      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c64:	4b11      	ldr	r3, [pc, #68]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	4a10      	ldr	r2, [pc, #64]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c6e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d019      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	4908      	ldr	r1, [pc, #32]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c9a:	d109      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c9c:	4b03      	ldr	r3, [pc, #12]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	4a02      	ldr	r2, [pc, #8]	@ (8004cac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ca6:	60d3      	str	r3, [r2, #12]
 8004ca8:	e002      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004caa:	bf00      	nop
 8004cac:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d015      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004cbc:	4b29      	ldr	r3, [pc, #164]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cca:	4926      	ldr	r1, [pc, #152]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cda:	d105      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004cdc:	4b21      	ldr	r3, [pc, #132]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	4a20      	ldr	r2, [pc, #128]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ce2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ce6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d015      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d02:	4918      	ldr	r1, [pc, #96]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d12:	d105      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d14:	4b13      	ldr	r3, [pc, #76]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	4a12      	ldr	r2, [pc, #72]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d1e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d015      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d3a:	490a      	ldr	r1, [pc, #40]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d4a:	d105      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d4c:	4b05      	ldr	r3, [pc, #20]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	4a04      	ldr	r2, [pc, #16]	@ (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d56:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d58:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40021000 	.word	0x40021000

08004d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e049      	b.n	8004e0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f841 	bl	8004e16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3304      	adds	r3, #4
 8004da4:	4619      	mov	r1, r3
 8004da6:	4610      	mov	r0, r2
 8004da8:	f000 fcde 	bl	8005768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
	...

08004e2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d001      	beq.n	8004e44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e054      	b.n	8004eee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0201 	orr.w	r2, r2, #1
 8004e5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a26      	ldr	r2, [pc, #152]	@ (8004efc <HAL_TIM_Base_Start_IT+0xd0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d022      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x80>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e6e:	d01d      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x80>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a22      	ldr	r2, [pc, #136]	@ (8004f00 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d018      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x80>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a21      	ldr	r2, [pc, #132]	@ (8004f04 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d013      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x80>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a1f      	ldr	r2, [pc, #124]	@ (8004f08 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d00e      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x80>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a1e      	ldr	r2, [pc, #120]	@ (8004f0c <HAL_TIM_Base_Start_IT+0xe0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d009      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x80>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a1c      	ldr	r2, [pc, #112]	@ (8004f10 <HAL_TIM_Base_Start_IT+0xe4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d004      	beq.n	8004eac <HAL_TIM_Base_Start_IT+0x80>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a1b      	ldr	r2, [pc, #108]	@ (8004f14 <HAL_TIM_Base_Start_IT+0xe8>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d115      	bne.n	8004ed8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	4b19      	ldr	r3, [pc, #100]	@ (8004f18 <HAL_TIM_Base_Start_IT+0xec>)
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2b06      	cmp	r3, #6
 8004ebc:	d015      	beq.n	8004eea <HAL_TIM_Base_Start_IT+0xbe>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ec4:	d011      	beq.n	8004eea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f042 0201 	orr.w	r2, r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed6:	e008      	b.n	8004eea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0201 	orr.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	e000      	b.n	8004eec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40012c00 	.word	0x40012c00
 8004f00:	40000400 	.word	0x40000400
 8004f04:	40000800 	.word	0x40000800
 8004f08:	40000c00 	.word	0x40000c00
 8004f0c:	40013400 	.word	0x40013400
 8004f10:	40014000 	.word	0x40014000
 8004f14:	40015000 	.word	0x40015000
 8004f18:	00010007 	.word	0x00010007

08004f1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e049      	b.n	8004fc2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7fc fe64 	bl	8001c10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3304      	adds	r3, #4
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f000 fc04 	bl	8005768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d109      	bne.n	8004ff0 <HAL_TIM_PWM_Start+0x24>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	bf14      	ite	ne
 8004fe8:	2301      	movne	r3, #1
 8004fea:	2300      	moveq	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	e03c      	b.n	800506a <HAL_TIM_PWM_Start+0x9e>
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d109      	bne.n	800500a <HAL_TIM_PWM_Start+0x3e>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	bf14      	ite	ne
 8005002:	2301      	movne	r3, #1
 8005004:	2300      	moveq	r3, #0
 8005006:	b2db      	uxtb	r3, r3
 8005008:	e02f      	b.n	800506a <HAL_TIM_PWM_Start+0x9e>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b08      	cmp	r3, #8
 800500e:	d109      	bne.n	8005024 <HAL_TIM_PWM_Start+0x58>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b01      	cmp	r3, #1
 800501a:	bf14      	ite	ne
 800501c:	2301      	movne	r3, #1
 800501e:	2300      	moveq	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	e022      	b.n	800506a <HAL_TIM_PWM_Start+0x9e>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	2b0c      	cmp	r3, #12
 8005028:	d109      	bne.n	800503e <HAL_TIM_PWM_Start+0x72>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b01      	cmp	r3, #1
 8005034:	bf14      	ite	ne
 8005036:	2301      	movne	r3, #1
 8005038:	2300      	moveq	r3, #0
 800503a:	b2db      	uxtb	r3, r3
 800503c:	e015      	b.n	800506a <HAL_TIM_PWM_Start+0x9e>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b10      	cmp	r3, #16
 8005042:	d109      	bne.n	8005058 <HAL_TIM_PWM_Start+0x8c>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	bf14      	ite	ne
 8005050:	2301      	movne	r3, #1
 8005052:	2300      	moveq	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	e008      	b.n	800506a <HAL_TIM_PWM_Start+0x9e>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b01      	cmp	r3, #1
 8005062:	bf14      	ite	ne
 8005064:	2301      	movne	r3, #1
 8005066:	2300      	moveq	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e0a6      	b.n	80051c0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d104      	bne.n	8005082 <HAL_TIM_PWM_Start+0xb6>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005080:	e023      	b.n	80050ca <HAL_TIM_PWM_Start+0xfe>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b04      	cmp	r3, #4
 8005086:	d104      	bne.n	8005092 <HAL_TIM_PWM_Start+0xc6>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005090:	e01b      	b.n	80050ca <HAL_TIM_PWM_Start+0xfe>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b08      	cmp	r3, #8
 8005096:	d104      	bne.n	80050a2 <HAL_TIM_PWM_Start+0xd6>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050a0:	e013      	b.n	80050ca <HAL_TIM_PWM_Start+0xfe>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b0c      	cmp	r3, #12
 80050a6:	d104      	bne.n	80050b2 <HAL_TIM_PWM_Start+0xe6>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050b0:	e00b      	b.n	80050ca <HAL_TIM_PWM_Start+0xfe>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b10      	cmp	r3, #16
 80050b6:	d104      	bne.n	80050c2 <HAL_TIM_PWM_Start+0xf6>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050c0:	e003      	b.n	80050ca <HAL_TIM_PWM_Start+0xfe>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2202      	movs	r2, #2
 80050c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2201      	movs	r2, #1
 80050d0:	6839      	ldr	r1, [r7, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 ff8e 	bl	8005ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a3a      	ldr	r2, [pc, #232]	@ (80051c8 <HAL_TIM_PWM_Start+0x1fc>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d018      	beq.n	8005114 <HAL_TIM_PWM_Start+0x148>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a39      	ldr	r2, [pc, #228]	@ (80051cc <HAL_TIM_PWM_Start+0x200>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d013      	beq.n	8005114 <HAL_TIM_PWM_Start+0x148>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a37      	ldr	r2, [pc, #220]	@ (80051d0 <HAL_TIM_PWM_Start+0x204>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00e      	beq.n	8005114 <HAL_TIM_PWM_Start+0x148>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a36      	ldr	r2, [pc, #216]	@ (80051d4 <HAL_TIM_PWM_Start+0x208>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d009      	beq.n	8005114 <HAL_TIM_PWM_Start+0x148>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a34      	ldr	r2, [pc, #208]	@ (80051d8 <HAL_TIM_PWM_Start+0x20c>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d004      	beq.n	8005114 <HAL_TIM_PWM_Start+0x148>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a33      	ldr	r2, [pc, #204]	@ (80051dc <HAL_TIM_PWM_Start+0x210>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d101      	bne.n	8005118 <HAL_TIM_PWM_Start+0x14c>
 8005114:	2301      	movs	r3, #1
 8005116:	e000      	b.n	800511a <HAL_TIM_PWM_Start+0x14e>
 8005118:	2300      	movs	r3, #0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d007      	beq.n	800512e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800512c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a25      	ldr	r2, [pc, #148]	@ (80051c8 <HAL_TIM_PWM_Start+0x1fc>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d022      	beq.n	800517e <HAL_TIM_PWM_Start+0x1b2>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005140:	d01d      	beq.n	800517e <HAL_TIM_PWM_Start+0x1b2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a26      	ldr	r2, [pc, #152]	@ (80051e0 <HAL_TIM_PWM_Start+0x214>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d018      	beq.n	800517e <HAL_TIM_PWM_Start+0x1b2>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a24      	ldr	r2, [pc, #144]	@ (80051e4 <HAL_TIM_PWM_Start+0x218>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d013      	beq.n	800517e <HAL_TIM_PWM_Start+0x1b2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a23      	ldr	r2, [pc, #140]	@ (80051e8 <HAL_TIM_PWM_Start+0x21c>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d00e      	beq.n	800517e <HAL_TIM_PWM_Start+0x1b2>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a19      	ldr	r2, [pc, #100]	@ (80051cc <HAL_TIM_PWM_Start+0x200>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d009      	beq.n	800517e <HAL_TIM_PWM_Start+0x1b2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a18      	ldr	r2, [pc, #96]	@ (80051d0 <HAL_TIM_PWM_Start+0x204>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d004      	beq.n	800517e <HAL_TIM_PWM_Start+0x1b2>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a18      	ldr	r2, [pc, #96]	@ (80051dc <HAL_TIM_PWM_Start+0x210>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d115      	bne.n	80051aa <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	4b19      	ldr	r3, [pc, #100]	@ (80051ec <HAL_TIM_PWM_Start+0x220>)
 8005186:	4013      	ands	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b06      	cmp	r3, #6
 800518e:	d015      	beq.n	80051bc <HAL_TIM_PWM_Start+0x1f0>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005196:	d011      	beq.n	80051bc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0201 	orr.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a8:	e008      	b.n	80051bc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f042 0201 	orr.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	e000      	b.n	80051be <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40012c00 	.word	0x40012c00
 80051cc:	40013400 	.word	0x40013400
 80051d0:	40014000 	.word	0x40014000
 80051d4:	40014400 	.word	0x40014400
 80051d8:	40014800 	.word	0x40014800
 80051dc:	40015000 	.word	0x40015000
 80051e0:	40000400 	.word	0x40000400
 80051e4:	40000800 	.word	0x40000800
 80051e8:	40000c00 	.word	0x40000c00
 80051ec:	00010007 	.word	0x00010007

080051f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b02      	cmp	r3, #2
 8005204:	d122      	bne.n	800524c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b02      	cmp	r3, #2
 8005212:	d11b      	bne.n	800524c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f06f 0202 	mvn.w	r2, #2
 800521c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fa7a 	bl	800572c <HAL_TIM_IC_CaptureCallback>
 8005238:	e005      	b.n	8005246 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fa6c 	bl	8005718 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fa7d 	bl	8005740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b04      	cmp	r3, #4
 8005258:	d122      	bne.n	80052a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	2b04      	cmp	r3, #4
 8005266:	d11b      	bne.n	80052a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f06f 0204 	mvn.w	r2, #4
 8005270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2202      	movs	r2, #2
 8005276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fa50 	bl	800572c <HAL_TIM_IC_CaptureCallback>
 800528c:	e005      	b.n	800529a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fa42 	bl	8005718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 fa53 	bl	8005740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	f003 0308 	and.w	r3, r3, #8
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d122      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f003 0308 	and.w	r3, r3, #8
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d11b      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f06f 0208 	mvn.w	r2, #8
 80052c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2204      	movs	r2, #4
 80052ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fa26 	bl	800572c <HAL_TIM_IC_CaptureCallback>
 80052e0:	e005      	b.n	80052ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 fa18 	bl	8005718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 fa29 	bl	8005740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0310 	and.w	r3, r3, #16
 80052fe:	2b10      	cmp	r3, #16
 8005300:	d122      	bne.n	8005348 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f003 0310 	and.w	r3, r3, #16
 800530c:	2b10      	cmp	r3, #16
 800530e:	d11b      	bne.n	8005348 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f06f 0210 	mvn.w	r2, #16
 8005318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2208      	movs	r2, #8
 800531e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f9fc 	bl	800572c <HAL_TIM_IC_CaptureCallback>
 8005334:	e005      	b.n	8005342 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f9ee 	bl	8005718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f9ff 	bl	8005740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b01      	cmp	r3, #1
 8005354:	d10e      	bne.n	8005374 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b01      	cmp	r3, #1
 8005362:	d107      	bne.n	8005374 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f06f 0201 	mvn.w	r2, #1
 800536c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7fc f97a 	bl	8001668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800537e:	2b80      	cmp	r3, #128	@ 0x80
 8005380:	d10e      	bne.n	80053a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800538c:	2b80      	cmp	r3, #128	@ 0x80
 800538e:	d107      	bne.n	80053a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f001 f912 	bl	80065c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053ae:	d10e      	bne.n	80053ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ba:	2b80      	cmp	r3, #128	@ 0x80
 80053bc:	d107      	bne.n	80053ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80053c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f001 f905 	bl	80065d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053d8:	2b40      	cmp	r3, #64	@ 0x40
 80053da:	d10e      	bne.n	80053fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e6:	2b40      	cmp	r3, #64	@ 0x40
 80053e8:	d107      	bne.n	80053fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f9ad 	bl	8005754 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	f003 0320 	and.w	r3, r3, #32
 8005404:	2b20      	cmp	r3, #32
 8005406:	d10e      	bne.n	8005426 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f003 0320 	and.w	r3, r3, #32
 8005412:	2b20      	cmp	r3, #32
 8005414:	d107      	bne.n	8005426 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f06f 0220 	mvn.w	r2, #32
 800541e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f001 f8c5 	bl	80065b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005430:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005434:	d10f      	bne.n	8005456 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005440:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005444:	d107      	bne.n	8005456 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800544e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f001 f8cb 	bl	80065ec <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005460:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005464:	d10f      	bne.n	8005486 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005470:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005474:	d107      	bne.n	8005486 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800547e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f001 f8bd 	bl	8006600 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005490:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005494:	d10f      	bne.n	80054b6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054a4:	d107      	bne.n	80054b6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80054ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f001 f8af 	bl	8006614 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054c4:	d10f      	bne.n	80054e6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054d4:	d107      	bne.n	80054e6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80054de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f001 f8a1 	bl	8006628 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054e6:	bf00      	nop
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054fc:	2300      	movs	r3, #0
 80054fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005506:	2b01      	cmp	r3, #1
 8005508:	d101      	bne.n	800550e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800550a:	2302      	movs	r3, #2
 800550c:	e0ff      	b.n	800570e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b14      	cmp	r3, #20
 800551a:	f200 80f0 	bhi.w	80056fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800551e:	a201      	add	r2, pc, #4	@ (adr r2, 8005524 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005524:	08005579 	.word	0x08005579
 8005528:	080056ff 	.word	0x080056ff
 800552c:	080056ff 	.word	0x080056ff
 8005530:	080056ff 	.word	0x080056ff
 8005534:	080055b9 	.word	0x080055b9
 8005538:	080056ff 	.word	0x080056ff
 800553c:	080056ff 	.word	0x080056ff
 8005540:	080056ff 	.word	0x080056ff
 8005544:	080055fb 	.word	0x080055fb
 8005548:	080056ff 	.word	0x080056ff
 800554c:	080056ff 	.word	0x080056ff
 8005550:	080056ff 	.word	0x080056ff
 8005554:	0800563b 	.word	0x0800563b
 8005558:	080056ff 	.word	0x080056ff
 800555c:	080056ff 	.word	0x080056ff
 8005560:	080056ff 	.word	0x080056ff
 8005564:	0800567d 	.word	0x0800567d
 8005568:	080056ff 	.word	0x080056ff
 800556c:	080056ff 	.word	0x080056ff
 8005570:	080056ff 	.word	0x080056ff
 8005574:	080056bd 	.word	0x080056bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68b9      	ldr	r1, [r7, #8]
 800557e:	4618      	mov	r0, r3
 8005580:	f000 f99a 	bl	80058b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0208 	orr.w	r2, r2, #8
 8005592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699a      	ldr	r2, [r3, #24]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0204 	bic.w	r2, r2, #4
 80055a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6999      	ldr	r1, [r3, #24]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	691a      	ldr	r2, [r3, #16]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	619a      	str	r2, [r3, #24]
      break;
 80055b6:	e0a5      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 fa14 	bl	80059ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699a      	ldr	r2, [r3, #24]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6999      	ldr	r1, [r3, #24]
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	021a      	lsls	r2, r3, #8
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	619a      	str	r2, [r3, #24]
      break;
 80055f8:	e084      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68b9      	ldr	r1, [r7, #8]
 8005600:	4618      	mov	r0, r3
 8005602:	f000 fa87 	bl	8005b14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69da      	ldr	r2, [r3, #28]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f042 0208 	orr.w	r2, r2, #8
 8005614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69da      	ldr	r2, [r3, #28]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0204 	bic.w	r2, r2, #4
 8005624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69d9      	ldr	r1, [r3, #28]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	61da      	str	r2, [r3, #28]
      break;
 8005638:	e064      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68b9      	ldr	r1, [r7, #8]
 8005640:	4618      	mov	r0, r3
 8005642:	f000 faf9 	bl	8005c38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69da      	ldr	r2, [r3, #28]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69da      	ldr	r2, [r3, #28]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69d9      	ldr	r1, [r3, #28]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	021a      	lsls	r2, r3, #8
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	61da      	str	r2, [r3, #28]
      break;
 800567a:	e043      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fb6c 	bl	8005d60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0208 	orr.w	r2, r2, #8
 8005696:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0204 	bic.w	r2, r2, #4
 80056a6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	691a      	ldr	r2, [r3, #16]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	430a      	orrs	r2, r1
 80056b8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80056ba:	e023      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68b9      	ldr	r1, [r7, #8]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fbb6 	bl	8005e34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	021a      	lsls	r2, r3, #8
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80056fc:	e002      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	75fb      	strb	r3, [r7, #23]
      break;
 8005702:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800570c:	7dfb      	ldrb	r3, [r7, #23]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop

08005718 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a46      	ldr	r2, [pc, #280]	@ (8005894 <TIM_Base_SetConfig+0x12c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d017      	beq.n	80057b0 <TIM_Base_SetConfig+0x48>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005786:	d013      	beq.n	80057b0 <TIM_Base_SetConfig+0x48>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a43      	ldr	r2, [pc, #268]	@ (8005898 <TIM_Base_SetConfig+0x130>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d00f      	beq.n	80057b0 <TIM_Base_SetConfig+0x48>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a42      	ldr	r2, [pc, #264]	@ (800589c <TIM_Base_SetConfig+0x134>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d00b      	beq.n	80057b0 <TIM_Base_SetConfig+0x48>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a41      	ldr	r2, [pc, #260]	@ (80058a0 <TIM_Base_SetConfig+0x138>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d007      	beq.n	80057b0 <TIM_Base_SetConfig+0x48>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a40      	ldr	r2, [pc, #256]	@ (80058a4 <TIM_Base_SetConfig+0x13c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d003      	beq.n	80057b0 <TIM_Base_SetConfig+0x48>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a3f      	ldr	r2, [pc, #252]	@ (80058a8 <TIM_Base_SetConfig+0x140>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d108      	bne.n	80057c2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a33      	ldr	r2, [pc, #204]	@ (8005894 <TIM_Base_SetConfig+0x12c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d023      	beq.n	8005812 <TIM_Base_SetConfig+0xaa>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057d0:	d01f      	beq.n	8005812 <TIM_Base_SetConfig+0xaa>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a30      	ldr	r2, [pc, #192]	@ (8005898 <TIM_Base_SetConfig+0x130>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d01b      	beq.n	8005812 <TIM_Base_SetConfig+0xaa>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a2f      	ldr	r2, [pc, #188]	@ (800589c <TIM_Base_SetConfig+0x134>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d017      	beq.n	8005812 <TIM_Base_SetConfig+0xaa>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a2e      	ldr	r2, [pc, #184]	@ (80058a0 <TIM_Base_SetConfig+0x138>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d013      	beq.n	8005812 <TIM_Base_SetConfig+0xaa>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a2d      	ldr	r2, [pc, #180]	@ (80058a4 <TIM_Base_SetConfig+0x13c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00f      	beq.n	8005812 <TIM_Base_SetConfig+0xaa>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a2d      	ldr	r2, [pc, #180]	@ (80058ac <TIM_Base_SetConfig+0x144>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00b      	beq.n	8005812 <TIM_Base_SetConfig+0xaa>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a2c      	ldr	r2, [pc, #176]	@ (80058b0 <TIM_Base_SetConfig+0x148>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d007      	beq.n	8005812 <TIM_Base_SetConfig+0xaa>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a2b      	ldr	r2, [pc, #172]	@ (80058b4 <TIM_Base_SetConfig+0x14c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d003      	beq.n	8005812 <TIM_Base_SetConfig+0xaa>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a26      	ldr	r2, [pc, #152]	@ (80058a8 <TIM_Base_SetConfig+0x140>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d108      	bne.n	8005824 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4313      	orrs	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a12      	ldr	r2, [pc, #72]	@ (8005894 <TIM_Base_SetConfig+0x12c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d013      	beq.n	8005878 <TIM_Base_SetConfig+0x110>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a14      	ldr	r2, [pc, #80]	@ (80058a4 <TIM_Base_SetConfig+0x13c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00f      	beq.n	8005878 <TIM_Base_SetConfig+0x110>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a14      	ldr	r2, [pc, #80]	@ (80058ac <TIM_Base_SetConfig+0x144>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00b      	beq.n	8005878 <TIM_Base_SetConfig+0x110>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a13      	ldr	r2, [pc, #76]	@ (80058b0 <TIM_Base_SetConfig+0x148>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d007      	beq.n	8005878 <TIM_Base_SetConfig+0x110>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a12      	ldr	r2, [pc, #72]	@ (80058b4 <TIM_Base_SetConfig+0x14c>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d003      	beq.n	8005878 <TIM_Base_SetConfig+0x110>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a0d      	ldr	r2, [pc, #52]	@ (80058a8 <TIM_Base_SetConfig+0x140>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d103      	bne.n	8005880 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	615a      	str	r2, [r3, #20]
}
 8005886:	bf00      	nop
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	40012c00 	.word	0x40012c00
 8005898:	40000400 	.word	0x40000400
 800589c:	40000800 	.word	0x40000800
 80058a0:	40000c00 	.word	0x40000c00
 80058a4:	40013400 	.word	0x40013400
 80058a8:	40015000 	.word	0x40015000
 80058ac:	40014000 	.word	0x40014000
 80058b0:	40014400 	.word	0x40014400
 80058b4:	40014800 	.word	0x40014800

080058b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	f023 0201 	bic.w	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0303 	bic.w	r3, r3, #3
 80058f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f023 0302 	bic.w	r3, r3, #2
 8005904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	4313      	orrs	r3, r2
 800590e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a30      	ldr	r2, [pc, #192]	@ (80059d4 <TIM_OC1_SetConfig+0x11c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d013      	beq.n	8005940 <TIM_OC1_SetConfig+0x88>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a2f      	ldr	r2, [pc, #188]	@ (80059d8 <TIM_OC1_SetConfig+0x120>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d00f      	beq.n	8005940 <TIM_OC1_SetConfig+0x88>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a2e      	ldr	r2, [pc, #184]	@ (80059dc <TIM_OC1_SetConfig+0x124>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d00b      	beq.n	8005940 <TIM_OC1_SetConfig+0x88>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a2d      	ldr	r2, [pc, #180]	@ (80059e0 <TIM_OC1_SetConfig+0x128>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d007      	beq.n	8005940 <TIM_OC1_SetConfig+0x88>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a2c      	ldr	r2, [pc, #176]	@ (80059e4 <TIM_OC1_SetConfig+0x12c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d003      	beq.n	8005940 <TIM_OC1_SetConfig+0x88>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a2b      	ldr	r2, [pc, #172]	@ (80059e8 <TIM_OC1_SetConfig+0x130>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d10c      	bne.n	800595a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f023 0308 	bic.w	r3, r3, #8
 8005946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	4313      	orrs	r3, r2
 8005950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f023 0304 	bic.w	r3, r3, #4
 8005958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a1d      	ldr	r2, [pc, #116]	@ (80059d4 <TIM_OC1_SetConfig+0x11c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d013      	beq.n	800598a <TIM_OC1_SetConfig+0xd2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a1c      	ldr	r2, [pc, #112]	@ (80059d8 <TIM_OC1_SetConfig+0x120>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d00f      	beq.n	800598a <TIM_OC1_SetConfig+0xd2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a1b      	ldr	r2, [pc, #108]	@ (80059dc <TIM_OC1_SetConfig+0x124>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d00b      	beq.n	800598a <TIM_OC1_SetConfig+0xd2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a1a      	ldr	r2, [pc, #104]	@ (80059e0 <TIM_OC1_SetConfig+0x128>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d007      	beq.n	800598a <TIM_OC1_SetConfig+0xd2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a19      	ldr	r2, [pc, #100]	@ (80059e4 <TIM_OC1_SetConfig+0x12c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d003      	beq.n	800598a <TIM_OC1_SetConfig+0xd2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a18      	ldr	r2, [pc, #96]	@ (80059e8 <TIM_OC1_SetConfig+0x130>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d111      	bne.n	80059ae <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	621a      	str	r2, [r3, #32]
}
 80059c8:	bf00      	nop
 80059ca:	371c      	adds	r7, #28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	40012c00 	.word	0x40012c00
 80059d8:	40013400 	.word	0x40013400
 80059dc:	40014000 	.word	0x40014000
 80059e0:	40014400 	.word	0x40014400
 80059e4:	40014800 	.word	0x40014800
 80059e8:	40015000 	.word	0x40015000

080059ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b087      	sub	sp, #28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	f023 0210 	bic.w	r2, r3, #16
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	021b      	lsls	r3, r3, #8
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f023 0320 	bic.w	r3, r3, #32
 8005a3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	011b      	lsls	r3, r3, #4
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a2c      	ldr	r2, [pc, #176]	@ (8005afc <TIM_OC2_SetConfig+0x110>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d007      	beq.n	8005a60 <TIM_OC2_SetConfig+0x74>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a2b      	ldr	r2, [pc, #172]	@ (8005b00 <TIM_OC2_SetConfig+0x114>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_OC2_SetConfig+0x74>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8005b04 <TIM_OC2_SetConfig+0x118>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d10d      	bne.n	8005a7c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	011b      	lsls	r3, r3, #4
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a1f      	ldr	r2, [pc, #124]	@ (8005afc <TIM_OC2_SetConfig+0x110>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d013      	beq.n	8005aac <TIM_OC2_SetConfig+0xc0>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a1e      	ldr	r2, [pc, #120]	@ (8005b00 <TIM_OC2_SetConfig+0x114>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00f      	beq.n	8005aac <TIM_OC2_SetConfig+0xc0>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a1e      	ldr	r2, [pc, #120]	@ (8005b08 <TIM_OC2_SetConfig+0x11c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00b      	beq.n	8005aac <TIM_OC2_SetConfig+0xc0>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a1d      	ldr	r2, [pc, #116]	@ (8005b0c <TIM_OC2_SetConfig+0x120>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d007      	beq.n	8005aac <TIM_OC2_SetConfig+0xc0>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8005b10 <TIM_OC2_SetConfig+0x124>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d003      	beq.n	8005aac <TIM_OC2_SetConfig+0xc0>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a17      	ldr	r2, [pc, #92]	@ (8005b04 <TIM_OC2_SetConfig+0x118>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d113      	bne.n	8005ad4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ab2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005aba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	621a      	str	r2, [r3, #32]
}
 8005aee:	bf00      	nop
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	40012c00 	.word	0x40012c00
 8005b00:	40013400 	.word	0x40013400
 8005b04:	40015000 	.word	0x40015000
 8005b08:	40014000 	.word	0x40014000
 8005b0c:	40014400 	.word	0x40014400
 8005b10:	40014800 	.word	0x40014800

08005b14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 0303 	bic.w	r3, r3, #3
 8005b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	021b      	lsls	r3, r3, #8
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a2b      	ldr	r2, [pc, #172]	@ (8005c20 <TIM_OC3_SetConfig+0x10c>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d007      	beq.n	8005b86 <TIM_OC3_SetConfig+0x72>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a2a      	ldr	r2, [pc, #168]	@ (8005c24 <TIM_OC3_SetConfig+0x110>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d003      	beq.n	8005b86 <TIM_OC3_SetConfig+0x72>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a29      	ldr	r2, [pc, #164]	@ (8005c28 <TIM_OC3_SetConfig+0x114>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d10d      	bne.n	8005ba2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	021b      	lsls	r3, r3, #8
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a1e      	ldr	r2, [pc, #120]	@ (8005c20 <TIM_OC3_SetConfig+0x10c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d013      	beq.n	8005bd2 <TIM_OC3_SetConfig+0xbe>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a1d      	ldr	r2, [pc, #116]	@ (8005c24 <TIM_OC3_SetConfig+0x110>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d00f      	beq.n	8005bd2 <TIM_OC3_SetConfig+0xbe>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8005c2c <TIM_OC3_SetConfig+0x118>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d00b      	beq.n	8005bd2 <TIM_OC3_SetConfig+0xbe>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8005c30 <TIM_OC3_SetConfig+0x11c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d007      	beq.n	8005bd2 <TIM_OC3_SetConfig+0xbe>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8005c34 <TIM_OC3_SetConfig+0x120>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d003      	beq.n	8005bd2 <TIM_OC3_SetConfig+0xbe>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a16      	ldr	r2, [pc, #88]	@ (8005c28 <TIM_OC3_SetConfig+0x114>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d113      	bne.n	8005bfa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	621a      	str	r2, [r3, #32]
}
 8005c14:	bf00      	nop
 8005c16:	371c      	adds	r7, #28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	40012c00 	.word	0x40012c00
 8005c24:	40013400 	.word	0x40013400
 8005c28:	40015000 	.word	0x40015000
 8005c2c:	40014000 	.word	0x40014000
 8005c30:	40014400 	.word	0x40014400
 8005c34:	40014800 	.word	0x40014800

08005c38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	021b      	lsls	r3, r3, #8
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	031b      	lsls	r3, r3, #12
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a2c      	ldr	r2, [pc, #176]	@ (8005d48 <TIM_OC4_SetConfig+0x110>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d007      	beq.n	8005cac <TIM_OC4_SetConfig+0x74>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a2b      	ldr	r2, [pc, #172]	@ (8005d4c <TIM_OC4_SetConfig+0x114>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d003      	beq.n	8005cac <TIM_OC4_SetConfig+0x74>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a2a      	ldr	r2, [pc, #168]	@ (8005d50 <TIM_OC4_SetConfig+0x118>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d10d      	bne.n	8005cc8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	031b      	lsls	r3, r3, #12
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a1f      	ldr	r2, [pc, #124]	@ (8005d48 <TIM_OC4_SetConfig+0x110>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d013      	beq.n	8005cf8 <TIM_OC4_SetConfig+0xc0>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8005d4c <TIM_OC4_SetConfig+0x114>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d00f      	beq.n	8005cf8 <TIM_OC4_SetConfig+0xc0>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a1e      	ldr	r2, [pc, #120]	@ (8005d54 <TIM_OC4_SetConfig+0x11c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00b      	beq.n	8005cf8 <TIM_OC4_SetConfig+0xc0>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a1d      	ldr	r2, [pc, #116]	@ (8005d58 <TIM_OC4_SetConfig+0x120>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d007      	beq.n	8005cf8 <TIM_OC4_SetConfig+0xc0>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a1c      	ldr	r2, [pc, #112]	@ (8005d5c <TIM_OC4_SetConfig+0x124>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d003      	beq.n	8005cf8 <TIM_OC4_SetConfig+0xc0>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a17      	ldr	r2, [pc, #92]	@ (8005d50 <TIM_OC4_SetConfig+0x118>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d113      	bne.n	8005d20 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cfe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d06:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	019b      	lsls	r3, r3, #6
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	019b      	lsls	r3, r3, #6
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	621a      	str	r2, [r3, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40012c00 	.word	0x40012c00
 8005d4c:	40013400 	.word	0x40013400
 8005d50:	40015000 	.word	0x40015000
 8005d54:	40014000 	.word	0x40014000
 8005d58:	40014400 	.word	0x40014400
 8005d5c:	40014800 	.word	0x40014800

08005d60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005da4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	041b      	lsls	r3, r3, #16
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a19      	ldr	r2, [pc, #100]	@ (8005e1c <TIM_OC5_SetConfig+0xbc>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d013      	beq.n	8005de2 <TIM_OC5_SetConfig+0x82>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a18      	ldr	r2, [pc, #96]	@ (8005e20 <TIM_OC5_SetConfig+0xc0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d00f      	beq.n	8005de2 <TIM_OC5_SetConfig+0x82>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a17      	ldr	r2, [pc, #92]	@ (8005e24 <TIM_OC5_SetConfig+0xc4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d00b      	beq.n	8005de2 <TIM_OC5_SetConfig+0x82>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a16      	ldr	r2, [pc, #88]	@ (8005e28 <TIM_OC5_SetConfig+0xc8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d007      	beq.n	8005de2 <TIM_OC5_SetConfig+0x82>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a15      	ldr	r2, [pc, #84]	@ (8005e2c <TIM_OC5_SetConfig+0xcc>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d003      	beq.n	8005de2 <TIM_OC5_SetConfig+0x82>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a14      	ldr	r2, [pc, #80]	@ (8005e30 <TIM_OC5_SetConfig+0xd0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d109      	bne.n	8005df6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005de8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	021b      	lsls	r3, r3, #8
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	621a      	str	r2, [r3, #32]
}
 8005e10:	bf00      	nop
 8005e12:	371c      	adds	r7, #28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	40012c00 	.word	0x40012c00
 8005e20:	40013400 	.word	0x40013400
 8005e24:	40014000 	.word	0x40014000
 8005e28:	40014400 	.word	0x40014400
 8005e2c:	40014800 	.word	0x40014800
 8005e30:	40015000 	.word	0x40015000

08005e34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	021b      	lsls	r3, r3, #8
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	051b      	lsls	r3, r3, #20
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ef4 <TIM_OC6_SetConfig+0xc0>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d013      	beq.n	8005eb8 <TIM_OC6_SetConfig+0x84>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a19      	ldr	r2, [pc, #100]	@ (8005ef8 <TIM_OC6_SetConfig+0xc4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d00f      	beq.n	8005eb8 <TIM_OC6_SetConfig+0x84>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a18      	ldr	r2, [pc, #96]	@ (8005efc <TIM_OC6_SetConfig+0xc8>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d00b      	beq.n	8005eb8 <TIM_OC6_SetConfig+0x84>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a17      	ldr	r2, [pc, #92]	@ (8005f00 <TIM_OC6_SetConfig+0xcc>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d007      	beq.n	8005eb8 <TIM_OC6_SetConfig+0x84>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a16      	ldr	r2, [pc, #88]	@ (8005f04 <TIM_OC6_SetConfig+0xd0>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d003      	beq.n	8005eb8 <TIM_OC6_SetConfig+0x84>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a15      	ldr	r2, [pc, #84]	@ (8005f08 <TIM_OC6_SetConfig+0xd4>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d109      	bne.n	8005ecc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	029b      	lsls	r3, r3, #10
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	621a      	str	r2, [r3, #32]
}
 8005ee6:	bf00      	nop
 8005ee8:	371c      	adds	r7, #28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	40012c00 	.word	0x40012c00
 8005ef8:	40013400 	.word	0x40013400
 8005efc:	40014000 	.word	0x40014000
 8005f00:	40014400 	.word	0x40014400
 8005f04:	40014800 	.word	0x40014800
 8005f08:	40015000 	.word	0x40015000

08005f0c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	f023 0201 	bic.w	r2, r3, #1
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4a28      	ldr	r2, [pc, #160]	@ (8005fd8 <TIM_TI1_SetConfig+0xcc>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d01b      	beq.n	8005f72 <TIM_TI1_SetConfig+0x66>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f40:	d017      	beq.n	8005f72 <TIM_TI1_SetConfig+0x66>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4a25      	ldr	r2, [pc, #148]	@ (8005fdc <TIM_TI1_SetConfig+0xd0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d013      	beq.n	8005f72 <TIM_TI1_SetConfig+0x66>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4a24      	ldr	r2, [pc, #144]	@ (8005fe0 <TIM_TI1_SetConfig+0xd4>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d00f      	beq.n	8005f72 <TIM_TI1_SetConfig+0x66>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4a23      	ldr	r2, [pc, #140]	@ (8005fe4 <TIM_TI1_SetConfig+0xd8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d00b      	beq.n	8005f72 <TIM_TI1_SetConfig+0x66>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4a22      	ldr	r2, [pc, #136]	@ (8005fe8 <TIM_TI1_SetConfig+0xdc>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d007      	beq.n	8005f72 <TIM_TI1_SetConfig+0x66>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4a21      	ldr	r2, [pc, #132]	@ (8005fec <TIM_TI1_SetConfig+0xe0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d003      	beq.n	8005f72 <TIM_TI1_SetConfig+0x66>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4a20      	ldr	r2, [pc, #128]	@ (8005ff0 <TIM_TI1_SetConfig+0xe4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d101      	bne.n	8005f76 <TIM_TI1_SetConfig+0x6a>
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <TIM_TI1_SetConfig+0x6c>
 8005f76:	2300      	movs	r3, #0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d008      	beq.n	8005f8e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f023 0303 	bic.w	r3, r3, #3
 8005f82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	e003      	b.n	8005f96 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f043 0301 	orr.w	r3, r3, #1
 8005f94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f023 030a 	bic.w	r3, r3, #10
 8005fb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	f003 030a 	and.w	r3, r3, #10
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	621a      	str	r2, [r3, #32]
}
 8005fca:	bf00      	nop
 8005fcc:	371c      	adds	r7, #28
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	40012c00 	.word	0x40012c00
 8005fdc:	40000400 	.word	0x40000400
 8005fe0:	40000800 	.word	0x40000800
 8005fe4:	40000c00 	.word	0x40000c00
 8005fe8:	40013400 	.word	0x40013400
 8005fec:	40014000 	.word	0x40014000
 8005ff0:	40015000 	.word	0x40015000

08005ff4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f003 031f 	and.w	r3, r3, #31
 8006006:	2201      	movs	r2, #1
 8006008:	fa02 f303 	lsl.w	r3, r2, r3
 800600c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6a1a      	ldr	r2, [r3, #32]
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	43db      	mvns	r3, r3
 8006016:	401a      	ands	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a1a      	ldr	r2, [r3, #32]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f003 031f 	and.w	r3, r3, #31
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	fa01 f303 	lsl.w	r3, r1, r3
 800602c:	431a      	orrs	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	621a      	str	r2, [r3, #32]
}
 8006032:	bf00      	nop
 8006034:	371c      	adds	r7, #28
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b08a      	sub	sp, #40	@ 0x28
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
 8006046:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e0a0      	b.n	8006194 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d106      	bne.n	800606c <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7fb fdf2 	bl	8001c50 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3304      	adds	r3, #4
 800607c:	4619      	mov	r1, r3
 800607e:	4610      	mov	r0, r2
 8006080:	f7ff fb72 	bl	8005768 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6818      	ldr	r0, [r3, #0]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	6819      	ldr	r1, [r3, #0]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	2203      	movs	r2, #3
 8006092:	f7ff ff3b 	bl	8005f0c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	699a      	ldr	r2, [r3, #24]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 020c 	bic.w	r2, r2, #12
 80060a4:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6999      	ldr	r1, [r3, #24]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80060c6:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6812      	ldr	r2, [r2, #0]
 80060d2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80060d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060da:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689a      	ldr	r2, [r3, #8]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060ea:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	6812      	ldr	r2, [r2, #0]
 80060f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060fa:	f023 0307 	bic.w	r3, r3, #7
 80060fe:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689a      	ldr	r2, [r3, #8]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f042 0204 	orr.w	r2, r2, #4
 800610e:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8006110:	2300      	movs	r3, #0
 8006112:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006114:	2300      	movs	r3, #0
 8006116:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006118:	2370      	movs	r3, #112	@ 0x70
 800611a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800611c:	2300      	movs	r3, #0
 800611e:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006120:	2300      	movs	r3, #0
 8006122:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006124:	2300      	movs	r3, #0
 8006126:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f107 020c 	add.w	r2, r7, #12
 8006136:	4611      	mov	r1, r2
 8006138:	4618      	mov	r0, r3
 800613a:	f7ff fc57 	bl	80059ec <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6812      	ldr	r2, [r2, #0]
 8006148:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800614c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006150:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8006160:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3728      	adds	r7, #40	@ 0x28
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d109      	bne.n	80061c0 <HAL_TIMEx_PWMN_Start+0x24>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	bf14      	ite	ne
 80061b8:	2301      	movne	r3, #1
 80061ba:	2300      	moveq	r3, #0
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	e022      	b.n	8006206 <HAL_TIMEx_PWMN_Start+0x6a>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	2b04      	cmp	r3, #4
 80061c4:	d109      	bne.n	80061da <HAL_TIMEx_PWMN_Start+0x3e>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	bf14      	ite	ne
 80061d2:	2301      	movne	r3, #1
 80061d4:	2300      	moveq	r3, #0
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	e015      	b.n	8006206 <HAL_TIMEx_PWMN_Start+0x6a>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d109      	bne.n	80061f4 <HAL_TIMEx_PWMN_Start+0x58>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	bf14      	ite	ne
 80061ec:	2301      	movne	r3, #1
 80061ee:	2300      	moveq	r3, #0
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	e008      	b.n	8006206 <HAL_TIMEx_PWMN_Start+0x6a>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	bf14      	ite	ne
 8006200:	2301      	movne	r3, #1
 8006202:	2300      	moveq	r3, #0
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e073      	b.n	80062f6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d104      	bne.n	800621e <HAL_TIMEx_PWMN_Start+0x82>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800621c:	e013      	b.n	8006246 <HAL_TIMEx_PWMN_Start+0xaa>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b04      	cmp	r3, #4
 8006222:	d104      	bne.n	800622e <HAL_TIMEx_PWMN_Start+0x92>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800622c:	e00b      	b.n	8006246 <HAL_TIMEx_PWMN_Start+0xaa>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b08      	cmp	r3, #8
 8006232:	d104      	bne.n	800623e <HAL_TIMEx_PWMN_Start+0xa2>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800623c:	e003      	b.n	8006246 <HAL_TIMEx_PWMN_Start+0xaa>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2202      	movs	r2, #2
 8006242:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2204      	movs	r2, #4
 800624c:	6839      	ldr	r1, [r7, #0]
 800624e:	4618      	mov	r0, r3
 8006250:	f000 f9f4 	bl	800663c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006262:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a25      	ldr	r2, [pc, #148]	@ (8006300 <HAL_TIMEx_PWMN_Start+0x164>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d022      	beq.n	80062b4 <HAL_TIMEx_PWMN_Start+0x118>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006276:	d01d      	beq.n	80062b4 <HAL_TIMEx_PWMN_Start+0x118>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a21      	ldr	r2, [pc, #132]	@ (8006304 <HAL_TIMEx_PWMN_Start+0x168>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d018      	beq.n	80062b4 <HAL_TIMEx_PWMN_Start+0x118>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a20      	ldr	r2, [pc, #128]	@ (8006308 <HAL_TIMEx_PWMN_Start+0x16c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d013      	beq.n	80062b4 <HAL_TIMEx_PWMN_Start+0x118>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a1e      	ldr	r2, [pc, #120]	@ (800630c <HAL_TIMEx_PWMN_Start+0x170>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d00e      	beq.n	80062b4 <HAL_TIMEx_PWMN_Start+0x118>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a1d      	ldr	r2, [pc, #116]	@ (8006310 <HAL_TIMEx_PWMN_Start+0x174>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d009      	beq.n	80062b4 <HAL_TIMEx_PWMN_Start+0x118>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006314 <HAL_TIMEx_PWMN_Start+0x178>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d004      	beq.n	80062b4 <HAL_TIMEx_PWMN_Start+0x118>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a1a      	ldr	r2, [pc, #104]	@ (8006318 <HAL_TIMEx_PWMN_Start+0x17c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d115      	bne.n	80062e0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689a      	ldr	r2, [r3, #8]
 80062ba:	4b18      	ldr	r3, [pc, #96]	@ (800631c <HAL_TIMEx_PWMN_Start+0x180>)
 80062bc:	4013      	ands	r3, r2
 80062be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2b06      	cmp	r3, #6
 80062c4:	d015      	beq.n	80062f2 <HAL_TIMEx_PWMN_Start+0x156>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062cc:	d011      	beq.n	80062f2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0201 	orr.w	r2, r2, #1
 80062dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062de:	e008      	b.n	80062f2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0201 	orr.w	r2, r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	e000      	b.n	80062f4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	40012c00 	.word	0x40012c00
 8006304:	40000400 	.word	0x40000400
 8006308:	40000800 	.word	0x40000800
 800630c:	40000c00 	.word	0x40000c00
 8006310:	40013400 	.word	0x40013400
 8006314:	40014000 	.word	0x40014000
 8006318:	40015000 	.word	0x40015000
 800631c:	00010007 	.word	0x00010007

08006320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006334:	2302      	movs	r3, #2
 8006336:	e074      	b.n	8006422 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a34      	ldr	r2, [pc, #208]	@ (8006430 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d009      	beq.n	8006376 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a33      	ldr	r2, [pc, #204]	@ (8006434 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d004      	beq.n	8006376 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a31      	ldr	r2, [pc, #196]	@ (8006438 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d108      	bne.n	8006388 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800637c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	4313      	orrs	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800638e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006392:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a21      	ldr	r2, [pc, #132]	@ (8006430 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d022      	beq.n	80063f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063b8:	d01d      	beq.n	80063f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a1f      	ldr	r2, [pc, #124]	@ (800643c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d018      	beq.n	80063f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006440 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d013      	beq.n	80063f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a1c      	ldr	r2, [pc, #112]	@ (8006444 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d00e      	beq.n	80063f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a15      	ldr	r2, [pc, #84]	@ (8006434 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d009      	beq.n	80063f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a18      	ldr	r2, [pc, #96]	@ (8006448 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d004      	beq.n	80063f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a11      	ldr	r2, [pc, #68]	@ (8006438 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d10c      	bne.n	8006410 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	4313      	orrs	r3, r2
 8006406:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	40012c00 	.word	0x40012c00
 8006434:	40013400 	.word	0x40013400
 8006438:	40015000 	.word	0x40015000
 800643c:	40000400 	.word	0x40000400
 8006440:	40000800 	.word	0x40000800
 8006444:	40000c00 	.word	0x40000c00
 8006448:	40014000 	.word	0x40014000

0800644c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006464:	2302      	movs	r3, #2
 8006466:	e096      	b.n	8006596 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	4313      	orrs	r3, r2
 800647c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	4313      	orrs	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	041b      	lsls	r3, r3, #16
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a2f      	ldr	r2, [pc, #188]	@ (80065a4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d009      	beq.n	8006500 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a2d      	ldr	r2, [pc, #180]	@ (80065a8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d004      	beq.n	8006500 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a2c      	ldr	r2, [pc, #176]	@ (80065ac <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d106      	bne.n	800650e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	4313      	orrs	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a24      	ldr	r2, [pc, #144]	@ (80065a4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d009      	beq.n	800652c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a22      	ldr	r2, [pc, #136]	@ (80065a8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d004      	beq.n	800652c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a21      	ldr	r2, [pc, #132]	@ (80065ac <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d12b      	bne.n	8006584 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006536:	051b      	lsls	r3, r3, #20
 8006538:	4313      	orrs	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	4313      	orrs	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006554:	4313      	orrs	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a11      	ldr	r2, [pc, #68]	@ (80065a4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d009      	beq.n	8006576 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a10      	ldr	r2, [pc, #64]	@ (80065a8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d004      	beq.n	8006576 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a0e      	ldr	r2, [pc, #56]	@ (80065ac <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d106      	bne.n	8006584 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006580:	4313      	orrs	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	40012c00 	.word	0x40012c00
 80065a8:	40013400 	.word	0x40013400
 80065ac:	40015000 	.word	0x40015000

080065b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f003 031f 	and.w	r3, r3, #31
 800664e:	2204      	movs	r2, #4
 8006650:	fa02 f303 	lsl.w	r3, r2, r3
 8006654:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a1a      	ldr	r2, [r3, #32]
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	43db      	mvns	r3, r3
 800665e:	401a      	ands	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a1a      	ldr	r2, [r3, #32]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f003 031f 	and.w	r3, r3, #31
 800666e:	6879      	ldr	r1, [r7, #4]
 8006670:	fa01 f303 	lsl.w	r3, r1, r3
 8006674:	431a      	orrs	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	621a      	str	r2, [r3, #32]
}
 800667a:	bf00      	nop
 800667c:	371c      	adds	r7, #28
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b082      	sub	sp, #8
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d101      	bne.n	8006698 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e042      	b.n	800671e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d106      	bne.n	80066b0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7fb fc32 	bl	8001f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2224      	movs	r2, #36	@ 0x24
 80066b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0201 	bic.w	r2, r2, #1
 80066c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 fc51 	bl	8006f70 <UART_SetConfig>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d101      	bne.n	80066d8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e022      	b.n	800671e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 ff41 	bl	8007568 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006704:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f042 0201 	orr.w	r2, r2, #1
 8006714:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 ffc8 	bl	80076ac <UART_CheckIdleState>
 800671c:	4603      	mov	r3, r0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b08a      	sub	sp, #40	@ 0x28
 800672a:	af02      	add	r7, sp, #8
 800672c:	60f8      	str	r0, [r7, #12]
 800672e:	60b9      	str	r1, [r7, #8]
 8006730:	603b      	str	r3, [r7, #0]
 8006732:	4613      	mov	r3, r2
 8006734:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800673c:	2b20      	cmp	r3, #32
 800673e:	f040 8083 	bne.w	8006848 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <HAL_UART_Transmit+0x28>
 8006748:	88fb      	ldrh	r3, [r7, #6]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e07b      	b.n	800684a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006758:	2b01      	cmp	r3, #1
 800675a:	d101      	bne.n	8006760 <HAL_UART_Transmit+0x3a>
 800675c:	2302      	movs	r3, #2
 800675e:	e074      	b.n	800684a <HAL_UART_Transmit+0x124>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2221      	movs	r2, #33	@ 0x21
 8006774:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006778:	f7fb fe1a 	bl	80023b0 <HAL_GetTick>
 800677c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	88fa      	ldrh	r2, [r7, #6]
 8006782:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	88fa      	ldrh	r2, [r7, #6]
 800678a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006796:	d108      	bne.n	80067aa <HAL_UART_Transmit+0x84>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80067a0:	2300      	movs	r3, #0
 80067a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	61bb      	str	r3, [r7, #24]
 80067a8:	e003      	b.n	80067b2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 80067ba:	e02c      	b.n	8006816 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	2200      	movs	r2, #0
 80067c4:	2180      	movs	r1, #128	@ 0x80
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 ffbb 	bl	8007742 <UART_WaitOnFlagUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e039      	b.n	800684a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10b      	bne.n	80067f4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	461a      	mov	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067ea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	3302      	adds	r3, #2
 80067f0:	61bb      	str	r3, [r7, #24]
 80067f2:	e007      	b.n	8006804 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	781a      	ldrb	r2, [r3, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	3301      	adds	r3, #1
 8006802:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800680a:	b29b      	uxth	r3, r3
 800680c:	3b01      	subs	r3, #1
 800680e:	b29a      	uxth	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1cc      	bne.n	80067bc <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2200      	movs	r2, #0
 800682a:	2140      	movs	r1, #64	@ 0x40
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 ff88 	bl	8007742 <UART_WaitOnFlagUntilTimeout>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e006      	b.n	800684a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2220      	movs	r2, #32
 8006840:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	e000      	b.n	800684a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006848:	2302      	movs	r3, #2
  }
}
 800684a:	4618      	mov	r0, r3
 800684c:	3720      	adds	r7, #32
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b08a      	sub	sp, #40	@ 0x28
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	4613      	mov	r3, r2
 8006860:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006868:	2b20      	cmp	r3, #32
 800686a:	d142      	bne.n	80068f2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <HAL_UART_Receive_IT+0x24>
 8006872:	88fb      	ldrh	r3, [r7, #6]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e03b      	b.n	80068f4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006882:	2b01      	cmp	r3, #1
 8006884:	d101      	bne.n	800688a <HAL_UART_Receive_IT+0x36>
 8006886:	2302      	movs	r3, #2
 8006888:	e034      	b.n	80068f4 <HAL_UART_Receive_IT+0xa0>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a17      	ldr	r2, [pc, #92]	@ (80068fc <HAL_UART_Receive_IT+0xa8>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d01f      	beq.n	80068e2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d018      	beq.n	80068e2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	e853 3f00 	ldrex	r3, [r3]
 80068bc:	613b      	str	r3, [r7, #16]
   return(result);
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80068c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	461a      	mov	r2, r3
 80068cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ce:	623b      	str	r3, [r7, #32]
 80068d0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d2:	69f9      	ldr	r1, [r7, #28]
 80068d4:	6a3a      	ldr	r2, [r7, #32]
 80068d6:	e841 2300 	strex	r3, r2, [r1]
 80068da:	61bb      	str	r3, [r7, #24]
   return(result);
 80068dc:	69bb      	ldr	r3, [r7, #24]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1e6      	bne.n	80068b0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80068e2:	88fb      	ldrh	r3, [r7, #6]
 80068e4:	461a      	mov	r2, r3
 80068e6:	68b9      	ldr	r1, [r7, #8]
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 fff3 	bl	80078d4 <UART_Start_Receive_IT>
 80068ee:	4603      	mov	r3, r0
 80068f0:	e000      	b.n	80068f4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80068f2:	2302      	movs	r3, #2
  }
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3728      	adds	r7, #40	@ 0x28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	40008000 	.word	0x40008000

08006900 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b0ba      	sub	sp, #232	@ 0xe8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006926:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800692a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800692e:	4013      	ands	r3, r2
 8006930:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006934:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006938:	2b00      	cmp	r3, #0
 800693a:	d11b      	bne.n	8006974 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800693c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006940:	f003 0320 	and.w	r3, r3, #32
 8006944:	2b00      	cmp	r3, #0
 8006946:	d015      	beq.n	8006974 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800694c:	f003 0320 	and.w	r3, r3, #32
 8006950:	2b00      	cmp	r3, #0
 8006952:	d105      	bne.n	8006960 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d009      	beq.n	8006974 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 82d6 	beq.w	8006f16 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	4798      	blx	r3
      }
      return;
 8006972:	e2d0      	b.n	8006f16 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006974:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 811f 	beq.w	8006bbc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800697e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006982:	4b8b      	ldr	r3, [pc, #556]	@ (8006bb0 <HAL_UART_IRQHandler+0x2b0>)
 8006984:	4013      	ands	r3, r2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d106      	bne.n	8006998 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800698a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800698e:	4b89      	ldr	r3, [pc, #548]	@ (8006bb4 <HAL_UART_IRQHandler+0x2b4>)
 8006990:	4013      	ands	r3, r2
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 8112 	beq.w	8006bbc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d011      	beq.n	80069c8 <HAL_UART_IRQHandler+0xc8>
 80069a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00b      	beq.n	80069c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2201      	movs	r2, #1
 80069b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069be:	f043 0201 	orr.w	r2, r3, #1
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d011      	beq.n	80069f8 <HAL_UART_IRQHandler+0xf8>
 80069d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00b      	beq.n	80069f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2202      	movs	r2, #2
 80069e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069ee:	f043 0204 	orr.w	r2, r3, #4
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d011      	beq.n	8006a28 <HAL_UART_IRQHandler+0x128>
 8006a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00b      	beq.n	8006a28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2204      	movs	r2, #4
 8006a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a1e:	f043 0202 	orr.w	r2, r3, #2
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a2c:	f003 0308 	and.w	r3, r3, #8
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d017      	beq.n	8006a64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a38:	f003 0320 	and.w	r3, r3, #32
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d105      	bne.n	8006a4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006a40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006a44:	4b5a      	ldr	r3, [pc, #360]	@ (8006bb0 <HAL_UART_IRQHandler+0x2b0>)
 8006a46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00b      	beq.n	8006a64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2208      	movs	r2, #8
 8006a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a5a:	f043 0208 	orr.w	r2, r3, #8
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d012      	beq.n	8006a96 <HAL_UART_IRQHandler+0x196>
 8006a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00c      	beq.n	8006a96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a8c:	f043 0220 	orr.w	r2, r3, #32
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 823c 	beq.w	8006f1a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aa6:	f003 0320 	and.w	r3, r3, #32
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d013      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ab2:	f003 0320 	and.w	r3, r3, #32
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d105      	bne.n	8006ac6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d007      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006adc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aea:	2b40      	cmp	r3, #64	@ 0x40
 8006aec:	d005      	beq.n	8006afa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006af2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d04f      	beq.n	8006b9a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f001 f814 	bl	8007b28 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b0a:	2b40      	cmp	r3, #64	@ 0x40
 8006b0c:	d141      	bne.n	8006b92 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3308      	adds	r3, #8
 8006b14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3308      	adds	r3, #8
 8006b36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006b3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006b46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006b52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1d9      	bne.n	8006b0e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d013      	beq.n	8006b8a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b66:	4a14      	ldr	r2, [pc, #80]	@ (8006bb8 <HAL_UART_IRQHandler+0x2b8>)
 8006b68:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fc fe6d 	bl	800384e <HAL_DMA_Abort_IT>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d017      	beq.n	8006baa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8006b84:	4610      	mov	r0, r2
 8006b86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b88:	e00f      	b.n	8006baa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f9da 	bl	8006f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b90:	e00b      	b.n	8006baa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f9d6 	bl	8006f44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b98:	e007      	b.n	8006baa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f9d2 	bl	8006f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8006ba8:	e1b7      	b.n	8006f1a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006baa:	bf00      	nop
    return;
 8006bac:	e1b5      	b.n	8006f1a <HAL_UART_IRQHandler+0x61a>
 8006bae:	bf00      	nop
 8006bb0:	10000001 	.word	0x10000001
 8006bb4:	04000120 	.word	0x04000120
 8006bb8:	08007bf5 	.word	0x08007bf5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	f040 814a 	bne.w	8006e5a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bca:	f003 0310 	and.w	r3, r3, #16
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 8143 	beq.w	8006e5a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bd8:	f003 0310 	and.w	r3, r3, #16
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 813c 	beq.w	8006e5a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2210      	movs	r2, #16
 8006be8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf4:	2b40      	cmp	r3, #64	@ 0x40
 8006bf6:	f040 80b5 	bne.w	8006d64 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 8187 	beq.w	8006f1e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	f080 817f 	bcs.w	8006f1e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c26:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0320 	and.w	r3, r3, #32
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f040 8086 	bne.w	8006d48 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c48:	e853 3f00 	ldrex	r3, [r3]
 8006c4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	461a      	mov	r2, r3
 8006c62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c6a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c76:	e841 2300 	strex	r3, r2, [r1]
 8006c7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1da      	bne.n	8006c3c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3308      	adds	r3, #8
 8006c8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c90:	e853 3f00 	ldrex	r3, [r3]
 8006c94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c98:	f023 0301 	bic.w	r3, r3, #1
 8006c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006caa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006cae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006cb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006cbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1e1      	bne.n	8006c86 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3308      	adds	r3, #8
 8006cc8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ccc:	e853 3f00 	ldrex	r3, [r3]
 8006cd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006cd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3308      	adds	r3, #8
 8006ce2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ce6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ce8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006cec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006cee:	e841 2300 	strex	r3, r2, [r1]
 8006cf2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006cf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e3      	bne.n	8006cc2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d10:	e853 3f00 	ldrex	r3, [r3]
 8006d14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d18:	f023 0310 	bic.w	r3, r3, #16
 8006d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	461a      	mov	r2, r3
 8006d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d2c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e4      	bne.n	8006d08 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fc fd2a 	bl	800379c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f8fb 	bl	8006f58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d62:	e0dc      	b.n	8006f1e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 80ce 	beq.w	8006f22 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006d86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f000 80c9 	beq.w	8006f22 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006da4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	461a      	mov	r2, r3
 8006dae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006db2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006db4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006db8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dba:	e841 2300 	strex	r3, r2, [r1]
 8006dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1e4      	bne.n	8006d90 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3308      	adds	r3, #8
 8006dcc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd0:	e853 3f00 	ldrex	r3, [r3]
 8006dd4:	623b      	str	r3, [r7, #32]
   return(result);
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ddc:	f023 0301 	bic.w	r3, r3, #1
 8006de0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	3308      	adds	r3, #8
 8006dea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006dee:	633a      	str	r2, [r7, #48]	@ 0x30
 8006df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006df4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006df6:	e841 2300 	strex	r3, r2, [r1]
 8006dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1e1      	bne.n	8006dc6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	e853 3f00 	ldrex	r3, [r3]
 8006e22:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 0310 	bic.w	r3, r3, #16
 8006e2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	461a      	mov	r2, r3
 8006e34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e38:	61fb      	str	r3, [r7, #28]
 8006e3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3c:	69b9      	ldr	r1, [r7, #24]
 8006e3e:	69fa      	ldr	r2, [r7, #28]
 8006e40:	e841 2300 	strex	r3, r2, [r1]
 8006e44:	617b      	str	r3, [r7, #20]
   return(result);
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1e4      	bne.n	8006e16 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f880 	bl	8006f58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e58:	e063      	b.n	8006f22 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00e      	beq.n	8006e84 <HAL_UART_IRQHandler+0x584>
 8006e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d008      	beq.n	8006e84 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006e7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 fb57 	bl	8008530 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e82:	e051      	b.n	8006f28 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d014      	beq.n	8006eba <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d105      	bne.n	8006ea8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ea0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d008      	beq.n	8006eba <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d03a      	beq.n	8006f26 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	4798      	blx	r3
    }
    return;
 8006eb8:	e035      	b.n	8006f26 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d009      	beq.n	8006eda <HAL_UART_IRQHandler+0x5da>
 8006ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d003      	beq.n	8006eda <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fea4 	bl	8007c20 <UART_EndTransmit_IT>
    return;
 8006ed8:	e026      	b.n	8006f28 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ede:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d009      	beq.n	8006efa <HAL_UART_IRQHandler+0x5fa>
 8006ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f001 fb30 	bl	8008558 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ef8:	e016      	b.n	8006f28 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006efe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d010      	beq.n	8006f28 <HAL_UART_IRQHandler+0x628>
 8006f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	da0c      	bge.n	8006f28 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 fb18 	bl	8008544 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f14:	e008      	b.n	8006f28 <HAL_UART_IRQHandler+0x628>
      return;
 8006f16:	bf00      	nop
 8006f18:	e006      	b.n	8006f28 <HAL_UART_IRQHandler+0x628>
    return;
 8006f1a:	bf00      	nop
 8006f1c:	e004      	b.n	8006f28 <HAL_UART_IRQHandler+0x628>
      return;
 8006f1e:	bf00      	nop
 8006f20:	e002      	b.n	8006f28 <HAL_UART_IRQHandler+0x628>
      return;
 8006f22:	bf00      	nop
 8006f24:	e000      	b.n	8006f28 <HAL_UART_IRQHandler+0x628>
    return;
 8006f26:	bf00      	nop
  }
}
 8006f28:	37e8      	adds	r7, #232	@ 0xe8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop

08006f30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	460b      	mov	r3, r1
 8006f62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f74:	b08c      	sub	sp, #48	@ 0x30
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	689a      	ldr	r2, [r3, #8]
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	4baa      	ldr	r3, [pc, #680]	@ (8007248 <UART_SetConfig+0x2d8>)
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	6812      	ldr	r2, [r2, #0]
 8006fa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fa8:	430b      	orrs	r3, r1
 8006faa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	68da      	ldr	r2, [r3, #12]
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a9f      	ldr	r2, [pc, #636]	@ (800724c <UART_SetConfig+0x2dc>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d004      	beq.n	8006fdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006fe6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	6812      	ldr	r2, [r2, #0]
 8006fee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ff0:	430b      	orrs	r3, r1
 8006ff2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffa:	f023 010f 	bic.w	r1, r3, #15
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a90      	ldr	r2, [pc, #576]	@ (8007250 <UART_SetConfig+0x2e0>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d125      	bne.n	8007060 <UART_SetConfig+0xf0>
 8007014:	4b8f      	ldr	r3, [pc, #572]	@ (8007254 <UART_SetConfig+0x2e4>)
 8007016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800701a:	f003 0303 	and.w	r3, r3, #3
 800701e:	2b03      	cmp	r3, #3
 8007020:	d81a      	bhi.n	8007058 <UART_SetConfig+0xe8>
 8007022:	a201      	add	r2, pc, #4	@ (adr r2, 8007028 <UART_SetConfig+0xb8>)
 8007024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007028:	08007039 	.word	0x08007039
 800702c:	08007049 	.word	0x08007049
 8007030:	08007041 	.word	0x08007041
 8007034:	08007051 	.word	0x08007051
 8007038:	2301      	movs	r3, #1
 800703a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800703e:	e116      	b.n	800726e <UART_SetConfig+0x2fe>
 8007040:	2302      	movs	r3, #2
 8007042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007046:	e112      	b.n	800726e <UART_SetConfig+0x2fe>
 8007048:	2304      	movs	r3, #4
 800704a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800704e:	e10e      	b.n	800726e <UART_SetConfig+0x2fe>
 8007050:	2308      	movs	r3, #8
 8007052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007056:	e10a      	b.n	800726e <UART_SetConfig+0x2fe>
 8007058:	2310      	movs	r3, #16
 800705a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800705e:	e106      	b.n	800726e <UART_SetConfig+0x2fe>
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a7c      	ldr	r2, [pc, #496]	@ (8007258 <UART_SetConfig+0x2e8>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d138      	bne.n	80070dc <UART_SetConfig+0x16c>
 800706a:	4b7a      	ldr	r3, [pc, #488]	@ (8007254 <UART_SetConfig+0x2e4>)
 800706c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007070:	f003 030c 	and.w	r3, r3, #12
 8007074:	2b0c      	cmp	r3, #12
 8007076:	d82d      	bhi.n	80070d4 <UART_SetConfig+0x164>
 8007078:	a201      	add	r2, pc, #4	@ (adr r2, 8007080 <UART_SetConfig+0x110>)
 800707a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707e:	bf00      	nop
 8007080:	080070b5 	.word	0x080070b5
 8007084:	080070d5 	.word	0x080070d5
 8007088:	080070d5 	.word	0x080070d5
 800708c:	080070d5 	.word	0x080070d5
 8007090:	080070c5 	.word	0x080070c5
 8007094:	080070d5 	.word	0x080070d5
 8007098:	080070d5 	.word	0x080070d5
 800709c:	080070d5 	.word	0x080070d5
 80070a0:	080070bd 	.word	0x080070bd
 80070a4:	080070d5 	.word	0x080070d5
 80070a8:	080070d5 	.word	0x080070d5
 80070ac:	080070d5 	.word	0x080070d5
 80070b0:	080070cd 	.word	0x080070cd
 80070b4:	2300      	movs	r3, #0
 80070b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ba:	e0d8      	b.n	800726e <UART_SetConfig+0x2fe>
 80070bc:	2302      	movs	r3, #2
 80070be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070c2:	e0d4      	b.n	800726e <UART_SetConfig+0x2fe>
 80070c4:	2304      	movs	r3, #4
 80070c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ca:	e0d0      	b.n	800726e <UART_SetConfig+0x2fe>
 80070cc:	2308      	movs	r3, #8
 80070ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070d2:	e0cc      	b.n	800726e <UART_SetConfig+0x2fe>
 80070d4:	2310      	movs	r3, #16
 80070d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070da:	e0c8      	b.n	800726e <UART_SetConfig+0x2fe>
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a5e      	ldr	r2, [pc, #376]	@ (800725c <UART_SetConfig+0x2ec>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d125      	bne.n	8007132 <UART_SetConfig+0x1c2>
 80070e6:	4b5b      	ldr	r3, [pc, #364]	@ (8007254 <UART_SetConfig+0x2e4>)
 80070e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80070f0:	2b30      	cmp	r3, #48	@ 0x30
 80070f2:	d016      	beq.n	8007122 <UART_SetConfig+0x1b2>
 80070f4:	2b30      	cmp	r3, #48	@ 0x30
 80070f6:	d818      	bhi.n	800712a <UART_SetConfig+0x1ba>
 80070f8:	2b20      	cmp	r3, #32
 80070fa:	d00a      	beq.n	8007112 <UART_SetConfig+0x1a2>
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	d814      	bhi.n	800712a <UART_SetConfig+0x1ba>
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <UART_SetConfig+0x19a>
 8007104:	2b10      	cmp	r3, #16
 8007106:	d008      	beq.n	800711a <UART_SetConfig+0x1aa>
 8007108:	e00f      	b.n	800712a <UART_SetConfig+0x1ba>
 800710a:	2300      	movs	r3, #0
 800710c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007110:	e0ad      	b.n	800726e <UART_SetConfig+0x2fe>
 8007112:	2302      	movs	r3, #2
 8007114:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007118:	e0a9      	b.n	800726e <UART_SetConfig+0x2fe>
 800711a:	2304      	movs	r3, #4
 800711c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007120:	e0a5      	b.n	800726e <UART_SetConfig+0x2fe>
 8007122:	2308      	movs	r3, #8
 8007124:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007128:	e0a1      	b.n	800726e <UART_SetConfig+0x2fe>
 800712a:	2310      	movs	r3, #16
 800712c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007130:	e09d      	b.n	800726e <UART_SetConfig+0x2fe>
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a4a      	ldr	r2, [pc, #296]	@ (8007260 <UART_SetConfig+0x2f0>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d125      	bne.n	8007188 <UART_SetConfig+0x218>
 800713c:	4b45      	ldr	r3, [pc, #276]	@ (8007254 <UART_SetConfig+0x2e4>)
 800713e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007142:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007146:	2bc0      	cmp	r3, #192	@ 0xc0
 8007148:	d016      	beq.n	8007178 <UART_SetConfig+0x208>
 800714a:	2bc0      	cmp	r3, #192	@ 0xc0
 800714c:	d818      	bhi.n	8007180 <UART_SetConfig+0x210>
 800714e:	2b80      	cmp	r3, #128	@ 0x80
 8007150:	d00a      	beq.n	8007168 <UART_SetConfig+0x1f8>
 8007152:	2b80      	cmp	r3, #128	@ 0x80
 8007154:	d814      	bhi.n	8007180 <UART_SetConfig+0x210>
 8007156:	2b00      	cmp	r3, #0
 8007158:	d002      	beq.n	8007160 <UART_SetConfig+0x1f0>
 800715a:	2b40      	cmp	r3, #64	@ 0x40
 800715c:	d008      	beq.n	8007170 <UART_SetConfig+0x200>
 800715e:	e00f      	b.n	8007180 <UART_SetConfig+0x210>
 8007160:	2300      	movs	r3, #0
 8007162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007166:	e082      	b.n	800726e <UART_SetConfig+0x2fe>
 8007168:	2302      	movs	r3, #2
 800716a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800716e:	e07e      	b.n	800726e <UART_SetConfig+0x2fe>
 8007170:	2304      	movs	r3, #4
 8007172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007176:	e07a      	b.n	800726e <UART_SetConfig+0x2fe>
 8007178:	2308      	movs	r3, #8
 800717a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800717e:	e076      	b.n	800726e <UART_SetConfig+0x2fe>
 8007180:	2310      	movs	r3, #16
 8007182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007186:	e072      	b.n	800726e <UART_SetConfig+0x2fe>
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a35      	ldr	r2, [pc, #212]	@ (8007264 <UART_SetConfig+0x2f4>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d12a      	bne.n	80071e8 <UART_SetConfig+0x278>
 8007192:	4b30      	ldr	r3, [pc, #192]	@ (8007254 <UART_SetConfig+0x2e4>)
 8007194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007198:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800719c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071a0:	d01a      	beq.n	80071d8 <UART_SetConfig+0x268>
 80071a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071a6:	d81b      	bhi.n	80071e0 <UART_SetConfig+0x270>
 80071a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071ac:	d00c      	beq.n	80071c8 <UART_SetConfig+0x258>
 80071ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071b2:	d815      	bhi.n	80071e0 <UART_SetConfig+0x270>
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <UART_SetConfig+0x250>
 80071b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071bc:	d008      	beq.n	80071d0 <UART_SetConfig+0x260>
 80071be:	e00f      	b.n	80071e0 <UART_SetConfig+0x270>
 80071c0:	2300      	movs	r3, #0
 80071c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071c6:	e052      	b.n	800726e <UART_SetConfig+0x2fe>
 80071c8:	2302      	movs	r3, #2
 80071ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ce:	e04e      	b.n	800726e <UART_SetConfig+0x2fe>
 80071d0:	2304      	movs	r3, #4
 80071d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071d6:	e04a      	b.n	800726e <UART_SetConfig+0x2fe>
 80071d8:	2308      	movs	r3, #8
 80071da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071de:	e046      	b.n	800726e <UART_SetConfig+0x2fe>
 80071e0:	2310      	movs	r3, #16
 80071e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e6:	e042      	b.n	800726e <UART_SetConfig+0x2fe>
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a17      	ldr	r2, [pc, #92]	@ (800724c <UART_SetConfig+0x2dc>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d13a      	bne.n	8007268 <UART_SetConfig+0x2f8>
 80071f2:	4b18      	ldr	r3, [pc, #96]	@ (8007254 <UART_SetConfig+0x2e4>)
 80071f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80071fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007200:	d01a      	beq.n	8007238 <UART_SetConfig+0x2c8>
 8007202:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007206:	d81b      	bhi.n	8007240 <UART_SetConfig+0x2d0>
 8007208:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800720c:	d00c      	beq.n	8007228 <UART_SetConfig+0x2b8>
 800720e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007212:	d815      	bhi.n	8007240 <UART_SetConfig+0x2d0>
 8007214:	2b00      	cmp	r3, #0
 8007216:	d003      	beq.n	8007220 <UART_SetConfig+0x2b0>
 8007218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800721c:	d008      	beq.n	8007230 <UART_SetConfig+0x2c0>
 800721e:	e00f      	b.n	8007240 <UART_SetConfig+0x2d0>
 8007220:	2300      	movs	r3, #0
 8007222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007226:	e022      	b.n	800726e <UART_SetConfig+0x2fe>
 8007228:	2302      	movs	r3, #2
 800722a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800722e:	e01e      	b.n	800726e <UART_SetConfig+0x2fe>
 8007230:	2304      	movs	r3, #4
 8007232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007236:	e01a      	b.n	800726e <UART_SetConfig+0x2fe>
 8007238:	2308      	movs	r3, #8
 800723a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800723e:	e016      	b.n	800726e <UART_SetConfig+0x2fe>
 8007240:	2310      	movs	r3, #16
 8007242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007246:	e012      	b.n	800726e <UART_SetConfig+0x2fe>
 8007248:	cfff69f3 	.word	0xcfff69f3
 800724c:	40008000 	.word	0x40008000
 8007250:	40013800 	.word	0x40013800
 8007254:	40021000 	.word	0x40021000
 8007258:	40004400 	.word	0x40004400
 800725c:	40004800 	.word	0x40004800
 8007260:	40004c00 	.word	0x40004c00
 8007264:	40005000 	.word	0x40005000
 8007268:	2310      	movs	r3, #16
 800726a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4aae      	ldr	r2, [pc, #696]	@ (800752c <UART_SetConfig+0x5bc>)
 8007274:	4293      	cmp	r3, r2
 8007276:	f040 8097 	bne.w	80073a8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800727a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800727e:	2b08      	cmp	r3, #8
 8007280:	d823      	bhi.n	80072ca <UART_SetConfig+0x35a>
 8007282:	a201      	add	r2, pc, #4	@ (adr r2, 8007288 <UART_SetConfig+0x318>)
 8007284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007288:	080072ad 	.word	0x080072ad
 800728c:	080072cb 	.word	0x080072cb
 8007290:	080072b5 	.word	0x080072b5
 8007294:	080072cb 	.word	0x080072cb
 8007298:	080072bb 	.word	0x080072bb
 800729c:	080072cb 	.word	0x080072cb
 80072a0:	080072cb 	.word	0x080072cb
 80072a4:	080072cb 	.word	0x080072cb
 80072a8:	080072c3 	.word	0x080072c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072ac:	f7fd fa6a 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 80072b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072b2:	e010      	b.n	80072d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072b4:	4b9e      	ldr	r3, [pc, #632]	@ (8007530 <UART_SetConfig+0x5c0>)
 80072b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072b8:	e00d      	b.n	80072d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ba:	f7fd f9f5 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 80072be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072c0:	e009      	b.n	80072d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072c8:	e005      	b.n	80072d6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80072d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f000 8130 	beq.w	800753e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e2:	4a94      	ldr	r2, [pc, #592]	@ (8007534 <UART_SetConfig+0x5c4>)
 80072e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072e8:	461a      	mov	r2, r3
 80072ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80072f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	4613      	mov	r3, r2
 80072f8:	005b      	lsls	r3, r3, #1
 80072fa:	4413      	add	r3, r2
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d305      	bcc.n	800730e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007308:	69ba      	ldr	r2, [r7, #24]
 800730a:	429a      	cmp	r2, r3
 800730c:	d903      	bls.n	8007316 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007314:	e113      	b.n	800753e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007318:	2200      	movs	r2, #0
 800731a:	60bb      	str	r3, [r7, #8]
 800731c:	60fa      	str	r2, [r7, #12]
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007322:	4a84      	ldr	r2, [pc, #528]	@ (8007534 <UART_SetConfig+0x5c4>)
 8007324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007328:	b29b      	uxth	r3, r3
 800732a:	2200      	movs	r2, #0
 800732c:	603b      	str	r3, [r7, #0]
 800732e:	607a      	str	r2, [r7, #4]
 8007330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007334:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007338:	f7f9 fc78 	bl	8000c2c <__aeabi_uldivmod>
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	4610      	mov	r0, r2
 8007342:	4619      	mov	r1, r3
 8007344:	f04f 0200 	mov.w	r2, #0
 8007348:	f04f 0300 	mov.w	r3, #0
 800734c:	020b      	lsls	r3, r1, #8
 800734e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007352:	0202      	lsls	r2, r0, #8
 8007354:	6979      	ldr	r1, [r7, #20]
 8007356:	6849      	ldr	r1, [r1, #4]
 8007358:	0849      	lsrs	r1, r1, #1
 800735a:	2000      	movs	r0, #0
 800735c:	460c      	mov	r4, r1
 800735e:	4605      	mov	r5, r0
 8007360:	eb12 0804 	adds.w	r8, r2, r4
 8007364:	eb43 0905 	adc.w	r9, r3, r5
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	469a      	mov	sl, r3
 8007370:	4693      	mov	fp, r2
 8007372:	4652      	mov	r2, sl
 8007374:	465b      	mov	r3, fp
 8007376:	4640      	mov	r0, r8
 8007378:	4649      	mov	r1, r9
 800737a:	f7f9 fc57 	bl	8000c2c <__aeabi_uldivmod>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	4613      	mov	r3, r2
 8007384:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800738c:	d308      	bcc.n	80073a0 <UART_SetConfig+0x430>
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007394:	d204      	bcs.n	80073a0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6a3a      	ldr	r2, [r7, #32]
 800739c:	60da      	str	r2, [r3, #12]
 800739e:	e0ce      	b.n	800753e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80073a6:	e0ca      	b.n	800753e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073b0:	d166      	bne.n	8007480 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80073b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80073b6:	2b08      	cmp	r3, #8
 80073b8:	d827      	bhi.n	800740a <UART_SetConfig+0x49a>
 80073ba:	a201      	add	r2, pc, #4	@ (adr r2, 80073c0 <UART_SetConfig+0x450>)
 80073bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c0:	080073e5 	.word	0x080073e5
 80073c4:	080073ed 	.word	0x080073ed
 80073c8:	080073f5 	.word	0x080073f5
 80073cc:	0800740b 	.word	0x0800740b
 80073d0:	080073fb 	.word	0x080073fb
 80073d4:	0800740b 	.word	0x0800740b
 80073d8:	0800740b 	.word	0x0800740b
 80073dc:	0800740b 	.word	0x0800740b
 80073e0:	08007403 	.word	0x08007403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073e4:	f7fd f9ce 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 80073e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073ea:	e014      	b.n	8007416 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073ec:	f7fd f9e0 	bl	80047b0 <HAL_RCC_GetPCLK2Freq>
 80073f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80073f2:	e010      	b.n	8007416 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073f4:	4b4e      	ldr	r3, [pc, #312]	@ (8007530 <UART_SetConfig+0x5c0>)
 80073f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80073f8:	e00d      	b.n	8007416 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073fa:	f7fd f955 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 80073fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007400:	e009      	b.n	8007416 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007402:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007406:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007408:	e005      	b.n	8007416 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007414:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 8090 	beq.w	800753e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007422:	4a44      	ldr	r2, [pc, #272]	@ (8007534 <UART_SetConfig+0x5c4>)
 8007424:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007428:	461a      	mov	r2, r3
 800742a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007430:	005a      	lsls	r2, r3, #1
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	085b      	lsrs	r3, r3, #1
 8007438:	441a      	add	r2, r3
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007442:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	2b0f      	cmp	r3, #15
 8007448:	d916      	bls.n	8007478 <UART_SetConfig+0x508>
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007450:	d212      	bcs.n	8007478 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	b29b      	uxth	r3, r3
 8007456:	f023 030f 	bic.w	r3, r3, #15
 800745a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	085b      	lsrs	r3, r3, #1
 8007460:	b29b      	uxth	r3, r3
 8007462:	f003 0307 	and.w	r3, r3, #7
 8007466:	b29a      	uxth	r2, r3
 8007468:	8bfb      	ldrh	r3, [r7, #30]
 800746a:	4313      	orrs	r3, r2
 800746c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	8bfa      	ldrh	r2, [r7, #30]
 8007474:	60da      	str	r2, [r3, #12]
 8007476:	e062      	b.n	800753e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800747e:	e05e      	b.n	800753e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007480:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007484:	2b08      	cmp	r3, #8
 8007486:	d828      	bhi.n	80074da <UART_SetConfig+0x56a>
 8007488:	a201      	add	r2, pc, #4	@ (adr r2, 8007490 <UART_SetConfig+0x520>)
 800748a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800748e:	bf00      	nop
 8007490:	080074b5 	.word	0x080074b5
 8007494:	080074bd 	.word	0x080074bd
 8007498:	080074c5 	.word	0x080074c5
 800749c:	080074db 	.word	0x080074db
 80074a0:	080074cb 	.word	0x080074cb
 80074a4:	080074db 	.word	0x080074db
 80074a8:	080074db 	.word	0x080074db
 80074ac:	080074db 	.word	0x080074db
 80074b0:	080074d3 	.word	0x080074d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074b4:	f7fd f966 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 80074b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074ba:	e014      	b.n	80074e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074bc:	f7fd f978 	bl	80047b0 <HAL_RCC_GetPCLK2Freq>
 80074c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074c2:	e010      	b.n	80074e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074c4:	4b1a      	ldr	r3, [pc, #104]	@ (8007530 <UART_SetConfig+0x5c0>)
 80074c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074c8:	e00d      	b.n	80074e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074ca:	f7fd f8ed 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 80074ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80074d0:	e009      	b.n	80074e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80074d8:	e005      	b.n	80074e6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80074e4:	bf00      	nop
    }

    if (pclk != 0U)
 80074e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d028      	beq.n	800753e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f0:	4a10      	ldr	r2, [pc, #64]	@ (8007534 <UART_SetConfig+0x5c4>)
 80074f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074f6:	461a      	mov	r2, r3
 80074f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	085b      	lsrs	r3, r3, #1
 8007504:	441a      	add	r2, r3
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	fbb2 f3f3 	udiv	r3, r2, r3
 800750e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	2b0f      	cmp	r3, #15
 8007514:	d910      	bls.n	8007538 <UART_SetConfig+0x5c8>
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800751c:	d20c      	bcs.n	8007538 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	b29a      	uxth	r2, r3
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	60da      	str	r2, [r3, #12]
 8007528:	e009      	b.n	800753e <UART_SetConfig+0x5ce>
 800752a:	bf00      	nop
 800752c:	40008000 	.word	0x40008000
 8007530:	00f42400 	.word	0x00f42400
 8007534:	0800b594 	.word	0x0800b594
      }
      else
      {
        ret = HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2201      	movs	r2, #1
 8007542:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2201      	movs	r2, #1
 800754a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2200      	movs	r2, #0
 8007552:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	2200      	movs	r2, #0
 8007558:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 800755a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800755e:	4618      	mov	r0, r3
 8007560:	3730      	adds	r7, #48	@ 0x30
 8007562:	46bd      	mov	sp, r7
 8007564:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007574:	f003 0301 	and.w	r3, r3, #1
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00a      	beq.n	8007592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	430a      	orrs	r2, r1
 8007590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007596:	f003 0302 	and.w	r3, r3, #2
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00a      	beq.n	80075b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	430a      	orrs	r2, r1
 80075b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b8:	f003 0304 	and.w	r3, r3, #4
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00a      	beq.n	80075d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	430a      	orrs	r2, r1
 80075d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075da:	f003 0308 	and.w	r3, r3, #8
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00a      	beq.n	80075f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	430a      	orrs	r2, r1
 80075f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fc:	f003 0310 	and.w	r3, r3, #16
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00a      	beq.n	800761a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761e:	f003 0320 	and.w	r3, r3, #32
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	430a      	orrs	r2, r1
 800763a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01a      	beq.n	800767e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007662:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007666:	d10a      	bne.n	800767e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00a      	beq.n	80076a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	605a      	str	r2, [r3, #4]
  }
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af02      	add	r7, sp, #8
 80076b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076bc:	f7fa fe78 	bl	80023b0 <HAL_GetTick>
 80076c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0308 	and.w	r3, r3, #8
 80076cc:	2b08      	cmp	r3, #8
 80076ce:	d10e      	bne.n	80076ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076d4:	9300      	str	r3, [sp, #0]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f82f 	bl	8007742 <UART_WaitOnFlagUntilTimeout>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e025      	b.n	800773a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0304 	and.w	r3, r3, #4
 80076f8:	2b04      	cmp	r3, #4
 80076fa:	d10e      	bne.n	800771a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f819 	bl	8007742 <UART_WaitOnFlagUntilTimeout>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e00f      	b.n	800773a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2220      	movs	r2, #32
 800771e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2220      	movs	r2, #32
 8007726:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b09c      	sub	sp, #112	@ 0x70
 8007746:	af00      	add	r7, sp, #0
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	603b      	str	r3, [r7, #0]
 800774e:	4613      	mov	r3, r2
 8007750:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007752:	e0a9      	b.n	80078a8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007754:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007756:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800775a:	f000 80a5 	beq.w	80078a8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800775e:	f7fa fe27 	bl	80023b0 <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800776a:	429a      	cmp	r2, r3
 800776c:	d302      	bcc.n	8007774 <UART_WaitOnFlagUntilTimeout+0x32>
 800776e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007770:	2b00      	cmp	r3, #0
 8007772:	d140      	bne.n	80077f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800777c:	e853 3f00 	ldrex	r3, [r3]
 8007780:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007784:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007788:	667b      	str	r3, [r7, #100]	@ 0x64
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	461a      	mov	r2, r3
 8007790:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007792:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007794:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007796:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007798:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800779a:	e841 2300 	strex	r3, r2, [r1]
 800779e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80077a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1e6      	bne.n	8007774 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3308      	adds	r3, #8
 80077ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077b0:	e853 3f00 	ldrex	r3, [r3]
 80077b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077b8:	f023 0301 	bic.w	r3, r3, #1
 80077bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3308      	adds	r3, #8
 80077c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80077c6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80077c8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80077cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077ce:	e841 2300 	strex	r3, r2, [r1]
 80077d2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80077d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1e5      	bne.n	80077a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2220      	movs	r2, #32
 80077de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2220      	movs	r2, #32
 80077e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e069      	b.n	80078ca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0304 	and.w	r3, r3, #4
 8007800:	2b00      	cmp	r3, #0
 8007802:	d051      	beq.n	80078a8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800780e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007812:	d149      	bne.n	80078a8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800781c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007826:	e853 3f00 	ldrex	r3, [r3]
 800782a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800782c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007832:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800783c:	637b      	str	r3, [r7, #52]	@ 0x34
 800783e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007840:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007842:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007844:	e841 2300 	strex	r3, r2, [r1]
 8007848:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800784a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1e6      	bne.n	800781e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3308      	adds	r3, #8
 8007856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	e853 3f00 	ldrex	r3, [r3]
 800785e:	613b      	str	r3, [r7, #16]
   return(result);
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f023 0301 	bic.w	r3, r3, #1
 8007866:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3308      	adds	r3, #8
 800786e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007870:	623a      	str	r2, [r7, #32]
 8007872:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007874:	69f9      	ldr	r1, [r7, #28]
 8007876:	6a3a      	ldr	r2, [r7, #32]
 8007878:	e841 2300 	strex	r3, r2, [r1]
 800787c:	61bb      	str	r3, [r7, #24]
   return(result);
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1e5      	bne.n	8007850 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2220      	movs	r2, #32
 8007888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2220      	movs	r2, #32
 8007890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2220      	movs	r2, #32
 8007898:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e010      	b.n	80078ca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	69da      	ldr	r2, [r3, #28]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	4013      	ands	r3, r2
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	bf0c      	ite	eq
 80078b8:	2301      	moveq	r3, #1
 80078ba:	2300      	movne	r3, #0
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	461a      	mov	r2, r3
 80078c0:	79fb      	ldrb	r3, [r7, #7]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	f43f af46 	beq.w	8007754 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3770      	adds	r7, #112	@ 0x70
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
	...

080078d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b0a3      	sub	sp, #140	@ 0x8c
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	4613      	mov	r3, r2
 80078e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	88fa      	ldrh	r2, [r7, #6]
 80078ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	88fa      	ldrh	r2, [r7, #6]
 80078f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007906:	d10e      	bne.n	8007926 <UART_Start_Receive_IT+0x52>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d105      	bne.n	800791c <UART_Start_Receive_IT+0x48>
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007916:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800791a:	e02d      	b.n	8007978 <UART_Start_Receive_IT+0xa4>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	22ff      	movs	r2, #255	@ 0xff
 8007920:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007924:	e028      	b.n	8007978 <UART_Start_Receive_IT+0xa4>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10d      	bne.n	800794a <UART_Start_Receive_IT+0x76>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d104      	bne.n	8007940 <UART_Start_Receive_IT+0x6c>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	22ff      	movs	r2, #255	@ 0xff
 800793a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800793e:	e01b      	b.n	8007978 <UART_Start_Receive_IT+0xa4>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	227f      	movs	r2, #127	@ 0x7f
 8007944:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007948:	e016      	b.n	8007978 <UART_Start_Receive_IT+0xa4>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007952:	d10d      	bne.n	8007970 <UART_Start_Receive_IT+0x9c>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d104      	bne.n	8007966 <UART_Start_Receive_IT+0x92>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	227f      	movs	r2, #127	@ 0x7f
 8007960:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007964:	e008      	b.n	8007978 <UART_Start_Receive_IT+0xa4>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	223f      	movs	r2, #63	@ 0x3f
 800796a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800796e:	e003      	b.n	8007978 <UART_Start_Receive_IT+0xa4>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2222      	movs	r2, #34	@ 0x22
 8007984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3308      	adds	r3, #8
 800798e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007990:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007992:	e853 3f00 	ldrex	r3, [r3]
 8007996:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007998:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800799a:	f043 0301 	orr.w	r3, r3, #1
 800799e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3308      	adds	r3, #8
 80079a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80079ac:	673a      	str	r2, [r7, #112]	@ 0x70
 80079ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80079b2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80079b4:	e841 2300 	strex	r3, r2, [r1]
 80079b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80079ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1e3      	bne.n	8007988 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079c8:	d153      	bne.n	8007a72 <UART_Start_Receive_IT+0x19e>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80079d0:	88fa      	ldrh	r2, [r7, #6]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d34d      	bcc.n	8007a72 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079de:	d107      	bne.n	80079f0 <UART_Start_Receive_IT+0x11c>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d103      	bne.n	80079f0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	4a4b      	ldr	r2, [pc, #300]	@ (8007b18 <UART_Start_Receive_IT+0x244>)
 80079ec:	671a      	str	r2, [r3, #112]	@ 0x70
 80079ee:	e002      	b.n	80079f6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4a4a      	ldr	r2, [pc, #296]	@ (8007b1c <UART_Start_Receive_IT+0x248>)
 80079f4:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d01a      	beq.n	8007a3c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a0e:	e853 3f00 	ldrex	r3, [r3]
 8007a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	461a      	mov	r2, r3
 8007a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a2a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007a2e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007a30:	e841 2300 	strex	r3, r2, [r1]
 8007a34:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007a36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1e4      	bne.n	8007a06 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3308      	adds	r3, #8
 8007a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3308      	adds	r3, #8
 8007a5a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007a5c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007a5e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007a62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007a6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e5      	bne.n	8007a3c <UART_Start_Receive_IT+0x168>
 8007a70:	e04a      	b.n	8007b08 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a7a:	d107      	bne.n	8007a8c <UART_Start_Receive_IT+0x1b8>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d103      	bne.n	8007a8c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4a26      	ldr	r2, [pc, #152]	@ (8007b20 <UART_Start_Receive_IT+0x24c>)
 8007a88:	671a      	str	r2, [r3, #112]	@ 0x70
 8007a8a:	e002      	b.n	8007a92 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4a25      	ldr	r2, [pc, #148]	@ (8007b24 <UART_Start_Receive_IT+0x250>)
 8007a90:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d019      	beq.n	8007ad6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aaa:	e853 3f00 	ldrex	r3, [r3]
 8007aae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007ab6:	677b      	str	r3, [r7, #116]	@ 0x74
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	461a      	mov	r2, r3
 8007abe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ac0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ac2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007ac6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ac8:	e841 2300 	strex	r3, r2, [r1]
 8007acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1e6      	bne.n	8007aa2 <UART_Start_Receive_IT+0x1ce>
 8007ad4:	e018      	b.n	8007b08 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	e853 3f00 	ldrex	r3, [r3]
 8007ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	f043 0320 	orr.w	r3, r3, #32
 8007aea:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	461a      	mov	r2, r3
 8007af2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007af4:	623b      	str	r3, [r7, #32]
 8007af6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	69f9      	ldr	r1, [r7, #28]
 8007afa:	6a3a      	ldr	r2, [r7, #32]
 8007afc:	e841 2300 	strex	r3, r2, [r1]
 8007b00:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e6      	bne.n	8007ad6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	378c      	adds	r7, #140	@ 0x8c
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	08008231 	.word	0x08008231
 8007b1c:	08007f39 	.word	0x08007f39
 8007b20:	08007dd7 	.word	0x08007dd7
 8007b24:	08007c77 	.word	0x08007c77

08007b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b095      	sub	sp, #84	@ 0x54
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b38:	e853 3f00 	ldrex	r3, [r3]
 8007b3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b50:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b56:	e841 2300 	strex	r3, r2, [r1]
 8007b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1e6      	bne.n	8007b30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	3308      	adds	r3, #8
 8007b68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6a:	6a3b      	ldr	r3, [r7, #32]
 8007b6c:	e853 3f00 	ldrex	r3, [r3]
 8007b70:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b78:	f023 0301 	bic.w	r3, r3, #1
 8007b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3308      	adds	r3, #8
 8007b84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e3      	bne.n	8007b62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d118      	bne.n	8007bd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	e853 3f00 	ldrex	r3, [r3]
 8007bae:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	f023 0310 	bic.w	r3, r3, #16
 8007bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007bc0:	61bb      	str	r3, [r7, #24]
 8007bc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc4:	6979      	ldr	r1, [r7, #20]
 8007bc6:	69ba      	ldr	r2, [r7, #24]
 8007bc8:	e841 2300 	strex	r3, r2, [r1]
 8007bcc:	613b      	str	r3, [r7, #16]
   return(result);
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1e6      	bne.n	8007ba2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8007be8:	bf00      	nop
 8007bea:	3754      	adds	r7, #84	@ 0x54
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f7ff f996 	bl	8006f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c18:	bf00      	nop
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b088      	sub	sp, #32
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	e853 3f00 	ldrex	r3, [r3]
 8007c34:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c3c:	61fb      	str	r3, [r7, #28]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	461a      	mov	r2, r3
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	61bb      	str	r3, [r7, #24]
 8007c48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4a:	6979      	ldr	r1, [r7, #20]
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	e841 2300 	strex	r3, r2, [r1]
 8007c52:	613b      	str	r3, [r7, #16]
   return(result);
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1e6      	bne.n	8007c28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7ff f961 	bl	8006f30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c6e:	bf00      	nop
 8007c70:	3720      	adds	r7, #32
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b096      	sub	sp, #88	@ 0x58
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007c84:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c8e:	2b22      	cmp	r3, #34	@ 0x22
 8007c90:	f040 8095 	bne.w	8007dbe <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c9a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007c9e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8007ca2:	b2d9      	uxtb	r1, r3
 8007ca4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cae:	400a      	ands	r2, r1
 8007cb0:	b2d2      	uxtb	r2, r2
 8007cb2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cb8:	1c5a      	adds	r2, r3, #1
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d178      	bne.n	8007dce <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce4:	e853 3f00 	ldrex	r3, [r3]
 8007ce8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cf0:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cfc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d02:	e841 2300 	strex	r3, r2, [r1]
 8007d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1e6      	bne.n	8007cdc <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3308      	adds	r3, #8
 8007d14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d18:	e853 3f00 	ldrex	r3, [r3]
 8007d1c:	623b      	str	r3, [r7, #32]
   return(result);
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	f023 0301 	bic.w	r3, r3, #1
 8007d24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3308      	adds	r3, #8
 8007d2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e5      	bne.n	8007d0e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2220      	movs	r2, #32
 8007d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d12e      	bne.n	8007db6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f023 0310 	bic.w	r3, r3, #16
 8007d72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d7c:	61fb      	str	r3, [r7, #28]
 8007d7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d80:	69b9      	ldr	r1, [r7, #24]
 8007d82:	69fa      	ldr	r2, [r7, #28]
 8007d84:	e841 2300 	strex	r3, r2, [r1]
 8007d88:	617b      	str	r3, [r7, #20]
   return(result);
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e6      	bne.n	8007d5e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	69db      	ldr	r3, [r3, #28]
 8007d96:	f003 0310 	and.w	r3, r3, #16
 8007d9a:	2b10      	cmp	r3, #16
 8007d9c:	d103      	bne.n	8007da6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2210      	movs	r2, #16
 8007da4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007dac:	4619      	mov	r1, r3
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f7ff f8d2 	bl	8006f58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007db4:	e00b      	b.n	8007dce <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f7fa fa90 	bl	80022dc <HAL_UART_RxCpltCallback>
}
 8007dbc:	e007      	b.n	8007dce <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	699a      	ldr	r2, [r3, #24]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f042 0208 	orr.w	r2, r2, #8
 8007dcc:	619a      	str	r2, [r3, #24]
}
 8007dce:	bf00      	nop
 8007dd0:	3758      	adds	r7, #88	@ 0x58
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b096      	sub	sp, #88	@ 0x58
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007de4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dee:	2b22      	cmp	r3, #34	@ 0x22
 8007df0:	f040 8095 	bne.w	8007f1e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dfa:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e02:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e04:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8007e08:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e12:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e18:	1c9a      	adds	r2, r3, #2
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	3b01      	subs	r3, #1
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d178      	bne.n	8007f2e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e44:	e853 3f00 	ldrex	r3, [r3]
 8007e48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	461a      	mov	r2, r3
 8007e58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e5c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e62:	e841 2300 	strex	r3, r2, [r1]
 8007e66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1e6      	bne.n	8007e3c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	3308      	adds	r3, #8
 8007e74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	e853 3f00 	ldrex	r3, [r3]
 8007e7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	f023 0301 	bic.w	r3, r3, #1
 8007e84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	3308      	adds	r3, #8
 8007e8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e96:	e841 2300 	strex	r3, r2, [r1]
 8007e9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1e5      	bne.n	8007e6e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d12e      	bne.n	8007f16 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	e853 3f00 	ldrex	r3, [r3]
 8007eca:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	f023 0310 	bic.w	r3, r3, #16
 8007ed2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007edc:	61bb      	str	r3, [r7, #24]
 8007ede:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee0:	6979      	ldr	r1, [r7, #20]
 8007ee2:	69ba      	ldr	r2, [r7, #24]
 8007ee4:	e841 2300 	strex	r3, r2, [r1]
 8007ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1e6      	bne.n	8007ebe <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	69db      	ldr	r3, [r3, #28]
 8007ef6:	f003 0310 	and.w	r3, r3, #16
 8007efa:	2b10      	cmp	r3, #16
 8007efc:	d103      	bne.n	8007f06 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2210      	movs	r2, #16
 8007f04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f7ff f822 	bl	8006f58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f14:	e00b      	b.n	8007f2e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f7fa f9e0 	bl	80022dc <HAL_UART_RxCpltCallback>
}
 8007f1c:	e007      	b.n	8007f2e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	699a      	ldr	r2, [r3, #24]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f042 0208 	orr.w	r2, r2, #8
 8007f2c:	619a      	str	r2, [r3, #24]
}
 8007f2e:	bf00      	nop
 8007f30:	3758      	adds	r7, #88	@ 0x58
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b0a6      	sub	sp, #152	@ 0x98
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007f46:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	69db      	ldr	r3, [r3, #28]
 8007f50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f6e:	2b22      	cmp	r3, #34	@ 0x22
 8007f70:	f040 814f 	bne.w	8008212 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007f7a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f7e:	e0f6      	b.n	800816e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f86:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f8a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8007f8e:	b2d9      	uxtb	r1, r3
 8007f90:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f9a:	400a      	ands	r2, r1
 8007f9c:	b2d2      	uxtb	r2, r2
 8007f9e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fa4:	1c5a      	adds	r2, r3, #1
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	69db      	ldr	r3, [r3, #28]
 8007fc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007fc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007fca:	f003 0307 	and.w	r3, r3, #7
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d053      	beq.n	800807a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d011      	beq.n	8008002 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00b      	beq.n	8008002 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ff8:	f043 0201 	orr.w	r2, r3, #1
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008002:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008006:	f003 0302 	and.w	r3, r3, #2
 800800a:	2b00      	cmp	r3, #0
 800800c:	d011      	beq.n	8008032 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800800e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00b      	beq.n	8008032 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2202      	movs	r2, #2
 8008020:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008028:	f043 0204 	orr.w	r2, r3, #4
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008032:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008036:	f003 0304 	and.w	r3, r3, #4
 800803a:	2b00      	cmp	r3, #0
 800803c:	d011      	beq.n	8008062 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800803e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00b      	beq.n	8008062 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2204      	movs	r2, #4
 8008050:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008058:	f043 0202 	orr.w	r2, r3, #2
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008068:	2b00      	cmp	r3, #0
 800806a:	d006      	beq.n	800807a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f7fe ff69 	bl	8006f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008080:	b29b      	uxth	r3, r3
 8008082:	2b00      	cmp	r3, #0
 8008084:	d173      	bne.n	800816e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008094:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008096:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800809a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	461a      	mov	r2, r3
 80080a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80080a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80080aa:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ac:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80080ae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80080b0:	e841 2300 	strex	r3, r2, [r1]
 80080b4:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80080b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1e4      	bne.n	8008086 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	3308      	adds	r3, #8
 80080c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080c6:	e853 3f00 	ldrex	r3, [r3]
 80080ca:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80080cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080d2:	f023 0301 	bic.w	r3, r3, #1
 80080d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3308      	adds	r3, #8
 80080de:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80080e0:	657a      	str	r2, [r7, #84]	@ 0x54
 80080e2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80080e6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80080e8:	e841 2300 	strex	r3, r2, [r1]
 80080ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80080ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d1e3      	bne.n	80080bc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008106:	2b01      	cmp	r3, #1
 8008108:	d12e      	bne.n	8008168 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008118:	e853 3f00 	ldrex	r3, [r3]
 800811c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800811e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008120:	f023 0310 	bic.w	r3, r3, #16
 8008124:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	461a      	mov	r2, r3
 800812c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800812e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008130:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008132:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008134:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008136:	e841 2300 	strex	r3, r2, [r1]
 800813a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800813c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1e6      	bne.n	8008110 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	69db      	ldr	r3, [r3, #28]
 8008148:	f003 0310 	and.w	r3, r3, #16
 800814c:	2b10      	cmp	r3, #16
 800814e:	d103      	bne.n	8008158 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2210      	movs	r2, #16
 8008156:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7fe fef9 	bl	8006f58 <HAL_UARTEx_RxEventCallback>
 8008166:	e002      	b.n	800816e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7fa f8b7 	bl	80022dc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800816e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8008172:	2b00      	cmp	r3, #0
 8008174:	d006      	beq.n	8008184 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008176:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800817a:	f003 0320 	and.w	r3, r3, #32
 800817e:	2b00      	cmp	r3, #0
 8008180:	f47f aefe 	bne.w	8007f80 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800818a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800818e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8008192:	2b00      	cmp	r3, #0
 8008194:	d045      	beq.n	8008222 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800819c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d23e      	bcs.n	8008222 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3308      	adds	r3, #8
 80081aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ac:	6a3b      	ldr	r3, [r7, #32]
 80081ae:	e853 3f00 	ldrex	r3, [r3]
 80081b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	3308      	adds	r3, #8
 80081c2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80081c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081cc:	e841 2300 	strex	r3, r2, [r1]
 80081d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1e5      	bne.n	80081a4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a14      	ldr	r2, [pc, #80]	@ (800822c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80081dc:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	e853 3f00 	ldrex	r3, [r3]
 80081ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	f043 0320 	orr.w	r3, r3, #32
 80081f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	461a      	mov	r2, r3
 80081fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081fc:	61bb      	str	r3, [r7, #24]
 80081fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008200:	6979      	ldr	r1, [r7, #20]
 8008202:	69ba      	ldr	r2, [r7, #24]
 8008204:	e841 2300 	strex	r3, r2, [r1]
 8008208:	613b      	str	r3, [r7, #16]
   return(result);
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1e6      	bne.n	80081de <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008210:	e007      	b.n	8008222 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	699a      	ldr	r2, [r3, #24]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f042 0208 	orr.w	r2, r2, #8
 8008220:	619a      	str	r2, [r3, #24]
}
 8008222:	bf00      	nop
 8008224:	3798      	adds	r7, #152	@ 0x98
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	08007c77 	.word	0x08007c77

08008230 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b0a8      	sub	sp, #160	@ 0xa0
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800823e:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	69db      	ldr	r3, [r3, #28]
 8008248:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008266:	2b22      	cmp	r3, #34	@ 0x22
 8008268:	f040 8153 	bne.w	8008512 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008272:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008276:	e0fa      	b.n	800846e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800827e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008286:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800828a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 800828e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8008292:	4013      	ands	r3, r2
 8008294:	b29a      	uxth	r2, r3
 8008296:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800829a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082a0:	1c9a      	adds	r2, r3, #2
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	3b01      	subs	r3, #1
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80082c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80082c6:	f003 0307 	and.w	r3, r3, #7
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d053      	beq.n	8008376 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d011      	beq.n	80082fe <UART_RxISR_16BIT_FIFOEN+0xce>
 80082da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80082de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00b      	beq.n	80082fe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2201      	movs	r2, #1
 80082ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082f4:	f043 0201 	orr.w	r2, r3, #1
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008302:	f003 0302 	and.w	r3, r3, #2
 8008306:	2b00      	cmp	r3, #0
 8008308:	d011      	beq.n	800832e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800830a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00b      	beq.n	800832e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2202      	movs	r2, #2
 800831c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008324:	f043 0204 	orr.w	r2, r3, #4
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800832e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008332:	f003 0304 	and.w	r3, r3, #4
 8008336:	2b00      	cmp	r3, #0
 8008338:	d011      	beq.n	800835e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800833a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00b      	beq.n	800835e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2204      	movs	r2, #4
 800834c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008354:	f043 0202 	orr.w	r2, r3, #2
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008364:	2b00      	cmp	r3, #0
 8008366:	d006      	beq.n	8008376 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7fe fdeb 	bl	8006f44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800837c:	b29b      	uxth	r3, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d175      	bne.n	800846e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008388:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800838a:	e853 3f00 	ldrex	r3, [r3]
 800838e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008390:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008392:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008396:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	461a      	mov	r2, r3
 80083a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80083a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80083a6:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80083aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80083ac:	e841 2300 	strex	r3, r2, [r1]
 80083b0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80083b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1e4      	bne.n	8008382 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3308      	adds	r3, #8
 80083be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083c2:	e853 3f00 	ldrex	r3, [r3]
 80083c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80083c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80083ce:	f023 0301 	bic.w	r3, r3, #1
 80083d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	3308      	adds	r3, #8
 80083dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80083e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80083e2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80083e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083e8:	e841 2300 	strex	r3, r2, [r1]
 80083ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80083ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1e1      	bne.n	80083b8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2220      	movs	r2, #32
 80083f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008406:	2b01      	cmp	r3, #1
 8008408:	d12e      	bne.n	8008468 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008418:	e853 3f00 	ldrex	r3, [r3]
 800841c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800841e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008420:	f023 0310 	bic.w	r3, r3, #16
 8008424:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	461a      	mov	r2, r3
 800842c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800842e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008430:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008432:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008434:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008436:	e841 2300 	strex	r3, r2, [r1]
 800843a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800843c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1e6      	bne.n	8008410 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69db      	ldr	r3, [r3, #28]
 8008448:	f003 0310 	and.w	r3, r3, #16
 800844c:	2b10      	cmp	r3, #16
 800844e:	d103      	bne.n	8008458 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2210      	movs	r2, #16
 8008456:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f7fe fd79 	bl	8006f58 <HAL_UARTEx_RxEventCallback>
 8008466:	e002      	b.n	800846e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7f9 ff37 	bl	80022dc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800846e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008472:	2b00      	cmp	r3, #0
 8008474:	d006      	beq.n	8008484 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008476:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800847a:	f003 0320 	and.w	r3, r3, #32
 800847e:	2b00      	cmp	r3, #0
 8008480:	f47f aefa 	bne.w	8008278 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800848a:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800848e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8008492:	2b00      	cmp	r3, #0
 8008494:	d045      	beq.n	8008522 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800849c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d23e      	bcs.n	8008522 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3308      	adds	r3, #8
 80084aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ae:	e853 3f00 	ldrex	r3, [r3]
 80084b2:	623b      	str	r3, [r7, #32]
   return(result);
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3308      	adds	r3, #8
 80084c2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80084c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80084c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084cc:	e841 2300 	strex	r3, r2, [r1]
 80084d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1e5      	bne.n	80084a4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	4a14      	ldr	r2, [pc, #80]	@ (800852c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80084dc:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	e853 3f00 	ldrex	r3, [r3]
 80084ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f043 0320 	orr.w	r3, r3, #32
 80084f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	461a      	mov	r2, r3
 80084fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084fc:	61fb      	str	r3, [r7, #28]
 80084fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008500:	69b9      	ldr	r1, [r7, #24]
 8008502:	69fa      	ldr	r2, [r7, #28]
 8008504:	e841 2300 	strex	r3, r2, [r1]
 8008508:	617b      	str	r3, [r7, #20]
   return(result);
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1e6      	bne.n	80084de <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008510:	e007      	b.n	8008522 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	699a      	ldr	r2, [r3, #24]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f042 0208 	orr.w	r2, r2, #8
 8008520:	619a      	str	r2, [r3, #24]
}
 8008522:	bf00      	nop
 8008524:	37a0      	adds	r7, #160	@ 0xa0
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	08007dd7 	.word	0x08007dd7

08008530 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800856c:	b480      	push	{r7}
 800856e:	b085      	sub	sp, #20
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800857a:	2b01      	cmp	r3, #1
 800857c:	d101      	bne.n	8008582 <HAL_UARTEx_DisableFifoMode+0x16>
 800857e:	2302      	movs	r3, #2
 8008580:	e027      	b.n	80085d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2224      	movs	r2, #36	@ 0x24
 800858e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f022 0201 	bic.w	r2, r2, #1
 80085a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80085b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2220      	movs	r2, #32
 80085c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d101      	bne.n	80085f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80085f2:	2302      	movs	r3, #2
 80085f4:	e02d      	b.n	8008652 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2224      	movs	r2, #36	@ 0x24
 8008602:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f022 0201 	bic.w	r2, r2, #1
 800861c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	430a      	orrs	r2, r1
 8008630:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f000 f850 	bl	80086d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2220      	movs	r2, #32
 8008644:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b084      	sub	sp, #16
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800866a:	2b01      	cmp	r3, #1
 800866c:	d101      	bne.n	8008672 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800866e:	2302      	movs	r3, #2
 8008670:	e02d      	b.n	80086ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2224      	movs	r2, #36	@ 0x24
 800867e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f022 0201 	bic.w	r2, r2, #1
 8008698:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	430a      	orrs	r2, r1
 80086ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 f812 	bl	80086d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2220      	movs	r2, #32
 80086c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
	...

080086d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d108      	bne.n	80086fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80086f8:	e031      	b.n	800875e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80086fa:	2308      	movs	r3, #8
 80086fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80086fe:	2308      	movs	r3, #8
 8008700:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	0e5b      	lsrs	r3, r3, #25
 800870a:	b2db      	uxtb	r3, r3
 800870c:	f003 0307 	and.w	r3, r3, #7
 8008710:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	0f5b      	lsrs	r3, r3, #29
 800871a:	b2db      	uxtb	r3, r3
 800871c:	f003 0307 	and.w	r3, r3, #7
 8008720:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008722:	7bbb      	ldrb	r3, [r7, #14]
 8008724:	7b3a      	ldrb	r2, [r7, #12]
 8008726:	4911      	ldr	r1, [pc, #68]	@ (800876c <UARTEx_SetNbDataToProcess+0x94>)
 8008728:	5c8a      	ldrb	r2, [r1, r2]
 800872a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800872e:	7b3a      	ldrb	r2, [r7, #12]
 8008730:	490f      	ldr	r1, [pc, #60]	@ (8008770 <UARTEx_SetNbDataToProcess+0x98>)
 8008732:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008734:	fb93 f3f2 	sdiv	r3, r3, r2
 8008738:	b29a      	uxth	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008740:	7bfb      	ldrb	r3, [r7, #15]
 8008742:	7b7a      	ldrb	r2, [r7, #13]
 8008744:	4909      	ldr	r1, [pc, #36]	@ (800876c <UARTEx_SetNbDataToProcess+0x94>)
 8008746:	5c8a      	ldrb	r2, [r1, r2]
 8008748:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800874c:	7b7a      	ldrb	r2, [r7, #13]
 800874e:	4908      	ldr	r1, [pc, #32]	@ (8008770 <UARTEx_SetNbDataToProcess+0x98>)
 8008750:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008752:	fb93 f3f2 	sdiv	r3, r3, r2
 8008756:	b29a      	uxth	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800875e:	bf00      	nop
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	0800b5ac 	.word	0x0800b5ac
 8008770:	0800b5b4 	.word	0x0800b5b4

08008774 <atof>:
 8008774:	2100      	movs	r1, #0
 8008776:	f000 be07 	b.w	8009388 <strtod>

0800877a <atoi>:
 800877a:	220a      	movs	r2, #10
 800877c:	2100      	movs	r1, #0
 800877e:	f000 be89 	b.w	8009494 <strtol>

08008782 <sulp>:
 8008782:	b570      	push	{r4, r5, r6, lr}
 8008784:	4604      	mov	r4, r0
 8008786:	460d      	mov	r5, r1
 8008788:	ec45 4b10 	vmov	d0, r4, r5
 800878c:	4616      	mov	r6, r2
 800878e:	f002 f871 	bl	800a874 <__ulp>
 8008792:	ec51 0b10 	vmov	r0, r1, d0
 8008796:	b17e      	cbz	r6, 80087b8 <sulp+0x36>
 8008798:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800879c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	dd09      	ble.n	80087b8 <sulp+0x36>
 80087a4:	051b      	lsls	r3, r3, #20
 80087a6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80087aa:	2400      	movs	r4, #0
 80087ac:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80087b0:	4622      	mov	r2, r4
 80087b2:	462b      	mov	r3, r5
 80087b4:	f7f7 ff58 	bl	8000668 <__aeabi_dmul>
 80087b8:	ec41 0b10 	vmov	d0, r0, r1
 80087bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080087c0 <_strtod_l>:
 80087c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c4:	b09f      	sub	sp, #124	@ 0x7c
 80087c6:	460c      	mov	r4, r1
 80087c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80087ca:	2200      	movs	r2, #0
 80087cc:	921a      	str	r2, [sp, #104]	@ 0x68
 80087ce:	9005      	str	r0, [sp, #20]
 80087d0:	f04f 0a00 	mov.w	sl, #0
 80087d4:	f04f 0b00 	mov.w	fp, #0
 80087d8:	460a      	mov	r2, r1
 80087da:	9219      	str	r2, [sp, #100]	@ 0x64
 80087dc:	7811      	ldrb	r1, [r2, #0]
 80087de:	292b      	cmp	r1, #43	@ 0x2b
 80087e0:	d04a      	beq.n	8008878 <_strtod_l+0xb8>
 80087e2:	d838      	bhi.n	8008856 <_strtod_l+0x96>
 80087e4:	290d      	cmp	r1, #13
 80087e6:	d832      	bhi.n	800884e <_strtod_l+0x8e>
 80087e8:	2908      	cmp	r1, #8
 80087ea:	d832      	bhi.n	8008852 <_strtod_l+0x92>
 80087ec:	2900      	cmp	r1, #0
 80087ee:	d03b      	beq.n	8008868 <_strtod_l+0xa8>
 80087f0:	2200      	movs	r2, #0
 80087f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80087f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80087f6:	782a      	ldrb	r2, [r5, #0]
 80087f8:	2a30      	cmp	r2, #48	@ 0x30
 80087fa:	f040 80b3 	bne.w	8008964 <_strtod_l+0x1a4>
 80087fe:	786a      	ldrb	r2, [r5, #1]
 8008800:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008804:	2a58      	cmp	r2, #88	@ 0x58
 8008806:	d16e      	bne.n	80088e6 <_strtod_l+0x126>
 8008808:	9302      	str	r3, [sp, #8]
 800880a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800880c:	9301      	str	r3, [sp, #4]
 800880e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	4a8e      	ldr	r2, [pc, #568]	@ (8008a4c <_strtod_l+0x28c>)
 8008814:	9805      	ldr	r0, [sp, #20]
 8008816:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008818:	a919      	add	r1, sp, #100	@ 0x64
 800881a:	f001 f91d 	bl	8009a58 <__gethex>
 800881e:	f010 060f 	ands.w	r6, r0, #15
 8008822:	4604      	mov	r4, r0
 8008824:	d005      	beq.n	8008832 <_strtod_l+0x72>
 8008826:	2e06      	cmp	r6, #6
 8008828:	d128      	bne.n	800887c <_strtod_l+0xbc>
 800882a:	3501      	adds	r5, #1
 800882c:	2300      	movs	r3, #0
 800882e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008830:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008832:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008834:	2b00      	cmp	r3, #0
 8008836:	f040 858e 	bne.w	8009356 <_strtod_l+0xb96>
 800883a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800883c:	b1cb      	cbz	r3, 8008872 <_strtod_l+0xb2>
 800883e:	4652      	mov	r2, sl
 8008840:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008844:	ec43 2b10 	vmov	d0, r2, r3
 8008848:	b01f      	add	sp, #124	@ 0x7c
 800884a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884e:	2920      	cmp	r1, #32
 8008850:	d1ce      	bne.n	80087f0 <_strtod_l+0x30>
 8008852:	3201      	adds	r2, #1
 8008854:	e7c1      	b.n	80087da <_strtod_l+0x1a>
 8008856:	292d      	cmp	r1, #45	@ 0x2d
 8008858:	d1ca      	bne.n	80087f0 <_strtod_l+0x30>
 800885a:	2101      	movs	r1, #1
 800885c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800885e:	1c51      	adds	r1, r2, #1
 8008860:	9119      	str	r1, [sp, #100]	@ 0x64
 8008862:	7852      	ldrb	r2, [r2, #1]
 8008864:	2a00      	cmp	r2, #0
 8008866:	d1c5      	bne.n	80087f4 <_strtod_l+0x34>
 8008868:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800886a:	9419      	str	r4, [sp, #100]	@ 0x64
 800886c:	2b00      	cmp	r3, #0
 800886e:	f040 8570 	bne.w	8009352 <_strtod_l+0xb92>
 8008872:	4652      	mov	r2, sl
 8008874:	465b      	mov	r3, fp
 8008876:	e7e5      	b.n	8008844 <_strtod_l+0x84>
 8008878:	2100      	movs	r1, #0
 800887a:	e7ef      	b.n	800885c <_strtod_l+0x9c>
 800887c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800887e:	b13a      	cbz	r2, 8008890 <_strtod_l+0xd0>
 8008880:	2135      	movs	r1, #53	@ 0x35
 8008882:	a81c      	add	r0, sp, #112	@ 0x70
 8008884:	f002 f8f0 	bl	800aa68 <__copybits>
 8008888:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800888a:	9805      	ldr	r0, [sp, #20]
 800888c:	f001 fcbe 	bl	800a20c <_Bfree>
 8008890:	3e01      	subs	r6, #1
 8008892:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008894:	2e04      	cmp	r6, #4
 8008896:	d806      	bhi.n	80088a6 <_strtod_l+0xe6>
 8008898:	e8df f006 	tbb	[pc, r6]
 800889c:	201d0314 	.word	0x201d0314
 80088a0:	14          	.byte	0x14
 80088a1:	00          	.byte	0x00
 80088a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80088a6:	05e1      	lsls	r1, r4, #23
 80088a8:	bf48      	it	mi
 80088aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80088ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80088b2:	0d1b      	lsrs	r3, r3, #20
 80088b4:	051b      	lsls	r3, r3, #20
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1bb      	bne.n	8008832 <_strtod_l+0x72>
 80088ba:	f000 ffb7 	bl	800982c <__errno>
 80088be:	2322      	movs	r3, #34	@ 0x22
 80088c0:	6003      	str	r3, [r0, #0]
 80088c2:	e7b6      	b.n	8008832 <_strtod_l+0x72>
 80088c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80088c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80088cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80088d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80088d4:	e7e7      	b.n	80088a6 <_strtod_l+0xe6>
 80088d6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008a54 <_strtod_l+0x294>
 80088da:	e7e4      	b.n	80088a6 <_strtod_l+0xe6>
 80088dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80088e0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80088e4:	e7df      	b.n	80088a6 <_strtod_l+0xe6>
 80088e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088e8:	1c5a      	adds	r2, r3, #1
 80088ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80088ec:	785b      	ldrb	r3, [r3, #1]
 80088ee:	2b30      	cmp	r3, #48	@ 0x30
 80088f0:	d0f9      	beq.n	80088e6 <_strtod_l+0x126>
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d09d      	beq.n	8008832 <_strtod_l+0x72>
 80088f6:	2301      	movs	r3, #1
 80088f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80088fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80088fe:	2300      	movs	r3, #0
 8008900:	9308      	str	r3, [sp, #32]
 8008902:	930a      	str	r3, [sp, #40]	@ 0x28
 8008904:	461f      	mov	r7, r3
 8008906:	220a      	movs	r2, #10
 8008908:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800890a:	7805      	ldrb	r5, [r0, #0]
 800890c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008910:	b2d9      	uxtb	r1, r3
 8008912:	2909      	cmp	r1, #9
 8008914:	d928      	bls.n	8008968 <_strtod_l+0x1a8>
 8008916:	494e      	ldr	r1, [pc, #312]	@ (8008a50 <_strtod_l+0x290>)
 8008918:	2201      	movs	r2, #1
 800891a:	f000 fed2 	bl	80096c2 <strncmp>
 800891e:	2800      	cmp	r0, #0
 8008920:	d032      	beq.n	8008988 <_strtod_l+0x1c8>
 8008922:	2000      	movs	r0, #0
 8008924:	462a      	mov	r2, r5
 8008926:	4681      	mov	r9, r0
 8008928:	463d      	mov	r5, r7
 800892a:	4603      	mov	r3, r0
 800892c:	2a65      	cmp	r2, #101	@ 0x65
 800892e:	d001      	beq.n	8008934 <_strtod_l+0x174>
 8008930:	2a45      	cmp	r2, #69	@ 0x45
 8008932:	d114      	bne.n	800895e <_strtod_l+0x19e>
 8008934:	b91d      	cbnz	r5, 800893e <_strtod_l+0x17e>
 8008936:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008938:	4302      	orrs	r2, r0
 800893a:	d095      	beq.n	8008868 <_strtod_l+0xa8>
 800893c:	2500      	movs	r5, #0
 800893e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008940:	1c62      	adds	r2, r4, #1
 8008942:	9219      	str	r2, [sp, #100]	@ 0x64
 8008944:	7862      	ldrb	r2, [r4, #1]
 8008946:	2a2b      	cmp	r2, #43	@ 0x2b
 8008948:	d077      	beq.n	8008a3a <_strtod_l+0x27a>
 800894a:	2a2d      	cmp	r2, #45	@ 0x2d
 800894c:	d07b      	beq.n	8008a46 <_strtod_l+0x286>
 800894e:	f04f 0c00 	mov.w	ip, #0
 8008952:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008956:	2909      	cmp	r1, #9
 8008958:	f240 8082 	bls.w	8008a60 <_strtod_l+0x2a0>
 800895c:	9419      	str	r4, [sp, #100]	@ 0x64
 800895e:	f04f 0800 	mov.w	r8, #0
 8008962:	e0a2      	b.n	8008aaa <_strtod_l+0x2ea>
 8008964:	2300      	movs	r3, #0
 8008966:	e7c7      	b.n	80088f8 <_strtod_l+0x138>
 8008968:	2f08      	cmp	r7, #8
 800896a:	bfd5      	itete	le
 800896c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800896e:	9908      	ldrgt	r1, [sp, #32]
 8008970:	fb02 3301 	mlale	r3, r2, r1, r3
 8008974:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008978:	f100 0001 	add.w	r0, r0, #1
 800897c:	bfd4      	ite	le
 800897e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008980:	9308      	strgt	r3, [sp, #32]
 8008982:	3701      	adds	r7, #1
 8008984:	9019      	str	r0, [sp, #100]	@ 0x64
 8008986:	e7bf      	b.n	8008908 <_strtod_l+0x148>
 8008988:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	9219      	str	r2, [sp, #100]	@ 0x64
 800898e:	785a      	ldrb	r2, [r3, #1]
 8008990:	b37f      	cbz	r7, 80089f2 <_strtod_l+0x232>
 8008992:	4681      	mov	r9, r0
 8008994:	463d      	mov	r5, r7
 8008996:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800899a:	2b09      	cmp	r3, #9
 800899c:	d912      	bls.n	80089c4 <_strtod_l+0x204>
 800899e:	2301      	movs	r3, #1
 80089a0:	e7c4      	b.n	800892c <_strtod_l+0x16c>
 80089a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089a4:	1c5a      	adds	r2, r3, #1
 80089a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80089a8:	785a      	ldrb	r2, [r3, #1]
 80089aa:	3001      	adds	r0, #1
 80089ac:	2a30      	cmp	r2, #48	@ 0x30
 80089ae:	d0f8      	beq.n	80089a2 <_strtod_l+0x1e2>
 80089b0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80089b4:	2b08      	cmp	r3, #8
 80089b6:	f200 84d3 	bhi.w	8009360 <_strtod_l+0xba0>
 80089ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80089be:	4681      	mov	r9, r0
 80089c0:	2000      	movs	r0, #0
 80089c2:	4605      	mov	r5, r0
 80089c4:	3a30      	subs	r2, #48	@ 0x30
 80089c6:	f100 0301 	add.w	r3, r0, #1
 80089ca:	d02a      	beq.n	8008a22 <_strtod_l+0x262>
 80089cc:	4499      	add	r9, r3
 80089ce:	eb00 0c05 	add.w	ip, r0, r5
 80089d2:	462b      	mov	r3, r5
 80089d4:	210a      	movs	r1, #10
 80089d6:	4563      	cmp	r3, ip
 80089d8:	d10d      	bne.n	80089f6 <_strtod_l+0x236>
 80089da:	1c69      	adds	r1, r5, #1
 80089dc:	4401      	add	r1, r0
 80089de:	4428      	add	r0, r5
 80089e0:	2808      	cmp	r0, #8
 80089e2:	dc16      	bgt.n	8008a12 <_strtod_l+0x252>
 80089e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80089e6:	230a      	movs	r3, #10
 80089e8:	fb03 2300 	mla	r3, r3, r0, r2
 80089ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80089ee:	2300      	movs	r3, #0
 80089f0:	e018      	b.n	8008a24 <_strtod_l+0x264>
 80089f2:	4638      	mov	r0, r7
 80089f4:	e7da      	b.n	80089ac <_strtod_l+0x1ec>
 80089f6:	2b08      	cmp	r3, #8
 80089f8:	f103 0301 	add.w	r3, r3, #1
 80089fc:	dc03      	bgt.n	8008a06 <_strtod_l+0x246>
 80089fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008a00:	434e      	muls	r6, r1
 8008a02:	960a      	str	r6, [sp, #40]	@ 0x28
 8008a04:	e7e7      	b.n	80089d6 <_strtod_l+0x216>
 8008a06:	2b10      	cmp	r3, #16
 8008a08:	bfde      	ittt	le
 8008a0a:	9e08      	ldrle	r6, [sp, #32]
 8008a0c:	434e      	mulle	r6, r1
 8008a0e:	9608      	strle	r6, [sp, #32]
 8008a10:	e7e1      	b.n	80089d6 <_strtod_l+0x216>
 8008a12:	280f      	cmp	r0, #15
 8008a14:	dceb      	bgt.n	80089ee <_strtod_l+0x22e>
 8008a16:	9808      	ldr	r0, [sp, #32]
 8008a18:	230a      	movs	r3, #10
 8008a1a:	fb03 2300 	mla	r3, r3, r0, r2
 8008a1e:	9308      	str	r3, [sp, #32]
 8008a20:	e7e5      	b.n	80089ee <_strtod_l+0x22e>
 8008a22:	4629      	mov	r1, r5
 8008a24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008a26:	1c50      	adds	r0, r2, #1
 8008a28:	9019      	str	r0, [sp, #100]	@ 0x64
 8008a2a:	7852      	ldrb	r2, [r2, #1]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	460d      	mov	r5, r1
 8008a30:	e7b1      	b.n	8008996 <_strtod_l+0x1d6>
 8008a32:	f04f 0900 	mov.w	r9, #0
 8008a36:	2301      	movs	r3, #1
 8008a38:	e77d      	b.n	8008936 <_strtod_l+0x176>
 8008a3a:	f04f 0c00 	mov.w	ip, #0
 8008a3e:	1ca2      	adds	r2, r4, #2
 8008a40:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a42:	78a2      	ldrb	r2, [r4, #2]
 8008a44:	e785      	b.n	8008952 <_strtod_l+0x192>
 8008a46:	f04f 0c01 	mov.w	ip, #1
 8008a4a:	e7f8      	b.n	8008a3e <_strtod_l+0x27e>
 8008a4c:	0800b5e0 	.word	0x0800b5e0
 8008a50:	0800b5bc 	.word	0x0800b5bc
 8008a54:	7ff00000 	.word	0x7ff00000
 8008a58:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008a5a:	1c51      	adds	r1, r2, #1
 8008a5c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008a5e:	7852      	ldrb	r2, [r2, #1]
 8008a60:	2a30      	cmp	r2, #48	@ 0x30
 8008a62:	d0f9      	beq.n	8008a58 <_strtod_l+0x298>
 8008a64:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008a68:	2908      	cmp	r1, #8
 8008a6a:	f63f af78 	bhi.w	800895e <_strtod_l+0x19e>
 8008a6e:	3a30      	subs	r2, #48	@ 0x30
 8008a70:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008a74:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008a76:	f04f 080a 	mov.w	r8, #10
 8008a7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008a7c:	1c56      	adds	r6, r2, #1
 8008a7e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008a80:	7852      	ldrb	r2, [r2, #1]
 8008a82:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008a86:	f1be 0f09 	cmp.w	lr, #9
 8008a8a:	d939      	bls.n	8008b00 <_strtod_l+0x340>
 8008a8c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008a8e:	1a76      	subs	r6, r6, r1
 8008a90:	2e08      	cmp	r6, #8
 8008a92:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008a96:	dc03      	bgt.n	8008aa0 <_strtod_l+0x2e0>
 8008a98:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008a9a:	4588      	cmp	r8, r1
 8008a9c:	bfa8      	it	ge
 8008a9e:	4688      	movge	r8, r1
 8008aa0:	f1bc 0f00 	cmp.w	ip, #0
 8008aa4:	d001      	beq.n	8008aaa <_strtod_l+0x2ea>
 8008aa6:	f1c8 0800 	rsb	r8, r8, #0
 8008aaa:	2d00      	cmp	r5, #0
 8008aac:	d14e      	bne.n	8008b4c <_strtod_l+0x38c>
 8008aae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ab0:	4308      	orrs	r0, r1
 8008ab2:	f47f aebe 	bne.w	8008832 <_strtod_l+0x72>
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	f47f aed6 	bne.w	8008868 <_strtod_l+0xa8>
 8008abc:	2a69      	cmp	r2, #105	@ 0x69
 8008abe:	d028      	beq.n	8008b12 <_strtod_l+0x352>
 8008ac0:	dc25      	bgt.n	8008b0e <_strtod_l+0x34e>
 8008ac2:	2a49      	cmp	r2, #73	@ 0x49
 8008ac4:	d025      	beq.n	8008b12 <_strtod_l+0x352>
 8008ac6:	2a4e      	cmp	r2, #78	@ 0x4e
 8008ac8:	f47f aece 	bne.w	8008868 <_strtod_l+0xa8>
 8008acc:	499b      	ldr	r1, [pc, #620]	@ (8008d3c <_strtod_l+0x57c>)
 8008ace:	a819      	add	r0, sp, #100	@ 0x64
 8008ad0:	f001 f9e4 	bl	8009e9c <__match>
 8008ad4:	2800      	cmp	r0, #0
 8008ad6:	f43f aec7 	beq.w	8008868 <_strtod_l+0xa8>
 8008ada:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	2b28      	cmp	r3, #40	@ 0x28
 8008ae0:	d12e      	bne.n	8008b40 <_strtod_l+0x380>
 8008ae2:	4997      	ldr	r1, [pc, #604]	@ (8008d40 <_strtod_l+0x580>)
 8008ae4:	aa1c      	add	r2, sp, #112	@ 0x70
 8008ae6:	a819      	add	r0, sp, #100	@ 0x64
 8008ae8:	f001 f9ec 	bl	8009ec4 <__hexnan>
 8008aec:	2805      	cmp	r0, #5
 8008aee:	d127      	bne.n	8008b40 <_strtod_l+0x380>
 8008af0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008af2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008af6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008afa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008afe:	e698      	b.n	8008832 <_strtod_l+0x72>
 8008b00:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008b02:	fb08 2101 	mla	r1, r8, r1, r2
 8008b06:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008b0a:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b0c:	e7b5      	b.n	8008a7a <_strtod_l+0x2ba>
 8008b0e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008b10:	e7da      	b.n	8008ac8 <_strtod_l+0x308>
 8008b12:	498c      	ldr	r1, [pc, #560]	@ (8008d44 <_strtod_l+0x584>)
 8008b14:	a819      	add	r0, sp, #100	@ 0x64
 8008b16:	f001 f9c1 	bl	8009e9c <__match>
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	f43f aea4 	beq.w	8008868 <_strtod_l+0xa8>
 8008b20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b22:	4989      	ldr	r1, [pc, #548]	@ (8008d48 <_strtod_l+0x588>)
 8008b24:	3b01      	subs	r3, #1
 8008b26:	a819      	add	r0, sp, #100	@ 0x64
 8008b28:	9319      	str	r3, [sp, #100]	@ 0x64
 8008b2a:	f001 f9b7 	bl	8009e9c <__match>
 8008b2e:	b910      	cbnz	r0, 8008b36 <_strtod_l+0x376>
 8008b30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b32:	3301      	adds	r3, #1
 8008b34:	9319      	str	r3, [sp, #100]	@ 0x64
 8008b36:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008d58 <_strtod_l+0x598>
 8008b3a:	f04f 0a00 	mov.w	sl, #0
 8008b3e:	e678      	b.n	8008832 <_strtod_l+0x72>
 8008b40:	4882      	ldr	r0, [pc, #520]	@ (8008d4c <_strtod_l+0x58c>)
 8008b42:	f000 feb1 	bl	80098a8 <nan>
 8008b46:	ec5b ab10 	vmov	sl, fp, d0
 8008b4a:	e672      	b.n	8008832 <_strtod_l+0x72>
 8008b4c:	eba8 0309 	sub.w	r3, r8, r9
 8008b50:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008b52:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b54:	2f00      	cmp	r7, #0
 8008b56:	bf08      	it	eq
 8008b58:	462f      	moveq	r7, r5
 8008b5a:	2d10      	cmp	r5, #16
 8008b5c:	462c      	mov	r4, r5
 8008b5e:	bfa8      	it	ge
 8008b60:	2410      	movge	r4, #16
 8008b62:	f7f7 fd07 	bl	8000574 <__aeabi_ui2d>
 8008b66:	2d09      	cmp	r5, #9
 8008b68:	4682      	mov	sl, r0
 8008b6a:	468b      	mov	fp, r1
 8008b6c:	dc13      	bgt.n	8008b96 <_strtod_l+0x3d6>
 8008b6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f43f ae5e 	beq.w	8008832 <_strtod_l+0x72>
 8008b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b78:	dd78      	ble.n	8008c6c <_strtod_l+0x4ac>
 8008b7a:	2b16      	cmp	r3, #22
 8008b7c:	dc5f      	bgt.n	8008c3e <_strtod_l+0x47e>
 8008b7e:	4974      	ldr	r1, [pc, #464]	@ (8008d50 <_strtod_l+0x590>)
 8008b80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008b84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b88:	4652      	mov	r2, sl
 8008b8a:	465b      	mov	r3, fp
 8008b8c:	f7f7 fd6c 	bl	8000668 <__aeabi_dmul>
 8008b90:	4682      	mov	sl, r0
 8008b92:	468b      	mov	fp, r1
 8008b94:	e64d      	b.n	8008832 <_strtod_l+0x72>
 8008b96:	4b6e      	ldr	r3, [pc, #440]	@ (8008d50 <_strtod_l+0x590>)
 8008b98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008ba0:	f7f7 fd62 	bl	8000668 <__aeabi_dmul>
 8008ba4:	4682      	mov	sl, r0
 8008ba6:	9808      	ldr	r0, [sp, #32]
 8008ba8:	468b      	mov	fp, r1
 8008baa:	f7f7 fce3 	bl	8000574 <__aeabi_ui2d>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	4650      	mov	r0, sl
 8008bb4:	4659      	mov	r1, fp
 8008bb6:	f7f7 fba1 	bl	80002fc <__adddf3>
 8008bba:	2d0f      	cmp	r5, #15
 8008bbc:	4682      	mov	sl, r0
 8008bbe:	468b      	mov	fp, r1
 8008bc0:	ddd5      	ble.n	8008b6e <_strtod_l+0x3ae>
 8008bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bc4:	1b2c      	subs	r4, r5, r4
 8008bc6:	441c      	add	r4, r3
 8008bc8:	2c00      	cmp	r4, #0
 8008bca:	f340 8096 	ble.w	8008cfa <_strtod_l+0x53a>
 8008bce:	f014 030f 	ands.w	r3, r4, #15
 8008bd2:	d00a      	beq.n	8008bea <_strtod_l+0x42a>
 8008bd4:	495e      	ldr	r1, [pc, #376]	@ (8008d50 <_strtod_l+0x590>)
 8008bd6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008bda:	4652      	mov	r2, sl
 8008bdc:	465b      	mov	r3, fp
 8008bde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008be2:	f7f7 fd41 	bl	8000668 <__aeabi_dmul>
 8008be6:	4682      	mov	sl, r0
 8008be8:	468b      	mov	fp, r1
 8008bea:	f034 040f 	bics.w	r4, r4, #15
 8008bee:	d073      	beq.n	8008cd8 <_strtod_l+0x518>
 8008bf0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008bf4:	dd48      	ble.n	8008c88 <_strtod_l+0x4c8>
 8008bf6:	2400      	movs	r4, #0
 8008bf8:	46a0      	mov	r8, r4
 8008bfa:	940a      	str	r4, [sp, #40]	@ 0x28
 8008bfc:	46a1      	mov	r9, r4
 8008bfe:	9a05      	ldr	r2, [sp, #20]
 8008c00:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008d58 <_strtod_l+0x598>
 8008c04:	2322      	movs	r3, #34	@ 0x22
 8008c06:	6013      	str	r3, [r2, #0]
 8008c08:	f04f 0a00 	mov.w	sl, #0
 8008c0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f43f ae0f 	beq.w	8008832 <_strtod_l+0x72>
 8008c14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008c16:	9805      	ldr	r0, [sp, #20]
 8008c18:	f001 faf8 	bl	800a20c <_Bfree>
 8008c1c:	9805      	ldr	r0, [sp, #20]
 8008c1e:	4649      	mov	r1, r9
 8008c20:	f001 faf4 	bl	800a20c <_Bfree>
 8008c24:	9805      	ldr	r0, [sp, #20]
 8008c26:	4641      	mov	r1, r8
 8008c28:	f001 faf0 	bl	800a20c <_Bfree>
 8008c2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c2e:	9805      	ldr	r0, [sp, #20]
 8008c30:	f001 faec 	bl	800a20c <_Bfree>
 8008c34:	9805      	ldr	r0, [sp, #20]
 8008c36:	4621      	mov	r1, r4
 8008c38:	f001 fae8 	bl	800a20c <_Bfree>
 8008c3c:	e5f9      	b.n	8008832 <_strtod_l+0x72>
 8008c3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c40:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008c44:	4293      	cmp	r3, r2
 8008c46:	dbbc      	blt.n	8008bc2 <_strtod_l+0x402>
 8008c48:	4c41      	ldr	r4, [pc, #260]	@ (8008d50 <_strtod_l+0x590>)
 8008c4a:	f1c5 050f 	rsb	r5, r5, #15
 8008c4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008c52:	4652      	mov	r2, sl
 8008c54:	465b      	mov	r3, fp
 8008c56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c5a:	f7f7 fd05 	bl	8000668 <__aeabi_dmul>
 8008c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c60:	1b5d      	subs	r5, r3, r5
 8008c62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008c66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008c6a:	e78f      	b.n	8008b8c <_strtod_l+0x3cc>
 8008c6c:	3316      	adds	r3, #22
 8008c6e:	dba8      	blt.n	8008bc2 <_strtod_l+0x402>
 8008c70:	4b37      	ldr	r3, [pc, #220]	@ (8008d50 <_strtod_l+0x590>)
 8008c72:	eba9 0808 	sub.w	r8, r9, r8
 8008c76:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008c7a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008c7e:	4650      	mov	r0, sl
 8008c80:	4659      	mov	r1, fp
 8008c82:	f7f7 fe1b 	bl	80008bc <__aeabi_ddiv>
 8008c86:	e783      	b.n	8008b90 <_strtod_l+0x3d0>
 8008c88:	4b32      	ldr	r3, [pc, #200]	@ (8008d54 <_strtod_l+0x594>)
 8008c8a:	9308      	str	r3, [sp, #32]
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	1124      	asrs	r4, r4, #4
 8008c90:	4650      	mov	r0, sl
 8008c92:	4659      	mov	r1, fp
 8008c94:	461e      	mov	r6, r3
 8008c96:	2c01      	cmp	r4, #1
 8008c98:	dc21      	bgt.n	8008cde <_strtod_l+0x51e>
 8008c9a:	b10b      	cbz	r3, 8008ca0 <_strtod_l+0x4e0>
 8008c9c:	4682      	mov	sl, r0
 8008c9e:	468b      	mov	fp, r1
 8008ca0:	492c      	ldr	r1, [pc, #176]	@ (8008d54 <_strtod_l+0x594>)
 8008ca2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008ca6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008caa:	4652      	mov	r2, sl
 8008cac:	465b      	mov	r3, fp
 8008cae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cb2:	f7f7 fcd9 	bl	8000668 <__aeabi_dmul>
 8008cb6:	4b28      	ldr	r3, [pc, #160]	@ (8008d58 <_strtod_l+0x598>)
 8008cb8:	460a      	mov	r2, r1
 8008cba:	400b      	ands	r3, r1
 8008cbc:	4927      	ldr	r1, [pc, #156]	@ (8008d5c <_strtod_l+0x59c>)
 8008cbe:	428b      	cmp	r3, r1
 8008cc0:	4682      	mov	sl, r0
 8008cc2:	d898      	bhi.n	8008bf6 <_strtod_l+0x436>
 8008cc4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008cc8:	428b      	cmp	r3, r1
 8008cca:	bf86      	itte	hi
 8008ccc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008d60 <_strtod_l+0x5a0>
 8008cd0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8008cd4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008cd8:	2300      	movs	r3, #0
 8008cda:	9308      	str	r3, [sp, #32]
 8008cdc:	e07a      	b.n	8008dd4 <_strtod_l+0x614>
 8008cde:	07e2      	lsls	r2, r4, #31
 8008ce0:	d505      	bpl.n	8008cee <_strtod_l+0x52e>
 8008ce2:	9b08      	ldr	r3, [sp, #32]
 8008ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce8:	f7f7 fcbe 	bl	8000668 <__aeabi_dmul>
 8008cec:	2301      	movs	r3, #1
 8008cee:	9a08      	ldr	r2, [sp, #32]
 8008cf0:	3208      	adds	r2, #8
 8008cf2:	3601      	adds	r6, #1
 8008cf4:	1064      	asrs	r4, r4, #1
 8008cf6:	9208      	str	r2, [sp, #32]
 8008cf8:	e7cd      	b.n	8008c96 <_strtod_l+0x4d6>
 8008cfa:	d0ed      	beq.n	8008cd8 <_strtod_l+0x518>
 8008cfc:	4264      	negs	r4, r4
 8008cfe:	f014 020f 	ands.w	r2, r4, #15
 8008d02:	d00a      	beq.n	8008d1a <_strtod_l+0x55a>
 8008d04:	4b12      	ldr	r3, [pc, #72]	@ (8008d50 <_strtod_l+0x590>)
 8008d06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d0a:	4650      	mov	r0, sl
 8008d0c:	4659      	mov	r1, fp
 8008d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d12:	f7f7 fdd3 	bl	80008bc <__aeabi_ddiv>
 8008d16:	4682      	mov	sl, r0
 8008d18:	468b      	mov	fp, r1
 8008d1a:	1124      	asrs	r4, r4, #4
 8008d1c:	d0dc      	beq.n	8008cd8 <_strtod_l+0x518>
 8008d1e:	2c1f      	cmp	r4, #31
 8008d20:	dd20      	ble.n	8008d64 <_strtod_l+0x5a4>
 8008d22:	2400      	movs	r4, #0
 8008d24:	46a0      	mov	r8, r4
 8008d26:	940a      	str	r4, [sp, #40]	@ 0x28
 8008d28:	46a1      	mov	r9, r4
 8008d2a:	9a05      	ldr	r2, [sp, #20]
 8008d2c:	2322      	movs	r3, #34	@ 0x22
 8008d2e:	f04f 0a00 	mov.w	sl, #0
 8008d32:	f04f 0b00 	mov.w	fp, #0
 8008d36:	6013      	str	r3, [r2, #0]
 8008d38:	e768      	b.n	8008c0c <_strtod_l+0x44c>
 8008d3a:	bf00      	nop
 8008d3c:	0800b5c7 	.word	0x0800b5c7
 8008d40:	0800b5cc 	.word	0x0800b5cc
 8008d44:	0800b5be 	.word	0x0800b5be
 8008d48:	0800b5c1 	.word	0x0800b5c1
 8008d4c:	0800b7d5 	.word	0x0800b7d5
 8008d50:	0800b8d8 	.word	0x0800b8d8
 8008d54:	0800b8b0 	.word	0x0800b8b0
 8008d58:	7ff00000 	.word	0x7ff00000
 8008d5c:	7ca00000 	.word	0x7ca00000
 8008d60:	7fefffff 	.word	0x7fefffff
 8008d64:	f014 0310 	ands.w	r3, r4, #16
 8008d68:	bf18      	it	ne
 8008d6a:	236a      	movne	r3, #106	@ 0x6a
 8008d6c:	4ea9      	ldr	r6, [pc, #676]	@ (8009014 <_strtod_l+0x854>)
 8008d6e:	9308      	str	r3, [sp, #32]
 8008d70:	4650      	mov	r0, sl
 8008d72:	4659      	mov	r1, fp
 8008d74:	2300      	movs	r3, #0
 8008d76:	07e2      	lsls	r2, r4, #31
 8008d78:	d504      	bpl.n	8008d84 <_strtod_l+0x5c4>
 8008d7a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d7e:	f7f7 fc73 	bl	8000668 <__aeabi_dmul>
 8008d82:	2301      	movs	r3, #1
 8008d84:	1064      	asrs	r4, r4, #1
 8008d86:	f106 0608 	add.w	r6, r6, #8
 8008d8a:	d1f4      	bne.n	8008d76 <_strtod_l+0x5b6>
 8008d8c:	b10b      	cbz	r3, 8008d92 <_strtod_l+0x5d2>
 8008d8e:	4682      	mov	sl, r0
 8008d90:	468b      	mov	fp, r1
 8008d92:	9b08      	ldr	r3, [sp, #32]
 8008d94:	b1b3      	cbz	r3, 8008dc4 <_strtod_l+0x604>
 8008d96:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008d9a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	4659      	mov	r1, fp
 8008da2:	dd0f      	ble.n	8008dc4 <_strtod_l+0x604>
 8008da4:	2b1f      	cmp	r3, #31
 8008da6:	dd55      	ble.n	8008e54 <_strtod_l+0x694>
 8008da8:	2b34      	cmp	r3, #52	@ 0x34
 8008daa:	bfde      	ittt	le
 8008dac:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8008db0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008db4:	4093      	lslle	r3, r2
 8008db6:	f04f 0a00 	mov.w	sl, #0
 8008dba:	bfcc      	ite	gt
 8008dbc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008dc0:	ea03 0b01 	andle.w	fp, r3, r1
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	4650      	mov	r0, sl
 8008dca:	4659      	mov	r1, fp
 8008dcc:	f7f7 feb4 	bl	8000b38 <__aeabi_dcmpeq>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d1a6      	bne.n	8008d22 <_strtod_l+0x562>
 8008dd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008dda:	9805      	ldr	r0, [sp, #20]
 8008ddc:	462b      	mov	r3, r5
 8008dde:	463a      	mov	r2, r7
 8008de0:	f001 fa7c 	bl	800a2dc <__s2b>
 8008de4:	900a      	str	r0, [sp, #40]	@ 0x28
 8008de6:	2800      	cmp	r0, #0
 8008de8:	f43f af05 	beq.w	8008bf6 <_strtod_l+0x436>
 8008dec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008dee:	2a00      	cmp	r2, #0
 8008df0:	eba9 0308 	sub.w	r3, r9, r8
 8008df4:	bfa8      	it	ge
 8008df6:	2300      	movge	r3, #0
 8008df8:	9312      	str	r3, [sp, #72]	@ 0x48
 8008dfa:	2400      	movs	r4, #0
 8008dfc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008e00:	9316      	str	r3, [sp, #88]	@ 0x58
 8008e02:	46a0      	mov	r8, r4
 8008e04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e06:	9805      	ldr	r0, [sp, #20]
 8008e08:	6859      	ldr	r1, [r3, #4]
 8008e0a:	f001 f9bf 	bl	800a18c <_Balloc>
 8008e0e:	4681      	mov	r9, r0
 8008e10:	2800      	cmp	r0, #0
 8008e12:	f43f aef4 	beq.w	8008bfe <_strtod_l+0x43e>
 8008e16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e18:	691a      	ldr	r2, [r3, #16]
 8008e1a:	3202      	adds	r2, #2
 8008e1c:	f103 010c 	add.w	r1, r3, #12
 8008e20:	0092      	lsls	r2, r2, #2
 8008e22:	300c      	adds	r0, #12
 8008e24:	f000 fd2f 	bl	8009886 <memcpy>
 8008e28:	ec4b ab10 	vmov	d0, sl, fp
 8008e2c:	9805      	ldr	r0, [sp, #20]
 8008e2e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008e30:	a91b      	add	r1, sp, #108	@ 0x6c
 8008e32:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008e36:	f001 fd8d 	bl	800a954 <__d2b>
 8008e3a:	901a      	str	r0, [sp, #104]	@ 0x68
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	f43f aede 	beq.w	8008bfe <_strtod_l+0x43e>
 8008e42:	9805      	ldr	r0, [sp, #20]
 8008e44:	2101      	movs	r1, #1
 8008e46:	f001 fadf 	bl	800a408 <__i2b>
 8008e4a:	4680      	mov	r8, r0
 8008e4c:	b948      	cbnz	r0, 8008e62 <_strtod_l+0x6a2>
 8008e4e:	f04f 0800 	mov.w	r8, #0
 8008e52:	e6d4      	b.n	8008bfe <_strtod_l+0x43e>
 8008e54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008e58:	fa02 f303 	lsl.w	r3, r2, r3
 8008e5c:	ea03 0a0a 	and.w	sl, r3, sl
 8008e60:	e7b0      	b.n	8008dc4 <_strtod_l+0x604>
 8008e62:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008e64:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008e66:	2d00      	cmp	r5, #0
 8008e68:	bfab      	itete	ge
 8008e6a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008e6c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008e6e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008e70:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008e72:	bfac      	ite	ge
 8008e74:	18ef      	addge	r7, r5, r3
 8008e76:	1b5e      	sublt	r6, r3, r5
 8008e78:	9b08      	ldr	r3, [sp, #32]
 8008e7a:	1aed      	subs	r5, r5, r3
 8008e7c:	4415      	add	r5, r2
 8008e7e:	4b66      	ldr	r3, [pc, #408]	@ (8009018 <_strtod_l+0x858>)
 8008e80:	3d01      	subs	r5, #1
 8008e82:	429d      	cmp	r5, r3
 8008e84:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008e88:	da50      	bge.n	8008f2c <_strtod_l+0x76c>
 8008e8a:	1b5b      	subs	r3, r3, r5
 8008e8c:	2b1f      	cmp	r3, #31
 8008e8e:	eba2 0203 	sub.w	r2, r2, r3
 8008e92:	f04f 0101 	mov.w	r1, #1
 8008e96:	dc3d      	bgt.n	8008f14 <_strtod_l+0x754>
 8008e98:	fa01 f303 	lsl.w	r3, r1, r3
 8008e9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	9310      	str	r3, [sp, #64]	@ 0x40
 8008ea2:	18bd      	adds	r5, r7, r2
 8008ea4:	9b08      	ldr	r3, [sp, #32]
 8008ea6:	42af      	cmp	r7, r5
 8008ea8:	4416      	add	r6, r2
 8008eaa:	441e      	add	r6, r3
 8008eac:	463b      	mov	r3, r7
 8008eae:	bfa8      	it	ge
 8008eb0:	462b      	movge	r3, r5
 8008eb2:	42b3      	cmp	r3, r6
 8008eb4:	bfa8      	it	ge
 8008eb6:	4633      	movge	r3, r6
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	bfc2      	ittt	gt
 8008ebc:	1aed      	subgt	r5, r5, r3
 8008ebe:	1af6      	subgt	r6, r6, r3
 8008ec0:	1aff      	subgt	r7, r7, r3
 8008ec2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	dd16      	ble.n	8008ef6 <_strtod_l+0x736>
 8008ec8:	4641      	mov	r1, r8
 8008eca:	9805      	ldr	r0, [sp, #20]
 8008ecc:	461a      	mov	r2, r3
 8008ece:	f001 fb5b 	bl	800a588 <__pow5mult>
 8008ed2:	4680      	mov	r8, r0
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	d0ba      	beq.n	8008e4e <_strtod_l+0x68e>
 8008ed8:	4601      	mov	r1, r0
 8008eda:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008edc:	9805      	ldr	r0, [sp, #20]
 8008ede:	f001 faa9 	bl	800a434 <__multiply>
 8008ee2:	900e      	str	r0, [sp, #56]	@ 0x38
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	f43f ae8a 	beq.w	8008bfe <_strtod_l+0x43e>
 8008eea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008eec:	9805      	ldr	r0, [sp, #20]
 8008eee:	f001 f98d 	bl	800a20c <_Bfree>
 8008ef2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ef4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ef6:	2d00      	cmp	r5, #0
 8008ef8:	dc1d      	bgt.n	8008f36 <_strtod_l+0x776>
 8008efa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	dd23      	ble.n	8008f48 <_strtod_l+0x788>
 8008f00:	4649      	mov	r1, r9
 8008f02:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008f04:	9805      	ldr	r0, [sp, #20]
 8008f06:	f001 fb3f 	bl	800a588 <__pow5mult>
 8008f0a:	4681      	mov	r9, r0
 8008f0c:	b9e0      	cbnz	r0, 8008f48 <_strtod_l+0x788>
 8008f0e:	f04f 0900 	mov.w	r9, #0
 8008f12:	e674      	b.n	8008bfe <_strtod_l+0x43e>
 8008f14:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008f18:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008f1c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008f20:	35e2      	adds	r5, #226	@ 0xe2
 8008f22:	fa01 f305 	lsl.w	r3, r1, r5
 8008f26:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f28:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008f2a:	e7ba      	b.n	8008ea2 <_strtod_l+0x6e2>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f30:	2301      	movs	r3, #1
 8008f32:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f34:	e7b5      	b.n	8008ea2 <_strtod_l+0x6e2>
 8008f36:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f38:	9805      	ldr	r0, [sp, #20]
 8008f3a:	462a      	mov	r2, r5
 8008f3c:	f001 fb7e 	bl	800a63c <__lshift>
 8008f40:	901a      	str	r0, [sp, #104]	@ 0x68
 8008f42:	2800      	cmp	r0, #0
 8008f44:	d1d9      	bne.n	8008efa <_strtod_l+0x73a>
 8008f46:	e65a      	b.n	8008bfe <_strtod_l+0x43e>
 8008f48:	2e00      	cmp	r6, #0
 8008f4a:	dd07      	ble.n	8008f5c <_strtod_l+0x79c>
 8008f4c:	4649      	mov	r1, r9
 8008f4e:	9805      	ldr	r0, [sp, #20]
 8008f50:	4632      	mov	r2, r6
 8008f52:	f001 fb73 	bl	800a63c <__lshift>
 8008f56:	4681      	mov	r9, r0
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	d0d8      	beq.n	8008f0e <_strtod_l+0x74e>
 8008f5c:	2f00      	cmp	r7, #0
 8008f5e:	dd08      	ble.n	8008f72 <_strtod_l+0x7b2>
 8008f60:	4641      	mov	r1, r8
 8008f62:	9805      	ldr	r0, [sp, #20]
 8008f64:	463a      	mov	r2, r7
 8008f66:	f001 fb69 	bl	800a63c <__lshift>
 8008f6a:	4680      	mov	r8, r0
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	f43f ae46 	beq.w	8008bfe <_strtod_l+0x43e>
 8008f72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f74:	9805      	ldr	r0, [sp, #20]
 8008f76:	464a      	mov	r2, r9
 8008f78:	f001 fbe8 	bl	800a74c <__mdiff>
 8008f7c:	4604      	mov	r4, r0
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	f43f ae3d 	beq.w	8008bfe <_strtod_l+0x43e>
 8008f84:	68c3      	ldr	r3, [r0, #12]
 8008f86:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f88:	2300      	movs	r3, #0
 8008f8a:	60c3      	str	r3, [r0, #12]
 8008f8c:	4641      	mov	r1, r8
 8008f8e:	f001 fbc1 	bl	800a714 <__mcmp>
 8008f92:	2800      	cmp	r0, #0
 8008f94:	da46      	bge.n	8009024 <_strtod_l+0x864>
 8008f96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f98:	ea53 030a 	orrs.w	r3, r3, sl
 8008f9c:	d16c      	bne.n	8009078 <_strtod_l+0x8b8>
 8008f9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d168      	bne.n	8009078 <_strtod_l+0x8b8>
 8008fa6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008faa:	0d1b      	lsrs	r3, r3, #20
 8008fac:	051b      	lsls	r3, r3, #20
 8008fae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008fb2:	d961      	bls.n	8009078 <_strtod_l+0x8b8>
 8008fb4:	6963      	ldr	r3, [r4, #20]
 8008fb6:	b913      	cbnz	r3, 8008fbe <_strtod_l+0x7fe>
 8008fb8:	6923      	ldr	r3, [r4, #16]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	dd5c      	ble.n	8009078 <_strtod_l+0x8b8>
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	9805      	ldr	r0, [sp, #20]
 8008fc4:	f001 fb3a 	bl	800a63c <__lshift>
 8008fc8:	4641      	mov	r1, r8
 8008fca:	4604      	mov	r4, r0
 8008fcc:	f001 fba2 	bl	800a714 <__mcmp>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	dd51      	ble.n	8009078 <_strtod_l+0x8b8>
 8008fd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008fd8:	9a08      	ldr	r2, [sp, #32]
 8008fda:	0d1b      	lsrs	r3, r3, #20
 8008fdc:	051b      	lsls	r3, r3, #20
 8008fde:	2a00      	cmp	r2, #0
 8008fe0:	d06b      	beq.n	80090ba <_strtod_l+0x8fa>
 8008fe2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008fe6:	d868      	bhi.n	80090ba <_strtod_l+0x8fa>
 8008fe8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008fec:	f67f ae9d 	bls.w	8008d2a <_strtod_l+0x56a>
 8008ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800901c <_strtod_l+0x85c>)
 8008ff2:	4650      	mov	r0, sl
 8008ff4:	4659      	mov	r1, fp
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f7f7 fb36 	bl	8000668 <__aeabi_dmul>
 8008ffc:	4b08      	ldr	r3, [pc, #32]	@ (8009020 <_strtod_l+0x860>)
 8008ffe:	400b      	ands	r3, r1
 8009000:	4682      	mov	sl, r0
 8009002:	468b      	mov	fp, r1
 8009004:	2b00      	cmp	r3, #0
 8009006:	f47f ae05 	bne.w	8008c14 <_strtod_l+0x454>
 800900a:	9a05      	ldr	r2, [sp, #20]
 800900c:	2322      	movs	r3, #34	@ 0x22
 800900e:	6013      	str	r3, [r2, #0]
 8009010:	e600      	b.n	8008c14 <_strtod_l+0x454>
 8009012:	bf00      	nop
 8009014:	0800b5f8 	.word	0x0800b5f8
 8009018:	fffffc02 	.word	0xfffffc02
 800901c:	39500000 	.word	0x39500000
 8009020:	7ff00000 	.word	0x7ff00000
 8009024:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009028:	d165      	bne.n	80090f6 <_strtod_l+0x936>
 800902a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800902c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009030:	b35a      	cbz	r2, 800908a <_strtod_l+0x8ca>
 8009032:	4a9f      	ldr	r2, [pc, #636]	@ (80092b0 <_strtod_l+0xaf0>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d12b      	bne.n	8009090 <_strtod_l+0x8d0>
 8009038:	9b08      	ldr	r3, [sp, #32]
 800903a:	4651      	mov	r1, sl
 800903c:	b303      	cbz	r3, 8009080 <_strtod_l+0x8c0>
 800903e:	4b9d      	ldr	r3, [pc, #628]	@ (80092b4 <_strtod_l+0xaf4>)
 8009040:	465a      	mov	r2, fp
 8009042:	4013      	ands	r3, r2
 8009044:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009048:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800904c:	d81b      	bhi.n	8009086 <_strtod_l+0x8c6>
 800904e:	0d1b      	lsrs	r3, r3, #20
 8009050:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009054:	fa02 f303 	lsl.w	r3, r2, r3
 8009058:	4299      	cmp	r1, r3
 800905a:	d119      	bne.n	8009090 <_strtod_l+0x8d0>
 800905c:	4b96      	ldr	r3, [pc, #600]	@ (80092b8 <_strtod_l+0xaf8>)
 800905e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009060:	429a      	cmp	r2, r3
 8009062:	d102      	bne.n	800906a <_strtod_l+0x8aa>
 8009064:	3101      	adds	r1, #1
 8009066:	f43f adca 	beq.w	8008bfe <_strtod_l+0x43e>
 800906a:	4b92      	ldr	r3, [pc, #584]	@ (80092b4 <_strtod_l+0xaf4>)
 800906c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800906e:	401a      	ands	r2, r3
 8009070:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009074:	f04f 0a00 	mov.w	sl, #0
 8009078:	9b08      	ldr	r3, [sp, #32]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1b8      	bne.n	8008ff0 <_strtod_l+0x830>
 800907e:	e5c9      	b.n	8008c14 <_strtod_l+0x454>
 8009080:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009084:	e7e8      	b.n	8009058 <_strtod_l+0x898>
 8009086:	4613      	mov	r3, r2
 8009088:	e7e6      	b.n	8009058 <_strtod_l+0x898>
 800908a:	ea53 030a 	orrs.w	r3, r3, sl
 800908e:	d0a1      	beq.n	8008fd4 <_strtod_l+0x814>
 8009090:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009092:	b1db      	cbz	r3, 80090cc <_strtod_l+0x90c>
 8009094:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009096:	4213      	tst	r3, r2
 8009098:	d0ee      	beq.n	8009078 <_strtod_l+0x8b8>
 800909a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800909c:	9a08      	ldr	r2, [sp, #32]
 800909e:	4650      	mov	r0, sl
 80090a0:	4659      	mov	r1, fp
 80090a2:	b1bb      	cbz	r3, 80090d4 <_strtod_l+0x914>
 80090a4:	f7ff fb6d 	bl	8008782 <sulp>
 80090a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090ac:	ec53 2b10 	vmov	r2, r3, d0
 80090b0:	f7f7 f924 	bl	80002fc <__adddf3>
 80090b4:	4682      	mov	sl, r0
 80090b6:	468b      	mov	fp, r1
 80090b8:	e7de      	b.n	8009078 <_strtod_l+0x8b8>
 80090ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80090be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80090c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80090c6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80090ca:	e7d5      	b.n	8009078 <_strtod_l+0x8b8>
 80090cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80090ce:	ea13 0f0a 	tst.w	r3, sl
 80090d2:	e7e1      	b.n	8009098 <_strtod_l+0x8d8>
 80090d4:	f7ff fb55 	bl	8008782 <sulp>
 80090d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090dc:	ec53 2b10 	vmov	r2, r3, d0
 80090e0:	f7f7 f90a 	bl	80002f8 <__aeabi_dsub>
 80090e4:	2200      	movs	r2, #0
 80090e6:	2300      	movs	r3, #0
 80090e8:	4682      	mov	sl, r0
 80090ea:	468b      	mov	fp, r1
 80090ec:	f7f7 fd24 	bl	8000b38 <__aeabi_dcmpeq>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d0c1      	beq.n	8009078 <_strtod_l+0x8b8>
 80090f4:	e619      	b.n	8008d2a <_strtod_l+0x56a>
 80090f6:	4641      	mov	r1, r8
 80090f8:	4620      	mov	r0, r4
 80090fa:	f001 fc83 	bl	800aa04 <__ratio>
 80090fe:	ec57 6b10 	vmov	r6, r7, d0
 8009102:	2200      	movs	r2, #0
 8009104:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009108:	4630      	mov	r0, r6
 800910a:	4639      	mov	r1, r7
 800910c:	f7f7 fd28 	bl	8000b60 <__aeabi_dcmple>
 8009110:	2800      	cmp	r0, #0
 8009112:	d06f      	beq.n	80091f4 <_strtod_l+0xa34>
 8009114:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009116:	2b00      	cmp	r3, #0
 8009118:	d17a      	bne.n	8009210 <_strtod_l+0xa50>
 800911a:	f1ba 0f00 	cmp.w	sl, #0
 800911e:	d158      	bne.n	80091d2 <_strtod_l+0xa12>
 8009120:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009122:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009126:	2b00      	cmp	r3, #0
 8009128:	d15a      	bne.n	80091e0 <_strtod_l+0xa20>
 800912a:	4b64      	ldr	r3, [pc, #400]	@ (80092bc <_strtod_l+0xafc>)
 800912c:	2200      	movs	r2, #0
 800912e:	4630      	mov	r0, r6
 8009130:	4639      	mov	r1, r7
 8009132:	f7f7 fd0b 	bl	8000b4c <__aeabi_dcmplt>
 8009136:	2800      	cmp	r0, #0
 8009138:	d159      	bne.n	80091ee <_strtod_l+0xa2e>
 800913a:	4630      	mov	r0, r6
 800913c:	4639      	mov	r1, r7
 800913e:	4b60      	ldr	r3, [pc, #384]	@ (80092c0 <_strtod_l+0xb00>)
 8009140:	2200      	movs	r2, #0
 8009142:	f7f7 fa91 	bl	8000668 <__aeabi_dmul>
 8009146:	4606      	mov	r6, r0
 8009148:	460f      	mov	r7, r1
 800914a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800914e:	9606      	str	r6, [sp, #24]
 8009150:	9307      	str	r3, [sp, #28]
 8009152:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009156:	4d57      	ldr	r5, [pc, #348]	@ (80092b4 <_strtod_l+0xaf4>)
 8009158:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800915c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800915e:	401d      	ands	r5, r3
 8009160:	4b58      	ldr	r3, [pc, #352]	@ (80092c4 <_strtod_l+0xb04>)
 8009162:	429d      	cmp	r5, r3
 8009164:	f040 80b2 	bne.w	80092cc <_strtod_l+0xb0c>
 8009168:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800916a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800916e:	ec4b ab10 	vmov	d0, sl, fp
 8009172:	f001 fb7f 	bl	800a874 <__ulp>
 8009176:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800917a:	ec51 0b10 	vmov	r0, r1, d0
 800917e:	f7f7 fa73 	bl	8000668 <__aeabi_dmul>
 8009182:	4652      	mov	r2, sl
 8009184:	465b      	mov	r3, fp
 8009186:	f7f7 f8b9 	bl	80002fc <__adddf3>
 800918a:	460b      	mov	r3, r1
 800918c:	4949      	ldr	r1, [pc, #292]	@ (80092b4 <_strtod_l+0xaf4>)
 800918e:	4a4e      	ldr	r2, [pc, #312]	@ (80092c8 <_strtod_l+0xb08>)
 8009190:	4019      	ands	r1, r3
 8009192:	4291      	cmp	r1, r2
 8009194:	4682      	mov	sl, r0
 8009196:	d942      	bls.n	800921e <_strtod_l+0xa5e>
 8009198:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800919a:	4b47      	ldr	r3, [pc, #284]	@ (80092b8 <_strtod_l+0xaf8>)
 800919c:	429a      	cmp	r2, r3
 800919e:	d103      	bne.n	80091a8 <_strtod_l+0x9e8>
 80091a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091a2:	3301      	adds	r3, #1
 80091a4:	f43f ad2b 	beq.w	8008bfe <_strtod_l+0x43e>
 80091a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80092b8 <_strtod_l+0xaf8>
 80091ac:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80091b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091b2:	9805      	ldr	r0, [sp, #20]
 80091b4:	f001 f82a 	bl	800a20c <_Bfree>
 80091b8:	9805      	ldr	r0, [sp, #20]
 80091ba:	4649      	mov	r1, r9
 80091bc:	f001 f826 	bl	800a20c <_Bfree>
 80091c0:	9805      	ldr	r0, [sp, #20]
 80091c2:	4641      	mov	r1, r8
 80091c4:	f001 f822 	bl	800a20c <_Bfree>
 80091c8:	9805      	ldr	r0, [sp, #20]
 80091ca:	4621      	mov	r1, r4
 80091cc:	f001 f81e 	bl	800a20c <_Bfree>
 80091d0:	e618      	b.n	8008e04 <_strtod_l+0x644>
 80091d2:	f1ba 0f01 	cmp.w	sl, #1
 80091d6:	d103      	bne.n	80091e0 <_strtod_l+0xa20>
 80091d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f43f ada5 	beq.w	8008d2a <_strtod_l+0x56a>
 80091e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009290 <_strtod_l+0xad0>
 80091e4:	4f35      	ldr	r7, [pc, #212]	@ (80092bc <_strtod_l+0xafc>)
 80091e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80091ea:	2600      	movs	r6, #0
 80091ec:	e7b1      	b.n	8009152 <_strtod_l+0x992>
 80091ee:	4f34      	ldr	r7, [pc, #208]	@ (80092c0 <_strtod_l+0xb00>)
 80091f0:	2600      	movs	r6, #0
 80091f2:	e7aa      	b.n	800914a <_strtod_l+0x98a>
 80091f4:	4b32      	ldr	r3, [pc, #200]	@ (80092c0 <_strtod_l+0xb00>)
 80091f6:	4630      	mov	r0, r6
 80091f8:	4639      	mov	r1, r7
 80091fa:	2200      	movs	r2, #0
 80091fc:	f7f7 fa34 	bl	8000668 <__aeabi_dmul>
 8009200:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009202:	4606      	mov	r6, r0
 8009204:	460f      	mov	r7, r1
 8009206:	2b00      	cmp	r3, #0
 8009208:	d09f      	beq.n	800914a <_strtod_l+0x98a>
 800920a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800920e:	e7a0      	b.n	8009152 <_strtod_l+0x992>
 8009210:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009298 <_strtod_l+0xad8>
 8009214:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009218:	ec57 6b17 	vmov	r6, r7, d7
 800921c:	e799      	b.n	8009152 <_strtod_l+0x992>
 800921e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009222:	9b08      	ldr	r3, [sp, #32]
 8009224:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1c1      	bne.n	80091b0 <_strtod_l+0x9f0>
 800922c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009230:	0d1b      	lsrs	r3, r3, #20
 8009232:	051b      	lsls	r3, r3, #20
 8009234:	429d      	cmp	r5, r3
 8009236:	d1bb      	bne.n	80091b0 <_strtod_l+0x9f0>
 8009238:	4630      	mov	r0, r6
 800923a:	4639      	mov	r1, r7
 800923c:	f7f7 fd0e 	bl	8000c5c <__aeabi_d2lz>
 8009240:	f7f7 f9e4 	bl	800060c <__aeabi_l2d>
 8009244:	4602      	mov	r2, r0
 8009246:	460b      	mov	r3, r1
 8009248:	4630      	mov	r0, r6
 800924a:	4639      	mov	r1, r7
 800924c:	f7f7 f854 	bl	80002f8 <__aeabi_dsub>
 8009250:	460b      	mov	r3, r1
 8009252:	4602      	mov	r2, r0
 8009254:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009258:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800925c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800925e:	ea46 060a 	orr.w	r6, r6, sl
 8009262:	431e      	orrs	r6, r3
 8009264:	d06f      	beq.n	8009346 <_strtod_l+0xb86>
 8009266:	a30e      	add	r3, pc, #56	@ (adr r3, 80092a0 <_strtod_l+0xae0>)
 8009268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926c:	f7f7 fc6e 	bl	8000b4c <__aeabi_dcmplt>
 8009270:	2800      	cmp	r0, #0
 8009272:	f47f accf 	bne.w	8008c14 <_strtod_l+0x454>
 8009276:	a30c      	add	r3, pc, #48	@ (adr r3, 80092a8 <_strtod_l+0xae8>)
 8009278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009280:	f7f7 fc82 	bl	8000b88 <__aeabi_dcmpgt>
 8009284:	2800      	cmp	r0, #0
 8009286:	d093      	beq.n	80091b0 <_strtod_l+0x9f0>
 8009288:	e4c4      	b.n	8008c14 <_strtod_l+0x454>
 800928a:	bf00      	nop
 800928c:	f3af 8000 	nop.w
 8009290:	00000000 	.word	0x00000000
 8009294:	bff00000 	.word	0xbff00000
 8009298:	00000000 	.word	0x00000000
 800929c:	3ff00000 	.word	0x3ff00000
 80092a0:	94a03595 	.word	0x94a03595
 80092a4:	3fdfffff 	.word	0x3fdfffff
 80092a8:	35afe535 	.word	0x35afe535
 80092ac:	3fe00000 	.word	0x3fe00000
 80092b0:	000fffff 	.word	0x000fffff
 80092b4:	7ff00000 	.word	0x7ff00000
 80092b8:	7fefffff 	.word	0x7fefffff
 80092bc:	3ff00000 	.word	0x3ff00000
 80092c0:	3fe00000 	.word	0x3fe00000
 80092c4:	7fe00000 	.word	0x7fe00000
 80092c8:	7c9fffff 	.word	0x7c9fffff
 80092cc:	9b08      	ldr	r3, [sp, #32]
 80092ce:	b323      	cbz	r3, 800931a <_strtod_l+0xb5a>
 80092d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80092d4:	d821      	bhi.n	800931a <_strtod_l+0xb5a>
 80092d6:	a328      	add	r3, pc, #160	@ (adr r3, 8009378 <_strtod_l+0xbb8>)
 80092d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092dc:	4630      	mov	r0, r6
 80092de:	4639      	mov	r1, r7
 80092e0:	f7f7 fc3e 	bl	8000b60 <__aeabi_dcmple>
 80092e4:	b1a0      	cbz	r0, 8009310 <_strtod_l+0xb50>
 80092e6:	4639      	mov	r1, r7
 80092e8:	4630      	mov	r0, r6
 80092ea:	f7f7 fc7f 	bl	8000bec <__aeabi_d2uiz>
 80092ee:	2801      	cmp	r0, #1
 80092f0:	bf38      	it	cc
 80092f2:	2001      	movcc	r0, #1
 80092f4:	f7f7 f93e 	bl	8000574 <__aeabi_ui2d>
 80092f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092fa:	4606      	mov	r6, r0
 80092fc:	460f      	mov	r7, r1
 80092fe:	b9fb      	cbnz	r3, 8009340 <_strtod_l+0xb80>
 8009300:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009304:	9014      	str	r0, [sp, #80]	@ 0x50
 8009306:	9315      	str	r3, [sp, #84]	@ 0x54
 8009308:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800930c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009310:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009312:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009316:	1b5b      	subs	r3, r3, r5
 8009318:	9311      	str	r3, [sp, #68]	@ 0x44
 800931a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800931e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009322:	f001 faa7 	bl	800a874 <__ulp>
 8009326:	4650      	mov	r0, sl
 8009328:	ec53 2b10 	vmov	r2, r3, d0
 800932c:	4659      	mov	r1, fp
 800932e:	f7f7 f99b 	bl	8000668 <__aeabi_dmul>
 8009332:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009336:	f7f6 ffe1 	bl	80002fc <__adddf3>
 800933a:	4682      	mov	sl, r0
 800933c:	468b      	mov	fp, r1
 800933e:	e770      	b.n	8009222 <_strtod_l+0xa62>
 8009340:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009344:	e7e0      	b.n	8009308 <_strtod_l+0xb48>
 8009346:	a30e      	add	r3, pc, #56	@ (adr r3, 8009380 <_strtod_l+0xbc0>)
 8009348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934c:	f7f7 fbfe 	bl	8000b4c <__aeabi_dcmplt>
 8009350:	e798      	b.n	8009284 <_strtod_l+0xac4>
 8009352:	2300      	movs	r3, #0
 8009354:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009356:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009358:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800935a:	6013      	str	r3, [r2, #0]
 800935c:	f7ff ba6d 	b.w	800883a <_strtod_l+0x7a>
 8009360:	2a65      	cmp	r2, #101	@ 0x65
 8009362:	f43f ab66 	beq.w	8008a32 <_strtod_l+0x272>
 8009366:	2a45      	cmp	r2, #69	@ 0x45
 8009368:	f43f ab63 	beq.w	8008a32 <_strtod_l+0x272>
 800936c:	2301      	movs	r3, #1
 800936e:	f7ff bb9e 	b.w	8008aae <_strtod_l+0x2ee>
 8009372:	bf00      	nop
 8009374:	f3af 8000 	nop.w
 8009378:	ffc00000 	.word	0xffc00000
 800937c:	41dfffff 	.word	0x41dfffff
 8009380:	94a03595 	.word	0x94a03595
 8009384:	3fcfffff 	.word	0x3fcfffff

08009388 <strtod>:
 8009388:	460a      	mov	r2, r1
 800938a:	4601      	mov	r1, r0
 800938c:	4802      	ldr	r0, [pc, #8]	@ (8009398 <strtod+0x10>)
 800938e:	4b03      	ldr	r3, [pc, #12]	@ (800939c <strtod+0x14>)
 8009390:	6800      	ldr	r0, [r0, #0]
 8009392:	f7ff ba15 	b.w	80087c0 <_strtod_l>
 8009396:	bf00      	nop
 8009398:	200002c0 	.word	0x200002c0
 800939c:	20000154 	.word	0x20000154

080093a0 <_strtol_l.constprop.0>:
 80093a0:	2b24      	cmp	r3, #36	@ 0x24
 80093a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a6:	4686      	mov	lr, r0
 80093a8:	4690      	mov	r8, r2
 80093aa:	d801      	bhi.n	80093b0 <_strtol_l.constprop.0+0x10>
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d106      	bne.n	80093be <_strtol_l.constprop.0+0x1e>
 80093b0:	f000 fa3c 	bl	800982c <__errno>
 80093b4:	2316      	movs	r3, #22
 80093b6:	6003      	str	r3, [r0, #0]
 80093b8:	2000      	movs	r0, #0
 80093ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093be:	4834      	ldr	r0, [pc, #208]	@ (8009490 <_strtol_l.constprop.0+0xf0>)
 80093c0:	460d      	mov	r5, r1
 80093c2:	462a      	mov	r2, r5
 80093c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80093c8:	5d06      	ldrb	r6, [r0, r4]
 80093ca:	f016 0608 	ands.w	r6, r6, #8
 80093ce:	d1f8      	bne.n	80093c2 <_strtol_l.constprop.0+0x22>
 80093d0:	2c2d      	cmp	r4, #45	@ 0x2d
 80093d2:	d12d      	bne.n	8009430 <_strtol_l.constprop.0+0x90>
 80093d4:	782c      	ldrb	r4, [r5, #0]
 80093d6:	2601      	movs	r6, #1
 80093d8:	1c95      	adds	r5, r2, #2
 80093da:	f033 0210 	bics.w	r2, r3, #16
 80093de:	d109      	bne.n	80093f4 <_strtol_l.constprop.0+0x54>
 80093e0:	2c30      	cmp	r4, #48	@ 0x30
 80093e2:	d12a      	bne.n	800943a <_strtol_l.constprop.0+0x9a>
 80093e4:	782a      	ldrb	r2, [r5, #0]
 80093e6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80093ea:	2a58      	cmp	r2, #88	@ 0x58
 80093ec:	d125      	bne.n	800943a <_strtol_l.constprop.0+0x9a>
 80093ee:	786c      	ldrb	r4, [r5, #1]
 80093f0:	2310      	movs	r3, #16
 80093f2:	3502      	adds	r5, #2
 80093f4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80093f8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80093fc:	2200      	movs	r2, #0
 80093fe:	fbbc f9f3 	udiv	r9, ip, r3
 8009402:	4610      	mov	r0, r2
 8009404:	fb03 ca19 	mls	sl, r3, r9, ip
 8009408:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800940c:	2f09      	cmp	r7, #9
 800940e:	d81b      	bhi.n	8009448 <_strtol_l.constprop.0+0xa8>
 8009410:	463c      	mov	r4, r7
 8009412:	42a3      	cmp	r3, r4
 8009414:	dd27      	ble.n	8009466 <_strtol_l.constprop.0+0xc6>
 8009416:	1c57      	adds	r7, r2, #1
 8009418:	d007      	beq.n	800942a <_strtol_l.constprop.0+0x8a>
 800941a:	4581      	cmp	r9, r0
 800941c:	d320      	bcc.n	8009460 <_strtol_l.constprop.0+0xc0>
 800941e:	d101      	bne.n	8009424 <_strtol_l.constprop.0+0x84>
 8009420:	45a2      	cmp	sl, r4
 8009422:	db1d      	blt.n	8009460 <_strtol_l.constprop.0+0xc0>
 8009424:	fb00 4003 	mla	r0, r0, r3, r4
 8009428:	2201      	movs	r2, #1
 800942a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800942e:	e7eb      	b.n	8009408 <_strtol_l.constprop.0+0x68>
 8009430:	2c2b      	cmp	r4, #43	@ 0x2b
 8009432:	bf04      	itt	eq
 8009434:	782c      	ldrbeq	r4, [r5, #0]
 8009436:	1c95      	addeq	r5, r2, #2
 8009438:	e7cf      	b.n	80093da <_strtol_l.constprop.0+0x3a>
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1da      	bne.n	80093f4 <_strtol_l.constprop.0+0x54>
 800943e:	2c30      	cmp	r4, #48	@ 0x30
 8009440:	bf0c      	ite	eq
 8009442:	2308      	moveq	r3, #8
 8009444:	230a      	movne	r3, #10
 8009446:	e7d5      	b.n	80093f4 <_strtol_l.constprop.0+0x54>
 8009448:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800944c:	2f19      	cmp	r7, #25
 800944e:	d801      	bhi.n	8009454 <_strtol_l.constprop.0+0xb4>
 8009450:	3c37      	subs	r4, #55	@ 0x37
 8009452:	e7de      	b.n	8009412 <_strtol_l.constprop.0+0x72>
 8009454:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009458:	2f19      	cmp	r7, #25
 800945a:	d804      	bhi.n	8009466 <_strtol_l.constprop.0+0xc6>
 800945c:	3c57      	subs	r4, #87	@ 0x57
 800945e:	e7d8      	b.n	8009412 <_strtol_l.constprop.0+0x72>
 8009460:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009464:	e7e1      	b.n	800942a <_strtol_l.constprop.0+0x8a>
 8009466:	1c53      	adds	r3, r2, #1
 8009468:	d108      	bne.n	800947c <_strtol_l.constprop.0+0xdc>
 800946a:	2322      	movs	r3, #34	@ 0x22
 800946c:	f8ce 3000 	str.w	r3, [lr]
 8009470:	4660      	mov	r0, ip
 8009472:	f1b8 0f00 	cmp.w	r8, #0
 8009476:	d0a0      	beq.n	80093ba <_strtol_l.constprop.0+0x1a>
 8009478:	1e69      	subs	r1, r5, #1
 800947a:	e006      	b.n	800948a <_strtol_l.constprop.0+0xea>
 800947c:	b106      	cbz	r6, 8009480 <_strtol_l.constprop.0+0xe0>
 800947e:	4240      	negs	r0, r0
 8009480:	f1b8 0f00 	cmp.w	r8, #0
 8009484:	d099      	beq.n	80093ba <_strtol_l.constprop.0+0x1a>
 8009486:	2a00      	cmp	r2, #0
 8009488:	d1f6      	bne.n	8009478 <_strtol_l.constprop.0+0xd8>
 800948a:	f8c8 1000 	str.w	r1, [r8]
 800948e:	e794      	b.n	80093ba <_strtol_l.constprop.0+0x1a>
 8009490:	0800b621 	.word	0x0800b621

08009494 <strtol>:
 8009494:	4613      	mov	r3, r2
 8009496:	460a      	mov	r2, r1
 8009498:	4601      	mov	r1, r0
 800949a:	4802      	ldr	r0, [pc, #8]	@ (80094a4 <strtol+0x10>)
 800949c:	6800      	ldr	r0, [r0, #0]
 800949e:	f7ff bf7f 	b.w	80093a0 <_strtol_l.constprop.0>
 80094a2:	bf00      	nop
 80094a4:	200002c0 	.word	0x200002c0

080094a8 <std>:
 80094a8:	2300      	movs	r3, #0
 80094aa:	b510      	push	{r4, lr}
 80094ac:	4604      	mov	r4, r0
 80094ae:	e9c0 3300 	strd	r3, r3, [r0]
 80094b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094b6:	6083      	str	r3, [r0, #8]
 80094b8:	8181      	strh	r1, [r0, #12]
 80094ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80094bc:	81c2      	strh	r2, [r0, #14]
 80094be:	6183      	str	r3, [r0, #24]
 80094c0:	4619      	mov	r1, r3
 80094c2:	2208      	movs	r2, #8
 80094c4:	305c      	adds	r0, #92	@ 0x5c
 80094c6:	f000 f8f4 	bl	80096b2 <memset>
 80094ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009500 <std+0x58>)
 80094cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80094ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009504 <std+0x5c>)
 80094d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80094d2:	4b0d      	ldr	r3, [pc, #52]	@ (8009508 <std+0x60>)
 80094d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80094d6:	4b0d      	ldr	r3, [pc, #52]	@ (800950c <std+0x64>)
 80094d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80094da:	4b0d      	ldr	r3, [pc, #52]	@ (8009510 <std+0x68>)
 80094dc:	6224      	str	r4, [r4, #32]
 80094de:	429c      	cmp	r4, r3
 80094e0:	d006      	beq.n	80094f0 <std+0x48>
 80094e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80094e6:	4294      	cmp	r4, r2
 80094e8:	d002      	beq.n	80094f0 <std+0x48>
 80094ea:	33d0      	adds	r3, #208	@ 0xd0
 80094ec:	429c      	cmp	r4, r3
 80094ee:	d105      	bne.n	80094fc <std+0x54>
 80094f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80094f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094f8:	f000 b9c2 	b.w	8009880 <__retarget_lock_init_recursive>
 80094fc:	bd10      	pop	{r4, pc}
 80094fe:	bf00      	nop
 8009500:	0800962d 	.word	0x0800962d
 8009504:	0800964f 	.word	0x0800964f
 8009508:	08009687 	.word	0x08009687
 800950c:	080096ab 	.word	0x080096ab
 8009510:	200006d0 	.word	0x200006d0

08009514 <stdio_exit_handler>:
 8009514:	4a02      	ldr	r2, [pc, #8]	@ (8009520 <stdio_exit_handler+0xc>)
 8009516:	4903      	ldr	r1, [pc, #12]	@ (8009524 <stdio_exit_handler+0x10>)
 8009518:	4803      	ldr	r0, [pc, #12]	@ (8009528 <stdio_exit_handler+0x14>)
 800951a:	f000 b869 	b.w	80095f0 <_fwalk_sglue>
 800951e:	bf00      	nop
 8009520:	20000148 	.word	0x20000148
 8009524:	0800ac15 	.word	0x0800ac15
 8009528:	200002c4 	.word	0x200002c4

0800952c <cleanup_stdio>:
 800952c:	6841      	ldr	r1, [r0, #4]
 800952e:	4b0c      	ldr	r3, [pc, #48]	@ (8009560 <cleanup_stdio+0x34>)
 8009530:	4299      	cmp	r1, r3
 8009532:	b510      	push	{r4, lr}
 8009534:	4604      	mov	r4, r0
 8009536:	d001      	beq.n	800953c <cleanup_stdio+0x10>
 8009538:	f001 fb6c 	bl	800ac14 <_fflush_r>
 800953c:	68a1      	ldr	r1, [r4, #8]
 800953e:	4b09      	ldr	r3, [pc, #36]	@ (8009564 <cleanup_stdio+0x38>)
 8009540:	4299      	cmp	r1, r3
 8009542:	d002      	beq.n	800954a <cleanup_stdio+0x1e>
 8009544:	4620      	mov	r0, r4
 8009546:	f001 fb65 	bl	800ac14 <_fflush_r>
 800954a:	68e1      	ldr	r1, [r4, #12]
 800954c:	4b06      	ldr	r3, [pc, #24]	@ (8009568 <cleanup_stdio+0x3c>)
 800954e:	4299      	cmp	r1, r3
 8009550:	d004      	beq.n	800955c <cleanup_stdio+0x30>
 8009552:	4620      	mov	r0, r4
 8009554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009558:	f001 bb5c 	b.w	800ac14 <_fflush_r>
 800955c:	bd10      	pop	{r4, pc}
 800955e:	bf00      	nop
 8009560:	200006d0 	.word	0x200006d0
 8009564:	20000738 	.word	0x20000738
 8009568:	200007a0 	.word	0x200007a0

0800956c <global_stdio_init.part.0>:
 800956c:	b510      	push	{r4, lr}
 800956e:	4b0b      	ldr	r3, [pc, #44]	@ (800959c <global_stdio_init.part.0+0x30>)
 8009570:	4c0b      	ldr	r4, [pc, #44]	@ (80095a0 <global_stdio_init.part.0+0x34>)
 8009572:	4a0c      	ldr	r2, [pc, #48]	@ (80095a4 <global_stdio_init.part.0+0x38>)
 8009574:	601a      	str	r2, [r3, #0]
 8009576:	4620      	mov	r0, r4
 8009578:	2200      	movs	r2, #0
 800957a:	2104      	movs	r1, #4
 800957c:	f7ff ff94 	bl	80094a8 <std>
 8009580:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009584:	2201      	movs	r2, #1
 8009586:	2109      	movs	r1, #9
 8009588:	f7ff ff8e 	bl	80094a8 <std>
 800958c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009590:	2202      	movs	r2, #2
 8009592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009596:	2112      	movs	r1, #18
 8009598:	f7ff bf86 	b.w	80094a8 <std>
 800959c:	20000808 	.word	0x20000808
 80095a0:	200006d0 	.word	0x200006d0
 80095a4:	08009515 	.word	0x08009515

080095a8 <__sfp_lock_acquire>:
 80095a8:	4801      	ldr	r0, [pc, #4]	@ (80095b0 <__sfp_lock_acquire+0x8>)
 80095aa:	f000 b96a 	b.w	8009882 <__retarget_lock_acquire_recursive>
 80095ae:	bf00      	nop
 80095b0:	20000811 	.word	0x20000811

080095b4 <__sfp_lock_release>:
 80095b4:	4801      	ldr	r0, [pc, #4]	@ (80095bc <__sfp_lock_release+0x8>)
 80095b6:	f000 b965 	b.w	8009884 <__retarget_lock_release_recursive>
 80095ba:	bf00      	nop
 80095bc:	20000811 	.word	0x20000811

080095c0 <__sinit>:
 80095c0:	b510      	push	{r4, lr}
 80095c2:	4604      	mov	r4, r0
 80095c4:	f7ff fff0 	bl	80095a8 <__sfp_lock_acquire>
 80095c8:	6a23      	ldr	r3, [r4, #32]
 80095ca:	b11b      	cbz	r3, 80095d4 <__sinit+0x14>
 80095cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095d0:	f7ff bff0 	b.w	80095b4 <__sfp_lock_release>
 80095d4:	4b04      	ldr	r3, [pc, #16]	@ (80095e8 <__sinit+0x28>)
 80095d6:	6223      	str	r3, [r4, #32]
 80095d8:	4b04      	ldr	r3, [pc, #16]	@ (80095ec <__sinit+0x2c>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1f5      	bne.n	80095cc <__sinit+0xc>
 80095e0:	f7ff ffc4 	bl	800956c <global_stdio_init.part.0>
 80095e4:	e7f2      	b.n	80095cc <__sinit+0xc>
 80095e6:	bf00      	nop
 80095e8:	0800952d 	.word	0x0800952d
 80095ec:	20000808 	.word	0x20000808

080095f0 <_fwalk_sglue>:
 80095f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095f4:	4607      	mov	r7, r0
 80095f6:	4688      	mov	r8, r1
 80095f8:	4614      	mov	r4, r2
 80095fa:	2600      	movs	r6, #0
 80095fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009600:	f1b9 0901 	subs.w	r9, r9, #1
 8009604:	d505      	bpl.n	8009612 <_fwalk_sglue+0x22>
 8009606:	6824      	ldr	r4, [r4, #0]
 8009608:	2c00      	cmp	r4, #0
 800960a:	d1f7      	bne.n	80095fc <_fwalk_sglue+0xc>
 800960c:	4630      	mov	r0, r6
 800960e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009612:	89ab      	ldrh	r3, [r5, #12]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d907      	bls.n	8009628 <_fwalk_sglue+0x38>
 8009618:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800961c:	3301      	adds	r3, #1
 800961e:	d003      	beq.n	8009628 <_fwalk_sglue+0x38>
 8009620:	4629      	mov	r1, r5
 8009622:	4638      	mov	r0, r7
 8009624:	47c0      	blx	r8
 8009626:	4306      	orrs	r6, r0
 8009628:	3568      	adds	r5, #104	@ 0x68
 800962a:	e7e9      	b.n	8009600 <_fwalk_sglue+0x10>

0800962c <__sread>:
 800962c:	b510      	push	{r4, lr}
 800962e:	460c      	mov	r4, r1
 8009630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009634:	f000 f8d6 	bl	80097e4 <_read_r>
 8009638:	2800      	cmp	r0, #0
 800963a:	bfab      	itete	ge
 800963c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800963e:	89a3      	ldrhlt	r3, [r4, #12]
 8009640:	181b      	addge	r3, r3, r0
 8009642:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009646:	bfac      	ite	ge
 8009648:	6563      	strge	r3, [r4, #84]	@ 0x54
 800964a:	81a3      	strhlt	r3, [r4, #12]
 800964c:	bd10      	pop	{r4, pc}

0800964e <__swrite>:
 800964e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009652:	461f      	mov	r7, r3
 8009654:	898b      	ldrh	r3, [r1, #12]
 8009656:	05db      	lsls	r3, r3, #23
 8009658:	4605      	mov	r5, r0
 800965a:	460c      	mov	r4, r1
 800965c:	4616      	mov	r6, r2
 800965e:	d505      	bpl.n	800966c <__swrite+0x1e>
 8009660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009664:	2302      	movs	r3, #2
 8009666:	2200      	movs	r2, #0
 8009668:	f000 f8aa 	bl	80097c0 <_lseek_r>
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009672:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009676:	81a3      	strh	r3, [r4, #12]
 8009678:	4632      	mov	r2, r6
 800967a:	463b      	mov	r3, r7
 800967c:	4628      	mov	r0, r5
 800967e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009682:	f000 b8c1 	b.w	8009808 <_write_r>

08009686 <__sseek>:
 8009686:	b510      	push	{r4, lr}
 8009688:	460c      	mov	r4, r1
 800968a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800968e:	f000 f897 	bl	80097c0 <_lseek_r>
 8009692:	1c43      	adds	r3, r0, #1
 8009694:	89a3      	ldrh	r3, [r4, #12]
 8009696:	bf15      	itete	ne
 8009698:	6560      	strne	r0, [r4, #84]	@ 0x54
 800969a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800969e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80096a2:	81a3      	strheq	r3, [r4, #12]
 80096a4:	bf18      	it	ne
 80096a6:	81a3      	strhne	r3, [r4, #12]
 80096a8:	bd10      	pop	{r4, pc}

080096aa <__sclose>:
 80096aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096ae:	f000 b877 	b.w	80097a0 <_close_r>

080096b2 <memset>:
 80096b2:	4402      	add	r2, r0
 80096b4:	4603      	mov	r3, r0
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d100      	bne.n	80096bc <memset+0xa>
 80096ba:	4770      	bx	lr
 80096bc:	f803 1b01 	strb.w	r1, [r3], #1
 80096c0:	e7f9      	b.n	80096b6 <memset+0x4>

080096c2 <strncmp>:
 80096c2:	b510      	push	{r4, lr}
 80096c4:	b16a      	cbz	r2, 80096e2 <strncmp+0x20>
 80096c6:	3901      	subs	r1, #1
 80096c8:	1884      	adds	r4, r0, r2
 80096ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d103      	bne.n	80096de <strncmp+0x1c>
 80096d6:	42a0      	cmp	r0, r4
 80096d8:	d001      	beq.n	80096de <strncmp+0x1c>
 80096da:	2a00      	cmp	r2, #0
 80096dc:	d1f5      	bne.n	80096ca <strncmp+0x8>
 80096de:	1ad0      	subs	r0, r2, r3
 80096e0:	bd10      	pop	{r4, pc}
 80096e2:	4610      	mov	r0, r2
 80096e4:	e7fc      	b.n	80096e0 <strncmp+0x1e>
	...

080096e8 <strtok>:
 80096e8:	4b16      	ldr	r3, [pc, #88]	@ (8009744 <strtok+0x5c>)
 80096ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ee:	681f      	ldr	r7, [r3, #0]
 80096f0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80096f2:	4605      	mov	r5, r0
 80096f4:	460e      	mov	r6, r1
 80096f6:	b9ec      	cbnz	r4, 8009734 <strtok+0x4c>
 80096f8:	2050      	movs	r0, #80	@ 0x50
 80096fa:	f000 fc7f 	bl	8009ffc <malloc>
 80096fe:	4602      	mov	r2, r0
 8009700:	6478      	str	r0, [r7, #68]	@ 0x44
 8009702:	b920      	cbnz	r0, 800970e <strtok+0x26>
 8009704:	4b10      	ldr	r3, [pc, #64]	@ (8009748 <strtok+0x60>)
 8009706:	4811      	ldr	r0, [pc, #68]	@ (800974c <strtok+0x64>)
 8009708:	215b      	movs	r1, #91	@ 0x5b
 800970a:	f000 f8d5 	bl	80098b8 <__assert_func>
 800970e:	e9c0 4400 	strd	r4, r4, [r0]
 8009712:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009716:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800971a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800971e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009722:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009726:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800972a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800972e:	6184      	str	r4, [r0, #24]
 8009730:	7704      	strb	r4, [r0, #28]
 8009732:	6244      	str	r4, [r0, #36]	@ 0x24
 8009734:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009736:	4631      	mov	r1, r6
 8009738:	4628      	mov	r0, r5
 800973a:	2301      	movs	r3, #1
 800973c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009740:	f000 b806 	b.w	8009750 <__strtok_r>
 8009744:	200002c0 	.word	0x200002c0
 8009748:	0800b721 	.word	0x0800b721
 800974c:	0800b738 	.word	0x0800b738

08009750 <__strtok_r>:
 8009750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009752:	4604      	mov	r4, r0
 8009754:	b908      	cbnz	r0, 800975a <__strtok_r+0xa>
 8009756:	6814      	ldr	r4, [r2, #0]
 8009758:	b144      	cbz	r4, 800976c <__strtok_r+0x1c>
 800975a:	4620      	mov	r0, r4
 800975c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009760:	460f      	mov	r7, r1
 8009762:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009766:	b91e      	cbnz	r6, 8009770 <__strtok_r+0x20>
 8009768:	b965      	cbnz	r5, 8009784 <__strtok_r+0x34>
 800976a:	6015      	str	r5, [r2, #0]
 800976c:	2000      	movs	r0, #0
 800976e:	e005      	b.n	800977c <__strtok_r+0x2c>
 8009770:	42b5      	cmp	r5, r6
 8009772:	d1f6      	bne.n	8009762 <__strtok_r+0x12>
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1f0      	bne.n	800975a <__strtok_r+0xa>
 8009778:	6014      	str	r4, [r2, #0]
 800977a:	7003      	strb	r3, [r0, #0]
 800977c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800977e:	461c      	mov	r4, r3
 8009780:	e00c      	b.n	800979c <__strtok_r+0x4c>
 8009782:	b915      	cbnz	r5, 800978a <__strtok_r+0x3a>
 8009784:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009788:	460e      	mov	r6, r1
 800978a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800978e:	42ab      	cmp	r3, r5
 8009790:	d1f7      	bne.n	8009782 <__strtok_r+0x32>
 8009792:	2b00      	cmp	r3, #0
 8009794:	d0f3      	beq.n	800977e <__strtok_r+0x2e>
 8009796:	2300      	movs	r3, #0
 8009798:	f804 3c01 	strb.w	r3, [r4, #-1]
 800979c:	6014      	str	r4, [r2, #0]
 800979e:	e7ed      	b.n	800977c <__strtok_r+0x2c>

080097a0 <_close_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	4d06      	ldr	r5, [pc, #24]	@ (80097bc <_close_r+0x1c>)
 80097a4:	2300      	movs	r3, #0
 80097a6:	4604      	mov	r4, r0
 80097a8:	4608      	mov	r0, r1
 80097aa:	602b      	str	r3, [r5, #0]
 80097ac:	f7f8 f8b6 	bl	800191c <_close>
 80097b0:	1c43      	adds	r3, r0, #1
 80097b2:	d102      	bne.n	80097ba <_close_r+0x1a>
 80097b4:	682b      	ldr	r3, [r5, #0]
 80097b6:	b103      	cbz	r3, 80097ba <_close_r+0x1a>
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	2000080c 	.word	0x2000080c

080097c0 <_lseek_r>:
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	4d07      	ldr	r5, [pc, #28]	@ (80097e0 <_lseek_r+0x20>)
 80097c4:	4604      	mov	r4, r0
 80097c6:	4608      	mov	r0, r1
 80097c8:	4611      	mov	r1, r2
 80097ca:	2200      	movs	r2, #0
 80097cc:	602a      	str	r2, [r5, #0]
 80097ce:	461a      	mov	r2, r3
 80097d0:	f7f8 f8cb 	bl	800196a <_lseek>
 80097d4:	1c43      	adds	r3, r0, #1
 80097d6:	d102      	bne.n	80097de <_lseek_r+0x1e>
 80097d8:	682b      	ldr	r3, [r5, #0]
 80097da:	b103      	cbz	r3, 80097de <_lseek_r+0x1e>
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	bd38      	pop	{r3, r4, r5, pc}
 80097e0:	2000080c 	.word	0x2000080c

080097e4 <_read_r>:
 80097e4:	b538      	push	{r3, r4, r5, lr}
 80097e6:	4d07      	ldr	r5, [pc, #28]	@ (8009804 <_read_r+0x20>)
 80097e8:	4604      	mov	r4, r0
 80097ea:	4608      	mov	r0, r1
 80097ec:	4611      	mov	r1, r2
 80097ee:	2200      	movs	r2, #0
 80097f0:	602a      	str	r2, [r5, #0]
 80097f2:	461a      	mov	r2, r3
 80097f4:	f7f8 f859 	bl	80018aa <_read>
 80097f8:	1c43      	adds	r3, r0, #1
 80097fa:	d102      	bne.n	8009802 <_read_r+0x1e>
 80097fc:	682b      	ldr	r3, [r5, #0]
 80097fe:	b103      	cbz	r3, 8009802 <_read_r+0x1e>
 8009800:	6023      	str	r3, [r4, #0]
 8009802:	bd38      	pop	{r3, r4, r5, pc}
 8009804:	2000080c 	.word	0x2000080c

08009808 <_write_r>:
 8009808:	b538      	push	{r3, r4, r5, lr}
 800980a:	4d07      	ldr	r5, [pc, #28]	@ (8009828 <_write_r+0x20>)
 800980c:	4604      	mov	r4, r0
 800980e:	4608      	mov	r0, r1
 8009810:	4611      	mov	r1, r2
 8009812:	2200      	movs	r2, #0
 8009814:	602a      	str	r2, [r5, #0]
 8009816:	461a      	mov	r2, r3
 8009818:	f7f8 f864 	bl	80018e4 <_write>
 800981c:	1c43      	adds	r3, r0, #1
 800981e:	d102      	bne.n	8009826 <_write_r+0x1e>
 8009820:	682b      	ldr	r3, [r5, #0]
 8009822:	b103      	cbz	r3, 8009826 <_write_r+0x1e>
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	bd38      	pop	{r3, r4, r5, pc}
 8009828:	2000080c 	.word	0x2000080c

0800982c <__errno>:
 800982c:	4b01      	ldr	r3, [pc, #4]	@ (8009834 <__errno+0x8>)
 800982e:	6818      	ldr	r0, [r3, #0]
 8009830:	4770      	bx	lr
 8009832:	bf00      	nop
 8009834:	200002c0 	.word	0x200002c0

08009838 <__libc_init_array>:
 8009838:	b570      	push	{r4, r5, r6, lr}
 800983a:	4d0d      	ldr	r5, [pc, #52]	@ (8009870 <__libc_init_array+0x38>)
 800983c:	4c0d      	ldr	r4, [pc, #52]	@ (8009874 <__libc_init_array+0x3c>)
 800983e:	1b64      	subs	r4, r4, r5
 8009840:	10a4      	asrs	r4, r4, #2
 8009842:	2600      	movs	r6, #0
 8009844:	42a6      	cmp	r6, r4
 8009846:	d109      	bne.n	800985c <__libc_init_array+0x24>
 8009848:	4d0b      	ldr	r5, [pc, #44]	@ (8009878 <__libc_init_array+0x40>)
 800984a:	4c0c      	ldr	r4, [pc, #48]	@ (800987c <__libc_init_array+0x44>)
 800984c:	f001 fe72 	bl	800b534 <_init>
 8009850:	1b64      	subs	r4, r4, r5
 8009852:	10a4      	asrs	r4, r4, #2
 8009854:	2600      	movs	r6, #0
 8009856:	42a6      	cmp	r6, r4
 8009858:	d105      	bne.n	8009866 <__libc_init_array+0x2e>
 800985a:	bd70      	pop	{r4, r5, r6, pc}
 800985c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009860:	4798      	blx	r3
 8009862:	3601      	adds	r6, #1
 8009864:	e7ee      	b.n	8009844 <__libc_init_array+0xc>
 8009866:	f855 3b04 	ldr.w	r3, [r5], #4
 800986a:	4798      	blx	r3
 800986c:	3601      	adds	r6, #1
 800986e:	e7f2      	b.n	8009856 <__libc_init_array+0x1e>
 8009870:	0800b9dc 	.word	0x0800b9dc
 8009874:	0800b9dc 	.word	0x0800b9dc
 8009878:	0800b9dc 	.word	0x0800b9dc
 800987c:	0800b9e0 	.word	0x0800b9e0

08009880 <__retarget_lock_init_recursive>:
 8009880:	4770      	bx	lr

08009882 <__retarget_lock_acquire_recursive>:
 8009882:	4770      	bx	lr

08009884 <__retarget_lock_release_recursive>:
 8009884:	4770      	bx	lr

08009886 <memcpy>:
 8009886:	440a      	add	r2, r1
 8009888:	4291      	cmp	r1, r2
 800988a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800988e:	d100      	bne.n	8009892 <memcpy+0xc>
 8009890:	4770      	bx	lr
 8009892:	b510      	push	{r4, lr}
 8009894:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009898:	f803 4f01 	strb.w	r4, [r3, #1]!
 800989c:	4291      	cmp	r1, r2
 800989e:	d1f9      	bne.n	8009894 <memcpy+0xe>
 80098a0:	bd10      	pop	{r4, pc}
 80098a2:	0000      	movs	r0, r0
 80098a4:	0000      	movs	r0, r0
	...

080098a8 <nan>:
 80098a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80098b0 <nan+0x8>
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	00000000 	.word	0x00000000
 80098b4:	7ff80000 	.word	0x7ff80000

080098b8 <__assert_func>:
 80098b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098ba:	4614      	mov	r4, r2
 80098bc:	461a      	mov	r2, r3
 80098be:	4b09      	ldr	r3, [pc, #36]	@ (80098e4 <__assert_func+0x2c>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4605      	mov	r5, r0
 80098c4:	68d8      	ldr	r0, [r3, #12]
 80098c6:	b954      	cbnz	r4, 80098de <__assert_func+0x26>
 80098c8:	4b07      	ldr	r3, [pc, #28]	@ (80098e8 <__assert_func+0x30>)
 80098ca:	461c      	mov	r4, r3
 80098cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098d0:	9100      	str	r1, [sp, #0]
 80098d2:	462b      	mov	r3, r5
 80098d4:	4905      	ldr	r1, [pc, #20]	@ (80098ec <__assert_func+0x34>)
 80098d6:	f001 f9c5 	bl	800ac64 <fiprintf>
 80098da:	f001 f9e5 	bl	800aca8 <abort>
 80098de:	4b04      	ldr	r3, [pc, #16]	@ (80098f0 <__assert_func+0x38>)
 80098e0:	e7f4      	b.n	80098cc <__assert_func+0x14>
 80098e2:	bf00      	nop
 80098e4:	200002c0 	.word	0x200002c0
 80098e8:	0800b7d5 	.word	0x0800b7d5
 80098ec:	0800b7a7 	.word	0x0800b7a7
 80098f0:	0800b79a 	.word	0x0800b79a

080098f4 <_free_r>:
 80098f4:	b538      	push	{r3, r4, r5, lr}
 80098f6:	4605      	mov	r5, r0
 80098f8:	2900      	cmp	r1, #0
 80098fa:	d041      	beq.n	8009980 <_free_r+0x8c>
 80098fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009900:	1f0c      	subs	r4, r1, #4
 8009902:	2b00      	cmp	r3, #0
 8009904:	bfb8      	it	lt
 8009906:	18e4      	addlt	r4, r4, r3
 8009908:	f000 fc34 	bl	800a174 <__malloc_lock>
 800990c:	4a1d      	ldr	r2, [pc, #116]	@ (8009984 <_free_r+0x90>)
 800990e:	6813      	ldr	r3, [r2, #0]
 8009910:	b933      	cbnz	r3, 8009920 <_free_r+0x2c>
 8009912:	6063      	str	r3, [r4, #4]
 8009914:	6014      	str	r4, [r2, #0]
 8009916:	4628      	mov	r0, r5
 8009918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800991c:	f000 bc30 	b.w	800a180 <__malloc_unlock>
 8009920:	42a3      	cmp	r3, r4
 8009922:	d908      	bls.n	8009936 <_free_r+0x42>
 8009924:	6820      	ldr	r0, [r4, #0]
 8009926:	1821      	adds	r1, r4, r0
 8009928:	428b      	cmp	r3, r1
 800992a:	bf01      	itttt	eq
 800992c:	6819      	ldreq	r1, [r3, #0]
 800992e:	685b      	ldreq	r3, [r3, #4]
 8009930:	1809      	addeq	r1, r1, r0
 8009932:	6021      	streq	r1, [r4, #0]
 8009934:	e7ed      	b.n	8009912 <_free_r+0x1e>
 8009936:	461a      	mov	r2, r3
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	b10b      	cbz	r3, 8009940 <_free_r+0x4c>
 800993c:	42a3      	cmp	r3, r4
 800993e:	d9fa      	bls.n	8009936 <_free_r+0x42>
 8009940:	6811      	ldr	r1, [r2, #0]
 8009942:	1850      	adds	r0, r2, r1
 8009944:	42a0      	cmp	r0, r4
 8009946:	d10b      	bne.n	8009960 <_free_r+0x6c>
 8009948:	6820      	ldr	r0, [r4, #0]
 800994a:	4401      	add	r1, r0
 800994c:	1850      	adds	r0, r2, r1
 800994e:	4283      	cmp	r3, r0
 8009950:	6011      	str	r1, [r2, #0]
 8009952:	d1e0      	bne.n	8009916 <_free_r+0x22>
 8009954:	6818      	ldr	r0, [r3, #0]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	6053      	str	r3, [r2, #4]
 800995a:	4408      	add	r0, r1
 800995c:	6010      	str	r0, [r2, #0]
 800995e:	e7da      	b.n	8009916 <_free_r+0x22>
 8009960:	d902      	bls.n	8009968 <_free_r+0x74>
 8009962:	230c      	movs	r3, #12
 8009964:	602b      	str	r3, [r5, #0]
 8009966:	e7d6      	b.n	8009916 <_free_r+0x22>
 8009968:	6820      	ldr	r0, [r4, #0]
 800996a:	1821      	adds	r1, r4, r0
 800996c:	428b      	cmp	r3, r1
 800996e:	bf04      	itt	eq
 8009970:	6819      	ldreq	r1, [r3, #0]
 8009972:	685b      	ldreq	r3, [r3, #4]
 8009974:	6063      	str	r3, [r4, #4]
 8009976:	bf04      	itt	eq
 8009978:	1809      	addeq	r1, r1, r0
 800997a:	6021      	streq	r1, [r4, #0]
 800997c:	6054      	str	r4, [r2, #4]
 800997e:	e7ca      	b.n	8009916 <_free_r+0x22>
 8009980:	bd38      	pop	{r3, r4, r5, pc}
 8009982:	bf00      	nop
 8009984:	20000818 	.word	0x20000818

08009988 <rshift>:
 8009988:	6903      	ldr	r3, [r0, #16]
 800998a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800998e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009992:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009996:	f100 0414 	add.w	r4, r0, #20
 800999a:	dd45      	ble.n	8009a28 <rshift+0xa0>
 800999c:	f011 011f 	ands.w	r1, r1, #31
 80099a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80099a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80099a8:	d10c      	bne.n	80099c4 <rshift+0x3c>
 80099aa:	f100 0710 	add.w	r7, r0, #16
 80099ae:	4629      	mov	r1, r5
 80099b0:	42b1      	cmp	r1, r6
 80099b2:	d334      	bcc.n	8009a1e <rshift+0x96>
 80099b4:	1a9b      	subs	r3, r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	1eea      	subs	r2, r5, #3
 80099ba:	4296      	cmp	r6, r2
 80099bc:	bf38      	it	cc
 80099be:	2300      	movcc	r3, #0
 80099c0:	4423      	add	r3, r4
 80099c2:	e015      	b.n	80099f0 <rshift+0x68>
 80099c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80099c8:	f1c1 0820 	rsb	r8, r1, #32
 80099cc:	40cf      	lsrs	r7, r1
 80099ce:	f105 0e04 	add.w	lr, r5, #4
 80099d2:	46a1      	mov	r9, r4
 80099d4:	4576      	cmp	r6, lr
 80099d6:	46f4      	mov	ip, lr
 80099d8:	d815      	bhi.n	8009a06 <rshift+0x7e>
 80099da:	1a9a      	subs	r2, r3, r2
 80099dc:	0092      	lsls	r2, r2, #2
 80099de:	3a04      	subs	r2, #4
 80099e0:	3501      	adds	r5, #1
 80099e2:	42ae      	cmp	r6, r5
 80099e4:	bf38      	it	cc
 80099e6:	2200      	movcc	r2, #0
 80099e8:	18a3      	adds	r3, r4, r2
 80099ea:	50a7      	str	r7, [r4, r2]
 80099ec:	b107      	cbz	r7, 80099f0 <rshift+0x68>
 80099ee:	3304      	adds	r3, #4
 80099f0:	1b1a      	subs	r2, r3, r4
 80099f2:	42a3      	cmp	r3, r4
 80099f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80099f8:	bf08      	it	eq
 80099fa:	2300      	moveq	r3, #0
 80099fc:	6102      	str	r2, [r0, #16]
 80099fe:	bf08      	it	eq
 8009a00:	6143      	streq	r3, [r0, #20]
 8009a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a06:	f8dc c000 	ldr.w	ip, [ip]
 8009a0a:	fa0c fc08 	lsl.w	ip, ip, r8
 8009a0e:	ea4c 0707 	orr.w	r7, ip, r7
 8009a12:	f849 7b04 	str.w	r7, [r9], #4
 8009a16:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a1a:	40cf      	lsrs	r7, r1
 8009a1c:	e7da      	b.n	80099d4 <rshift+0x4c>
 8009a1e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009a22:	f847 cf04 	str.w	ip, [r7, #4]!
 8009a26:	e7c3      	b.n	80099b0 <rshift+0x28>
 8009a28:	4623      	mov	r3, r4
 8009a2a:	e7e1      	b.n	80099f0 <rshift+0x68>

08009a2c <__hexdig_fun>:
 8009a2c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009a30:	2b09      	cmp	r3, #9
 8009a32:	d802      	bhi.n	8009a3a <__hexdig_fun+0xe>
 8009a34:	3820      	subs	r0, #32
 8009a36:	b2c0      	uxtb	r0, r0
 8009a38:	4770      	bx	lr
 8009a3a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009a3e:	2b05      	cmp	r3, #5
 8009a40:	d801      	bhi.n	8009a46 <__hexdig_fun+0x1a>
 8009a42:	3847      	subs	r0, #71	@ 0x47
 8009a44:	e7f7      	b.n	8009a36 <__hexdig_fun+0xa>
 8009a46:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009a4a:	2b05      	cmp	r3, #5
 8009a4c:	d801      	bhi.n	8009a52 <__hexdig_fun+0x26>
 8009a4e:	3827      	subs	r0, #39	@ 0x27
 8009a50:	e7f1      	b.n	8009a36 <__hexdig_fun+0xa>
 8009a52:	2000      	movs	r0, #0
 8009a54:	4770      	bx	lr
	...

08009a58 <__gethex>:
 8009a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5c:	b085      	sub	sp, #20
 8009a5e:	468a      	mov	sl, r1
 8009a60:	9302      	str	r3, [sp, #8]
 8009a62:	680b      	ldr	r3, [r1, #0]
 8009a64:	9001      	str	r0, [sp, #4]
 8009a66:	4690      	mov	r8, r2
 8009a68:	1c9c      	adds	r4, r3, #2
 8009a6a:	46a1      	mov	r9, r4
 8009a6c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009a70:	2830      	cmp	r0, #48	@ 0x30
 8009a72:	d0fa      	beq.n	8009a6a <__gethex+0x12>
 8009a74:	eba9 0303 	sub.w	r3, r9, r3
 8009a78:	f1a3 0b02 	sub.w	fp, r3, #2
 8009a7c:	f7ff ffd6 	bl	8009a2c <__hexdig_fun>
 8009a80:	4605      	mov	r5, r0
 8009a82:	2800      	cmp	r0, #0
 8009a84:	d168      	bne.n	8009b58 <__gethex+0x100>
 8009a86:	49a0      	ldr	r1, [pc, #640]	@ (8009d08 <__gethex+0x2b0>)
 8009a88:	2201      	movs	r2, #1
 8009a8a:	4648      	mov	r0, r9
 8009a8c:	f7ff fe19 	bl	80096c2 <strncmp>
 8009a90:	4607      	mov	r7, r0
 8009a92:	2800      	cmp	r0, #0
 8009a94:	d167      	bne.n	8009b66 <__gethex+0x10e>
 8009a96:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009a9a:	4626      	mov	r6, r4
 8009a9c:	f7ff ffc6 	bl	8009a2c <__hexdig_fun>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	d062      	beq.n	8009b6a <__gethex+0x112>
 8009aa4:	4623      	mov	r3, r4
 8009aa6:	7818      	ldrb	r0, [r3, #0]
 8009aa8:	2830      	cmp	r0, #48	@ 0x30
 8009aaa:	4699      	mov	r9, r3
 8009aac:	f103 0301 	add.w	r3, r3, #1
 8009ab0:	d0f9      	beq.n	8009aa6 <__gethex+0x4e>
 8009ab2:	f7ff ffbb 	bl	8009a2c <__hexdig_fun>
 8009ab6:	fab0 f580 	clz	r5, r0
 8009aba:	096d      	lsrs	r5, r5, #5
 8009abc:	f04f 0b01 	mov.w	fp, #1
 8009ac0:	464a      	mov	r2, r9
 8009ac2:	4616      	mov	r6, r2
 8009ac4:	3201      	adds	r2, #1
 8009ac6:	7830      	ldrb	r0, [r6, #0]
 8009ac8:	f7ff ffb0 	bl	8009a2c <__hexdig_fun>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d1f8      	bne.n	8009ac2 <__gethex+0x6a>
 8009ad0:	498d      	ldr	r1, [pc, #564]	@ (8009d08 <__gethex+0x2b0>)
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	f7ff fdf4 	bl	80096c2 <strncmp>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	d13f      	bne.n	8009b5e <__gethex+0x106>
 8009ade:	b944      	cbnz	r4, 8009af2 <__gethex+0x9a>
 8009ae0:	1c74      	adds	r4, r6, #1
 8009ae2:	4622      	mov	r2, r4
 8009ae4:	4616      	mov	r6, r2
 8009ae6:	3201      	adds	r2, #1
 8009ae8:	7830      	ldrb	r0, [r6, #0]
 8009aea:	f7ff ff9f 	bl	8009a2c <__hexdig_fun>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d1f8      	bne.n	8009ae4 <__gethex+0x8c>
 8009af2:	1ba4      	subs	r4, r4, r6
 8009af4:	00a7      	lsls	r7, r4, #2
 8009af6:	7833      	ldrb	r3, [r6, #0]
 8009af8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009afc:	2b50      	cmp	r3, #80	@ 0x50
 8009afe:	d13e      	bne.n	8009b7e <__gethex+0x126>
 8009b00:	7873      	ldrb	r3, [r6, #1]
 8009b02:	2b2b      	cmp	r3, #43	@ 0x2b
 8009b04:	d033      	beq.n	8009b6e <__gethex+0x116>
 8009b06:	2b2d      	cmp	r3, #45	@ 0x2d
 8009b08:	d034      	beq.n	8009b74 <__gethex+0x11c>
 8009b0a:	1c71      	adds	r1, r6, #1
 8009b0c:	2400      	movs	r4, #0
 8009b0e:	7808      	ldrb	r0, [r1, #0]
 8009b10:	f7ff ff8c 	bl	8009a2c <__hexdig_fun>
 8009b14:	1e43      	subs	r3, r0, #1
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	2b18      	cmp	r3, #24
 8009b1a:	d830      	bhi.n	8009b7e <__gethex+0x126>
 8009b1c:	f1a0 0210 	sub.w	r2, r0, #16
 8009b20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009b24:	f7ff ff82 	bl	8009a2c <__hexdig_fun>
 8009b28:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8009b2c:	fa5f fc8c 	uxtb.w	ip, ip
 8009b30:	f1bc 0f18 	cmp.w	ip, #24
 8009b34:	f04f 030a 	mov.w	r3, #10
 8009b38:	d91e      	bls.n	8009b78 <__gethex+0x120>
 8009b3a:	b104      	cbz	r4, 8009b3e <__gethex+0xe6>
 8009b3c:	4252      	negs	r2, r2
 8009b3e:	4417      	add	r7, r2
 8009b40:	f8ca 1000 	str.w	r1, [sl]
 8009b44:	b1ed      	cbz	r5, 8009b82 <__gethex+0x12a>
 8009b46:	f1bb 0f00 	cmp.w	fp, #0
 8009b4a:	bf0c      	ite	eq
 8009b4c:	2506      	moveq	r5, #6
 8009b4e:	2500      	movne	r5, #0
 8009b50:	4628      	mov	r0, r5
 8009b52:	b005      	add	sp, #20
 8009b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b58:	2500      	movs	r5, #0
 8009b5a:	462c      	mov	r4, r5
 8009b5c:	e7b0      	b.n	8009ac0 <__gethex+0x68>
 8009b5e:	2c00      	cmp	r4, #0
 8009b60:	d1c7      	bne.n	8009af2 <__gethex+0x9a>
 8009b62:	4627      	mov	r7, r4
 8009b64:	e7c7      	b.n	8009af6 <__gethex+0x9e>
 8009b66:	464e      	mov	r6, r9
 8009b68:	462f      	mov	r7, r5
 8009b6a:	2501      	movs	r5, #1
 8009b6c:	e7c3      	b.n	8009af6 <__gethex+0x9e>
 8009b6e:	2400      	movs	r4, #0
 8009b70:	1cb1      	adds	r1, r6, #2
 8009b72:	e7cc      	b.n	8009b0e <__gethex+0xb6>
 8009b74:	2401      	movs	r4, #1
 8009b76:	e7fb      	b.n	8009b70 <__gethex+0x118>
 8009b78:	fb03 0002 	mla	r0, r3, r2, r0
 8009b7c:	e7ce      	b.n	8009b1c <__gethex+0xc4>
 8009b7e:	4631      	mov	r1, r6
 8009b80:	e7de      	b.n	8009b40 <__gethex+0xe8>
 8009b82:	eba6 0309 	sub.w	r3, r6, r9
 8009b86:	3b01      	subs	r3, #1
 8009b88:	4629      	mov	r1, r5
 8009b8a:	2b07      	cmp	r3, #7
 8009b8c:	dc0a      	bgt.n	8009ba4 <__gethex+0x14c>
 8009b8e:	9801      	ldr	r0, [sp, #4]
 8009b90:	f000 fafc 	bl	800a18c <_Balloc>
 8009b94:	4604      	mov	r4, r0
 8009b96:	b940      	cbnz	r0, 8009baa <__gethex+0x152>
 8009b98:	4b5c      	ldr	r3, [pc, #368]	@ (8009d0c <__gethex+0x2b4>)
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	21e4      	movs	r1, #228	@ 0xe4
 8009b9e:	485c      	ldr	r0, [pc, #368]	@ (8009d10 <__gethex+0x2b8>)
 8009ba0:	f7ff fe8a 	bl	80098b8 <__assert_func>
 8009ba4:	3101      	adds	r1, #1
 8009ba6:	105b      	asrs	r3, r3, #1
 8009ba8:	e7ef      	b.n	8009b8a <__gethex+0x132>
 8009baa:	f100 0a14 	add.w	sl, r0, #20
 8009bae:	2300      	movs	r3, #0
 8009bb0:	4655      	mov	r5, sl
 8009bb2:	469b      	mov	fp, r3
 8009bb4:	45b1      	cmp	r9, r6
 8009bb6:	d337      	bcc.n	8009c28 <__gethex+0x1d0>
 8009bb8:	f845 bb04 	str.w	fp, [r5], #4
 8009bbc:	eba5 050a 	sub.w	r5, r5, sl
 8009bc0:	10ad      	asrs	r5, r5, #2
 8009bc2:	6125      	str	r5, [r4, #16]
 8009bc4:	4658      	mov	r0, fp
 8009bc6:	f000 fbd3 	bl	800a370 <__hi0bits>
 8009bca:	016d      	lsls	r5, r5, #5
 8009bcc:	f8d8 6000 	ldr.w	r6, [r8]
 8009bd0:	1a2d      	subs	r5, r5, r0
 8009bd2:	42b5      	cmp	r5, r6
 8009bd4:	dd54      	ble.n	8009c80 <__gethex+0x228>
 8009bd6:	1bad      	subs	r5, r5, r6
 8009bd8:	4629      	mov	r1, r5
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f000 ff67 	bl	800aaae <__any_on>
 8009be0:	4681      	mov	r9, r0
 8009be2:	b178      	cbz	r0, 8009c04 <__gethex+0x1ac>
 8009be4:	1e6b      	subs	r3, r5, #1
 8009be6:	1159      	asrs	r1, r3, #5
 8009be8:	f003 021f 	and.w	r2, r3, #31
 8009bec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009bf0:	f04f 0901 	mov.w	r9, #1
 8009bf4:	fa09 f202 	lsl.w	r2, r9, r2
 8009bf8:	420a      	tst	r2, r1
 8009bfa:	d003      	beq.n	8009c04 <__gethex+0x1ac>
 8009bfc:	454b      	cmp	r3, r9
 8009bfe:	dc36      	bgt.n	8009c6e <__gethex+0x216>
 8009c00:	f04f 0902 	mov.w	r9, #2
 8009c04:	4629      	mov	r1, r5
 8009c06:	4620      	mov	r0, r4
 8009c08:	f7ff febe 	bl	8009988 <rshift>
 8009c0c:	442f      	add	r7, r5
 8009c0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c12:	42bb      	cmp	r3, r7
 8009c14:	da42      	bge.n	8009c9c <__gethex+0x244>
 8009c16:	9801      	ldr	r0, [sp, #4]
 8009c18:	4621      	mov	r1, r4
 8009c1a:	f000 faf7 	bl	800a20c <_Bfree>
 8009c1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c20:	2300      	movs	r3, #0
 8009c22:	6013      	str	r3, [r2, #0]
 8009c24:	25a3      	movs	r5, #163	@ 0xa3
 8009c26:	e793      	b.n	8009b50 <__gethex+0xf8>
 8009c28:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009c2c:	2a2e      	cmp	r2, #46	@ 0x2e
 8009c2e:	d012      	beq.n	8009c56 <__gethex+0x1fe>
 8009c30:	2b20      	cmp	r3, #32
 8009c32:	d104      	bne.n	8009c3e <__gethex+0x1e6>
 8009c34:	f845 bb04 	str.w	fp, [r5], #4
 8009c38:	f04f 0b00 	mov.w	fp, #0
 8009c3c:	465b      	mov	r3, fp
 8009c3e:	7830      	ldrb	r0, [r6, #0]
 8009c40:	9303      	str	r3, [sp, #12]
 8009c42:	f7ff fef3 	bl	8009a2c <__hexdig_fun>
 8009c46:	9b03      	ldr	r3, [sp, #12]
 8009c48:	f000 000f 	and.w	r0, r0, #15
 8009c4c:	4098      	lsls	r0, r3
 8009c4e:	ea4b 0b00 	orr.w	fp, fp, r0
 8009c52:	3304      	adds	r3, #4
 8009c54:	e7ae      	b.n	8009bb4 <__gethex+0x15c>
 8009c56:	45b1      	cmp	r9, r6
 8009c58:	d8ea      	bhi.n	8009c30 <__gethex+0x1d8>
 8009c5a:	492b      	ldr	r1, [pc, #172]	@ (8009d08 <__gethex+0x2b0>)
 8009c5c:	9303      	str	r3, [sp, #12]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	4630      	mov	r0, r6
 8009c62:	f7ff fd2e 	bl	80096c2 <strncmp>
 8009c66:	9b03      	ldr	r3, [sp, #12]
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	d1e1      	bne.n	8009c30 <__gethex+0x1d8>
 8009c6c:	e7a2      	b.n	8009bb4 <__gethex+0x15c>
 8009c6e:	1ea9      	subs	r1, r5, #2
 8009c70:	4620      	mov	r0, r4
 8009c72:	f000 ff1c 	bl	800aaae <__any_on>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d0c2      	beq.n	8009c00 <__gethex+0x1a8>
 8009c7a:	f04f 0903 	mov.w	r9, #3
 8009c7e:	e7c1      	b.n	8009c04 <__gethex+0x1ac>
 8009c80:	da09      	bge.n	8009c96 <__gethex+0x23e>
 8009c82:	1b75      	subs	r5, r6, r5
 8009c84:	4621      	mov	r1, r4
 8009c86:	9801      	ldr	r0, [sp, #4]
 8009c88:	462a      	mov	r2, r5
 8009c8a:	f000 fcd7 	bl	800a63c <__lshift>
 8009c8e:	1b7f      	subs	r7, r7, r5
 8009c90:	4604      	mov	r4, r0
 8009c92:	f100 0a14 	add.w	sl, r0, #20
 8009c96:	f04f 0900 	mov.w	r9, #0
 8009c9a:	e7b8      	b.n	8009c0e <__gethex+0x1b6>
 8009c9c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009ca0:	42bd      	cmp	r5, r7
 8009ca2:	dd6f      	ble.n	8009d84 <__gethex+0x32c>
 8009ca4:	1bed      	subs	r5, r5, r7
 8009ca6:	42ae      	cmp	r6, r5
 8009ca8:	dc34      	bgt.n	8009d14 <__gethex+0x2bc>
 8009caa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	d022      	beq.n	8009cf8 <__gethex+0x2a0>
 8009cb2:	2b03      	cmp	r3, #3
 8009cb4:	d024      	beq.n	8009d00 <__gethex+0x2a8>
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d115      	bne.n	8009ce6 <__gethex+0x28e>
 8009cba:	42ae      	cmp	r6, r5
 8009cbc:	d113      	bne.n	8009ce6 <__gethex+0x28e>
 8009cbe:	2e01      	cmp	r6, #1
 8009cc0:	d10b      	bne.n	8009cda <__gethex+0x282>
 8009cc2:	9a02      	ldr	r2, [sp, #8]
 8009cc4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009cc8:	6013      	str	r3, [r2, #0]
 8009cca:	2301      	movs	r3, #1
 8009ccc:	6123      	str	r3, [r4, #16]
 8009cce:	f8ca 3000 	str.w	r3, [sl]
 8009cd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cd4:	2562      	movs	r5, #98	@ 0x62
 8009cd6:	601c      	str	r4, [r3, #0]
 8009cd8:	e73a      	b.n	8009b50 <__gethex+0xf8>
 8009cda:	1e71      	subs	r1, r6, #1
 8009cdc:	4620      	mov	r0, r4
 8009cde:	f000 fee6 	bl	800aaae <__any_on>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d1ed      	bne.n	8009cc2 <__gethex+0x26a>
 8009ce6:	9801      	ldr	r0, [sp, #4]
 8009ce8:	4621      	mov	r1, r4
 8009cea:	f000 fa8f 	bl	800a20c <_Bfree>
 8009cee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	6013      	str	r3, [r2, #0]
 8009cf4:	2550      	movs	r5, #80	@ 0x50
 8009cf6:	e72b      	b.n	8009b50 <__gethex+0xf8>
 8009cf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d1f3      	bne.n	8009ce6 <__gethex+0x28e>
 8009cfe:	e7e0      	b.n	8009cc2 <__gethex+0x26a>
 8009d00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1dd      	bne.n	8009cc2 <__gethex+0x26a>
 8009d06:	e7ee      	b.n	8009ce6 <__gethex+0x28e>
 8009d08:	0800b5bc 	.word	0x0800b5bc
 8009d0c:	0800b7d6 	.word	0x0800b7d6
 8009d10:	0800b7e7 	.word	0x0800b7e7
 8009d14:	1e6f      	subs	r7, r5, #1
 8009d16:	f1b9 0f00 	cmp.w	r9, #0
 8009d1a:	d130      	bne.n	8009d7e <__gethex+0x326>
 8009d1c:	b127      	cbz	r7, 8009d28 <__gethex+0x2d0>
 8009d1e:	4639      	mov	r1, r7
 8009d20:	4620      	mov	r0, r4
 8009d22:	f000 fec4 	bl	800aaae <__any_on>
 8009d26:	4681      	mov	r9, r0
 8009d28:	117a      	asrs	r2, r7, #5
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009d30:	f007 071f 	and.w	r7, r7, #31
 8009d34:	40bb      	lsls	r3, r7
 8009d36:	4213      	tst	r3, r2
 8009d38:	4629      	mov	r1, r5
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	bf18      	it	ne
 8009d3e:	f049 0902 	orrne.w	r9, r9, #2
 8009d42:	f7ff fe21 	bl	8009988 <rshift>
 8009d46:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009d4a:	1b76      	subs	r6, r6, r5
 8009d4c:	2502      	movs	r5, #2
 8009d4e:	f1b9 0f00 	cmp.w	r9, #0
 8009d52:	d047      	beq.n	8009de4 <__gethex+0x38c>
 8009d54:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d015      	beq.n	8009d88 <__gethex+0x330>
 8009d5c:	2b03      	cmp	r3, #3
 8009d5e:	d017      	beq.n	8009d90 <__gethex+0x338>
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d109      	bne.n	8009d78 <__gethex+0x320>
 8009d64:	f019 0f02 	tst.w	r9, #2
 8009d68:	d006      	beq.n	8009d78 <__gethex+0x320>
 8009d6a:	f8da 3000 	ldr.w	r3, [sl]
 8009d6e:	ea49 0903 	orr.w	r9, r9, r3
 8009d72:	f019 0f01 	tst.w	r9, #1
 8009d76:	d10e      	bne.n	8009d96 <__gethex+0x33e>
 8009d78:	f045 0510 	orr.w	r5, r5, #16
 8009d7c:	e032      	b.n	8009de4 <__gethex+0x38c>
 8009d7e:	f04f 0901 	mov.w	r9, #1
 8009d82:	e7d1      	b.n	8009d28 <__gethex+0x2d0>
 8009d84:	2501      	movs	r5, #1
 8009d86:	e7e2      	b.n	8009d4e <__gethex+0x2f6>
 8009d88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d8a:	f1c3 0301 	rsb	r3, r3, #1
 8009d8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d0f0      	beq.n	8009d78 <__gethex+0x320>
 8009d96:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009d9a:	f104 0314 	add.w	r3, r4, #20
 8009d9e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009da2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009da6:	f04f 0c00 	mov.w	ip, #0
 8009daa:	4618      	mov	r0, r3
 8009dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8009db0:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8009db4:	d01b      	beq.n	8009dee <__gethex+0x396>
 8009db6:	3201      	adds	r2, #1
 8009db8:	6002      	str	r2, [r0, #0]
 8009dba:	2d02      	cmp	r5, #2
 8009dbc:	f104 0314 	add.w	r3, r4, #20
 8009dc0:	d13c      	bne.n	8009e3c <__gethex+0x3e4>
 8009dc2:	f8d8 2000 	ldr.w	r2, [r8]
 8009dc6:	3a01      	subs	r2, #1
 8009dc8:	42b2      	cmp	r2, r6
 8009dca:	d109      	bne.n	8009de0 <__gethex+0x388>
 8009dcc:	1171      	asrs	r1, r6, #5
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009dd4:	f006 061f 	and.w	r6, r6, #31
 8009dd8:	fa02 f606 	lsl.w	r6, r2, r6
 8009ddc:	421e      	tst	r6, r3
 8009dde:	d13a      	bne.n	8009e56 <__gethex+0x3fe>
 8009de0:	f045 0520 	orr.w	r5, r5, #32
 8009de4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009de6:	601c      	str	r4, [r3, #0]
 8009de8:	9b02      	ldr	r3, [sp, #8]
 8009dea:	601f      	str	r7, [r3, #0]
 8009dec:	e6b0      	b.n	8009b50 <__gethex+0xf8>
 8009dee:	4299      	cmp	r1, r3
 8009df0:	f843 cc04 	str.w	ip, [r3, #-4]
 8009df4:	d8d9      	bhi.n	8009daa <__gethex+0x352>
 8009df6:	68a3      	ldr	r3, [r4, #8]
 8009df8:	459b      	cmp	fp, r3
 8009dfa:	db17      	blt.n	8009e2c <__gethex+0x3d4>
 8009dfc:	6861      	ldr	r1, [r4, #4]
 8009dfe:	9801      	ldr	r0, [sp, #4]
 8009e00:	3101      	adds	r1, #1
 8009e02:	f000 f9c3 	bl	800a18c <_Balloc>
 8009e06:	4681      	mov	r9, r0
 8009e08:	b918      	cbnz	r0, 8009e12 <__gethex+0x3ba>
 8009e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8009e74 <__gethex+0x41c>)
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	2184      	movs	r1, #132	@ 0x84
 8009e10:	e6c5      	b.n	8009b9e <__gethex+0x146>
 8009e12:	6922      	ldr	r2, [r4, #16]
 8009e14:	3202      	adds	r2, #2
 8009e16:	f104 010c 	add.w	r1, r4, #12
 8009e1a:	0092      	lsls	r2, r2, #2
 8009e1c:	300c      	adds	r0, #12
 8009e1e:	f7ff fd32 	bl	8009886 <memcpy>
 8009e22:	4621      	mov	r1, r4
 8009e24:	9801      	ldr	r0, [sp, #4]
 8009e26:	f000 f9f1 	bl	800a20c <_Bfree>
 8009e2a:	464c      	mov	r4, r9
 8009e2c:	6923      	ldr	r3, [r4, #16]
 8009e2e:	1c5a      	adds	r2, r3, #1
 8009e30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e34:	6122      	str	r2, [r4, #16]
 8009e36:	2201      	movs	r2, #1
 8009e38:	615a      	str	r2, [r3, #20]
 8009e3a:	e7be      	b.n	8009dba <__gethex+0x362>
 8009e3c:	6922      	ldr	r2, [r4, #16]
 8009e3e:	455a      	cmp	r2, fp
 8009e40:	dd0b      	ble.n	8009e5a <__gethex+0x402>
 8009e42:	2101      	movs	r1, #1
 8009e44:	4620      	mov	r0, r4
 8009e46:	f7ff fd9f 	bl	8009988 <rshift>
 8009e4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e4e:	3701      	adds	r7, #1
 8009e50:	42bb      	cmp	r3, r7
 8009e52:	f6ff aee0 	blt.w	8009c16 <__gethex+0x1be>
 8009e56:	2501      	movs	r5, #1
 8009e58:	e7c2      	b.n	8009de0 <__gethex+0x388>
 8009e5a:	f016 061f 	ands.w	r6, r6, #31
 8009e5e:	d0fa      	beq.n	8009e56 <__gethex+0x3fe>
 8009e60:	4453      	add	r3, sl
 8009e62:	f1c6 0620 	rsb	r6, r6, #32
 8009e66:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009e6a:	f000 fa81 	bl	800a370 <__hi0bits>
 8009e6e:	42b0      	cmp	r0, r6
 8009e70:	dbe7      	blt.n	8009e42 <__gethex+0x3ea>
 8009e72:	e7f0      	b.n	8009e56 <__gethex+0x3fe>
 8009e74:	0800b7d6 	.word	0x0800b7d6

08009e78 <L_shift>:
 8009e78:	f1c2 0208 	rsb	r2, r2, #8
 8009e7c:	0092      	lsls	r2, r2, #2
 8009e7e:	b570      	push	{r4, r5, r6, lr}
 8009e80:	f1c2 0620 	rsb	r6, r2, #32
 8009e84:	6843      	ldr	r3, [r0, #4]
 8009e86:	6804      	ldr	r4, [r0, #0]
 8009e88:	fa03 f506 	lsl.w	r5, r3, r6
 8009e8c:	432c      	orrs	r4, r5
 8009e8e:	40d3      	lsrs	r3, r2
 8009e90:	6004      	str	r4, [r0, #0]
 8009e92:	f840 3f04 	str.w	r3, [r0, #4]!
 8009e96:	4288      	cmp	r0, r1
 8009e98:	d3f4      	bcc.n	8009e84 <L_shift+0xc>
 8009e9a:	bd70      	pop	{r4, r5, r6, pc}

08009e9c <__match>:
 8009e9c:	b530      	push	{r4, r5, lr}
 8009e9e:	6803      	ldr	r3, [r0, #0]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ea6:	b914      	cbnz	r4, 8009eae <__match+0x12>
 8009ea8:	6003      	str	r3, [r0, #0]
 8009eaa:	2001      	movs	r0, #1
 8009eac:	bd30      	pop	{r4, r5, pc}
 8009eae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eb2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009eb6:	2d19      	cmp	r5, #25
 8009eb8:	bf98      	it	ls
 8009eba:	3220      	addls	r2, #32
 8009ebc:	42a2      	cmp	r2, r4
 8009ebe:	d0f0      	beq.n	8009ea2 <__match+0x6>
 8009ec0:	2000      	movs	r0, #0
 8009ec2:	e7f3      	b.n	8009eac <__match+0x10>

08009ec4 <__hexnan>:
 8009ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec8:	680b      	ldr	r3, [r1, #0]
 8009eca:	6801      	ldr	r1, [r0, #0]
 8009ecc:	115e      	asrs	r6, r3, #5
 8009ece:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009ed2:	f013 031f 	ands.w	r3, r3, #31
 8009ed6:	b087      	sub	sp, #28
 8009ed8:	bf18      	it	ne
 8009eda:	3604      	addne	r6, #4
 8009edc:	2500      	movs	r5, #0
 8009ede:	1f37      	subs	r7, r6, #4
 8009ee0:	4682      	mov	sl, r0
 8009ee2:	4690      	mov	r8, r2
 8009ee4:	9301      	str	r3, [sp, #4]
 8009ee6:	f846 5c04 	str.w	r5, [r6, #-4]
 8009eea:	46b9      	mov	r9, r7
 8009eec:	463c      	mov	r4, r7
 8009eee:	9502      	str	r5, [sp, #8]
 8009ef0:	46ab      	mov	fp, r5
 8009ef2:	784a      	ldrb	r2, [r1, #1]
 8009ef4:	1c4b      	adds	r3, r1, #1
 8009ef6:	9303      	str	r3, [sp, #12]
 8009ef8:	b342      	cbz	r2, 8009f4c <__hexnan+0x88>
 8009efa:	4610      	mov	r0, r2
 8009efc:	9105      	str	r1, [sp, #20]
 8009efe:	9204      	str	r2, [sp, #16]
 8009f00:	f7ff fd94 	bl	8009a2c <__hexdig_fun>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d151      	bne.n	8009fac <__hexnan+0xe8>
 8009f08:	9a04      	ldr	r2, [sp, #16]
 8009f0a:	9905      	ldr	r1, [sp, #20]
 8009f0c:	2a20      	cmp	r2, #32
 8009f0e:	d818      	bhi.n	8009f42 <__hexnan+0x7e>
 8009f10:	9b02      	ldr	r3, [sp, #8]
 8009f12:	459b      	cmp	fp, r3
 8009f14:	dd13      	ble.n	8009f3e <__hexnan+0x7a>
 8009f16:	454c      	cmp	r4, r9
 8009f18:	d206      	bcs.n	8009f28 <__hexnan+0x64>
 8009f1a:	2d07      	cmp	r5, #7
 8009f1c:	dc04      	bgt.n	8009f28 <__hexnan+0x64>
 8009f1e:	462a      	mov	r2, r5
 8009f20:	4649      	mov	r1, r9
 8009f22:	4620      	mov	r0, r4
 8009f24:	f7ff ffa8 	bl	8009e78 <L_shift>
 8009f28:	4544      	cmp	r4, r8
 8009f2a:	d952      	bls.n	8009fd2 <__hexnan+0x10e>
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	f1a4 0904 	sub.w	r9, r4, #4
 8009f32:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f36:	f8cd b008 	str.w	fp, [sp, #8]
 8009f3a:	464c      	mov	r4, r9
 8009f3c:	461d      	mov	r5, r3
 8009f3e:	9903      	ldr	r1, [sp, #12]
 8009f40:	e7d7      	b.n	8009ef2 <__hexnan+0x2e>
 8009f42:	2a29      	cmp	r2, #41	@ 0x29
 8009f44:	d157      	bne.n	8009ff6 <__hexnan+0x132>
 8009f46:	3102      	adds	r1, #2
 8009f48:	f8ca 1000 	str.w	r1, [sl]
 8009f4c:	f1bb 0f00 	cmp.w	fp, #0
 8009f50:	d051      	beq.n	8009ff6 <__hexnan+0x132>
 8009f52:	454c      	cmp	r4, r9
 8009f54:	d206      	bcs.n	8009f64 <__hexnan+0xa0>
 8009f56:	2d07      	cmp	r5, #7
 8009f58:	dc04      	bgt.n	8009f64 <__hexnan+0xa0>
 8009f5a:	462a      	mov	r2, r5
 8009f5c:	4649      	mov	r1, r9
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f7ff ff8a 	bl	8009e78 <L_shift>
 8009f64:	4544      	cmp	r4, r8
 8009f66:	d936      	bls.n	8009fd6 <__hexnan+0x112>
 8009f68:	f1a8 0204 	sub.w	r2, r8, #4
 8009f6c:	4623      	mov	r3, r4
 8009f6e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009f72:	f842 1f04 	str.w	r1, [r2, #4]!
 8009f76:	429f      	cmp	r7, r3
 8009f78:	d2f9      	bcs.n	8009f6e <__hexnan+0xaa>
 8009f7a:	1b3b      	subs	r3, r7, r4
 8009f7c:	f023 0303 	bic.w	r3, r3, #3
 8009f80:	3304      	adds	r3, #4
 8009f82:	3401      	adds	r4, #1
 8009f84:	3e03      	subs	r6, #3
 8009f86:	42b4      	cmp	r4, r6
 8009f88:	bf88      	it	hi
 8009f8a:	2304      	movhi	r3, #4
 8009f8c:	4443      	add	r3, r8
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f843 2b04 	str.w	r2, [r3], #4
 8009f94:	429f      	cmp	r7, r3
 8009f96:	d2fb      	bcs.n	8009f90 <__hexnan+0xcc>
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	b91b      	cbnz	r3, 8009fa4 <__hexnan+0xe0>
 8009f9c:	4547      	cmp	r7, r8
 8009f9e:	d128      	bne.n	8009ff2 <__hexnan+0x12e>
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	603b      	str	r3, [r7, #0]
 8009fa4:	2005      	movs	r0, #5
 8009fa6:	b007      	add	sp, #28
 8009fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fac:	3501      	adds	r5, #1
 8009fae:	2d08      	cmp	r5, #8
 8009fb0:	f10b 0b01 	add.w	fp, fp, #1
 8009fb4:	dd06      	ble.n	8009fc4 <__hexnan+0x100>
 8009fb6:	4544      	cmp	r4, r8
 8009fb8:	d9c1      	bls.n	8009f3e <__hexnan+0x7a>
 8009fba:	2300      	movs	r3, #0
 8009fbc:	f844 3c04 	str.w	r3, [r4, #-4]
 8009fc0:	2501      	movs	r5, #1
 8009fc2:	3c04      	subs	r4, #4
 8009fc4:	6822      	ldr	r2, [r4, #0]
 8009fc6:	f000 000f 	and.w	r0, r0, #15
 8009fca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009fce:	6020      	str	r0, [r4, #0]
 8009fd0:	e7b5      	b.n	8009f3e <__hexnan+0x7a>
 8009fd2:	2508      	movs	r5, #8
 8009fd4:	e7b3      	b.n	8009f3e <__hexnan+0x7a>
 8009fd6:	9b01      	ldr	r3, [sp, #4]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d0dd      	beq.n	8009f98 <__hexnan+0xd4>
 8009fdc:	f1c3 0320 	rsb	r3, r3, #32
 8009fe0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009fe4:	40da      	lsrs	r2, r3
 8009fe6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009fea:	4013      	ands	r3, r2
 8009fec:	f846 3c04 	str.w	r3, [r6, #-4]
 8009ff0:	e7d2      	b.n	8009f98 <__hexnan+0xd4>
 8009ff2:	3f04      	subs	r7, #4
 8009ff4:	e7d0      	b.n	8009f98 <__hexnan+0xd4>
 8009ff6:	2004      	movs	r0, #4
 8009ff8:	e7d5      	b.n	8009fa6 <__hexnan+0xe2>
	...

08009ffc <malloc>:
 8009ffc:	4b02      	ldr	r3, [pc, #8]	@ (800a008 <malloc+0xc>)
 8009ffe:	4601      	mov	r1, r0
 800a000:	6818      	ldr	r0, [r3, #0]
 800a002:	f000 b825 	b.w	800a050 <_malloc_r>
 800a006:	bf00      	nop
 800a008:	200002c0 	.word	0x200002c0

0800a00c <sbrk_aligned>:
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	4e0f      	ldr	r6, [pc, #60]	@ (800a04c <sbrk_aligned+0x40>)
 800a010:	460c      	mov	r4, r1
 800a012:	6831      	ldr	r1, [r6, #0]
 800a014:	4605      	mov	r5, r0
 800a016:	b911      	cbnz	r1, 800a01e <sbrk_aligned+0x12>
 800a018:	f000 fe36 	bl	800ac88 <_sbrk_r>
 800a01c:	6030      	str	r0, [r6, #0]
 800a01e:	4621      	mov	r1, r4
 800a020:	4628      	mov	r0, r5
 800a022:	f000 fe31 	bl	800ac88 <_sbrk_r>
 800a026:	1c43      	adds	r3, r0, #1
 800a028:	d103      	bne.n	800a032 <sbrk_aligned+0x26>
 800a02a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a02e:	4620      	mov	r0, r4
 800a030:	bd70      	pop	{r4, r5, r6, pc}
 800a032:	1cc4      	adds	r4, r0, #3
 800a034:	f024 0403 	bic.w	r4, r4, #3
 800a038:	42a0      	cmp	r0, r4
 800a03a:	d0f8      	beq.n	800a02e <sbrk_aligned+0x22>
 800a03c:	1a21      	subs	r1, r4, r0
 800a03e:	4628      	mov	r0, r5
 800a040:	f000 fe22 	bl	800ac88 <_sbrk_r>
 800a044:	3001      	adds	r0, #1
 800a046:	d1f2      	bne.n	800a02e <sbrk_aligned+0x22>
 800a048:	e7ef      	b.n	800a02a <sbrk_aligned+0x1e>
 800a04a:	bf00      	nop
 800a04c:	20000814 	.word	0x20000814

0800a050 <_malloc_r>:
 800a050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a054:	1ccd      	adds	r5, r1, #3
 800a056:	f025 0503 	bic.w	r5, r5, #3
 800a05a:	3508      	adds	r5, #8
 800a05c:	2d0c      	cmp	r5, #12
 800a05e:	bf38      	it	cc
 800a060:	250c      	movcc	r5, #12
 800a062:	2d00      	cmp	r5, #0
 800a064:	4606      	mov	r6, r0
 800a066:	db01      	blt.n	800a06c <_malloc_r+0x1c>
 800a068:	42a9      	cmp	r1, r5
 800a06a:	d904      	bls.n	800a076 <_malloc_r+0x26>
 800a06c:	230c      	movs	r3, #12
 800a06e:	6033      	str	r3, [r6, #0]
 800a070:	2000      	movs	r0, #0
 800a072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a076:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a14c <_malloc_r+0xfc>
 800a07a:	f000 f87b 	bl	800a174 <__malloc_lock>
 800a07e:	f8d8 3000 	ldr.w	r3, [r8]
 800a082:	461c      	mov	r4, r3
 800a084:	bb44      	cbnz	r4, 800a0d8 <_malloc_r+0x88>
 800a086:	4629      	mov	r1, r5
 800a088:	4630      	mov	r0, r6
 800a08a:	f7ff ffbf 	bl	800a00c <sbrk_aligned>
 800a08e:	1c43      	adds	r3, r0, #1
 800a090:	4604      	mov	r4, r0
 800a092:	d158      	bne.n	800a146 <_malloc_r+0xf6>
 800a094:	f8d8 4000 	ldr.w	r4, [r8]
 800a098:	4627      	mov	r7, r4
 800a09a:	2f00      	cmp	r7, #0
 800a09c:	d143      	bne.n	800a126 <_malloc_r+0xd6>
 800a09e:	2c00      	cmp	r4, #0
 800a0a0:	d04b      	beq.n	800a13a <_malloc_r+0xea>
 800a0a2:	6823      	ldr	r3, [r4, #0]
 800a0a4:	4639      	mov	r1, r7
 800a0a6:	4630      	mov	r0, r6
 800a0a8:	eb04 0903 	add.w	r9, r4, r3
 800a0ac:	f000 fdec 	bl	800ac88 <_sbrk_r>
 800a0b0:	4581      	cmp	r9, r0
 800a0b2:	d142      	bne.n	800a13a <_malloc_r+0xea>
 800a0b4:	6821      	ldr	r1, [r4, #0]
 800a0b6:	1a6d      	subs	r5, r5, r1
 800a0b8:	4629      	mov	r1, r5
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	f7ff ffa6 	bl	800a00c <sbrk_aligned>
 800a0c0:	3001      	adds	r0, #1
 800a0c2:	d03a      	beq.n	800a13a <_malloc_r+0xea>
 800a0c4:	6823      	ldr	r3, [r4, #0]
 800a0c6:	442b      	add	r3, r5
 800a0c8:	6023      	str	r3, [r4, #0]
 800a0ca:	f8d8 3000 	ldr.w	r3, [r8]
 800a0ce:	685a      	ldr	r2, [r3, #4]
 800a0d0:	bb62      	cbnz	r2, 800a12c <_malloc_r+0xdc>
 800a0d2:	f8c8 7000 	str.w	r7, [r8]
 800a0d6:	e00f      	b.n	800a0f8 <_malloc_r+0xa8>
 800a0d8:	6822      	ldr	r2, [r4, #0]
 800a0da:	1b52      	subs	r2, r2, r5
 800a0dc:	d420      	bmi.n	800a120 <_malloc_r+0xd0>
 800a0de:	2a0b      	cmp	r2, #11
 800a0e0:	d917      	bls.n	800a112 <_malloc_r+0xc2>
 800a0e2:	1961      	adds	r1, r4, r5
 800a0e4:	42a3      	cmp	r3, r4
 800a0e6:	6025      	str	r5, [r4, #0]
 800a0e8:	bf18      	it	ne
 800a0ea:	6059      	strne	r1, [r3, #4]
 800a0ec:	6863      	ldr	r3, [r4, #4]
 800a0ee:	bf08      	it	eq
 800a0f0:	f8c8 1000 	streq.w	r1, [r8]
 800a0f4:	5162      	str	r2, [r4, r5]
 800a0f6:	604b      	str	r3, [r1, #4]
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	f000 f841 	bl	800a180 <__malloc_unlock>
 800a0fe:	f104 000b 	add.w	r0, r4, #11
 800a102:	1d23      	adds	r3, r4, #4
 800a104:	f020 0007 	bic.w	r0, r0, #7
 800a108:	1ac2      	subs	r2, r0, r3
 800a10a:	bf1c      	itt	ne
 800a10c:	1a1b      	subne	r3, r3, r0
 800a10e:	50a3      	strne	r3, [r4, r2]
 800a110:	e7af      	b.n	800a072 <_malloc_r+0x22>
 800a112:	6862      	ldr	r2, [r4, #4]
 800a114:	42a3      	cmp	r3, r4
 800a116:	bf0c      	ite	eq
 800a118:	f8c8 2000 	streq.w	r2, [r8]
 800a11c:	605a      	strne	r2, [r3, #4]
 800a11e:	e7eb      	b.n	800a0f8 <_malloc_r+0xa8>
 800a120:	4623      	mov	r3, r4
 800a122:	6864      	ldr	r4, [r4, #4]
 800a124:	e7ae      	b.n	800a084 <_malloc_r+0x34>
 800a126:	463c      	mov	r4, r7
 800a128:	687f      	ldr	r7, [r7, #4]
 800a12a:	e7b6      	b.n	800a09a <_malloc_r+0x4a>
 800a12c:	461a      	mov	r2, r3
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	42a3      	cmp	r3, r4
 800a132:	d1fb      	bne.n	800a12c <_malloc_r+0xdc>
 800a134:	2300      	movs	r3, #0
 800a136:	6053      	str	r3, [r2, #4]
 800a138:	e7de      	b.n	800a0f8 <_malloc_r+0xa8>
 800a13a:	230c      	movs	r3, #12
 800a13c:	6033      	str	r3, [r6, #0]
 800a13e:	4630      	mov	r0, r6
 800a140:	f000 f81e 	bl	800a180 <__malloc_unlock>
 800a144:	e794      	b.n	800a070 <_malloc_r+0x20>
 800a146:	6005      	str	r5, [r0, #0]
 800a148:	e7d6      	b.n	800a0f8 <_malloc_r+0xa8>
 800a14a:	bf00      	nop
 800a14c:	20000818 	.word	0x20000818

0800a150 <__ascii_mbtowc>:
 800a150:	b082      	sub	sp, #8
 800a152:	b901      	cbnz	r1, 800a156 <__ascii_mbtowc+0x6>
 800a154:	a901      	add	r1, sp, #4
 800a156:	b142      	cbz	r2, 800a16a <__ascii_mbtowc+0x1a>
 800a158:	b14b      	cbz	r3, 800a16e <__ascii_mbtowc+0x1e>
 800a15a:	7813      	ldrb	r3, [r2, #0]
 800a15c:	600b      	str	r3, [r1, #0]
 800a15e:	7812      	ldrb	r2, [r2, #0]
 800a160:	1e10      	subs	r0, r2, #0
 800a162:	bf18      	it	ne
 800a164:	2001      	movne	r0, #1
 800a166:	b002      	add	sp, #8
 800a168:	4770      	bx	lr
 800a16a:	4610      	mov	r0, r2
 800a16c:	e7fb      	b.n	800a166 <__ascii_mbtowc+0x16>
 800a16e:	f06f 0001 	mvn.w	r0, #1
 800a172:	e7f8      	b.n	800a166 <__ascii_mbtowc+0x16>

0800a174 <__malloc_lock>:
 800a174:	4801      	ldr	r0, [pc, #4]	@ (800a17c <__malloc_lock+0x8>)
 800a176:	f7ff bb84 	b.w	8009882 <__retarget_lock_acquire_recursive>
 800a17a:	bf00      	nop
 800a17c:	20000810 	.word	0x20000810

0800a180 <__malloc_unlock>:
 800a180:	4801      	ldr	r0, [pc, #4]	@ (800a188 <__malloc_unlock+0x8>)
 800a182:	f7ff bb7f 	b.w	8009884 <__retarget_lock_release_recursive>
 800a186:	bf00      	nop
 800a188:	20000810 	.word	0x20000810

0800a18c <_Balloc>:
 800a18c:	b570      	push	{r4, r5, r6, lr}
 800a18e:	69c6      	ldr	r6, [r0, #28]
 800a190:	4604      	mov	r4, r0
 800a192:	460d      	mov	r5, r1
 800a194:	b976      	cbnz	r6, 800a1b4 <_Balloc+0x28>
 800a196:	2010      	movs	r0, #16
 800a198:	f7ff ff30 	bl	8009ffc <malloc>
 800a19c:	4602      	mov	r2, r0
 800a19e:	61e0      	str	r0, [r4, #28]
 800a1a0:	b920      	cbnz	r0, 800a1ac <_Balloc+0x20>
 800a1a2:	4b18      	ldr	r3, [pc, #96]	@ (800a204 <_Balloc+0x78>)
 800a1a4:	4818      	ldr	r0, [pc, #96]	@ (800a208 <_Balloc+0x7c>)
 800a1a6:	216b      	movs	r1, #107	@ 0x6b
 800a1a8:	f7ff fb86 	bl	80098b8 <__assert_func>
 800a1ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1b0:	6006      	str	r6, [r0, #0]
 800a1b2:	60c6      	str	r6, [r0, #12]
 800a1b4:	69e6      	ldr	r6, [r4, #28]
 800a1b6:	68f3      	ldr	r3, [r6, #12]
 800a1b8:	b183      	cbz	r3, 800a1dc <_Balloc+0x50>
 800a1ba:	69e3      	ldr	r3, [r4, #28]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1c2:	b9b8      	cbnz	r0, 800a1f4 <_Balloc+0x68>
 800a1c4:	2101      	movs	r1, #1
 800a1c6:	fa01 f605 	lsl.w	r6, r1, r5
 800a1ca:	1d72      	adds	r2, r6, #5
 800a1cc:	0092      	lsls	r2, r2, #2
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	f000 fd71 	bl	800acb6 <_calloc_r>
 800a1d4:	b160      	cbz	r0, 800a1f0 <_Balloc+0x64>
 800a1d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a1da:	e00e      	b.n	800a1fa <_Balloc+0x6e>
 800a1dc:	2221      	movs	r2, #33	@ 0x21
 800a1de:	2104      	movs	r1, #4
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f000 fd68 	bl	800acb6 <_calloc_r>
 800a1e6:	69e3      	ldr	r3, [r4, #28]
 800a1e8:	60f0      	str	r0, [r6, #12]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d1e4      	bne.n	800a1ba <_Balloc+0x2e>
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	bd70      	pop	{r4, r5, r6, pc}
 800a1f4:	6802      	ldr	r2, [r0, #0]
 800a1f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a200:	e7f7      	b.n	800a1f2 <_Balloc+0x66>
 800a202:	bf00      	nop
 800a204:	0800b721 	.word	0x0800b721
 800a208:	0800b847 	.word	0x0800b847

0800a20c <_Bfree>:
 800a20c:	b570      	push	{r4, r5, r6, lr}
 800a20e:	69c6      	ldr	r6, [r0, #28]
 800a210:	4605      	mov	r5, r0
 800a212:	460c      	mov	r4, r1
 800a214:	b976      	cbnz	r6, 800a234 <_Bfree+0x28>
 800a216:	2010      	movs	r0, #16
 800a218:	f7ff fef0 	bl	8009ffc <malloc>
 800a21c:	4602      	mov	r2, r0
 800a21e:	61e8      	str	r0, [r5, #28]
 800a220:	b920      	cbnz	r0, 800a22c <_Bfree+0x20>
 800a222:	4b09      	ldr	r3, [pc, #36]	@ (800a248 <_Bfree+0x3c>)
 800a224:	4809      	ldr	r0, [pc, #36]	@ (800a24c <_Bfree+0x40>)
 800a226:	218f      	movs	r1, #143	@ 0x8f
 800a228:	f7ff fb46 	bl	80098b8 <__assert_func>
 800a22c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a230:	6006      	str	r6, [r0, #0]
 800a232:	60c6      	str	r6, [r0, #12]
 800a234:	b13c      	cbz	r4, 800a246 <_Bfree+0x3a>
 800a236:	69eb      	ldr	r3, [r5, #28]
 800a238:	6862      	ldr	r2, [r4, #4]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a240:	6021      	str	r1, [r4, #0]
 800a242:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a246:	bd70      	pop	{r4, r5, r6, pc}
 800a248:	0800b721 	.word	0x0800b721
 800a24c:	0800b847 	.word	0x0800b847

0800a250 <__multadd>:
 800a250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a254:	690d      	ldr	r5, [r1, #16]
 800a256:	4607      	mov	r7, r0
 800a258:	460c      	mov	r4, r1
 800a25a:	461e      	mov	r6, r3
 800a25c:	f101 0c14 	add.w	ip, r1, #20
 800a260:	2000      	movs	r0, #0
 800a262:	f8dc 3000 	ldr.w	r3, [ip]
 800a266:	b299      	uxth	r1, r3
 800a268:	fb02 6101 	mla	r1, r2, r1, r6
 800a26c:	0c1e      	lsrs	r6, r3, #16
 800a26e:	0c0b      	lsrs	r3, r1, #16
 800a270:	fb02 3306 	mla	r3, r2, r6, r3
 800a274:	b289      	uxth	r1, r1
 800a276:	3001      	adds	r0, #1
 800a278:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a27c:	4285      	cmp	r5, r0
 800a27e:	f84c 1b04 	str.w	r1, [ip], #4
 800a282:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a286:	dcec      	bgt.n	800a262 <__multadd+0x12>
 800a288:	b30e      	cbz	r6, 800a2ce <__multadd+0x7e>
 800a28a:	68a3      	ldr	r3, [r4, #8]
 800a28c:	42ab      	cmp	r3, r5
 800a28e:	dc19      	bgt.n	800a2c4 <__multadd+0x74>
 800a290:	6861      	ldr	r1, [r4, #4]
 800a292:	4638      	mov	r0, r7
 800a294:	3101      	adds	r1, #1
 800a296:	f7ff ff79 	bl	800a18c <_Balloc>
 800a29a:	4680      	mov	r8, r0
 800a29c:	b928      	cbnz	r0, 800a2aa <__multadd+0x5a>
 800a29e:	4602      	mov	r2, r0
 800a2a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a2d4 <__multadd+0x84>)
 800a2a2:	480d      	ldr	r0, [pc, #52]	@ (800a2d8 <__multadd+0x88>)
 800a2a4:	21ba      	movs	r1, #186	@ 0xba
 800a2a6:	f7ff fb07 	bl	80098b8 <__assert_func>
 800a2aa:	6922      	ldr	r2, [r4, #16]
 800a2ac:	3202      	adds	r2, #2
 800a2ae:	f104 010c 	add.w	r1, r4, #12
 800a2b2:	0092      	lsls	r2, r2, #2
 800a2b4:	300c      	adds	r0, #12
 800a2b6:	f7ff fae6 	bl	8009886 <memcpy>
 800a2ba:	4621      	mov	r1, r4
 800a2bc:	4638      	mov	r0, r7
 800a2be:	f7ff ffa5 	bl	800a20c <_Bfree>
 800a2c2:	4644      	mov	r4, r8
 800a2c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a2c8:	3501      	adds	r5, #1
 800a2ca:	615e      	str	r6, [r3, #20]
 800a2cc:	6125      	str	r5, [r4, #16]
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2d4:	0800b7d6 	.word	0x0800b7d6
 800a2d8:	0800b847 	.word	0x0800b847

0800a2dc <__s2b>:
 800a2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2e0:	460c      	mov	r4, r1
 800a2e2:	4615      	mov	r5, r2
 800a2e4:	461f      	mov	r7, r3
 800a2e6:	2209      	movs	r2, #9
 800a2e8:	3308      	adds	r3, #8
 800a2ea:	4606      	mov	r6, r0
 800a2ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	db09      	blt.n	800a30c <__s2b+0x30>
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	f7ff ff47 	bl	800a18c <_Balloc>
 800a2fe:	b940      	cbnz	r0, 800a312 <__s2b+0x36>
 800a300:	4602      	mov	r2, r0
 800a302:	4b19      	ldr	r3, [pc, #100]	@ (800a368 <__s2b+0x8c>)
 800a304:	4819      	ldr	r0, [pc, #100]	@ (800a36c <__s2b+0x90>)
 800a306:	21d3      	movs	r1, #211	@ 0xd3
 800a308:	f7ff fad6 	bl	80098b8 <__assert_func>
 800a30c:	0052      	lsls	r2, r2, #1
 800a30e:	3101      	adds	r1, #1
 800a310:	e7f0      	b.n	800a2f4 <__s2b+0x18>
 800a312:	9b08      	ldr	r3, [sp, #32]
 800a314:	6143      	str	r3, [r0, #20]
 800a316:	2d09      	cmp	r5, #9
 800a318:	f04f 0301 	mov.w	r3, #1
 800a31c:	6103      	str	r3, [r0, #16]
 800a31e:	dd16      	ble.n	800a34e <__s2b+0x72>
 800a320:	f104 0909 	add.w	r9, r4, #9
 800a324:	46c8      	mov	r8, r9
 800a326:	442c      	add	r4, r5
 800a328:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a32c:	4601      	mov	r1, r0
 800a32e:	3b30      	subs	r3, #48	@ 0x30
 800a330:	220a      	movs	r2, #10
 800a332:	4630      	mov	r0, r6
 800a334:	f7ff ff8c 	bl	800a250 <__multadd>
 800a338:	45a0      	cmp	r8, r4
 800a33a:	d1f5      	bne.n	800a328 <__s2b+0x4c>
 800a33c:	f1a5 0408 	sub.w	r4, r5, #8
 800a340:	444c      	add	r4, r9
 800a342:	1b2d      	subs	r5, r5, r4
 800a344:	1963      	adds	r3, r4, r5
 800a346:	42bb      	cmp	r3, r7
 800a348:	db04      	blt.n	800a354 <__s2b+0x78>
 800a34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a34e:	340a      	adds	r4, #10
 800a350:	2509      	movs	r5, #9
 800a352:	e7f6      	b.n	800a342 <__s2b+0x66>
 800a354:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a358:	4601      	mov	r1, r0
 800a35a:	3b30      	subs	r3, #48	@ 0x30
 800a35c:	220a      	movs	r2, #10
 800a35e:	4630      	mov	r0, r6
 800a360:	f7ff ff76 	bl	800a250 <__multadd>
 800a364:	e7ee      	b.n	800a344 <__s2b+0x68>
 800a366:	bf00      	nop
 800a368:	0800b7d6 	.word	0x0800b7d6
 800a36c:	0800b847 	.word	0x0800b847

0800a370 <__hi0bits>:
 800a370:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a374:	4603      	mov	r3, r0
 800a376:	bf36      	itet	cc
 800a378:	0403      	lslcc	r3, r0, #16
 800a37a:	2000      	movcs	r0, #0
 800a37c:	2010      	movcc	r0, #16
 800a37e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a382:	bf3c      	itt	cc
 800a384:	021b      	lslcc	r3, r3, #8
 800a386:	3008      	addcc	r0, #8
 800a388:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a38c:	bf3c      	itt	cc
 800a38e:	011b      	lslcc	r3, r3, #4
 800a390:	3004      	addcc	r0, #4
 800a392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a396:	bf3c      	itt	cc
 800a398:	009b      	lslcc	r3, r3, #2
 800a39a:	3002      	addcc	r0, #2
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	db05      	blt.n	800a3ac <__hi0bits+0x3c>
 800a3a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a3a4:	f100 0001 	add.w	r0, r0, #1
 800a3a8:	bf08      	it	eq
 800a3aa:	2020      	moveq	r0, #32
 800a3ac:	4770      	bx	lr

0800a3ae <__lo0bits>:
 800a3ae:	6803      	ldr	r3, [r0, #0]
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	f013 0007 	ands.w	r0, r3, #7
 800a3b6:	d00b      	beq.n	800a3d0 <__lo0bits+0x22>
 800a3b8:	07d9      	lsls	r1, r3, #31
 800a3ba:	d421      	bmi.n	800a400 <__lo0bits+0x52>
 800a3bc:	0798      	lsls	r0, r3, #30
 800a3be:	bf49      	itett	mi
 800a3c0:	085b      	lsrmi	r3, r3, #1
 800a3c2:	089b      	lsrpl	r3, r3, #2
 800a3c4:	2001      	movmi	r0, #1
 800a3c6:	6013      	strmi	r3, [r2, #0]
 800a3c8:	bf5c      	itt	pl
 800a3ca:	6013      	strpl	r3, [r2, #0]
 800a3cc:	2002      	movpl	r0, #2
 800a3ce:	4770      	bx	lr
 800a3d0:	b299      	uxth	r1, r3
 800a3d2:	b909      	cbnz	r1, 800a3d8 <__lo0bits+0x2a>
 800a3d4:	0c1b      	lsrs	r3, r3, #16
 800a3d6:	2010      	movs	r0, #16
 800a3d8:	b2d9      	uxtb	r1, r3
 800a3da:	b909      	cbnz	r1, 800a3e0 <__lo0bits+0x32>
 800a3dc:	3008      	adds	r0, #8
 800a3de:	0a1b      	lsrs	r3, r3, #8
 800a3e0:	0719      	lsls	r1, r3, #28
 800a3e2:	bf04      	itt	eq
 800a3e4:	091b      	lsreq	r3, r3, #4
 800a3e6:	3004      	addeq	r0, #4
 800a3e8:	0799      	lsls	r1, r3, #30
 800a3ea:	bf04      	itt	eq
 800a3ec:	089b      	lsreq	r3, r3, #2
 800a3ee:	3002      	addeq	r0, #2
 800a3f0:	07d9      	lsls	r1, r3, #31
 800a3f2:	d403      	bmi.n	800a3fc <__lo0bits+0x4e>
 800a3f4:	085b      	lsrs	r3, r3, #1
 800a3f6:	f100 0001 	add.w	r0, r0, #1
 800a3fa:	d003      	beq.n	800a404 <__lo0bits+0x56>
 800a3fc:	6013      	str	r3, [r2, #0]
 800a3fe:	4770      	bx	lr
 800a400:	2000      	movs	r0, #0
 800a402:	4770      	bx	lr
 800a404:	2020      	movs	r0, #32
 800a406:	4770      	bx	lr

0800a408 <__i2b>:
 800a408:	b510      	push	{r4, lr}
 800a40a:	460c      	mov	r4, r1
 800a40c:	2101      	movs	r1, #1
 800a40e:	f7ff febd 	bl	800a18c <_Balloc>
 800a412:	4602      	mov	r2, r0
 800a414:	b928      	cbnz	r0, 800a422 <__i2b+0x1a>
 800a416:	4b05      	ldr	r3, [pc, #20]	@ (800a42c <__i2b+0x24>)
 800a418:	4805      	ldr	r0, [pc, #20]	@ (800a430 <__i2b+0x28>)
 800a41a:	f240 1145 	movw	r1, #325	@ 0x145
 800a41e:	f7ff fa4b 	bl	80098b8 <__assert_func>
 800a422:	2301      	movs	r3, #1
 800a424:	6144      	str	r4, [r0, #20]
 800a426:	6103      	str	r3, [r0, #16]
 800a428:	bd10      	pop	{r4, pc}
 800a42a:	bf00      	nop
 800a42c:	0800b7d6 	.word	0x0800b7d6
 800a430:	0800b847 	.word	0x0800b847

0800a434 <__multiply>:
 800a434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a438:	4614      	mov	r4, r2
 800a43a:	690a      	ldr	r2, [r1, #16]
 800a43c:	6923      	ldr	r3, [r4, #16]
 800a43e:	429a      	cmp	r2, r3
 800a440:	bfa8      	it	ge
 800a442:	4623      	movge	r3, r4
 800a444:	460f      	mov	r7, r1
 800a446:	bfa4      	itt	ge
 800a448:	460c      	movge	r4, r1
 800a44a:	461f      	movge	r7, r3
 800a44c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a450:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a454:	68a3      	ldr	r3, [r4, #8]
 800a456:	6861      	ldr	r1, [r4, #4]
 800a458:	eb0a 0609 	add.w	r6, sl, r9
 800a45c:	42b3      	cmp	r3, r6
 800a45e:	b085      	sub	sp, #20
 800a460:	bfb8      	it	lt
 800a462:	3101      	addlt	r1, #1
 800a464:	f7ff fe92 	bl	800a18c <_Balloc>
 800a468:	b930      	cbnz	r0, 800a478 <__multiply+0x44>
 800a46a:	4602      	mov	r2, r0
 800a46c:	4b44      	ldr	r3, [pc, #272]	@ (800a580 <__multiply+0x14c>)
 800a46e:	4845      	ldr	r0, [pc, #276]	@ (800a584 <__multiply+0x150>)
 800a470:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a474:	f7ff fa20 	bl	80098b8 <__assert_func>
 800a478:	f100 0514 	add.w	r5, r0, #20
 800a47c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a480:	462b      	mov	r3, r5
 800a482:	2200      	movs	r2, #0
 800a484:	4543      	cmp	r3, r8
 800a486:	d321      	bcc.n	800a4cc <__multiply+0x98>
 800a488:	f107 0114 	add.w	r1, r7, #20
 800a48c:	f104 0214 	add.w	r2, r4, #20
 800a490:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a494:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a498:	9302      	str	r3, [sp, #8]
 800a49a:	1b13      	subs	r3, r2, r4
 800a49c:	3b15      	subs	r3, #21
 800a49e:	f023 0303 	bic.w	r3, r3, #3
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	f104 0715 	add.w	r7, r4, #21
 800a4a8:	42ba      	cmp	r2, r7
 800a4aa:	bf38      	it	cc
 800a4ac:	2304      	movcc	r3, #4
 800a4ae:	9301      	str	r3, [sp, #4]
 800a4b0:	9b02      	ldr	r3, [sp, #8]
 800a4b2:	9103      	str	r1, [sp, #12]
 800a4b4:	428b      	cmp	r3, r1
 800a4b6:	d80c      	bhi.n	800a4d2 <__multiply+0x9e>
 800a4b8:	2e00      	cmp	r6, #0
 800a4ba:	dd03      	ble.n	800a4c4 <__multiply+0x90>
 800a4bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d05b      	beq.n	800a57c <__multiply+0x148>
 800a4c4:	6106      	str	r6, [r0, #16]
 800a4c6:	b005      	add	sp, #20
 800a4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4cc:	f843 2b04 	str.w	r2, [r3], #4
 800a4d0:	e7d8      	b.n	800a484 <__multiply+0x50>
 800a4d2:	f8b1 a000 	ldrh.w	sl, [r1]
 800a4d6:	f1ba 0f00 	cmp.w	sl, #0
 800a4da:	d024      	beq.n	800a526 <__multiply+0xf2>
 800a4dc:	f104 0e14 	add.w	lr, r4, #20
 800a4e0:	46a9      	mov	r9, r5
 800a4e2:	f04f 0c00 	mov.w	ip, #0
 800a4e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a4ea:	f8d9 3000 	ldr.w	r3, [r9]
 800a4ee:	fa1f fb87 	uxth.w	fp, r7
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	fb0a 330b 	mla	r3, sl, fp, r3
 800a4f8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a4fc:	f8d9 7000 	ldr.w	r7, [r9]
 800a500:	4463      	add	r3, ip
 800a502:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a506:	fb0a c70b 	mla	r7, sl, fp, ip
 800a50a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a50e:	b29b      	uxth	r3, r3
 800a510:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a514:	4572      	cmp	r2, lr
 800a516:	f849 3b04 	str.w	r3, [r9], #4
 800a51a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a51e:	d8e2      	bhi.n	800a4e6 <__multiply+0xb2>
 800a520:	9b01      	ldr	r3, [sp, #4]
 800a522:	f845 c003 	str.w	ip, [r5, r3]
 800a526:	9b03      	ldr	r3, [sp, #12]
 800a528:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a52c:	3104      	adds	r1, #4
 800a52e:	f1b9 0f00 	cmp.w	r9, #0
 800a532:	d021      	beq.n	800a578 <__multiply+0x144>
 800a534:	682b      	ldr	r3, [r5, #0]
 800a536:	f104 0c14 	add.w	ip, r4, #20
 800a53a:	46ae      	mov	lr, r5
 800a53c:	f04f 0a00 	mov.w	sl, #0
 800a540:	f8bc b000 	ldrh.w	fp, [ip]
 800a544:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a548:	fb09 770b 	mla	r7, r9, fp, r7
 800a54c:	4457      	add	r7, sl
 800a54e:	b29b      	uxth	r3, r3
 800a550:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a554:	f84e 3b04 	str.w	r3, [lr], #4
 800a558:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a55c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a560:	f8be 3000 	ldrh.w	r3, [lr]
 800a564:	fb09 330a 	mla	r3, r9, sl, r3
 800a568:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a56c:	4562      	cmp	r2, ip
 800a56e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a572:	d8e5      	bhi.n	800a540 <__multiply+0x10c>
 800a574:	9f01      	ldr	r7, [sp, #4]
 800a576:	51eb      	str	r3, [r5, r7]
 800a578:	3504      	adds	r5, #4
 800a57a:	e799      	b.n	800a4b0 <__multiply+0x7c>
 800a57c:	3e01      	subs	r6, #1
 800a57e:	e79b      	b.n	800a4b8 <__multiply+0x84>
 800a580:	0800b7d6 	.word	0x0800b7d6
 800a584:	0800b847 	.word	0x0800b847

0800a588 <__pow5mult>:
 800a588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a58c:	4615      	mov	r5, r2
 800a58e:	f012 0203 	ands.w	r2, r2, #3
 800a592:	4607      	mov	r7, r0
 800a594:	460e      	mov	r6, r1
 800a596:	d007      	beq.n	800a5a8 <__pow5mult+0x20>
 800a598:	4c25      	ldr	r4, [pc, #148]	@ (800a630 <__pow5mult+0xa8>)
 800a59a:	3a01      	subs	r2, #1
 800a59c:	2300      	movs	r3, #0
 800a59e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5a2:	f7ff fe55 	bl	800a250 <__multadd>
 800a5a6:	4606      	mov	r6, r0
 800a5a8:	10ad      	asrs	r5, r5, #2
 800a5aa:	d03d      	beq.n	800a628 <__pow5mult+0xa0>
 800a5ac:	69fc      	ldr	r4, [r7, #28]
 800a5ae:	b97c      	cbnz	r4, 800a5d0 <__pow5mult+0x48>
 800a5b0:	2010      	movs	r0, #16
 800a5b2:	f7ff fd23 	bl	8009ffc <malloc>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	61f8      	str	r0, [r7, #28]
 800a5ba:	b928      	cbnz	r0, 800a5c8 <__pow5mult+0x40>
 800a5bc:	4b1d      	ldr	r3, [pc, #116]	@ (800a634 <__pow5mult+0xac>)
 800a5be:	481e      	ldr	r0, [pc, #120]	@ (800a638 <__pow5mult+0xb0>)
 800a5c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a5c4:	f7ff f978 	bl	80098b8 <__assert_func>
 800a5c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5cc:	6004      	str	r4, [r0, #0]
 800a5ce:	60c4      	str	r4, [r0, #12]
 800a5d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a5d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5d8:	b94c      	cbnz	r4, 800a5ee <__pow5mult+0x66>
 800a5da:	f240 2171 	movw	r1, #625	@ 0x271
 800a5de:	4638      	mov	r0, r7
 800a5e0:	f7ff ff12 	bl	800a408 <__i2b>
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5ea:	4604      	mov	r4, r0
 800a5ec:	6003      	str	r3, [r0, #0]
 800a5ee:	f04f 0900 	mov.w	r9, #0
 800a5f2:	07eb      	lsls	r3, r5, #31
 800a5f4:	d50a      	bpl.n	800a60c <__pow5mult+0x84>
 800a5f6:	4631      	mov	r1, r6
 800a5f8:	4622      	mov	r2, r4
 800a5fa:	4638      	mov	r0, r7
 800a5fc:	f7ff ff1a 	bl	800a434 <__multiply>
 800a600:	4631      	mov	r1, r6
 800a602:	4680      	mov	r8, r0
 800a604:	4638      	mov	r0, r7
 800a606:	f7ff fe01 	bl	800a20c <_Bfree>
 800a60a:	4646      	mov	r6, r8
 800a60c:	106d      	asrs	r5, r5, #1
 800a60e:	d00b      	beq.n	800a628 <__pow5mult+0xa0>
 800a610:	6820      	ldr	r0, [r4, #0]
 800a612:	b938      	cbnz	r0, 800a624 <__pow5mult+0x9c>
 800a614:	4622      	mov	r2, r4
 800a616:	4621      	mov	r1, r4
 800a618:	4638      	mov	r0, r7
 800a61a:	f7ff ff0b 	bl	800a434 <__multiply>
 800a61e:	6020      	str	r0, [r4, #0]
 800a620:	f8c0 9000 	str.w	r9, [r0]
 800a624:	4604      	mov	r4, r0
 800a626:	e7e4      	b.n	800a5f2 <__pow5mult+0x6a>
 800a628:	4630      	mov	r0, r6
 800a62a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a62e:	bf00      	nop
 800a630:	0800b8a0 	.word	0x0800b8a0
 800a634:	0800b721 	.word	0x0800b721
 800a638:	0800b847 	.word	0x0800b847

0800a63c <__lshift>:
 800a63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a640:	460c      	mov	r4, r1
 800a642:	6849      	ldr	r1, [r1, #4]
 800a644:	6923      	ldr	r3, [r4, #16]
 800a646:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a64a:	68a3      	ldr	r3, [r4, #8]
 800a64c:	4607      	mov	r7, r0
 800a64e:	4691      	mov	r9, r2
 800a650:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a654:	f108 0601 	add.w	r6, r8, #1
 800a658:	42b3      	cmp	r3, r6
 800a65a:	db0b      	blt.n	800a674 <__lshift+0x38>
 800a65c:	4638      	mov	r0, r7
 800a65e:	f7ff fd95 	bl	800a18c <_Balloc>
 800a662:	4605      	mov	r5, r0
 800a664:	b948      	cbnz	r0, 800a67a <__lshift+0x3e>
 800a666:	4602      	mov	r2, r0
 800a668:	4b28      	ldr	r3, [pc, #160]	@ (800a70c <__lshift+0xd0>)
 800a66a:	4829      	ldr	r0, [pc, #164]	@ (800a710 <__lshift+0xd4>)
 800a66c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a670:	f7ff f922 	bl	80098b8 <__assert_func>
 800a674:	3101      	adds	r1, #1
 800a676:	005b      	lsls	r3, r3, #1
 800a678:	e7ee      	b.n	800a658 <__lshift+0x1c>
 800a67a:	2300      	movs	r3, #0
 800a67c:	f100 0114 	add.w	r1, r0, #20
 800a680:	f100 0210 	add.w	r2, r0, #16
 800a684:	4618      	mov	r0, r3
 800a686:	4553      	cmp	r3, sl
 800a688:	db33      	blt.n	800a6f2 <__lshift+0xb6>
 800a68a:	6920      	ldr	r0, [r4, #16]
 800a68c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a690:	f104 0314 	add.w	r3, r4, #20
 800a694:	f019 091f 	ands.w	r9, r9, #31
 800a698:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a69c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a6a0:	d02b      	beq.n	800a6fa <__lshift+0xbe>
 800a6a2:	f1c9 0e20 	rsb	lr, r9, #32
 800a6a6:	468a      	mov	sl, r1
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	6818      	ldr	r0, [r3, #0]
 800a6ac:	fa00 f009 	lsl.w	r0, r0, r9
 800a6b0:	4310      	orrs	r0, r2
 800a6b2:	f84a 0b04 	str.w	r0, [sl], #4
 800a6b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6ba:	459c      	cmp	ip, r3
 800a6bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800a6c0:	d8f3      	bhi.n	800a6aa <__lshift+0x6e>
 800a6c2:	ebac 0304 	sub.w	r3, ip, r4
 800a6c6:	3b15      	subs	r3, #21
 800a6c8:	f023 0303 	bic.w	r3, r3, #3
 800a6cc:	3304      	adds	r3, #4
 800a6ce:	f104 0015 	add.w	r0, r4, #21
 800a6d2:	4584      	cmp	ip, r0
 800a6d4:	bf38      	it	cc
 800a6d6:	2304      	movcc	r3, #4
 800a6d8:	50ca      	str	r2, [r1, r3]
 800a6da:	b10a      	cbz	r2, 800a6e0 <__lshift+0xa4>
 800a6dc:	f108 0602 	add.w	r6, r8, #2
 800a6e0:	3e01      	subs	r6, #1
 800a6e2:	4638      	mov	r0, r7
 800a6e4:	612e      	str	r6, [r5, #16]
 800a6e6:	4621      	mov	r1, r4
 800a6e8:	f7ff fd90 	bl	800a20c <_Bfree>
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	e7c5      	b.n	800a686 <__lshift+0x4a>
 800a6fa:	3904      	subs	r1, #4
 800a6fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a700:	f841 2f04 	str.w	r2, [r1, #4]!
 800a704:	459c      	cmp	ip, r3
 800a706:	d8f9      	bhi.n	800a6fc <__lshift+0xc0>
 800a708:	e7ea      	b.n	800a6e0 <__lshift+0xa4>
 800a70a:	bf00      	nop
 800a70c:	0800b7d6 	.word	0x0800b7d6
 800a710:	0800b847 	.word	0x0800b847

0800a714 <__mcmp>:
 800a714:	690a      	ldr	r2, [r1, #16]
 800a716:	4603      	mov	r3, r0
 800a718:	6900      	ldr	r0, [r0, #16]
 800a71a:	1a80      	subs	r0, r0, r2
 800a71c:	b530      	push	{r4, r5, lr}
 800a71e:	d10e      	bne.n	800a73e <__mcmp+0x2a>
 800a720:	3314      	adds	r3, #20
 800a722:	3114      	adds	r1, #20
 800a724:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a728:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a72c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a730:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a734:	4295      	cmp	r5, r2
 800a736:	d003      	beq.n	800a740 <__mcmp+0x2c>
 800a738:	d205      	bcs.n	800a746 <__mcmp+0x32>
 800a73a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a73e:	bd30      	pop	{r4, r5, pc}
 800a740:	42a3      	cmp	r3, r4
 800a742:	d3f3      	bcc.n	800a72c <__mcmp+0x18>
 800a744:	e7fb      	b.n	800a73e <__mcmp+0x2a>
 800a746:	2001      	movs	r0, #1
 800a748:	e7f9      	b.n	800a73e <__mcmp+0x2a>
	...

0800a74c <__mdiff>:
 800a74c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a750:	4689      	mov	r9, r1
 800a752:	4606      	mov	r6, r0
 800a754:	4611      	mov	r1, r2
 800a756:	4648      	mov	r0, r9
 800a758:	4614      	mov	r4, r2
 800a75a:	f7ff ffdb 	bl	800a714 <__mcmp>
 800a75e:	1e05      	subs	r5, r0, #0
 800a760:	d112      	bne.n	800a788 <__mdiff+0x3c>
 800a762:	4629      	mov	r1, r5
 800a764:	4630      	mov	r0, r6
 800a766:	f7ff fd11 	bl	800a18c <_Balloc>
 800a76a:	4602      	mov	r2, r0
 800a76c:	b928      	cbnz	r0, 800a77a <__mdiff+0x2e>
 800a76e:	4b3f      	ldr	r3, [pc, #252]	@ (800a86c <__mdiff+0x120>)
 800a770:	f240 2137 	movw	r1, #567	@ 0x237
 800a774:	483e      	ldr	r0, [pc, #248]	@ (800a870 <__mdiff+0x124>)
 800a776:	f7ff f89f 	bl	80098b8 <__assert_func>
 800a77a:	2301      	movs	r3, #1
 800a77c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a780:	4610      	mov	r0, r2
 800a782:	b003      	add	sp, #12
 800a784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a788:	bfbc      	itt	lt
 800a78a:	464b      	movlt	r3, r9
 800a78c:	46a1      	movlt	r9, r4
 800a78e:	4630      	mov	r0, r6
 800a790:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a794:	bfba      	itte	lt
 800a796:	461c      	movlt	r4, r3
 800a798:	2501      	movlt	r5, #1
 800a79a:	2500      	movge	r5, #0
 800a79c:	f7ff fcf6 	bl	800a18c <_Balloc>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	b918      	cbnz	r0, 800a7ac <__mdiff+0x60>
 800a7a4:	4b31      	ldr	r3, [pc, #196]	@ (800a86c <__mdiff+0x120>)
 800a7a6:	f240 2145 	movw	r1, #581	@ 0x245
 800a7aa:	e7e3      	b.n	800a774 <__mdiff+0x28>
 800a7ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a7b0:	6926      	ldr	r6, [r4, #16]
 800a7b2:	60c5      	str	r5, [r0, #12]
 800a7b4:	f109 0310 	add.w	r3, r9, #16
 800a7b8:	f109 0514 	add.w	r5, r9, #20
 800a7bc:	f104 0e14 	add.w	lr, r4, #20
 800a7c0:	f100 0b14 	add.w	fp, r0, #20
 800a7c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a7c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a7cc:	9301      	str	r3, [sp, #4]
 800a7ce:	46d9      	mov	r9, fp
 800a7d0:	f04f 0c00 	mov.w	ip, #0
 800a7d4:	9b01      	ldr	r3, [sp, #4]
 800a7d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a7da:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a7de:	9301      	str	r3, [sp, #4]
 800a7e0:	fa1f f38a 	uxth.w	r3, sl
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	b283      	uxth	r3, r0
 800a7e8:	1acb      	subs	r3, r1, r3
 800a7ea:	0c00      	lsrs	r0, r0, #16
 800a7ec:	4463      	add	r3, ip
 800a7ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a7f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a7fc:	4576      	cmp	r6, lr
 800a7fe:	f849 3b04 	str.w	r3, [r9], #4
 800a802:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a806:	d8e5      	bhi.n	800a7d4 <__mdiff+0x88>
 800a808:	1b33      	subs	r3, r6, r4
 800a80a:	3b15      	subs	r3, #21
 800a80c:	f023 0303 	bic.w	r3, r3, #3
 800a810:	3415      	adds	r4, #21
 800a812:	3304      	adds	r3, #4
 800a814:	42a6      	cmp	r6, r4
 800a816:	bf38      	it	cc
 800a818:	2304      	movcc	r3, #4
 800a81a:	441d      	add	r5, r3
 800a81c:	445b      	add	r3, fp
 800a81e:	461e      	mov	r6, r3
 800a820:	462c      	mov	r4, r5
 800a822:	4544      	cmp	r4, r8
 800a824:	d30e      	bcc.n	800a844 <__mdiff+0xf8>
 800a826:	f108 0103 	add.w	r1, r8, #3
 800a82a:	1b49      	subs	r1, r1, r5
 800a82c:	f021 0103 	bic.w	r1, r1, #3
 800a830:	3d03      	subs	r5, #3
 800a832:	45a8      	cmp	r8, r5
 800a834:	bf38      	it	cc
 800a836:	2100      	movcc	r1, #0
 800a838:	440b      	add	r3, r1
 800a83a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a83e:	b191      	cbz	r1, 800a866 <__mdiff+0x11a>
 800a840:	6117      	str	r7, [r2, #16]
 800a842:	e79d      	b.n	800a780 <__mdiff+0x34>
 800a844:	f854 1b04 	ldr.w	r1, [r4], #4
 800a848:	46e6      	mov	lr, ip
 800a84a:	0c08      	lsrs	r0, r1, #16
 800a84c:	fa1c fc81 	uxtah	ip, ip, r1
 800a850:	4471      	add	r1, lr
 800a852:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a856:	b289      	uxth	r1, r1
 800a858:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a85c:	f846 1b04 	str.w	r1, [r6], #4
 800a860:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a864:	e7dd      	b.n	800a822 <__mdiff+0xd6>
 800a866:	3f01      	subs	r7, #1
 800a868:	e7e7      	b.n	800a83a <__mdiff+0xee>
 800a86a:	bf00      	nop
 800a86c:	0800b7d6 	.word	0x0800b7d6
 800a870:	0800b847 	.word	0x0800b847

0800a874 <__ulp>:
 800a874:	b082      	sub	sp, #8
 800a876:	ed8d 0b00 	vstr	d0, [sp]
 800a87a:	9a01      	ldr	r2, [sp, #4]
 800a87c:	4b0f      	ldr	r3, [pc, #60]	@ (800a8bc <__ulp+0x48>)
 800a87e:	4013      	ands	r3, r2
 800a880:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a884:	2b00      	cmp	r3, #0
 800a886:	dc08      	bgt.n	800a89a <__ulp+0x26>
 800a888:	425b      	negs	r3, r3
 800a88a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a88e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a892:	da04      	bge.n	800a89e <__ulp+0x2a>
 800a894:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a898:	4113      	asrs	r3, r2
 800a89a:	2200      	movs	r2, #0
 800a89c:	e008      	b.n	800a8b0 <__ulp+0x3c>
 800a89e:	f1a2 0314 	sub.w	r3, r2, #20
 800a8a2:	2b1e      	cmp	r3, #30
 800a8a4:	bfda      	itte	le
 800a8a6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a8aa:	40da      	lsrle	r2, r3
 800a8ac:	2201      	movgt	r2, #1
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	4610      	mov	r0, r2
 800a8b4:	ec41 0b10 	vmov	d0, r0, r1
 800a8b8:	b002      	add	sp, #8
 800a8ba:	4770      	bx	lr
 800a8bc:	7ff00000 	.word	0x7ff00000

0800a8c0 <__b2d>:
 800a8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c4:	6906      	ldr	r6, [r0, #16]
 800a8c6:	f100 0814 	add.w	r8, r0, #20
 800a8ca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a8ce:	1f37      	subs	r7, r6, #4
 800a8d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a8d4:	4610      	mov	r0, r2
 800a8d6:	f7ff fd4b 	bl	800a370 <__hi0bits>
 800a8da:	f1c0 0320 	rsb	r3, r0, #32
 800a8de:	280a      	cmp	r0, #10
 800a8e0:	600b      	str	r3, [r1, #0]
 800a8e2:	491b      	ldr	r1, [pc, #108]	@ (800a950 <__b2d+0x90>)
 800a8e4:	dc15      	bgt.n	800a912 <__b2d+0x52>
 800a8e6:	f1c0 0c0b 	rsb	ip, r0, #11
 800a8ea:	fa22 f30c 	lsr.w	r3, r2, ip
 800a8ee:	45b8      	cmp	r8, r7
 800a8f0:	ea43 0501 	orr.w	r5, r3, r1
 800a8f4:	bf34      	ite	cc
 800a8f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a8fa:	2300      	movcs	r3, #0
 800a8fc:	3015      	adds	r0, #21
 800a8fe:	fa02 f000 	lsl.w	r0, r2, r0
 800a902:	fa23 f30c 	lsr.w	r3, r3, ip
 800a906:	4303      	orrs	r3, r0
 800a908:	461c      	mov	r4, r3
 800a90a:	ec45 4b10 	vmov	d0, r4, r5
 800a90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a912:	45b8      	cmp	r8, r7
 800a914:	bf3a      	itte	cc
 800a916:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a91a:	f1a6 0708 	subcc.w	r7, r6, #8
 800a91e:	2300      	movcs	r3, #0
 800a920:	380b      	subs	r0, #11
 800a922:	d012      	beq.n	800a94a <__b2d+0x8a>
 800a924:	f1c0 0120 	rsb	r1, r0, #32
 800a928:	fa23 f401 	lsr.w	r4, r3, r1
 800a92c:	4082      	lsls	r2, r0
 800a92e:	4322      	orrs	r2, r4
 800a930:	4547      	cmp	r7, r8
 800a932:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a936:	bf8c      	ite	hi
 800a938:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a93c:	2200      	movls	r2, #0
 800a93e:	4083      	lsls	r3, r0
 800a940:	40ca      	lsrs	r2, r1
 800a942:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a946:	4313      	orrs	r3, r2
 800a948:	e7de      	b.n	800a908 <__b2d+0x48>
 800a94a:	ea42 0501 	orr.w	r5, r2, r1
 800a94e:	e7db      	b.n	800a908 <__b2d+0x48>
 800a950:	3ff00000 	.word	0x3ff00000

0800a954 <__d2b>:
 800a954:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a958:	460f      	mov	r7, r1
 800a95a:	2101      	movs	r1, #1
 800a95c:	ec59 8b10 	vmov	r8, r9, d0
 800a960:	4616      	mov	r6, r2
 800a962:	f7ff fc13 	bl	800a18c <_Balloc>
 800a966:	4604      	mov	r4, r0
 800a968:	b930      	cbnz	r0, 800a978 <__d2b+0x24>
 800a96a:	4602      	mov	r2, r0
 800a96c:	4b23      	ldr	r3, [pc, #140]	@ (800a9fc <__d2b+0xa8>)
 800a96e:	4824      	ldr	r0, [pc, #144]	@ (800aa00 <__d2b+0xac>)
 800a970:	f240 310f 	movw	r1, #783	@ 0x30f
 800a974:	f7fe ffa0 	bl	80098b8 <__assert_func>
 800a978:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a97c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a980:	b10d      	cbz	r5, 800a986 <__d2b+0x32>
 800a982:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a986:	9301      	str	r3, [sp, #4]
 800a988:	f1b8 0300 	subs.w	r3, r8, #0
 800a98c:	d023      	beq.n	800a9d6 <__d2b+0x82>
 800a98e:	4668      	mov	r0, sp
 800a990:	9300      	str	r3, [sp, #0]
 800a992:	f7ff fd0c 	bl	800a3ae <__lo0bits>
 800a996:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a99a:	b1d0      	cbz	r0, 800a9d2 <__d2b+0x7e>
 800a99c:	f1c0 0320 	rsb	r3, r0, #32
 800a9a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a9a4:	430b      	orrs	r3, r1
 800a9a6:	40c2      	lsrs	r2, r0
 800a9a8:	6163      	str	r3, [r4, #20]
 800a9aa:	9201      	str	r2, [sp, #4]
 800a9ac:	9b01      	ldr	r3, [sp, #4]
 800a9ae:	61a3      	str	r3, [r4, #24]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	bf0c      	ite	eq
 800a9b4:	2201      	moveq	r2, #1
 800a9b6:	2202      	movne	r2, #2
 800a9b8:	6122      	str	r2, [r4, #16]
 800a9ba:	b1a5      	cbz	r5, 800a9e6 <__d2b+0x92>
 800a9bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a9c0:	4405      	add	r5, r0
 800a9c2:	603d      	str	r5, [r7, #0]
 800a9c4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a9c8:	6030      	str	r0, [r6, #0]
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	b003      	add	sp, #12
 800a9ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9d2:	6161      	str	r1, [r4, #20]
 800a9d4:	e7ea      	b.n	800a9ac <__d2b+0x58>
 800a9d6:	a801      	add	r0, sp, #4
 800a9d8:	f7ff fce9 	bl	800a3ae <__lo0bits>
 800a9dc:	9b01      	ldr	r3, [sp, #4]
 800a9de:	6163      	str	r3, [r4, #20]
 800a9e0:	3020      	adds	r0, #32
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	e7e8      	b.n	800a9b8 <__d2b+0x64>
 800a9e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a9ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a9ee:	6038      	str	r0, [r7, #0]
 800a9f0:	6918      	ldr	r0, [r3, #16]
 800a9f2:	f7ff fcbd 	bl	800a370 <__hi0bits>
 800a9f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a9fa:	e7e5      	b.n	800a9c8 <__d2b+0x74>
 800a9fc:	0800b7d6 	.word	0x0800b7d6
 800aa00:	0800b847 	.word	0x0800b847

0800aa04 <__ratio>:
 800aa04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa08:	b085      	sub	sp, #20
 800aa0a:	e9cd 1000 	strd	r1, r0, [sp]
 800aa0e:	a902      	add	r1, sp, #8
 800aa10:	f7ff ff56 	bl	800a8c0 <__b2d>
 800aa14:	9800      	ldr	r0, [sp, #0]
 800aa16:	a903      	add	r1, sp, #12
 800aa18:	ec55 4b10 	vmov	r4, r5, d0
 800aa1c:	f7ff ff50 	bl	800a8c0 <__b2d>
 800aa20:	9b01      	ldr	r3, [sp, #4]
 800aa22:	6919      	ldr	r1, [r3, #16]
 800aa24:	9b00      	ldr	r3, [sp, #0]
 800aa26:	691b      	ldr	r3, [r3, #16]
 800aa28:	1ac9      	subs	r1, r1, r3
 800aa2a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800aa2e:	1a9b      	subs	r3, r3, r2
 800aa30:	ec5b ab10 	vmov	sl, fp, d0
 800aa34:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	bfce      	itee	gt
 800aa3c:	462a      	movgt	r2, r5
 800aa3e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aa42:	465a      	movle	r2, fp
 800aa44:	462f      	mov	r7, r5
 800aa46:	46d9      	mov	r9, fp
 800aa48:	bfcc      	ite	gt
 800aa4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aa4e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800aa52:	464b      	mov	r3, r9
 800aa54:	4652      	mov	r2, sl
 800aa56:	4620      	mov	r0, r4
 800aa58:	4639      	mov	r1, r7
 800aa5a:	f7f5 ff2f 	bl	80008bc <__aeabi_ddiv>
 800aa5e:	ec41 0b10 	vmov	d0, r0, r1
 800aa62:	b005      	add	sp, #20
 800aa64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa68 <__copybits>:
 800aa68:	3901      	subs	r1, #1
 800aa6a:	b570      	push	{r4, r5, r6, lr}
 800aa6c:	1149      	asrs	r1, r1, #5
 800aa6e:	6914      	ldr	r4, [r2, #16]
 800aa70:	3101      	adds	r1, #1
 800aa72:	f102 0314 	add.w	r3, r2, #20
 800aa76:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aa7a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aa7e:	1f05      	subs	r5, r0, #4
 800aa80:	42a3      	cmp	r3, r4
 800aa82:	d30c      	bcc.n	800aa9e <__copybits+0x36>
 800aa84:	1aa3      	subs	r3, r4, r2
 800aa86:	3b11      	subs	r3, #17
 800aa88:	f023 0303 	bic.w	r3, r3, #3
 800aa8c:	3211      	adds	r2, #17
 800aa8e:	42a2      	cmp	r2, r4
 800aa90:	bf88      	it	hi
 800aa92:	2300      	movhi	r3, #0
 800aa94:	4418      	add	r0, r3
 800aa96:	2300      	movs	r3, #0
 800aa98:	4288      	cmp	r0, r1
 800aa9a:	d305      	bcc.n	800aaa8 <__copybits+0x40>
 800aa9c:	bd70      	pop	{r4, r5, r6, pc}
 800aa9e:	f853 6b04 	ldr.w	r6, [r3], #4
 800aaa2:	f845 6f04 	str.w	r6, [r5, #4]!
 800aaa6:	e7eb      	b.n	800aa80 <__copybits+0x18>
 800aaa8:	f840 3b04 	str.w	r3, [r0], #4
 800aaac:	e7f4      	b.n	800aa98 <__copybits+0x30>

0800aaae <__any_on>:
 800aaae:	f100 0214 	add.w	r2, r0, #20
 800aab2:	6900      	ldr	r0, [r0, #16]
 800aab4:	114b      	asrs	r3, r1, #5
 800aab6:	4298      	cmp	r0, r3
 800aab8:	b510      	push	{r4, lr}
 800aaba:	db11      	blt.n	800aae0 <__any_on+0x32>
 800aabc:	dd0a      	ble.n	800aad4 <__any_on+0x26>
 800aabe:	f011 011f 	ands.w	r1, r1, #31
 800aac2:	d007      	beq.n	800aad4 <__any_on+0x26>
 800aac4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aac8:	fa24 f001 	lsr.w	r0, r4, r1
 800aacc:	fa00 f101 	lsl.w	r1, r0, r1
 800aad0:	428c      	cmp	r4, r1
 800aad2:	d10b      	bne.n	800aaec <__any_on+0x3e>
 800aad4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aad8:	4293      	cmp	r3, r2
 800aada:	d803      	bhi.n	800aae4 <__any_on+0x36>
 800aadc:	2000      	movs	r0, #0
 800aade:	bd10      	pop	{r4, pc}
 800aae0:	4603      	mov	r3, r0
 800aae2:	e7f7      	b.n	800aad4 <__any_on+0x26>
 800aae4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aae8:	2900      	cmp	r1, #0
 800aaea:	d0f5      	beq.n	800aad8 <__any_on+0x2a>
 800aaec:	2001      	movs	r0, #1
 800aaee:	e7f6      	b.n	800aade <__any_on+0x30>

0800aaf0 <__ascii_wctomb>:
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	4608      	mov	r0, r1
 800aaf4:	b141      	cbz	r1, 800ab08 <__ascii_wctomb+0x18>
 800aaf6:	2aff      	cmp	r2, #255	@ 0xff
 800aaf8:	d904      	bls.n	800ab04 <__ascii_wctomb+0x14>
 800aafa:	228a      	movs	r2, #138	@ 0x8a
 800aafc:	601a      	str	r2, [r3, #0]
 800aafe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab02:	4770      	bx	lr
 800ab04:	700a      	strb	r2, [r1, #0]
 800ab06:	2001      	movs	r0, #1
 800ab08:	4770      	bx	lr
	...

0800ab0c <__sflush_r>:
 800ab0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab14:	0716      	lsls	r6, r2, #28
 800ab16:	4605      	mov	r5, r0
 800ab18:	460c      	mov	r4, r1
 800ab1a:	d454      	bmi.n	800abc6 <__sflush_r+0xba>
 800ab1c:	684b      	ldr	r3, [r1, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	dc02      	bgt.n	800ab28 <__sflush_r+0x1c>
 800ab22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	dd48      	ble.n	800abba <__sflush_r+0xae>
 800ab28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab2a:	2e00      	cmp	r6, #0
 800ab2c:	d045      	beq.n	800abba <__sflush_r+0xae>
 800ab2e:	2300      	movs	r3, #0
 800ab30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab34:	682f      	ldr	r7, [r5, #0]
 800ab36:	6a21      	ldr	r1, [r4, #32]
 800ab38:	602b      	str	r3, [r5, #0]
 800ab3a:	d030      	beq.n	800ab9e <__sflush_r+0x92>
 800ab3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab3e:	89a3      	ldrh	r3, [r4, #12]
 800ab40:	0759      	lsls	r1, r3, #29
 800ab42:	d505      	bpl.n	800ab50 <__sflush_r+0x44>
 800ab44:	6863      	ldr	r3, [r4, #4]
 800ab46:	1ad2      	subs	r2, r2, r3
 800ab48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab4a:	b10b      	cbz	r3, 800ab50 <__sflush_r+0x44>
 800ab4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab4e:	1ad2      	subs	r2, r2, r3
 800ab50:	2300      	movs	r3, #0
 800ab52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab54:	6a21      	ldr	r1, [r4, #32]
 800ab56:	4628      	mov	r0, r5
 800ab58:	47b0      	blx	r6
 800ab5a:	1c43      	adds	r3, r0, #1
 800ab5c:	89a3      	ldrh	r3, [r4, #12]
 800ab5e:	d106      	bne.n	800ab6e <__sflush_r+0x62>
 800ab60:	6829      	ldr	r1, [r5, #0]
 800ab62:	291d      	cmp	r1, #29
 800ab64:	d82b      	bhi.n	800abbe <__sflush_r+0xb2>
 800ab66:	4a2a      	ldr	r2, [pc, #168]	@ (800ac10 <__sflush_r+0x104>)
 800ab68:	410a      	asrs	r2, r1
 800ab6a:	07d6      	lsls	r6, r2, #31
 800ab6c:	d427      	bmi.n	800abbe <__sflush_r+0xb2>
 800ab6e:	2200      	movs	r2, #0
 800ab70:	6062      	str	r2, [r4, #4]
 800ab72:	04d9      	lsls	r1, r3, #19
 800ab74:	6922      	ldr	r2, [r4, #16]
 800ab76:	6022      	str	r2, [r4, #0]
 800ab78:	d504      	bpl.n	800ab84 <__sflush_r+0x78>
 800ab7a:	1c42      	adds	r2, r0, #1
 800ab7c:	d101      	bne.n	800ab82 <__sflush_r+0x76>
 800ab7e:	682b      	ldr	r3, [r5, #0]
 800ab80:	b903      	cbnz	r3, 800ab84 <__sflush_r+0x78>
 800ab82:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab86:	602f      	str	r7, [r5, #0]
 800ab88:	b1b9      	cbz	r1, 800abba <__sflush_r+0xae>
 800ab8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab8e:	4299      	cmp	r1, r3
 800ab90:	d002      	beq.n	800ab98 <__sflush_r+0x8c>
 800ab92:	4628      	mov	r0, r5
 800ab94:	f7fe feae 	bl	80098f4 <_free_r>
 800ab98:	2300      	movs	r3, #0
 800ab9a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab9c:	e00d      	b.n	800abba <__sflush_r+0xae>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	4628      	mov	r0, r5
 800aba2:	47b0      	blx	r6
 800aba4:	4602      	mov	r2, r0
 800aba6:	1c50      	adds	r0, r2, #1
 800aba8:	d1c9      	bne.n	800ab3e <__sflush_r+0x32>
 800abaa:	682b      	ldr	r3, [r5, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d0c6      	beq.n	800ab3e <__sflush_r+0x32>
 800abb0:	2b1d      	cmp	r3, #29
 800abb2:	d001      	beq.n	800abb8 <__sflush_r+0xac>
 800abb4:	2b16      	cmp	r3, #22
 800abb6:	d11e      	bne.n	800abf6 <__sflush_r+0xea>
 800abb8:	602f      	str	r7, [r5, #0]
 800abba:	2000      	movs	r0, #0
 800abbc:	e022      	b.n	800ac04 <__sflush_r+0xf8>
 800abbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abc2:	b21b      	sxth	r3, r3
 800abc4:	e01b      	b.n	800abfe <__sflush_r+0xf2>
 800abc6:	690f      	ldr	r7, [r1, #16]
 800abc8:	2f00      	cmp	r7, #0
 800abca:	d0f6      	beq.n	800abba <__sflush_r+0xae>
 800abcc:	0793      	lsls	r3, r2, #30
 800abce:	680e      	ldr	r6, [r1, #0]
 800abd0:	bf08      	it	eq
 800abd2:	694b      	ldreq	r3, [r1, #20]
 800abd4:	600f      	str	r7, [r1, #0]
 800abd6:	bf18      	it	ne
 800abd8:	2300      	movne	r3, #0
 800abda:	eba6 0807 	sub.w	r8, r6, r7
 800abde:	608b      	str	r3, [r1, #8]
 800abe0:	f1b8 0f00 	cmp.w	r8, #0
 800abe4:	dde9      	ble.n	800abba <__sflush_r+0xae>
 800abe6:	6a21      	ldr	r1, [r4, #32]
 800abe8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800abea:	4643      	mov	r3, r8
 800abec:	463a      	mov	r2, r7
 800abee:	4628      	mov	r0, r5
 800abf0:	47b0      	blx	r6
 800abf2:	2800      	cmp	r0, #0
 800abf4:	dc08      	bgt.n	800ac08 <__sflush_r+0xfc>
 800abf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abfe:	81a3      	strh	r3, [r4, #12]
 800ac00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac08:	4407      	add	r7, r0
 800ac0a:	eba8 0800 	sub.w	r8, r8, r0
 800ac0e:	e7e7      	b.n	800abe0 <__sflush_r+0xd4>
 800ac10:	dfbffffe 	.word	0xdfbffffe

0800ac14 <_fflush_r>:
 800ac14:	b538      	push	{r3, r4, r5, lr}
 800ac16:	690b      	ldr	r3, [r1, #16]
 800ac18:	4605      	mov	r5, r0
 800ac1a:	460c      	mov	r4, r1
 800ac1c:	b913      	cbnz	r3, 800ac24 <_fflush_r+0x10>
 800ac1e:	2500      	movs	r5, #0
 800ac20:	4628      	mov	r0, r5
 800ac22:	bd38      	pop	{r3, r4, r5, pc}
 800ac24:	b118      	cbz	r0, 800ac2e <_fflush_r+0x1a>
 800ac26:	6a03      	ldr	r3, [r0, #32]
 800ac28:	b90b      	cbnz	r3, 800ac2e <_fflush_r+0x1a>
 800ac2a:	f7fe fcc9 	bl	80095c0 <__sinit>
 800ac2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d0f3      	beq.n	800ac1e <_fflush_r+0xa>
 800ac36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac38:	07d0      	lsls	r0, r2, #31
 800ac3a:	d404      	bmi.n	800ac46 <_fflush_r+0x32>
 800ac3c:	0599      	lsls	r1, r3, #22
 800ac3e:	d402      	bmi.n	800ac46 <_fflush_r+0x32>
 800ac40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac42:	f7fe fe1e 	bl	8009882 <__retarget_lock_acquire_recursive>
 800ac46:	4628      	mov	r0, r5
 800ac48:	4621      	mov	r1, r4
 800ac4a:	f7ff ff5f 	bl	800ab0c <__sflush_r>
 800ac4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac50:	07da      	lsls	r2, r3, #31
 800ac52:	4605      	mov	r5, r0
 800ac54:	d4e4      	bmi.n	800ac20 <_fflush_r+0xc>
 800ac56:	89a3      	ldrh	r3, [r4, #12]
 800ac58:	059b      	lsls	r3, r3, #22
 800ac5a:	d4e1      	bmi.n	800ac20 <_fflush_r+0xc>
 800ac5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac5e:	f7fe fe11 	bl	8009884 <__retarget_lock_release_recursive>
 800ac62:	e7dd      	b.n	800ac20 <_fflush_r+0xc>

0800ac64 <fiprintf>:
 800ac64:	b40e      	push	{r1, r2, r3}
 800ac66:	b503      	push	{r0, r1, lr}
 800ac68:	4601      	mov	r1, r0
 800ac6a:	ab03      	add	r3, sp, #12
 800ac6c:	4805      	ldr	r0, [pc, #20]	@ (800ac84 <fiprintf+0x20>)
 800ac6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac72:	6800      	ldr	r0, [r0, #0]
 800ac74:	9301      	str	r3, [sp, #4]
 800ac76:	f000 f85b 	bl	800ad30 <_vfiprintf_r>
 800ac7a:	b002      	add	sp, #8
 800ac7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac80:	b003      	add	sp, #12
 800ac82:	4770      	bx	lr
 800ac84:	200002c0 	.word	0x200002c0

0800ac88 <_sbrk_r>:
 800ac88:	b538      	push	{r3, r4, r5, lr}
 800ac8a:	4d06      	ldr	r5, [pc, #24]	@ (800aca4 <_sbrk_r+0x1c>)
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	4604      	mov	r4, r0
 800ac90:	4608      	mov	r0, r1
 800ac92:	602b      	str	r3, [r5, #0]
 800ac94:	f7f6 fe76 	bl	8001984 <_sbrk>
 800ac98:	1c43      	adds	r3, r0, #1
 800ac9a:	d102      	bne.n	800aca2 <_sbrk_r+0x1a>
 800ac9c:	682b      	ldr	r3, [r5, #0]
 800ac9e:	b103      	cbz	r3, 800aca2 <_sbrk_r+0x1a>
 800aca0:	6023      	str	r3, [r4, #0]
 800aca2:	bd38      	pop	{r3, r4, r5, pc}
 800aca4:	2000080c 	.word	0x2000080c

0800aca8 <abort>:
 800aca8:	b508      	push	{r3, lr}
 800acaa:	2006      	movs	r0, #6
 800acac:	f000 fba2 	bl	800b3f4 <raise>
 800acb0:	2001      	movs	r0, #1
 800acb2:	f7f6 fdef 	bl	8001894 <_exit>

0800acb6 <_calloc_r>:
 800acb6:	b570      	push	{r4, r5, r6, lr}
 800acb8:	fba1 5402 	umull	r5, r4, r1, r2
 800acbc:	b93c      	cbnz	r4, 800acce <_calloc_r+0x18>
 800acbe:	4629      	mov	r1, r5
 800acc0:	f7ff f9c6 	bl	800a050 <_malloc_r>
 800acc4:	4606      	mov	r6, r0
 800acc6:	b928      	cbnz	r0, 800acd4 <_calloc_r+0x1e>
 800acc8:	2600      	movs	r6, #0
 800acca:	4630      	mov	r0, r6
 800accc:	bd70      	pop	{r4, r5, r6, pc}
 800acce:	220c      	movs	r2, #12
 800acd0:	6002      	str	r2, [r0, #0]
 800acd2:	e7f9      	b.n	800acc8 <_calloc_r+0x12>
 800acd4:	462a      	mov	r2, r5
 800acd6:	4621      	mov	r1, r4
 800acd8:	f7fe fceb 	bl	80096b2 <memset>
 800acdc:	e7f5      	b.n	800acca <_calloc_r+0x14>

0800acde <__sfputc_r>:
 800acde:	6893      	ldr	r3, [r2, #8]
 800ace0:	3b01      	subs	r3, #1
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	b410      	push	{r4}
 800ace6:	6093      	str	r3, [r2, #8]
 800ace8:	da08      	bge.n	800acfc <__sfputc_r+0x1e>
 800acea:	6994      	ldr	r4, [r2, #24]
 800acec:	42a3      	cmp	r3, r4
 800acee:	db01      	blt.n	800acf4 <__sfputc_r+0x16>
 800acf0:	290a      	cmp	r1, #10
 800acf2:	d103      	bne.n	800acfc <__sfputc_r+0x1e>
 800acf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acf8:	f000 bac0 	b.w	800b27c <__swbuf_r>
 800acfc:	6813      	ldr	r3, [r2, #0]
 800acfe:	1c58      	adds	r0, r3, #1
 800ad00:	6010      	str	r0, [r2, #0]
 800ad02:	7019      	strb	r1, [r3, #0]
 800ad04:	4608      	mov	r0, r1
 800ad06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <__sfputs_r>:
 800ad0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0e:	4606      	mov	r6, r0
 800ad10:	460f      	mov	r7, r1
 800ad12:	4614      	mov	r4, r2
 800ad14:	18d5      	adds	r5, r2, r3
 800ad16:	42ac      	cmp	r4, r5
 800ad18:	d101      	bne.n	800ad1e <__sfputs_r+0x12>
 800ad1a:	2000      	movs	r0, #0
 800ad1c:	e007      	b.n	800ad2e <__sfputs_r+0x22>
 800ad1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad22:	463a      	mov	r2, r7
 800ad24:	4630      	mov	r0, r6
 800ad26:	f7ff ffda 	bl	800acde <__sfputc_r>
 800ad2a:	1c43      	adds	r3, r0, #1
 800ad2c:	d1f3      	bne.n	800ad16 <__sfputs_r+0xa>
 800ad2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ad30 <_vfiprintf_r>:
 800ad30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad34:	460d      	mov	r5, r1
 800ad36:	b09d      	sub	sp, #116	@ 0x74
 800ad38:	4614      	mov	r4, r2
 800ad3a:	4698      	mov	r8, r3
 800ad3c:	4606      	mov	r6, r0
 800ad3e:	b118      	cbz	r0, 800ad48 <_vfiprintf_r+0x18>
 800ad40:	6a03      	ldr	r3, [r0, #32]
 800ad42:	b90b      	cbnz	r3, 800ad48 <_vfiprintf_r+0x18>
 800ad44:	f7fe fc3c 	bl	80095c0 <__sinit>
 800ad48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad4a:	07d9      	lsls	r1, r3, #31
 800ad4c:	d405      	bmi.n	800ad5a <_vfiprintf_r+0x2a>
 800ad4e:	89ab      	ldrh	r3, [r5, #12]
 800ad50:	059a      	lsls	r2, r3, #22
 800ad52:	d402      	bmi.n	800ad5a <_vfiprintf_r+0x2a>
 800ad54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad56:	f7fe fd94 	bl	8009882 <__retarget_lock_acquire_recursive>
 800ad5a:	89ab      	ldrh	r3, [r5, #12]
 800ad5c:	071b      	lsls	r3, r3, #28
 800ad5e:	d501      	bpl.n	800ad64 <_vfiprintf_r+0x34>
 800ad60:	692b      	ldr	r3, [r5, #16]
 800ad62:	b99b      	cbnz	r3, 800ad8c <_vfiprintf_r+0x5c>
 800ad64:	4629      	mov	r1, r5
 800ad66:	4630      	mov	r0, r6
 800ad68:	f000 fac6 	bl	800b2f8 <__swsetup_r>
 800ad6c:	b170      	cbz	r0, 800ad8c <_vfiprintf_r+0x5c>
 800ad6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad70:	07dc      	lsls	r4, r3, #31
 800ad72:	d504      	bpl.n	800ad7e <_vfiprintf_r+0x4e>
 800ad74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad78:	b01d      	add	sp, #116	@ 0x74
 800ad7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad7e:	89ab      	ldrh	r3, [r5, #12]
 800ad80:	0598      	lsls	r0, r3, #22
 800ad82:	d4f7      	bmi.n	800ad74 <_vfiprintf_r+0x44>
 800ad84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad86:	f7fe fd7d 	bl	8009884 <__retarget_lock_release_recursive>
 800ad8a:	e7f3      	b.n	800ad74 <_vfiprintf_r+0x44>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad90:	2320      	movs	r3, #32
 800ad92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad96:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad9a:	2330      	movs	r3, #48	@ 0x30
 800ad9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800af4c <_vfiprintf_r+0x21c>
 800ada0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ada4:	f04f 0901 	mov.w	r9, #1
 800ada8:	4623      	mov	r3, r4
 800adaa:	469a      	mov	sl, r3
 800adac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adb0:	b10a      	cbz	r2, 800adb6 <_vfiprintf_r+0x86>
 800adb2:	2a25      	cmp	r2, #37	@ 0x25
 800adb4:	d1f9      	bne.n	800adaa <_vfiprintf_r+0x7a>
 800adb6:	ebba 0b04 	subs.w	fp, sl, r4
 800adba:	d00b      	beq.n	800add4 <_vfiprintf_r+0xa4>
 800adbc:	465b      	mov	r3, fp
 800adbe:	4622      	mov	r2, r4
 800adc0:	4629      	mov	r1, r5
 800adc2:	4630      	mov	r0, r6
 800adc4:	f7ff ffa2 	bl	800ad0c <__sfputs_r>
 800adc8:	3001      	adds	r0, #1
 800adca:	f000 80a7 	beq.w	800af1c <_vfiprintf_r+0x1ec>
 800adce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800add0:	445a      	add	r2, fp
 800add2:	9209      	str	r2, [sp, #36]	@ 0x24
 800add4:	f89a 3000 	ldrb.w	r3, [sl]
 800add8:	2b00      	cmp	r3, #0
 800adda:	f000 809f 	beq.w	800af1c <_vfiprintf_r+0x1ec>
 800adde:	2300      	movs	r3, #0
 800ade0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ade4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ade8:	f10a 0a01 	add.w	sl, sl, #1
 800adec:	9304      	str	r3, [sp, #16]
 800adee:	9307      	str	r3, [sp, #28]
 800adf0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800adf4:	931a      	str	r3, [sp, #104]	@ 0x68
 800adf6:	4654      	mov	r4, sl
 800adf8:	2205      	movs	r2, #5
 800adfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adfe:	4853      	ldr	r0, [pc, #332]	@ (800af4c <_vfiprintf_r+0x21c>)
 800ae00:	f7f5 fa26 	bl	8000250 <memchr>
 800ae04:	9a04      	ldr	r2, [sp, #16]
 800ae06:	b9d8      	cbnz	r0, 800ae40 <_vfiprintf_r+0x110>
 800ae08:	06d1      	lsls	r1, r2, #27
 800ae0a:	bf44      	itt	mi
 800ae0c:	2320      	movmi	r3, #32
 800ae0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae12:	0713      	lsls	r3, r2, #28
 800ae14:	bf44      	itt	mi
 800ae16:	232b      	movmi	r3, #43	@ 0x2b
 800ae18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae20:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae22:	d015      	beq.n	800ae50 <_vfiprintf_r+0x120>
 800ae24:	9a07      	ldr	r2, [sp, #28]
 800ae26:	4654      	mov	r4, sl
 800ae28:	2000      	movs	r0, #0
 800ae2a:	f04f 0c0a 	mov.w	ip, #10
 800ae2e:	4621      	mov	r1, r4
 800ae30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae34:	3b30      	subs	r3, #48	@ 0x30
 800ae36:	2b09      	cmp	r3, #9
 800ae38:	d94b      	bls.n	800aed2 <_vfiprintf_r+0x1a2>
 800ae3a:	b1b0      	cbz	r0, 800ae6a <_vfiprintf_r+0x13a>
 800ae3c:	9207      	str	r2, [sp, #28]
 800ae3e:	e014      	b.n	800ae6a <_vfiprintf_r+0x13a>
 800ae40:	eba0 0308 	sub.w	r3, r0, r8
 800ae44:	fa09 f303 	lsl.w	r3, r9, r3
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	9304      	str	r3, [sp, #16]
 800ae4c:	46a2      	mov	sl, r4
 800ae4e:	e7d2      	b.n	800adf6 <_vfiprintf_r+0xc6>
 800ae50:	9b03      	ldr	r3, [sp, #12]
 800ae52:	1d19      	adds	r1, r3, #4
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	9103      	str	r1, [sp, #12]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	bfbb      	ittet	lt
 800ae5c:	425b      	neglt	r3, r3
 800ae5e:	f042 0202 	orrlt.w	r2, r2, #2
 800ae62:	9307      	strge	r3, [sp, #28]
 800ae64:	9307      	strlt	r3, [sp, #28]
 800ae66:	bfb8      	it	lt
 800ae68:	9204      	strlt	r2, [sp, #16]
 800ae6a:	7823      	ldrb	r3, [r4, #0]
 800ae6c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae6e:	d10a      	bne.n	800ae86 <_vfiprintf_r+0x156>
 800ae70:	7863      	ldrb	r3, [r4, #1]
 800ae72:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae74:	d132      	bne.n	800aedc <_vfiprintf_r+0x1ac>
 800ae76:	9b03      	ldr	r3, [sp, #12]
 800ae78:	1d1a      	adds	r2, r3, #4
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	9203      	str	r2, [sp, #12]
 800ae7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae82:	3402      	adds	r4, #2
 800ae84:	9305      	str	r3, [sp, #20]
 800ae86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800af5c <_vfiprintf_r+0x22c>
 800ae8a:	7821      	ldrb	r1, [r4, #0]
 800ae8c:	2203      	movs	r2, #3
 800ae8e:	4650      	mov	r0, sl
 800ae90:	f7f5 f9de 	bl	8000250 <memchr>
 800ae94:	b138      	cbz	r0, 800aea6 <_vfiprintf_r+0x176>
 800ae96:	9b04      	ldr	r3, [sp, #16]
 800ae98:	eba0 000a 	sub.w	r0, r0, sl
 800ae9c:	2240      	movs	r2, #64	@ 0x40
 800ae9e:	4082      	lsls	r2, r0
 800aea0:	4313      	orrs	r3, r2
 800aea2:	3401      	adds	r4, #1
 800aea4:	9304      	str	r3, [sp, #16]
 800aea6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeaa:	4829      	ldr	r0, [pc, #164]	@ (800af50 <_vfiprintf_r+0x220>)
 800aeac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aeb0:	2206      	movs	r2, #6
 800aeb2:	f7f5 f9cd 	bl	8000250 <memchr>
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	d03f      	beq.n	800af3a <_vfiprintf_r+0x20a>
 800aeba:	4b26      	ldr	r3, [pc, #152]	@ (800af54 <_vfiprintf_r+0x224>)
 800aebc:	bb1b      	cbnz	r3, 800af06 <_vfiprintf_r+0x1d6>
 800aebe:	9b03      	ldr	r3, [sp, #12]
 800aec0:	3307      	adds	r3, #7
 800aec2:	f023 0307 	bic.w	r3, r3, #7
 800aec6:	3308      	adds	r3, #8
 800aec8:	9303      	str	r3, [sp, #12]
 800aeca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aecc:	443b      	add	r3, r7
 800aece:	9309      	str	r3, [sp, #36]	@ 0x24
 800aed0:	e76a      	b.n	800ada8 <_vfiprintf_r+0x78>
 800aed2:	fb0c 3202 	mla	r2, ip, r2, r3
 800aed6:	460c      	mov	r4, r1
 800aed8:	2001      	movs	r0, #1
 800aeda:	e7a8      	b.n	800ae2e <_vfiprintf_r+0xfe>
 800aedc:	2300      	movs	r3, #0
 800aede:	3401      	adds	r4, #1
 800aee0:	9305      	str	r3, [sp, #20]
 800aee2:	4619      	mov	r1, r3
 800aee4:	f04f 0c0a 	mov.w	ip, #10
 800aee8:	4620      	mov	r0, r4
 800aeea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aeee:	3a30      	subs	r2, #48	@ 0x30
 800aef0:	2a09      	cmp	r2, #9
 800aef2:	d903      	bls.n	800aefc <_vfiprintf_r+0x1cc>
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d0c6      	beq.n	800ae86 <_vfiprintf_r+0x156>
 800aef8:	9105      	str	r1, [sp, #20]
 800aefa:	e7c4      	b.n	800ae86 <_vfiprintf_r+0x156>
 800aefc:	fb0c 2101 	mla	r1, ip, r1, r2
 800af00:	4604      	mov	r4, r0
 800af02:	2301      	movs	r3, #1
 800af04:	e7f0      	b.n	800aee8 <_vfiprintf_r+0x1b8>
 800af06:	ab03      	add	r3, sp, #12
 800af08:	9300      	str	r3, [sp, #0]
 800af0a:	462a      	mov	r2, r5
 800af0c:	4b12      	ldr	r3, [pc, #72]	@ (800af58 <_vfiprintf_r+0x228>)
 800af0e:	a904      	add	r1, sp, #16
 800af10:	4630      	mov	r0, r6
 800af12:	f3af 8000 	nop.w
 800af16:	4607      	mov	r7, r0
 800af18:	1c78      	adds	r0, r7, #1
 800af1a:	d1d6      	bne.n	800aeca <_vfiprintf_r+0x19a>
 800af1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af1e:	07d9      	lsls	r1, r3, #31
 800af20:	d405      	bmi.n	800af2e <_vfiprintf_r+0x1fe>
 800af22:	89ab      	ldrh	r3, [r5, #12]
 800af24:	059a      	lsls	r2, r3, #22
 800af26:	d402      	bmi.n	800af2e <_vfiprintf_r+0x1fe>
 800af28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af2a:	f7fe fcab 	bl	8009884 <__retarget_lock_release_recursive>
 800af2e:	89ab      	ldrh	r3, [r5, #12]
 800af30:	065b      	lsls	r3, r3, #25
 800af32:	f53f af1f 	bmi.w	800ad74 <_vfiprintf_r+0x44>
 800af36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af38:	e71e      	b.n	800ad78 <_vfiprintf_r+0x48>
 800af3a:	ab03      	add	r3, sp, #12
 800af3c:	9300      	str	r3, [sp, #0]
 800af3e:	462a      	mov	r2, r5
 800af40:	4b05      	ldr	r3, [pc, #20]	@ (800af58 <_vfiprintf_r+0x228>)
 800af42:	a904      	add	r1, sp, #16
 800af44:	4630      	mov	r0, r6
 800af46:	f000 f879 	bl	800b03c <_printf_i>
 800af4a:	e7e4      	b.n	800af16 <_vfiprintf_r+0x1e6>
 800af4c:	0800b9a0 	.word	0x0800b9a0
 800af50:	0800b9aa 	.word	0x0800b9aa
 800af54:	00000000 	.word	0x00000000
 800af58:	0800ad0d 	.word	0x0800ad0d
 800af5c:	0800b9a6 	.word	0x0800b9a6

0800af60 <_printf_common>:
 800af60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af64:	4616      	mov	r6, r2
 800af66:	4698      	mov	r8, r3
 800af68:	688a      	ldr	r2, [r1, #8]
 800af6a:	690b      	ldr	r3, [r1, #16]
 800af6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af70:	4293      	cmp	r3, r2
 800af72:	bfb8      	it	lt
 800af74:	4613      	movlt	r3, r2
 800af76:	6033      	str	r3, [r6, #0]
 800af78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800af7c:	4607      	mov	r7, r0
 800af7e:	460c      	mov	r4, r1
 800af80:	b10a      	cbz	r2, 800af86 <_printf_common+0x26>
 800af82:	3301      	adds	r3, #1
 800af84:	6033      	str	r3, [r6, #0]
 800af86:	6823      	ldr	r3, [r4, #0]
 800af88:	0699      	lsls	r1, r3, #26
 800af8a:	bf42      	ittt	mi
 800af8c:	6833      	ldrmi	r3, [r6, #0]
 800af8e:	3302      	addmi	r3, #2
 800af90:	6033      	strmi	r3, [r6, #0]
 800af92:	6825      	ldr	r5, [r4, #0]
 800af94:	f015 0506 	ands.w	r5, r5, #6
 800af98:	d106      	bne.n	800afa8 <_printf_common+0x48>
 800af9a:	f104 0a19 	add.w	sl, r4, #25
 800af9e:	68e3      	ldr	r3, [r4, #12]
 800afa0:	6832      	ldr	r2, [r6, #0]
 800afa2:	1a9b      	subs	r3, r3, r2
 800afa4:	42ab      	cmp	r3, r5
 800afa6:	dc26      	bgt.n	800aff6 <_printf_common+0x96>
 800afa8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800afac:	6822      	ldr	r2, [r4, #0]
 800afae:	3b00      	subs	r3, #0
 800afb0:	bf18      	it	ne
 800afb2:	2301      	movne	r3, #1
 800afb4:	0692      	lsls	r2, r2, #26
 800afb6:	d42b      	bmi.n	800b010 <_printf_common+0xb0>
 800afb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800afbc:	4641      	mov	r1, r8
 800afbe:	4638      	mov	r0, r7
 800afc0:	47c8      	blx	r9
 800afc2:	3001      	adds	r0, #1
 800afc4:	d01e      	beq.n	800b004 <_printf_common+0xa4>
 800afc6:	6823      	ldr	r3, [r4, #0]
 800afc8:	6922      	ldr	r2, [r4, #16]
 800afca:	f003 0306 	and.w	r3, r3, #6
 800afce:	2b04      	cmp	r3, #4
 800afd0:	bf02      	ittt	eq
 800afd2:	68e5      	ldreq	r5, [r4, #12]
 800afd4:	6833      	ldreq	r3, [r6, #0]
 800afd6:	1aed      	subeq	r5, r5, r3
 800afd8:	68a3      	ldr	r3, [r4, #8]
 800afda:	bf0c      	ite	eq
 800afdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afe0:	2500      	movne	r5, #0
 800afe2:	4293      	cmp	r3, r2
 800afe4:	bfc4      	itt	gt
 800afe6:	1a9b      	subgt	r3, r3, r2
 800afe8:	18ed      	addgt	r5, r5, r3
 800afea:	2600      	movs	r6, #0
 800afec:	341a      	adds	r4, #26
 800afee:	42b5      	cmp	r5, r6
 800aff0:	d11a      	bne.n	800b028 <_printf_common+0xc8>
 800aff2:	2000      	movs	r0, #0
 800aff4:	e008      	b.n	800b008 <_printf_common+0xa8>
 800aff6:	2301      	movs	r3, #1
 800aff8:	4652      	mov	r2, sl
 800affa:	4641      	mov	r1, r8
 800affc:	4638      	mov	r0, r7
 800affe:	47c8      	blx	r9
 800b000:	3001      	adds	r0, #1
 800b002:	d103      	bne.n	800b00c <_printf_common+0xac>
 800b004:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b00c:	3501      	adds	r5, #1
 800b00e:	e7c6      	b.n	800af9e <_printf_common+0x3e>
 800b010:	18e1      	adds	r1, r4, r3
 800b012:	1c5a      	adds	r2, r3, #1
 800b014:	2030      	movs	r0, #48	@ 0x30
 800b016:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b01a:	4422      	add	r2, r4
 800b01c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b020:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b024:	3302      	adds	r3, #2
 800b026:	e7c7      	b.n	800afb8 <_printf_common+0x58>
 800b028:	2301      	movs	r3, #1
 800b02a:	4622      	mov	r2, r4
 800b02c:	4641      	mov	r1, r8
 800b02e:	4638      	mov	r0, r7
 800b030:	47c8      	blx	r9
 800b032:	3001      	adds	r0, #1
 800b034:	d0e6      	beq.n	800b004 <_printf_common+0xa4>
 800b036:	3601      	adds	r6, #1
 800b038:	e7d9      	b.n	800afee <_printf_common+0x8e>
	...

0800b03c <_printf_i>:
 800b03c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b040:	7e0f      	ldrb	r7, [r1, #24]
 800b042:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b044:	2f78      	cmp	r7, #120	@ 0x78
 800b046:	4691      	mov	r9, r2
 800b048:	4680      	mov	r8, r0
 800b04a:	460c      	mov	r4, r1
 800b04c:	469a      	mov	sl, r3
 800b04e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b052:	d807      	bhi.n	800b064 <_printf_i+0x28>
 800b054:	2f62      	cmp	r7, #98	@ 0x62
 800b056:	d80a      	bhi.n	800b06e <_printf_i+0x32>
 800b058:	2f00      	cmp	r7, #0
 800b05a:	f000 80d2 	beq.w	800b202 <_printf_i+0x1c6>
 800b05e:	2f58      	cmp	r7, #88	@ 0x58
 800b060:	f000 80b9 	beq.w	800b1d6 <_printf_i+0x19a>
 800b064:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b068:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b06c:	e03a      	b.n	800b0e4 <_printf_i+0xa8>
 800b06e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b072:	2b15      	cmp	r3, #21
 800b074:	d8f6      	bhi.n	800b064 <_printf_i+0x28>
 800b076:	a101      	add	r1, pc, #4	@ (adr r1, 800b07c <_printf_i+0x40>)
 800b078:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b07c:	0800b0d5 	.word	0x0800b0d5
 800b080:	0800b0e9 	.word	0x0800b0e9
 800b084:	0800b065 	.word	0x0800b065
 800b088:	0800b065 	.word	0x0800b065
 800b08c:	0800b065 	.word	0x0800b065
 800b090:	0800b065 	.word	0x0800b065
 800b094:	0800b0e9 	.word	0x0800b0e9
 800b098:	0800b065 	.word	0x0800b065
 800b09c:	0800b065 	.word	0x0800b065
 800b0a0:	0800b065 	.word	0x0800b065
 800b0a4:	0800b065 	.word	0x0800b065
 800b0a8:	0800b1e9 	.word	0x0800b1e9
 800b0ac:	0800b113 	.word	0x0800b113
 800b0b0:	0800b1a3 	.word	0x0800b1a3
 800b0b4:	0800b065 	.word	0x0800b065
 800b0b8:	0800b065 	.word	0x0800b065
 800b0bc:	0800b20b 	.word	0x0800b20b
 800b0c0:	0800b065 	.word	0x0800b065
 800b0c4:	0800b113 	.word	0x0800b113
 800b0c8:	0800b065 	.word	0x0800b065
 800b0cc:	0800b065 	.word	0x0800b065
 800b0d0:	0800b1ab 	.word	0x0800b1ab
 800b0d4:	6833      	ldr	r3, [r6, #0]
 800b0d6:	1d1a      	adds	r2, r3, #4
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	6032      	str	r2, [r6, #0]
 800b0dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e09d      	b.n	800b224 <_printf_i+0x1e8>
 800b0e8:	6833      	ldr	r3, [r6, #0]
 800b0ea:	6820      	ldr	r0, [r4, #0]
 800b0ec:	1d19      	adds	r1, r3, #4
 800b0ee:	6031      	str	r1, [r6, #0]
 800b0f0:	0606      	lsls	r6, r0, #24
 800b0f2:	d501      	bpl.n	800b0f8 <_printf_i+0xbc>
 800b0f4:	681d      	ldr	r5, [r3, #0]
 800b0f6:	e003      	b.n	800b100 <_printf_i+0xc4>
 800b0f8:	0645      	lsls	r5, r0, #25
 800b0fa:	d5fb      	bpl.n	800b0f4 <_printf_i+0xb8>
 800b0fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b100:	2d00      	cmp	r5, #0
 800b102:	da03      	bge.n	800b10c <_printf_i+0xd0>
 800b104:	232d      	movs	r3, #45	@ 0x2d
 800b106:	426d      	negs	r5, r5
 800b108:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b10c:	4859      	ldr	r0, [pc, #356]	@ (800b274 <_printf_i+0x238>)
 800b10e:	230a      	movs	r3, #10
 800b110:	e011      	b.n	800b136 <_printf_i+0xfa>
 800b112:	6821      	ldr	r1, [r4, #0]
 800b114:	6833      	ldr	r3, [r6, #0]
 800b116:	0608      	lsls	r0, r1, #24
 800b118:	f853 5b04 	ldr.w	r5, [r3], #4
 800b11c:	d402      	bmi.n	800b124 <_printf_i+0xe8>
 800b11e:	0649      	lsls	r1, r1, #25
 800b120:	bf48      	it	mi
 800b122:	b2ad      	uxthmi	r5, r5
 800b124:	2f6f      	cmp	r7, #111	@ 0x6f
 800b126:	4853      	ldr	r0, [pc, #332]	@ (800b274 <_printf_i+0x238>)
 800b128:	6033      	str	r3, [r6, #0]
 800b12a:	bf14      	ite	ne
 800b12c:	230a      	movne	r3, #10
 800b12e:	2308      	moveq	r3, #8
 800b130:	2100      	movs	r1, #0
 800b132:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b136:	6866      	ldr	r6, [r4, #4]
 800b138:	60a6      	str	r6, [r4, #8]
 800b13a:	2e00      	cmp	r6, #0
 800b13c:	bfa2      	ittt	ge
 800b13e:	6821      	ldrge	r1, [r4, #0]
 800b140:	f021 0104 	bicge.w	r1, r1, #4
 800b144:	6021      	strge	r1, [r4, #0]
 800b146:	b90d      	cbnz	r5, 800b14c <_printf_i+0x110>
 800b148:	2e00      	cmp	r6, #0
 800b14a:	d04b      	beq.n	800b1e4 <_printf_i+0x1a8>
 800b14c:	4616      	mov	r6, r2
 800b14e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b152:	fb03 5711 	mls	r7, r3, r1, r5
 800b156:	5dc7      	ldrb	r7, [r0, r7]
 800b158:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b15c:	462f      	mov	r7, r5
 800b15e:	42bb      	cmp	r3, r7
 800b160:	460d      	mov	r5, r1
 800b162:	d9f4      	bls.n	800b14e <_printf_i+0x112>
 800b164:	2b08      	cmp	r3, #8
 800b166:	d10b      	bne.n	800b180 <_printf_i+0x144>
 800b168:	6823      	ldr	r3, [r4, #0]
 800b16a:	07df      	lsls	r7, r3, #31
 800b16c:	d508      	bpl.n	800b180 <_printf_i+0x144>
 800b16e:	6923      	ldr	r3, [r4, #16]
 800b170:	6861      	ldr	r1, [r4, #4]
 800b172:	4299      	cmp	r1, r3
 800b174:	bfde      	ittt	le
 800b176:	2330      	movle	r3, #48	@ 0x30
 800b178:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b17c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b180:	1b92      	subs	r2, r2, r6
 800b182:	6122      	str	r2, [r4, #16]
 800b184:	f8cd a000 	str.w	sl, [sp]
 800b188:	464b      	mov	r3, r9
 800b18a:	aa03      	add	r2, sp, #12
 800b18c:	4621      	mov	r1, r4
 800b18e:	4640      	mov	r0, r8
 800b190:	f7ff fee6 	bl	800af60 <_printf_common>
 800b194:	3001      	adds	r0, #1
 800b196:	d14a      	bne.n	800b22e <_printf_i+0x1f2>
 800b198:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b19c:	b004      	add	sp, #16
 800b19e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1a2:	6823      	ldr	r3, [r4, #0]
 800b1a4:	f043 0320 	orr.w	r3, r3, #32
 800b1a8:	6023      	str	r3, [r4, #0]
 800b1aa:	4833      	ldr	r0, [pc, #204]	@ (800b278 <_printf_i+0x23c>)
 800b1ac:	2778      	movs	r7, #120	@ 0x78
 800b1ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b1b2:	6823      	ldr	r3, [r4, #0]
 800b1b4:	6831      	ldr	r1, [r6, #0]
 800b1b6:	061f      	lsls	r7, r3, #24
 800b1b8:	f851 5b04 	ldr.w	r5, [r1], #4
 800b1bc:	d402      	bmi.n	800b1c4 <_printf_i+0x188>
 800b1be:	065f      	lsls	r7, r3, #25
 800b1c0:	bf48      	it	mi
 800b1c2:	b2ad      	uxthmi	r5, r5
 800b1c4:	6031      	str	r1, [r6, #0]
 800b1c6:	07d9      	lsls	r1, r3, #31
 800b1c8:	bf44      	itt	mi
 800b1ca:	f043 0320 	orrmi.w	r3, r3, #32
 800b1ce:	6023      	strmi	r3, [r4, #0]
 800b1d0:	b11d      	cbz	r5, 800b1da <_printf_i+0x19e>
 800b1d2:	2310      	movs	r3, #16
 800b1d4:	e7ac      	b.n	800b130 <_printf_i+0xf4>
 800b1d6:	4827      	ldr	r0, [pc, #156]	@ (800b274 <_printf_i+0x238>)
 800b1d8:	e7e9      	b.n	800b1ae <_printf_i+0x172>
 800b1da:	6823      	ldr	r3, [r4, #0]
 800b1dc:	f023 0320 	bic.w	r3, r3, #32
 800b1e0:	6023      	str	r3, [r4, #0]
 800b1e2:	e7f6      	b.n	800b1d2 <_printf_i+0x196>
 800b1e4:	4616      	mov	r6, r2
 800b1e6:	e7bd      	b.n	800b164 <_printf_i+0x128>
 800b1e8:	6833      	ldr	r3, [r6, #0]
 800b1ea:	6825      	ldr	r5, [r4, #0]
 800b1ec:	6961      	ldr	r1, [r4, #20]
 800b1ee:	1d18      	adds	r0, r3, #4
 800b1f0:	6030      	str	r0, [r6, #0]
 800b1f2:	062e      	lsls	r6, r5, #24
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	d501      	bpl.n	800b1fc <_printf_i+0x1c0>
 800b1f8:	6019      	str	r1, [r3, #0]
 800b1fa:	e002      	b.n	800b202 <_printf_i+0x1c6>
 800b1fc:	0668      	lsls	r0, r5, #25
 800b1fe:	d5fb      	bpl.n	800b1f8 <_printf_i+0x1bc>
 800b200:	8019      	strh	r1, [r3, #0]
 800b202:	2300      	movs	r3, #0
 800b204:	6123      	str	r3, [r4, #16]
 800b206:	4616      	mov	r6, r2
 800b208:	e7bc      	b.n	800b184 <_printf_i+0x148>
 800b20a:	6833      	ldr	r3, [r6, #0]
 800b20c:	1d1a      	adds	r2, r3, #4
 800b20e:	6032      	str	r2, [r6, #0]
 800b210:	681e      	ldr	r6, [r3, #0]
 800b212:	6862      	ldr	r2, [r4, #4]
 800b214:	2100      	movs	r1, #0
 800b216:	4630      	mov	r0, r6
 800b218:	f7f5 f81a 	bl	8000250 <memchr>
 800b21c:	b108      	cbz	r0, 800b222 <_printf_i+0x1e6>
 800b21e:	1b80      	subs	r0, r0, r6
 800b220:	6060      	str	r0, [r4, #4]
 800b222:	6863      	ldr	r3, [r4, #4]
 800b224:	6123      	str	r3, [r4, #16]
 800b226:	2300      	movs	r3, #0
 800b228:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b22c:	e7aa      	b.n	800b184 <_printf_i+0x148>
 800b22e:	6923      	ldr	r3, [r4, #16]
 800b230:	4632      	mov	r2, r6
 800b232:	4649      	mov	r1, r9
 800b234:	4640      	mov	r0, r8
 800b236:	47d0      	blx	sl
 800b238:	3001      	adds	r0, #1
 800b23a:	d0ad      	beq.n	800b198 <_printf_i+0x15c>
 800b23c:	6823      	ldr	r3, [r4, #0]
 800b23e:	079b      	lsls	r3, r3, #30
 800b240:	d413      	bmi.n	800b26a <_printf_i+0x22e>
 800b242:	68e0      	ldr	r0, [r4, #12]
 800b244:	9b03      	ldr	r3, [sp, #12]
 800b246:	4298      	cmp	r0, r3
 800b248:	bfb8      	it	lt
 800b24a:	4618      	movlt	r0, r3
 800b24c:	e7a6      	b.n	800b19c <_printf_i+0x160>
 800b24e:	2301      	movs	r3, #1
 800b250:	4632      	mov	r2, r6
 800b252:	4649      	mov	r1, r9
 800b254:	4640      	mov	r0, r8
 800b256:	47d0      	blx	sl
 800b258:	3001      	adds	r0, #1
 800b25a:	d09d      	beq.n	800b198 <_printf_i+0x15c>
 800b25c:	3501      	adds	r5, #1
 800b25e:	68e3      	ldr	r3, [r4, #12]
 800b260:	9903      	ldr	r1, [sp, #12]
 800b262:	1a5b      	subs	r3, r3, r1
 800b264:	42ab      	cmp	r3, r5
 800b266:	dcf2      	bgt.n	800b24e <_printf_i+0x212>
 800b268:	e7eb      	b.n	800b242 <_printf_i+0x206>
 800b26a:	2500      	movs	r5, #0
 800b26c:	f104 0619 	add.w	r6, r4, #25
 800b270:	e7f5      	b.n	800b25e <_printf_i+0x222>
 800b272:	bf00      	nop
 800b274:	0800b9b1 	.word	0x0800b9b1
 800b278:	0800b9c2 	.word	0x0800b9c2

0800b27c <__swbuf_r>:
 800b27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27e:	460e      	mov	r6, r1
 800b280:	4614      	mov	r4, r2
 800b282:	4605      	mov	r5, r0
 800b284:	b118      	cbz	r0, 800b28e <__swbuf_r+0x12>
 800b286:	6a03      	ldr	r3, [r0, #32]
 800b288:	b90b      	cbnz	r3, 800b28e <__swbuf_r+0x12>
 800b28a:	f7fe f999 	bl	80095c0 <__sinit>
 800b28e:	69a3      	ldr	r3, [r4, #24]
 800b290:	60a3      	str	r3, [r4, #8]
 800b292:	89a3      	ldrh	r3, [r4, #12]
 800b294:	071a      	lsls	r2, r3, #28
 800b296:	d501      	bpl.n	800b29c <__swbuf_r+0x20>
 800b298:	6923      	ldr	r3, [r4, #16]
 800b29a:	b943      	cbnz	r3, 800b2ae <__swbuf_r+0x32>
 800b29c:	4621      	mov	r1, r4
 800b29e:	4628      	mov	r0, r5
 800b2a0:	f000 f82a 	bl	800b2f8 <__swsetup_r>
 800b2a4:	b118      	cbz	r0, 800b2ae <__swbuf_r+0x32>
 800b2a6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b2aa:	4638      	mov	r0, r7
 800b2ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2ae:	6823      	ldr	r3, [r4, #0]
 800b2b0:	6922      	ldr	r2, [r4, #16]
 800b2b2:	1a98      	subs	r0, r3, r2
 800b2b4:	6963      	ldr	r3, [r4, #20]
 800b2b6:	b2f6      	uxtb	r6, r6
 800b2b8:	4283      	cmp	r3, r0
 800b2ba:	4637      	mov	r7, r6
 800b2bc:	dc05      	bgt.n	800b2ca <__swbuf_r+0x4e>
 800b2be:	4621      	mov	r1, r4
 800b2c0:	4628      	mov	r0, r5
 800b2c2:	f7ff fca7 	bl	800ac14 <_fflush_r>
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	d1ed      	bne.n	800b2a6 <__swbuf_r+0x2a>
 800b2ca:	68a3      	ldr	r3, [r4, #8]
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	60a3      	str	r3, [r4, #8]
 800b2d0:	6823      	ldr	r3, [r4, #0]
 800b2d2:	1c5a      	adds	r2, r3, #1
 800b2d4:	6022      	str	r2, [r4, #0]
 800b2d6:	701e      	strb	r6, [r3, #0]
 800b2d8:	6962      	ldr	r2, [r4, #20]
 800b2da:	1c43      	adds	r3, r0, #1
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d004      	beq.n	800b2ea <__swbuf_r+0x6e>
 800b2e0:	89a3      	ldrh	r3, [r4, #12]
 800b2e2:	07db      	lsls	r3, r3, #31
 800b2e4:	d5e1      	bpl.n	800b2aa <__swbuf_r+0x2e>
 800b2e6:	2e0a      	cmp	r6, #10
 800b2e8:	d1df      	bne.n	800b2aa <__swbuf_r+0x2e>
 800b2ea:	4621      	mov	r1, r4
 800b2ec:	4628      	mov	r0, r5
 800b2ee:	f7ff fc91 	bl	800ac14 <_fflush_r>
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	d0d9      	beq.n	800b2aa <__swbuf_r+0x2e>
 800b2f6:	e7d6      	b.n	800b2a6 <__swbuf_r+0x2a>

0800b2f8 <__swsetup_r>:
 800b2f8:	b538      	push	{r3, r4, r5, lr}
 800b2fa:	4b29      	ldr	r3, [pc, #164]	@ (800b3a0 <__swsetup_r+0xa8>)
 800b2fc:	4605      	mov	r5, r0
 800b2fe:	6818      	ldr	r0, [r3, #0]
 800b300:	460c      	mov	r4, r1
 800b302:	b118      	cbz	r0, 800b30c <__swsetup_r+0x14>
 800b304:	6a03      	ldr	r3, [r0, #32]
 800b306:	b90b      	cbnz	r3, 800b30c <__swsetup_r+0x14>
 800b308:	f7fe f95a 	bl	80095c0 <__sinit>
 800b30c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b310:	0719      	lsls	r1, r3, #28
 800b312:	d422      	bmi.n	800b35a <__swsetup_r+0x62>
 800b314:	06da      	lsls	r2, r3, #27
 800b316:	d407      	bmi.n	800b328 <__swsetup_r+0x30>
 800b318:	2209      	movs	r2, #9
 800b31a:	602a      	str	r2, [r5, #0]
 800b31c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b320:	81a3      	strh	r3, [r4, #12]
 800b322:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b326:	e033      	b.n	800b390 <__swsetup_r+0x98>
 800b328:	0758      	lsls	r0, r3, #29
 800b32a:	d512      	bpl.n	800b352 <__swsetup_r+0x5a>
 800b32c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b32e:	b141      	cbz	r1, 800b342 <__swsetup_r+0x4a>
 800b330:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b334:	4299      	cmp	r1, r3
 800b336:	d002      	beq.n	800b33e <__swsetup_r+0x46>
 800b338:	4628      	mov	r0, r5
 800b33a:	f7fe fadb 	bl	80098f4 <_free_r>
 800b33e:	2300      	movs	r3, #0
 800b340:	6363      	str	r3, [r4, #52]	@ 0x34
 800b342:	89a3      	ldrh	r3, [r4, #12]
 800b344:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b348:	81a3      	strh	r3, [r4, #12]
 800b34a:	2300      	movs	r3, #0
 800b34c:	6063      	str	r3, [r4, #4]
 800b34e:	6923      	ldr	r3, [r4, #16]
 800b350:	6023      	str	r3, [r4, #0]
 800b352:	89a3      	ldrh	r3, [r4, #12]
 800b354:	f043 0308 	orr.w	r3, r3, #8
 800b358:	81a3      	strh	r3, [r4, #12]
 800b35a:	6923      	ldr	r3, [r4, #16]
 800b35c:	b94b      	cbnz	r3, 800b372 <__swsetup_r+0x7a>
 800b35e:	89a3      	ldrh	r3, [r4, #12]
 800b360:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b368:	d003      	beq.n	800b372 <__swsetup_r+0x7a>
 800b36a:	4621      	mov	r1, r4
 800b36c:	4628      	mov	r0, r5
 800b36e:	f000 f883 	bl	800b478 <__smakebuf_r>
 800b372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b376:	f013 0201 	ands.w	r2, r3, #1
 800b37a:	d00a      	beq.n	800b392 <__swsetup_r+0x9a>
 800b37c:	2200      	movs	r2, #0
 800b37e:	60a2      	str	r2, [r4, #8]
 800b380:	6962      	ldr	r2, [r4, #20]
 800b382:	4252      	negs	r2, r2
 800b384:	61a2      	str	r2, [r4, #24]
 800b386:	6922      	ldr	r2, [r4, #16]
 800b388:	b942      	cbnz	r2, 800b39c <__swsetup_r+0xa4>
 800b38a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b38e:	d1c5      	bne.n	800b31c <__swsetup_r+0x24>
 800b390:	bd38      	pop	{r3, r4, r5, pc}
 800b392:	0799      	lsls	r1, r3, #30
 800b394:	bf58      	it	pl
 800b396:	6962      	ldrpl	r2, [r4, #20]
 800b398:	60a2      	str	r2, [r4, #8]
 800b39a:	e7f4      	b.n	800b386 <__swsetup_r+0x8e>
 800b39c:	2000      	movs	r0, #0
 800b39e:	e7f7      	b.n	800b390 <__swsetup_r+0x98>
 800b3a0:	200002c0 	.word	0x200002c0

0800b3a4 <_raise_r>:
 800b3a4:	291f      	cmp	r1, #31
 800b3a6:	b538      	push	{r3, r4, r5, lr}
 800b3a8:	4605      	mov	r5, r0
 800b3aa:	460c      	mov	r4, r1
 800b3ac:	d904      	bls.n	800b3b8 <_raise_r+0x14>
 800b3ae:	2316      	movs	r3, #22
 800b3b0:	6003      	str	r3, [r0, #0]
 800b3b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3b6:	bd38      	pop	{r3, r4, r5, pc}
 800b3b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b3ba:	b112      	cbz	r2, 800b3c2 <_raise_r+0x1e>
 800b3bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3c0:	b94b      	cbnz	r3, 800b3d6 <_raise_r+0x32>
 800b3c2:	4628      	mov	r0, r5
 800b3c4:	f000 f830 	bl	800b428 <_getpid_r>
 800b3c8:	4622      	mov	r2, r4
 800b3ca:	4601      	mov	r1, r0
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3d2:	f000 b817 	b.w	800b404 <_kill_r>
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d00a      	beq.n	800b3f0 <_raise_r+0x4c>
 800b3da:	1c59      	adds	r1, r3, #1
 800b3dc:	d103      	bne.n	800b3e6 <_raise_r+0x42>
 800b3de:	2316      	movs	r3, #22
 800b3e0:	6003      	str	r3, [r0, #0]
 800b3e2:	2001      	movs	r0, #1
 800b3e4:	e7e7      	b.n	800b3b6 <_raise_r+0x12>
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	4798      	blx	r3
 800b3f0:	2000      	movs	r0, #0
 800b3f2:	e7e0      	b.n	800b3b6 <_raise_r+0x12>

0800b3f4 <raise>:
 800b3f4:	4b02      	ldr	r3, [pc, #8]	@ (800b400 <raise+0xc>)
 800b3f6:	4601      	mov	r1, r0
 800b3f8:	6818      	ldr	r0, [r3, #0]
 800b3fa:	f7ff bfd3 	b.w	800b3a4 <_raise_r>
 800b3fe:	bf00      	nop
 800b400:	200002c0 	.word	0x200002c0

0800b404 <_kill_r>:
 800b404:	b538      	push	{r3, r4, r5, lr}
 800b406:	4d07      	ldr	r5, [pc, #28]	@ (800b424 <_kill_r+0x20>)
 800b408:	2300      	movs	r3, #0
 800b40a:	4604      	mov	r4, r0
 800b40c:	4608      	mov	r0, r1
 800b40e:	4611      	mov	r1, r2
 800b410:	602b      	str	r3, [r5, #0]
 800b412:	f7f6 fa2f 	bl	8001874 <_kill>
 800b416:	1c43      	adds	r3, r0, #1
 800b418:	d102      	bne.n	800b420 <_kill_r+0x1c>
 800b41a:	682b      	ldr	r3, [r5, #0]
 800b41c:	b103      	cbz	r3, 800b420 <_kill_r+0x1c>
 800b41e:	6023      	str	r3, [r4, #0]
 800b420:	bd38      	pop	{r3, r4, r5, pc}
 800b422:	bf00      	nop
 800b424:	2000080c 	.word	0x2000080c

0800b428 <_getpid_r>:
 800b428:	f7f6 ba1c 	b.w	8001864 <_getpid>

0800b42c <__swhatbuf_r>:
 800b42c:	b570      	push	{r4, r5, r6, lr}
 800b42e:	460c      	mov	r4, r1
 800b430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b434:	2900      	cmp	r1, #0
 800b436:	b096      	sub	sp, #88	@ 0x58
 800b438:	4615      	mov	r5, r2
 800b43a:	461e      	mov	r6, r3
 800b43c:	da0d      	bge.n	800b45a <__swhatbuf_r+0x2e>
 800b43e:	89a3      	ldrh	r3, [r4, #12]
 800b440:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b444:	f04f 0100 	mov.w	r1, #0
 800b448:	bf14      	ite	ne
 800b44a:	2340      	movne	r3, #64	@ 0x40
 800b44c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b450:	2000      	movs	r0, #0
 800b452:	6031      	str	r1, [r6, #0]
 800b454:	602b      	str	r3, [r5, #0]
 800b456:	b016      	add	sp, #88	@ 0x58
 800b458:	bd70      	pop	{r4, r5, r6, pc}
 800b45a:	466a      	mov	r2, sp
 800b45c:	f000 f848 	bl	800b4f0 <_fstat_r>
 800b460:	2800      	cmp	r0, #0
 800b462:	dbec      	blt.n	800b43e <__swhatbuf_r+0x12>
 800b464:	9901      	ldr	r1, [sp, #4]
 800b466:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b46a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b46e:	4259      	negs	r1, r3
 800b470:	4159      	adcs	r1, r3
 800b472:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b476:	e7eb      	b.n	800b450 <__swhatbuf_r+0x24>

0800b478 <__smakebuf_r>:
 800b478:	898b      	ldrh	r3, [r1, #12]
 800b47a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b47c:	079d      	lsls	r5, r3, #30
 800b47e:	4606      	mov	r6, r0
 800b480:	460c      	mov	r4, r1
 800b482:	d507      	bpl.n	800b494 <__smakebuf_r+0x1c>
 800b484:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b488:	6023      	str	r3, [r4, #0]
 800b48a:	6123      	str	r3, [r4, #16]
 800b48c:	2301      	movs	r3, #1
 800b48e:	6163      	str	r3, [r4, #20]
 800b490:	b003      	add	sp, #12
 800b492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b494:	ab01      	add	r3, sp, #4
 800b496:	466a      	mov	r2, sp
 800b498:	f7ff ffc8 	bl	800b42c <__swhatbuf_r>
 800b49c:	9f00      	ldr	r7, [sp, #0]
 800b49e:	4605      	mov	r5, r0
 800b4a0:	4639      	mov	r1, r7
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	f7fe fdd4 	bl	800a050 <_malloc_r>
 800b4a8:	b948      	cbnz	r0, 800b4be <__smakebuf_r+0x46>
 800b4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4ae:	059a      	lsls	r2, r3, #22
 800b4b0:	d4ee      	bmi.n	800b490 <__smakebuf_r+0x18>
 800b4b2:	f023 0303 	bic.w	r3, r3, #3
 800b4b6:	f043 0302 	orr.w	r3, r3, #2
 800b4ba:	81a3      	strh	r3, [r4, #12]
 800b4bc:	e7e2      	b.n	800b484 <__smakebuf_r+0xc>
 800b4be:	89a3      	ldrh	r3, [r4, #12]
 800b4c0:	6020      	str	r0, [r4, #0]
 800b4c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4c6:	81a3      	strh	r3, [r4, #12]
 800b4c8:	9b01      	ldr	r3, [sp, #4]
 800b4ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b4ce:	b15b      	cbz	r3, 800b4e8 <__smakebuf_r+0x70>
 800b4d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4d4:	4630      	mov	r0, r6
 800b4d6:	f000 f81d 	bl	800b514 <_isatty_r>
 800b4da:	b128      	cbz	r0, 800b4e8 <__smakebuf_r+0x70>
 800b4dc:	89a3      	ldrh	r3, [r4, #12]
 800b4de:	f023 0303 	bic.w	r3, r3, #3
 800b4e2:	f043 0301 	orr.w	r3, r3, #1
 800b4e6:	81a3      	strh	r3, [r4, #12]
 800b4e8:	89a3      	ldrh	r3, [r4, #12]
 800b4ea:	431d      	orrs	r5, r3
 800b4ec:	81a5      	strh	r5, [r4, #12]
 800b4ee:	e7cf      	b.n	800b490 <__smakebuf_r+0x18>

0800b4f0 <_fstat_r>:
 800b4f0:	b538      	push	{r3, r4, r5, lr}
 800b4f2:	4d07      	ldr	r5, [pc, #28]	@ (800b510 <_fstat_r+0x20>)
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	4604      	mov	r4, r0
 800b4f8:	4608      	mov	r0, r1
 800b4fa:	4611      	mov	r1, r2
 800b4fc:	602b      	str	r3, [r5, #0]
 800b4fe:	f7f6 fa19 	bl	8001934 <_fstat>
 800b502:	1c43      	adds	r3, r0, #1
 800b504:	d102      	bne.n	800b50c <_fstat_r+0x1c>
 800b506:	682b      	ldr	r3, [r5, #0]
 800b508:	b103      	cbz	r3, 800b50c <_fstat_r+0x1c>
 800b50a:	6023      	str	r3, [r4, #0]
 800b50c:	bd38      	pop	{r3, r4, r5, pc}
 800b50e:	bf00      	nop
 800b510:	2000080c 	.word	0x2000080c

0800b514 <_isatty_r>:
 800b514:	b538      	push	{r3, r4, r5, lr}
 800b516:	4d06      	ldr	r5, [pc, #24]	@ (800b530 <_isatty_r+0x1c>)
 800b518:	2300      	movs	r3, #0
 800b51a:	4604      	mov	r4, r0
 800b51c:	4608      	mov	r0, r1
 800b51e:	602b      	str	r3, [r5, #0]
 800b520:	f7f6 fa18 	bl	8001954 <_isatty>
 800b524:	1c43      	adds	r3, r0, #1
 800b526:	d102      	bne.n	800b52e <_isatty_r+0x1a>
 800b528:	682b      	ldr	r3, [r5, #0]
 800b52a:	b103      	cbz	r3, 800b52e <_isatty_r+0x1a>
 800b52c:	6023      	str	r3, [r4, #0]
 800b52e:	bd38      	pop	{r3, r4, r5, pc}
 800b530:	2000080c 	.word	0x2000080c

0800b534 <_init>:
 800b534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b536:	bf00      	nop
 800b538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b53a:	bc08      	pop	{r3}
 800b53c:	469e      	mov	lr, r3
 800b53e:	4770      	bx	lr

0800b540 <_fini>:
 800b540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b542:	bf00      	nop
 800b544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b546:	bc08      	pop	{r3}
 800b548:	469e      	mov	lr, r3
 800b54a:	4770      	bx	lr
