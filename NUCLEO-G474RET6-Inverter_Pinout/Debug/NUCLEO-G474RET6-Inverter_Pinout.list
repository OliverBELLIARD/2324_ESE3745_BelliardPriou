
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8e4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800eac8  0800eac8  0000fac8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f02c  0800f02c  000113a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f02c  0800f02c  0001002c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f034  0800f034  000113a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f034  0800f034  00010034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f038  0800f038  00010038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a8  20000000  0800f03c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  200003a8  0800f3e4  000113a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000974  0800f3e4  00011974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000113a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf0e  00000000  00000000  000113d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038a7  00000000  00000000  0002d2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  00030b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001178  00000000  00000000  00032230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a588  00000000  00000000  000333a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001afb2  00000000  00000000  0005d930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001147a6  00000000  00000000  000788e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018d088  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007594  00000000  00000000  0018d0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  00194660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200003a8 	.word	0x200003a8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800eaac 	.word	0x0800eaac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200003ac 	.word	0x200003ac
 800021c:	0800eaac 	.word	0x0800eaac

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d0c:	f000 b9a0 	b.w	8001050 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d14e      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da0:	4694      	mov	ip, r2
 8000da2:	458c      	cmp	ip, r1
 8000da4:	4686      	mov	lr, r0
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	d962      	bls.n	8000e72 <__udivmoddi4+0xde>
 8000dac:	b14a      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	4091      	lsls	r1, r2
 8000db4:	fa20 f303 	lsr.w	r3, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f f68c 	uxth.w	r6, ip
 8000dca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb04 f106 	mul.w	r1, r4, r6
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dea:	f080 8112 	bcs.w	8001012 <__udivmoddi4+0x27e>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 810f 	bls.w	8001012 <__udivmoddi4+0x27e>
 8000df4:	3c02      	subs	r4, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a59      	subs	r1, r3, r1
 8000dfa:	fa1f f38e 	uxth.w	r3, lr
 8000dfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e02:	fb07 1110 	mls	r1, r7, r0, r1
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f606 	mul.w	r6, r0, r6
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x94>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000e1a:	f080 80fc 	bcs.w	8001016 <__udivmoddi4+0x282>
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	f240 80f9 	bls.w	8001016 <__udivmoddi4+0x282>
 8000e24:	4463      	add	r3, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11d      	cbz	r5, 8000e3a <__udivmoddi4+0xa6>
 8000e32:	40d3      	lsrs	r3, r2
 8000e34:	2200      	movs	r2, #0
 8000e36:	e9c5 3200 	strd	r3, r2, [r5]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d905      	bls.n	8000e4e <__udivmoddi4+0xba>
 8000e42:	b10d      	cbz	r5, 8000e48 <__udivmoddi4+0xb4>
 8000e44:	e9c5 0100 	strd	r0, r1, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e7f5      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e4e:	fab3 f183 	clz	r1, r3
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d146      	bne.n	8000ee4 <__udivmoddi4+0x150>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d302      	bcc.n	8000e60 <__udivmoddi4+0xcc>
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	f0c0 80f0 	bcc.w	8001040 <__udivmoddi4+0x2ac>
 8000e60:	1a86      	subs	r6, r0, r2
 8000e62:	eb64 0303 	sbc.w	r3, r4, r3
 8000e66:	2001      	movs	r0, #1
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d0e6      	beq.n	8000e3a <__udivmoddi4+0xa6>
 8000e6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e70:	e7e3      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	f040 8090 	bne.w	8000f98 <__udivmoddi4+0x204>
 8000e78:	eba1 040c 	sub.w	r4, r1, ip
 8000e7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e80:	fa1f f78c 	uxth.w	r7, ip
 8000e84:	2101      	movs	r1, #1
 8000e86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e96:	fb07 f006 	mul.w	r0, r7, r6
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x11c>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x11a>
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	f200 80cd 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000eae:	4626      	mov	r6, r4
 8000eb0:	1a1c      	subs	r4, r3, r0
 8000eb2:	fa1f f38e 	uxth.w	r3, lr
 8000eb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eba:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec2:	fb00 f707 	mul.w	r7, r0, r7
 8000ec6:	429f      	cmp	r7, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x148>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x146>
 8000ed4:	429f      	cmp	r7, r3
 8000ed6:	f200 80b0 	bhi.w	800103a <__udivmoddi4+0x2a6>
 8000eda:	4620      	mov	r0, r4
 8000edc:	1bdb      	subs	r3, r3, r7
 8000ede:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ee2:	e7a5      	b.n	8000e30 <__udivmoddi4+0x9c>
 8000ee4:	f1c1 0620 	rsb	r6, r1, #32
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	fa22 f706 	lsr.w	r7, r2, r6
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ef4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ef8:	ea43 030c 	orr.w	r3, r3, ip
 8000efc:	40f4      	lsrs	r4, r6
 8000efe:	fa00 f801 	lsl.w	r8, r0, r1
 8000f02:	0c38      	lsrs	r0, r7, #16
 8000f04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f08:	fbb4 fef0 	udiv	lr, r4, r0
 8000f0c:	fa1f fc87 	uxth.w	ip, r7
 8000f10:	fb00 441e 	mls	r4, r0, lr, r4
 8000f14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f18:	fb0e f90c 	mul.w	r9, lr, ip
 8000f1c:	45a1      	cmp	r9, r4
 8000f1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f22:	d90a      	bls.n	8000f3a <__udivmoddi4+0x1a6>
 8000f24:	193c      	adds	r4, r7, r4
 8000f26:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f2a:	f080 8084 	bcs.w	8001036 <__udivmoddi4+0x2a2>
 8000f2e:	45a1      	cmp	r9, r4
 8000f30:	f240 8081 	bls.w	8001036 <__udivmoddi4+0x2a2>
 8000f34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	eba4 0409 	sub.w	r4, r4, r9
 8000f3e:	fa1f f983 	uxth.w	r9, r3
 8000f42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f46:	fb00 4413 	mls	r4, r0, r3, r4
 8000f4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f52:	45a4      	cmp	ip, r4
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x1d2>
 8000f56:	193c      	adds	r4, r7, r4
 8000f58:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f5c:	d267      	bcs.n	800102e <__udivmoddi4+0x29a>
 8000f5e:	45a4      	cmp	ip, r4
 8000f60:	d965      	bls.n	800102e <__udivmoddi4+0x29a>
 8000f62:	3b02      	subs	r3, #2
 8000f64:	443c      	add	r4, r7
 8000f66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f6e:	eba4 040c 	sub.w	r4, r4, ip
 8000f72:	429c      	cmp	r4, r3
 8000f74:	46ce      	mov	lr, r9
 8000f76:	469c      	mov	ip, r3
 8000f78:	d351      	bcc.n	800101e <__udivmoddi4+0x28a>
 8000f7a:	d04e      	beq.n	800101a <__udivmoddi4+0x286>
 8000f7c:	b155      	cbz	r5, 8000f94 <__udivmoddi4+0x200>
 8000f7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f82:	eb64 040c 	sbc.w	r4, r4, ip
 8000f86:	fa04 f606 	lsl.w	r6, r4, r6
 8000f8a:	40cb      	lsrs	r3, r1
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	e9c5 6400 	strd	r6, r4, [r5]
 8000f94:	2100      	movs	r1, #0
 8000f96:	e750      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000f98:	f1c2 0320 	rsb	r3, r2, #32
 8000f9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000fa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fa8:	4094      	lsls	r4, r2
 8000faa:	430c      	orrs	r4, r1
 8000fac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fb4:	fa1f f78c 	uxth.w	r7, ip
 8000fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fc0:	0c23      	lsrs	r3, r4, #16
 8000fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc6:	fb00 f107 	mul.w	r1, r0, r7
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	d908      	bls.n	8000fe0 <__udivmoddi4+0x24c>
 8000fce:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fd6:	d22c      	bcs.n	8001032 <__udivmoddi4+0x29e>
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d92a      	bls.n	8001032 <__udivmoddi4+0x29e>
 8000fdc:	3802      	subs	r0, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	b2a4      	uxth	r4, r4
 8000fe4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fe8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ff0:	fb01 f307 	mul.w	r3, r1, r7
 8000ff4:	42a3      	cmp	r3, r4
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x276>
 8000ff8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ffc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001000:	d213      	bcs.n	800102a <__udivmoddi4+0x296>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d911      	bls.n	800102a <__udivmoddi4+0x296>
 8001006:	3902      	subs	r1, #2
 8001008:	4464      	add	r4, ip
 800100a:	1ae4      	subs	r4, r4, r3
 800100c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001010:	e739      	b.n	8000e86 <__udivmoddi4+0xf2>
 8001012:	4604      	mov	r4, r0
 8001014:	e6f0      	b.n	8000df8 <__udivmoddi4+0x64>
 8001016:	4608      	mov	r0, r1
 8001018:	e706      	b.n	8000e28 <__udivmoddi4+0x94>
 800101a:	45c8      	cmp	r8, r9
 800101c:	d2ae      	bcs.n	8000f7c <__udivmoddi4+0x1e8>
 800101e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001022:	eb63 0c07 	sbc.w	ip, r3, r7
 8001026:	3801      	subs	r0, #1
 8001028:	e7a8      	b.n	8000f7c <__udivmoddi4+0x1e8>
 800102a:	4631      	mov	r1, r6
 800102c:	e7ed      	b.n	800100a <__udivmoddi4+0x276>
 800102e:	4603      	mov	r3, r0
 8001030:	e799      	b.n	8000f66 <__udivmoddi4+0x1d2>
 8001032:	4630      	mov	r0, r6
 8001034:	e7d4      	b.n	8000fe0 <__udivmoddi4+0x24c>
 8001036:	46d6      	mov	lr, sl
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1a6>
 800103a:	4463      	add	r3, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e74d      	b.n	8000edc <__udivmoddi4+0x148>
 8001040:	4606      	mov	r6, r0
 8001042:	4623      	mov	r3, r4
 8001044:	4608      	mov	r0, r1
 8001046:	e70f      	b.n	8000e68 <__udivmoddi4+0xd4>
 8001048:	3e02      	subs	r6, #2
 800104a:	4463      	add	r3, ip
 800104c:	e730      	b.n	8000eb0 <__udivmoddi4+0x11c>
 800104e:	bf00      	nop

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	@ 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800105a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2220      	movs	r2, #32
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f00a ff6e 	bl	800bf4e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001072:	4b33      	ldr	r3, [pc, #204]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001074:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001078:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800107a:	4b31      	ldr	r3, [pc, #196]	@ (8001140 <MX_ADC1_Init+0xec>)
 800107c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001080:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001082:	4b2f      	ldr	r3, [pc, #188]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001088:	4b2d      	ldr	r3, [pc, #180]	@ (8001140 <MX_ADC1_Init+0xec>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800108e:	4b2c      	ldr	r3, [pc, #176]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001094:	4b2a      	ldr	r3, [pc, #168]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109a:	4b29      	ldr	r3, [pc, #164]	@ (8001140 <MX_ADC1_Init+0xec>)
 800109c:	2204      	movs	r2, #4
 800109e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010a0:	4b27      	ldr	r3, [pc, #156]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010a6:	4b26      	ldr	r3, [pc, #152]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010ac:	4b24      	ldr	r3, [pc, #144]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b2:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80010ba:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010bc:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 80010c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010d8:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e0:	4817      	ldr	r0, [pc, #92]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010e2:	f001 fe77 	bl	8002dd4 <HAL_ADC_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80010ec:	f000 fc8e 	bl	8001a0c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f8:	4619      	mov	r1, r3
 80010fa:	4811      	ldr	r0, [pc, #68]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010fc:	f003 f9fa 	bl	80044f4 <HAL_ADCEx_MultiModeConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001106:	f000 fc81 	bl	8001a0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <MX_ADC1_Init+0xf0>)
 800110c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110e:	2306      	movs	r3, #6
 8001110:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001116:	237f      	movs	r3, #127	@ 0x7f
 8001118:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800111a:	2304      	movs	r3, #4
 800111c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001128:	f002 fb68 	bl	80037fc <HAL_ADC_ConfigChannel>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001132:	f000 fc6b 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3730      	adds	r7, #48	@ 0x30
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200003c4 	.word	0x200003c4
 8001144:	08600004 	.word	0x08600004

08001148 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800114e:	463b      	mov	r3, r7
 8001150:	2220      	movs	r2, #32
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f00a fefa 	bl	800bf4e <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800115a:	4b2b      	ldr	r3, [pc, #172]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800115c:	4a2b      	ldr	r2, [pc, #172]	@ (800120c <MX_ADC2_Init+0xc4>)
 800115e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001160:	4b29      	ldr	r3, [pc, #164]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001162:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001166:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001168:	4b27      	ldr	r3, [pc, #156]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800116e:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001174:	4b24      	ldr	r3, [pc, #144]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800117a:	4b23      	ldr	r3, [pc, #140]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001180:	4b21      	ldr	r3, [pc, #132]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001182:	2204      	movs	r2, #4
 8001184:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001186:	4b20      	ldr	r3, [pc, #128]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001188:	2200      	movs	r2, #0
 800118a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800118c:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800118e:	2200      	movs	r2, #0
 8001190:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001192:	4b1d      	ldr	r3, [pc, #116]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001194:	2201      	movs	r2, #1
 8001196:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001198:	4b1b      	ldr	r3, [pc, #108]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a0:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a6:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011ac:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011c2:	4811      	ldr	r0, [pc, #68]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011c4:	f001 fe06 	bl	8002dd4 <HAL_ADC_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011ce:	f000 fc1d 	bl	8001a0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <MX_ADC2_Init+0xc8>)
 80011d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d6:	2306      	movs	r3, #6
 80011d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011de:	237f      	movs	r3, #127	@ 0x7f
 80011e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011e2:	2304      	movs	r3, #4
 80011e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011ea:	463b      	mov	r3, r7
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011f0:	f002 fb04 	bl	80037fc <HAL_ADC_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011fa:	f000 fc07 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3720      	adds	r7, #32
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000430 	.word	0x20000430
 800120c:	50000100 	.word	0x50000100
 8001210:	19200040 	.word	0x19200040

08001214 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b0a4      	sub	sp, #144	@ 0x90
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800122c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001230:	2254      	movs	r2, #84	@ 0x54
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f00a fe8a 	bl	800bf4e <memset>
  if(adcHandle->Instance==ADC1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001242:	f040 80a8 	bne.w	8001396 <HAL_ADC_MspInit+0x182>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800124a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800124c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001250:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001252:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001256:	4618      	mov	r0, r3
 8001258:	f004 fe3e 	bl	8005ed8 <HAL_RCCEx_PeriphCLKConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001262:	f000 fbd3 	bl	8001a0c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001266:	4b81      	ldr	r3, [pc, #516]	@ (800146c <HAL_ADC_MspInit+0x258>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	4a7f      	ldr	r2, [pc, #508]	@ (800146c <HAL_ADC_MspInit+0x258>)
 800126e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001270:	4b7e      	ldr	r3, [pc, #504]	@ (800146c <HAL_ADC_MspInit+0x258>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d10b      	bne.n	8001290 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001278:	4b7d      	ldr	r3, [pc, #500]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127c:	4a7c      	ldr	r2, [pc, #496]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 800127e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001282:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001284:	4b7a      	ldr	r3, [pc, #488]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001290:	4b77      	ldr	r3, [pc, #476]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001294:	4a76      	ldr	r2, [pc, #472]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129c:	4b74      	ldr	r3, [pc, #464]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	623b      	str	r3, [r7, #32]
 80012a6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b71      	ldr	r3, [pc, #452]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ac:	4a70      	ldr	r2, [pc, #448]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b4:	4b6e      	ldr	r3, [pc, #440]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c4:	4a6a      	ldr	r2, [pc, #424]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012cc:	4b68      	ldr	r3, [pc, #416]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 80012d8:	2304      	movs	r3, #4
 80012da:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012dc:	2303      	movs	r3, #3
 80012de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012ec:	4619      	mov	r1, r3
 80012ee:	4861      	ldr	r0, [pc, #388]	@ (8001474 <HAL_ADC_MspInit+0x260>)
 80012f0:	f003 fe1a 	bl	8004f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80012f4:	2302      	movs	r3, #2
 80012f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f8:	2303      	movs	r3, #3
 80012fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001308:	4619      	mov	r1, r3
 800130a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130e:	f003 fe0b 	bl	8004f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001312:	2303      	movs	r3, #3
 8001314:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001316:	2303      	movs	r3, #3
 8001318:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001326:	4619      	mov	r1, r3
 8001328:	4853      	ldr	r0, [pc, #332]	@ (8001478 <HAL_ADC_MspInit+0x264>)
 800132a:	f003 fdfd 	bl	8004f28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800132e:	4b53      	ldr	r3, [pc, #332]	@ (800147c <HAL_ADC_MspInit+0x268>)
 8001330:	4a53      	ldr	r2, [pc, #332]	@ (8001480 <HAL_ADC_MspInit+0x26c>)
 8001332:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001334:	4b51      	ldr	r3, [pc, #324]	@ (800147c <HAL_ADC_MspInit+0x268>)
 8001336:	2205      	movs	r2, #5
 8001338:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800133a:	4b50      	ldr	r3, [pc, #320]	@ (800147c <HAL_ADC_MspInit+0x268>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001340:	4b4e      	ldr	r3, [pc, #312]	@ (800147c <HAL_ADC_MspInit+0x268>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001346:	4b4d      	ldr	r3, [pc, #308]	@ (800147c <HAL_ADC_MspInit+0x268>)
 8001348:	2280      	movs	r2, #128	@ 0x80
 800134a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800134c:	4b4b      	ldr	r3, [pc, #300]	@ (800147c <HAL_ADC_MspInit+0x268>)
 800134e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001352:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001354:	4b49      	ldr	r3, [pc, #292]	@ (800147c <HAL_ADC_MspInit+0x268>)
 8001356:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800135a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800135c:	4b47      	ldr	r3, [pc, #284]	@ (800147c <HAL_ADC_MspInit+0x268>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001362:	4b46      	ldr	r3, [pc, #280]	@ (800147c <HAL_ADC_MspInit+0x268>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001368:	4844      	ldr	r0, [pc, #272]	@ (800147c <HAL_ADC_MspInit+0x268>)
 800136a:	f003 faab 	bl	80048c4 <HAL_DMA_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 8001374:	f000 fb4a 	bl	8001a0c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a40      	ldr	r2, [pc, #256]	@ (800147c <HAL_ADC_MspInit+0x268>)
 800137c:	655a      	str	r2, [r3, #84]	@ 0x54
 800137e:	4a3f      	ldr	r2, [pc, #252]	@ (800147c <HAL_ADC_MspInit+0x268>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001384:	2200      	movs	r2, #0
 8001386:	2100      	movs	r1, #0
 8001388:	2012      	movs	r0, #18
 800138a:	f003 fa73 	bl	8004874 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800138e:	2012      	movs	r0, #18
 8001390:	f003 fa8a 	bl	80048a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001394:	e066      	b.n	8001464 <HAL_ADC_MspInit+0x250>
  else if(adcHandle->Instance==ADC2)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a3a      	ldr	r2, [pc, #232]	@ (8001484 <HAL_ADC_MspInit+0x270>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d161      	bne.n	8001464 <HAL_ADC_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013b0:	4618      	mov	r0, r3
 80013b2:	f004 fd91 	bl	8005ed8 <HAL_RCCEx_PeriphCLKConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_ADC_MspInit+0x1ac>
      Error_Handler();
 80013bc:	f000 fb26 	bl	8001a0c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013c0:	4b2a      	ldr	r3, [pc, #168]	@ (800146c <HAL_ADC_MspInit+0x258>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	4a29      	ldr	r2, [pc, #164]	@ (800146c <HAL_ADC_MspInit+0x258>)
 80013c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013ca:	4b28      	ldr	r3, [pc, #160]	@ (800146c <HAL_ADC_MspInit+0x258>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d10b      	bne.n	80013ea <HAL_ADC_MspInit+0x1d6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013d2:	4b27      	ldr	r3, [pc, #156]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d6:	4a26      	ldr	r2, [pc, #152]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80013d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013de:	4b24      	ldr	r3, [pc, #144]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ea:	4b21      	ldr	r3, [pc, #132]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ee:	4a20      	ldr	r2, [pc, #128]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b1b      	ldr	r3, [pc, #108]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001406:	4a1a      	ldr	r2, [pc, #104]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140e:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800141a:	230b      	movs	r3, #11
 800141c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141e:	2303      	movs	r3, #3
 8001420:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800142e:	4619      	mov	r1, r3
 8001430:	4810      	ldr	r0, [pc, #64]	@ (8001474 <HAL_ADC_MspInit+0x260>)
 8001432:	f003 fd79 	bl	8004f28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8001436:	2301      	movs	r3, #1
 8001438:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800143a:	2303      	movs	r3, #3
 800143c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8001446:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800144a:	4619      	mov	r1, r3
 800144c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001450:	f003 fd6a 	bl	8004f28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2100      	movs	r1, #0
 8001458:	2012      	movs	r0, #18
 800145a:	f003 fa0b 	bl	8004874 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800145e:	2012      	movs	r0, #18
 8001460:	f003 fa22 	bl	80048a8 <HAL_NVIC_EnableIRQ>
}
 8001464:	bf00      	nop
 8001466:	3790      	adds	r7, #144	@ 0x90
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200004fc 	.word	0x200004fc
 8001470:	40021000 	.word	0x40021000
 8001474:	48000800 	.word	0x48000800
 8001478:	48000400 	.word	0x48000400
 800147c:	2000049c 	.word	0x2000049c
 8001480:	40020008 	.word	0x40020008
 8001484:	50000100 	.word	0x50000100

08001488 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <MX_DMA_Init+0x50>)
 8001490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001492:	4a11      	ldr	r2, [pc, #68]	@ (80014d8 <MX_DMA_Init+0x50>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6493      	str	r3, [r2, #72]	@ 0x48
 800149a:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <MX_DMA_Init+0x50>)
 800149c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014a6:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <MX_DMA_Init+0x50>)
 80014a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014aa:	4a0b      	ldr	r2, [pc, #44]	@ (80014d8 <MX_DMA_Init+0x50>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80014b2:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <MX_DMA_Init+0x50>)
 80014b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	200b      	movs	r0, #11
 80014c4:	f003 f9d6 	bl	8004874 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014c8:	200b      	movs	r0, #11
 80014ca:	f003 f9ed 	bl	80048a8 <HAL_NVIC_EnableIRQ>

}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000

080014dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f2:	4b3f      	ldr	r3, [pc, #252]	@ (80015f0 <MX_GPIO_Init+0x114>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	4a3e      	ldr	r2, [pc, #248]	@ (80015f0 <MX_GPIO_Init+0x114>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fe:	4b3c      	ldr	r3, [pc, #240]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800150a:	4b39      	ldr	r3, [pc, #228]	@ (80015f0 <MX_GPIO_Init+0x114>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150e:	4a38      	ldr	r2, [pc, #224]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001510:	f043 0320 	orr.w	r3, r3, #32
 8001514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001516:	4b36      	ldr	r3, [pc, #216]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	f003 0320 	and.w	r3, r3, #32
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	4b33      	ldr	r3, [pc, #204]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	4a32      	ldr	r2, [pc, #200]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800152e:	4b30      	ldr	r3, [pc, #192]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	4b2d      	ldr	r3, [pc, #180]	@ (80015f0 <MX_GPIO_Init+0x114>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	4a2c      	ldr	r2, [pc, #176]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001546:	4b2a      	ldr	r3, [pc, #168]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001552:	4b27      	ldr	r3, [pc, #156]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	4a26      	ldr	r2, [pc, #152]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001558:	f043 0308 	orr.w	r3, r3, #8
 800155c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800155e:	4b24      	ldr	r3, [pc, #144]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	2120      	movs	r1, #32
 800156e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001572:	f003 fe5b 	bl	800522c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2104      	movs	r1, #4
 800157a:	481e      	ldr	r0, [pc, #120]	@ (80015f4 <MX_GPIO_Init+0x118>)
 800157c:	f003 fe56 	bl	800522c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8001580:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001586:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800158a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	4818      	ldr	r0, [pc, #96]	@ (80015f8 <MX_GPIO_Init+0x11c>)
 8001598:	f003 fcc6 	bl	8004f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 800159c:	2320      	movs	r3, #32
 800159e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b6:	f003 fcb7 	bl	8004f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 80015ba:	2304      	movs	r3, #4
 80015bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015be:	2301      	movs	r3, #1
 80015c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	4808      	ldr	r0, [pc, #32]	@ (80015f4 <MX_GPIO_Init+0x118>)
 80015d2:	f003 fca9 	bl	8004f28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	2028      	movs	r0, #40	@ 0x28
 80015dc:	f003 f94a 	bl	8004874 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015e0:	2028      	movs	r0, #40	@ 0x28
 80015e2:	f003 f961 	bl	80048a8 <HAL_NVIC_EnableIRQ>

}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	@ 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
 80015f4:	48000c00 	.word	0x48000c00
 80015f8:	48000800 	.word	0x48000800

080015fc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001600:	f3bf 8f4f 	dsb	sy
}
 8001604:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <__NVIC_SystemReset+0x24>)
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800160e:	4904      	ldr	r1, [pc, #16]	@ (8001620 <__NVIC_SystemReset+0x24>)
 8001610:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <__NVIC_SystemReset+0x28>)
 8001612:	4313      	orrs	r3, r2
 8001614:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001616:	f3bf 8f4f 	dsb	sy
}
 800161a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <__NVIC_SystemReset+0x20>
 8001620:	e000ed00 	.word	0xe000ed00
 8001624:	05fa0004 	.word	0x05fa0004

08001628 <__io_putchar>:
 * @brief Sends a character via UART (overwrites the default character transmission).
 * @param ch Character to send
 * @return The sent character
 */
int __io_putchar(int ch)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001630:	1d39      	adds	r1, r7, #4
 8001632:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001636:	2201      	movs	r2, #1
 8001638:	4803      	ldr	r0, [pc, #12]	@ (8001648 <__io_putchar+0x20>)
 800163a:	f006 fe1c 	bl	8008276 <HAL_UART_Transmit>
	return ch;
 800163e:	687b      	ldr	r3, [r7, #4]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000648 	.word	0x20000648

0800164c <set_PWM>:
 * @brief Adjusts PWM pulse for TIM1 channels.
 * @param pulse Desired PWM pulse width
 * @attention The global variables current_speed_PWM and requested_speed_PWM must be initialized.
 */
void set_PWM()
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
	if (requested_speed_PWM < current_speed_PWM)
 8001650:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <set_PWM+0x78>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b1c      	ldr	r3, [pc, #112]	@ (80016c8 <set_PWM+0x7c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	da14      	bge.n	8001686 <set_PWM+0x3a>
	{
		current_speed_PWM -= 1;
 800165c:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <set_PWM+0x7c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	3b01      	subs	r3, #1
 8001662:	4a19      	ldr	r2, [pc, #100]	@ (80016c8 <set_PWM+0x7c>)
 8001664:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,
 8001666:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <set_PWM+0x7c>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4b18      	ldr	r3, [pc, #96]	@ (80016cc <set_PWM+0x80>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	635a      	str	r2, [r3, #52]	@ 0x34
				current_speed_PWM);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,
 8001670:	4b16      	ldr	r3, [pc, #88]	@ (80016cc <set_PWM+0x80>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001676:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <set_PWM+0x7c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4619      	mov	r1, r3
 800167c:	4b13      	ldr	r3, [pc, #76]	@ (80016cc <set_PWM+0x80>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	1a52      	subs	r2, r2, r1
 8001682:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,
				current_speed_PWM);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,
				__HAL_TIM_GET_AUTORELOAD(&htim1) - current_speed_PWM);
	}
}
 8001684:	e019      	b.n	80016ba <set_PWM+0x6e>
	else if (requested_speed_PWM > current_speed_PWM)
 8001686:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <set_PWM+0x78>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <set_PWM+0x7c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	dd13      	ble.n	80016ba <set_PWM+0x6e>
		current_speed_PWM += 1;
 8001692:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <set_PWM+0x7c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	4a0b      	ldr	r2, [pc, #44]	@ (80016c8 <set_PWM+0x7c>)
 800169a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,
 800169c:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <set_PWM+0x7c>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <set_PWM+0x80>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,
 80016a6:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <set_PWM+0x80>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <set_PWM+0x7c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <set_PWM+0x80>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	1a52      	subs	r2, r2, r1
 80016b8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	20000504 	.word	0x20000504
 80016c8:	20000500 	.word	0x20000500
 80016cc:	20000564 	.word	0x20000564

080016d0 <set_PWM_ratio>:
/**
 * @brief Sets the PWM duty cycle ratio for TIM1 channels.
 * @param ratio Duty cycle ratio (0.0 to 1.0) with 12-bit resolution
 */
void set_PWM_ratio(double ratio)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	ed87 0b00 	vstr	d0, [r7]
	if (ratio < 1 && ratio > 0)
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <set_PWM_ratio+0x68>)
 80016e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016e4:	f7ff fa32 	bl	8000b4c <__aeabi_dcmplt>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d100      	bne.n	80016f0 <set_PWM_ratio+0x20>
	{
		// Set main PWM pulse width for Channel 1 and Channel 2
		requested_speed_PWM = (int)(ratio * PWM_MAX_VAL);
	}
}
 80016ee:	e01b      	b.n	8001728 <set_PWM_ratio+0x58>
	if (ratio < 1 && ratio > 0)
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016fc:	f7ff fa44 	bl	8000b88 <__aeabi_dcmpgt>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d100      	bne.n	8001708 <set_PWM_ratio+0x38>
}
 8001706:	e00f      	b.n	8001728 <set_PWM_ratio+0x58>
		requested_speed_PWM = (int)(ratio * PWM_MAX_VAL);
 8001708:	a309      	add	r3, pc, #36	@ (adr r3, 8001730 <set_PWM_ratio+0x60>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001712:	f7fe ffa9 	bl	8000668 <__aeabi_dmul>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f7ff fa53 	bl	8000bc8 <__aeabi_d2iz>
 8001722:	4603      	mov	r3, r0
 8001724:	4a05      	ldr	r2, [pc, #20]	@ (800173c <set_PWM_ratio+0x6c>)
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	00000000 	.word	0x00000000
 8001734:	40b09a00 	.word	0x40b09a00
 8001738:	3ff00000 	.word	0x3ff00000
 800173c:	20000504 	.word	0x20000504

08001740 <set_PWM_speed>:
/**
 * @brief Sets a specific PWM pulse width for TIM1 channels.
 * @param speed Desired PWM pulse width (0 to PWM_MAX_VAL)
 */
void set_PWM_speed(int speed)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	if (speed < PWM_MAX_VAL && speed > 0)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f241 0299 	movw	r2, #4249	@ 0x1099
 800174e:	4293      	cmp	r3, r2
 8001750:	dc05      	bgt.n	800175e <set_PWM_speed+0x1e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	dd02      	ble.n	800175e <set_PWM_speed+0x1e>
	{
		// Set main PWM pulse width for Channel 1 and Channel 2
		requested_speed_PWM = speed;
 8001758:	4a04      	ldr	r2, [pc, #16]	@ (800176c <set_PWM_speed+0x2c>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
	}
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000504 	.word	0x20000504

08001770 <start_PWM>:

/**
 * @brief Starts PWM on TIM1 channels. Initial base speed set to 0.5 duty cycle.
 */
void start_PWM()
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	// TIM1 Channel 1 Initialisation
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001774:	2100      	movs	r1, #0
 8001776:	480e      	ldr	r0, [pc, #56]	@ (80017b0 <start_PWM+0x40>)
 8001778:	f004 ff24 	bl	80065c4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800177c:	2100      	movs	r1, #0
 800177e:	480c      	ldr	r0, [pc, #48]	@ (80017b0 <start_PWM+0x40>)
 8001780:	f006 fa56 	bl	8007c30 <HAL_TIMEx_PWMN_Start>

	// TIM1 Channel 2 Initialisation
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001784:	2104      	movs	r1, #4
 8001786:	480a      	ldr	r0, [pc, #40]	@ (80017b0 <start_PWM+0x40>)
 8001788:	f004 ff1c 	bl	80065c4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800178c:	2104      	movs	r1, #4
 800178e:	4808      	ldr	r0, [pc, #32]	@ (80017b0 <start_PWM+0x40>)
 8001790:	f006 fa4e 	bl	8007c30 <HAL_TIMEx_PWMN_Start>

	current_speed_PWM = (int)(PWM_MAX_VAL/2)+1; // We initialize the base speed to 0 (cyclic rate 0.5)
 8001794:	4b07      	ldr	r3, [pc, #28]	@ (80017b4 <start_PWM+0x44>)
 8001796:	f640 024e 	movw	r2, #2126	@ 0x84e
 800179a:	601a      	str	r2, [r3, #0]
	set_PWM_ratio(0.5);
 800179c:	ed9f 0b02 	vldr	d0, [pc, #8]	@ 80017a8 <start_PWM+0x38>
 80017a0:	f7ff ff96 	bl	80016d0 <set_PWM_ratio>
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	00000000 	.word	0x00000000
 80017ac:	3fe00000 	.word	0x3fe00000
 80017b0:	20000564 	.word	0x20000564
 80017b4:	20000500 	.word	0x20000500

080017b8 <stop_PWM>:

/**
 * @brief Stops PWM on TIM1 channels.
 */
void stop_PWM()
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	// We disable Tim1 channel 1
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80017bc:	2100      	movs	r1, #0
 80017be:	4808      	ldr	r0, [pc, #32]	@ (80017e0 <stop_PWM+0x28>)
 80017c0:	f005 f812 	bl	80067e8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80017c4:	2100      	movs	r1, #0
 80017c6:	4806      	ldr	r0, [pc, #24]	@ (80017e0 <stop_PWM+0x28>)
 80017c8:	f006 faf4 	bl	8007db4 <HAL_TIMEx_PWMN_Stop>

	// We disable Tim1 channel 2
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80017cc:	2104      	movs	r1, #4
 80017ce:	4804      	ldr	r0, [pc, #16]	@ (80017e0 <stop_PWM+0x28>)
 80017d0:	f005 f80a 	bl	80067e8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80017d4:	2104      	movs	r1, #4
 80017d6:	4802      	ldr	r0, [pc, #8]	@ (80017e0 <stop_PWM+0x28>)
 80017d8:	f006 faec 	bl	8007db4 <HAL_TIMEx_PWMN_Stop>
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000564 	.word	0x20000564

080017e4 <reset_inverter>:

/**
 * @brief Resets the microcontroller.
 */
void reset_inverter()
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 80017e8:	f7ff ff08 	bl	80015fc <__NVIC_SystemReset>
 80017ec:	0000      	movs	r0, r0
	...

080017f0 <read_current>:

/**
 * @brief Reads the current U_Imes.
 */
void read_current()
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	// Read ADC1 DMA to update pData
	printf("\r\nRAW ADC value: %d\r\n", (int)(pData[0]));
 80017f4:	4b2a      	ldr	r3, [pc, #168]	@ (80018a0 <read_current+0xb0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4619      	mov	r1, r3
 80017fa:	482a      	ldr	r0, [pc, #168]	@ (80018a4 <read_current+0xb4>)
 80017fc:	f00a fb32 	bl	800be64 <iprintf>
	/**
	 * Convertion taking into account the offset due to the unsigned ADC measure:
	 * 	Resolution: 50 mV/A
	 * 	Vout = 3.3/2 + 0.05*Imeasured
	 **/
	Uadc = ADC_VCC * ((int)(pData[0]) - ADC_OFFSET) / ADC_MAX_VAL;
 8001800:	4b27      	ldr	r3, [pc, #156]	@ (80018a0 <read_current+0xb0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f6a3 1375 	subw	r3, r3, #2421	@ 0x975
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fec3 	bl	8000594 <__aeabi_i2d>
 800180e:	a320      	add	r3, pc, #128	@ (adr r3, 8001890 <read_current+0xa0>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7fe ff28 	bl	8000668 <__aeabi_dmul>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	4b20      	ldr	r3, [pc, #128]	@ (80018a8 <read_current+0xb8>)
 8001826:	f7ff f849 	bl	80008bc <__aeabi_ddiv>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	f7ff fa11 	bl	8000c58 <__aeabi_d2f>
 8001836:	4603      	mov	r3, r0
 8001838:	4a1c      	ldr	r2, [pc, #112]	@ (80018ac <read_current+0xbc>)
 800183a:	6013      	str	r3, [r2, #0]
	U_Imes = (Uadc) / ADC_CURRENT_RESOLUTION;
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <read_current+0xbc>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe feb9 	bl	80005b8 <__aeabi_f2d>
 8001846:	a314      	add	r3, pc, #80	@ (adr r3, 8001898 <read_current+0xa8>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	f7ff f836 	bl	80008bc <__aeabi_ddiv>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	f7ff f9fe 	bl	8000c58 <__aeabi_d2f>
 800185c:	4603      	mov	r3, r0
 800185e:	4a14      	ldr	r2, [pc, #80]	@ (80018b0 <read_current+0xc0>)
 8001860:	6013      	str	r3, [r2, #0]

	printf("\r\nMeasured tension: %f V\r\n", Uadc);
 8001862:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <read_current+0xbc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fea6 	bl	80005b8 <__aeabi_f2d>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4810      	ldr	r0, [pc, #64]	@ (80018b4 <read_current+0xc4>)
 8001872:	f00a faf7 	bl	800be64 <iprintf>
	printf("\r\nMeasured current: %f A\r\n", U_Imes);
 8001876:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <read_current+0xc0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fe9c 	bl	80005b8 <__aeabi_f2d>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	480c      	ldr	r0, [pc, #48]	@ (80018b8 <read_current+0xc8>)
 8001886:	f00a faed 	bl	800be64 <iprintf>
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	66666666 	.word	0x66666666
 8001894:	400a6666 	.word	0x400a6666
 8001898:	9999999a 	.word	0x9999999a
 800189c:	3fa99999 	.word	0x3fa99999
 80018a0:	20000508 	.word	0x20000508
 80018a4:	0800eac8 	.word	0x0800eac8
 80018a8:	40b00000 	.word	0x40b00000
 80018ac:	20000510 	.word	0x20000510
 80018b0:	2000050c 	.word	0x2000050c
 80018b4:	0800eae0 	.word	0x0800eae0
 80018b8:	0800eafc 	.word	0x0800eafc

080018bc <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non-blocking mode. Updates the data read from the DMA.
 * @param hadc ADC handle
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018cc:	d104      	bne.n	80018d8 <HAL_ADC_ConvCpltCallback+0x1c>
		HAL_ADC_Start_DMA(hadc, pData, ADC_BUFF_SIZE);
 80018ce:	2201      	movs	r2, #1
 80018d0:	4903      	ldr	r1, [pc, #12]	@ (80018e0 <HAL_ADC_ConvCpltCallback+0x24>)
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f001 fc40 	bl	8003158 <HAL_ADC_Start_DMA>
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000508 	.word	0x20000508

080018e4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80018e8:	f000 ffd3 	bl	8002892 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80018ec:	f000 f82c 	bl	8001948 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80018f0:	f7ff fdf4 	bl	80014dc <MX_GPIO_Init>
	MX_DMA_Init();
 80018f4:	f7ff fdc8 	bl	8001488 <MX_DMA_Init>
	MX_ADC2_Init();
 80018f8:	f7ff fc26 	bl	8001148 <MX_ADC2_Init>
	MX_ADC1_Init();
 80018fc:	f7ff fbaa 	bl	8001054 <MX_ADC1_Init>
	MX_TIM1_Init();
 8001900:	f000 fa74 	bl	8001dec <MX_TIM1_Init>
	MX_TIM3_Init();
 8001904:	f000 fb72 	bl	8001fec <MX_TIM3_Init>
	MX_USART2_UART_Init();
 8001908:	f000 fcd0 	bl	80022ac <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800190c:	f000 fd1a 	bl	8002344 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 8001910:	f000 fb1e 	bl	8001f50 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001914:	4809      	ldr	r0, [pc, #36]	@ (800193c <main+0x58>)
 8001916:	f004 fd85 	bl	8006424 <HAL_TIM_Base_Start_IT>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800191a:	217f      	movs	r1, #127	@ 0x7f
 800191c:	4808      	ldr	r0, [pc, #32]	@ (8001940 <main+0x5c>)
 800191e:	f002 fd55 	bl	80043cc <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, pData, ADC_BUFF_SIZE);
 8001922:	2201      	movs	r2, #1
 8001924:	4907      	ldr	r1, [pc, #28]	@ (8001944 <main+0x60>)
 8001926:	4806      	ldr	r0, [pc, #24]	@ (8001940 <main+0x5c>)
 8001928:	f001 fc16 	bl	8003158 <HAL_ADC_Start_DMA>

	start_PWM();
 800192c:	f7ff ff20 	bl	8001770 <start_PWM>

	Shell_Init();
 8001930:	f000 fdfc 	bl	800252c <Shell_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8001934:	f000 fe3a 	bl	80025ac <Shell_Loop>
 8001938:	e7fc      	b.n	8001934 <main+0x50>
 800193a:	bf00      	nop
 800193c:	200005b0 	.word	0x200005b0
 8001940:	200003c4 	.word	0x200003c4
 8001944:	20000508 	.word	0x20000508

08001948 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b094      	sub	sp, #80	@ 0x50
 800194c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194e:	f107 0318 	add.w	r3, r7, #24
 8001952:	2238      	movs	r2, #56	@ 0x38
 8001954:	2100      	movs	r1, #0
 8001956:	4618      	mov	r0, r3
 8001958:	f00a faf9 	bl	800bf4e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800196a:	2000      	movs	r0, #0
 800196c:	f003 fc9a 	bl	80052a4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001970:	2301      	movs	r3, #1
 8001972:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001974:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001978:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800197a:	2302      	movs	r3, #2
 800197c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800197e:	2303      	movs	r3, #3
 8001980:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001982:	2306      	movs	r3, #6
 8001984:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001986:	2355      	movs	r3, #85	@ 0x55
 8001988:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800198a:	2302      	movs	r3, #2
 800198c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800198e:	2302      	movs	r3, #2
 8001990:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001992:	2302      	movs	r3, #2
 8001994:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001996:	f107 0318 	add.w	r3, r7, #24
 800199a:	4618      	mov	r0, r3
 800199c:	f003 fd36 	bl	800540c <HAL_RCC_OscConfig>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <SystemClock_Config+0x62>
	{
		Error_Handler();
 80019a6:	f000 f831 	bl	8001a0c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019aa:	230f      	movs	r3, #15
 80019ac:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ae:	2303      	movs	r3, #3
 80019b0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	2104      	movs	r1, #4
 80019c2:	4618      	mov	r0, r3
 80019c4:	f004 f83a 	bl	8005a3c <HAL_RCC_ClockConfig>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 80019ce:	f000 f81d 	bl	8001a0c <Error_Handler>
	}
}
 80019d2:	bf00      	nop
 80019d4:	3750      	adds	r7, #80	@ 0x50
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM2) {
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019ec:	d101      	bne.n	80019f2 <HAL_TIM_PeriodElapsedCallback+0x16>
		set_PWM();
 80019ee:	f7ff fe2d 	bl	800164c <set_PWM>
	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a04      	ldr	r2, [pc, #16]	@ (8001a08 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d101      	bne.n	8001a00 <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_IncTick();
 80019fc:	f000 ff62 	bl	80028c4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40001000 	.word	0x40001000

08001a0c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a10:	b672      	cpsid	i
}
 8001a12:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <Error_Handler+0x8>

08001a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <HAL_MspInit+0x44>)
 8001a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a22:	4a0e      	ldr	r2, [pc, #56]	@ (8001a5c <HAL_MspInit+0x44>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <HAL_MspInit+0x44>)
 8001a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a36:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <HAL_MspInit+0x44>)
 8001a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3a:	4a08      	ldr	r2, [pc, #32]	@ (8001a5c <HAL_MspInit+0x44>)
 8001a3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a40:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a42:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <HAL_MspInit+0x44>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a4e:	f003 fccd 	bl	80053ec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000

08001a60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08c      	sub	sp, #48	@ 0x30
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a70:	4b2c      	ldr	r3, [pc, #176]	@ (8001b24 <HAL_InitTick+0xc4>)
 8001a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a74:	4a2b      	ldr	r2, [pc, #172]	@ (8001b24 <HAL_InitTick+0xc4>)
 8001a76:	f043 0310 	orr.w	r3, r3, #16
 8001a7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a7c:	4b29      	ldr	r3, [pc, #164]	@ (8001b24 <HAL_InitTick+0xc4>)
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a88:	f107 020c 	add.w	r2, r7, #12
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	4611      	mov	r1, r2
 8001a92:	4618      	mov	r0, r3
 8001a94:	f004 f9a8 	bl	8005de8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a98:	f004 f97a 	bl	8005d90 <HAL_RCC_GetPCLK1Freq>
 8001a9c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aa0:	4a21      	ldr	r2, [pc, #132]	@ (8001b28 <HAL_InitTick+0xc8>)
 8001aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa6:	0c9b      	lsrs	r3, r3, #18
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001aac:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <HAL_InitTick+0xcc>)
 8001aae:	4a20      	ldr	r2, [pc, #128]	@ (8001b30 <HAL_InitTick+0xd0>)
 8001ab0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b2c <HAL_InitTick+0xcc>)
 8001ab4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ab8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001aba:	4a1c      	ldr	r2, [pc, #112]	@ (8001b2c <HAL_InitTick+0xcc>)
 8001abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <HAL_InitTick+0xcc>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac6:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <HAL_InitTick+0xcc>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001acc:	4817      	ldr	r0, [pc, #92]	@ (8001b2c <HAL_InitTick+0xcc>)
 8001ace:	f004 fc51 	bl	8006374 <HAL_TIM_Base_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001ad8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d11b      	bne.n	8001b18 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001ae0:	4812      	ldr	r0, [pc, #72]	@ (8001b2c <HAL_InitTick+0xcc>)
 8001ae2:	f004 fc9f 	bl	8006424 <HAL_TIM_Base_Start_IT>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001aec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d111      	bne.n	8001b18 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001af4:	2036      	movs	r0, #54	@ 0x36
 8001af6:	f002 fed7 	bl	80048a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b0f      	cmp	r3, #15
 8001afe:	d808      	bhi.n	8001b12 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001b00:	2200      	movs	r2, #0
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	2036      	movs	r0, #54	@ 0x36
 8001b06:	f002 feb5 	bl	8004874 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <HAL_InitTick+0xd4>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	e002      	b.n	8001b18 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3730      	adds	r7, #48	@ 0x30
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40021000 	.word	0x40021000
 8001b28:	431bde83 	.word	0x431bde83
 8001b2c:	20000514 	.word	0x20000514
 8001b30:	40001000 	.word	0x40001000
 8001b34:	200001d8 	.word	0x200001d8

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <NMI_Handler+0x4>

08001b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <MemManage_Handler+0x4>

08001b50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <BusFault_Handler+0x4>

08001b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <UsageFault_Handler+0x4>

08001b60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b9c:	4802      	ldr	r0, [pc, #8]	@ (8001ba8 <DMA1_Channel1_IRQHandler+0x10>)
 8001b9e:	f003 f874 	bl	8004c8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	2000049c 	.word	0x2000049c

08001bac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001bb0:	4803      	ldr	r0, [pc, #12]	@ (8001bc0 <ADC1_2_IRQHandler+0x14>)
 8001bb2:	f001 fba5 	bl	8003300 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001bb6:	4803      	ldr	r0, [pc, #12]	@ (8001bc4 <ADC1_2_IRQHandler+0x18>)
 8001bb8:	f001 fba2 	bl	8003300 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	200003c4 	.word	0x200003c4
 8001bc4:	20000430 	.word	0x20000430

08001bc8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bcc:	4802      	ldr	r0, [pc, #8]	@ (8001bd8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001bce:	f004 fea7 	bl	8006920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000564 	.word	0x20000564

08001bdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001be0:	4802      	ldr	r0, [pc, #8]	@ (8001bec <TIM2_IRQHandler+0x10>)
 8001be2:	f004 fe9d 	bl	8006920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200005b0 	.word	0x200005b0

08001bf0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bf4:	4802      	ldr	r0, [pc, #8]	@ (8001c00 <USART2_IRQHandler+0x10>)
 8001bf6:	f006 fc2b 	bl	8008450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000648 	.word	0x20000648

08001c04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <USART3_IRQHandler+0x10>)
 8001c0a:	f006 fc21 	bl	8008450 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200006d8 	.word	0x200006d8

08001c18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001c1c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c20:	f003 fb1c 	bl	800525c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c2c:	4802      	ldr	r0, [pc, #8]	@ (8001c38 <TIM6_DAC_IRQHandler+0x10>)
 8001c2e:	f004 fe77 	bl	8006920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000514 	.word	0x20000514

08001c3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return 1;
 8001c40:	2301      	movs	r3, #1
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_kill>:

int _kill(int pid, int sig)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c56:	f00a fa3b 	bl	800c0d0 <__errno>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2216      	movs	r2, #22
 8001c5e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_exit>:

void _exit (int status)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ffe7 	bl	8001c4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c7e:	bf00      	nop
 8001c80:	e7fd      	b.n	8001c7e <_exit+0x12>

08001c82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	e00a      	b.n	8001caa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c94:	f3af 8000 	nop.w
 8001c98:	4601      	mov	r1, r0
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	60ba      	str	r2, [r7, #8]
 8001ca0:	b2ca      	uxtb	r2, r1
 8001ca2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	dbf0      	blt.n	8001c94 <_read+0x12>
  }

  return len;
 8001cb2:	687b      	ldr	r3, [r7, #4]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	e009      	b.n	8001ce2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	60ba      	str	r2, [r7, #8]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fca6 	bl	8001628 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	dbf1      	blt.n	8001cce <_write+0x12>
  }
  return len;
 8001cea:	687b      	ldr	r3, [r7, #4]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_close>:

int _close(int file)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cfc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d1c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <_isatty>:

int _isatty(int file)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d34:	2301      	movs	r3, #1
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b085      	sub	sp, #20
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	60f8      	str	r0, [r7, #12]
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d64:	4a14      	ldr	r2, [pc, #80]	@ (8001db8 <_sbrk+0x5c>)
 8001d66:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <_sbrk+0x60>)
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d70:	4b13      	ldr	r3, [pc, #76]	@ (8001dc0 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d78:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <_sbrk+0x64>)
 8001d7a:	4a12      	ldr	r2, [pc, #72]	@ (8001dc4 <_sbrk+0x68>)
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7e:	4b10      	ldr	r3, [pc, #64]	@ (8001dc0 <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d207      	bcs.n	8001d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d8c:	f00a f9a0 	bl	800c0d0 <__errno>
 8001d90:	4603      	mov	r3, r0
 8001d92:	220c      	movs	r2, #12
 8001d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d9a:	e009      	b.n	8001db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d9c:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da2:	4b07      	ldr	r3, [pc, #28]	@ (8001dc0 <_sbrk+0x64>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a05      	ldr	r2, [pc, #20]	@ (8001dc0 <_sbrk+0x64>)
 8001dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20020000 	.word	0x20020000
 8001dbc:	00000400 	.word	0x00000400
 8001dc0:	20000560 	.word	0x20000560
 8001dc4:	20000978 	.word	0x20000978

08001dc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <SystemInit+0x20>)
 8001dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dd2:	4a05      	ldr	r2, [pc, #20]	@ (8001de8 <SystemInit+0x20>)
 8001dd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b098      	sub	sp, #96	@ 0x60
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	605a      	str	r2, [r3, #4]
 8001dfc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dfe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	60da      	str	r2, [r3, #12]
 8001e0c:	611a      	str	r2, [r3, #16]
 8001e0e:	615a      	str	r2, [r3, #20]
 8001e10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	2234      	movs	r2, #52	@ 0x34
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f00a f898 	bl	800bf4e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f48 <MX_TIM1_Init+0x15c>)
 8001e20:	4a4a      	ldr	r2, [pc, #296]	@ (8001f4c <MX_TIM1_Init+0x160>)
 8001e22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e24:	4b48      	ldr	r3, [pc, #288]	@ (8001f48 <MX_TIM1_Init+0x15c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001e2a:	4b47      	ldr	r3, [pc, #284]	@ (8001f48 <MX_TIM1_Init+0x15c>)
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4249;
 8001e30:	4b45      	ldr	r3, [pc, #276]	@ (8001f48 <MX_TIM1_Init+0x15c>)
 8001e32:	f241 0299 	movw	r2, #4249	@ 0x1099
 8001e36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e38:	4b43      	ldr	r3, [pc, #268]	@ (8001f48 <MX_TIM1_Init+0x15c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e3e:	4b42      	ldr	r3, [pc, #264]	@ (8001f48 <MX_TIM1_Init+0x15c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e44:	4b40      	ldr	r3, [pc, #256]	@ (8001f48 <MX_TIM1_Init+0x15c>)
 8001e46:	2280      	movs	r2, #128	@ 0x80
 8001e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e4a:	483f      	ldr	r0, [pc, #252]	@ (8001f48 <MX_TIM1_Init+0x15c>)
 8001e4c:	f004 fb62 	bl	8006514 <HAL_TIM_PWM_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001e56:	f7ff fdd9 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e5a:	2320      	movs	r3, #32
 8001e5c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001e62:	2380      	movs	r3, #128	@ 0x80
 8001e64:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e66:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4836      	ldr	r0, [pc, #216]	@ (8001f48 <MX_TIM1_Init+0x15c>)
 8001e6e:	f005 ffff 	bl	8007e70 <HAL_TIMEx_MasterConfigSynchronization>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e78:	f7ff fdc8 	bl	8001a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e7c:	2360      	movs	r3, #96	@ 0x60
 8001e7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 3000;
 8001e80:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e86:	2300      	movs	r3, #0
 8001e88:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e92:	2300      	movs	r3, #0
 8001e94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e96:	2300      	movs	r3, #0
 8001e98:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e9a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4829      	ldr	r0, [pc, #164]	@ (8001f48 <MX_TIM1_Init+0x15c>)
 8001ea4:	f004 febc 	bl	8006c20 <HAL_TIM_PWM_ConfigChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001eae:	f7ff fdad 	bl	8001a0c <Error_Handler>
  }
  sConfigOC.Pulse = 5000;
 8001eb2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eb8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4821      	ldr	r0, [pc, #132]	@ (8001f48 <MX_TIM1_Init+0x15c>)
 8001ec2:	f004 fead 	bl	8006c20 <HAL_TIM_PWM_ConfigChannel>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8001ecc:	f7ff fd9e 	bl	8001a0c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ed4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ed8:	2208      	movs	r2, #8
 8001eda:	4619      	mov	r1, r3
 8001edc:	481a      	ldr	r0, [pc, #104]	@ (8001f48 <MX_TIM1_Init+0x15c>)
 8001ede:	f004 fe9f 	bl	8006c20 <HAL_TIM_PWM_ConfigChannel>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001ee8:	f7ff fd90 	bl	8001a0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 34;
 8001ef8:	2322      	movs	r3, #34	@ 0x22
 8001efa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f16:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	4619      	mov	r1, r3
 8001f28:	4807      	ldr	r0, [pc, #28]	@ (8001f48 <MX_TIM1_Init+0x15c>)
 8001f2a:	f006 f837 	bl	8007f9c <HAL_TIMEx_ConfigBreakDeadTime>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8001f34:	f7ff fd6a 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f38:	4803      	ldr	r0, [pc, #12]	@ (8001f48 <MX_TIM1_Init+0x15c>)
 8001f3a:	f000 f94f 	bl	80021dc <HAL_TIM_MspPostInit>

}
 8001f3e:	bf00      	nop
 8001f40:	3760      	adds	r7, #96	@ 0x60
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000564 	.word	0x20000564
 8001f4c:	40012c00 	.word	0x40012c00

08001f50 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f56:	f107 0310 	add.w	r3, r7, #16
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]
 8001f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe8 <MX_TIM2_Init+0x98>)
 8001f70:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8001f76:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe8 <MX_TIM2_Init+0x98>)
 8001f78:	22a9      	movs	r2, #169	@ 0xa9
 8001f7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe8 <MX_TIM2_Init+0x98>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3332;
 8001f82:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <MX_TIM2_Init+0x98>)
 8001f84:	f640 5204 	movw	r2, #3332	@ 0xd04
 8001f88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f8a:	4b17      	ldr	r3, [pc, #92]	@ (8001fe8 <MX_TIM2_Init+0x98>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f90:	4b15      	ldr	r3, [pc, #84]	@ (8001fe8 <MX_TIM2_Init+0x98>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f96:	4814      	ldr	r0, [pc, #80]	@ (8001fe8 <MX_TIM2_Init+0x98>)
 8001f98:	f004 f9ec 	bl	8006374 <HAL_TIM_Base_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001fa2:	f7ff fd33 	bl	8001a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001faa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fac:	f107 0310 	add.w	r3, r7, #16
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	480d      	ldr	r0, [pc, #52]	@ (8001fe8 <MX_TIM2_Init+0x98>)
 8001fb4:	f004 ff48 	bl	8006e48 <HAL_TIM_ConfigClockSource>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001fbe:	f7ff fd25 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4806      	ldr	r0, [pc, #24]	@ (8001fe8 <MX_TIM2_Init+0x98>)
 8001fd0:	f005 ff4e 	bl	8007e70 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001fda:	f7ff fd17 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fde:	bf00      	nop
 8001fe0:	3720      	adds	r7, #32
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200005b0 	.word	0x200005b0

08001fec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001ff2:	f107 0310 	add.w	r3, r7, #16
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800200a:	4b1c      	ldr	r3, [pc, #112]	@ (800207c <MX_TIM3_Init+0x90>)
 800200c:	4a1c      	ldr	r2, [pc, #112]	@ (8002080 <MX_TIM3_Init+0x94>)
 800200e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002010:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <MX_TIM3_Init+0x90>)
 8002012:	2200      	movs	r2, #0
 8002014:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002016:	4b19      	ldr	r3, [pc, #100]	@ (800207c <MX_TIM3_Init+0x90>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800201c:	4b17      	ldr	r3, [pc, #92]	@ (800207c <MX_TIM3_Init+0x90>)
 800201e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002022:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002024:	4b15      	ldr	r3, [pc, #84]	@ (800207c <MX_TIM3_Init+0x90>)
 8002026:	2200      	movs	r2, #0
 8002028:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800202a:	4b14      	ldr	r3, [pc, #80]	@ (800207c <MX_TIM3_Init+0x90>)
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002030:	2300      	movs	r3, #0
 8002032:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8002040:	f107 0310 	add.w	r3, r7, #16
 8002044:	4619      	mov	r1, r3
 8002046:	480d      	ldr	r0, [pc, #52]	@ (800207c <MX_TIM3_Init+0x90>)
 8002048:	f005 fd43 	bl	8007ad2 <HAL_TIMEx_HallSensor_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8002052:	f7ff fcdb 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8002056:	2350      	movs	r3, #80	@ 0x50
 8002058:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	4619      	mov	r1, r3
 8002062:	4806      	ldr	r0, [pc, #24]	@ (800207c <MX_TIM3_Init+0x90>)
 8002064:	f005 ff04 	bl	8007e70 <HAL_TIMEx_MasterConfigSynchronization>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800206e:	f7ff fccd 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	3720      	adds	r7, #32
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	200005fc 	.word	0x200005fc
 8002080:	40000400 	.word	0x40000400

08002084 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0d      	ldr	r2, [pc, #52]	@ (80020c8 <HAL_TIM_PWM_MspInit+0x44>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d113      	bne.n	80020be <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002096:	4b0d      	ldr	r3, [pc, #52]	@ (80020cc <HAL_TIM_PWM_MspInit+0x48>)
 8002098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800209a:	4a0c      	ldr	r2, [pc, #48]	@ (80020cc <HAL_TIM_PWM_MspInit+0x48>)
 800209c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80020a2:	4b0a      	ldr	r3, [pc, #40]	@ (80020cc <HAL_TIM_PWM_MspInit+0x48>)
 80020a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	201a      	movs	r0, #26
 80020b4:	f002 fbde 	bl	8004874 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80020b8:	201a      	movs	r0, #26
 80020ba:	f002 fbf5 	bl	80048a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40012c00 	.word	0x40012c00
 80020cc:	40021000 	.word	0x40021000

080020d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020e0:	d113      	bne.n	800210a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002114 <HAL_TIM_Base_MspInit+0x44>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002114 <HAL_TIM_Base_MspInit+0x44>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ee:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <HAL_TIM_Base_MspInit+0x44>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2100      	movs	r1, #0
 80020fe:	201c      	movs	r0, #28
 8002100:	f002 fbb8 	bl	8004874 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002104:	201c      	movs	r0, #28
 8002106:	f002 fbcf 	bl	80048a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000

08002118 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08a      	sub	sp, #40	@ 0x28
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	f107 0314 	add.w	r3, r7, #20
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a26      	ldr	r2, [pc, #152]	@ (80021d0 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d145      	bne.n	80021c6 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800213a:	4b26      	ldr	r3, [pc, #152]	@ (80021d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800213c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213e:	4a25      	ldr	r2, [pc, #148]	@ (80021d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	6593      	str	r3, [r2, #88]	@ 0x58
 8002146:	4b23      	ldr	r3, [pc, #140]	@ (80021d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002152:	4b20      	ldr	r3, [pc, #128]	@ (80021d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002156:	4a1f      	ldr	r2, [pc, #124]	@ (80021d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800215e:	4b1d      	ldr	r3, [pc, #116]	@ (80021d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800216a:	4b1a      	ldr	r3, [pc, #104]	@ (80021d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216e:	4a19      	ldr	r2, [pc, #100]	@ (80021d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002176:	4b17      	ldr	r3, [pc, #92]	@ (80021d4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002182:	2350      	movs	r3, #80	@ 0x50
 8002184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002192:	2302      	movs	r3, #2
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	4619      	mov	r1, r3
 800219c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021a0:	f002 fec2 	bl	8004f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b2:	2300      	movs	r3, #0
 80021b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021b6:	2302      	movs	r3, #2
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4619      	mov	r1, r3
 80021c0:	4805      	ldr	r0, [pc, #20]	@ (80021d8 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80021c2:	f002 feb1 	bl	8004f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80021c6:	bf00      	nop
 80021c8:	3728      	adds	r7, #40	@ 0x28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40000400 	.word	0x40000400
 80021d4:	40021000 	.word	0x40021000
 80021d8:	48000800 	.word	0x48000800

080021dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	@ 0x28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a29      	ldr	r2, [pc, #164]	@ (80022a0 <HAL_TIM_MspPostInit+0xc4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d14b      	bne.n	8002296 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fe:	4b29      	ldr	r3, [pc, #164]	@ (80022a4 <HAL_TIM_MspPostInit+0xc8>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002202:	4a28      	ldr	r2, [pc, #160]	@ (80022a4 <HAL_TIM_MspPostInit+0xc8>)
 8002204:	f043 0302 	orr.w	r3, r3, #2
 8002208:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800220a:	4b26      	ldr	r3, [pc, #152]	@ (80022a4 <HAL_TIM_MspPostInit+0xc8>)
 800220c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002216:	4b23      	ldr	r3, [pc, #140]	@ (80022a4 <HAL_TIM_MspPostInit+0xc8>)
 8002218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221a:	4a22      	ldr	r2, [pc, #136]	@ (80022a4 <HAL_TIM_MspPostInit+0xc8>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002222:	4b20      	ldr	r3, [pc, #128]	@ (80022a4 <HAL_TIM_MspPostInit+0xc8>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800222e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223c:	2300      	movs	r3, #0
 800223e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002240:	2306      	movs	r3, #6
 8002242:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	4619      	mov	r1, r3
 800224a:	4817      	ldr	r0, [pc, #92]	@ (80022a8 <HAL_TIM_MspPostInit+0xcc>)
 800224c:	f002 fe6c 	bl	8004f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8002250:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2300      	movs	r3, #0
 8002260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002262:	2304      	movs	r3, #4
 8002264:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8002266:	f107 0314 	add.w	r3, r7, #20
 800226a:	4619      	mov	r1, r3
 800226c:	480e      	ldr	r0, [pc, #56]	@ (80022a8 <HAL_TIM_MspPostInit+0xcc>)
 800226e:	f002 fe5b 	bl	8004f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8002272:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002278:	2302      	movs	r3, #2
 800227a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002280:	2300      	movs	r3, #0
 8002282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002284:	2306      	movs	r3, #6
 8002286:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	4619      	mov	r1, r3
 800228e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002292:	f002 fe49 	bl	8004f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002296:	bf00      	nop
 8002298:	3728      	adds	r7, #40	@ 0x28
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40012c00 	.word	0x40012c00
 80022a4:	40021000 	.word	0x40021000
 80022a8:	48000400 	.word	0x48000400

080022ac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022b0:	4b22      	ldr	r3, [pc, #136]	@ (800233c <MX_USART2_UART_Init+0x90>)
 80022b2:	4a23      	ldr	r2, [pc, #140]	@ (8002340 <MX_USART2_UART_Init+0x94>)
 80022b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022b6:	4b21      	ldr	r3, [pc, #132]	@ (800233c <MX_USART2_UART_Init+0x90>)
 80022b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022be:	4b1f      	ldr	r3, [pc, #124]	@ (800233c <MX_USART2_UART_Init+0x90>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022c4:	4b1d      	ldr	r3, [pc, #116]	@ (800233c <MX_USART2_UART_Init+0x90>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022ca:	4b1c      	ldr	r3, [pc, #112]	@ (800233c <MX_USART2_UART_Init+0x90>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022d0:	4b1a      	ldr	r3, [pc, #104]	@ (800233c <MX_USART2_UART_Init+0x90>)
 80022d2:	220c      	movs	r2, #12
 80022d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d6:	4b19      	ldr	r3, [pc, #100]	@ (800233c <MX_USART2_UART_Init+0x90>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022dc:	4b17      	ldr	r3, [pc, #92]	@ (800233c <MX_USART2_UART_Init+0x90>)
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022e2:	4b16      	ldr	r3, [pc, #88]	@ (800233c <MX_USART2_UART_Init+0x90>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022e8:	4b14      	ldr	r3, [pc, #80]	@ (800233c <MX_USART2_UART_Init+0x90>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022ee:	4b13      	ldr	r3, [pc, #76]	@ (800233c <MX_USART2_UART_Init+0x90>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022f4:	4811      	ldr	r0, [pc, #68]	@ (800233c <MX_USART2_UART_Init+0x90>)
 80022f6:	f005 ff6e 	bl	80081d6 <HAL_UART_Init>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002300:	f7ff fb84 	bl	8001a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002304:	2100      	movs	r1, #0
 8002306:	480d      	ldr	r0, [pc, #52]	@ (800233c <MX_USART2_UART_Init+0x90>)
 8002308:	f007 ff11 	bl	800a12e <HAL_UARTEx_SetTxFifoThreshold>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002312:	f7ff fb7b 	bl	8001a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002316:	2100      	movs	r1, #0
 8002318:	4808      	ldr	r0, [pc, #32]	@ (800233c <MX_USART2_UART_Init+0x90>)
 800231a:	f007 ff46 	bl	800a1aa <HAL_UARTEx_SetRxFifoThreshold>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002324:	f7ff fb72 	bl	8001a0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002328:	4804      	ldr	r0, [pc, #16]	@ (800233c <MX_USART2_UART_Init+0x90>)
 800232a:	f007 fec7 	bl	800a0bc <HAL_UARTEx_DisableFifoMode>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002334:	f7ff fb6a 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002338:	bf00      	nop
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000648 	.word	0x20000648
 8002340:	40004400 	.word	0x40004400

08002344 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002348:	4b22      	ldr	r3, [pc, #136]	@ (80023d4 <MX_USART3_UART_Init+0x90>)
 800234a:	4a23      	ldr	r2, [pc, #140]	@ (80023d8 <MX_USART3_UART_Init+0x94>)
 800234c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800234e:	4b21      	ldr	r3, [pc, #132]	@ (80023d4 <MX_USART3_UART_Init+0x90>)
 8002350:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002354:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002356:	4b1f      	ldr	r3, [pc, #124]	@ (80023d4 <MX_USART3_UART_Init+0x90>)
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800235c:	4b1d      	ldr	r3, [pc, #116]	@ (80023d4 <MX_USART3_UART_Init+0x90>)
 800235e:	2200      	movs	r2, #0
 8002360:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002362:	4b1c      	ldr	r3, [pc, #112]	@ (80023d4 <MX_USART3_UART_Init+0x90>)
 8002364:	2200      	movs	r2, #0
 8002366:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002368:	4b1a      	ldr	r3, [pc, #104]	@ (80023d4 <MX_USART3_UART_Init+0x90>)
 800236a:	220c      	movs	r2, #12
 800236c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800236e:	4b19      	ldr	r3, [pc, #100]	@ (80023d4 <MX_USART3_UART_Init+0x90>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002374:	4b17      	ldr	r3, [pc, #92]	@ (80023d4 <MX_USART3_UART_Init+0x90>)
 8002376:	2200      	movs	r2, #0
 8002378:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800237a:	4b16      	ldr	r3, [pc, #88]	@ (80023d4 <MX_USART3_UART_Init+0x90>)
 800237c:	2200      	movs	r2, #0
 800237e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002380:	4b14      	ldr	r3, [pc, #80]	@ (80023d4 <MX_USART3_UART_Init+0x90>)
 8002382:	2200      	movs	r2, #0
 8002384:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002386:	4b13      	ldr	r3, [pc, #76]	@ (80023d4 <MX_USART3_UART_Init+0x90>)
 8002388:	2200      	movs	r2, #0
 800238a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800238c:	4811      	ldr	r0, [pc, #68]	@ (80023d4 <MX_USART3_UART_Init+0x90>)
 800238e:	f005 ff22 	bl	80081d6 <HAL_UART_Init>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002398:	f7ff fb38 	bl	8001a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800239c:	2100      	movs	r1, #0
 800239e:	480d      	ldr	r0, [pc, #52]	@ (80023d4 <MX_USART3_UART_Init+0x90>)
 80023a0:	f007 fec5 	bl	800a12e <HAL_UARTEx_SetTxFifoThreshold>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80023aa:	f7ff fb2f 	bl	8001a0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023ae:	2100      	movs	r1, #0
 80023b0:	4808      	ldr	r0, [pc, #32]	@ (80023d4 <MX_USART3_UART_Init+0x90>)
 80023b2:	f007 fefa 	bl	800a1aa <HAL_UARTEx_SetRxFifoThreshold>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80023bc:	f7ff fb26 	bl	8001a0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80023c0:	4804      	ldr	r0, [pc, #16]	@ (80023d4 <MX_USART3_UART_Init+0x90>)
 80023c2:	f007 fe7b 	bl	800a0bc <HAL_UARTEx_DisableFifoMode>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80023cc:	f7ff fb1e 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	200006d8 	.word	0x200006d8
 80023d8:	40004800 	.word	0x40004800

080023dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b0a0      	sub	sp, #128	@ 0x80
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023f4:	f107 0318 	add.w	r3, r7, #24
 80023f8:	2254      	movs	r2, #84	@ 0x54
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f009 fda6 	bl	800bf4e <memset>
  if(uartHandle->Instance==USART2)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a45      	ldr	r2, [pc, #276]	@ (800251c <HAL_UART_MspInit+0x140>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d13f      	bne.n	800248c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800240c:	2302      	movs	r3, #2
 800240e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002410:	2300      	movs	r3, #0
 8002412:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002414:	f107 0318 	add.w	r3, r7, #24
 8002418:	4618      	mov	r0, r3
 800241a:	f003 fd5d 	bl	8005ed8 <HAL_RCCEx_PeriphCLKConfig>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002424:	f7ff faf2 	bl	8001a0c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002428:	4b3d      	ldr	r3, [pc, #244]	@ (8002520 <HAL_UART_MspInit+0x144>)
 800242a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800242c:	4a3c      	ldr	r2, [pc, #240]	@ (8002520 <HAL_UART_MspInit+0x144>)
 800242e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002432:	6593      	str	r3, [r2, #88]	@ 0x58
 8002434:	4b3a      	ldr	r3, [pc, #232]	@ (8002520 <HAL_UART_MspInit+0x144>)
 8002436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002440:	4b37      	ldr	r3, [pc, #220]	@ (8002520 <HAL_UART_MspInit+0x144>)
 8002442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002444:	4a36      	ldr	r2, [pc, #216]	@ (8002520 <HAL_UART_MspInit+0x144>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800244c:	4b34      	ldr	r3, [pc, #208]	@ (8002520 <HAL_UART_MspInit+0x144>)
 800244e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002458:	230c      	movs	r3, #12
 800245a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002464:	2300      	movs	r3, #0
 8002466:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002468:	2307      	movs	r3, #7
 800246a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002470:	4619      	mov	r1, r3
 8002472:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002476:	f002 fd57 	bl	8004f28 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	2100      	movs	r1, #0
 800247e:	2026      	movs	r0, #38	@ 0x26
 8002480:	f002 f9f8 	bl	8004874 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002484:	2026      	movs	r0, #38	@ 0x26
 8002486:	f002 fa0f 	bl	80048a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800248a:	e043      	b.n	8002514 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a24      	ldr	r2, [pc, #144]	@ (8002524 <HAL_UART_MspInit+0x148>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d13e      	bne.n	8002514 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002496:	2304      	movs	r3, #4
 8002498:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800249a:	2300      	movs	r3, #0
 800249c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800249e:	f107 0318 	add.w	r3, r7, #24
 80024a2:	4618      	mov	r0, r3
 80024a4:	f003 fd18 	bl	8005ed8 <HAL_RCCEx_PeriphCLKConfig>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80024ae:	f7ff faad 	bl	8001a0c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002520 <HAL_UART_MspInit+0x144>)
 80024b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002520 <HAL_UART_MspInit+0x144>)
 80024b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80024be:	4b18      	ldr	r3, [pc, #96]	@ (8002520 <HAL_UART_MspInit+0x144>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ca:	4b15      	ldr	r3, [pc, #84]	@ (8002520 <HAL_UART_MspInit+0x144>)
 80024cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ce:	4a14      	ldr	r2, [pc, #80]	@ (8002520 <HAL_UART_MspInit+0x144>)
 80024d0:	f043 0304 	orr.w	r3, r3, #4
 80024d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024d6:	4b12      	ldr	r3, [pc, #72]	@ (8002520 <HAL_UART_MspInit+0x144>)
 80024d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024da:	f003 0304 	and.w	r3, r3, #4
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024e2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80024e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	2300      	movs	r3, #0
 80024f2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024f4:	2307      	movs	r3, #7
 80024f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80024fc:	4619      	mov	r1, r3
 80024fe:	480a      	ldr	r0, [pc, #40]	@ (8002528 <HAL_UART_MspInit+0x14c>)
 8002500:	f002 fd12 	bl	8004f28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002504:	2200      	movs	r2, #0
 8002506:	2100      	movs	r1, #0
 8002508:	2027      	movs	r0, #39	@ 0x27
 800250a:	f002 f9b3 	bl	8004874 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800250e:	2027      	movs	r0, #39	@ 0x27
 8002510:	f002 f9ca 	bl	80048a8 <HAL_NVIC_EnableIRQ>
}
 8002514:	bf00      	nop
 8002516:	3780      	adds	r7, #128	@ 0x80
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40004400 	.word	0x40004400
 8002520:	40021000 	.word	0x40021000
 8002524:	40004800 	.word	0x40004800
 8002528:	48000800 	.word	0x48000800

0800252c <Shell_Init>:
/**
 * @brief Initializes the shell interface.
 *
 * Sets up UART reception, clears buffers, and displays the startup message.
 */
void Shell_Init(void){
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8002530:	2224      	movs	r2, #36	@ 0x24
 8002532:	2100      	movs	r1, #0
 8002534:	4816      	ldr	r0, [pc, #88]	@ (8002590 <Shell_Init+0x64>)
 8002536:	f009 fd0a 	bl	800bf4e <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 800253a:	2240      	movs	r2, #64	@ 0x40
 800253c:	2100      	movs	r1, #0
 800253e:	4815      	ldr	r0, [pc, #84]	@ (8002594 <Shell_Init+0x68>)
 8002540:	f009 fd05 	bl	800bf4e <memset>
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 8002544:	4b14      	ldr	r3, [pc, #80]	@ (8002598 <Shell_Init+0x6c>)
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 800254a:	2240      	movs	r2, #64	@ 0x40
 800254c:	2100      	movs	r1, #0
 800254e:	4813      	ldr	r0, [pc, #76]	@ (800259c <Shell_Init+0x70>)
 8002550:	f009 fcfd 	bl	800bf4e <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002554:	2201      	movs	r2, #1
 8002556:	4910      	ldr	r1, [pc, #64]	@ (8002598 <Shell_Init+0x6c>)
 8002558:	4811      	ldr	r0, [pc, #68]	@ (80025a0 <Shell_Init+0x74>)
 800255a:	f005 ff23 	bl	80083a4 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 800255e:	4811      	ldr	r0, [pc, #68]	@ (80025a4 <Shell_Init+0x78>)
 8002560:	f7fd febe 	bl	80002e0 <strlen>
 8002564:	4603      	mov	r3, r0
 8002566:	b29a      	uxth	r2, r3
 8002568:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800256c:	490d      	ldr	r1, [pc, #52]	@ (80025a4 <Shell_Init+0x78>)
 800256e:	480c      	ldr	r0, [pc, #48]	@ (80025a0 <Shell_Init+0x74>)
 8002570:	f005 fe81 	bl	8008276 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8002574:	480c      	ldr	r0, [pc, #48]	@ (80025a8 <Shell_Init+0x7c>)
 8002576:	f7fd feb3 	bl	80002e0 <strlen>
 800257a:	4603      	mov	r3, r0
 800257c:	b29a      	uxth	r2, r3
 800257e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002582:	4909      	ldr	r1, [pc, #36]	@ (80025a8 <Shell_Init+0x7c>)
 8002584:	4806      	ldr	r0, [pc, #24]	@ (80025a0 <Shell_Init+0x74>)
 8002586:	f005 fe76 	bl	8008276 <HAL_UART_Transmit>
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	200007f4 	.word	0x200007f4
 8002594:	200007b0 	.word	0x200007b0
 8002598:	2000076c 	.word	0x2000076c
 800259c:	20000770 	.word	0x20000770
 80025a0:	20000648 	.word	0x20000648
 80025a4:	20000020 	.word	0x20000020
 80025a8:	20000004 	.word	0x20000004

080025ac <Shell_Loop>:
/**
 * @brief Main loop of the shell.
 *
 * Processes received UART data, parses commands, and executes them.
 */
void Shell_Loop(void){
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 80025b0:	4b80      	ldr	r3, [pc, #512]	@ (80027b4 <Shell_Loop+0x208>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d05b      	beq.n	8002670 <Shell_Loop+0xc4>
		switch(uartRxBuffer[0]){
 80025b8:	4b7f      	ldr	r3, [pc, #508]	@ (80027b8 <Shell_Loop+0x20c>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d034      	beq.n	800262a <Shell_Loop+0x7e>
 80025c0:	2b0d      	cmp	r3, #13
 80025c2:	d142      	bne.n	800264a <Shell_Loop+0x9e>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80025c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025c8:	2203      	movs	r2, #3
 80025ca:	497c      	ldr	r1, [pc, #496]	@ (80027bc <Shell_Loop+0x210>)
 80025cc:	487c      	ldr	r0, [pc, #496]	@ (80027c0 <Shell_Loop+0x214>)
 80025ce:	f005 fe52 	bl	8008276 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 80025d2:	4b7c      	ldr	r3, [pc, #496]	@ (80027c4 <Shell_Loop+0x218>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a7c      	ldr	r2, [pc, #496]	@ (80027c8 <Shell_Loop+0x21c>)
 80025d8:	2100      	movs	r1, #0
 80025da:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 80025dc:	4b7b      	ldr	r3, [pc, #492]	@ (80027cc <Shell_Loop+0x220>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 80025e2:	497b      	ldr	r1, [pc, #492]	@ (80027d0 <Shell_Loop+0x224>)
 80025e4:	4878      	ldr	r0, [pc, #480]	@ (80027c8 <Shell_Loop+0x21c>)
 80025e6:	f009 fccd 	bl	800bf84 <strtok>
 80025ea:	4603      	mov	r3, r0
 80025ec:	4a79      	ldr	r2, [pc, #484]	@ (80027d4 <Shell_Loop+0x228>)
 80025ee:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80025f0:	e010      	b.n	8002614 <Shell_Loop+0x68>
				argv[argc++] = token;
 80025f2:	4b76      	ldr	r3, [pc, #472]	@ (80027cc <Shell_Loop+0x220>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	4974      	ldr	r1, [pc, #464]	@ (80027cc <Shell_Loop+0x220>)
 80025fa:	600a      	str	r2, [r1, #0]
 80025fc:	4a75      	ldr	r2, [pc, #468]	@ (80027d4 <Shell_Loop+0x228>)
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	4975      	ldr	r1, [pc, #468]	@ (80027d8 <Shell_Loop+0x22c>)
 8002602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8002606:	4972      	ldr	r1, [pc, #456]	@ (80027d0 <Shell_Loop+0x224>)
 8002608:	2000      	movs	r0, #0
 800260a:	f009 fcbb 	bl	800bf84 <strtok>
 800260e:	4603      	mov	r3, r0
 8002610:	4a70      	ldr	r2, [pc, #448]	@ (80027d4 <Shell_Loop+0x228>)
 8002612:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8002614:	4b6f      	ldr	r3, [pc, #444]	@ (80027d4 <Shell_Loop+0x228>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1ea      	bne.n	80025f2 <Shell_Loop+0x46>
			}
			idx_cmd = 0;
 800261c:	4b69      	ldr	r3, [pc, #420]	@ (80027c4 <Shell_Loop+0x218>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8002622:	4b6e      	ldr	r3, [pc, #440]	@ (80027dc <Shell_Loop+0x230>)
 8002624:	2201      	movs	r2, #1
 8002626:	601a      	str	r2, [r3, #0]
			break;
 8002628:	e01f      	b.n	800266a <Shell_Loop+0xbe>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 800262a:	4b66      	ldr	r3, [pc, #408]	@ (80027c4 <Shell_Loop+0x218>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	1e5a      	subs	r2, r3, #1
 8002630:	4964      	ldr	r1, [pc, #400]	@ (80027c4 <Shell_Loop+0x218>)
 8002632:	600a      	str	r2, [r1, #0]
 8002634:	4a64      	ldr	r2, [pc, #400]	@ (80027c8 <Shell_Loop+0x21c>)
 8002636:	2100      	movs	r1, #0
 8002638:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 800263a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800263e:	2204      	movs	r2, #4
 8002640:	4967      	ldr	r1, [pc, #412]	@ (80027e0 <Shell_Loop+0x234>)
 8002642:	485f      	ldr	r0, [pc, #380]	@ (80027c0 <Shell_Loop+0x214>)
 8002644:	f005 fe17 	bl	8008276 <HAL_UART_Transmit>
			break;
 8002648:	e00f      	b.n	800266a <Shell_Loop+0xbe>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 800264a:	4b5e      	ldr	r3, [pc, #376]	@ (80027c4 <Shell_Loop+0x218>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	495c      	ldr	r1, [pc, #368]	@ (80027c4 <Shell_Loop+0x218>)
 8002652:	600a      	str	r2, [r1, #0]
 8002654:	4a58      	ldr	r2, [pc, #352]	@ (80027b8 <Shell_Loop+0x20c>)
 8002656:	7811      	ldrb	r1, [r2, #0]
 8002658:	4a5b      	ldr	r2, [pc, #364]	@ (80027c8 <Shell_Loop+0x21c>)
 800265a:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800265c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002660:	2201      	movs	r2, #1
 8002662:	4955      	ldr	r1, [pc, #340]	@ (80027b8 <Shell_Loop+0x20c>)
 8002664:	4856      	ldr	r0, [pc, #344]	@ (80027c0 <Shell_Loop+0x214>)
 8002666:	f005 fe06 	bl	8008276 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 800266a:	4b52      	ldr	r3, [pc, #328]	@ (80027b4 <Shell_Loop+0x208>)
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 8002670:	4b5a      	ldr	r3, [pc, #360]	@ (80027dc <Shell_Loop+0x230>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 809b 	beq.w	80027b0 <Shell_Loop+0x204>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 800267a:	4b57      	ldr	r3, [pc, #348]	@ (80027d8 <Shell_Loop+0x22c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4959      	ldr	r1, [pc, #356]	@ (80027e4 <Shell_Loop+0x238>)
 8002680:	4618      	mov	r0, r3
 8002682:	f7fd fdcd 	bl	8000220 <strcmp>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d107      	bne.n	800269c <Shell_Loop+0xf0>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 800268c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002690:	221a      	movs	r2, #26
 8002692:	4955      	ldr	r1, [pc, #340]	@ (80027e8 <Shell_Loop+0x23c>)
 8002694:	484a      	ldr	r0, [pc, #296]	@ (80027c0 <Shell_Loop+0x214>)
 8002696:	f005 fdee 	bl	8008276 <HAL_UART_Transmit>
 800269a:	e07f      	b.n	800279c <Shell_Loop+0x1f0>
		}
		else if(strcmp(argv[0],"help")==0){
 800269c:	4b4e      	ldr	r3, [pc, #312]	@ (80027d8 <Shell_Loop+0x22c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4952      	ldr	r1, [pc, #328]	@ (80027ec <Shell_Loop+0x240>)
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd fdbc 	bl	8000220 <strcmp>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10b      	bne.n	80026c6 <Shell_Loop+0x11a>
			HAL_UART_Transmit(&huart2, helpMessage, strlen((char *)helpMessage), HAL_MAX_DELAY);
 80026ae:	4850      	ldr	r0, [pc, #320]	@ (80027f0 <Shell_Loop+0x244>)
 80026b0:	f7fd fe16 	bl	80002e0 <strlen>
 80026b4:	4603      	mov	r3, r0
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026bc:	494c      	ldr	r1, [pc, #304]	@ (80027f0 <Shell_Loop+0x244>)
 80026be:	4840      	ldr	r0, [pc, #256]	@ (80027c0 <Shell_Loop+0x214>)
 80026c0:	f005 fdd9 	bl	8008276 <HAL_UART_Transmit>
 80026c4:	e06a      	b.n	800279c <Shell_Loop+0x1f0>
		}
		else if(strcmp(argv[0],"ratio")==0){
 80026c6:	4b44      	ldr	r3, [pc, #272]	@ (80027d8 <Shell_Loop+0x22c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	494a      	ldr	r1, [pc, #296]	@ (80027f4 <Shell_Loop+0x248>)
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fd fda7 	bl	8000220 <strcmp>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d113      	bne.n	8002700 <Shell_Loop+0x154>
			if (argc > 1) {
 80026d8:	4b3c      	ldr	r3, [pc, #240]	@ (80027cc <Shell_Loop+0x220>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	dd5d      	ble.n	800279c <Shell_Loop+0x1f0>
				set_PWM_ratio(atof(argv[1]));
 80026e0:	4b3d      	ldr	r3, [pc, #244]	@ (80027d8 <Shell_Loop+0x22c>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f007 fded 	bl	800a2c4 <atof>
 80026ea:	eeb0 7a40 	vmov.f32	s14, s0
 80026ee:	eef0 7a60 	vmov.f32	s15, s1
 80026f2:	eeb0 0a47 	vmov.f32	s0, s14
 80026f6:	eef0 0a67 	vmov.f32	s1, s15
 80026fa:	f7fe ffe9 	bl	80016d0 <set_PWM_ratio>
 80026fe:	e04d      	b.n	800279c <Shell_Loop+0x1f0>
			}
		}
		else if(strcmp(argv[0],"speed")==0){
 8002700:	4b35      	ldr	r3, [pc, #212]	@ (80027d8 <Shell_Loop+0x22c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	493c      	ldr	r1, [pc, #240]	@ (80027f8 <Shell_Loop+0x24c>)
 8002706:	4618      	mov	r0, r3
 8002708:	f7fd fd8a 	bl	8000220 <strcmp>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10d      	bne.n	800272e <Shell_Loop+0x182>
			if (argc > 1) {
 8002712:	4b2e      	ldr	r3, [pc, #184]	@ (80027cc <Shell_Loop+0x220>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b01      	cmp	r3, #1
 8002718:	dd40      	ble.n	800279c <Shell_Loop+0x1f0>
				set_PWM_speed(atoi(argv[1]));
 800271a:	4b2f      	ldr	r3, [pc, #188]	@ (80027d8 <Shell_Loop+0x22c>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4618      	mov	r0, r3
 8002720:	f007 fdd3 	bl	800a2ca <atoi>
 8002724:	4603      	mov	r3, r0
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff f80a 	bl	8001740 <set_PWM_speed>
 800272c:	e036      	b.n	800279c <Shell_Loop+0x1f0>
			}
		}
		else if(strcmp(argv[0],"start")==0){
 800272e:	4b2a      	ldr	r3, [pc, #168]	@ (80027d8 <Shell_Loop+0x22c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4932      	ldr	r1, [pc, #200]	@ (80027fc <Shell_Loop+0x250>)
 8002734:	4618      	mov	r0, r3
 8002736:	f7fd fd73 	bl	8000220 <strcmp>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d102      	bne.n	8002746 <Shell_Loop+0x19a>
			start_PWM();
 8002740:	f7ff f816 	bl	8001770 <start_PWM>
 8002744:	e02a      	b.n	800279c <Shell_Loop+0x1f0>
		}
		else if(strcmp(argv[0],"stop")==0){
 8002746:	4b24      	ldr	r3, [pc, #144]	@ (80027d8 <Shell_Loop+0x22c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	492d      	ldr	r1, [pc, #180]	@ (8002800 <Shell_Loop+0x254>)
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd fd67 	bl	8000220 <strcmp>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d102      	bne.n	800275e <Shell_Loop+0x1b2>
			stop_PWM();
 8002758:	f7ff f82e 	bl	80017b8 <stop_PWM>
 800275c:	e01e      	b.n	800279c <Shell_Loop+0x1f0>
		}
		else if(strcmp(argv[0],"reset")==0){
 800275e:	4b1e      	ldr	r3, [pc, #120]	@ (80027d8 <Shell_Loop+0x22c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4928      	ldr	r1, [pc, #160]	@ (8002804 <Shell_Loop+0x258>)
 8002764:	4618      	mov	r0, r3
 8002766:	f7fd fd5b 	bl	8000220 <strcmp>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d102      	bne.n	8002776 <Shell_Loop+0x1ca>
			reset_inverter();
 8002770:	f7ff f838 	bl	80017e4 <reset_inverter>
 8002774:	e012      	b.n	800279c <Shell_Loop+0x1f0>
		}
		else if(strcmp(argv[0],"current")==0){
 8002776:	4b18      	ldr	r3, [pc, #96]	@ (80027d8 <Shell_Loop+0x22c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4923      	ldr	r1, [pc, #140]	@ (8002808 <Shell_Loop+0x25c>)
 800277c:	4618      	mov	r0, r3
 800277e:	f7fd fd4f 	bl	8000220 <strcmp>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d102      	bne.n	800278e <Shell_Loop+0x1e2>
			read_current();
 8002788:	f7ff f832 	bl	80017f0 <read_current>
 800278c:	e006      	b.n	800279c <Shell_Loop+0x1f0>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800278e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002792:	2214      	movs	r2, #20
 8002794:	491d      	ldr	r1, [pc, #116]	@ (800280c <Shell_Loop+0x260>)
 8002796:	480a      	ldr	r0, [pc, #40]	@ (80027c0 <Shell_Loop+0x214>)
 8002798:	f005 fd6d 	bl	8008276 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800279c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027a0:	221c      	movs	r2, #28
 80027a2:	491b      	ldr	r1, [pc, #108]	@ (8002810 <Shell_Loop+0x264>)
 80027a4:	4806      	ldr	r0, [pc, #24]	@ (80027c0 <Shell_Loop+0x214>)
 80027a6:	f005 fd66 	bl	8008276 <HAL_UART_Transmit>
		newCmdReady = 0;
 80027aa:	4b0c      	ldr	r3, [pc, #48]	@ (80027dc <Shell_Loop+0x230>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
	}
}
 80027b0:	bf00      	nop
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20000768 	.word	0x20000768
 80027b8:	2000076c 	.word	0x2000076c
 80027bc:	20000088 	.word	0x20000088
 80027c0:	20000648 	.word	0x20000648
 80027c4:	200007f0 	.word	0x200007f0
 80027c8:	200007b0 	.word	0x200007b0
 80027cc:	20000818 	.word	0x20000818
 80027d0:	0800eb18 	.word	0x0800eb18
 80027d4:	2000081c 	.word	0x2000081c
 80027d8:	200007f4 	.word	0x200007f4
 80027dc:	20000820 	.word	0x20000820
 80027e0:	2000008c 	.word	0x2000008c
 80027e4:	0800eb1c 	.word	0x0800eb1c
 80027e8:	200000a4 	.word	0x200000a4
 80027ec:	0800eb2c 	.word	0x0800eb2c
 80027f0:	200000c0 	.word	0x200000c0
 80027f4:	0800eb34 	.word	0x0800eb34
 80027f8:	0800eb3c 	.word	0x0800eb3c
 80027fc:	0800eb44 	.word	0x0800eb44
 8002800:	0800eb4c 	.word	0x0800eb4c
 8002804:	0800eb54 	.word	0x0800eb54
 8002808:	0800eb5c 	.word	0x0800eb5c
 800280c:	20000090 	.word	0x20000090
 8002810:	20000004 	.word	0x20000004

08002814 <HAL_UART_RxCpltCallback>:
 *
 * Handles reception of a single character from UART.
 *
 * @param huart UART handle
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 800281c:	4b05      	ldr	r3, [pc, #20]	@ (8002834 <HAL_UART_RxCpltCallback+0x20>)
 800281e:	2201      	movs	r2, #1
 8002820:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002822:	2201      	movs	r2, #1
 8002824:	4904      	ldr	r1, [pc, #16]	@ (8002838 <HAL_UART_RxCpltCallback+0x24>)
 8002826:	4805      	ldr	r0, [pc, #20]	@ (800283c <HAL_UART_RxCpltCallback+0x28>)
 8002828:	f005 fdbc 	bl	80083a4 <HAL_UART_Receive_IT>
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000768 	.word	0x20000768
 8002838:	2000076c 	.word	0x2000076c
 800283c:	20000648 	.word	0x20000648

08002840 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002840:	480d      	ldr	r0, [pc, #52]	@ (8002878 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002842:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002844:	480d      	ldr	r0, [pc, #52]	@ (800287c <LoopForever+0x6>)
  ldr r1, =_edata
 8002846:	490e      	ldr	r1, [pc, #56]	@ (8002880 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002848:	4a0e      	ldr	r2, [pc, #56]	@ (8002884 <LoopForever+0xe>)
  movs r3, #0
 800284a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800284c:	e002      	b.n	8002854 <LoopCopyDataInit>

0800284e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800284e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002852:	3304      	adds	r3, #4

08002854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002858:	d3f9      	bcc.n	800284e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285a:	4a0b      	ldr	r2, [pc, #44]	@ (8002888 <LoopForever+0x12>)
  ldr r4, =_ebss
 800285c:	4c0b      	ldr	r4, [pc, #44]	@ (800288c <LoopForever+0x16>)
  movs r3, #0
 800285e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002860:	e001      	b.n	8002866 <LoopFillZerobss>

08002862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002864:	3204      	adds	r2, #4

08002866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002868:	d3fb      	bcc.n	8002862 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800286a:	f7ff faad 	bl	8001dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800286e:	f009 fc35 	bl	800c0dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002872:	f7ff f837 	bl	80018e4 <main>

08002876 <LoopForever>:

LoopForever:
    b LoopForever
 8002876:	e7fe      	b.n	8002876 <LoopForever>
  ldr   r0, =_estack
 8002878:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800287c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002880:	200003a8 	.word	0x200003a8
  ldr r2, =_sidata
 8002884:	0800f03c 	.word	0x0800f03c
  ldr r2, =_sbss
 8002888:	200003a8 	.word	0x200003a8
  ldr r4, =_ebss
 800288c:	20000974 	.word	0x20000974

08002890 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002890:	e7fe      	b.n	8002890 <ADC3_IRQHandler>

08002892 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800289c:	2003      	movs	r0, #3
 800289e:	f001 ffde 	bl	800485e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028a2:	200f      	movs	r0, #15
 80028a4:	f7ff f8dc 	bl	8001a60 <HAL_InitTick>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	71fb      	strb	r3, [r7, #7]
 80028b2:	e001      	b.n	80028b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028b4:	f7ff f8b0 	bl	8001a18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028b8:	79fb      	ldrb	r3, [r7, #7]

}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c8:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <HAL_IncTick+0x1c>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <HAL_IncTick+0x20>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4413      	add	r3, r2
 80028d2:	4a03      	ldr	r2, [pc, #12]	@ (80028e0 <HAL_IncTick+0x1c>)
 80028d4:	6013      	str	r3, [r2, #0]
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	20000824 	.word	0x20000824
 80028e4:	200001dc 	.word	0x200001dc

080028e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return uwTick;
 80028ec:	4b03      	ldr	r3, [pc, #12]	@ (80028fc <HAL_GetTick+0x14>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000824 	.word	0x20000824

08002900 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	609a      	str	r2, [r3, #8]
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	609a      	str	r2, [r3, #8]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3360      	adds	r3, #96	@ 0x60
 800297a:	461a      	mov	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <LL_ADC_SetOffset+0x44>)
 800298a:	4013      	ands	r3, r2
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	4313      	orrs	r3, r2
 8002998:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80029a0:	bf00      	nop
 80029a2:	371c      	adds	r7, #28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	03fff000 	.word	0x03fff000

080029b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3360      	adds	r3, #96	@ 0x60
 80029be:	461a      	mov	r2, r3
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3360      	adds	r3, #96	@ 0x60
 80029ec:	461a      	mov	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	431a      	orrs	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a06:	bf00      	nop
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b087      	sub	sp, #28
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	3360      	adds	r3, #96	@ 0x60
 8002a22:	461a      	mov	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002a3c:	bf00      	nop
 8002a3e:	371c      	adds	r7, #28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	3360      	adds	r3, #96	@ 0x60
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002a72:	bf00      	nop
 8002a74:	371c      	adds	r7, #28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	615a      	str	r2, [r3, #20]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr

08002aca <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b087      	sub	sp, #28
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	3330      	adds	r3, #48	@ 0x30
 8002ada:	461a      	mov	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	0a1b      	lsrs	r3, r3, #8
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	4413      	add	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	211f      	movs	r1, #31
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	401a      	ands	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	0e9b      	lsrs	r3, r3, #26
 8002b02:	f003 011f 	and.w	r1, r3, #31
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b10:	431a      	orrs	r2, r3
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b16:	bf00      	nop
 8002b18:	371c      	adds	r7, #28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3314      	adds	r3, #20
 8002b58:	461a      	mov	r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	0e5b      	lsrs	r3, r3, #25
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	4413      	add	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	0d1b      	lsrs	r3, r3, #20
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	2107      	movs	r1, #7
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	401a      	ands	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	0d1b      	lsrs	r3, r3, #20
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b92:	bf00      	nop
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a0f      	ldr	r2, [pc, #60]	@ (8002bec <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d10a      	bne.n	8002bca <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002bc8:	e00a      	b.n	8002be0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	401a      	ands	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8002be0:	bf00      	nop
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	407f0000 	.word	0x407f0000

08002bf0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 031f 	and.w	r3, r3, #31
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002c38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6093      	str	r3, [r2, #8]
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c60:	d101      	bne.n	8002c66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002c84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c88:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cb0:	d101      	bne.n	8002cb6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cd8:	f043 0201 	orr.w	r2, r3, #1
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cfc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d00:	f043 0202 	orr.w	r2, r3, #2
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <LL_ADC_IsEnabled+0x18>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <LL_ADC_IsEnabled+0x1a>
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d101      	bne.n	8002d52 <LL_ADC_IsDisableOngoing+0x18>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <LL_ADC_IsDisableOngoing+0x1a>
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d74:	f043 0204 	orr.w	r2, r3, #4
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d101      	bne.n	8002da0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e000      	b.n	8002da2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d101      	bne.n	8002dc6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dd4:	b590      	push	{r4, r7, lr}
 8002dd6:	b089      	sub	sp, #36	@ 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e1af      	b.n	800314e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d109      	bne.n	8002e10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7fe fa09 	bl	8001214 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ff19 	bl	8002c4c <LL_ADC_IsDeepPowerDownEnabled>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d004      	beq.n	8002e2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff feff 	bl	8002c28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff ff34 	bl	8002c9c <LL_ADC_IsInternalRegulatorEnabled>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d115      	bne.n	8002e66 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff ff18 	bl	8002c74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e44:	4b9f      	ldr	r3, [pc, #636]	@ (80030c4 <HAL_ADC_Init+0x2f0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	099b      	lsrs	r3, r3, #6
 8002e4a:	4a9f      	ldr	r2, [pc, #636]	@ (80030c8 <HAL_ADC_Init+0x2f4>)
 8002e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e50:	099b      	lsrs	r3, r3, #6
 8002e52:	3301      	adds	r3, #1
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e58:	e002      	b.n	8002e60 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f9      	bne.n	8002e5a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff ff16 	bl	8002c9c <LL_ADC_IsInternalRegulatorEnabled>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10d      	bne.n	8002e92 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e7a:	f043 0210 	orr.w	r2, r3, #16
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e86:	f043 0201 	orr.w	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff ff76 	bl	8002d88 <LL_ADC_REG_IsConversionOngoing>
 8002e9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea2:	f003 0310 	and.w	r3, r3, #16
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f040 8148 	bne.w	800313c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f040 8144 	bne.w	800313c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002ebc:	f043 0202 	orr.w	r2, r3, #2
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff ff23 	bl	8002d14 <LL_ADC_IsEnabled>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d141      	bne.n	8002f58 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002edc:	d004      	beq.n	8002ee8 <HAL_ADC_Init+0x114>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a7a      	ldr	r2, [pc, #488]	@ (80030cc <HAL_ADC_Init+0x2f8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d10f      	bne.n	8002f08 <HAL_ADC_Init+0x134>
 8002ee8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002eec:	f7ff ff12 	bl	8002d14 <LL_ADC_IsEnabled>
 8002ef0:	4604      	mov	r4, r0
 8002ef2:	4876      	ldr	r0, [pc, #472]	@ (80030cc <HAL_ADC_Init+0x2f8>)
 8002ef4:	f7ff ff0e 	bl	8002d14 <LL_ADC_IsEnabled>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	4323      	orrs	r3, r4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf0c      	ite	eq
 8002f00:	2301      	moveq	r3, #1
 8002f02:	2300      	movne	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	e012      	b.n	8002f2e <HAL_ADC_Init+0x15a>
 8002f08:	4871      	ldr	r0, [pc, #452]	@ (80030d0 <HAL_ADC_Init+0x2fc>)
 8002f0a:	f7ff ff03 	bl	8002d14 <LL_ADC_IsEnabled>
 8002f0e:	4604      	mov	r4, r0
 8002f10:	4870      	ldr	r0, [pc, #448]	@ (80030d4 <HAL_ADC_Init+0x300>)
 8002f12:	f7ff feff 	bl	8002d14 <LL_ADC_IsEnabled>
 8002f16:	4603      	mov	r3, r0
 8002f18:	431c      	orrs	r4, r3
 8002f1a:	486f      	ldr	r0, [pc, #444]	@ (80030d8 <HAL_ADC_Init+0x304>)
 8002f1c:	f7ff fefa 	bl	8002d14 <LL_ADC_IsEnabled>
 8002f20:	4603      	mov	r3, r0
 8002f22:	4323      	orrs	r3, r4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	bf0c      	ite	eq
 8002f28:	2301      	moveq	r3, #1
 8002f2a:	2300      	movne	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d012      	beq.n	8002f58 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f3a:	d004      	beq.n	8002f46 <HAL_ADC_Init+0x172>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a62      	ldr	r2, [pc, #392]	@ (80030cc <HAL_ADC_Init+0x2f8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_Init+0x176>
 8002f46:	4a65      	ldr	r2, [pc, #404]	@ (80030dc <HAL_ADC_Init+0x308>)
 8002f48:	e000      	b.n	8002f4c <HAL_ADC_Init+0x178>
 8002f4a:	4a65      	ldr	r2, [pc, #404]	@ (80030e0 <HAL_ADC_Init+0x30c>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4619      	mov	r1, r3
 8002f52:	4610      	mov	r0, r2
 8002f54:	f7ff fcd4 	bl	8002900 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	7f5b      	ldrb	r3, [r3, #29]
 8002f5c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f62:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002f68:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002f6e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f76:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d106      	bne.n	8002f94 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	045b      	lsls	r3, r3, #17
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d009      	beq.n	8002fb0 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	4b4b      	ldr	r3, [pc, #300]	@ (80030e4 <HAL_ADC_Init+0x310>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	69b9      	ldr	r1, [r7, #24]
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fed2 	bl	8002d88 <LL_ADC_REG_IsConversionOngoing>
 8002fe4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff fedf 	bl	8002dae <LL_ADC_INJ_IsConversionOngoing>
 8002ff0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d17f      	bne.n	80030f8 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d17c      	bne.n	80030f8 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003002:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800300a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800301a:	f023 0302 	bic.w	r3, r3, #2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	69b9      	ldr	r1, [r7, #24]
 8003024:	430b      	orrs	r3, r1
 8003026:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d017      	beq.n	8003060 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800303e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003048:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800304c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6911      	ldr	r1, [r2, #16]
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	430b      	orrs	r3, r1
 800305a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800305e:	e013      	b.n	8003088 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691a      	ldr	r2, [r3, #16]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800306e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003080:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003084:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800308e:	2b01      	cmp	r3, #1
 8003090:	d12a      	bne.n	80030e8 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800309c:	f023 0304 	bic.w	r3, r3, #4
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80030a8:	4311      	orrs	r1, r2
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80030ae:	4311      	orrs	r1, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80030b4:	430a      	orrs	r2, r1
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f042 0201 	orr.w	r2, r2, #1
 80030c0:	611a      	str	r2, [r3, #16]
 80030c2:	e019      	b.n	80030f8 <HAL_ADC_Init+0x324>
 80030c4:	20000000 	.word	0x20000000
 80030c8:	053e2d63 	.word	0x053e2d63
 80030cc:	50000100 	.word	0x50000100
 80030d0:	50000400 	.word	0x50000400
 80030d4:	50000500 	.word	0x50000500
 80030d8:	50000600 	.word	0x50000600
 80030dc:	50000300 	.word	0x50000300
 80030e0:	50000700 	.word	0x50000700
 80030e4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d10c      	bne.n	800311a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003106:	f023 010f 	bic.w	r1, r3, #15
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	1e5a      	subs	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	631a      	str	r2, [r3, #48]	@ 0x30
 8003118:	e007      	b.n	800312a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 020f 	bic.w	r2, r2, #15
 8003128:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312e:	f023 0303 	bic.w	r3, r3, #3
 8003132:	f043 0201 	orr.w	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	65da      	str	r2, [r3, #92]	@ 0x5c
 800313a:	e007      	b.n	800314c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003140:	f043 0210 	orr.w	r2, r3, #16
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800314c:	7ffb      	ldrb	r3, [r7, #31]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3724      	adds	r7, #36	@ 0x24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd90      	pop	{r4, r7, pc}
 8003156:	bf00      	nop

08003158 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800316c:	d004      	beq.n	8003178 <HAL_ADC_Start_DMA+0x20>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a5a      	ldr	r2, [pc, #360]	@ (80032dc <HAL_ADC_Start_DMA+0x184>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d101      	bne.n	800317c <HAL_ADC_Start_DMA+0x24>
 8003178:	4b59      	ldr	r3, [pc, #356]	@ (80032e0 <HAL_ADC_Start_DMA+0x188>)
 800317a:	e000      	b.n	800317e <HAL_ADC_Start_DMA+0x26>
 800317c:	4b59      	ldr	r3, [pc, #356]	@ (80032e4 <HAL_ADC_Start_DMA+0x18c>)
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fd36 	bl	8002bf0 <LL_ADC_GetMultimode>
 8003184:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fdfc 	bl	8002d88 <LL_ADC_REG_IsConversionOngoing>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	f040 809b 	bne.w	80032ce <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_ADC_Start_DMA+0x4e>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e096      	b.n	80032d4 <HAL_ADC_Start_DMA+0x17c>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a4d      	ldr	r2, [pc, #308]	@ (80032e8 <HAL_ADC_Start_DMA+0x190>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d008      	beq.n	80031ca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	2b05      	cmp	r3, #5
 80031c2:	d002      	beq.n	80031ca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	2b09      	cmp	r3, #9
 80031c8:	d17a      	bne.n	80032c0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 ff56 	bl	800407c <ADC_Enable>
 80031d0:	4603      	mov	r3, r0
 80031d2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80031d4:	7dfb      	ldrb	r3, [r7, #23]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d16d      	bne.n	80032b6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a3a      	ldr	r2, [pc, #232]	@ (80032dc <HAL_ADC_Start_DMA+0x184>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d009      	beq.n	800320c <HAL_ADC_Start_DMA+0xb4>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a3b      	ldr	r2, [pc, #236]	@ (80032ec <HAL_ADC_Start_DMA+0x194>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d002      	beq.n	8003208 <HAL_ADC_Start_DMA+0xb0>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	e003      	b.n	8003210 <HAL_ADC_Start_DMA+0xb8>
 8003208:	4b39      	ldr	r3, [pc, #228]	@ (80032f0 <HAL_ADC_Start_DMA+0x198>)
 800320a:	e001      	b.n	8003210 <HAL_ADC_Start_DMA+0xb8>
 800320c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	4293      	cmp	r3, r2
 8003216:	d002      	beq.n	800321e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d105      	bne.n	800322a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003222:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d006      	beq.n	8003244 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800323a:	f023 0206 	bic.w	r2, r3, #6
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	661a      	str	r2, [r3, #96]	@ 0x60
 8003242:	e002      	b.n	800324a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324e:	4a29      	ldr	r2, [pc, #164]	@ (80032f4 <HAL_ADC_Start_DMA+0x19c>)
 8003250:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003256:	4a28      	ldr	r2, [pc, #160]	@ (80032f8 <HAL_ADC_Start_DMA+0x1a0>)
 8003258:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325e:	4a27      	ldr	r2, [pc, #156]	@ (80032fc <HAL_ADC_Start_DMA+0x1a4>)
 8003260:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	221c      	movs	r2, #28
 8003268:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 0210 	orr.w	r2, r2, #16
 8003280:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 0201 	orr.w	r2, r2, #1
 8003290:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3340      	adds	r3, #64	@ 0x40
 800329c:	4619      	mov	r1, r3
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f001 fbb7 	bl	8004a14 <HAL_DMA_Start_IT>
 80032a6:	4603      	mov	r3, r0
 80032a8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fd56 	bl	8002d60 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80032b4:	e00d      	b.n	80032d2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80032be:	e008      	b.n	80032d2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80032cc:	e001      	b.n	80032d2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032ce:	2302      	movs	r3, #2
 80032d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80032d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	50000100 	.word	0x50000100
 80032e0:	50000300 	.word	0x50000300
 80032e4:	50000700 	.word	0x50000700
 80032e8:	50000600 	.word	0x50000600
 80032ec:	50000500 	.word	0x50000500
 80032f0:	50000400 	.word	0x50000400
 80032f4:	080041ff 	.word	0x080041ff
 80032f8:	080042d7 	.word	0x080042d7
 80032fc:	080042f3 	.word	0x080042f3

08003300 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	@ 0x28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003308:	2300      	movs	r3, #0
 800330a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003324:	d004      	beq.n	8003330 <HAL_ADC_IRQHandler+0x30>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a8e      	ldr	r2, [pc, #568]	@ (8003564 <HAL_ADC_IRQHandler+0x264>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d101      	bne.n	8003334 <HAL_ADC_IRQHandler+0x34>
 8003330:	4b8d      	ldr	r3, [pc, #564]	@ (8003568 <HAL_ADC_IRQHandler+0x268>)
 8003332:	e000      	b.n	8003336 <HAL_ADC_IRQHandler+0x36>
 8003334:	4b8d      	ldr	r3, [pc, #564]	@ (800356c <HAL_ADC_IRQHandler+0x26c>)
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff fc5a 	bl	8002bf0 <LL_ADC_GetMultimode>
 800333c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d017      	beq.n	8003378 <HAL_ADC_IRQHandler+0x78>
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d012      	beq.n	8003378 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b00      	cmp	r3, #0
 800335c:	d105      	bne.n	800336a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003362:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f001 f8b8 	bl	80044e0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2202      	movs	r2, #2
 8003376:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b00      	cmp	r3, #0
 8003380:	d004      	beq.n	800338c <HAL_ADC_IRQHandler+0x8c>
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	f003 0304 	and.w	r3, r3, #4
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10b      	bne.n	80033a4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 8094 	beq.w	80034c0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 808e 	beq.w	80034c0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fb6f 	bl	8002aa4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d072      	beq.n	80034b2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a64      	ldr	r2, [pc, #400]	@ (8003564 <HAL_ADC_IRQHandler+0x264>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d009      	beq.n	80033ea <HAL_ADC_IRQHandler+0xea>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a65      	ldr	r2, [pc, #404]	@ (8003570 <HAL_ADC_IRQHandler+0x270>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d002      	beq.n	80033e6 <HAL_ADC_IRQHandler+0xe6>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	e003      	b.n	80033ee <HAL_ADC_IRQHandler+0xee>
 80033e6:	4b63      	ldr	r3, [pc, #396]	@ (8003574 <HAL_ADC_IRQHandler+0x274>)
 80033e8:	e001      	b.n	80033ee <HAL_ADC_IRQHandler+0xee>
 80033ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d008      	beq.n	8003408 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2b05      	cmp	r3, #5
 8003400:	d002      	beq.n	8003408 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2b09      	cmp	r3, #9
 8003406:	d104      	bne.n	8003412 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	623b      	str	r3, [r7, #32]
 8003410:	e014      	b.n	800343c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a53      	ldr	r2, [pc, #332]	@ (8003564 <HAL_ADC_IRQHandler+0x264>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d009      	beq.n	8003430 <HAL_ADC_IRQHandler+0x130>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a53      	ldr	r2, [pc, #332]	@ (8003570 <HAL_ADC_IRQHandler+0x270>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d002      	beq.n	800342c <HAL_ADC_IRQHandler+0x12c>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	e003      	b.n	8003434 <HAL_ADC_IRQHandler+0x134>
 800342c:	4b51      	ldr	r3, [pc, #324]	@ (8003574 <HAL_ADC_IRQHandler+0x274>)
 800342e:	e001      	b.n	8003434 <HAL_ADC_IRQHandler+0x134>
 8003430:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003434:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d135      	bne.n	80034b2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	2b08      	cmp	r3, #8
 8003452:	d12e      	bne.n	80034b2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fc95 	bl	8002d88 <LL_ADC_REG_IsConversionOngoing>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d11a      	bne.n	800349a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 020c 	bic.w	r2, r2, #12
 8003472:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003478:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003484:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d112      	bne.n	80034b2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003490:	f043 0201 	orr.w	r2, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003498:	e00b      	b.n	80034b2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349e:	f043 0210 	orr.w	r2, r3, #16
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034aa:	f043 0201 	orr.w	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fe fa02 	bl	80018bc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	220c      	movs	r2, #12
 80034be:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d004      	beq.n	80034d4 <HAL_ADC_IRQHandler+0x1d4>
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10b      	bne.n	80034ec <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 80b3 	beq.w	8003646 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 80ad 	beq.w	8003646 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d105      	bne.n	8003504 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fb0a 	bl	8002b22 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800350e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fac5 	bl	8002aa4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800351a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a10      	ldr	r2, [pc, #64]	@ (8003564 <HAL_ADC_IRQHandler+0x264>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d009      	beq.n	800353a <HAL_ADC_IRQHandler+0x23a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a11      	ldr	r2, [pc, #68]	@ (8003570 <HAL_ADC_IRQHandler+0x270>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d002      	beq.n	8003536 <HAL_ADC_IRQHandler+0x236>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	e003      	b.n	800353e <HAL_ADC_IRQHandler+0x23e>
 8003536:	4b0f      	ldr	r3, [pc, #60]	@ (8003574 <HAL_ADC_IRQHandler+0x274>)
 8003538:	e001      	b.n	800353e <HAL_ADC_IRQHandler+0x23e>
 800353a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	4293      	cmp	r3, r2
 8003544:	d008      	beq.n	8003558 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2b06      	cmp	r3, #6
 8003550:	d002      	beq.n	8003558 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2b07      	cmp	r3, #7
 8003556:	d10f      	bne.n	8003578 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	623b      	str	r3, [r7, #32]
 8003560:	e01f      	b.n	80035a2 <HAL_ADC_IRQHandler+0x2a2>
 8003562:	bf00      	nop
 8003564:	50000100 	.word	0x50000100
 8003568:	50000300 	.word	0x50000300
 800356c:	50000700 	.word	0x50000700
 8003570:	50000500 	.word	0x50000500
 8003574:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a8b      	ldr	r2, [pc, #556]	@ (80037ac <HAL_ADC_IRQHandler+0x4ac>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d009      	beq.n	8003596 <HAL_ADC_IRQHandler+0x296>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a8a      	ldr	r2, [pc, #552]	@ (80037b0 <HAL_ADC_IRQHandler+0x4b0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d002      	beq.n	8003592 <HAL_ADC_IRQHandler+0x292>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	e003      	b.n	800359a <HAL_ADC_IRQHandler+0x29a>
 8003592:	4b88      	ldr	r3, [pc, #544]	@ (80037b4 <HAL_ADC_IRQHandler+0x4b4>)
 8003594:	e001      	b.n	800359a <HAL_ADC_IRQHandler+0x29a>
 8003596:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800359a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d047      	beq.n	8003638 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d007      	beq.n	80035c2 <HAL_ADC_IRQHandler+0x2c2>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d03f      	beq.n	8003638 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d13a      	bne.n	8003638 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035cc:	2b40      	cmp	r3, #64	@ 0x40
 80035ce:	d133      	bne.n	8003638 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d12e      	bne.n	8003638 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff fbe5 	bl	8002dae <LL_ADC_INJ_IsConversionOngoing>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d11a      	bne.n	8003620 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80035f8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d112      	bne.n	8003638 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003616:	f043 0201 	orr.w	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800361e:	e00b      	b.n	8003638 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003624:	f043 0210 	orr.w	r2, r3, #16
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003630:	f043 0201 	orr.w	r2, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 ff29 	bl	8004490 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2260      	movs	r2, #96	@ 0x60
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364c:	2b00      	cmp	r3, #0
 800364e:	d011      	beq.n	8003674 <HAL_ADC_IRQHandler+0x374>
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00c      	beq.n	8003674 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800365e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f8b4 	bl	80037d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2280      	movs	r2, #128	@ 0x80
 8003672:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	d012      	beq.n	80036a4 <HAL_ADC_IRQHandler+0x3a4>
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00d      	beq.n	80036a4 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 ff0f 	bl	80044b8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d012      	beq.n	80036d4 <HAL_ADC_IRQHandler+0x3d4>
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00d      	beq.n	80036d4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036bc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 ff01 	bl	80044cc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f003 0310 	and.w	r3, r3, #16
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d043      	beq.n	8003766 <HAL_ADC_IRQHandler+0x466>
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d03e      	beq.n	8003766 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d102      	bne.n	80036f6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80036f0:	2301      	movs	r3, #1
 80036f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80036f4:	e021      	b.n	800373a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d015      	beq.n	8003728 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003704:	d004      	beq.n	8003710 <HAL_ADC_IRQHandler+0x410>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a28      	ldr	r2, [pc, #160]	@ (80037ac <HAL_ADC_IRQHandler+0x4ac>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d101      	bne.n	8003714 <HAL_ADC_IRQHandler+0x414>
 8003710:	4b29      	ldr	r3, [pc, #164]	@ (80037b8 <HAL_ADC_IRQHandler+0x4b8>)
 8003712:	e000      	b.n	8003716 <HAL_ADC_IRQHandler+0x416>
 8003714:	4b29      	ldr	r3, [pc, #164]	@ (80037bc <HAL_ADC_IRQHandler+0x4bc>)
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fa78 	bl	8002c0c <LL_ADC_GetMultiDMATransfer>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00b      	beq.n	800373a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003722:	2301      	movs	r3, #1
 8003724:	627b      	str	r3, [r7, #36]	@ 0x24
 8003726:	e008      	b.n	800373a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003736:	2301      	movs	r3, #1
 8003738:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800373a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373c:	2b01      	cmp	r3, #1
 800373e:	d10e      	bne.n	800375e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003744:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003750:	f043 0202 	orr.w	r2, r3, #2
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f845 	bl	80037e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2210      	movs	r2, #16
 8003764:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800376c:	2b00      	cmp	r3, #0
 800376e:	d018      	beq.n	80037a2 <HAL_ADC_IRQHandler+0x4a2>
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003776:	2b00      	cmp	r3, #0
 8003778:	d013      	beq.n	80037a2 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800378a:	f043 0208 	orr.w	r2, r3, #8
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800379a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 fe81 	bl	80044a4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80037a2:	bf00      	nop
 80037a4:	3728      	adds	r7, #40	@ 0x28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	50000100 	.word	0x50000100
 80037b0:	50000500 	.word	0x50000500
 80037b4:	50000400 	.word	0x50000400
 80037b8:	50000300 	.word	0x50000300
 80037bc:	50000700 	.word	0x50000700

080037c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b0b6      	sub	sp, #216	@ 0xd8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003816:	2b01      	cmp	r3, #1
 8003818:	d102      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x24>
 800381a:	2302      	movs	r3, #2
 800381c:	f000 bc13 	b.w	8004046 <HAL_ADC_ConfigChannel+0x84a>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff faab 	bl	8002d88 <LL_ADC_REG_IsConversionOngoing>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	f040 83f3 	bne.w	8004020 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6859      	ldr	r1, [r3, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	f7ff f93f 	bl	8002aca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff fa99 	bl	8002d88 <LL_ADC_REG_IsConversionOngoing>
 8003856:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff faa5 	bl	8002dae <LL_ADC_INJ_IsConversionOngoing>
 8003864:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003868:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800386c:	2b00      	cmp	r3, #0
 800386e:	f040 81d9 	bne.w	8003c24 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003872:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003876:	2b00      	cmp	r3, #0
 8003878:	f040 81d4 	bne.w	8003c24 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003884:	d10f      	bne.n	80038a6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6818      	ldr	r0, [r3, #0]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2200      	movs	r2, #0
 8003890:	4619      	mov	r1, r3
 8003892:	f7ff f959 	bl	8002b48 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff f8ed 	bl	8002a7e <LL_ADC_SetSamplingTimeCommonConfig>
 80038a4:	e00e      	b.n	80038c4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6819      	ldr	r1, [r3, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	461a      	mov	r2, r3
 80038b4:	f7ff f948 	bl	8002b48 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2100      	movs	r1, #0
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff f8dd 	bl	8002a7e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	695a      	ldr	r2, [r3, #20]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	08db      	lsrs	r3, r3, #3
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d022      	beq.n	800392c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	6919      	ldr	r1, [r3, #16]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80038f6:	f7ff f837 	bl	8002968 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	6919      	ldr	r1, [r3, #16]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	461a      	mov	r2, r3
 8003908:	f7ff f883 	bl	8002a12 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	6919      	ldr	r1, [r3, #16]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	7f1b      	ldrb	r3, [r3, #28]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d102      	bne.n	8003922 <HAL_ADC_ConfigChannel+0x126>
 800391c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003920:	e000      	b.n	8003924 <HAL_ADC_ConfigChannel+0x128>
 8003922:	2300      	movs	r3, #0
 8003924:	461a      	mov	r2, r3
 8003926:	f7ff f88f 	bl	8002a48 <LL_ADC_SetOffsetSaturation>
 800392a:	e17b      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2100      	movs	r1, #0
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff f83c 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 8003938:	4603      	mov	r3, r0
 800393a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10a      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x15c>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2100      	movs	r1, #0
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff f831 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 800394e:	4603      	mov	r3, r0
 8003950:	0e9b      	lsrs	r3, r3, #26
 8003952:	f003 021f 	and.w	r2, r3, #31
 8003956:	e01e      	b.n	8003996 <HAL_ADC_ConfigChannel+0x19a>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2100      	movs	r1, #0
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff f826 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 8003964:	4603      	mov	r3, r0
 8003966:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800396e:	fa93 f3a3 	rbit	r3, r3
 8003972:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003976:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800397a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800397e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003986:	2320      	movs	r3, #32
 8003988:	e004      	b.n	8003994 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800398a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800398e:	fab3 f383 	clz	r3, r3
 8003992:	b2db      	uxtb	r3, r3
 8003994:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d105      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x1b2>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	0e9b      	lsrs	r3, r3, #26
 80039a8:	f003 031f 	and.w	r3, r3, #31
 80039ac:	e018      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x1e4>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80039ba:	fa93 f3a3 	rbit	r3, r3
 80039be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80039c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80039ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80039d2:	2320      	movs	r3, #32
 80039d4:	e004      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80039d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80039da:	fab3 f383 	clz	r3, r3
 80039de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d106      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2200      	movs	r2, #0
 80039ea:	2100      	movs	r1, #0
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fe fff5 	bl	80029dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2101      	movs	r1, #1
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fe ffd9 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10a      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x222>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe ffce 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 8003a14:	4603      	mov	r3, r0
 8003a16:	0e9b      	lsrs	r3, r3, #26
 8003a18:	f003 021f 	and.w	r2, r3, #31
 8003a1c:	e01e      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x260>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2101      	movs	r1, #1
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fe ffc3 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a34:	fa93 f3a3 	rbit	r3, r3
 8003a38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003a3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003a44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003a4c:	2320      	movs	r3, #32
 8003a4e:	e004      	b.n	8003a5a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003a50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a54:	fab3 f383 	clz	r3, r3
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d105      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x278>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	0e9b      	lsrs	r3, r3, #26
 8003a6e:	f003 031f 	and.w	r3, r3, #31
 8003a72:	e018      	b.n	8003aa6 <HAL_ADC_ConfigChannel+0x2aa>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a80:	fa93 f3a3 	rbit	r3, r3
 8003a84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003a88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003a90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003a98:	2320      	movs	r3, #32
 8003a9a:	e004      	b.n	8003aa6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003a9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003aa0:	fab3 f383 	clz	r3, r3
 8003aa4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d106      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe ff92 	bl	80029dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2102      	movs	r1, #2
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fe ff76 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10a      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x2e8>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fe ff6b 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 8003ada:	4603      	mov	r3, r0
 8003adc:	0e9b      	lsrs	r3, r3, #26
 8003ade:	f003 021f 	and.w	r2, r3, #31
 8003ae2:	e01e      	b.n	8003b22 <HAL_ADC_ConfigChannel+0x326>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2102      	movs	r1, #2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe ff60 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003afa:	fa93 f3a3 	rbit	r3, r3
 8003afe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003b02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003b0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003b12:	2320      	movs	r3, #32
 8003b14:	e004      	b.n	8003b20 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003b16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003b1a:	fab3 f383 	clz	r3, r3
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d105      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x33e>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	0e9b      	lsrs	r3, r3, #26
 8003b34:	f003 031f 	and.w	r3, r3, #31
 8003b38:	e016      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x36c>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b42:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b46:	fa93 f3a3 	rbit	r3, r3
 8003b4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003b4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003b52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003b5a:	2320      	movs	r3, #32
 8003b5c:	e004      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003b5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b62:	fab3 f383 	clz	r3, r3
 8003b66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d106      	bne.n	8003b7a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2200      	movs	r2, #0
 8003b72:	2102      	movs	r1, #2
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fe ff31 	bl	80029dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2103      	movs	r1, #3
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fe ff15 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10a      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x3aa>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2103      	movs	r1, #3
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fe ff0a 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	0e9b      	lsrs	r3, r3, #26
 8003ba0:	f003 021f 	and.w	r2, r3, #31
 8003ba4:	e017      	b.n	8003bd6 <HAL_ADC_ConfigChannel+0x3da>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2103      	movs	r1, #3
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fe feff 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bb8:	fa93 f3a3 	rbit	r3, r3
 8003bbc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003bbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003bc0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003bc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003bc8:	2320      	movs	r3, #32
 8003bca:	e003      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003bcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bce:	fab3 f383 	clz	r3, r3
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d105      	bne.n	8003bee <HAL_ADC_ConfigChannel+0x3f2>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	0e9b      	lsrs	r3, r3, #26
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	e011      	b.n	8003c12 <HAL_ADC_ConfigChannel+0x416>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bf6:	fa93 f3a3 	rbit	r3, r3
 8003bfa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003bfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003c00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003c06:	2320      	movs	r3, #32
 8003c08:	e003      	b.n	8003c12 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003c0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c0c:	fab3 f383 	clz	r3, r3
 8003c10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d106      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2103      	movs	r1, #3
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fe fedc 	bl	80029dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff f873 	bl	8002d14 <LL_ADC_IsEnabled>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f040 813d 	bne.w	8003eb0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6818      	ldr	r0, [r3, #0]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	6819      	ldr	r1, [r3, #0]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	461a      	mov	r2, r3
 8003c44:	f7fe ffac 	bl	8002ba0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	4aa2      	ldr	r2, [pc, #648]	@ (8003ed8 <HAL_ADC_ConfigChannel+0x6dc>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	f040 812e 	bne.w	8003eb0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10b      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x480>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	0e9b      	lsrs	r3, r3, #26
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	f003 031f 	and.w	r3, r3, #31
 8003c70:	2b09      	cmp	r3, #9
 8003c72:	bf94      	ite	ls
 8003c74:	2301      	movls	r3, #1
 8003c76:	2300      	movhi	r3, #0
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	e019      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x4b4>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c84:	fa93 f3a3 	rbit	r3, r3
 8003c88:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003c8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c8c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003c8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003c94:	2320      	movs	r3, #32
 8003c96:	e003      	b.n	8003ca0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003c98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c9a:	fab3 f383 	clz	r3, r3
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	f003 031f 	and.w	r3, r3, #31
 8003ca6:	2b09      	cmp	r3, #9
 8003ca8:	bf94      	ite	ls
 8003caa:	2301      	movls	r3, #1
 8003cac:	2300      	movhi	r3, #0
 8003cae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d079      	beq.n	8003da8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d107      	bne.n	8003cd0 <HAL_ADC_ConfigChannel+0x4d4>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	0e9b      	lsrs	r3, r3, #26
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	069b      	lsls	r3, r3, #26
 8003cca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cce:	e015      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x500>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cd8:	fa93 f3a3 	rbit	r3, r3
 8003cdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003cde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ce0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003ce8:	2320      	movs	r3, #32
 8003cea:	e003      	b.n	8003cf4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cee:	fab3 f383 	clz	r3, r3
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	069b      	lsls	r3, r3, #26
 8003cf8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d109      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x520>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	0e9b      	lsrs	r3, r3, #26
 8003d0e:	3301      	adds	r3, #1
 8003d10:	f003 031f 	and.w	r3, r3, #31
 8003d14:	2101      	movs	r1, #1
 8003d16:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1a:	e017      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x550>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d24:	fa93 f3a3 	rbit	r3, r3
 8003d28:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003d34:	2320      	movs	r3, #32
 8003d36:	e003      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003d38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d3a:	fab3 f383 	clz	r3, r3
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	3301      	adds	r3, #1
 8003d42:	f003 031f 	and.w	r3, r3, #31
 8003d46:	2101      	movs	r1, #1
 8003d48:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4c:	ea42 0103 	orr.w	r1, r2, r3
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10a      	bne.n	8003d72 <HAL_ADC_ConfigChannel+0x576>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	0e9b      	lsrs	r3, r3, #26
 8003d62:	3301      	adds	r3, #1
 8003d64:	f003 021f 	and.w	r2, r3, #31
 8003d68:	4613      	mov	r3, r2
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	4413      	add	r3, r2
 8003d6e:	051b      	lsls	r3, r3, #20
 8003d70:	e018      	b.n	8003da4 <HAL_ADC_ConfigChannel+0x5a8>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d7a:	fa93 f3a3 	rbit	r3, r3
 8003d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003d8a:	2320      	movs	r3, #32
 8003d8c:	e003      	b.n	8003d96 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d90:	fab3 f383 	clz	r3, r3
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	3301      	adds	r3, #1
 8003d98:	f003 021f 	and.w	r2, r3, #31
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	4413      	add	r3, r2
 8003da2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003da4:	430b      	orrs	r3, r1
 8003da6:	e07e      	b.n	8003ea6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d107      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x5c8>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	0e9b      	lsrs	r3, r3, #26
 8003dba:	3301      	adds	r3, #1
 8003dbc:	069b      	lsls	r3, r3, #26
 8003dbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dc2:	e015      	b.n	8003df0 <HAL_ADC_ConfigChannel+0x5f4>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dcc:	fa93 f3a3 	rbit	r3, r3
 8003dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003ddc:	2320      	movs	r3, #32
 8003dde:	e003      	b.n	8003de8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de2:	fab3 f383 	clz	r3, r3
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	3301      	adds	r3, #1
 8003dea:	069b      	lsls	r3, r3, #26
 8003dec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d109      	bne.n	8003e10 <HAL_ADC_ConfigChannel+0x614>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	0e9b      	lsrs	r3, r3, #26
 8003e02:	3301      	adds	r3, #1
 8003e04:	f003 031f 	and.w	r3, r3, #31
 8003e08:	2101      	movs	r1, #1
 8003e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0e:	e017      	b.n	8003e40 <HAL_ADC_ConfigChannel+0x644>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	fa93 f3a3 	rbit	r3, r3
 8003e1c:	61fb      	str	r3, [r7, #28]
  return result;
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003e28:	2320      	movs	r3, #32
 8003e2a:	e003      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2e:	fab3 f383 	clz	r3, r3
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	3301      	adds	r3, #1
 8003e36:	f003 031f 	and.w	r3, r3, #31
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e40:	ea42 0103 	orr.w	r1, r2, r3
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10d      	bne.n	8003e6c <HAL_ADC_ConfigChannel+0x670>
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	0e9b      	lsrs	r3, r3, #26
 8003e56:	3301      	adds	r3, #1
 8003e58:	f003 021f 	and.w	r2, r3, #31
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	4413      	add	r3, r2
 8003e62:	3b1e      	subs	r3, #30
 8003e64:	051b      	lsls	r3, r3, #20
 8003e66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e6a:	e01b      	b.n	8003ea4 <HAL_ADC_ConfigChannel+0x6a8>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	fa93 f3a3 	rbit	r3, r3
 8003e78:	613b      	str	r3, [r7, #16]
  return result;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d101      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003e84:	2320      	movs	r3, #32
 8003e86:	e003      	b.n	8003e90 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	fab3 f383 	clz	r3, r3
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	3301      	adds	r3, #1
 8003e92:	f003 021f 	and.w	r2, r3, #31
 8003e96:	4613      	mov	r3, r2
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3b1e      	subs	r3, #30
 8003e9e:	051b      	lsls	r3, r3, #20
 8003ea0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	6892      	ldr	r2, [r2, #8]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	f7fe fe4c 	bl	8002b48 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4b09      	ldr	r3, [pc, #36]	@ (8003edc <HAL_ADC_ConfigChannel+0x6e0>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 80be 	beq.w	800403a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ec6:	d004      	beq.n	8003ed2 <HAL_ADC_ConfigChannel+0x6d6>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a04      	ldr	r2, [pc, #16]	@ (8003ee0 <HAL_ADC_ConfigChannel+0x6e4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d10a      	bne.n	8003ee8 <HAL_ADC_ConfigChannel+0x6ec>
 8003ed2:	4b04      	ldr	r3, [pc, #16]	@ (8003ee4 <HAL_ADC_ConfigChannel+0x6e8>)
 8003ed4:	e009      	b.n	8003eea <HAL_ADC_ConfigChannel+0x6ee>
 8003ed6:	bf00      	nop
 8003ed8:	407f0000 	.word	0x407f0000
 8003edc:	80080000 	.word	0x80080000
 8003ee0:	50000100 	.word	0x50000100
 8003ee4:	50000300 	.word	0x50000300
 8003ee8:	4b59      	ldr	r3, [pc, #356]	@ (8004050 <HAL_ADC_ConfigChannel+0x854>)
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fe fd2e 	bl	800294c <LL_ADC_GetCommonPathInternalCh>
 8003ef0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a56      	ldr	r2, [pc, #344]	@ (8004054 <HAL_ADC_ConfigChannel+0x858>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d004      	beq.n	8003f08 <HAL_ADC_ConfigChannel+0x70c>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a55      	ldr	r2, [pc, #340]	@ (8004058 <HAL_ADC_ConfigChannel+0x85c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d13a      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d134      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f1c:	d005      	beq.n	8003f2a <HAL_ADC_ConfigChannel+0x72e>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a4e      	ldr	r2, [pc, #312]	@ (800405c <HAL_ADC_ConfigChannel+0x860>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	f040 8085 	bne.w	8004034 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f32:	d004      	beq.n	8003f3e <HAL_ADC_ConfigChannel+0x742>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a49      	ldr	r2, [pc, #292]	@ (8004060 <HAL_ADC_ConfigChannel+0x864>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d101      	bne.n	8003f42 <HAL_ADC_ConfigChannel+0x746>
 8003f3e:	4a49      	ldr	r2, [pc, #292]	@ (8004064 <HAL_ADC_ConfigChannel+0x868>)
 8003f40:	e000      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x748>
 8003f42:	4a43      	ldr	r2, [pc, #268]	@ (8004050 <HAL_ADC_ConfigChannel+0x854>)
 8003f44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f48:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	f7fe fce9 	bl	8002926 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f54:	4b44      	ldr	r3, [pc, #272]	@ (8004068 <HAL_ADC_ConfigChannel+0x86c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	099b      	lsrs	r3, r3, #6
 8003f5a:	4a44      	ldr	r2, [pc, #272]	@ (800406c <HAL_ADC_ConfigChannel+0x870>)
 8003f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f60:	099b      	lsrs	r3, r3, #6
 8003f62:	1c5a      	adds	r2, r3, #1
 8003f64:	4613      	mov	r3, r2
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f6e:	e002      	b.n	8003f76 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1f9      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f7c:	e05a      	b.n	8004034 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a3b      	ldr	r2, [pc, #236]	@ (8004070 <HAL_ADC_ConfigChannel+0x874>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d125      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x7d8>
 8003f88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d11f      	bne.n	8003fd4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a31      	ldr	r2, [pc, #196]	@ (8004060 <HAL_ADC_ConfigChannel+0x864>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d104      	bne.n	8003fa8 <HAL_ADC_ConfigChannel+0x7ac>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a34      	ldr	r2, [pc, #208]	@ (8004074 <HAL_ADC_ConfigChannel+0x878>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d047      	beq.n	8004038 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fb0:	d004      	beq.n	8003fbc <HAL_ADC_ConfigChannel+0x7c0>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a2a      	ldr	r2, [pc, #168]	@ (8004060 <HAL_ADC_ConfigChannel+0x864>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d101      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0x7c4>
 8003fbc:	4a29      	ldr	r2, [pc, #164]	@ (8004064 <HAL_ADC_ConfigChannel+0x868>)
 8003fbe:	e000      	b.n	8003fc2 <HAL_ADC_ConfigChannel+0x7c6>
 8003fc0:	4a23      	ldr	r2, [pc, #140]	@ (8004050 <HAL_ADC_ConfigChannel+0x854>)
 8003fc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4610      	mov	r0, r2
 8003fce:	f7fe fcaa 	bl	8002926 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fd2:	e031      	b.n	8004038 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a27      	ldr	r2, [pc, #156]	@ (8004078 <HAL_ADC_ConfigChannel+0x87c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d12d      	bne.n	800403a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d127      	bne.n	800403a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a1c      	ldr	r2, [pc, #112]	@ (8004060 <HAL_ADC_ConfigChannel+0x864>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d022      	beq.n	800403a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ffc:	d004      	beq.n	8004008 <HAL_ADC_ConfigChannel+0x80c>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a17      	ldr	r2, [pc, #92]	@ (8004060 <HAL_ADC_ConfigChannel+0x864>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d101      	bne.n	800400c <HAL_ADC_ConfigChannel+0x810>
 8004008:	4a16      	ldr	r2, [pc, #88]	@ (8004064 <HAL_ADC_ConfigChannel+0x868>)
 800400a:	e000      	b.n	800400e <HAL_ADC_ConfigChannel+0x812>
 800400c:	4a10      	ldr	r2, [pc, #64]	@ (8004050 <HAL_ADC_ConfigChannel+0x854>)
 800400e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004012:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004016:	4619      	mov	r1, r3
 8004018:	4610      	mov	r0, r2
 800401a:	f7fe fc84 	bl	8002926 <LL_ADC_SetCommonPathInternalCh>
 800401e:	e00c      	b.n	800403a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004024:	f043 0220 	orr.w	r2, r3, #32
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004032:	e002      	b.n	800403a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004034:	bf00      	nop
 8004036:	e000      	b.n	800403a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004038:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004042:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004046:	4618      	mov	r0, r3
 8004048:	37d8      	adds	r7, #216	@ 0xd8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	50000700 	.word	0x50000700
 8004054:	c3210000 	.word	0xc3210000
 8004058:	90c00010 	.word	0x90c00010
 800405c:	50000600 	.word	0x50000600
 8004060:	50000100 	.word	0x50000100
 8004064:	50000300 	.word	0x50000300
 8004068:	20000000 	.word	0x20000000
 800406c:	053e2d63 	.word	0x053e2d63
 8004070:	c7520000 	.word	0xc7520000
 8004074:	50000500 	.word	0x50000500
 8004078:	cb840000 	.word	0xcb840000

0800407c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f7fe fe43 	bl	8002d14 <LL_ADC_IsEnabled>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d14d      	bne.n	8004130 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	4b28      	ldr	r3, [pc, #160]	@ (800413c <ADC_Enable+0xc0>)
 800409c:	4013      	ands	r3, r2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00d      	beq.n	80040be <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a6:	f043 0210 	orr.w	r2, r3, #16
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b2:	f043 0201 	orr.w	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e039      	b.n	8004132 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fe fdfe 	bl	8002cc4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80040c8:	f7fe fc0e 	bl	80028e8 <HAL_GetTick>
 80040cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040ce:	e028      	b.n	8004122 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fe fe1d 	bl	8002d14 <LL_ADC_IsEnabled>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d104      	bne.n	80040ea <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fe fded 	bl	8002cc4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80040ea:	f7fe fbfd 	bl	80028e8 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d914      	bls.n	8004122 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b01      	cmp	r3, #1
 8004104:	d00d      	beq.n	8004122 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800410a:	f043 0210 	orr.w	r2, r3, #16
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004116:	f043 0201 	orr.w	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e007      	b.n	8004132 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b01      	cmp	r3, #1
 800412e:	d1cf      	bne.n	80040d0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	8000003f 	.word	0x8000003f

08004140 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f7fe fdf4 	bl	8002d3a <LL_ADC_IsDisableOngoing>
 8004152:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f7fe fddb 	bl	8002d14 <LL_ADC_IsEnabled>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d047      	beq.n	80041f4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d144      	bne.n	80041f4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 030d 	and.w	r3, r3, #13
 8004174:	2b01      	cmp	r3, #1
 8004176:	d10c      	bne.n	8004192 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f7fe fdb5 	bl	8002cec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2203      	movs	r2, #3
 8004188:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800418a:	f7fe fbad 	bl	80028e8 <HAL_GetTick>
 800418e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004190:	e029      	b.n	80041e6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004196:	f043 0210 	orr.w	r2, r3, #16
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a2:	f043 0201 	orr.w	r2, r3, #1
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e023      	b.n	80041f6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80041ae:	f7fe fb9b 	bl	80028e8 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d914      	bls.n	80041e6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00d      	beq.n	80041e6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ce:	f043 0210 	orr.w	r2, r3, #16
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041da:	f043 0201 	orr.w	r2, r3, #1
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e007      	b.n	80041f6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1dc      	bne.n	80041ae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004210:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004214:	2b00      	cmp	r3, #0
 8004216:	d14b      	bne.n	80042b0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800421c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d021      	beq.n	8004276 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f7fe fc34 	bl	8002aa4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d032      	beq.n	80042a8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d12b      	bne.n	80042a8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004254:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004260:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d11f      	bne.n	80042a8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800426c:	f043 0201 	orr.w	r2, r3, #1
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004274:	e018      	b.n	80042a8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d111      	bne.n	80042a8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004288:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004294:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d105      	bne.n	80042a8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a0:	f043 0201 	orr.w	r2, r3, #1
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f7fd fb07 	bl	80018bc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80042ae:	e00e      	b.n	80042ce <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f7ff fa93 	bl	80037e8 <HAL_ADC_ErrorCallback>
}
 80042c2:	e004      	b.n	80042ce <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	4798      	blx	r3
}
 80042ce:	bf00      	nop
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f7ff fa6b 	bl	80037c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042ea:	bf00      	nop
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004304:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004310:	f043 0204 	orr.w	r2, r3, #4
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f7ff fa65 	bl	80037e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800431e:	bf00      	nop
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <LL_ADC_IsEnabled>:
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <LL_ADC_IsEnabled+0x18>
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <LL_ADC_IsEnabled+0x1a>
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <LL_ADC_StartCalibration>:
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800435e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004368:	4313      	orrs	r3, r2
 800436a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	609a      	str	r2, [r3, #8]
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <LL_ADC_IsCalibrationOnGoing>:
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800438e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004392:	d101      	bne.n	8004398 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d101      	bne.n	80043be <LL_ADC_REG_IsConversionOngoing+0x18>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_ADCEx_Calibration_Start+0x1c>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e04d      	b.n	8004484 <HAL_ADCEx_Calibration_Start+0xb8>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7ff fea5 	bl	8004140 <ADC_Disable>
 80043f6:	4603      	mov	r3, r0
 80043f8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80043fa:	7bfb      	ldrb	r3, [r7, #15]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d136      	bne.n	800446e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004404:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004408:	f023 0302 	bic.w	r3, r3, #2
 800440c:	f043 0202 	orr.w	r2, r3, #2
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6839      	ldr	r1, [r7, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff ff96 	bl	800434c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004420:	e014      	b.n	800444c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	3301      	adds	r3, #1
 8004426:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4a18      	ldr	r2, [pc, #96]	@ (800448c <HAL_ADCEx_Calibration_Start+0xc0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d90d      	bls.n	800444c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004434:	f023 0312 	bic.w	r3, r3, #18
 8004438:	f043 0210 	orr.w	r2, r3, #16
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e01b      	b.n	8004484 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff ff94 	bl	800437e <LL_ADC_IsCalibrationOnGoing>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1e2      	bne.n	8004422 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004460:	f023 0303 	bic.w	r3, r3, #3
 8004464:	f043 0201 	orr.w	r2, r3, #1
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800446c:	e005      	b.n	800447a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004472:	f043 0210 	orr.w	r2, r3, #16
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004482:	7bfb      	ldrb	r3, [r7, #15]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	0004de01 	.word	0x0004de01

08004490 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80044f4:	b590      	push	{r4, r7, lr}
 80044f6:	b0a1      	sub	sp, #132	@ 0x84
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800450e:	2302      	movs	r3, #2
 8004510:	e0e7      	b.n	80046e2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800451a:	2300      	movs	r3, #0
 800451c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800451e:	2300      	movs	r3, #0
 8004520:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800452a:	d102      	bne.n	8004532 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800452c:	4b6f      	ldr	r3, [pc, #444]	@ (80046ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800452e:	60bb      	str	r3, [r7, #8]
 8004530:	e009      	b.n	8004546 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a6e      	ldr	r2, [pc, #440]	@ (80046f0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d102      	bne.n	8004542 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800453c:	4b6d      	ldr	r3, [pc, #436]	@ (80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800453e:	60bb      	str	r3, [r7, #8]
 8004540:	e001      	b.n	8004546 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10b      	bne.n	8004564 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004550:	f043 0220 	orr.w	r2, r3, #32
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0be      	b.n	80046e2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff ff1d 	bl	80043a6 <LL_ADC_REG_IsConversionOngoing>
 800456c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff ff17 	bl	80043a6 <LL_ADC_REG_IsConversionOngoing>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	f040 80a0 	bne.w	80046c0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004582:	2b00      	cmp	r3, #0
 8004584:	f040 809c 	bne.w	80046c0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004590:	d004      	beq.n	800459c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a55      	ldr	r2, [pc, #340]	@ (80046ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d101      	bne.n	80045a0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800459c:	4b56      	ldr	r3, [pc, #344]	@ (80046f8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800459e:	e000      	b.n	80045a2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80045a0:	4b56      	ldr	r3, [pc, #344]	@ (80046fc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80045a2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d04b      	beq.n	8004644 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80045ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	6859      	ldr	r1, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80045be:	035b      	lsls	r3, r3, #13
 80045c0:	430b      	orrs	r3, r1
 80045c2:	431a      	orrs	r2, r3
 80045c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045d0:	d004      	beq.n	80045dc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a45      	ldr	r2, [pc, #276]	@ (80046ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d10f      	bne.n	80045fc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80045dc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80045e0:	f7ff fea1 	bl	8004326 <LL_ADC_IsEnabled>
 80045e4:	4604      	mov	r4, r0
 80045e6:	4841      	ldr	r0, [pc, #260]	@ (80046ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045e8:	f7ff fe9d 	bl	8004326 <LL_ADC_IsEnabled>
 80045ec:	4603      	mov	r3, r0
 80045ee:	4323      	orrs	r3, r4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	bf0c      	ite	eq
 80045f4:	2301      	moveq	r3, #1
 80045f6:	2300      	movne	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	e012      	b.n	8004622 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80045fc:	483c      	ldr	r0, [pc, #240]	@ (80046f0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80045fe:	f7ff fe92 	bl	8004326 <LL_ADC_IsEnabled>
 8004602:	4604      	mov	r4, r0
 8004604:	483b      	ldr	r0, [pc, #236]	@ (80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004606:	f7ff fe8e 	bl	8004326 <LL_ADC_IsEnabled>
 800460a:	4603      	mov	r3, r0
 800460c:	431c      	orrs	r4, r3
 800460e:	483c      	ldr	r0, [pc, #240]	@ (8004700 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004610:	f7ff fe89 	bl	8004326 <LL_ADC_IsEnabled>
 8004614:	4603      	mov	r3, r0
 8004616:	4323      	orrs	r3, r4
 8004618:	2b00      	cmp	r3, #0
 800461a:	bf0c      	ite	eq
 800461c:	2301      	moveq	r3, #1
 800461e:	2300      	movne	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d056      	beq.n	80046d4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004626:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800462e:	f023 030f 	bic.w	r3, r3, #15
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	6811      	ldr	r1, [r2, #0]
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	6892      	ldr	r2, [r2, #8]
 800463a:	430a      	orrs	r2, r1
 800463c:	431a      	orrs	r2, r3
 800463e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004640:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004642:	e047      	b.n	80046d4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004644:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800464c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800464e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004658:	d004      	beq.n	8004664 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a23      	ldr	r2, [pc, #140]	@ (80046ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d10f      	bne.n	8004684 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004664:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004668:	f7ff fe5d 	bl	8004326 <LL_ADC_IsEnabled>
 800466c:	4604      	mov	r4, r0
 800466e:	481f      	ldr	r0, [pc, #124]	@ (80046ec <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004670:	f7ff fe59 	bl	8004326 <LL_ADC_IsEnabled>
 8004674:	4603      	mov	r3, r0
 8004676:	4323      	orrs	r3, r4
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	e012      	b.n	80046aa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004684:	481a      	ldr	r0, [pc, #104]	@ (80046f0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004686:	f7ff fe4e 	bl	8004326 <LL_ADC_IsEnabled>
 800468a:	4604      	mov	r4, r0
 800468c:	4819      	ldr	r0, [pc, #100]	@ (80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800468e:	f7ff fe4a 	bl	8004326 <LL_ADC_IsEnabled>
 8004692:	4603      	mov	r3, r0
 8004694:	431c      	orrs	r4, r3
 8004696:	481a      	ldr	r0, [pc, #104]	@ (8004700 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004698:	f7ff fe45 	bl	8004326 <LL_ADC_IsEnabled>
 800469c:	4603      	mov	r3, r0
 800469e:	4323      	orrs	r3, r4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	bf0c      	ite	eq
 80046a4:	2301      	moveq	r3, #1
 80046a6:	2300      	movne	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d012      	beq.n	80046d4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80046ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80046b6:	f023 030f 	bic.w	r3, r3, #15
 80046ba:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80046bc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046be:	e009      	b.n	80046d4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c4:	f043 0220 	orr.w	r2, r3, #32
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80046d2:	e000      	b.n	80046d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80046de:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3784      	adds	r7, #132	@ 0x84
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd90      	pop	{r4, r7, pc}
 80046ea:	bf00      	nop
 80046ec:	50000100 	.word	0x50000100
 80046f0:	50000400 	.word	0x50000400
 80046f4:	50000500 	.word	0x50000500
 80046f8:	50000300 	.word	0x50000300
 80046fc:	50000700 	.word	0x50000700
 8004700:	50000600 	.word	0x50000600

08004704 <__NVIC_SetPriorityGrouping>:
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004714:	4b0c      	ldr	r3, [pc, #48]	@ (8004748 <__NVIC_SetPriorityGrouping+0x44>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004720:	4013      	ands	r3, r2
 8004722:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800472c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004736:	4a04      	ldr	r2, [pc, #16]	@ (8004748 <__NVIC_SetPriorityGrouping+0x44>)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	60d3      	str	r3, [r2, #12]
}
 800473c:	bf00      	nop
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	e000ed00 	.word	0xe000ed00

0800474c <__NVIC_GetPriorityGrouping>:
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004750:	4b04      	ldr	r3, [pc, #16]	@ (8004764 <__NVIC_GetPriorityGrouping+0x18>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	0a1b      	lsrs	r3, r3, #8
 8004756:	f003 0307 	and.w	r3, r3, #7
}
 800475a:	4618      	mov	r0, r3
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	e000ed00 	.word	0xe000ed00

08004768 <__NVIC_EnableIRQ>:
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	4603      	mov	r3, r0
 8004770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004776:	2b00      	cmp	r3, #0
 8004778:	db0b      	blt.n	8004792 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800477a:	79fb      	ldrb	r3, [r7, #7]
 800477c:	f003 021f 	and.w	r2, r3, #31
 8004780:	4907      	ldr	r1, [pc, #28]	@ (80047a0 <__NVIC_EnableIRQ+0x38>)
 8004782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004786:	095b      	lsrs	r3, r3, #5
 8004788:	2001      	movs	r0, #1
 800478a:	fa00 f202 	lsl.w	r2, r0, r2
 800478e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	e000e100 	.word	0xe000e100

080047a4 <__NVIC_SetPriority>:
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	4603      	mov	r3, r0
 80047ac:	6039      	str	r1, [r7, #0]
 80047ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	db0a      	blt.n	80047ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	490c      	ldr	r1, [pc, #48]	@ (80047f0 <__NVIC_SetPriority+0x4c>)
 80047be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c2:	0112      	lsls	r2, r2, #4
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	440b      	add	r3, r1
 80047c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80047cc:	e00a      	b.n	80047e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	4908      	ldr	r1, [pc, #32]	@ (80047f4 <__NVIC_SetPriority+0x50>)
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	3b04      	subs	r3, #4
 80047dc:	0112      	lsls	r2, r2, #4
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	440b      	add	r3, r1
 80047e2:	761a      	strb	r2, [r3, #24]
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	e000e100 	.word	0xe000e100
 80047f4:	e000ed00 	.word	0xe000ed00

080047f8 <NVIC_EncodePriority>:
{
 80047f8:	b480      	push	{r7}
 80047fa:	b089      	sub	sp, #36	@ 0x24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	f1c3 0307 	rsb	r3, r3, #7
 8004812:	2b04      	cmp	r3, #4
 8004814:	bf28      	it	cs
 8004816:	2304      	movcs	r3, #4
 8004818:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	3304      	adds	r3, #4
 800481e:	2b06      	cmp	r3, #6
 8004820:	d902      	bls.n	8004828 <NVIC_EncodePriority+0x30>
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	3b03      	subs	r3, #3
 8004826:	e000      	b.n	800482a <NVIC_EncodePriority+0x32>
 8004828:	2300      	movs	r3, #0
 800482a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800482c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	43da      	mvns	r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	401a      	ands	r2, r3
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004840:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	fa01 f303 	lsl.w	r3, r1, r3
 800484a:	43d9      	mvns	r1, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004850:	4313      	orrs	r3, r2
}
 8004852:	4618      	mov	r0, r3
 8004854:	3724      	adds	r7, #36	@ 0x24
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b082      	sub	sp, #8
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff ff4c 	bl	8004704 <__NVIC_SetPriorityGrouping>
}
 800486c:	bf00      	nop
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	4603      	mov	r3, r0
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
 8004880:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004882:	f7ff ff63 	bl	800474c <__NVIC_GetPriorityGrouping>
 8004886:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	68b9      	ldr	r1, [r7, #8]
 800488c:	6978      	ldr	r0, [r7, #20]
 800488e:	f7ff ffb3 	bl	80047f8 <NVIC_EncodePriority>
 8004892:	4602      	mov	r2, r0
 8004894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004898:	4611      	mov	r1, r2
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff ff82 	bl	80047a4 <__NVIC_SetPriority>
}
 80048a0:	bf00      	nop
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff ff56 	bl	8004768 <__NVIC_EnableIRQ>
}
 80048bc:	bf00      	nop
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e08d      	b.n	80049f2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	4b47      	ldr	r3, [pc, #284]	@ (80049fc <HAL_DMA_Init+0x138>)
 80048de:	429a      	cmp	r2, r3
 80048e0:	d80f      	bhi.n	8004902 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	4b45      	ldr	r3, [pc, #276]	@ (8004a00 <HAL_DMA_Init+0x13c>)
 80048ea:	4413      	add	r3, r2
 80048ec:	4a45      	ldr	r2, [pc, #276]	@ (8004a04 <HAL_DMA_Init+0x140>)
 80048ee:	fba2 2303 	umull	r2, r3, r2, r3
 80048f2:	091b      	lsrs	r3, r3, #4
 80048f4:	009a      	lsls	r2, r3, #2
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a42      	ldr	r2, [pc, #264]	@ (8004a08 <HAL_DMA_Init+0x144>)
 80048fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8004900:	e00e      	b.n	8004920 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	4b40      	ldr	r3, [pc, #256]	@ (8004a0c <HAL_DMA_Init+0x148>)
 800490a:	4413      	add	r3, r2
 800490c:	4a3d      	ldr	r2, [pc, #244]	@ (8004a04 <HAL_DMA_Init+0x140>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	091b      	lsrs	r3, r3, #4
 8004914:	009a      	lsls	r2, r3, #2
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a3c      	ldr	r2, [pc, #240]	@ (8004a10 <HAL_DMA_Init+0x14c>)
 800491e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800493a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004944:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004950:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800495c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fa76 	bl	8004e64 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004980:	d102      	bne.n	8004988 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800499c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d010      	beq.n	80049c8 <HAL_DMA_Init+0x104>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d80c      	bhi.n	80049c8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fa96 	bl	8004ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80049c4:	605a      	str	r2, [r3, #4]
 80049c6:	e008      	b.n	80049da <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	40020407 	.word	0x40020407
 8004a00:	bffdfff8 	.word	0xbffdfff8
 8004a04:	cccccccd 	.word	0xcccccccd
 8004a08:	40020000 	.word	0x40020000
 8004a0c:	bffdfbf8 	.word	0xbffdfbf8
 8004a10:	40020400 	.word	0x40020400

08004a14 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
 8004a20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_DMA_Start_IT+0x20>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e066      	b.n	8004b02 <HAL_DMA_Start_IT+0xee>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d155      	bne.n	8004af4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0201 	bic.w	r2, r2, #1
 8004a64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	68b9      	ldr	r1, [r7, #8]
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 f9bb 	bl	8004de8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f042 020e 	orr.w	r2, r2, #14
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	e00f      	b.n	8004aac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0204 	bic.w	r2, r2, #4
 8004a9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 020a 	orr.w	r2, r2, #10
 8004aaa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d007      	beq.n	8004aca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ac4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ac8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d007      	beq.n	8004ae2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004adc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ae0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	e005      	b.n	8004b00 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004afc:	2302      	movs	r3, #2
 8004afe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b085      	sub	sp, #20
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d005      	beq.n	8004b2e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2204      	movs	r2, #4
 8004b26:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	73fb      	strb	r3, [r7, #15]
 8004b2c:	e037      	b.n	8004b9e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 020e 	bic.w	r2, r2, #14
 8004b3c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b4c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0201 	bic.w	r2, r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b62:	f003 021f 	and.w	r2, r3, #31
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b70:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b7a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00c      	beq.n	8004b9e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b92:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b9c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d00d      	beq.n	8004bf0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2204      	movs	r2, #4
 8004bd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	73fb      	strb	r3, [r7, #15]
 8004bee:	e047      	b.n	8004c80 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 020e 	bic.w	r2, r2, #14
 8004bfe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0201 	bic.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c1a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c1e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c24:	f003 021f 	and.w	r2, r3, #31
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c32:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c3c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00c      	beq.n	8004c60 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c54:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004c5e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	4798      	blx	r3
    }
  }
  return status;
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca6:	f003 031f 	and.w	r3, r3, #31
 8004caa:	2204      	movs	r2, #4
 8004cac:	409a      	lsls	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d026      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x7a>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d021      	beq.n	8004d04 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0320 	and.w	r3, r3, #32
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d107      	bne.n	8004cde <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0204 	bic.w	r2, r2, #4
 8004cdc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce2:	f003 021f 	and.w	r2, r3, #31
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cea:	2104      	movs	r1, #4
 8004cec:	fa01 f202 	lsl.w	r2, r1, r2
 8004cf0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d071      	beq.n	8004dde <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004d02:	e06c      	b.n	8004dde <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d08:	f003 031f 	and.w	r3, r3, #31
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	409a      	lsls	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4013      	ands	r3, r2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d02e      	beq.n	8004d76 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d029      	beq.n	8004d76 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0320 	and.w	r3, r3, #32
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10b      	bne.n	8004d48 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 020a 	bic.w	r2, r2, #10
 8004d3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4c:	f003 021f 	and.w	r2, r3, #31
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	2102      	movs	r1, #2
 8004d56:	fa01 f202 	lsl.w	r2, r1, r2
 8004d5a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d038      	beq.n	8004dde <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004d74:	e033      	b.n	8004dde <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d7a:	f003 031f 	and.w	r3, r3, #31
 8004d7e:	2208      	movs	r2, #8
 8004d80:	409a      	lsls	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4013      	ands	r3, r2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d02a      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d025      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 020e 	bic.w	r2, r2, #14
 8004da2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da8:	f003 021f 	and.w	r2, r3, #31
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db0:	2101      	movs	r1, #1
 8004db2:	fa01 f202 	lsl.w	r2, r1, r2
 8004db6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d004      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004dde:	bf00      	nop
 8004de0:	bf00      	nop
}
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004dfe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d004      	beq.n	8004e12 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e10:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e16:	f003 021f 	and.w	r2, r3, #31
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1e:	2101      	movs	r1, #1
 8004e20:	fa01 f202 	lsl.w	r2, r1, r2
 8004e24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b10      	cmp	r3, #16
 8004e34:	d108      	bne.n	8004e48 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004e46:	e007      	b.n	8004e58 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	60da      	str	r2, [r3, #12]
}
 8004e58:	bf00      	nop
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	461a      	mov	r2, r3
 8004e72:	4b16      	ldr	r3, [pc, #88]	@ (8004ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d802      	bhi.n	8004e7e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004e78:	4b15      	ldr	r3, [pc, #84]	@ (8004ed0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	e001      	b.n	8004e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004e7e:	4b15      	ldr	r3, [pc, #84]	@ (8004ed4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004e80:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	3b08      	subs	r3, #8
 8004e8e:	4a12      	ldr	r2, [pc, #72]	@ (8004ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004e90:	fba2 2303 	umull	r2, r3, r2, r3
 8004e94:	091b      	lsrs	r3, r3, #4
 8004e96:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9c:	089b      	lsrs	r3, r3, #2
 8004e9e:	009a      	lsls	r2, r3, #2
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a0b      	ldr	r2, [pc, #44]	@ (8004edc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004eae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f003 031f 	and.w	r3, r3, #31
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	409a      	lsls	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004ebe:	bf00      	nop
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40020407 	.word	0x40020407
 8004ed0:	40020800 	.word	0x40020800
 8004ed4:	40020820 	.word	0x40020820
 8004ed8:	cccccccd 	.word	0xcccccccd
 8004edc:	40020880 	.word	0x40020880

08004ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8004f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	461a      	mov	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a08      	ldr	r2, [pc, #32]	@ (8004f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004f02:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	f003 031f 	and.w	r3, r3, #31
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	409a      	lsls	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004f14:	bf00      	nop
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	1000823f 	.word	0x1000823f
 8004f24:	40020940 	.word	0x40020940

08004f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f36:	e15a      	b.n	80051ee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	fa01 f303 	lsl.w	r3, r1, r3
 8004f44:	4013      	ands	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 814c 	beq.w	80051e8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f003 0303 	and.w	r3, r3, #3
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d005      	beq.n	8004f68 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d130      	bne.n	8004fca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	2203      	movs	r2, #3
 8004f74:	fa02 f303 	lsl.w	r3, r2, r3
 8004f78:	43db      	mvns	r3, r3
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4013      	ands	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	091b      	lsrs	r3, r3, #4
 8004fb4:	f003 0201 	and.w	r2, r3, #1
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d017      	beq.n	8005006 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	2203      	movs	r2, #3
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4013      	ands	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f003 0303 	and.w	r3, r3, #3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d123      	bne.n	800505a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	08da      	lsrs	r2, r3, #3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3208      	adds	r2, #8
 800501a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800501e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	220f      	movs	r2, #15
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	43db      	mvns	r3, r3
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4013      	ands	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	691a      	ldr	r2, [r3, #16]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	fa02 f303 	lsl.w	r3, r2, r3
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	08da      	lsrs	r2, r3, #3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3208      	adds	r2, #8
 8005054:	6939      	ldr	r1, [r7, #16]
 8005056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	2203      	movs	r2, #3
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	43db      	mvns	r3, r3
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4013      	ands	r3, r2
 8005070:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f003 0203 	and.w	r2, r3, #3
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	4313      	orrs	r3, r2
 8005086:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 80a6 	beq.w	80051e8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800509c:	4b5b      	ldr	r3, [pc, #364]	@ (800520c <HAL_GPIO_Init+0x2e4>)
 800509e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050a0:	4a5a      	ldr	r2, [pc, #360]	@ (800520c <HAL_GPIO_Init+0x2e4>)
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	6613      	str	r3, [r2, #96]	@ 0x60
 80050a8:	4b58      	ldr	r3, [pc, #352]	@ (800520c <HAL_GPIO_Init+0x2e4>)
 80050aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	60bb      	str	r3, [r7, #8]
 80050b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050b4:	4a56      	ldr	r2, [pc, #344]	@ (8005210 <HAL_GPIO_Init+0x2e8>)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	089b      	lsrs	r3, r3, #2
 80050ba:	3302      	adds	r3, #2
 80050bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f003 0303 	and.w	r3, r3, #3
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	220f      	movs	r2, #15
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	43db      	mvns	r3, r3
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4013      	ands	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80050de:	d01f      	beq.n	8005120 <HAL_GPIO_Init+0x1f8>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a4c      	ldr	r2, [pc, #304]	@ (8005214 <HAL_GPIO_Init+0x2ec>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d019      	beq.n	800511c <HAL_GPIO_Init+0x1f4>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a4b      	ldr	r2, [pc, #300]	@ (8005218 <HAL_GPIO_Init+0x2f0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <HAL_GPIO_Init+0x1f0>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a4a      	ldr	r2, [pc, #296]	@ (800521c <HAL_GPIO_Init+0x2f4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d00d      	beq.n	8005114 <HAL_GPIO_Init+0x1ec>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a49      	ldr	r2, [pc, #292]	@ (8005220 <HAL_GPIO_Init+0x2f8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d007      	beq.n	8005110 <HAL_GPIO_Init+0x1e8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a48      	ldr	r2, [pc, #288]	@ (8005224 <HAL_GPIO_Init+0x2fc>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d101      	bne.n	800510c <HAL_GPIO_Init+0x1e4>
 8005108:	2305      	movs	r3, #5
 800510a:	e00a      	b.n	8005122 <HAL_GPIO_Init+0x1fa>
 800510c:	2306      	movs	r3, #6
 800510e:	e008      	b.n	8005122 <HAL_GPIO_Init+0x1fa>
 8005110:	2304      	movs	r3, #4
 8005112:	e006      	b.n	8005122 <HAL_GPIO_Init+0x1fa>
 8005114:	2303      	movs	r3, #3
 8005116:	e004      	b.n	8005122 <HAL_GPIO_Init+0x1fa>
 8005118:	2302      	movs	r3, #2
 800511a:	e002      	b.n	8005122 <HAL_GPIO_Init+0x1fa>
 800511c:	2301      	movs	r3, #1
 800511e:	e000      	b.n	8005122 <HAL_GPIO_Init+0x1fa>
 8005120:	2300      	movs	r3, #0
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	f002 0203 	and.w	r2, r2, #3
 8005128:	0092      	lsls	r2, r2, #2
 800512a:	4093      	lsls	r3, r2
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005132:	4937      	ldr	r1, [pc, #220]	@ (8005210 <HAL_GPIO_Init+0x2e8>)
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	089b      	lsrs	r3, r3, #2
 8005138:	3302      	adds	r3, #2
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005140:	4b39      	ldr	r3, [pc, #228]	@ (8005228 <HAL_GPIO_Init+0x300>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	43db      	mvns	r3, r3
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4013      	ands	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4313      	orrs	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005164:	4a30      	ldr	r2, [pc, #192]	@ (8005228 <HAL_GPIO_Init+0x300>)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800516a:	4b2f      	ldr	r3, [pc, #188]	@ (8005228 <HAL_GPIO_Init+0x300>)
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	43db      	mvns	r3, r3
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4013      	ands	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800518e:	4a26      	ldr	r2, [pc, #152]	@ (8005228 <HAL_GPIO_Init+0x300>)
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005194:	4b24      	ldr	r3, [pc, #144]	@ (8005228 <HAL_GPIO_Init+0x300>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	43db      	mvns	r3, r3
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4013      	ands	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80051b8:	4a1b      	ldr	r2, [pc, #108]	@ (8005228 <HAL_GPIO_Init+0x300>)
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80051be:	4b1a      	ldr	r3, [pc, #104]	@ (8005228 <HAL_GPIO_Init+0x300>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	43db      	mvns	r3, r3
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4013      	ands	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80051e2:	4a11      	ldr	r2, [pc, #68]	@ (8005228 <HAL_GPIO_Init+0x300>)
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	3301      	adds	r3, #1
 80051ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	fa22 f303 	lsr.w	r3, r2, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f47f ae9d 	bne.w	8004f38 <HAL_GPIO_Init+0x10>
  }
}
 80051fe:	bf00      	nop
 8005200:	bf00      	nop
 8005202:	371c      	adds	r7, #28
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	40021000 	.word	0x40021000
 8005210:	40010000 	.word	0x40010000
 8005214:	48000400 	.word	0x48000400
 8005218:	48000800 	.word	0x48000800
 800521c:	48000c00 	.word	0x48000c00
 8005220:	48001000 	.word	0x48001000
 8005224:	48001400 	.word	0x48001400
 8005228:	40010400 	.word	0x40010400

0800522c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	460b      	mov	r3, r1
 8005236:	807b      	strh	r3, [r7, #2]
 8005238:	4613      	mov	r3, r2
 800523a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800523c:	787b      	ldrb	r3, [r7, #1]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005242:	887a      	ldrh	r2, [r7, #2]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005248:	e002      	b.n	8005250 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800524a:	887a      	ldrh	r2, [r7, #2]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	4603      	mov	r3, r0
 8005264:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005266:	4b08      	ldr	r3, [pc, #32]	@ (8005288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005268:	695a      	ldr	r2, [r3, #20]
 800526a:	88fb      	ldrh	r3, [r7, #6]
 800526c:	4013      	ands	r3, r2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d006      	beq.n	8005280 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005272:	4a05      	ldr	r2, [pc, #20]	@ (8005288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005274:	88fb      	ldrh	r3, [r7, #6]
 8005276:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005278:	88fb      	ldrh	r3, [r7, #6]
 800527a:	4618      	mov	r0, r3
 800527c:	f000 f806 	bl	800528c <HAL_GPIO_EXTI_Callback>
  }
}
 8005280:	bf00      	nop
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40010400 	.word	0x40010400

0800528c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
	...

080052a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d141      	bne.n	8005336 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052b2:	4b4b      	ldr	r3, [pc, #300]	@ (80053e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80052ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052be:	d131      	bne.n	8005324 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052c0:	4b47      	ldr	r3, [pc, #284]	@ (80053e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052c6:	4a46      	ldr	r2, [pc, #280]	@ (80053e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052d0:	4b43      	ldr	r3, [pc, #268]	@ (80053e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80052d8:	4a41      	ldr	r2, [pc, #260]	@ (80053e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80052de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052e0:	4b40      	ldr	r3, [pc, #256]	@ (80053e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2232      	movs	r2, #50	@ 0x32
 80052e6:	fb02 f303 	mul.w	r3, r2, r3
 80052ea:	4a3f      	ldr	r2, [pc, #252]	@ (80053e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052ec:	fba2 2303 	umull	r2, r3, r2, r3
 80052f0:	0c9b      	lsrs	r3, r3, #18
 80052f2:	3301      	adds	r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052f6:	e002      	b.n	80052fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052fe:	4b38      	ldr	r3, [pc, #224]	@ (80053e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800530a:	d102      	bne.n	8005312 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f2      	bne.n	80052f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005312:	4b33      	ldr	r3, [pc, #204]	@ (80053e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800531a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800531e:	d158      	bne.n	80053d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e057      	b.n	80053d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005324:	4b2e      	ldr	r3, [pc, #184]	@ (80053e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800532a:	4a2d      	ldr	r2, [pc, #180]	@ (80053e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800532c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005330:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005334:	e04d      	b.n	80053d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800533c:	d141      	bne.n	80053c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800533e:	4b28      	ldr	r3, [pc, #160]	@ (80053e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800534a:	d131      	bne.n	80053b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800534c:	4b24      	ldr	r3, [pc, #144]	@ (80053e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800534e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005352:	4a23      	ldr	r2, [pc, #140]	@ (80053e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005358:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800535c:	4b20      	ldr	r3, [pc, #128]	@ (80053e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005364:	4a1e      	ldr	r2, [pc, #120]	@ (80053e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005366:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800536a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800536c:	4b1d      	ldr	r3, [pc, #116]	@ (80053e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2232      	movs	r2, #50	@ 0x32
 8005372:	fb02 f303 	mul.w	r3, r2, r3
 8005376:	4a1c      	ldr	r2, [pc, #112]	@ (80053e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005378:	fba2 2303 	umull	r2, r3, r2, r3
 800537c:	0c9b      	lsrs	r3, r3, #18
 800537e:	3301      	adds	r3, #1
 8005380:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005382:	e002      	b.n	800538a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	3b01      	subs	r3, #1
 8005388:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800538a:	4b15      	ldr	r3, [pc, #84]	@ (80053e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005396:	d102      	bne.n	800539e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1f2      	bne.n	8005384 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800539e:	4b10      	ldr	r3, [pc, #64]	@ (80053e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053aa:	d112      	bne.n	80053d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e011      	b.n	80053d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053b0:	4b0b      	ldr	r3, [pc, #44]	@ (80053e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053b6:	4a0a      	ldr	r2, [pc, #40]	@ (80053e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80053c0:	e007      	b.n	80053d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80053c2:	4b07      	ldr	r3, [pc, #28]	@ (80053e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80053ca:	4a05      	ldr	r2, [pc, #20]	@ (80053e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80053d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	40007000 	.word	0x40007000
 80053e4:	20000000 	.word	0x20000000
 80053e8:	431bde83 	.word	0x431bde83

080053ec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80053f0:	4b05      	ldr	r3, [pc, #20]	@ (8005408 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	4a04      	ldr	r2, [pc, #16]	@ (8005408 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80053f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053fa:	6093      	str	r3, [r2, #8]
}
 80053fc:	bf00      	nop
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40007000 	.word	0x40007000

0800540c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e306      	b.n	8005a2c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d075      	beq.n	8005516 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800542a:	4b97      	ldr	r3, [pc, #604]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 030c 	and.w	r3, r3, #12
 8005432:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005434:	4b94      	ldr	r3, [pc, #592]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	2b0c      	cmp	r3, #12
 8005442:	d102      	bne.n	800544a <HAL_RCC_OscConfig+0x3e>
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	2b03      	cmp	r3, #3
 8005448:	d002      	beq.n	8005450 <HAL_RCC_OscConfig+0x44>
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	2b08      	cmp	r3, #8
 800544e:	d10b      	bne.n	8005468 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005450:	4b8d      	ldr	r3, [pc, #564]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d05b      	beq.n	8005514 <HAL_RCC_OscConfig+0x108>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d157      	bne.n	8005514 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e2e1      	b.n	8005a2c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005470:	d106      	bne.n	8005480 <HAL_RCC_OscConfig+0x74>
 8005472:	4b85      	ldr	r3, [pc, #532]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a84      	ldr	r2, [pc, #528]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 8005478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	e01d      	b.n	80054bc <HAL_RCC_OscConfig+0xb0>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005488:	d10c      	bne.n	80054a4 <HAL_RCC_OscConfig+0x98>
 800548a:	4b7f      	ldr	r3, [pc, #508]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a7e      	ldr	r2, [pc, #504]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 8005490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	4b7c      	ldr	r3, [pc, #496]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a7b      	ldr	r2, [pc, #492]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 800549c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	e00b      	b.n	80054bc <HAL_RCC_OscConfig+0xb0>
 80054a4:	4b78      	ldr	r3, [pc, #480]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a77      	ldr	r2, [pc, #476]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 80054aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	4b75      	ldr	r3, [pc, #468]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a74      	ldr	r2, [pc, #464]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 80054b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d013      	beq.n	80054ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c4:	f7fd fa10 	bl	80028e8 <HAL_GetTick>
 80054c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054cc:	f7fd fa0c 	bl	80028e8 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b64      	cmp	r3, #100	@ 0x64
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e2a6      	b.n	8005a2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054de:	4b6a      	ldr	r3, [pc, #424]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0f0      	beq.n	80054cc <HAL_RCC_OscConfig+0xc0>
 80054ea:	e014      	b.n	8005516 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ec:	f7fd f9fc 	bl	80028e8 <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054f2:	e008      	b.n	8005506 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054f4:	f7fd f9f8 	bl	80028e8 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b64      	cmp	r3, #100	@ 0x64
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e292      	b.n	8005a2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005506:	4b60      	ldr	r3, [pc, #384]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1f0      	bne.n	80054f4 <HAL_RCC_OscConfig+0xe8>
 8005512:	e000      	b.n	8005516 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d075      	beq.n	800560e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005522:	4b59      	ldr	r3, [pc, #356]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 030c 	and.w	r3, r3, #12
 800552a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800552c:	4b56      	ldr	r3, [pc, #344]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f003 0303 	and.w	r3, r3, #3
 8005534:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	2b0c      	cmp	r3, #12
 800553a:	d102      	bne.n	8005542 <HAL_RCC_OscConfig+0x136>
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	2b02      	cmp	r3, #2
 8005540:	d002      	beq.n	8005548 <HAL_RCC_OscConfig+0x13c>
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	2b04      	cmp	r3, #4
 8005546:	d11f      	bne.n	8005588 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005548:	4b4f      	ldr	r3, [pc, #316]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005550:	2b00      	cmp	r3, #0
 8005552:	d005      	beq.n	8005560 <HAL_RCC_OscConfig+0x154>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e265      	b.n	8005a2c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005560:	4b49      	ldr	r3, [pc, #292]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	061b      	lsls	r3, r3, #24
 800556e:	4946      	ldr	r1, [pc, #280]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 8005570:	4313      	orrs	r3, r2
 8005572:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005574:	4b45      	ldr	r3, [pc, #276]	@ (800568c <HAL_RCC_OscConfig+0x280>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	f7fc fa71 	bl	8001a60 <HAL_InitTick>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d043      	beq.n	800560c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e251      	b.n	8005a2c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d023      	beq.n	80055d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005590:	4b3d      	ldr	r3, [pc, #244]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a3c      	ldr	r2, [pc, #240]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 8005596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800559a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559c:	f7fd f9a4 	bl	80028e8 <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055a2:	e008      	b.n	80055b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055a4:	f7fd f9a0 	bl	80028e8 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e23a      	b.n	8005a2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055b6:	4b34      	ldr	r3, [pc, #208]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0f0      	beq.n	80055a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055c2:	4b31      	ldr	r3, [pc, #196]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	061b      	lsls	r3, r3, #24
 80055d0:	492d      	ldr	r1, [pc, #180]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	604b      	str	r3, [r1, #4]
 80055d6:	e01a      	b.n	800560e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055d8:	4b2b      	ldr	r3, [pc, #172]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a2a      	ldr	r2, [pc, #168]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 80055de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e4:	f7fd f980 	bl	80028e8 <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ec:	f7fd f97c 	bl	80028e8 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e216      	b.n	8005a2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055fe:	4b22      	ldr	r3, [pc, #136]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1f0      	bne.n	80055ec <HAL_RCC_OscConfig+0x1e0>
 800560a:	e000      	b.n	800560e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800560c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0308 	and.w	r3, r3, #8
 8005616:	2b00      	cmp	r3, #0
 8005618:	d041      	beq.n	800569e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d01c      	beq.n	800565c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005622:	4b19      	ldr	r3, [pc, #100]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 8005624:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005628:	4a17      	ldr	r2, [pc, #92]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 800562a:	f043 0301 	orr.w	r3, r3, #1
 800562e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005632:	f7fd f959 	bl	80028e8 <HAL_GetTick>
 8005636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005638:	e008      	b.n	800564c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800563a:	f7fd f955 	bl	80028e8 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e1ef      	b.n	8005a2c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800564c:	4b0e      	ldr	r3, [pc, #56]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 800564e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0ef      	beq.n	800563a <HAL_RCC_OscConfig+0x22e>
 800565a:	e020      	b.n	800569e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800565c:	4b0a      	ldr	r3, [pc, #40]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 800565e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005662:	4a09      	ldr	r2, [pc, #36]	@ (8005688 <HAL_RCC_OscConfig+0x27c>)
 8005664:	f023 0301 	bic.w	r3, r3, #1
 8005668:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800566c:	f7fd f93c 	bl	80028e8 <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005672:	e00d      	b.n	8005690 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005674:	f7fd f938 	bl	80028e8 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d906      	bls.n	8005690 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e1d2      	b.n	8005a2c <HAL_RCC_OscConfig+0x620>
 8005686:	bf00      	nop
 8005688:	40021000 	.word	0x40021000
 800568c:	200001d8 	.word	0x200001d8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005690:	4b8c      	ldr	r3, [pc, #560]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 8005692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1ea      	bne.n	8005674 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 80a6 	beq.w	80057f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056ac:	2300      	movs	r3, #0
 80056ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056b0:	4b84      	ldr	r3, [pc, #528]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 80056b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_RCC_OscConfig+0x2b4>
 80056bc:	2301      	movs	r3, #1
 80056be:	e000      	b.n	80056c2 <HAL_RCC_OscConfig+0x2b6>
 80056c0:	2300      	movs	r3, #0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00d      	beq.n	80056e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056c6:	4b7f      	ldr	r3, [pc, #508]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 80056c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ca:	4a7e      	ldr	r2, [pc, #504]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 80056cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80056d2:	4b7c      	ldr	r3, [pc, #496]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 80056d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80056de:	2301      	movs	r3, #1
 80056e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056e2:	4b79      	ldr	r3, [pc, #484]	@ (80058c8 <HAL_RCC_OscConfig+0x4bc>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d118      	bne.n	8005720 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056ee:	4b76      	ldr	r3, [pc, #472]	@ (80058c8 <HAL_RCC_OscConfig+0x4bc>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a75      	ldr	r2, [pc, #468]	@ (80058c8 <HAL_RCC_OscConfig+0x4bc>)
 80056f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056fa:	f7fd f8f5 	bl	80028e8 <HAL_GetTick>
 80056fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005702:	f7fd f8f1 	bl	80028e8 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e18b      	b.n	8005a2c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005714:	4b6c      	ldr	r3, [pc, #432]	@ (80058c8 <HAL_RCC_OscConfig+0x4bc>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800571c:	2b00      	cmp	r3, #0
 800571e:	d0f0      	beq.n	8005702 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d108      	bne.n	800573a <HAL_RCC_OscConfig+0x32e>
 8005728:	4b66      	ldr	r3, [pc, #408]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 800572a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800572e:	4a65      	ldr	r2, [pc, #404]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 8005730:	f043 0301 	orr.w	r3, r3, #1
 8005734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005738:	e024      	b.n	8005784 <HAL_RCC_OscConfig+0x378>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	2b05      	cmp	r3, #5
 8005740:	d110      	bne.n	8005764 <HAL_RCC_OscConfig+0x358>
 8005742:	4b60      	ldr	r3, [pc, #384]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 8005744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005748:	4a5e      	ldr	r2, [pc, #376]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 800574a:	f043 0304 	orr.w	r3, r3, #4
 800574e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005752:	4b5c      	ldr	r3, [pc, #368]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 8005754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005758:	4a5a      	ldr	r2, [pc, #360]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 800575a:	f043 0301 	orr.w	r3, r3, #1
 800575e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005762:	e00f      	b.n	8005784 <HAL_RCC_OscConfig+0x378>
 8005764:	4b57      	ldr	r3, [pc, #348]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 8005766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800576a:	4a56      	ldr	r2, [pc, #344]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 800576c:	f023 0301 	bic.w	r3, r3, #1
 8005770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005774:	4b53      	ldr	r3, [pc, #332]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 8005776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800577a:	4a52      	ldr	r2, [pc, #328]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 800577c:	f023 0304 	bic.w	r3, r3, #4
 8005780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d016      	beq.n	80057ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800578c:	f7fd f8ac 	bl	80028e8 <HAL_GetTick>
 8005790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005792:	e00a      	b.n	80057aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005794:	f7fd f8a8 	bl	80028e8 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e140      	b.n	8005a2c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057aa:	4b46      	ldr	r3, [pc, #280]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 80057ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0ed      	beq.n	8005794 <HAL_RCC_OscConfig+0x388>
 80057b8:	e015      	b.n	80057e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ba:	f7fd f895 	bl	80028e8 <HAL_GetTick>
 80057be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057c0:	e00a      	b.n	80057d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c2:	f7fd f891 	bl	80028e8 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d901      	bls.n	80057d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e129      	b.n	8005a2c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057d8:	4b3a      	ldr	r3, [pc, #232]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 80057da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1ed      	bne.n	80057c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057e6:	7ffb      	ldrb	r3, [r7, #31]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d105      	bne.n	80057f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057ec:	4b35      	ldr	r3, [pc, #212]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 80057ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f0:	4a34      	ldr	r2, [pc, #208]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 80057f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0320 	and.w	r3, r3, #32
 8005800:	2b00      	cmp	r3, #0
 8005802:	d03c      	beq.n	800587e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d01c      	beq.n	8005846 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800580c:	4b2d      	ldr	r3, [pc, #180]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 800580e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005812:	4a2c      	ldr	r2, [pc, #176]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 8005814:	f043 0301 	orr.w	r3, r3, #1
 8005818:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800581c:	f7fd f864 	bl	80028e8 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005824:	f7fd f860 	bl	80028e8 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e0fa      	b.n	8005a2c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005836:	4b23      	ldr	r3, [pc, #140]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 8005838:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0ef      	beq.n	8005824 <HAL_RCC_OscConfig+0x418>
 8005844:	e01b      	b.n	800587e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005846:	4b1f      	ldr	r3, [pc, #124]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 8005848:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800584c:	4a1d      	ldr	r2, [pc, #116]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 800584e:	f023 0301 	bic.w	r3, r3, #1
 8005852:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005856:	f7fd f847 	bl	80028e8 <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800585e:	f7fd f843 	bl	80028e8 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e0dd      	b.n	8005a2c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005870:	4b14      	ldr	r3, [pc, #80]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 8005872:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1ef      	bne.n	800585e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 80d1 	beq.w	8005a2a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005888:	4b0e      	ldr	r3, [pc, #56]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f003 030c 	and.w	r3, r3, #12
 8005890:	2b0c      	cmp	r3, #12
 8005892:	f000 808b 	beq.w	80059ac <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d15e      	bne.n	800595c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800589e:	4b09      	ldr	r3, [pc, #36]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a08      	ldr	r2, [pc, #32]	@ (80058c4 <HAL_RCC_OscConfig+0x4b8>)
 80058a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058aa:	f7fd f81d 	bl	80028e8 <HAL_GetTick>
 80058ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058b0:	e00c      	b.n	80058cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058b2:	f7fd f819 	bl	80028e8 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d905      	bls.n	80058cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e0b3      	b.n	8005a2c <HAL_RCC_OscConfig+0x620>
 80058c4:	40021000 	.word	0x40021000
 80058c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058cc:	4b59      	ldr	r3, [pc, #356]	@ (8005a34 <HAL_RCC_OscConfig+0x628>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1ec      	bne.n	80058b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058d8:	4b56      	ldr	r3, [pc, #344]	@ (8005a34 <HAL_RCC_OscConfig+0x628>)
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	4b56      	ldr	r3, [pc, #344]	@ (8005a38 <HAL_RCC_OscConfig+0x62c>)
 80058de:	4013      	ands	r3, r2
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6a11      	ldr	r1, [r2, #32]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058e8:	3a01      	subs	r2, #1
 80058ea:	0112      	lsls	r2, r2, #4
 80058ec:	4311      	orrs	r1, r2
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80058f2:	0212      	lsls	r2, r2, #8
 80058f4:	4311      	orrs	r1, r2
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80058fa:	0852      	lsrs	r2, r2, #1
 80058fc:	3a01      	subs	r2, #1
 80058fe:	0552      	lsls	r2, r2, #21
 8005900:	4311      	orrs	r1, r2
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005906:	0852      	lsrs	r2, r2, #1
 8005908:	3a01      	subs	r2, #1
 800590a:	0652      	lsls	r2, r2, #25
 800590c:	4311      	orrs	r1, r2
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005912:	06d2      	lsls	r2, r2, #27
 8005914:	430a      	orrs	r2, r1
 8005916:	4947      	ldr	r1, [pc, #284]	@ (8005a34 <HAL_RCC_OscConfig+0x628>)
 8005918:	4313      	orrs	r3, r2
 800591a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800591c:	4b45      	ldr	r3, [pc, #276]	@ (8005a34 <HAL_RCC_OscConfig+0x628>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a44      	ldr	r2, [pc, #272]	@ (8005a34 <HAL_RCC_OscConfig+0x628>)
 8005922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005926:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005928:	4b42      	ldr	r3, [pc, #264]	@ (8005a34 <HAL_RCC_OscConfig+0x628>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	4a41      	ldr	r2, [pc, #260]	@ (8005a34 <HAL_RCC_OscConfig+0x628>)
 800592e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005932:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005934:	f7fc ffd8 	bl	80028e8 <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800593c:	f7fc ffd4 	bl	80028e8 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e06e      	b.n	8005a2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800594e:	4b39      	ldr	r3, [pc, #228]	@ (8005a34 <HAL_RCC_OscConfig+0x628>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0f0      	beq.n	800593c <HAL_RCC_OscConfig+0x530>
 800595a:	e066      	b.n	8005a2a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800595c:	4b35      	ldr	r3, [pc, #212]	@ (8005a34 <HAL_RCC_OscConfig+0x628>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a34      	ldr	r2, [pc, #208]	@ (8005a34 <HAL_RCC_OscConfig+0x628>)
 8005962:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005966:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005968:	4b32      	ldr	r3, [pc, #200]	@ (8005a34 <HAL_RCC_OscConfig+0x628>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	4a31      	ldr	r2, [pc, #196]	@ (8005a34 <HAL_RCC_OscConfig+0x628>)
 800596e:	f023 0303 	bic.w	r3, r3, #3
 8005972:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005974:	4b2f      	ldr	r3, [pc, #188]	@ (8005a34 <HAL_RCC_OscConfig+0x628>)
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	4a2e      	ldr	r2, [pc, #184]	@ (8005a34 <HAL_RCC_OscConfig+0x628>)
 800597a:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800597e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005982:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005984:	f7fc ffb0 	bl	80028e8 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800598c:	f7fc ffac 	bl	80028e8 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e046      	b.n	8005a2c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800599e:	4b25      	ldr	r3, [pc, #148]	@ (8005a34 <HAL_RCC_OscConfig+0x628>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1f0      	bne.n	800598c <HAL_RCC_OscConfig+0x580>
 80059aa:	e03e      	b.n	8005a2a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e039      	b.n	8005a2c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80059b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005a34 <HAL_RCC_OscConfig+0x628>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f003 0203 	and.w	r2, r3, #3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d12c      	bne.n	8005a26 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d6:	3b01      	subs	r3, #1
 80059d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059da:	429a      	cmp	r2, r3
 80059dc:	d123      	bne.n	8005a26 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d11b      	bne.n	8005a26 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d113      	bne.n	8005a26 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a08:	085b      	lsrs	r3, r3, #1
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d109      	bne.n	8005a26 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a1c:	085b      	lsrs	r3, r3, #1
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d001      	beq.n	8005a2a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3720      	adds	r7, #32
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40021000 	.word	0x40021000
 8005a38:	019f800c 	.word	0x019f800c

08005a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005a46:	2300      	movs	r3, #0
 8005a48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e11e      	b.n	8005c92 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a54:	4b91      	ldr	r3, [pc, #580]	@ (8005c9c <HAL_RCC_ClockConfig+0x260>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 030f 	and.w	r3, r3, #15
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d910      	bls.n	8005a84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a62:	4b8e      	ldr	r3, [pc, #568]	@ (8005c9c <HAL_RCC_ClockConfig+0x260>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f023 020f 	bic.w	r2, r3, #15
 8005a6a:	498c      	ldr	r1, [pc, #560]	@ (8005c9c <HAL_RCC_ClockConfig+0x260>)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a72:	4b8a      	ldr	r3, [pc, #552]	@ (8005c9c <HAL_RCC_ClockConfig+0x260>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 030f 	and.w	r3, r3, #15
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d001      	beq.n	8005a84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e106      	b.n	8005c92 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d073      	beq.n	8005b78 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	2b03      	cmp	r3, #3
 8005a96:	d129      	bne.n	8005aec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a98:	4b81      	ldr	r3, [pc, #516]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e0f4      	b.n	8005c92 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005aa8:	f000 f9d0 	bl	8005e4c <RCC_GetSysClockFreqFromPLLSource>
 8005aac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	4a7c      	ldr	r2, [pc, #496]	@ (8005ca4 <HAL_RCC_ClockConfig+0x268>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d93f      	bls.n	8005b36 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005ab6:	4b7a      	ldr	r3, [pc, #488]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d009      	beq.n	8005ad6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d033      	beq.n	8005b36 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d12f      	bne.n	8005b36 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ad6:	4b72      	ldr	r3, [pc, #456]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ade:	4a70      	ldr	r2, [pc, #448]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ae4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005ae6:	2380      	movs	r3, #128	@ 0x80
 8005ae8:	617b      	str	r3, [r7, #20]
 8005aea:	e024      	b.n	8005b36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d107      	bne.n	8005b04 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005af4:	4b6a      	ldr	r3, [pc, #424]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d109      	bne.n	8005b14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e0c6      	b.n	8005c92 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b04:	4b66      	ldr	r3, [pc, #408]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e0be      	b.n	8005c92 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005b14:	f000 f8ce 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8005b18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	4a61      	ldr	r2, [pc, #388]	@ (8005ca4 <HAL_RCC_ClockConfig+0x268>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d909      	bls.n	8005b36 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b22:	4b5f      	ldr	r3, [pc, #380]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b2a:	4a5d      	ldr	r2, [pc, #372]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005b32:	2380      	movs	r3, #128	@ 0x80
 8005b34:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b36:	4b5a      	ldr	r3, [pc, #360]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f023 0203 	bic.w	r2, r3, #3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	4957      	ldr	r1, [pc, #348]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b48:	f7fc fece 	bl	80028e8 <HAL_GetTick>
 8005b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b4e:	e00a      	b.n	8005b66 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b50:	f7fc feca 	bl	80028e8 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e095      	b.n	8005c92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b66:	4b4e      	ldr	r3, [pc, #312]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 020c 	and.w	r2, r3, #12
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d1eb      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d023      	beq.n	8005bcc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d005      	beq.n	8005b9c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b90:	4b43      	ldr	r3, [pc, #268]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	4a42      	ldr	r2, [pc, #264]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005b96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b9a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d007      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005ba8:	4b3d      	ldr	r3, [pc, #244]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005bb0:	4a3b      	ldr	r2, [pc, #236]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005bb2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005bb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bb8:	4b39      	ldr	r3, [pc, #228]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	4936      	ldr	r1, [pc, #216]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	608b      	str	r3, [r1, #8]
 8005bca:	e008      	b.n	8005bde <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	2b80      	cmp	r3, #128	@ 0x80
 8005bd0:	d105      	bne.n	8005bde <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005bd2:	4b33      	ldr	r3, [pc, #204]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	4a32      	ldr	r2, [pc, #200]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005bd8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bdc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bde:	4b2f      	ldr	r3, [pc, #188]	@ (8005c9c <HAL_RCC_ClockConfig+0x260>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 030f 	and.w	r3, r3, #15
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d21d      	bcs.n	8005c28 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bec:	4b2b      	ldr	r3, [pc, #172]	@ (8005c9c <HAL_RCC_ClockConfig+0x260>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f023 020f 	bic.w	r2, r3, #15
 8005bf4:	4929      	ldr	r1, [pc, #164]	@ (8005c9c <HAL_RCC_ClockConfig+0x260>)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005bfc:	f7fc fe74 	bl	80028e8 <HAL_GetTick>
 8005c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c02:	e00a      	b.n	8005c1a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c04:	f7fc fe70 	bl	80028e8 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d901      	bls.n	8005c1a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e03b      	b.n	8005c92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c1a:	4b20      	ldr	r3, [pc, #128]	@ (8005c9c <HAL_RCC_ClockConfig+0x260>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d1ed      	bne.n	8005c04 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d008      	beq.n	8005c46 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c34:	4b1a      	ldr	r3, [pc, #104]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	4917      	ldr	r1, [pc, #92]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d009      	beq.n	8005c66 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c52:	4b13      	ldr	r3, [pc, #76]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	490f      	ldr	r1, [pc, #60]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c66:	f000 f825 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca0 <HAL_RCC_ClockConfig+0x264>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	091b      	lsrs	r3, r3, #4
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	490c      	ldr	r1, [pc, #48]	@ (8005ca8 <HAL_RCC_ClockConfig+0x26c>)
 8005c78:	5ccb      	ldrb	r3, [r1, r3]
 8005c7a:	f003 031f 	and.w	r3, r3, #31
 8005c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c82:	4a0a      	ldr	r2, [pc, #40]	@ (8005cac <HAL_RCC_ClockConfig+0x270>)
 8005c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c86:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb0 <HAL_RCC_ClockConfig+0x274>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fb fee8 	bl	8001a60 <HAL_InitTick>
 8005c90:	4603      	mov	r3, r0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	40022000 	.word	0x40022000
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	04c4b400 	.word	0x04c4b400
 8005ca8:	0800eb64 	.word	0x0800eb64
 8005cac:	20000000 	.word	0x20000000
 8005cb0:	200001d8 	.word	0x200001d8

08005cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005cba:	4b2c      	ldr	r3, [pc, #176]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 030c 	and.w	r3, r3, #12
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d102      	bne.n	8005ccc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8005d70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005cc8:	613b      	str	r3, [r7, #16]
 8005cca:	e047      	b.n	8005d5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005ccc:	4b27      	ldr	r3, [pc, #156]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 030c 	and.w	r3, r3, #12
 8005cd4:	2b08      	cmp	r3, #8
 8005cd6:	d102      	bne.n	8005cde <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005cd8:	4b26      	ldr	r3, [pc, #152]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005cda:	613b      	str	r3, [r7, #16]
 8005cdc:	e03e      	b.n	8005d5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005cde:	4b23      	ldr	r3, [pc, #140]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 030c 	and.w	r3, r3, #12
 8005ce6:	2b0c      	cmp	r3, #12
 8005ce8:	d136      	bne.n	8005d58 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cea:	4b20      	ldr	r3, [pc, #128]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f003 0303 	and.w	r3, r3, #3
 8005cf2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	091b      	lsrs	r3, r3, #4
 8005cfa:	f003 030f 	and.w	r3, r3, #15
 8005cfe:	3301      	adds	r3, #1
 8005d00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	d10c      	bne.n	8005d22 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d08:	4a1a      	ldr	r2, [pc, #104]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d10:	4a16      	ldr	r2, [pc, #88]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d12:	68d2      	ldr	r2, [r2, #12]
 8005d14:	0a12      	lsrs	r2, r2, #8
 8005d16:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d1a:	fb02 f303 	mul.w	r3, r2, r3
 8005d1e:	617b      	str	r3, [r7, #20]
      break;
 8005d20:	e00c      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d22:	4a13      	ldr	r2, [pc, #76]	@ (8005d70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2a:	4a10      	ldr	r2, [pc, #64]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d2c:	68d2      	ldr	r2, [r2, #12]
 8005d2e:	0a12      	lsrs	r2, r2, #8
 8005d30:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d34:	fb02 f303 	mul.w	r3, r2, r3
 8005d38:	617b      	str	r3, [r7, #20]
      break;
 8005d3a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	0e5b      	lsrs	r3, r3, #25
 8005d42:	f003 0303 	and.w	r3, r3, #3
 8005d46:	3301      	adds	r3, #1
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d54:	613b      	str	r3, [r7, #16]
 8005d56:	e001      	b.n	8005d5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005d5c:	693b      	ldr	r3, [r7, #16]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	371c      	adds	r7, #28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40021000 	.word	0x40021000
 8005d70:	00f42400 	.word	0x00f42400
 8005d74:	016e3600 	.word	0x016e3600

08005d78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d7c:	4b03      	ldr	r3, [pc, #12]	@ (8005d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	20000000 	.word	0x20000000

08005d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d94:	f7ff fff0 	bl	8005d78 <HAL_RCC_GetHCLKFreq>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	4b06      	ldr	r3, [pc, #24]	@ (8005db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	0a1b      	lsrs	r3, r3, #8
 8005da0:	f003 0307 	and.w	r3, r3, #7
 8005da4:	4904      	ldr	r1, [pc, #16]	@ (8005db8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005da6:	5ccb      	ldrb	r3, [r1, r3]
 8005da8:	f003 031f 	and.w	r3, r3, #31
 8005dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	40021000 	.word	0x40021000
 8005db8:	0800eb74 	.word	0x0800eb74

08005dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005dc0:	f7ff ffda 	bl	8005d78 <HAL_RCC_GetHCLKFreq>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	4b06      	ldr	r3, [pc, #24]	@ (8005de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	0adb      	lsrs	r3, r3, #11
 8005dcc:	f003 0307 	and.w	r3, r3, #7
 8005dd0:	4904      	ldr	r1, [pc, #16]	@ (8005de4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005dd2:	5ccb      	ldrb	r3, [r1, r3]
 8005dd4:	f003 031f 	and.w	r3, r3, #31
 8005dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	40021000 	.word	0x40021000
 8005de4:	0800eb74 	.word	0x0800eb74

08005de8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	220f      	movs	r2, #15
 8005df6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005df8:	4b12      	ldr	r3, [pc, #72]	@ (8005e44 <HAL_RCC_GetClockConfig+0x5c>)
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f003 0203 	and.w	r2, r3, #3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005e04:	4b0f      	ldr	r3, [pc, #60]	@ (8005e44 <HAL_RCC_GetClockConfig+0x5c>)
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005e10:	4b0c      	ldr	r3, [pc, #48]	@ (8005e44 <HAL_RCC_GetClockConfig+0x5c>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005e1c:	4b09      	ldr	r3, [pc, #36]	@ (8005e44 <HAL_RCC_GetClockConfig+0x5c>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	08db      	lsrs	r3, r3, #3
 8005e22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005e2a:	4b07      	ldr	r3, [pc, #28]	@ (8005e48 <HAL_RCC_GetClockConfig+0x60>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 020f 	and.w	r2, r3, #15
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	601a      	str	r2, [r3, #0]
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40021000 	.word	0x40021000
 8005e48:	40022000 	.word	0x40022000

08005e4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e52:	4b1e      	ldr	r3, [pc, #120]	@ (8005ecc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8005ecc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	091b      	lsrs	r3, r3, #4
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	3301      	adds	r3, #1
 8005e68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d10c      	bne.n	8005e8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e70:	4a17      	ldr	r2, [pc, #92]	@ (8005ed0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e78:	4a14      	ldr	r2, [pc, #80]	@ (8005ecc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e7a:	68d2      	ldr	r2, [r2, #12]
 8005e7c:	0a12      	lsrs	r2, r2, #8
 8005e7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e82:	fb02 f303 	mul.w	r3, r2, r3
 8005e86:	617b      	str	r3, [r7, #20]
    break;
 8005e88:	e00c      	b.n	8005ea4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e8a:	4a12      	ldr	r2, [pc, #72]	@ (8005ed4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e92:	4a0e      	ldr	r2, [pc, #56]	@ (8005ecc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e94:	68d2      	ldr	r2, [r2, #12]
 8005e96:	0a12      	lsrs	r2, r2, #8
 8005e98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ea0:	617b      	str	r3, [r7, #20]
    break;
 8005ea2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ea4:	4b09      	ldr	r3, [pc, #36]	@ (8005ecc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	0e5b      	lsrs	r3, r3, #25
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	3301      	adds	r3, #1
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ebc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005ebe:	687b      	ldr	r3, [r7, #4]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	016e3600 	.word	0x016e3600
 8005ed4:	00f42400 	.word	0x00f42400

08005ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b086      	sub	sp, #24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 8098 	beq.w	8006026 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005efa:	4b43      	ldr	r3, [pc, #268]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10d      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f06:	4b40      	ldr	r3, [pc, #256]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f0a:	4a3f      	ldr	r2, [pc, #252]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f10:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f12:	4b3d      	ldr	r3, [pc, #244]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f1a:	60bb      	str	r3, [r7, #8]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f22:	4b3a      	ldr	r3, [pc, #232]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a39      	ldr	r2, [pc, #228]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f2e:	f7fc fcdb 	bl	80028e8 <HAL_GetTick>
 8005f32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f34:	e009      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f36:	f7fc fcd7 	bl	80028e8 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d902      	bls.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	74fb      	strb	r3, [r7, #19]
        break;
 8005f48:	e005      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f4a:	4b30      	ldr	r3, [pc, #192]	@ (800600c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0ef      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005f56:	7cfb      	ldrb	r3, [r7, #19]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d159      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d01e      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d019      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f78:	4b23      	ldr	r3, [pc, #140]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f84:	4b20      	ldr	r3, [pc, #128]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f8a:	4a1f      	ldr	r2, [pc, #124]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f94:	4b1c      	ldr	r3, [pc, #112]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005fa4:	4a18      	ldr	r2, [pc, #96]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d016      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb6:	f7fc fc97 	bl	80028e8 <HAL_GetTick>
 8005fba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fbc:	e00b      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fbe:	f7fc fc93 	bl	80028e8 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d902      	bls.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	74fb      	strb	r3, [r7, #19]
            break;
 8005fd4:	e006      	b.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0ec      	beq.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005fe4:	7cfb      	ldrb	r3, [r7, #19]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10b      	bne.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fea:	4b07      	ldr	r3, [pc, #28]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ff0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ff8:	4903      	ldr	r1, [pc, #12]	@ (8006008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006000:	e008      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006002:	7cfb      	ldrb	r3, [r7, #19]
 8006004:	74bb      	strb	r3, [r7, #18]
 8006006:	e005      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006008:	40021000 	.word	0x40021000
 800600c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006010:	7cfb      	ldrb	r3, [r7, #19]
 8006012:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006014:	7c7b      	ldrb	r3, [r7, #17]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d105      	bne.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800601a:	4ba7      	ldr	r3, [pc, #668]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800601c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800601e:	4aa6      	ldr	r2, [pc, #664]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006020:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006024:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006032:	4ba1      	ldr	r3, [pc, #644]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006038:	f023 0203 	bic.w	r2, r3, #3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	499d      	ldr	r1, [pc, #628]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006042:	4313      	orrs	r3, r2
 8006044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0302 	and.w	r3, r3, #2
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00a      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006054:	4b98      	ldr	r3, [pc, #608]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800605a:	f023 020c 	bic.w	r2, r3, #12
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	4995      	ldr	r1, [pc, #596]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006064:	4313      	orrs	r3, r2
 8006066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0304 	and.w	r3, r3, #4
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006076:	4b90      	ldr	r3, [pc, #576]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800607c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	498c      	ldr	r1, [pc, #560]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006086:	4313      	orrs	r3, r2
 8006088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0308 	and.w	r3, r3, #8
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00a      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006098:	4b87      	ldr	r3, [pc, #540]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800609a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800609e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	4984      	ldr	r1, [pc, #528]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0310 	and.w	r3, r3, #16
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80060ba:	4b7f      	ldr	r3, [pc, #508]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	497b      	ldr	r1, [pc, #492]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0320 	and.w	r3, r3, #32
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00a      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060dc:	4b76      	ldr	r3, [pc, #472]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	4973      	ldr	r1, [pc, #460]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060fe:	4b6e      	ldr	r3, [pc, #440]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006104:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	496a      	ldr	r1, [pc, #424]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800610e:	4313      	orrs	r3, r2
 8006110:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00a      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006120:	4b65      	ldr	r3, [pc, #404]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006126:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	4962      	ldr	r1, [pc, #392]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006130:	4313      	orrs	r3, r2
 8006132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00a      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006142:	4b5d      	ldr	r3, [pc, #372]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006148:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006150:	4959      	ldr	r1, [pc, #356]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006152:	4313      	orrs	r3, r2
 8006154:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00a      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006164:	4b54      	ldr	r3, [pc, #336]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006166:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800616a:	f023 0203 	bic.w	r2, r3, #3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006172:	4951      	ldr	r1, [pc, #324]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006174:	4313      	orrs	r3, r2
 8006176:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006186:	4b4c      	ldr	r3, [pc, #304]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800618c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006194:	4948      	ldr	r1, [pc, #288]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006196:	4313      	orrs	r3, r2
 8006198:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d015      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061a8:	4b43      	ldr	r3, [pc, #268]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b6:	4940      	ldr	r1, [pc, #256]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061c6:	d105      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061c8:	4b3b      	ldr	r3, [pc, #236]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	4a3a      	ldr	r2, [pc, #232]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d015      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80061e0:	4b35      	ldr	r3, [pc, #212]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ee:	4932      	ldr	r1, [pc, #200]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061fe:	d105      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006200:	4b2d      	ldr	r3, [pc, #180]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	4a2c      	ldr	r2, [pc, #176]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800620a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d015      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006218:	4b27      	ldr	r3, [pc, #156]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800621a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800621e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006226:	4924      	ldr	r1, [pc, #144]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006232:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006236:	d105      	bne.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006238:	4b1f      	ldr	r3, [pc, #124]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	4a1e      	ldr	r2, [pc, #120]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800623e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006242:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d015      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006250:	4b19      	ldr	r3, [pc, #100]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006256:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800625e:	4916      	ldr	r1, [pc, #88]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006260:	4313      	orrs	r3, r2
 8006262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800626a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800626e:	d105      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006270:	4b11      	ldr	r3, [pc, #68]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	4a10      	ldr	r2, [pc, #64]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006276:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800627a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d019      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006288:	4b0b      	ldr	r3, [pc, #44]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800628a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800628e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006296:	4908      	ldr	r1, [pc, #32]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006298:	4313      	orrs	r3, r2
 800629a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062a6:	d109      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062a8:	4b03      	ldr	r3, [pc, #12]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	4a02      	ldr	r2, [pc, #8]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80062b2:	60d3      	str	r3, [r2, #12]
 80062b4:	e002      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80062b6:	bf00      	nop
 80062b8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d015      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80062c8:	4b29      	ldr	r3, [pc, #164]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062d6:	4926      	ldr	r1, [pc, #152]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062e6:	d105      	bne.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80062e8:	4b21      	ldr	r3, [pc, #132]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	4a20      	ldr	r2, [pc, #128]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062f2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d015      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006300:	4b1b      	ldr	r3, [pc, #108]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006306:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800630e:	4918      	ldr	r1, [pc, #96]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006310:	4313      	orrs	r3, r2
 8006312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800631a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800631e:	d105      	bne.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006320:	4b13      	ldr	r3, [pc, #76]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	4a12      	ldr	r2, [pc, #72]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006326:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800632a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d015      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006338:	4b0d      	ldr	r3, [pc, #52]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800633a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800633e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006346:	490a      	ldr	r1, [pc, #40]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006348:	4313      	orrs	r3, r2
 800634a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006352:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006356:	d105      	bne.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006358:	4b05      	ldr	r3, [pc, #20]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	4a04      	ldr	r2, [pc, #16]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800635e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006362:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006364:	7cbb      	ldrb	r3, [r7, #18]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3718      	adds	r7, #24
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	40021000 	.word	0x40021000

08006374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e049      	b.n	800641a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d106      	bne.n	80063a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7fb fe98 	bl	80020d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3304      	adds	r3, #4
 80063b0:	4619      	mov	r1, r3
 80063b2:	4610      	mov	r0, r2
 80063b4:	f000 fe86 	bl	80070c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
	...

08006424 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b01      	cmp	r3, #1
 8006436:	d001      	beq.n	800643c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e054      	b.n	80064e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2202      	movs	r2, #2
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68da      	ldr	r2, [r3, #12]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0201 	orr.w	r2, r2, #1
 8006452:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a26      	ldr	r2, [pc, #152]	@ (80064f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d022      	beq.n	80064a4 <HAL_TIM_Base_Start_IT+0x80>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006466:	d01d      	beq.n	80064a4 <HAL_TIM_Base_Start_IT+0x80>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a22      	ldr	r2, [pc, #136]	@ (80064f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d018      	beq.n	80064a4 <HAL_TIM_Base_Start_IT+0x80>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a21      	ldr	r2, [pc, #132]	@ (80064fc <HAL_TIM_Base_Start_IT+0xd8>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d013      	beq.n	80064a4 <HAL_TIM_Base_Start_IT+0x80>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a1f      	ldr	r2, [pc, #124]	@ (8006500 <HAL_TIM_Base_Start_IT+0xdc>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00e      	beq.n	80064a4 <HAL_TIM_Base_Start_IT+0x80>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a1e      	ldr	r2, [pc, #120]	@ (8006504 <HAL_TIM_Base_Start_IT+0xe0>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d009      	beq.n	80064a4 <HAL_TIM_Base_Start_IT+0x80>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a1c      	ldr	r2, [pc, #112]	@ (8006508 <HAL_TIM_Base_Start_IT+0xe4>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d004      	beq.n	80064a4 <HAL_TIM_Base_Start_IT+0x80>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a1b      	ldr	r2, [pc, #108]	@ (800650c <HAL_TIM_Base_Start_IT+0xe8>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d115      	bne.n	80064d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	4b19      	ldr	r3, [pc, #100]	@ (8006510 <HAL_TIM_Base_Start_IT+0xec>)
 80064ac:	4013      	ands	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b06      	cmp	r3, #6
 80064b4:	d015      	beq.n	80064e2 <HAL_TIM_Base_Start_IT+0xbe>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064bc:	d011      	beq.n	80064e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f042 0201 	orr.w	r2, r2, #1
 80064cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ce:	e008      	b.n	80064e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0201 	orr.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	e000      	b.n	80064e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40012c00 	.word	0x40012c00
 80064f8:	40000400 	.word	0x40000400
 80064fc:	40000800 	.word	0x40000800
 8006500:	40000c00 	.word	0x40000c00
 8006504:	40013400 	.word	0x40013400
 8006508:	40014000 	.word	0x40014000
 800650c:	40015000 	.word	0x40015000
 8006510:	00010007 	.word	0x00010007

08006514 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e049      	b.n	80065ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d106      	bne.n	8006540 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fb fda2 	bl	8002084 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2202      	movs	r2, #2
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3304      	adds	r3, #4
 8006550:	4619      	mov	r1, r3
 8006552:	4610      	mov	r0, r2
 8006554:	f000 fdb6 	bl	80070c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
	...

080065c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d109      	bne.n	80065e8 <HAL_TIM_PWM_Start+0x24>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b01      	cmp	r3, #1
 80065de:	bf14      	ite	ne
 80065e0:	2301      	movne	r3, #1
 80065e2:	2300      	moveq	r3, #0
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	e03c      	b.n	8006662 <HAL_TIM_PWM_Start+0x9e>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	d109      	bne.n	8006602 <HAL_TIM_PWM_Start+0x3e>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	bf14      	ite	ne
 80065fa:	2301      	movne	r3, #1
 80065fc:	2300      	moveq	r3, #0
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	e02f      	b.n	8006662 <HAL_TIM_PWM_Start+0x9e>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b08      	cmp	r3, #8
 8006606:	d109      	bne.n	800661c <HAL_TIM_PWM_Start+0x58>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b01      	cmp	r3, #1
 8006612:	bf14      	ite	ne
 8006614:	2301      	movne	r3, #1
 8006616:	2300      	moveq	r3, #0
 8006618:	b2db      	uxtb	r3, r3
 800661a:	e022      	b.n	8006662 <HAL_TIM_PWM_Start+0x9e>
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2b0c      	cmp	r3, #12
 8006620:	d109      	bne.n	8006636 <HAL_TIM_PWM_Start+0x72>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b01      	cmp	r3, #1
 800662c:	bf14      	ite	ne
 800662e:	2301      	movne	r3, #1
 8006630:	2300      	moveq	r3, #0
 8006632:	b2db      	uxtb	r3, r3
 8006634:	e015      	b.n	8006662 <HAL_TIM_PWM_Start+0x9e>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b10      	cmp	r3, #16
 800663a:	d109      	bne.n	8006650 <HAL_TIM_PWM_Start+0x8c>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b01      	cmp	r3, #1
 8006646:	bf14      	ite	ne
 8006648:	2301      	movne	r3, #1
 800664a:	2300      	moveq	r3, #0
 800664c:	b2db      	uxtb	r3, r3
 800664e:	e008      	b.n	8006662 <HAL_TIM_PWM_Start+0x9e>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b01      	cmp	r3, #1
 800665a:	bf14      	ite	ne
 800665c:	2301      	movne	r3, #1
 800665e:	2300      	moveq	r3, #0
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e0a6      	b.n	80067b8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d104      	bne.n	800667a <HAL_TIM_PWM_Start+0xb6>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006678:	e023      	b.n	80066c2 <HAL_TIM_PWM_Start+0xfe>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b04      	cmp	r3, #4
 800667e:	d104      	bne.n	800668a <HAL_TIM_PWM_Start+0xc6>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006688:	e01b      	b.n	80066c2 <HAL_TIM_PWM_Start+0xfe>
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2b08      	cmp	r3, #8
 800668e:	d104      	bne.n	800669a <HAL_TIM_PWM_Start+0xd6>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006698:	e013      	b.n	80066c2 <HAL_TIM_PWM_Start+0xfe>
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b0c      	cmp	r3, #12
 800669e:	d104      	bne.n	80066aa <HAL_TIM_PWM_Start+0xe6>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2202      	movs	r2, #2
 80066a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80066a8:	e00b      	b.n	80066c2 <HAL_TIM_PWM_Start+0xfe>
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	2b10      	cmp	r3, #16
 80066ae:	d104      	bne.n	80066ba <HAL_TIM_PWM_Start+0xf6>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066b8:	e003      	b.n	80066c2 <HAL_TIM_PWM_Start+0xfe>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2202      	movs	r2, #2
 80066be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2201      	movs	r2, #1
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f001 f9dc 	bl	8007a88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a3a      	ldr	r2, [pc, #232]	@ (80067c0 <HAL_TIM_PWM_Start+0x1fc>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d018      	beq.n	800670c <HAL_TIM_PWM_Start+0x148>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a39      	ldr	r2, [pc, #228]	@ (80067c4 <HAL_TIM_PWM_Start+0x200>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d013      	beq.n	800670c <HAL_TIM_PWM_Start+0x148>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a37      	ldr	r2, [pc, #220]	@ (80067c8 <HAL_TIM_PWM_Start+0x204>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d00e      	beq.n	800670c <HAL_TIM_PWM_Start+0x148>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a36      	ldr	r2, [pc, #216]	@ (80067cc <HAL_TIM_PWM_Start+0x208>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d009      	beq.n	800670c <HAL_TIM_PWM_Start+0x148>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a34      	ldr	r2, [pc, #208]	@ (80067d0 <HAL_TIM_PWM_Start+0x20c>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d004      	beq.n	800670c <HAL_TIM_PWM_Start+0x148>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a33      	ldr	r2, [pc, #204]	@ (80067d4 <HAL_TIM_PWM_Start+0x210>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d101      	bne.n	8006710 <HAL_TIM_PWM_Start+0x14c>
 800670c:	2301      	movs	r3, #1
 800670e:	e000      	b.n	8006712 <HAL_TIM_PWM_Start+0x14e>
 8006710:	2300      	movs	r3, #0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d007      	beq.n	8006726 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006724:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a25      	ldr	r2, [pc, #148]	@ (80067c0 <HAL_TIM_PWM_Start+0x1fc>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d022      	beq.n	8006776 <HAL_TIM_PWM_Start+0x1b2>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006738:	d01d      	beq.n	8006776 <HAL_TIM_PWM_Start+0x1b2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a26      	ldr	r2, [pc, #152]	@ (80067d8 <HAL_TIM_PWM_Start+0x214>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d018      	beq.n	8006776 <HAL_TIM_PWM_Start+0x1b2>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a24      	ldr	r2, [pc, #144]	@ (80067dc <HAL_TIM_PWM_Start+0x218>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d013      	beq.n	8006776 <HAL_TIM_PWM_Start+0x1b2>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a23      	ldr	r2, [pc, #140]	@ (80067e0 <HAL_TIM_PWM_Start+0x21c>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d00e      	beq.n	8006776 <HAL_TIM_PWM_Start+0x1b2>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a19      	ldr	r2, [pc, #100]	@ (80067c4 <HAL_TIM_PWM_Start+0x200>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d009      	beq.n	8006776 <HAL_TIM_PWM_Start+0x1b2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a18      	ldr	r2, [pc, #96]	@ (80067c8 <HAL_TIM_PWM_Start+0x204>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d004      	beq.n	8006776 <HAL_TIM_PWM_Start+0x1b2>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a18      	ldr	r2, [pc, #96]	@ (80067d4 <HAL_TIM_PWM_Start+0x210>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d115      	bne.n	80067a2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	4b19      	ldr	r3, [pc, #100]	@ (80067e4 <HAL_TIM_PWM_Start+0x220>)
 800677e:	4013      	ands	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2b06      	cmp	r3, #6
 8006786:	d015      	beq.n	80067b4 <HAL_TIM_PWM_Start+0x1f0>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800678e:	d011      	beq.n	80067b4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0201 	orr.w	r2, r2, #1
 800679e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067a0:	e008      	b.n	80067b4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f042 0201 	orr.w	r2, r2, #1
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	e000      	b.n	80067b6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	40012c00 	.word	0x40012c00
 80067c4:	40013400 	.word	0x40013400
 80067c8:	40014000 	.word	0x40014000
 80067cc:	40014400 	.word	0x40014400
 80067d0:	40014800 	.word	0x40014800
 80067d4:	40015000 	.word	0x40015000
 80067d8:	40000400 	.word	0x40000400
 80067dc:	40000800 	.word	0x40000800
 80067e0:	40000c00 	.word	0x40000c00
 80067e4:	00010007 	.word	0x00010007

080067e8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2200      	movs	r2, #0
 80067f8:	6839      	ldr	r1, [r7, #0]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f001 f944 	bl	8007a88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a40      	ldr	r2, [pc, #256]	@ (8006908 <HAL_TIM_PWM_Stop+0x120>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d018      	beq.n	800683c <HAL_TIM_PWM_Stop+0x54>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a3f      	ldr	r2, [pc, #252]	@ (800690c <HAL_TIM_PWM_Stop+0x124>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d013      	beq.n	800683c <HAL_TIM_PWM_Stop+0x54>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a3d      	ldr	r2, [pc, #244]	@ (8006910 <HAL_TIM_PWM_Stop+0x128>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d00e      	beq.n	800683c <HAL_TIM_PWM_Stop+0x54>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a3c      	ldr	r2, [pc, #240]	@ (8006914 <HAL_TIM_PWM_Stop+0x12c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d009      	beq.n	800683c <HAL_TIM_PWM_Stop+0x54>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a3a      	ldr	r2, [pc, #232]	@ (8006918 <HAL_TIM_PWM_Stop+0x130>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d004      	beq.n	800683c <HAL_TIM_PWM_Stop+0x54>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a39      	ldr	r2, [pc, #228]	@ (800691c <HAL_TIM_PWM_Stop+0x134>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d101      	bne.n	8006840 <HAL_TIM_PWM_Stop+0x58>
 800683c:	2301      	movs	r3, #1
 800683e:	e000      	b.n	8006842 <HAL_TIM_PWM_Stop+0x5a>
 8006840:	2300      	movs	r3, #0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d017      	beq.n	8006876 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6a1a      	ldr	r2, [r3, #32]
 800684c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006850:	4013      	ands	r3, r2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10f      	bne.n	8006876 <HAL_TIM_PWM_Stop+0x8e>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6a1a      	ldr	r2, [r3, #32]
 800685c:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006860:	4013      	ands	r3, r2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d107      	bne.n	8006876 <HAL_TIM_PWM_Stop+0x8e>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006874:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6a1a      	ldr	r2, [r3, #32]
 800687c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006880:	4013      	ands	r3, r2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10f      	bne.n	80068a6 <HAL_TIM_PWM_Stop+0xbe>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6a1a      	ldr	r2, [r3, #32]
 800688c:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006890:	4013      	ands	r3, r2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d107      	bne.n	80068a6 <HAL_TIM_PWM_Stop+0xbe>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 0201 	bic.w	r2, r2, #1
 80068a4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d104      	bne.n	80068b6 <HAL_TIM_PWM_Stop+0xce>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068b4:	e023      	b.n	80068fe <HAL_TIM_PWM_Stop+0x116>
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b04      	cmp	r3, #4
 80068ba:	d104      	bne.n	80068c6 <HAL_TIM_PWM_Stop+0xde>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068c4:	e01b      	b.n	80068fe <HAL_TIM_PWM_Stop+0x116>
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b08      	cmp	r3, #8
 80068ca:	d104      	bne.n	80068d6 <HAL_TIM_PWM_Stop+0xee>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068d4:	e013      	b.n	80068fe <HAL_TIM_PWM_Stop+0x116>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b0c      	cmp	r3, #12
 80068da:	d104      	bne.n	80068e6 <HAL_TIM_PWM_Stop+0xfe>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80068e4:	e00b      	b.n	80068fe <HAL_TIM_PWM_Stop+0x116>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b10      	cmp	r3, #16
 80068ea:	d104      	bne.n	80068f6 <HAL_TIM_PWM_Stop+0x10e>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068f4:	e003      	b.n	80068fe <HAL_TIM_PWM_Stop+0x116>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2201      	movs	r2, #1
 80068fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	40012c00 	.word	0x40012c00
 800690c:	40013400 	.word	0x40013400
 8006910:	40014000 	.word	0x40014000
 8006914:	40014400 	.word	0x40014400
 8006918:	40014800 	.word	0x40014800
 800691c:	40015000 	.word	0x40015000

08006920 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b02      	cmp	r3, #2
 8006934:	d122      	bne.n	800697c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b02      	cmp	r3, #2
 8006942:	d11b      	bne.n	800697c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0202 	mvn.w	r2, #2
 800694c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fb90 	bl	8007088 <HAL_TIM_IC_CaptureCallback>
 8006968:	e005      	b.n	8006976 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fb82 	bl	8007074 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fb93 	bl	800709c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 0304 	and.w	r3, r3, #4
 8006986:	2b04      	cmp	r3, #4
 8006988:	d122      	bne.n	80069d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b04      	cmp	r3, #4
 8006996:	d11b      	bne.n	80069d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0204 	mvn.w	r2, #4
 80069a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2202      	movs	r2, #2
 80069a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fb66 	bl	8007088 <HAL_TIM_IC_CaptureCallback>
 80069bc:	e005      	b.n	80069ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fb58 	bl	8007074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 fb69 	bl	800709c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f003 0308 	and.w	r3, r3, #8
 80069da:	2b08      	cmp	r3, #8
 80069dc:	d122      	bne.n	8006a24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	f003 0308 	and.w	r3, r3, #8
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d11b      	bne.n	8006a24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f06f 0208 	mvn.w	r2, #8
 80069f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2204      	movs	r2, #4
 80069fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	f003 0303 	and.w	r3, r3, #3
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fb3c 	bl	8007088 <HAL_TIM_IC_CaptureCallback>
 8006a10:	e005      	b.n	8006a1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fb2e 	bl	8007074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fb3f 	bl	800709c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f003 0310 	and.w	r3, r3, #16
 8006a2e:	2b10      	cmp	r3, #16
 8006a30:	d122      	bne.n	8006a78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f003 0310 	and.w	r3, r3, #16
 8006a3c:	2b10      	cmp	r3, #16
 8006a3e:	d11b      	bne.n	8006a78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f06f 0210 	mvn.w	r2, #16
 8006a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2208      	movs	r2, #8
 8006a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fb12 	bl	8007088 <HAL_TIM_IC_CaptureCallback>
 8006a64:	e005      	b.n	8006a72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fb04 	bl	8007074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fb15 	bl	800709c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d10e      	bne.n	8006aa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d107      	bne.n	8006aa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f06f 0201 	mvn.w	r2, #1
 8006a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7fa ff9c 	bl	80019dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aae:	2b80      	cmp	r3, #128	@ 0x80
 8006ab0:	d10e      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006abc:	2b80      	cmp	r3, #128	@ 0x80
 8006abe:	d107      	bne.n	8006ad0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 fb22 	bl	8008114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ade:	d10e      	bne.n	8006afe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aea:	2b80      	cmp	r3, #128	@ 0x80
 8006aec:	d107      	bne.n	8006afe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f001 fb15 	bl	8008128 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b08:	2b40      	cmp	r3, #64	@ 0x40
 8006b0a:	d10e      	bne.n	8006b2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b16:	2b40      	cmp	r3, #64	@ 0x40
 8006b18:	d107      	bne.n	8006b2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fac3 	bl	80070b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	f003 0320 	and.w	r3, r3, #32
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	d10e      	bne.n	8006b56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	f003 0320 	and.w	r3, r3, #32
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	d107      	bne.n	8006b56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f06f 0220 	mvn.w	r2, #32
 8006b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f001 fad5 	bl	8008100 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b64:	d10f      	bne.n	8006b86 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b74:	d107      	bne.n	8006b86 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f001 fadb 	bl	800813c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b94:	d10f      	bne.n	8006bb6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ba0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ba4:	d107      	bne.n	8006bb6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f001 facd 	bl	8008150 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bc4:	d10f      	bne.n	8006be6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bd4:	d107      	bne.n	8006be6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f001 fabf 	bl	8008164 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bf0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bf4:	d10f      	bne.n	8006c16 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c04:	d107      	bne.n	8006c16 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f001 fab1 	bl	8008178 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c16:	bf00      	nop
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d101      	bne.n	8006c3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	e0ff      	b.n	8006e3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b14      	cmp	r3, #20
 8006c4a:	f200 80f0 	bhi.w	8006e2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c54:	08006ca9 	.word	0x08006ca9
 8006c58:	08006e2f 	.word	0x08006e2f
 8006c5c:	08006e2f 	.word	0x08006e2f
 8006c60:	08006e2f 	.word	0x08006e2f
 8006c64:	08006ce9 	.word	0x08006ce9
 8006c68:	08006e2f 	.word	0x08006e2f
 8006c6c:	08006e2f 	.word	0x08006e2f
 8006c70:	08006e2f 	.word	0x08006e2f
 8006c74:	08006d2b 	.word	0x08006d2b
 8006c78:	08006e2f 	.word	0x08006e2f
 8006c7c:	08006e2f 	.word	0x08006e2f
 8006c80:	08006e2f 	.word	0x08006e2f
 8006c84:	08006d6b 	.word	0x08006d6b
 8006c88:	08006e2f 	.word	0x08006e2f
 8006c8c:	08006e2f 	.word	0x08006e2f
 8006c90:	08006e2f 	.word	0x08006e2f
 8006c94:	08006dad 	.word	0x08006dad
 8006c98:	08006e2f 	.word	0x08006e2f
 8006c9c:	08006e2f 	.word	0x08006e2f
 8006ca0:	08006e2f 	.word	0x08006e2f
 8006ca4:	08006ded 	.word	0x08006ded
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68b9      	ldr	r1, [r7, #8]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 fab0 	bl	8007214 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699a      	ldr	r2, [r3, #24]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0208 	orr.w	r2, r2, #8
 8006cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	699a      	ldr	r2, [r3, #24]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0204 	bic.w	r2, r2, #4
 8006cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6999      	ldr	r1, [r3, #24]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	691a      	ldr	r2, [r3, #16]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	619a      	str	r2, [r3, #24]
      break;
 8006ce6:	e0a5      	b.n	8006e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68b9      	ldr	r1, [r7, #8]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 fb2a 	bl	8007348 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	699a      	ldr	r2, [r3, #24]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	699a      	ldr	r2, [r3, #24]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6999      	ldr	r1, [r3, #24]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	021a      	lsls	r2, r3, #8
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	619a      	str	r2, [r3, #24]
      break;
 8006d28:	e084      	b.n	8006e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68b9      	ldr	r1, [r7, #8]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fb9d 	bl	8007470 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	69da      	ldr	r2, [r3, #28]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f042 0208 	orr.w	r2, r2, #8
 8006d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	69da      	ldr	r2, [r3, #28]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 0204 	bic.w	r2, r2, #4
 8006d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	69d9      	ldr	r1, [r3, #28]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	691a      	ldr	r2, [r3, #16]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	61da      	str	r2, [r3, #28]
      break;
 8006d68:	e064      	b.n	8006e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68b9      	ldr	r1, [r7, #8]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 fc0f 	bl	8007594 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69da      	ldr	r2, [r3, #28]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	69da      	ldr	r2, [r3, #28]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	69d9      	ldr	r1, [r3, #28]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	021a      	lsls	r2, r3, #8
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	61da      	str	r2, [r3, #28]
      break;
 8006daa:	e043      	b.n	8006e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68b9      	ldr	r1, [r7, #8]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 fc82 	bl	80076bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f042 0208 	orr.w	r2, r2, #8
 8006dc6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f022 0204 	bic.w	r2, r2, #4
 8006dd6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	691a      	ldr	r2, [r3, #16]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006dea:	e023      	b.n	8006e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68b9      	ldr	r1, [r7, #8]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fccc 	bl	8007790 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e06:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e16:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	021a      	lsls	r2, r3, #8
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006e2c:	e002      	b.n	8006e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	75fb      	strb	r3, [r7, #23]
      break;
 8006e32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop

08006e48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_TIM_ConfigClockSource+0x1c>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e0f6      	b.n	8007052 <HAL_TIM_ConfigClockSource+0x20a>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006e82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a6f      	ldr	r2, [pc, #444]	@ (800705c <HAL_TIM_ConfigClockSource+0x214>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	f000 80c1 	beq.w	8007026 <HAL_TIM_ConfigClockSource+0x1de>
 8006ea4:	4a6d      	ldr	r2, [pc, #436]	@ (800705c <HAL_TIM_ConfigClockSource+0x214>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	f200 80c6 	bhi.w	8007038 <HAL_TIM_ConfigClockSource+0x1f0>
 8006eac:	4a6c      	ldr	r2, [pc, #432]	@ (8007060 <HAL_TIM_ConfigClockSource+0x218>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	f000 80b9 	beq.w	8007026 <HAL_TIM_ConfigClockSource+0x1de>
 8006eb4:	4a6a      	ldr	r2, [pc, #424]	@ (8007060 <HAL_TIM_ConfigClockSource+0x218>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	f200 80be 	bhi.w	8007038 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ebc:	4a69      	ldr	r2, [pc, #420]	@ (8007064 <HAL_TIM_ConfigClockSource+0x21c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	f000 80b1 	beq.w	8007026 <HAL_TIM_ConfigClockSource+0x1de>
 8006ec4:	4a67      	ldr	r2, [pc, #412]	@ (8007064 <HAL_TIM_ConfigClockSource+0x21c>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	f200 80b6 	bhi.w	8007038 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ecc:	4a66      	ldr	r2, [pc, #408]	@ (8007068 <HAL_TIM_ConfigClockSource+0x220>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	f000 80a9 	beq.w	8007026 <HAL_TIM_ConfigClockSource+0x1de>
 8006ed4:	4a64      	ldr	r2, [pc, #400]	@ (8007068 <HAL_TIM_ConfigClockSource+0x220>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	f200 80ae 	bhi.w	8007038 <HAL_TIM_ConfigClockSource+0x1f0>
 8006edc:	4a63      	ldr	r2, [pc, #396]	@ (800706c <HAL_TIM_ConfigClockSource+0x224>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	f000 80a1 	beq.w	8007026 <HAL_TIM_ConfigClockSource+0x1de>
 8006ee4:	4a61      	ldr	r2, [pc, #388]	@ (800706c <HAL_TIM_ConfigClockSource+0x224>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	f200 80a6 	bhi.w	8007038 <HAL_TIM_ConfigClockSource+0x1f0>
 8006eec:	4a60      	ldr	r2, [pc, #384]	@ (8007070 <HAL_TIM_ConfigClockSource+0x228>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	f000 8099 	beq.w	8007026 <HAL_TIM_ConfigClockSource+0x1de>
 8006ef4:	4a5e      	ldr	r2, [pc, #376]	@ (8007070 <HAL_TIM_ConfigClockSource+0x228>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	f200 809e 	bhi.w	8007038 <HAL_TIM_ConfigClockSource+0x1f0>
 8006efc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006f00:	f000 8091 	beq.w	8007026 <HAL_TIM_ConfigClockSource+0x1de>
 8006f04:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006f08:	f200 8096 	bhi.w	8007038 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f10:	f000 8089 	beq.w	8007026 <HAL_TIM_ConfigClockSource+0x1de>
 8006f14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f18:	f200 808e 	bhi.w	8007038 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f20:	d03e      	beq.n	8006fa0 <HAL_TIM_ConfigClockSource+0x158>
 8006f22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f26:	f200 8087 	bhi.w	8007038 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f2e:	f000 8086 	beq.w	800703e <HAL_TIM_ConfigClockSource+0x1f6>
 8006f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f36:	d87f      	bhi.n	8007038 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f38:	2b70      	cmp	r3, #112	@ 0x70
 8006f3a:	d01a      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x12a>
 8006f3c:	2b70      	cmp	r3, #112	@ 0x70
 8006f3e:	d87b      	bhi.n	8007038 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f40:	2b60      	cmp	r3, #96	@ 0x60
 8006f42:	d050      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0x19e>
 8006f44:	2b60      	cmp	r3, #96	@ 0x60
 8006f46:	d877      	bhi.n	8007038 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f48:	2b50      	cmp	r3, #80	@ 0x50
 8006f4a:	d03c      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x17e>
 8006f4c:	2b50      	cmp	r3, #80	@ 0x50
 8006f4e:	d873      	bhi.n	8007038 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f50:	2b40      	cmp	r3, #64	@ 0x40
 8006f52:	d058      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0x1be>
 8006f54:	2b40      	cmp	r3, #64	@ 0x40
 8006f56:	d86f      	bhi.n	8007038 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f58:	2b30      	cmp	r3, #48	@ 0x30
 8006f5a:	d064      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0x1de>
 8006f5c:	2b30      	cmp	r3, #48	@ 0x30
 8006f5e:	d86b      	bhi.n	8007038 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f60:	2b20      	cmp	r3, #32
 8006f62:	d060      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0x1de>
 8006f64:	2b20      	cmp	r3, #32
 8006f66:	d867      	bhi.n	8007038 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d05c      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0x1de>
 8006f6c:	2b10      	cmp	r3, #16
 8006f6e:	d05a      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0x1de>
 8006f70:	e062      	b.n	8007038 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6818      	ldr	r0, [r3, #0]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	6899      	ldr	r1, [r3, #8]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	f000 fd61 	bl	8007a48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006f94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	609a      	str	r2, [r3, #8]
      break;
 8006f9e:	e04f      	b.n	8007040 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6818      	ldr	r0, [r3, #0]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	6899      	ldr	r1, [r3, #8]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f000 fd4a 	bl	8007a48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689a      	ldr	r2, [r3, #8]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fc2:	609a      	str	r2, [r3, #8]
      break;
 8006fc4:	e03c      	b.n	8007040 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	6859      	ldr	r1, [r3, #4]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f000 fcbc 	bl	8007950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2150      	movs	r1, #80	@ 0x50
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 fd15 	bl	8007a0e <TIM_ITRx_SetConfig>
      break;
 8006fe4:	e02c      	b.n	8007040 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	6859      	ldr	r1, [r3, #4]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f000 fcdb 	bl	80079ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2160      	movs	r1, #96	@ 0x60
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 fd05 	bl	8007a0e <TIM_ITRx_SetConfig>
      break;
 8007004:	e01c      	b.n	8007040 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	6859      	ldr	r1, [r3, #4]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	461a      	mov	r2, r3
 8007014:	f000 fc9c 	bl	8007950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2140      	movs	r1, #64	@ 0x40
 800701e:	4618      	mov	r0, r3
 8007020:	f000 fcf5 	bl	8007a0e <TIM_ITRx_SetConfig>
      break;
 8007024:	e00c      	b.n	8007040 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4619      	mov	r1, r3
 8007030:	4610      	mov	r0, r2
 8007032:	f000 fcec 	bl	8007a0e <TIM_ITRx_SetConfig>
      break;
 8007036:	e003      	b.n	8007040 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	73fb      	strb	r3, [r7, #15]
      break;
 800703c:	e000      	b.n	8007040 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800703e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007050:	7bfb      	ldrb	r3, [r7, #15]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	00100070 	.word	0x00100070
 8007060:	00100060 	.word	0x00100060
 8007064:	00100050 	.word	0x00100050
 8007068:	00100040 	.word	0x00100040
 800706c:	00100030 	.word	0x00100030
 8007070:	00100020 	.word	0x00100020

08007074 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a46      	ldr	r2, [pc, #280]	@ (80071f0 <TIM_Base_SetConfig+0x12c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d017      	beq.n	800710c <TIM_Base_SetConfig+0x48>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070e2:	d013      	beq.n	800710c <TIM_Base_SetConfig+0x48>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a43      	ldr	r2, [pc, #268]	@ (80071f4 <TIM_Base_SetConfig+0x130>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00f      	beq.n	800710c <TIM_Base_SetConfig+0x48>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a42      	ldr	r2, [pc, #264]	@ (80071f8 <TIM_Base_SetConfig+0x134>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d00b      	beq.n	800710c <TIM_Base_SetConfig+0x48>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a41      	ldr	r2, [pc, #260]	@ (80071fc <TIM_Base_SetConfig+0x138>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d007      	beq.n	800710c <TIM_Base_SetConfig+0x48>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a40      	ldr	r2, [pc, #256]	@ (8007200 <TIM_Base_SetConfig+0x13c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d003      	beq.n	800710c <TIM_Base_SetConfig+0x48>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a3f      	ldr	r2, [pc, #252]	@ (8007204 <TIM_Base_SetConfig+0x140>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d108      	bne.n	800711e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	68fa      	ldr	r2, [r7, #12]
 800711a:	4313      	orrs	r3, r2
 800711c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a33      	ldr	r2, [pc, #204]	@ (80071f0 <TIM_Base_SetConfig+0x12c>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d023      	beq.n	800716e <TIM_Base_SetConfig+0xaa>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800712c:	d01f      	beq.n	800716e <TIM_Base_SetConfig+0xaa>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a30      	ldr	r2, [pc, #192]	@ (80071f4 <TIM_Base_SetConfig+0x130>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d01b      	beq.n	800716e <TIM_Base_SetConfig+0xaa>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a2f      	ldr	r2, [pc, #188]	@ (80071f8 <TIM_Base_SetConfig+0x134>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d017      	beq.n	800716e <TIM_Base_SetConfig+0xaa>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a2e      	ldr	r2, [pc, #184]	@ (80071fc <TIM_Base_SetConfig+0x138>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d013      	beq.n	800716e <TIM_Base_SetConfig+0xaa>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a2d      	ldr	r2, [pc, #180]	@ (8007200 <TIM_Base_SetConfig+0x13c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d00f      	beq.n	800716e <TIM_Base_SetConfig+0xaa>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a2d      	ldr	r2, [pc, #180]	@ (8007208 <TIM_Base_SetConfig+0x144>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d00b      	beq.n	800716e <TIM_Base_SetConfig+0xaa>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a2c      	ldr	r2, [pc, #176]	@ (800720c <TIM_Base_SetConfig+0x148>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d007      	beq.n	800716e <TIM_Base_SetConfig+0xaa>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a2b      	ldr	r2, [pc, #172]	@ (8007210 <TIM_Base_SetConfig+0x14c>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d003      	beq.n	800716e <TIM_Base_SetConfig+0xaa>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a26      	ldr	r2, [pc, #152]	@ (8007204 <TIM_Base_SetConfig+0x140>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d108      	bne.n	8007180 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	4313      	orrs	r3, r2
 800717e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a12      	ldr	r2, [pc, #72]	@ (80071f0 <TIM_Base_SetConfig+0x12c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d013      	beq.n	80071d4 <TIM_Base_SetConfig+0x110>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a14      	ldr	r2, [pc, #80]	@ (8007200 <TIM_Base_SetConfig+0x13c>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d00f      	beq.n	80071d4 <TIM_Base_SetConfig+0x110>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a14      	ldr	r2, [pc, #80]	@ (8007208 <TIM_Base_SetConfig+0x144>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d00b      	beq.n	80071d4 <TIM_Base_SetConfig+0x110>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a13      	ldr	r2, [pc, #76]	@ (800720c <TIM_Base_SetConfig+0x148>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d007      	beq.n	80071d4 <TIM_Base_SetConfig+0x110>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a12      	ldr	r2, [pc, #72]	@ (8007210 <TIM_Base_SetConfig+0x14c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d003      	beq.n	80071d4 <TIM_Base_SetConfig+0x110>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a0d      	ldr	r2, [pc, #52]	@ (8007204 <TIM_Base_SetConfig+0x140>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d103      	bne.n	80071dc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	691a      	ldr	r2, [r3, #16]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	615a      	str	r2, [r3, #20]
}
 80071e2:	bf00      	nop
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	40012c00 	.word	0x40012c00
 80071f4:	40000400 	.word	0x40000400
 80071f8:	40000800 	.word	0x40000800
 80071fc:	40000c00 	.word	0x40000c00
 8007200:	40013400 	.word	0x40013400
 8007204:	40015000 	.word	0x40015000
 8007208:	40014000 	.word	0x40014000
 800720c:	40014400 	.word	0x40014400
 8007210:	40014800 	.word	0x40014800

08007214 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	f023 0201 	bic.w	r2, r3, #1
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f023 0303 	bic.w	r3, r3, #3
 800724e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	4313      	orrs	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f023 0302 	bic.w	r3, r3, #2
 8007260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	4313      	orrs	r3, r2
 800726a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a30      	ldr	r2, [pc, #192]	@ (8007330 <TIM_OC1_SetConfig+0x11c>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d013      	beq.n	800729c <TIM_OC1_SetConfig+0x88>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a2f      	ldr	r2, [pc, #188]	@ (8007334 <TIM_OC1_SetConfig+0x120>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d00f      	beq.n	800729c <TIM_OC1_SetConfig+0x88>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a2e      	ldr	r2, [pc, #184]	@ (8007338 <TIM_OC1_SetConfig+0x124>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d00b      	beq.n	800729c <TIM_OC1_SetConfig+0x88>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a2d      	ldr	r2, [pc, #180]	@ (800733c <TIM_OC1_SetConfig+0x128>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d007      	beq.n	800729c <TIM_OC1_SetConfig+0x88>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a2c      	ldr	r2, [pc, #176]	@ (8007340 <TIM_OC1_SetConfig+0x12c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d003      	beq.n	800729c <TIM_OC1_SetConfig+0x88>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a2b      	ldr	r2, [pc, #172]	@ (8007344 <TIM_OC1_SetConfig+0x130>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d10c      	bne.n	80072b6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	f023 0308 	bic.w	r3, r3, #8
 80072a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f023 0304 	bic.w	r3, r3, #4
 80072b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007330 <TIM_OC1_SetConfig+0x11c>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d013      	beq.n	80072e6 <TIM_OC1_SetConfig+0xd2>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a1c      	ldr	r2, [pc, #112]	@ (8007334 <TIM_OC1_SetConfig+0x120>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d00f      	beq.n	80072e6 <TIM_OC1_SetConfig+0xd2>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a1b      	ldr	r2, [pc, #108]	@ (8007338 <TIM_OC1_SetConfig+0x124>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d00b      	beq.n	80072e6 <TIM_OC1_SetConfig+0xd2>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a1a      	ldr	r2, [pc, #104]	@ (800733c <TIM_OC1_SetConfig+0x128>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d007      	beq.n	80072e6 <TIM_OC1_SetConfig+0xd2>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a19      	ldr	r2, [pc, #100]	@ (8007340 <TIM_OC1_SetConfig+0x12c>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d003      	beq.n	80072e6 <TIM_OC1_SetConfig+0xd2>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a18      	ldr	r2, [pc, #96]	@ (8007344 <TIM_OC1_SetConfig+0x130>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d111      	bne.n	800730a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80072f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	4313      	orrs	r3, r2
 8007308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	621a      	str	r2, [r3, #32]
}
 8007324:	bf00      	nop
 8007326:	371c      	adds	r7, #28
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	40012c00 	.word	0x40012c00
 8007334:	40013400 	.word	0x40013400
 8007338:	40014000 	.word	0x40014000
 800733c:	40014400 	.word	0x40014400
 8007340:	40014800 	.word	0x40014800
 8007344:	40015000 	.word	0x40015000

08007348 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007348:	b480      	push	{r7}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	f023 0210 	bic.w	r2, r3, #16
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007376:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800737a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	021b      	lsls	r3, r3, #8
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	4313      	orrs	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	f023 0320 	bic.w	r3, r3, #32
 8007396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a2c      	ldr	r2, [pc, #176]	@ (8007458 <TIM_OC2_SetConfig+0x110>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d007      	beq.n	80073bc <TIM_OC2_SetConfig+0x74>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a2b      	ldr	r2, [pc, #172]	@ (800745c <TIM_OC2_SetConfig+0x114>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d003      	beq.n	80073bc <TIM_OC2_SetConfig+0x74>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a2a      	ldr	r2, [pc, #168]	@ (8007460 <TIM_OC2_SetConfig+0x118>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d10d      	bne.n	80073d8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	011b      	lsls	r3, r3, #4
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a1f      	ldr	r2, [pc, #124]	@ (8007458 <TIM_OC2_SetConfig+0x110>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d013      	beq.n	8007408 <TIM_OC2_SetConfig+0xc0>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a1e      	ldr	r2, [pc, #120]	@ (800745c <TIM_OC2_SetConfig+0x114>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d00f      	beq.n	8007408 <TIM_OC2_SetConfig+0xc0>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a1e      	ldr	r2, [pc, #120]	@ (8007464 <TIM_OC2_SetConfig+0x11c>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d00b      	beq.n	8007408 <TIM_OC2_SetConfig+0xc0>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a1d      	ldr	r2, [pc, #116]	@ (8007468 <TIM_OC2_SetConfig+0x120>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d007      	beq.n	8007408 <TIM_OC2_SetConfig+0xc0>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a1c      	ldr	r2, [pc, #112]	@ (800746c <TIM_OC2_SetConfig+0x124>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d003      	beq.n	8007408 <TIM_OC2_SetConfig+0xc0>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a17      	ldr	r2, [pc, #92]	@ (8007460 <TIM_OC2_SetConfig+0x118>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d113      	bne.n	8007430 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800740e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007416:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	4313      	orrs	r3, r2
 8007422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	4313      	orrs	r3, r2
 800742e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	621a      	str	r2, [r3, #32]
}
 800744a:	bf00      	nop
 800744c:	371c      	adds	r7, #28
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	40012c00 	.word	0x40012c00
 800745c:	40013400 	.word	0x40013400
 8007460:	40015000 	.word	0x40015000
 8007464:	40014000 	.word	0x40014000
 8007468:	40014400 	.word	0x40014400
 800746c:	40014800 	.word	0x40014800

08007470 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007470:	b480      	push	{r7}
 8007472:	b087      	sub	sp, #28
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800749e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f023 0303 	bic.w	r3, r3, #3
 80074aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80074bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	021b      	lsls	r3, r3, #8
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a2b      	ldr	r2, [pc, #172]	@ (800757c <TIM_OC3_SetConfig+0x10c>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d007      	beq.n	80074e2 <TIM_OC3_SetConfig+0x72>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a2a      	ldr	r2, [pc, #168]	@ (8007580 <TIM_OC3_SetConfig+0x110>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d003      	beq.n	80074e2 <TIM_OC3_SetConfig+0x72>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a29      	ldr	r2, [pc, #164]	@ (8007584 <TIM_OC3_SetConfig+0x114>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d10d      	bne.n	80074fe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80074e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	021b      	lsls	r3, r3, #8
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80074fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a1e      	ldr	r2, [pc, #120]	@ (800757c <TIM_OC3_SetConfig+0x10c>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d013      	beq.n	800752e <TIM_OC3_SetConfig+0xbe>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a1d      	ldr	r2, [pc, #116]	@ (8007580 <TIM_OC3_SetConfig+0x110>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d00f      	beq.n	800752e <TIM_OC3_SetConfig+0xbe>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a1d      	ldr	r2, [pc, #116]	@ (8007588 <TIM_OC3_SetConfig+0x118>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d00b      	beq.n	800752e <TIM_OC3_SetConfig+0xbe>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a1c      	ldr	r2, [pc, #112]	@ (800758c <TIM_OC3_SetConfig+0x11c>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d007      	beq.n	800752e <TIM_OC3_SetConfig+0xbe>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a1b      	ldr	r2, [pc, #108]	@ (8007590 <TIM_OC3_SetConfig+0x120>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d003      	beq.n	800752e <TIM_OC3_SetConfig+0xbe>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a16      	ldr	r2, [pc, #88]	@ (8007584 <TIM_OC3_SetConfig+0x114>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d113      	bne.n	8007556 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800753c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	4313      	orrs	r3, r2
 8007548:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	011b      	lsls	r3, r3, #4
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	4313      	orrs	r3, r2
 8007554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	693a      	ldr	r2, [r7, #16]
 800755a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	621a      	str	r2, [r3, #32]
}
 8007570:	bf00      	nop
 8007572:	371c      	adds	r7, #28
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	40012c00 	.word	0x40012c00
 8007580:	40013400 	.word	0x40013400
 8007584:	40015000 	.word	0x40015000
 8007588:	40014000 	.word	0x40014000
 800758c:	40014400 	.word	0x40014400
 8007590:	40014800 	.word	0x40014800

08007594 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007594:	b480      	push	{r7}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	021b      	lsls	r3, r3, #8
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	4313      	orrs	r3, r2
 80075da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80075e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	031b      	lsls	r3, r3, #12
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a2c      	ldr	r2, [pc, #176]	@ (80076a4 <TIM_OC4_SetConfig+0x110>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d007      	beq.n	8007608 <TIM_OC4_SetConfig+0x74>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a2b      	ldr	r2, [pc, #172]	@ (80076a8 <TIM_OC4_SetConfig+0x114>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d003      	beq.n	8007608 <TIM_OC4_SetConfig+0x74>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a2a      	ldr	r2, [pc, #168]	@ (80076ac <TIM_OC4_SetConfig+0x118>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d10d      	bne.n	8007624 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800760e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	031b      	lsls	r3, r3, #12
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007622:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a1f      	ldr	r2, [pc, #124]	@ (80076a4 <TIM_OC4_SetConfig+0x110>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d013      	beq.n	8007654 <TIM_OC4_SetConfig+0xc0>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a1e      	ldr	r2, [pc, #120]	@ (80076a8 <TIM_OC4_SetConfig+0x114>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d00f      	beq.n	8007654 <TIM_OC4_SetConfig+0xc0>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a1e      	ldr	r2, [pc, #120]	@ (80076b0 <TIM_OC4_SetConfig+0x11c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d00b      	beq.n	8007654 <TIM_OC4_SetConfig+0xc0>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a1d      	ldr	r2, [pc, #116]	@ (80076b4 <TIM_OC4_SetConfig+0x120>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d007      	beq.n	8007654 <TIM_OC4_SetConfig+0xc0>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a1c      	ldr	r2, [pc, #112]	@ (80076b8 <TIM_OC4_SetConfig+0x124>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d003      	beq.n	8007654 <TIM_OC4_SetConfig+0xc0>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a17      	ldr	r2, [pc, #92]	@ (80076ac <TIM_OC4_SetConfig+0x118>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d113      	bne.n	800767c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800765a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007662:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	019b      	lsls	r3, r3, #6
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	4313      	orrs	r3, r2
 800766e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	019b      	lsls	r3, r3, #6
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	4313      	orrs	r3, r2
 800767a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	621a      	str	r2, [r3, #32]
}
 8007696:	bf00      	nop
 8007698:	371c      	adds	r7, #28
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	40012c00 	.word	0x40012c00
 80076a8:	40013400 	.word	0x40013400
 80076ac:	40015000 	.word	0x40015000
 80076b0:	40014000 	.word	0x40014000
 80076b4:	40014400 	.word	0x40014400
 80076b8:	40014800 	.word	0x40014800

080076bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007700:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	041b      	lsls	r3, r3, #16
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	4313      	orrs	r3, r2
 800770c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a19      	ldr	r2, [pc, #100]	@ (8007778 <TIM_OC5_SetConfig+0xbc>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d013      	beq.n	800773e <TIM_OC5_SetConfig+0x82>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a18      	ldr	r2, [pc, #96]	@ (800777c <TIM_OC5_SetConfig+0xc0>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d00f      	beq.n	800773e <TIM_OC5_SetConfig+0x82>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a17      	ldr	r2, [pc, #92]	@ (8007780 <TIM_OC5_SetConfig+0xc4>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d00b      	beq.n	800773e <TIM_OC5_SetConfig+0x82>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a16      	ldr	r2, [pc, #88]	@ (8007784 <TIM_OC5_SetConfig+0xc8>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d007      	beq.n	800773e <TIM_OC5_SetConfig+0x82>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a15      	ldr	r2, [pc, #84]	@ (8007788 <TIM_OC5_SetConfig+0xcc>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d003      	beq.n	800773e <TIM_OC5_SetConfig+0x82>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a14      	ldr	r2, [pc, #80]	@ (800778c <TIM_OC5_SetConfig+0xd0>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d109      	bne.n	8007752 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007744:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	021b      	lsls	r3, r3, #8
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	4313      	orrs	r3, r2
 8007750:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	685a      	ldr	r2, [r3, #4]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	621a      	str	r2, [r3, #32]
}
 800776c:	bf00      	nop
 800776e:	371c      	adds	r7, #28
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr
 8007778:	40012c00 	.word	0x40012c00
 800777c:	40013400 	.word	0x40013400
 8007780:	40014000 	.word	0x40014000
 8007784:	40014400 	.word	0x40014400
 8007788:	40014800 	.word	0x40014800
 800778c:	40015000 	.word	0x40015000

08007790 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007790:	b480      	push	{r7}
 8007792:	b087      	sub	sp, #28
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80077be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	021b      	lsls	r3, r3, #8
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80077d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	051b      	lsls	r3, r3, #20
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a1a      	ldr	r2, [pc, #104]	@ (8007850 <TIM_OC6_SetConfig+0xc0>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d013      	beq.n	8007814 <TIM_OC6_SetConfig+0x84>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a19      	ldr	r2, [pc, #100]	@ (8007854 <TIM_OC6_SetConfig+0xc4>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d00f      	beq.n	8007814 <TIM_OC6_SetConfig+0x84>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a18      	ldr	r2, [pc, #96]	@ (8007858 <TIM_OC6_SetConfig+0xc8>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d00b      	beq.n	8007814 <TIM_OC6_SetConfig+0x84>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a17      	ldr	r2, [pc, #92]	@ (800785c <TIM_OC6_SetConfig+0xcc>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d007      	beq.n	8007814 <TIM_OC6_SetConfig+0x84>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a16      	ldr	r2, [pc, #88]	@ (8007860 <TIM_OC6_SetConfig+0xd0>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d003      	beq.n	8007814 <TIM_OC6_SetConfig+0x84>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a15      	ldr	r2, [pc, #84]	@ (8007864 <TIM_OC6_SetConfig+0xd4>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d109      	bne.n	8007828 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800781a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	695b      	ldr	r3, [r3, #20]
 8007820:	029b      	lsls	r3, r3, #10
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	4313      	orrs	r3, r2
 8007826:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	697a      	ldr	r2, [r7, #20]
 800782c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	685a      	ldr	r2, [r3, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	621a      	str	r2, [r3, #32]
}
 8007842:	bf00      	nop
 8007844:	371c      	adds	r7, #28
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	40012c00 	.word	0x40012c00
 8007854:	40013400 	.word	0x40013400
 8007858:	40014000 	.word	0x40014000
 800785c:	40014400 	.word	0x40014400
 8007860:	40014800 	.word	0x40014800
 8007864:	40015000 	.word	0x40015000

08007868 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007868:	b480      	push	{r7}
 800786a:	b087      	sub	sp, #28
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]
 8007874:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	f023 0201 	bic.w	r2, r3, #1
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6a1b      	ldr	r3, [r3, #32]
 800788c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	4a28      	ldr	r2, [pc, #160]	@ (8007934 <TIM_TI1_SetConfig+0xcc>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d01b      	beq.n	80078ce <TIM_TI1_SetConfig+0x66>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800789c:	d017      	beq.n	80078ce <TIM_TI1_SetConfig+0x66>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	4a25      	ldr	r2, [pc, #148]	@ (8007938 <TIM_TI1_SetConfig+0xd0>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d013      	beq.n	80078ce <TIM_TI1_SetConfig+0x66>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	4a24      	ldr	r2, [pc, #144]	@ (800793c <TIM_TI1_SetConfig+0xd4>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d00f      	beq.n	80078ce <TIM_TI1_SetConfig+0x66>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	4a23      	ldr	r2, [pc, #140]	@ (8007940 <TIM_TI1_SetConfig+0xd8>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d00b      	beq.n	80078ce <TIM_TI1_SetConfig+0x66>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	4a22      	ldr	r2, [pc, #136]	@ (8007944 <TIM_TI1_SetConfig+0xdc>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d007      	beq.n	80078ce <TIM_TI1_SetConfig+0x66>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	4a21      	ldr	r2, [pc, #132]	@ (8007948 <TIM_TI1_SetConfig+0xe0>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d003      	beq.n	80078ce <TIM_TI1_SetConfig+0x66>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4a20      	ldr	r2, [pc, #128]	@ (800794c <TIM_TI1_SetConfig+0xe4>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d101      	bne.n	80078d2 <TIM_TI1_SetConfig+0x6a>
 80078ce:	2301      	movs	r3, #1
 80078d0:	e000      	b.n	80078d4 <TIM_TI1_SetConfig+0x6c>
 80078d2:	2300      	movs	r3, #0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d008      	beq.n	80078ea <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f023 0303 	bic.w	r3, r3, #3
 80078de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	617b      	str	r3, [r7, #20]
 80078e8:	e003      	b.n	80078f2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f043 0301 	orr.w	r3, r3, #1
 80078f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	011b      	lsls	r3, r3, #4
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	4313      	orrs	r3, r2
 8007904:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	f023 030a 	bic.w	r3, r3, #10
 800790c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	f003 030a 	and.w	r3, r3, #10
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	4313      	orrs	r3, r2
 8007918:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	621a      	str	r2, [r3, #32]
}
 8007926:	bf00      	nop
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop
 8007934:	40012c00 	.word	0x40012c00
 8007938:	40000400 	.word	0x40000400
 800793c:	40000800 	.word	0x40000800
 8007940:	40000c00 	.word	0x40000c00
 8007944:	40013400 	.word	0x40013400
 8007948:	40014000 	.word	0x40014000
 800794c:	40015000 	.word	0x40015000

08007950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007950:	b480      	push	{r7}
 8007952:	b087      	sub	sp, #28
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6a1b      	ldr	r3, [r3, #32]
 8007960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	f023 0201 	bic.w	r2, r3, #1
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800797a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	011b      	lsls	r3, r3, #4
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	4313      	orrs	r3, r2
 8007984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f023 030a 	bic.w	r3, r3, #10
 800798c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	4313      	orrs	r3, r2
 8007994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	621a      	str	r2, [r3, #32]
}
 80079a2:	bf00      	nop
 80079a4:	371c      	adds	r7, #28
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b087      	sub	sp, #28
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	60f8      	str	r0, [r7, #12]
 80079b6:	60b9      	str	r1, [r7, #8]
 80079b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	f023 0210 	bic.w	r2, r3, #16
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80079d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	031b      	lsls	r3, r3, #12
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80079ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	011b      	lsls	r3, r3, #4
 80079f0:	693a      	ldr	r2, [r7, #16]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	621a      	str	r2, [r3, #32]
}
 8007a02:	bf00      	nop
 8007a04:	371c      	adds	r7, #28
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b085      	sub	sp, #20
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	f043 0307 	orr.w	r3, r3, #7
 8007a34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	609a      	str	r2, [r3, #8]
}
 8007a3c:	bf00      	nop
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
 8007a54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	021a      	lsls	r2, r3, #8
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	609a      	str	r2, [r3, #8]
}
 8007a7c:	bf00      	nop
 8007a7e:	371c      	adds	r7, #28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b087      	sub	sp, #28
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f003 031f 	and.w	r3, r3, #31
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6a1a      	ldr	r2, [r3, #32]
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	43db      	mvns	r3, r3
 8007aaa:	401a      	ands	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6a1a      	ldr	r2, [r3, #32]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f003 031f 	and.w	r3, r3, #31
 8007aba:	6879      	ldr	r1, [r7, #4]
 8007abc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	621a      	str	r2, [r3, #32]
}
 8007ac6:	bf00      	nop
 8007ac8:	371c      	adds	r7, #28
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b08a      	sub	sp, #40	@ 0x28
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d101      	bne.n	8007ae6 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e0a0      	b.n	8007c28 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d106      	bne.n	8007b00 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7fa fb0c 	bl	8002118 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2202      	movs	r2, #2
 8007b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	3304      	adds	r3, #4
 8007b10:	4619      	mov	r1, r3
 8007b12:	4610      	mov	r0, r2
 8007b14:	f7ff fad6 	bl	80070c4 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6818      	ldr	r0, [r3, #0]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	6819      	ldr	r1, [r3, #0]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	2203      	movs	r2, #3
 8007b26:	f7ff fe9f 	bl	8007868 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	699a      	ldr	r2, [r3, #24]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 020c 	bic.w	r2, r2, #12
 8007b38:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6999      	ldr	r1, [r3, #24]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	685a      	ldr	r2, [r3, #4]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007b5a:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	6812      	ldr	r2, [r2, #0]
 8007b66:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b6e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689a      	ldr	r2, [r3, #8]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b7e:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	6812      	ldr	r2, [r2, #0]
 8007b8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b8e:	f023 0307 	bic.w	r3, r3, #7
 8007b92:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689a      	ldr	r2, [r3, #8]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f042 0204 	orr.w	r2, r2, #4
 8007ba2:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8007bac:	2370      	movs	r3, #112	@ 0x70
 8007bae:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f107 020c 	add.w	r2, r7, #12
 8007bca:	4611      	mov	r1, r2
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7ff fbbb 	bl	8007348 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	6812      	ldr	r2, [r2, #0]
 8007bdc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007be0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007be4:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8007bf4:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3728      	adds	r7, #40	@ 0x28
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d109      	bne.n	8007c54 <HAL_TIMEx_PWMN_Start+0x24>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	bf14      	ite	ne
 8007c4c:	2301      	movne	r3, #1
 8007c4e:	2300      	moveq	r3, #0
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	e022      	b.n	8007c9a <HAL_TIMEx_PWMN_Start+0x6a>
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2b04      	cmp	r3, #4
 8007c58:	d109      	bne.n	8007c6e <HAL_TIMEx_PWMN_Start+0x3e>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	bf14      	ite	ne
 8007c66:	2301      	movne	r3, #1
 8007c68:	2300      	moveq	r3, #0
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	e015      	b.n	8007c9a <HAL_TIMEx_PWMN_Start+0x6a>
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	2b08      	cmp	r3, #8
 8007c72:	d109      	bne.n	8007c88 <HAL_TIMEx_PWMN_Start+0x58>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	bf14      	ite	ne
 8007c80:	2301      	movne	r3, #1
 8007c82:	2300      	moveq	r3, #0
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	e008      	b.n	8007c9a <HAL_TIMEx_PWMN_Start+0x6a>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	bf14      	ite	ne
 8007c94:	2301      	movne	r3, #1
 8007c96:	2300      	moveq	r3, #0
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e073      	b.n	8007d8a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d104      	bne.n	8007cb2 <HAL_TIMEx_PWMN_Start+0x82>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2202      	movs	r2, #2
 8007cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cb0:	e013      	b.n	8007cda <HAL_TIMEx_PWMN_Start+0xaa>
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b04      	cmp	r3, #4
 8007cb6:	d104      	bne.n	8007cc2 <HAL_TIMEx_PWMN_Start+0x92>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cc0:	e00b      	b.n	8007cda <HAL_TIMEx_PWMN_Start+0xaa>
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	2b08      	cmp	r3, #8
 8007cc6:	d104      	bne.n	8007cd2 <HAL_TIMEx_PWMN_Start+0xa2>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007cd0:	e003      	b.n	8007cda <HAL_TIMEx_PWMN_Start+0xaa>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2204      	movs	r2, #4
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 fa52 	bl	800818c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007cf6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a25      	ldr	r2, [pc, #148]	@ (8007d94 <HAL_TIMEx_PWMN_Start+0x164>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d022      	beq.n	8007d48 <HAL_TIMEx_PWMN_Start+0x118>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d0a:	d01d      	beq.n	8007d48 <HAL_TIMEx_PWMN_Start+0x118>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a21      	ldr	r2, [pc, #132]	@ (8007d98 <HAL_TIMEx_PWMN_Start+0x168>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d018      	beq.n	8007d48 <HAL_TIMEx_PWMN_Start+0x118>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a20      	ldr	r2, [pc, #128]	@ (8007d9c <HAL_TIMEx_PWMN_Start+0x16c>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d013      	beq.n	8007d48 <HAL_TIMEx_PWMN_Start+0x118>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a1e      	ldr	r2, [pc, #120]	@ (8007da0 <HAL_TIMEx_PWMN_Start+0x170>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d00e      	beq.n	8007d48 <HAL_TIMEx_PWMN_Start+0x118>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8007da4 <HAL_TIMEx_PWMN_Start+0x174>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d009      	beq.n	8007d48 <HAL_TIMEx_PWMN_Start+0x118>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a1b      	ldr	r2, [pc, #108]	@ (8007da8 <HAL_TIMEx_PWMN_Start+0x178>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d004      	beq.n	8007d48 <HAL_TIMEx_PWMN_Start+0x118>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a1a      	ldr	r2, [pc, #104]	@ (8007dac <HAL_TIMEx_PWMN_Start+0x17c>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d115      	bne.n	8007d74 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	689a      	ldr	r2, [r3, #8]
 8007d4e:	4b18      	ldr	r3, [pc, #96]	@ (8007db0 <HAL_TIMEx_PWMN_Start+0x180>)
 8007d50:	4013      	ands	r3, r2
 8007d52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2b06      	cmp	r3, #6
 8007d58:	d015      	beq.n	8007d86 <HAL_TIMEx_PWMN_Start+0x156>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d60:	d011      	beq.n	8007d86 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f042 0201 	orr.w	r2, r2, #1
 8007d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d72:	e008      	b.n	8007d86 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f042 0201 	orr.w	r2, r2, #1
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	e000      	b.n	8007d88 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	40012c00 	.word	0x40012c00
 8007d98:	40000400 	.word	0x40000400
 8007d9c:	40000800 	.word	0x40000800
 8007da0:	40000c00 	.word	0x40000c00
 8007da4:	40013400 	.word	0x40013400
 8007da8:	40014000 	.word	0x40014000
 8007dac:	40015000 	.word	0x40015000
 8007db0:	00010007 	.word	0x00010007

08007db4 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 f9e0 	bl	800818c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6a1a      	ldr	r2, [r3, #32]
 8007dd2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10f      	bne.n	8007dfc <HAL_TIMEx_PWMN_Stop+0x48>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6a1a      	ldr	r2, [r3, #32]
 8007de2:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007de6:	4013      	ands	r3, r2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d107      	bne.n	8007dfc <HAL_TIMEx_PWMN_Stop+0x48>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007dfa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6a1a      	ldr	r2, [r3, #32]
 8007e02:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007e06:	4013      	ands	r3, r2
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10f      	bne.n	8007e2c <HAL_TIMEx_PWMN_Stop+0x78>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6a1a      	ldr	r2, [r3, #32]
 8007e12:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007e16:	4013      	ands	r3, r2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d107      	bne.n	8007e2c <HAL_TIMEx_PWMN_Stop+0x78>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f022 0201 	bic.w	r2, r2, #1
 8007e2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d104      	bne.n	8007e3c <HAL_TIMEx_PWMN_Stop+0x88>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e3a:	e013      	b.n	8007e64 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	d104      	bne.n	8007e4c <HAL_TIMEx_PWMN_Stop+0x98>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e4a:	e00b      	b.n	8007e64 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	2b08      	cmp	r3, #8
 8007e50:	d104      	bne.n	8007e5c <HAL_TIMEx_PWMN_Stop+0xa8>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e5a:	e003      	b.n	8007e64 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d101      	bne.n	8007e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e84:	2302      	movs	r3, #2
 8007e86:	e074      	b.n	8007f72 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2202      	movs	r2, #2
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a34      	ldr	r2, [pc, #208]	@ (8007f80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d009      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a33      	ldr	r2, [pc, #204]	@ (8007f84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d004      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a31      	ldr	r2, [pc, #196]	@ (8007f88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d108      	bne.n	8007ed8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007ecc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a21      	ldr	r2, [pc, #132]	@ (8007f80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d022      	beq.n	8007f46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f08:	d01d      	beq.n	8007f46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8007f8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d018      	beq.n	8007f46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a1d      	ldr	r2, [pc, #116]	@ (8007f90 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d013      	beq.n	8007f46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a1c      	ldr	r2, [pc, #112]	@ (8007f94 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d00e      	beq.n	8007f46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a15      	ldr	r2, [pc, #84]	@ (8007f84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d009      	beq.n	8007f46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a18      	ldr	r2, [pc, #96]	@ (8007f98 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d004      	beq.n	8007f46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a11      	ldr	r2, [pc, #68]	@ (8007f88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d10c      	bne.n	8007f60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68ba      	ldr	r2, [r7, #8]
 8007f5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	40012c00 	.word	0x40012c00
 8007f84:	40013400 	.word	0x40013400
 8007f88:	40015000 	.word	0x40015000
 8007f8c:	40000400 	.word	0x40000400
 8007f90:	40000800 	.word	0x40000800
 8007f94:	40000c00 	.word	0x40000c00
 8007f98:	40014000 	.word	0x40014000

08007f9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d101      	bne.n	8007fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	e096      	b.n	80080e6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	4313      	orrs	r3, r2
 8008004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	4313      	orrs	r3, r2
 8008012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800801e:	4313      	orrs	r3, r2
 8008020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	041b      	lsls	r3, r3, #16
 800802e:	4313      	orrs	r3, r2
 8008030:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a2f      	ldr	r2, [pc, #188]	@ (80080f4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d009      	beq.n	8008050 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a2d      	ldr	r2, [pc, #180]	@ (80080f8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d004      	beq.n	8008050 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a2c      	ldr	r2, [pc, #176]	@ (80080fc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d106      	bne.n	800805e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	4313      	orrs	r3, r2
 800805c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a24      	ldr	r2, [pc, #144]	@ (80080f4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d009      	beq.n	800807c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a22      	ldr	r2, [pc, #136]	@ (80080f8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d004      	beq.n	800807c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a21      	ldr	r2, [pc, #132]	@ (80080fc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d12b      	bne.n	80080d4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008086:	051b      	lsls	r3, r3, #20
 8008088:	4313      	orrs	r3, r2
 800808a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	6a1b      	ldr	r3, [r3, #32]
 8008096:	4313      	orrs	r3, r2
 8008098:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a4:	4313      	orrs	r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a11      	ldr	r2, [pc, #68]	@ (80080f4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d009      	beq.n	80080c6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a10      	ldr	r2, [pc, #64]	@ (80080f8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d004      	beq.n	80080c6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a0e      	ldr	r2, [pc, #56]	@ (80080fc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d106      	bne.n	80080d4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d0:	4313      	orrs	r3, r2
 80080d2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	40012c00 	.word	0x40012c00
 80080f8:	40013400 	.word	0x40013400
 80080fc:	40015000 	.word	0x40015000

08008100 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008130:	bf00      	nop
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008144:	bf00      	nop
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr

08008150 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800818c:	b480      	push	{r7}
 800818e:	b087      	sub	sp, #28
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f003 031f 	and.w	r3, r3, #31
 800819e:	2204      	movs	r2, #4
 80081a0:	fa02 f303 	lsl.w	r3, r2, r3
 80081a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6a1a      	ldr	r2, [r3, #32]
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	43db      	mvns	r3, r3
 80081ae:	401a      	ands	r2, r3
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6a1a      	ldr	r2, [r3, #32]
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	f003 031f 	and.w	r3, r3, #31
 80081be:	6879      	ldr	r1, [r7, #4]
 80081c0:	fa01 f303 	lsl.w	r3, r1, r3
 80081c4:	431a      	orrs	r2, r3
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	621a      	str	r2, [r3, #32]
}
 80081ca:	bf00      	nop
 80081cc:	371c      	adds	r7, #28
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b082      	sub	sp, #8
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d101      	bne.n	80081e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e042      	b.n	800826e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d106      	bne.n	8008200 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7fa f8ee 	bl	80023dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2224      	movs	r2, #36	@ 0x24
 8008204:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f022 0201 	bic.w	r2, r2, #1
 8008216:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 fc51 	bl	8008ac0 <UART_SetConfig>
 800821e:	4603      	mov	r3, r0
 8008220:	2b01      	cmp	r3, #1
 8008222:	d101      	bne.n	8008228 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008224:	2301      	movs	r3, #1
 8008226:	e022      	b.n	800826e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 ff41 	bl	80090b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008244:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008254:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f042 0201 	orr.w	r2, r2, #1
 8008264:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 ffc8 	bl	80091fc <UART_CheckIdleState>
 800826c:	4603      	mov	r3, r0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b08a      	sub	sp, #40	@ 0x28
 800827a:	af02      	add	r7, sp, #8
 800827c:	60f8      	str	r0, [r7, #12]
 800827e:	60b9      	str	r1, [r7, #8]
 8008280:	603b      	str	r3, [r7, #0]
 8008282:	4613      	mov	r3, r2
 8008284:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800828c:	2b20      	cmp	r3, #32
 800828e:	f040 8083 	bne.w	8008398 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d002      	beq.n	800829e <HAL_UART_Transmit+0x28>
 8008298:	88fb      	ldrh	r3, [r7, #6]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d101      	bne.n	80082a2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e07b      	b.n	800839a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d101      	bne.n	80082b0 <HAL_UART_Transmit+0x3a>
 80082ac:	2302      	movs	r3, #2
 80082ae:	e074      	b.n	800839a <HAL_UART_Transmit+0x124>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2221      	movs	r2, #33	@ 0x21
 80082c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082c8:	f7fa fb0e 	bl	80028e8 <HAL_GetTick>
 80082cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	88fa      	ldrh	r2, [r7, #6]
 80082d2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	88fa      	ldrh	r2, [r7, #6]
 80082da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082e6:	d108      	bne.n	80082fa <HAL_UART_Transmit+0x84>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d104      	bne.n	80082fa <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80082f0:	2300      	movs	r3, #0
 80082f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	61bb      	str	r3, [r7, #24]
 80082f8:	e003      	b.n	8008302 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082fe:	2300      	movs	r3, #0
 8008300:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 800830a:	e02c      	b.n	8008366 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	2200      	movs	r2, #0
 8008314:	2180      	movs	r1, #128	@ 0x80
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 ffbb 	bl	8009292 <UART_WaitOnFlagUntilTimeout>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e039      	b.n	800839a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10b      	bne.n	8008344 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	881b      	ldrh	r3, [r3, #0]
 8008330:	461a      	mov	r2, r3
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800833a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	3302      	adds	r3, #2
 8008340:	61bb      	str	r3, [r7, #24]
 8008342:	e007      	b.n	8008354 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	781a      	ldrb	r2, [r3, #0]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	3301      	adds	r3, #1
 8008352:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800835a:	b29b      	uxth	r3, r3
 800835c:	3b01      	subs	r3, #1
 800835e:	b29a      	uxth	r2, r3
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800836c:	b29b      	uxth	r3, r3
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1cc      	bne.n	800830c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	2200      	movs	r2, #0
 800837a:	2140      	movs	r1, #64	@ 0x40
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f000 ff88 	bl	8009292 <UART_WaitOnFlagUntilTimeout>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e006      	b.n	800839a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2220      	movs	r2, #32
 8008390:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	e000      	b.n	800839a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008398:	2302      	movs	r3, #2
  }
}
 800839a:	4618      	mov	r0, r3
 800839c:	3720      	adds	r7, #32
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
	...

080083a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b08a      	sub	sp, #40	@ 0x28
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	4613      	mov	r3, r2
 80083b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083b8:	2b20      	cmp	r3, #32
 80083ba:	d142      	bne.n	8008442 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d002      	beq.n	80083c8 <HAL_UART_Receive_IT+0x24>
 80083c2:	88fb      	ldrh	r3, [r7, #6]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d101      	bne.n	80083cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80083c8:	2301      	movs	r3, #1
 80083ca:	e03b      	b.n	8008444 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d101      	bne.n	80083da <HAL_UART_Receive_IT+0x36>
 80083d6:	2302      	movs	r3, #2
 80083d8:	e034      	b.n	8008444 <HAL_UART_Receive_IT+0xa0>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a17      	ldr	r2, [pc, #92]	@ (800844c <HAL_UART_Receive_IT+0xa8>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d01f      	beq.n	8008432 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d018      	beq.n	8008432 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	e853 3f00 	ldrex	r3, [r3]
 800840c:	613b      	str	r3, [r7, #16]
   return(result);
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008414:	627b      	str	r3, [r7, #36]	@ 0x24
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800841e:	623b      	str	r3, [r7, #32]
 8008420:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008422:	69f9      	ldr	r1, [r7, #28]
 8008424:	6a3a      	ldr	r2, [r7, #32]
 8008426:	e841 2300 	strex	r3, r2, [r1]
 800842a:	61bb      	str	r3, [r7, #24]
   return(result);
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1e6      	bne.n	8008400 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008432:	88fb      	ldrh	r3, [r7, #6]
 8008434:	461a      	mov	r2, r3
 8008436:	68b9      	ldr	r1, [r7, #8]
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f000 fff3 	bl	8009424 <UART_Start_Receive_IT>
 800843e:	4603      	mov	r3, r0
 8008440:	e000      	b.n	8008444 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008442:	2302      	movs	r3, #2
  }
}
 8008444:	4618      	mov	r0, r3
 8008446:	3728      	adds	r7, #40	@ 0x28
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	40008000 	.word	0x40008000

08008450 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b0ba      	sub	sp, #232	@ 0xe8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	69db      	ldr	r3, [r3, #28]
 800845e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008476:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800847a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800847e:	4013      	ands	r3, r2
 8008480:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008484:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008488:	2b00      	cmp	r3, #0
 800848a:	d11b      	bne.n	80084c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800848c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008490:	f003 0320 	and.w	r3, r3, #32
 8008494:	2b00      	cmp	r3, #0
 8008496:	d015      	beq.n	80084c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800849c:	f003 0320 	and.w	r3, r3, #32
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d105      	bne.n	80084b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80084a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d009      	beq.n	80084c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 82d6 	beq.w	8008a66 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	4798      	blx	r3
      }
      return;
 80084c2:	e2d0      	b.n	8008a66 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80084c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f000 811f 	beq.w	800870c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80084ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80084d2:	4b8b      	ldr	r3, [pc, #556]	@ (8008700 <HAL_UART_IRQHandler+0x2b0>)
 80084d4:	4013      	ands	r3, r2
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d106      	bne.n	80084e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80084da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80084de:	4b89      	ldr	r3, [pc, #548]	@ (8008704 <HAL_UART_IRQHandler+0x2b4>)
 80084e0:	4013      	ands	r3, r2
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 8112 	beq.w	800870c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084ec:	f003 0301 	and.w	r3, r3, #1
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d011      	beq.n	8008518 <HAL_UART_IRQHandler+0xc8>
 80084f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00b      	beq.n	8008518 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2201      	movs	r2, #1
 8008506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800850e:	f043 0201 	orr.w	r2, r3, #1
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b00      	cmp	r3, #0
 8008522:	d011      	beq.n	8008548 <HAL_UART_IRQHandler+0xf8>
 8008524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00b      	beq.n	8008548 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2202      	movs	r2, #2
 8008536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800853e:	f043 0204 	orr.w	r2, r3, #4
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800854c:	f003 0304 	and.w	r3, r3, #4
 8008550:	2b00      	cmp	r3, #0
 8008552:	d011      	beq.n	8008578 <HAL_UART_IRQHandler+0x128>
 8008554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008558:	f003 0301 	and.w	r3, r3, #1
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00b      	beq.n	8008578 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2204      	movs	r2, #4
 8008566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800856e:	f043 0202 	orr.w	r2, r3, #2
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800857c:	f003 0308 	and.w	r3, r3, #8
 8008580:	2b00      	cmp	r3, #0
 8008582:	d017      	beq.n	80085b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008588:	f003 0320 	and.w	r3, r3, #32
 800858c:	2b00      	cmp	r3, #0
 800858e:	d105      	bne.n	800859c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008590:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008594:	4b5a      	ldr	r3, [pc, #360]	@ (8008700 <HAL_UART_IRQHandler+0x2b0>)
 8008596:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00b      	beq.n	80085b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2208      	movs	r2, #8
 80085a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085aa:	f043 0208 	orr.w	r2, r3, #8
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d012      	beq.n	80085e6 <HAL_UART_IRQHandler+0x196>
 80085c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00c      	beq.n	80085e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80085d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085dc:	f043 0220 	orr.w	r2, r3, #32
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 823c 	beq.w	8008a6a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80085f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085f6:	f003 0320 	and.w	r3, r3, #32
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d013      	beq.n	8008626 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80085fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008602:	f003 0320 	and.w	r3, r3, #32
 8008606:	2b00      	cmp	r3, #0
 8008608:	d105      	bne.n	8008616 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800860a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800860e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d007      	beq.n	8008626 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800862c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800863a:	2b40      	cmp	r3, #64	@ 0x40
 800863c:	d005      	beq.n	800864a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800863e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008642:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008646:	2b00      	cmp	r3, #0
 8008648:	d04f      	beq.n	80086ea <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f001 f814 	bl	8009678 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800865a:	2b40      	cmp	r3, #64	@ 0x40
 800865c:	d141      	bne.n	80086e2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3308      	adds	r3, #8
 8008664:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008668:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800866c:	e853 3f00 	ldrex	r3, [r3]
 8008670:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008674:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008678:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800867c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3308      	adds	r3, #8
 8008686:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800868a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800868e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008692:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008696:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800869a:	e841 2300 	strex	r3, r2, [r1]
 800869e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80086a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1d9      	bne.n	800865e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d013      	beq.n	80086da <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086b6:	4a14      	ldr	r2, [pc, #80]	@ (8008708 <HAL_UART_IRQHandler+0x2b8>)
 80086b8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086be:	4618      	mov	r0, r3
 80086c0:	f7fc fa7c 	bl	8004bbc <HAL_DMA_Abort_IT>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d017      	beq.n	80086fa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 80086d4:	4610      	mov	r0, r2
 80086d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d8:	e00f      	b.n	80086fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f9da 	bl	8008a94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e0:	e00b      	b.n	80086fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f9d6 	bl	8008a94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e8:	e007      	b.n	80086fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f9d2 	bl	8008a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 80086f8:	e1b7      	b.n	8008a6a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086fa:	bf00      	nop
    return;
 80086fc:	e1b5      	b.n	8008a6a <HAL_UART_IRQHandler+0x61a>
 80086fe:	bf00      	nop
 8008700:	10000001 	.word	0x10000001
 8008704:	04000120 	.word	0x04000120
 8008708:	08009745 	.word	0x08009745

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008710:	2b01      	cmp	r3, #1
 8008712:	f040 814a 	bne.w	80089aa <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800871a:	f003 0310 	and.w	r3, r3, #16
 800871e:	2b00      	cmp	r3, #0
 8008720:	f000 8143 	beq.w	80089aa <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008728:	f003 0310 	and.w	r3, r3, #16
 800872c:	2b00      	cmp	r3, #0
 800872e:	f000 813c 	beq.w	80089aa <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2210      	movs	r2, #16
 8008738:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008744:	2b40      	cmp	r3, #64	@ 0x40
 8008746:	f040 80b5 	bne.w	80088b4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008756:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800875a:	2b00      	cmp	r3, #0
 800875c:	f000 8187 	beq.w	8008a6e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800876a:	429a      	cmp	r2, r3
 800876c:	f080 817f 	bcs.w	8008a6e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008776:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0320 	and.w	r3, r3, #32
 8008786:	2b00      	cmp	r3, #0
 8008788:	f040 8086 	bne.w	8008898 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008794:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008798:	e853 3f00 	ldrex	r3, [r3]
 800879c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80087a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80087a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	461a      	mov	r2, r3
 80087b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80087ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80087c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80087c6:	e841 2300 	strex	r3, r2, [r1]
 80087ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80087ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1da      	bne.n	800878c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	3308      	adds	r3, #8
 80087dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80087e0:	e853 3f00 	ldrex	r3, [r3]
 80087e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80087e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087e8:	f023 0301 	bic.w	r3, r3, #1
 80087ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3308      	adds	r3, #8
 80087f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80087fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80087fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008800:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008802:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008806:	e841 2300 	strex	r3, r2, [r1]
 800880a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800880c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1e1      	bne.n	80087d6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3308      	adds	r3, #8
 8008818:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800881c:	e853 3f00 	ldrex	r3, [r3]
 8008820:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008822:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008828:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3308      	adds	r3, #8
 8008832:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008836:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008838:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800883c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800883e:	e841 2300 	strex	r3, r2, [r1]
 8008842:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008844:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1e3      	bne.n	8008812 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2220      	movs	r2, #32
 800884e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008860:	e853 3f00 	ldrex	r3, [r3]
 8008864:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008866:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008868:	f023 0310 	bic.w	r3, r3, #16
 800886c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	461a      	mov	r2, r3
 8008876:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800887a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800887c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008880:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008882:	e841 2300 	strex	r3, r2, [r1]
 8008886:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008888:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1e4      	bne.n	8008858 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008892:	4618      	mov	r0, r3
 8008894:	f7fc f939 	bl	8004b0a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f8fb 	bl	8008aa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088b2:	e0dc      	b.n	8008a6e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f000 80ce 	beq.w	8008a72 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80088d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 80c9 	beq.w	8008a72 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e8:	e853 3f00 	ldrex	r3, [r3]
 80088ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	461a      	mov	r2, r3
 80088fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008902:	647b      	str	r3, [r7, #68]	@ 0x44
 8008904:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008906:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008908:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800890a:	e841 2300 	strex	r3, r2, [r1]
 800890e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1e4      	bne.n	80088e0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3308      	adds	r3, #8
 800891c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008920:	e853 3f00 	ldrex	r3, [r3]
 8008924:	623b      	str	r3, [r7, #32]
   return(result);
 8008926:	6a3b      	ldr	r3, [r7, #32]
 8008928:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800892c:	f023 0301 	bic.w	r3, r3, #1
 8008930:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	3308      	adds	r3, #8
 800893a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800893e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008940:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008942:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008946:	e841 2300 	strex	r3, r2, [r1]
 800894a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800894c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1e1      	bne.n	8008916 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2220      	movs	r2, #32
 8008956:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	e853 3f00 	ldrex	r3, [r3]
 8008972:	60fb      	str	r3, [r7, #12]
   return(result);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f023 0310 	bic.w	r3, r3, #16
 800897a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	461a      	mov	r2, r3
 8008984:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008988:	61fb      	str	r3, [r7, #28]
 800898a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898c:	69b9      	ldr	r1, [r7, #24]
 800898e:	69fa      	ldr	r2, [r7, #28]
 8008990:	e841 2300 	strex	r3, r2, [r1]
 8008994:	617b      	str	r3, [r7, #20]
   return(result);
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1e4      	bne.n	8008966 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800899c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80089a0:	4619      	mov	r1, r3
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 f880 	bl	8008aa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089a8:	e063      	b.n	8008a72 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80089aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d00e      	beq.n	80089d4 <HAL_UART_IRQHandler+0x584>
 80089b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d008      	beq.n	80089d4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80089ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f001 fb57 	bl	800a080 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089d2:	e051      	b.n	8008a78 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80089d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d014      	beq.n	8008a0a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80089e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d105      	bne.n	80089f8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80089ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d008      	beq.n	8008a0a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d03a      	beq.n	8008a76 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	4798      	blx	r3
    }
    return;
 8008a08:	e035      	b.n	8008a76 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d009      	beq.n	8008a2a <HAL_UART_IRQHandler+0x5da>
 8008a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fea4 	bl	8009770 <UART_EndTransmit_IT>
    return;
 8008a28:	e026      	b.n	8008a78 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d009      	beq.n	8008a4a <HAL_UART_IRQHandler+0x5fa>
 8008a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a3a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d003      	beq.n	8008a4a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f001 fb30 	bl	800a0a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a48:	e016      	b.n	8008a78 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d010      	beq.n	8008a78 <HAL_UART_IRQHandler+0x628>
 8008a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	da0c      	bge.n	8008a78 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f001 fb18 	bl	800a094 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a64:	e008      	b.n	8008a78 <HAL_UART_IRQHandler+0x628>
      return;
 8008a66:	bf00      	nop
 8008a68:	e006      	b.n	8008a78 <HAL_UART_IRQHandler+0x628>
    return;
 8008a6a:	bf00      	nop
 8008a6c:	e004      	b.n	8008a78 <HAL_UART_IRQHandler+0x628>
      return;
 8008a6e:	bf00      	nop
 8008a70:	e002      	b.n	8008a78 <HAL_UART_IRQHandler+0x628>
      return;
 8008a72:	bf00      	nop
 8008a74:	e000      	b.n	8008a78 <HAL_UART_IRQHandler+0x628>
    return;
 8008a76:	bf00      	nop
  }
}
 8008a78:	37e8      	adds	r7, #232	@ 0xe8
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop

08008a80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a9c:	bf00      	nop
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ab4:	bf00      	nop
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ac4:	b08c      	sub	sp, #48	@ 0x30
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008aca:	2300      	movs	r3, #0
 8008acc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	689a      	ldr	r2, [r3, #8]
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	431a      	orrs	r2, r3
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	69db      	ldr	r3, [r3, #28]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	4baa      	ldr	r3, [pc, #680]	@ (8008d98 <UART_SetConfig+0x2d8>)
 8008af0:	4013      	ands	r3, r2
 8008af2:	697a      	ldr	r2, [r7, #20]
 8008af4:	6812      	ldr	r2, [r2, #0]
 8008af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008af8:	430b      	orrs	r3, r1
 8008afa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	68da      	ldr	r2, [r3, #12]
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	699b      	ldr	r3, [r3, #24]
 8008b16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a9f      	ldr	r2, [pc, #636]	@ (8008d9c <UART_SetConfig+0x2dc>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d004      	beq.n	8008b2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008b36:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008b3a:	697a      	ldr	r2, [r7, #20]
 8008b3c:	6812      	ldr	r2, [r2, #0]
 8008b3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b40:	430b      	orrs	r3, r1
 8008b42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b4a:	f023 010f 	bic.w	r1, r3, #15
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	430a      	orrs	r2, r1
 8008b58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a90      	ldr	r2, [pc, #576]	@ (8008da0 <UART_SetConfig+0x2e0>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d125      	bne.n	8008bb0 <UART_SetConfig+0xf0>
 8008b64:	4b8f      	ldr	r3, [pc, #572]	@ (8008da4 <UART_SetConfig+0x2e4>)
 8008b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b6a:	f003 0303 	and.w	r3, r3, #3
 8008b6e:	2b03      	cmp	r3, #3
 8008b70:	d81a      	bhi.n	8008ba8 <UART_SetConfig+0xe8>
 8008b72:	a201      	add	r2, pc, #4	@ (adr r2, 8008b78 <UART_SetConfig+0xb8>)
 8008b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b78:	08008b89 	.word	0x08008b89
 8008b7c:	08008b99 	.word	0x08008b99
 8008b80:	08008b91 	.word	0x08008b91
 8008b84:	08008ba1 	.word	0x08008ba1
 8008b88:	2301      	movs	r3, #1
 8008b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b8e:	e116      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008b90:	2302      	movs	r3, #2
 8008b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b96:	e112      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008b98:	2304      	movs	r3, #4
 8008b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b9e:	e10e      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008ba0:	2308      	movs	r3, #8
 8008ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ba6:	e10a      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008ba8:	2310      	movs	r3, #16
 8008baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bae:	e106      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a7c      	ldr	r2, [pc, #496]	@ (8008da8 <UART_SetConfig+0x2e8>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d138      	bne.n	8008c2c <UART_SetConfig+0x16c>
 8008bba:	4b7a      	ldr	r3, [pc, #488]	@ (8008da4 <UART_SetConfig+0x2e4>)
 8008bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bc0:	f003 030c 	and.w	r3, r3, #12
 8008bc4:	2b0c      	cmp	r3, #12
 8008bc6:	d82d      	bhi.n	8008c24 <UART_SetConfig+0x164>
 8008bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8008bd0 <UART_SetConfig+0x110>)
 8008bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bce:	bf00      	nop
 8008bd0:	08008c05 	.word	0x08008c05
 8008bd4:	08008c25 	.word	0x08008c25
 8008bd8:	08008c25 	.word	0x08008c25
 8008bdc:	08008c25 	.word	0x08008c25
 8008be0:	08008c15 	.word	0x08008c15
 8008be4:	08008c25 	.word	0x08008c25
 8008be8:	08008c25 	.word	0x08008c25
 8008bec:	08008c25 	.word	0x08008c25
 8008bf0:	08008c0d 	.word	0x08008c0d
 8008bf4:	08008c25 	.word	0x08008c25
 8008bf8:	08008c25 	.word	0x08008c25
 8008bfc:	08008c25 	.word	0x08008c25
 8008c00:	08008c1d 	.word	0x08008c1d
 8008c04:	2300      	movs	r3, #0
 8008c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c0a:	e0d8      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008c0c:	2302      	movs	r3, #2
 8008c0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c12:	e0d4      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008c14:	2304      	movs	r3, #4
 8008c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c1a:	e0d0      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008c1c:	2308      	movs	r3, #8
 8008c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c22:	e0cc      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008c24:	2310      	movs	r3, #16
 8008c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c2a:	e0c8      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a5e      	ldr	r2, [pc, #376]	@ (8008dac <UART_SetConfig+0x2ec>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d125      	bne.n	8008c82 <UART_SetConfig+0x1c2>
 8008c36:	4b5b      	ldr	r3, [pc, #364]	@ (8008da4 <UART_SetConfig+0x2e4>)
 8008c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c3c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008c40:	2b30      	cmp	r3, #48	@ 0x30
 8008c42:	d016      	beq.n	8008c72 <UART_SetConfig+0x1b2>
 8008c44:	2b30      	cmp	r3, #48	@ 0x30
 8008c46:	d818      	bhi.n	8008c7a <UART_SetConfig+0x1ba>
 8008c48:	2b20      	cmp	r3, #32
 8008c4a:	d00a      	beq.n	8008c62 <UART_SetConfig+0x1a2>
 8008c4c:	2b20      	cmp	r3, #32
 8008c4e:	d814      	bhi.n	8008c7a <UART_SetConfig+0x1ba>
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d002      	beq.n	8008c5a <UART_SetConfig+0x19a>
 8008c54:	2b10      	cmp	r3, #16
 8008c56:	d008      	beq.n	8008c6a <UART_SetConfig+0x1aa>
 8008c58:	e00f      	b.n	8008c7a <UART_SetConfig+0x1ba>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c60:	e0ad      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008c62:	2302      	movs	r3, #2
 8008c64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c68:	e0a9      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008c6a:	2304      	movs	r3, #4
 8008c6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c70:	e0a5      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008c72:	2308      	movs	r3, #8
 8008c74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c78:	e0a1      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008c7a:	2310      	movs	r3, #16
 8008c7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c80:	e09d      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a4a      	ldr	r2, [pc, #296]	@ (8008db0 <UART_SetConfig+0x2f0>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d125      	bne.n	8008cd8 <UART_SetConfig+0x218>
 8008c8c:	4b45      	ldr	r3, [pc, #276]	@ (8008da4 <UART_SetConfig+0x2e4>)
 8008c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c92:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008c96:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c98:	d016      	beq.n	8008cc8 <UART_SetConfig+0x208>
 8008c9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c9c:	d818      	bhi.n	8008cd0 <UART_SetConfig+0x210>
 8008c9e:	2b80      	cmp	r3, #128	@ 0x80
 8008ca0:	d00a      	beq.n	8008cb8 <UART_SetConfig+0x1f8>
 8008ca2:	2b80      	cmp	r3, #128	@ 0x80
 8008ca4:	d814      	bhi.n	8008cd0 <UART_SetConfig+0x210>
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d002      	beq.n	8008cb0 <UART_SetConfig+0x1f0>
 8008caa:	2b40      	cmp	r3, #64	@ 0x40
 8008cac:	d008      	beq.n	8008cc0 <UART_SetConfig+0x200>
 8008cae:	e00f      	b.n	8008cd0 <UART_SetConfig+0x210>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cb6:	e082      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008cb8:	2302      	movs	r3, #2
 8008cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cbe:	e07e      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008cc0:	2304      	movs	r3, #4
 8008cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cc6:	e07a      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008cc8:	2308      	movs	r3, #8
 8008cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cce:	e076      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008cd0:	2310      	movs	r3, #16
 8008cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cd6:	e072      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a35      	ldr	r2, [pc, #212]	@ (8008db4 <UART_SetConfig+0x2f4>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d12a      	bne.n	8008d38 <UART_SetConfig+0x278>
 8008ce2:	4b30      	ldr	r3, [pc, #192]	@ (8008da4 <UART_SetConfig+0x2e4>)
 8008ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ce8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008cec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008cf0:	d01a      	beq.n	8008d28 <UART_SetConfig+0x268>
 8008cf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008cf6:	d81b      	bhi.n	8008d30 <UART_SetConfig+0x270>
 8008cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cfc:	d00c      	beq.n	8008d18 <UART_SetConfig+0x258>
 8008cfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d02:	d815      	bhi.n	8008d30 <UART_SetConfig+0x270>
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d003      	beq.n	8008d10 <UART_SetConfig+0x250>
 8008d08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d0c:	d008      	beq.n	8008d20 <UART_SetConfig+0x260>
 8008d0e:	e00f      	b.n	8008d30 <UART_SetConfig+0x270>
 8008d10:	2300      	movs	r3, #0
 8008d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d16:	e052      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008d18:	2302      	movs	r3, #2
 8008d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d1e:	e04e      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008d20:	2304      	movs	r3, #4
 8008d22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d26:	e04a      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008d28:	2308      	movs	r3, #8
 8008d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d2e:	e046      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008d30:	2310      	movs	r3, #16
 8008d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d36:	e042      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a17      	ldr	r2, [pc, #92]	@ (8008d9c <UART_SetConfig+0x2dc>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d13a      	bne.n	8008db8 <UART_SetConfig+0x2f8>
 8008d42:	4b18      	ldr	r3, [pc, #96]	@ (8008da4 <UART_SetConfig+0x2e4>)
 8008d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d48:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008d4c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d50:	d01a      	beq.n	8008d88 <UART_SetConfig+0x2c8>
 8008d52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d56:	d81b      	bhi.n	8008d90 <UART_SetConfig+0x2d0>
 8008d58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d5c:	d00c      	beq.n	8008d78 <UART_SetConfig+0x2b8>
 8008d5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d62:	d815      	bhi.n	8008d90 <UART_SetConfig+0x2d0>
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d003      	beq.n	8008d70 <UART_SetConfig+0x2b0>
 8008d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d6c:	d008      	beq.n	8008d80 <UART_SetConfig+0x2c0>
 8008d6e:	e00f      	b.n	8008d90 <UART_SetConfig+0x2d0>
 8008d70:	2300      	movs	r3, #0
 8008d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d76:	e022      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008d78:	2302      	movs	r3, #2
 8008d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d7e:	e01e      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008d80:	2304      	movs	r3, #4
 8008d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d86:	e01a      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008d88:	2308      	movs	r3, #8
 8008d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d8e:	e016      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008d90:	2310      	movs	r3, #16
 8008d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d96:	e012      	b.n	8008dbe <UART_SetConfig+0x2fe>
 8008d98:	cfff69f3 	.word	0xcfff69f3
 8008d9c:	40008000 	.word	0x40008000
 8008da0:	40013800 	.word	0x40013800
 8008da4:	40021000 	.word	0x40021000
 8008da8:	40004400 	.word	0x40004400
 8008dac:	40004800 	.word	0x40004800
 8008db0:	40004c00 	.word	0x40004c00
 8008db4:	40005000 	.word	0x40005000
 8008db8:	2310      	movs	r3, #16
 8008dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4aae      	ldr	r2, [pc, #696]	@ (800907c <UART_SetConfig+0x5bc>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	f040 8097 	bne.w	8008ef8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008dca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008dce:	2b08      	cmp	r3, #8
 8008dd0:	d823      	bhi.n	8008e1a <UART_SetConfig+0x35a>
 8008dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd8 <UART_SetConfig+0x318>)
 8008dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd8:	08008dfd 	.word	0x08008dfd
 8008ddc:	08008e1b 	.word	0x08008e1b
 8008de0:	08008e05 	.word	0x08008e05
 8008de4:	08008e1b 	.word	0x08008e1b
 8008de8:	08008e0b 	.word	0x08008e0b
 8008dec:	08008e1b 	.word	0x08008e1b
 8008df0:	08008e1b 	.word	0x08008e1b
 8008df4:	08008e1b 	.word	0x08008e1b
 8008df8:	08008e13 	.word	0x08008e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dfc:	f7fc ffc8 	bl	8005d90 <HAL_RCC_GetPCLK1Freq>
 8008e00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e02:	e010      	b.n	8008e26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e04:	4b9e      	ldr	r3, [pc, #632]	@ (8009080 <UART_SetConfig+0x5c0>)
 8008e06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008e08:	e00d      	b.n	8008e26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e0a:	f7fc ff53 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8008e0e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008e10:	e009      	b.n	8008e26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008e18:	e005      	b.n	8008e26 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008e24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f000 8130 	beq.w	800908e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e32:	4a94      	ldr	r2, [pc, #592]	@ (8009084 <UART_SetConfig+0x5c4>)
 8008e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e40:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	4613      	mov	r3, r2
 8008e48:	005b      	lsls	r3, r3, #1
 8008e4a:	4413      	add	r3, r2
 8008e4c:	69ba      	ldr	r2, [r7, #24]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d305      	bcc.n	8008e5e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e58:	69ba      	ldr	r2, [r7, #24]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d903      	bls.n	8008e66 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008e64:	e113      	b.n	800908e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e68:	2200      	movs	r2, #0
 8008e6a:	60bb      	str	r3, [r7, #8]
 8008e6c:	60fa      	str	r2, [r7, #12]
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e72:	4a84      	ldr	r2, [pc, #528]	@ (8009084 <UART_SetConfig+0x5c4>)
 8008e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	603b      	str	r3, [r7, #0]
 8008e7e:	607a      	str	r2, [r7, #4]
 8008e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e88:	f7f7 ff36 	bl	8000cf8 <__aeabi_uldivmod>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
 8008e90:	4610      	mov	r0, r2
 8008e92:	4619      	mov	r1, r3
 8008e94:	f04f 0200 	mov.w	r2, #0
 8008e98:	f04f 0300 	mov.w	r3, #0
 8008e9c:	020b      	lsls	r3, r1, #8
 8008e9e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ea2:	0202      	lsls	r2, r0, #8
 8008ea4:	6979      	ldr	r1, [r7, #20]
 8008ea6:	6849      	ldr	r1, [r1, #4]
 8008ea8:	0849      	lsrs	r1, r1, #1
 8008eaa:	2000      	movs	r0, #0
 8008eac:	460c      	mov	r4, r1
 8008eae:	4605      	mov	r5, r0
 8008eb0:	eb12 0804 	adds.w	r8, r2, r4
 8008eb4:	eb43 0905 	adc.w	r9, r3, r5
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	469a      	mov	sl, r3
 8008ec0:	4693      	mov	fp, r2
 8008ec2:	4652      	mov	r2, sl
 8008ec4:	465b      	mov	r3, fp
 8008ec6:	4640      	mov	r0, r8
 8008ec8:	4649      	mov	r1, r9
 8008eca:	f7f7 ff15 	bl	8000cf8 <__aeabi_uldivmod>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008edc:	d308      	bcc.n	8008ef0 <UART_SetConfig+0x430>
 8008ede:	6a3b      	ldr	r3, [r7, #32]
 8008ee0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ee4:	d204      	bcs.n	8008ef0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6a3a      	ldr	r2, [r7, #32]
 8008eec:	60da      	str	r2, [r3, #12]
 8008eee:	e0ce      	b.n	800908e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008ef6:	e0ca      	b.n	800908e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	69db      	ldr	r3, [r3, #28]
 8008efc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f00:	d166      	bne.n	8008fd0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008f02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008f06:	2b08      	cmp	r3, #8
 8008f08:	d827      	bhi.n	8008f5a <UART_SetConfig+0x49a>
 8008f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8008f10 <UART_SetConfig+0x450>)
 8008f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f10:	08008f35 	.word	0x08008f35
 8008f14:	08008f3d 	.word	0x08008f3d
 8008f18:	08008f45 	.word	0x08008f45
 8008f1c:	08008f5b 	.word	0x08008f5b
 8008f20:	08008f4b 	.word	0x08008f4b
 8008f24:	08008f5b 	.word	0x08008f5b
 8008f28:	08008f5b 	.word	0x08008f5b
 8008f2c:	08008f5b 	.word	0x08008f5b
 8008f30:	08008f53 	.word	0x08008f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f34:	f7fc ff2c 	bl	8005d90 <HAL_RCC_GetPCLK1Freq>
 8008f38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f3a:	e014      	b.n	8008f66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f3c:	f7fc ff3e 	bl	8005dbc <HAL_RCC_GetPCLK2Freq>
 8008f40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f42:	e010      	b.n	8008f66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f44:	4b4e      	ldr	r3, [pc, #312]	@ (8009080 <UART_SetConfig+0x5c0>)
 8008f46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f48:	e00d      	b.n	8008f66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f4a:	f7fc feb3 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 8008f4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f50:	e009      	b.n	8008f66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f58:	e005      	b.n	8008f66 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008f64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f000 8090 	beq.w	800908e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f72:	4a44      	ldr	r2, [pc, #272]	@ (8009084 <UART_SetConfig+0x5c4>)
 8008f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f80:	005a      	lsls	r2, r3, #1
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	085b      	lsrs	r3, r3, #1
 8008f88:	441a      	add	r2, r3
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	2b0f      	cmp	r3, #15
 8008f98:	d916      	bls.n	8008fc8 <UART_SetConfig+0x508>
 8008f9a:	6a3b      	ldr	r3, [r7, #32]
 8008f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fa0:	d212      	bcs.n	8008fc8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008fa2:	6a3b      	ldr	r3, [r7, #32]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	f023 030f 	bic.w	r3, r3, #15
 8008faa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008fac:	6a3b      	ldr	r3, [r7, #32]
 8008fae:	085b      	lsrs	r3, r3, #1
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	f003 0307 	and.w	r3, r3, #7
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	8bfb      	ldrh	r3, [r7, #30]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	8bfa      	ldrh	r2, [r7, #30]
 8008fc4:	60da      	str	r2, [r3, #12]
 8008fc6:	e062      	b.n	800908e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008fce:	e05e      	b.n	800908e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008fd0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008fd4:	2b08      	cmp	r3, #8
 8008fd6:	d828      	bhi.n	800902a <UART_SetConfig+0x56a>
 8008fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8008fe0 <UART_SetConfig+0x520>)
 8008fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fde:	bf00      	nop
 8008fe0:	08009005 	.word	0x08009005
 8008fe4:	0800900d 	.word	0x0800900d
 8008fe8:	08009015 	.word	0x08009015
 8008fec:	0800902b 	.word	0x0800902b
 8008ff0:	0800901b 	.word	0x0800901b
 8008ff4:	0800902b 	.word	0x0800902b
 8008ff8:	0800902b 	.word	0x0800902b
 8008ffc:	0800902b 	.word	0x0800902b
 8009000:	08009023 	.word	0x08009023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009004:	f7fc fec4 	bl	8005d90 <HAL_RCC_GetPCLK1Freq>
 8009008:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800900a:	e014      	b.n	8009036 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800900c:	f7fc fed6 	bl	8005dbc <HAL_RCC_GetPCLK2Freq>
 8009010:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009012:	e010      	b.n	8009036 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009014:	4b1a      	ldr	r3, [pc, #104]	@ (8009080 <UART_SetConfig+0x5c0>)
 8009016:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009018:	e00d      	b.n	8009036 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800901a:	f7fc fe4b 	bl	8005cb4 <HAL_RCC_GetSysClockFreq>
 800901e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009020:	e009      	b.n	8009036 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009026:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009028:	e005      	b.n	8009036 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800902a:	2300      	movs	r3, #0
 800902c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009034:	bf00      	nop
    }

    if (pclk != 0U)
 8009036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009038:	2b00      	cmp	r3, #0
 800903a:	d028      	beq.n	800908e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009040:	4a10      	ldr	r2, [pc, #64]	@ (8009084 <UART_SetConfig+0x5c4>)
 8009042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009046:	461a      	mov	r2, r3
 8009048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904a:	fbb3 f2f2 	udiv	r2, r3, r2
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	085b      	lsrs	r3, r3, #1
 8009054:	441a      	add	r2, r3
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	fbb2 f3f3 	udiv	r3, r2, r3
 800905e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009060:	6a3b      	ldr	r3, [r7, #32]
 8009062:	2b0f      	cmp	r3, #15
 8009064:	d910      	bls.n	8009088 <UART_SetConfig+0x5c8>
 8009066:	6a3b      	ldr	r3, [r7, #32]
 8009068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800906c:	d20c      	bcs.n	8009088 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800906e:	6a3b      	ldr	r3, [r7, #32]
 8009070:	b29a      	uxth	r2, r3
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	60da      	str	r2, [r3, #12]
 8009078:	e009      	b.n	800908e <UART_SetConfig+0x5ce>
 800907a:	bf00      	nop
 800907c:	40008000 	.word	0x40008000
 8009080:	00f42400 	.word	0x00f42400
 8009084:	0800eb7c 	.word	0x0800eb7c
      }
      else
      {
        ret = HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	2201      	movs	r2, #1
 8009092:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	2201      	movs	r2, #1
 800909a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	2200      	movs	r2, #0
 80090a2:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	2200      	movs	r2, #0
 80090a8:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 80090aa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3730      	adds	r7, #48	@ 0x30
 80090b2:	46bd      	mov	sp, r7
 80090b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080090b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c4:	f003 0301 	and.w	r3, r3, #1
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00a      	beq.n	80090e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	430a      	orrs	r2, r1
 80090e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e6:	f003 0302 	and.w	r3, r3, #2
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00a      	beq.n	8009104 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	430a      	orrs	r2, r1
 8009102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009108:	f003 0304 	and.w	r3, r3, #4
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00a      	beq.n	8009126 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	430a      	orrs	r2, r1
 8009124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800912a:	f003 0308 	and.w	r3, r3, #8
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00a      	beq.n	8009148 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	430a      	orrs	r2, r1
 8009146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800914c:	f003 0310 	and.w	r3, r3, #16
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00a      	beq.n	800916a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	430a      	orrs	r2, r1
 8009168:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800916e:	f003 0320 	and.w	r3, r3, #32
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00a      	beq.n	800918c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	430a      	orrs	r2, r1
 800918a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009194:	2b00      	cmp	r3, #0
 8009196:	d01a      	beq.n	80091ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	430a      	orrs	r2, r1
 80091ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091b6:	d10a      	bne.n	80091ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	430a      	orrs	r2, r1
 80091cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00a      	beq.n	80091f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	430a      	orrs	r2, r1
 80091ee:	605a      	str	r2, [r3, #4]
  }
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b086      	sub	sp, #24
 8009200:	af02      	add	r7, sp, #8
 8009202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800920c:	f7f9 fb6c 	bl	80028e8 <HAL_GetTick>
 8009210:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0308 	and.w	r3, r3, #8
 800921c:	2b08      	cmp	r3, #8
 800921e:	d10e      	bne.n	800923e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009220:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2200      	movs	r2, #0
 800922a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f82f 	bl	8009292 <UART_WaitOnFlagUntilTimeout>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800923a:	2303      	movs	r3, #3
 800923c:	e025      	b.n	800928a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 0304 	and.w	r3, r3, #4
 8009248:	2b04      	cmp	r3, #4
 800924a:	d10e      	bne.n	800926a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800924c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2200      	movs	r2, #0
 8009256:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f819 	bl	8009292 <UART_WaitOnFlagUntilTimeout>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d001      	beq.n	800926a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009266:	2303      	movs	r3, #3
 8009268:	e00f      	b.n	800928a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2220      	movs	r2, #32
 800926e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2220      	movs	r2, #32
 8009276:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b09c      	sub	sp, #112	@ 0x70
 8009296:	af00      	add	r7, sp, #0
 8009298:	60f8      	str	r0, [r7, #12]
 800929a:	60b9      	str	r1, [r7, #8]
 800929c:	603b      	str	r3, [r7, #0]
 800929e:	4613      	mov	r3, r2
 80092a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092a2:	e0a9      	b.n	80093f8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092aa:	f000 80a5 	beq.w	80093f8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092ae:	f7f9 fb1b 	bl	80028e8 <HAL_GetTick>
 80092b2:	4602      	mov	r2, r0
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d302      	bcc.n	80092c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80092be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d140      	bne.n	8009346 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092cc:	e853 3f00 	ldrex	r3, [r3]
 80092d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80092d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092d4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80092d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	461a      	mov	r2, r3
 80092e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80092e4:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80092e8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80092ea:	e841 2300 	strex	r3, r2, [r1]
 80092ee:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80092f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1e6      	bne.n	80092c4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	3308      	adds	r3, #8
 80092fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009300:	e853 3f00 	ldrex	r3, [r3]
 8009304:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009308:	f023 0301 	bic.w	r3, r3, #1
 800930c:	663b      	str	r3, [r7, #96]	@ 0x60
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	3308      	adds	r3, #8
 8009314:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009316:	64ba      	str	r2, [r7, #72]	@ 0x48
 8009318:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800931c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800931e:	e841 2300 	strex	r3, r2, [r1]
 8009322:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009324:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1e5      	bne.n	80092f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2220      	movs	r2, #32
 800932e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2220      	movs	r2, #32
 8009336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8009342:	2303      	movs	r3, #3
 8009344:	e069      	b.n	800941a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 0304 	and.w	r3, r3, #4
 8009350:	2b00      	cmp	r3, #0
 8009352:	d051      	beq.n	80093f8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	69db      	ldr	r3, [r3, #28]
 800935a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800935e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009362:	d149      	bne.n	80093f8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800936c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009376:	e853 3f00 	ldrex	r3, [r3]
 800937a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800937c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009382:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	461a      	mov	r2, r3
 800938a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800938c:	637b      	str	r3, [r7, #52]	@ 0x34
 800938e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009390:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009392:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009394:	e841 2300 	strex	r3, r2, [r1]
 8009398:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800939a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1e6      	bne.n	800936e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	3308      	adds	r3, #8
 80093a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	e853 3f00 	ldrex	r3, [r3]
 80093ae:	613b      	str	r3, [r7, #16]
   return(result);
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	f023 0301 	bic.w	r3, r3, #1
 80093b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	3308      	adds	r3, #8
 80093be:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80093c0:	623a      	str	r2, [r7, #32]
 80093c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c4:	69f9      	ldr	r1, [r7, #28]
 80093c6:	6a3a      	ldr	r2, [r7, #32]
 80093c8:	e841 2300 	strex	r3, r2, [r1]
 80093cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1e5      	bne.n	80093a0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2220      	movs	r2, #32
 80093d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2220      	movs	r2, #32
 80093e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2220      	movs	r2, #32
 80093e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80093f4:	2303      	movs	r3, #3
 80093f6:	e010      	b.n	800941a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	69da      	ldr	r2, [r3, #28]
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	4013      	ands	r3, r2
 8009402:	68ba      	ldr	r2, [r7, #8]
 8009404:	429a      	cmp	r2, r3
 8009406:	bf0c      	ite	eq
 8009408:	2301      	moveq	r3, #1
 800940a:	2300      	movne	r3, #0
 800940c:	b2db      	uxtb	r3, r3
 800940e:	461a      	mov	r2, r3
 8009410:	79fb      	ldrb	r3, [r7, #7]
 8009412:	429a      	cmp	r2, r3
 8009414:	f43f af46 	beq.w	80092a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3770      	adds	r7, #112	@ 0x70
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
	...

08009424 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009424:	b480      	push	{r7}
 8009426:	b0a3      	sub	sp, #140	@ 0x8c
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	4613      	mov	r3, r2
 8009430:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	88fa      	ldrh	r2, [r7, #6]
 800943c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	88fa      	ldrh	r2, [r7, #6]
 8009444:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009456:	d10e      	bne.n	8009476 <UART_Start_Receive_IT+0x52>
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d105      	bne.n	800946c <UART_Start_Receive_IT+0x48>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009466:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800946a:	e02d      	b.n	80094c8 <UART_Start_Receive_IT+0xa4>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	22ff      	movs	r2, #255	@ 0xff
 8009470:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009474:	e028      	b.n	80094c8 <UART_Start_Receive_IT+0xa4>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d10d      	bne.n	800949a <UART_Start_Receive_IT+0x76>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d104      	bne.n	8009490 <UART_Start_Receive_IT+0x6c>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	22ff      	movs	r2, #255	@ 0xff
 800948a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800948e:	e01b      	b.n	80094c8 <UART_Start_Receive_IT+0xa4>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	227f      	movs	r2, #127	@ 0x7f
 8009494:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009498:	e016      	b.n	80094c8 <UART_Start_Receive_IT+0xa4>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094a2:	d10d      	bne.n	80094c0 <UART_Start_Receive_IT+0x9c>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d104      	bne.n	80094b6 <UART_Start_Receive_IT+0x92>
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	227f      	movs	r2, #127	@ 0x7f
 80094b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80094b4:	e008      	b.n	80094c8 <UART_Start_Receive_IT+0xa4>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	223f      	movs	r2, #63	@ 0x3f
 80094ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80094be:	e003      	b.n	80094c8 <UART_Start_Receive_IT+0xa4>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2222      	movs	r2, #34	@ 0x22
 80094d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	3308      	adds	r3, #8
 80094de:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094e2:	e853 3f00 	ldrex	r3, [r3]
 80094e6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80094e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094ea:	f043 0301 	orr.w	r3, r3, #1
 80094ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	3308      	adds	r3, #8
 80094f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80094fc:	673a      	str	r2, [r7, #112]	@ 0x70
 80094fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009500:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8009502:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009504:	e841 2300 	strex	r3, r2, [r1]
 8009508:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800950a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1e3      	bne.n	80094d8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009514:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009518:	d153      	bne.n	80095c2 <UART_Start_Receive_IT+0x19e>
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009520:	88fa      	ldrh	r2, [r7, #6]
 8009522:	429a      	cmp	r2, r3
 8009524:	d34d      	bcc.n	80095c2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	689b      	ldr	r3, [r3, #8]
 800952a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800952e:	d107      	bne.n	8009540 <UART_Start_Receive_IT+0x11c>
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d103      	bne.n	8009540 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	4a4b      	ldr	r2, [pc, #300]	@ (8009668 <UART_Start_Receive_IT+0x244>)
 800953c:	671a      	str	r2, [r3, #112]	@ 0x70
 800953e:	e002      	b.n	8009546 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	4a4a      	ldr	r2, [pc, #296]	@ (800966c <UART_Start_Receive_IT+0x248>)
 8009544:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2200      	movs	r2, #0
 800954a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	691b      	ldr	r3, [r3, #16]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d01a      	beq.n	800958c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800955c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800955e:	e853 3f00 	ldrex	r3, [r3]
 8009562:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009564:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009566:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800956a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	461a      	mov	r2, r3
 8009574:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009578:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800957a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800957e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009580:	e841 2300 	strex	r3, r2, [r1]
 8009584:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1e4      	bne.n	8009556 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	3308      	adds	r3, #8
 8009592:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009596:	e853 3f00 	ldrex	r3, [r3]
 800959a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800959c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3308      	adds	r3, #8
 80095aa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80095ac:	64ba      	str	r2, [r7, #72]	@ 0x48
 80095ae:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80095b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095b4:	e841 2300 	strex	r3, r2, [r1]
 80095b8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80095ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d1e5      	bne.n	800958c <UART_Start_Receive_IT+0x168>
 80095c0:	e04a      	b.n	8009658 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095ca:	d107      	bne.n	80095dc <UART_Start_Receive_IT+0x1b8>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d103      	bne.n	80095dc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	4a26      	ldr	r2, [pc, #152]	@ (8009670 <UART_Start_Receive_IT+0x24c>)
 80095d8:	671a      	str	r2, [r3, #112]	@ 0x70
 80095da:	e002      	b.n	80095e2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	4a25      	ldr	r2, [pc, #148]	@ (8009674 <UART_Start_Receive_IT+0x250>)
 80095e0:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d019      	beq.n	8009626 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095fa:	e853 3f00 	ldrex	r3, [r3]
 80095fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009602:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8009606:	677b      	str	r3, [r7, #116]	@ 0x74
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	461a      	mov	r2, r3
 800960e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009610:	637b      	str	r3, [r7, #52]	@ 0x34
 8009612:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009614:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009616:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009618:	e841 2300 	strex	r3, r2, [r1]
 800961c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800961e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1e6      	bne.n	80095f2 <UART_Start_Receive_IT+0x1ce>
 8009624:	e018      	b.n	8009658 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	e853 3f00 	ldrex	r3, [r3]
 8009632:	613b      	str	r3, [r7, #16]
   return(result);
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	f043 0320 	orr.w	r3, r3, #32
 800963a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	461a      	mov	r2, r3
 8009642:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009644:	623b      	str	r3, [r7, #32]
 8009646:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009648:	69f9      	ldr	r1, [r7, #28]
 800964a:	6a3a      	ldr	r2, [r7, #32]
 800964c:	e841 2300 	strex	r3, r2, [r1]
 8009650:	61bb      	str	r3, [r7, #24]
   return(result);
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1e6      	bne.n	8009626 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	378c      	adds	r7, #140	@ 0x8c
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	08009d81 	.word	0x08009d81
 800966c:	08009a89 	.word	0x08009a89
 8009670:	08009927 	.word	0x08009927
 8009674:	080097c7 	.word	0x080097c7

08009678 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009678:	b480      	push	{r7}
 800967a:	b095      	sub	sp, #84	@ 0x54
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009688:	e853 3f00 	ldrex	r3, [r3]
 800968c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800968e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009690:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009694:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	461a      	mov	r2, r3
 800969c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800969e:	643b      	str	r3, [r7, #64]	@ 0x40
 80096a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096a6:	e841 2300 	strex	r3, r2, [r1]
 80096aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1e6      	bne.n	8009680 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3308      	adds	r3, #8
 80096b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ba:	6a3b      	ldr	r3, [r7, #32]
 80096bc:	e853 3f00 	ldrex	r3, [r3]
 80096c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80096c2:	69fb      	ldr	r3, [r7, #28]
 80096c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096c8:	f023 0301 	bic.w	r3, r3, #1
 80096cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3308      	adds	r3, #8
 80096d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80096d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096de:	e841 2300 	strex	r3, r2, [r1]
 80096e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1e3      	bne.n	80096b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d118      	bne.n	8009724 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	e853 3f00 	ldrex	r3, [r3]
 80096fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	f023 0310 	bic.w	r3, r3, #16
 8009706:	647b      	str	r3, [r7, #68]	@ 0x44
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	461a      	mov	r2, r3
 800970e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009710:	61bb      	str	r3, [r7, #24]
 8009712:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009714:	6979      	ldr	r1, [r7, #20]
 8009716:	69ba      	ldr	r2, [r7, #24]
 8009718:	e841 2300 	strex	r3, r2, [r1]
 800971c:	613b      	str	r3, [r7, #16]
   return(result);
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1e6      	bne.n	80096f2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2220      	movs	r2, #32
 8009728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8009738:	bf00      	nop
 800973a:	3754      	adds	r7, #84	@ 0x54
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009750:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f7ff f996 	bl	8008a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009768:	bf00      	nop
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b088      	sub	sp, #32
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	e853 3f00 	ldrex	r3, [r3]
 8009784:	60bb      	str	r3, [r7, #8]
   return(result);
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800978c:	61fb      	str	r3, [r7, #28]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	461a      	mov	r2, r3
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	61bb      	str	r3, [r7, #24]
 8009798:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979a:	6979      	ldr	r1, [r7, #20]
 800979c:	69ba      	ldr	r2, [r7, #24]
 800979e:	e841 2300 	strex	r3, r2, [r1]
 80097a2:	613b      	str	r3, [r7, #16]
   return(result);
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1e6      	bne.n	8009778 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2220      	movs	r2, #32
 80097ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f7ff f961 	bl	8008a80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097be:	bf00      	nop
 80097c0:	3720      	adds	r7, #32
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b096      	sub	sp, #88	@ 0x58
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80097d4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097de:	2b22      	cmp	r3, #34	@ 0x22
 80097e0:	f040 8095 	bne.w	800990e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ea:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80097ee:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80097f2:	b2d9      	uxtb	r1, r3
 80097f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80097f8:	b2da      	uxtb	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097fe:	400a      	ands	r2, r1
 8009800:	b2d2      	uxtb	r2, r2
 8009802:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009808:	1c5a      	adds	r2, r3, #1
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009814:	b29b      	uxth	r3, r3
 8009816:	3b01      	subs	r3, #1
 8009818:	b29a      	uxth	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009826:	b29b      	uxth	r3, r3
 8009828:	2b00      	cmp	r3, #0
 800982a:	d178      	bne.n	800991e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009834:	e853 3f00 	ldrex	r3, [r3]
 8009838:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800983a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800983c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009840:	653b      	str	r3, [r7, #80]	@ 0x50
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	461a      	mov	r2, r3
 8009848:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800984a:	647b      	str	r3, [r7, #68]	@ 0x44
 800984c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009850:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009852:	e841 2300 	strex	r3, r2, [r1]
 8009856:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1e6      	bne.n	800982c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3308      	adds	r3, #8
 8009864:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009868:	e853 3f00 	ldrex	r3, [r3]
 800986c:	623b      	str	r3, [r7, #32]
   return(result);
 800986e:	6a3b      	ldr	r3, [r7, #32]
 8009870:	f023 0301 	bic.w	r3, r3, #1
 8009874:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	3308      	adds	r3, #8
 800987c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800987e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009880:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009882:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009884:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009886:	e841 2300 	strex	r3, r2, [r1]
 800988a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800988c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1e5      	bne.n	800985e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2220      	movs	r2, #32
 8009896:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d12e      	bne.n	8009906 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	e853 3f00 	ldrex	r3, [r3]
 80098ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f023 0310 	bic.w	r3, r3, #16
 80098c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	461a      	mov	r2, r3
 80098ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098cc:	61fb      	str	r3, [r7, #28]
 80098ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d0:	69b9      	ldr	r1, [r7, #24]
 80098d2:	69fa      	ldr	r2, [r7, #28]
 80098d4:	e841 2300 	strex	r3, r2, [r1]
 80098d8:	617b      	str	r3, [r7, #20]
   return(result);
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1e6      	bne.n	80098ae <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	69db      	ldr	r3, [r3, #28]
 80098e6:	f003 0310 	and.w	r3, r3, #16
 80098ea:	2b10      	cmp	r3, #16
 80098ec:	d103      	bne.n	80098f6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2210      	movs	r2, #16
 80098f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80098fc:	4619      	mov	r1, r3
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f7ff f8d2 	bl	8008aa8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009904:	e00b      	b.n	800991e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f7f8 ff84 	bl	8002814 <HAL_UART_RxCpltCallback>
}
 800990c:	e007      	b.n	800991e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	699a      	ldr	r2, [r3, #24]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f042 0208 	orr.w	r2, r2, #8
 800991c:	619a      	str	r2, [r3, #24]
}
 800991e:	bf00      	nop
 8009920:	3758      	adds	r7, #88	@ 0x58
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b096      	sub	sp, #88	@ 0x58
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009934:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800993e:	2b22      	cmp	r3, #34	@ 0x22
 8009940:	f040 8095 	bne.w	8009a6e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800994a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009952:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009954:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8009958:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800995c:	4013      	ands	r3, r2
 800995e:	b29a      	uxth	r2, r3
 8009960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009962:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009968:	1c9a      	adds	r2, r3, #2
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009974:	b29b      	uxth	r3, r3
 8009976:	3b01      	subs	r3, #1
 8009978:	b29a      	uxth	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009986:	b29b      	uxth	r3, r3
 8009988:	2b00      	cmp	r3, #0
 800998a:	d178      	bne.n	8009a7e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009994:	e853 3f00 	ldrex	r3, [r3]
 8009998:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800999a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	461a      	mov	r2, r3
 80099a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80099ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80099b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099b2:	e841 2300 	strex	r3, r2, [r1]
 80099b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1e6      	bne.n	800998c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	3308      	adds	r3, #8
 80099c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c6:	6a3b      	ldr	r3, [r7, #32]
 80099c8:	e853 3f00 	ldrex	r3, [r3]
 80099cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	f023 0301 	bic.w	r3, r3, #1
 80099d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	3308      	adds	r3, #8
 80099dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099e6:	e841 2300 	strex	r3, r2, [r1]
 80099ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d1e5      	bne.n	80099be <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2220      	movs	r2, #32
 80099f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d12e      	bne.n	8009a66 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	e853 3f00 	ldrex	r3, [r3]
 8009a1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	f023 0310 	bic.w	r3, r3, #16
 8009a22:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	461a      	mov	r2, r3
 8009a2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a2c:	61bb      	str	r3, [r7, #24]
 8009a2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a30:	6979      	ldr	r1, [r7, #20]
 8009a32:	69ba      	ldr	r2, [r7, #24]
 8009a34:	e841 2300 	strex	r3, r2, [r1]
 8009a38:	613b      	str	r3, [r7, #16]
   return(result);
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1e6      	bne.n	8009a0e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	69db      	ldr	r3, [r3, #28]
 8009a46:	f003 0310 	and.w	r3, r3, #16
 8009a4a:	2b10      	cmp	r3, #16
 8009a4c:	d103      	bne.n	8009a56 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2210      	movs	r2, #16
 8009a54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f7ff f822 	bl	8008aa8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a64:	e00b      	b.n	8009a7e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f7f8 fed4 	bl	8002814 <HAL_UART_RxCpltCallback>
}
 8009a6c:	e007      	b.n	8009a7e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	699a      	ldr	r2, [r3, #24]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f042 0208 	orr.w	r2, r2, #8
 8009a7c:	619a      	str	r2, [r3, #24]
}
 8009a7e:	bf00      	nop
 8009a80:	3758      	adds	r7, #88	@ 0x58
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
	...

08009a88 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b0a6      	sub	sp, #152	@ 0x98
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a96:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	69db      	ldr	r3, [r3, #28]
 8009aa0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009abe:	2b22      	cmp	r3, #34	@ 0x22
 8009ac0:	f040 814f 	bne.w	8009d62 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009aca:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ace:	e0f6      	b.n	8009cbe <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad6:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009ada:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8009ade:	b2d9      	uxtb	r1, r3
 8009ae0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009ae4:	b2da      	uxtb	r2, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aea:	400a      	ands	r2, r1
 8009aec:	b2d2      	uxtb	r2, r2
 8009aee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009af4:	1c5a      	adds	r2, r3, #1
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	3b01      	subs	r3, #1
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	69db      	ldr	r3, [r3, #28]
 8009b12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009b16:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009b1a:	f003 0307 	and.w	r3, r3, #7
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d053      	beq.n	8009bca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b22:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009b26:	f003 0301 	and.w	r3, r3, #1
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d011      	beq.n	8009b52 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00b      	beq.n	8009b52 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b48:	f043 0201 	orr.w	r2, r3, #1
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009b56:	f003 0302 	and.w	r3, r3, #2
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d011      	beq.n	8009b82 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009b5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00b      	beq.n	8009b82 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2202      	movs	r2, #2
 8009b70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b78:	f043 0204 	orr.w	r2, r3, #4
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009b86:	f003 0304 	and.w	r3, r3, #4
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d011      	beq.n	8009bb2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009b8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b92:	f003 0301 	and.w	r3, r3, #1
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00b      	beq.n	8009bb2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2204      	movs	r2, #4
 8009ba0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ba8:	f043 0202 	orr.w	r2, r3, #2
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d006      	beq.n	8009bca <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7fe ff69 	bl	8008a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d173      	bne.n	8009cbe <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bde:	e853 3f00 	ldrex	r3, [r3]
 8009be2:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009be4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009be6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009bea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009bf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009bfa:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfc:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009bfe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009c00:	e841 2300 	strex	r3, r2, [r1]
 8009c04:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009c06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1e4      	bne.n	8009bd6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	3308      	adds	r3, #8
 8009c12:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c16:	e853 3f00 	ldrex	r3, [r3]
 8009c1a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c22:	f023 0301 	bic.w	r3, r3, #1
 8009c26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	3308      	adds	r3, #8
 8009c2e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009c30:	657a      	str	r2, [r7, #84]	@ 0x54
 8009c32:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c34:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c36:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009c38:	e841 2300 	strex	r3, r2, [r1]
 8009c3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009c3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d1e3      	bne.n	8009c0c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2220      	movs	r2, #32
 8009c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d12e      	bne.n	8009cb8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c68:	e853 3f00 	ldrex	r3, [r3]
 8009c6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c70:	f023 0310 	bic.w	r3, r3, #16
 8009c74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c80:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c86:	e841 2300 	strex	r3, r2, [r1]
 8009c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1e6      	bne.n	8009c60 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	69db      	ldr	r3, [r3, #28]
 8009c98:	f003 0310 	and.w	r3, r3, #16
 8009c9c:	2b10      	cmp	r3, #16
 8009c9e:	d103      	bne.n	8009ca8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2210      	movs	r2, #16
 8009ca6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009cae:	4619      	mov	r1, r3
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f7fe fef9 	bl	8008aa8 <HAL_UARTEx_RxEventCallback>
 8009cb6:	e002      	b.n	8009cbe <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f7f8 fdab 	bl	8002814 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009cbe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d006      	beq.n	8009cd4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009cc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009cca:	f003 0320 	and.w	r3, r3, #32
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f47f aefe 	bne.w	8009ad0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cda:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009cde:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d045      	beq.n	8009d72 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009cec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d23e      	bcs.n	8009d72 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	3308      	adds	r3, #8
 8009cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	e853 3f00 	ldrex	r3, [r3]
 8009d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	3308      	adds	r3, #8
 8009d12:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009d14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d1c:	e841 2300 	strex	r3, r2, [r1]
 8009d20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1e5      	bne.n	8009cf4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a14      	ldr	r2, [pc, #80]	@ (8009d7c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009d2c:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	e853 3f00 	ldrex	r3, [r3]
 8009d3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	f043 0320 	orr.w	r3, r3, #32
 8009d42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	461a      	mov	r2, r3
 8009d4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d4c:	61bb      	str	r3, [r7, #24]
 8009d4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d50:	6979      	ldr	r1, [r7, #20]
 8009d52:	69ba      	ldr	r2, [r7, #24]
 8009d54:	e841 2300 	strex	r3, r2, [r1]
 8009d58:	613b      	str	r3, [r7, #16]
   return(result);
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1e6      	bne.n	8009d2e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d60:	e007      	b.n	8009d72 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	699a      	ldr	r2, [r3, #24]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f042 0208 	orr.w	r2, r2, #8
 8009d70:	619a      	str	r2, [r3, #24]
}
 8009d72:	bf00      	nop
 8009d74:	3798      	adds	r7, #152	@ 0x98
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	080097c7 	.word	0x080097c7

08009d80 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b0a8      	sub	sp, #160	@ 0xa0
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009d8e:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	69db      	ldr	r3, [r3, #28]
 8009d98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009db6:	2b22      	cmp	r3, #34	@ 0x22
 8009db8:	f040 8153 	bne.w	800a062 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009dc2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009dc6:	e0fa      	b.n	8009fbe <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dce:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009dda:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8009dde:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8009de2:	4013      	ands	r3, r2
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009dea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009df0:	1c9a      	adds	r2, r3, #2
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	69db      	ldr	r3, [r3, #28]
 8009e0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009e12:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e16:	f003 0307 	and.w	r3, r3, #7
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d053      	beq.n	8009ec6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e22:	f003 0301 	and.w	r3, r3, #1
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d011      	beq.n	8009e4e <UART_RxISR_16BIT_FIFOEN+0xce>
 8009e2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d00b      	beq.n	8009e4e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e44:	f043 0201 	orr.w	r2, r3, #1
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e52:	f003 0302 	and.w	r3, r3, #2
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d011      	beq.n	8009e7e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009e5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e5e:	f003 0301 	and.w	r3, r3, #1
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00b      	beq.n	8009e7e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e74:	f043 0204 	orr.w	r2, r3, #4
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e82:	f003 0304 	and.w	r3, r3, #4
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d011      	beq.n	8009eae <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009e8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e8e:	f003 0301 	and.w	r3, r3, #1
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00b      	beq.n	8009eae <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2204      	movs	r2, #4
 8009e9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ea4:	f043 0202 	orr.w	r2, r3, #2
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d006      	beq.n	8009ec6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f7fe fdeb 	bl	8008a94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d175      	bne.n	8009fbe <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009eda:	e853 3f00 	ldrex	r3, [r3]
 8009ede:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009ee0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ee2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ee6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ef4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009ef6:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009efa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009efc:	e841 2300 	strex	r3, r2, [r1]
 8009f00:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009f02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d1e4      	bne.n	8009ed2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	3308      	adds	r3, #8
 8009f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f12:	e853 3f00 	ldrex	r3, [r3]
 8009f16:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f1e:	f023 0301 	bic.w	r3, r3, #1
 8009f22:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	3308      	adds	r3, #8
 8009f2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009f30:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009f32:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f38:	e841 2300 	strex	r3, r2, [r1]
 8009f3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1e1      	bne.n	8009f08 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2220      	movs	r2, #32
 8009f48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d12e      	bne.n	8009fb8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f68:	e853 3f00 	ldrex	r3, [r3]
 8009f6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f70:	f023 0310 	bic.w	r3, r3, #16
 8009f74:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f80:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f86:	e841 2300 	strex	r3, r2, [r1]
 8009f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1e6      	bne.n	8009f60 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	69db      	ldr	r3, [r3, #28]
 8009f98:	f003 0310 	and.w	r3, r3, #16
 8009f9c:	2b10      	cmp	r3, #16
 8009f9e:	d103      	bne.n	8009fa8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2210      	movs	r2, #16
 8009fa6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009fae:	4619      	mov	r1, r3
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7fe fd79 	bl	8008aa8 <HAL_UARTEx_RxEventCallback>
 8009fb6:	e002      	b.n	8009fbe <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f7f8 fc2b 	bl	8002814 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009fbe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d006      	beq.n	8009fd4 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009fc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009fca:	f003 0320 	and.w	r3, r3, #32
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f47f aefa 	bne.w	8009dc8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009fda:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009fde:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d045      	beq.n	800a072 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009fec:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d23e      	bcs.n	800a072 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	3308      	adds	r3, #8
 8009ffa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffe:	e853 3f00 	ldrex	r3, [r3]
 800a002:	623b      	str	r3, [r7, #32]
   return(result);
 800a004:	6a3b      	ldr	r3, [r7, #32]
 800a006:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a00a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	3308      	adds	r3, #8
 800a012:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800a014:	633a      	str	r2, [r7, #48]	@ 0x30
 800a016:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a018:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a01a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a01c:	e841 2300 	strex	r3, r2, [r1]
 800a020:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a024:	2b00      	cmp	r3, #0
 800a026:	d1e5      	bne.n	8009ff4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4a14      	ldr	r2, [pc, #80]	@ (800a07c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a02c:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	e853 3f00 	ldrex	r3, [r3]
 800a03a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f043 0320 	orr.w	r3, r3, #32
 800a042:	673b      	str	r3, [r7, #112]	@ 0x70
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	461a      	mov	r2, r3
 800a04a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a04c:	61fb      	str	r3, [r7, #28]
 800a04e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a050:	69b9      	ldr	r1, [r7, #24]
 800a052:	69fa      	ldr	r2, [r7, #28]
 800a054:	e841 2300 	strex	r3, r2, [r1]
 800a058:	617b      	str	r3, [r7, #20]
   return(result);
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d1e6      	bne.n	800a02e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a060:	e007      	b.n	800a072 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	699a      	ldr	r2, [r3, #24]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f042 0208 	orr.w	r2, r2, #8
 800a070:	619a      	str	r2, [r3, #24]
}
 800a072:	bf00      	nop
 800a074:	37a0      	adds	r7, #160	@ 0xa0
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	08009927 	.word	0x08009927

0800a080 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a09c:	bf00      	nop
 800a09e:	370c      	adds	r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a6:	4770      	bx	lr

0800a0a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b083      	sub	sp, #12
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a0b0:	bf00      	nop
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d101      	bne.n	800a0d2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	e027      	b.n	800a122 <HAL_UARTEx_DisableFifoMode+0x66>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2224      	movs	r2, #36	@ 0x24
 800a0de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f022 0201 	bic.w	r2, r2, #1
 800a0f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a100:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2220      	movs	r2, #32
 800a114:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3714      	adds	r7, #20
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr

0800a12e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b084      	sub	sp, #16
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
 800a136:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d101      	bne.n	800a146 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a142:	2302      	movs	r3, #2
 800a144:	e02d      	b.n	800a1a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2201      	movs	r2, #1
 800a14a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2224      	movs	r2, #36	@ 0x24
 800a152:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f022 0201 	bic.w	r2, r2, #1
 800a16c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	683a      	ldr	r2, [r7, #0]
 800a17e:	430a      	orrs	r2, r1
 800a180:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f850 	bl	800a228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2220      	movs	r2, #32
 800a194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}

0800a1aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1aa:	b580      	push	{r7, lr}
 800a1ac:	b084      	sub	sp, #16
 800a1ae:	af00      	add	r7, sp, #0
 800a1b0:	6078      	str	r0, [r7, #4]
 800a1b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d101      	bne.n	800a1c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a1be:	2302      	movs	r3, #2
 800a1c0:	e02d      	b.n	800a21e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2224      	movs	r2, #36	@ 0x24
 800a1ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f022 0201 	bic.w	r2, r2, #1
 800a1e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	683a      	ldr	r2, [r7, #0]
 800a1fa:	430a      	orrs	r2, r1
 800a1fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 f812 	bl	800a228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2220      	movs	r2, #32
 800a210:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a21c:	2300      	movs	r3, #0
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
	...

0800a228 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a234:	2b00      	cmp	r3, #0
 800a236:	d108      	bne.n	800a24a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2201      	movs	r2, #1
 800a244:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a248:	e031      	b.n	800a2ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a24a:	2308      	movs	r3, #8
 800a24c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a24e:	2308      	movs	r3, #8
 800a250:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	0e5b      	lsrs	r3, r3, #25
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	f003 0307 	and.w	r3, r3, #7
 800a260:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	0f5b      	lsrs	r3, r3, #29
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	f003 0307 	and.w	r3, r3, #7
 800a270:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a272:	7bbb      	ldrb	r3, [r7, #14]
 800a274:	7b3a      	ldrb	r2, [r7, #12]
 800a276:	4911      	ldr	r1, [pc, #68]	@ (800a2bc <UARTEx_SetNbDataToProcess+0x94>)
 800a278:	5c8a      	ldrb	r2, [r1, r2]
 800a27a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a27e:	7b3a      	ldrb	r2, [r7, #12]
 800a280:	490f      	ldr	r1, [pc, #60]	@ (800a2c0 <UARTEx_SetNbDataToProcess+0x98>)
 800a282:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a284:	fb93 f3f2 	sdiv	r3, r3, r2
 800a288:	b29a      	uxth	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a290:	7bfb      	ldrb	r3, [r7, #15]
 800a292:	7b7a      	ldrb	r2, [r7, #13]
 800a294:	4909      	ldr	r1, [pc, #36]	@ (800a2bc <UARTEx_SetNbDataToProcess+0x94>)
 800a296:	5c8a      	ldrb	r2, [r1, r2]
 800a298:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a29c:	7b7a      	ldrb	r2, [r7, #13]
 800a29e:	4908      	ldr	r1, [pc, #32]	@ (800a2c0 <UARTEx_SetNbDataToProcess+0x98>)
 800a2a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a2ae:	bf00      	nop
 800a2b0:	3714      	adds	r7, #20
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr
 800a2ba:	bf00      	nop
 800a2bc:	0800eb94 	.word	0x0800eb94
 800a2c0:	0800eb9c 	.word	0x0800eb9c

0800a2c4 <atof>:
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	f000 be0d 	b.w	800aee4 <strtod>

0800a2ca <atoi>:
 800a2ca:	220a      	movs	r2, #10
 800a2cc:	2100      	movs	r1, #0
 800a2ce:	f000 be91 	b.w	800aff4 <strtol>

0800a2d2 <sulp>:
 800a2d2:	b570      	push	{r4, r5, r6, lr}
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	460d      	mov	r5, r1
 800a2d8:	ec45 4b10 	vmov	d0, r4, r5
 800a2dc:	4616      	mov	r6, r2
 800a2de:	f003 fd6b 	bl	800ddb8 <__ulp>
 800a2e2:	ec51 0b10 	vmov	r0, r1, d0
 800a2e6:	b17e      	cbz	r6, 800a308 <sulp+0x36>
 800a2e8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a2ec:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	dd09      	ble.n	800a308 <sulp+0x36>
 800a2f4:	051b      	lsls	r3, r3, #20
 800a2f6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a2fa:	2400      	movs	r4, #0
 800a2fc:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a300:	4622      	mov	r2, r4
 800a302:	462b      	mov	r3, r5
 800a304:	f7f6 f9b0 	bl	8000668 <__aeabi_dmul>
 800a308:	ec41 0b10 	vmov	d0, r0, r1
 800a30c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a310 <_strtod_l>:
 800a310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a314:	b09f      	sub	sp, #124	@ 0x7c
 800a316:	460c      	mov	r4, r1
 800a318:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a31a:	2200      	movs	r2, #0
 800a31c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a31e:	9005      	str	r0, [sp, #20]
 800a320:	f04f 0a00 	mov.w	sl, #0
 800a324:	f04f 0b00 	mov.w	fp, #0
 800a328:	460a      	mov	r2, r1
 800a32a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a32c:	7811      	ldrb	r1, [r2, #0]
 800a32e:	292b      	cmp	r1, #43	@ 0x2b
 800a330:	d04a      	beq.n	800a3c8 <_strtod_l+0xb8>
 800a332:	d838      	bhi.n	800a3a6 <_strtod_l+0x96>
 800a334:	290d      	cmp	r1, #13
 800a336:	d832      	bhi.n	800a39e <_strtod_l+0x8e>
 800a338:	2908      	cmp	r1, #8
 800a33a:	d832      	bhi.n	800a3a2 <_strtod_l+0x92>
 800a33c:	2900      	cmp	r1, #0
 800a33e:	d03b      	beq.n	800a3b8 <_strtod_l+0xa8>
 800a340:	2200      	movs	r2, #0
 800a342:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a344:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a346:	782a      	ldrb	r2, [r5, #0]
 800a348:	2a30      	cmp	r2, #48	@ 0x30
 800a34a:	f040 80b3 	bne.w	800a4b4 <_strtod_l+0x1a4>
 800a34e:	786a      	ldrb	r2, [r5, #1]
 800a350:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a354:	2a58      	cmp	r2, #88	@ 0x58
 800a356:	d16e      	bne.n	800a436 <_strtod_l+0x126>
 800a358:	9302      	str	r3, [sp, #8]
 800a35a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a35c:	9301      	str	r3, [sp, #4]
 800a35e:	ab1a      	add	r3, sp, #104	@ 0x68
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	4a8e      	ldr	r2, [pc, #568]	@ (800a59c <_strtod_l+0x28c>)
 800a364:	9805      	ldr	r0, [sp, #20]
 800a366:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a368:	a919      	add	r1, sp, #100	@ 0x64
 800a36a:	f002 fe17 	bl	800cf9c <__gethex>
 800a36e:	f010 060f 	ands.w	r6, r0, #15
 800a372:	4604      	mov	r4, r0
 800a374:	d005      	beq.n	800a382 <_strtod_l+0x72>
 800a376:	2e06      	cmp	r6, #6
 800a378:	d128      	bne.n	800a3cc <_strtod_l+0xbc>
 800a37a:	3501      	adds	r5, #1
 800a37c:	2300      	movs	r3, #0
 800a37e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a380:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a382:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a384:	2b00      	cmp	r3, #0
 800a386:	f040 858e 	bne.w	800aea6 <_strtod_l+0xb96>
 800a38a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a38c:	b1cb      	cbz	r3, 800a3c2 <_strtod_l+0xb2>
 800a38e:	4652      	mov	r2, sl
 800a390:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a394:	ec43 2b10 	vmov	d0, r2, r3
 800a398:	b01f      	add	sp, #124	@ 0x7c
 800a39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a39e:	2920      	cmp	r1, #32
 800a3a0:	d1ce      	bne.n	800a340 <_strtod_l+0x30>
 800a3a2:	3201      	adds	r2, #1
 800a3a4:	e7c1      	b.n	800a32a <_strtod_l+0x1a>
 800a3a6:	292d      	cmp	r1, #45	@ 0x2d
 800a3a8:	d1ca      	bne.n	800a340 <_strtod_l+0x30>
 800a3aa:	2101      	movs	r1, #1
 800a3ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a3ae:	1c51      	adds	r1, r2, #1
 800a3b0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a3b2:	7852      	ldrb	r2, [r2, #1]
 800a3b4:	2a00      	cmp	r2, #0
 800a3b6:	d1c5      	bne.n	800a344 <_strtod_l+0x34>
 800a3b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a3ba:	9419      	str	r4, [sp, #100]	@ 0x64
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f040 8570 	bne.w	800aea2 <_strtod_l+0xb92>
 800a3c2:	4652      	mov	r2, sl
 800a3c4:	465b      	mov	r3, fp
 800a3c6:	e7e5      	b.n	800a394 <_strtod_l+0x84>
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	e7ef      	b.n	800a3ac <_strtod_l+0x9c>
 800a3cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a3ce:	b13a      	cbz	r2, 800a3e0 <_strtod_l+0xd0>
 800a3d0:	2135      	movs	r1, #53	@ 0x35
 800a3d2:	a81c      	add	r0, sp, #112	@ 0x70
 800a3d4:	f003 fdea 	bl	800dfac <__copybits>
 800a3d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3da:	9805      	ldr	r0, [sp, #20]
 800a3dc:	f003 f9b8 	bl	800d750 <_Bfree>
 800a3e0:	3e01      	subs	r6, #1
 800a3e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a3e4:	2e04      	cmp	r6, #4
 800a3e6:	d806      	bhi.n	800a3f6 <_strtod_l+0xe6>
 800a3e8:	e8df f006 	tbb	[pc, r6]
 800a3ec:	201d0314 	.word	0x201d0314
 800a3f0:	14          	.byte	0x14
 800a3f1:	00          	.byte	0x00
 800a3f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a3f6:	05e1      	lsls	r1, r4, #23
 800a3f8:	bf48      	it	mi
 800a3fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a3fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a402:	0d1b      	lsrs	r3, r3, #20
 800a404:	051b      	lsls	r3, r3, #20
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1bb      	bne.n	800a382 <_strtod_l+0x72>
 800a40a:	f001 fe61 	bl	800c0d0 <__errno>
 800a40e:	2322      	movs	r3, #34	@ 0x22
 800a410:	6003      	str	r3, [r0, #0]
 800a412:	e7b6      	b.n	800a382 <_strtod_l+0x72>
 800a414:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a418:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a41c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a420:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a424:	e7e7      	b.n	800a3f6 <_strtod_l+0xe6>
 800a426:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a5a4 <_strtod_l+0x294>
 800a42a:	e7e4      	b.n	800a3f6 <_strtod_l+0xe6>
 800a42c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a430:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a434:	e7df      	b.n	800a3f6 <_strtod_l+0xe6>
 800a436:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a438:	1c5a      	adds	r2, r3, #1
 800a43a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a43c:	785b      	ldrb	r3, [r3, #1]
 800a43e:	2b30      	cmp	r3, #48	@ 0x30
 800a440:	d0f9      	beq.n	800a436 <_strtod_l+0x126>
 800a442:	2b00      	cmp	r3, #0
 800a444:	d09d      	beq.n	800a382 <_strtod_l+0x72>
 800a446:	2301      	movs	r3, #1
 800a448:	9309      	str	r3, [sp, #36]	@ 0x24
 800a44a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a44c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a44e:	2300      	movs	r3, #0
 800a450:	9308      	str	r3, [sp, #32]
 800a452:	930a      	str	r3, [sp, #40]	@ 0x28
 800a454:	461f      	mov	r7, r3
 800a456:	220a      	movs	r2, #10
 800a458:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a45a:	7805      	ldrb	r5, [r0, #0]
 800a45c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a460:	b2d9      	uxtb	r1, r3
 800a462:	2909      	cmp	r1, #9
 800a464:	d928      	bls.n	800a4b8 <_strtod_l+0x1a8>
 800a466:	494e      	ldr	r1, [pc, #312]	@ (800a5a0 <_strtod_l+0x290>)
 800a468:	2201      	movs	r2, #1
 800a46a:	f001 fd78 	bl	800bf5e <strncmp>
 800a46e:	2800      	cmp	r0, #0
 800a470:	d032      	beq.n	800a4d8 <_strtod_l+0x1c8>
 800a472:	2000      	movs	r0, #0
 800a474:	462a      	mov	r2, r5
 800a476:	4681      	mov	r9, r0
 800a478:	463d      	mov	r5, r7
 800a47a:	4603      	mov	r3, r0
 800a47c:	2a65      	cmp	r2, #101	@ 0x65
 800a47e:	d001      	beq.n	800a484 <_strtod_l+0x174>
 800a480:	2a45      	cmp	r2, #69	@ 0x45
 800a482:	d114      	bne.n	800a4ae <_strtod_l+0x19e>
 800a484:	b91d      	cbnz	r5, 800a48e <_strtod_l+0x17e>
 800a486:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a488:	4302      	orrs	r2, r0
 800a48a:	d095      	beq.n	800a3b8 <_strtod_l+0xa8>
 800a48c:	2500      	movs	r5, #0
 800a48e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a490:	1c62      	adds	r2, r4, #1
 800a492:	9219      	str	r2, [sp, #100]	@ 0x64
 800a494:	7862      	ldrb	r2, [r4, #1]
 800a496:	2a2b      	cmp	r2, #43	@ 0x2b
 800a498:	d077      	beq.n	800a58a <_strtod_l+0x27a>
 800a49a:	2a2d      	cmp	r2, #45	@ 0x2d
 800a49c:	d07b      	beq.n	800a596 <_strtod_l+0x286>
 800a49e:	f04f 0c00 	mov.w	ip, #0
 800a4a2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a4a6:	2909      	cmp	r1, #9
 800a4a8:	f240 8082 	bls.w	800a5b0 <_strtod_l+0x2a0>
 800a4ac:	9419      	str	r4, [sp, #100]	@ 0x64
 800a4ae:	f04f 0800 	mov.w	r8, #0
 800a4b2:	e0a2      	b.n	800a5fa <_strtod_l+0x2ea>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	e7c7      	b.n	800a448 <_strtod_l+0x138>
 800a4b8:	2f08      	cmp	r7, #8
 800a4ba:	bfd5      	itete	le
 800a4bc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a4be:	9908      	ldrgt	r1, [sp, #32]
 800a4c0:	fb02 3301 	mlale	r3, r2, r1, r3
 800a4c4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a4c8:	f100 0001 	add.w	r0, r0, #1
 800a4cc:	bfd4      	ite	le
 800a4ce:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a4d0:	9308      	strgt	r3, [sp, #32]
 800a4d2:	3701      	adds	r7, #1
 800a4d4:	9019      	str	r0, [sp, #100]	@ 0x64
 800a4d6:	e7bf      	b.n	800a458 <_strtod_l+0x148>
 800a4d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4da:	1c5a      	adds	r2, r3, #1
 800a4dc:	9219      	str	r2, [sp, #100]	@ 0x64
 800a4de:	785a      	ldrb	r2, [r3, #1]
 800a4e0:	b37f      	cbz	r7, 800a542 <_strtod_l+0x232>
 800a4e2:	4681      	mov	r9, r0
 800a4e4:	463d      	mov	r5, r7
 800a4e6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a4ea:	2b09      	cmp	r3, #9
 800a4ec:	d912      	bls.n	800a514 <_strtod_l+0x204>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	e7c4      	b.n	800a47c <_strtod_l+0x16c>
 800a4f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4f4:	1c5a      	adds	r2, r3, #1
 800a4f6:	9219      	str	r2, [sp, #100]	@ 0x64
 800a4f8:	785a      	ldrb	r2, [r3, #1]
 800a4fa:	3001      	adds	r0, #1
 800a4fc:	2a30      	cmp	r2, #48	@ 0x30
 800a4fe:	d0f8      	beq.n	800a4f2 <_strtod_l+0x1e2>
 800a500:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a504:	2b08      	cmp	r3, #8
 800a506:	f200 84d3 	bhi.w	800aeb0 <_strtod_l+0xba0>
 800a50a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a50c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a50e:	4681      	mov	r9, r0
 800a510:	2000      	movs	r0, #0
 800a512:	4605      	mov	r5, r0
 800a514:	3a30      	subs	r2, #48	@ 0x30
 800a516:	f100 0301 	add.w	r3, r0, #1
 800a51a:	d02a      	beq.n	800a572 <_strtod_l+0x262>
 800a51c:	4499      	add	r9, r3
 800a51e:	eb00 0c05 	add.w	ip, r0, r5
 800a522:	462b      	mov	r3, r5
 800a524:	210a      	movs	r1, #10
 800a526:	4563      	cmp	r3, ip
 800a528:	d10d      	bne.n	800a546 <_strtod_l+0x236>
 800a52a:	1c69      	adds	r1, r5, #1
 800a52c:	4401      	add	r1, r0
 800a52e:	4428      	add	r0, r5
 800a530:	2808      	cmp	r0, #8
 800a532:	dc16      	bgt.n	800a562 <_strtod_l+0x252>
 800a534:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a536:	230a      	movs	r3, #10
 800a538:	fb03 2300 	mla	r3, r3, r0, r2
 800a53c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a53e:	2300      	movs	r3, #0
 800a540:	e018      	b.n	800a574 <_strtod_l+0x264>
 800a542:	4638      	mov	r0, r7
 800a544:	e7da      	b.n	800a4fc <_strtod_l+0x1ec>
 800a546:	2b08      	cmp	r3, #8
 800a548:	f103 0301 	add.w	r3, r3, #1
 800a54c:	dc03      	bgt.n	800a556 <_strtod_l+0x246>
 800a54e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a550:	434e      	muls	r6, r1
 800a552:	960a      	str	r6, [sp, #40]	@ 0x28
 800a554:	e7e7      	b.n	800a526 <_strtod_l+0x216>
 800a556:	2b10      	cmp	r3, #16
 800a558:	bfde      	ittt	le
 800a55a:	9e08      	ldrle	r6, [sp, #32]
 800a55c:	434e      	mulle	r6, r1
 800a55e:	9608      	strle	r6, [sp, #32]
 800a560:	e7e1      	b.n	800a526 <_strtod_l+0x216>
 800a562:	280f      	cmp	r0, #15
 800a564:	dceb      	bgt.n	800a53e <_strtod_l+0x22e>
 800a566:	9808      	ldr	r0, [sp, #32]
 800a568:	230a      	movs	r3, #10
 800a56a:	fb03 2300 	mla	r3, r3, r0, r2
 800a56e:	9308      	str	r3, [sp, #32]
 800a570:	e7e5      	b.n	800a53e <_strtod_l+0x22e>
 800a572:	4629      	mov	r1, r5
 800a574:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a576:	1c50      	adds	r0, r2, #1
 800a578:	9019      	str	r0, [sp, #100]	@ 0x64
 800a57a:	7852      	ldrb	r2, [r2, #1]
 800a57c:	4618      	mov	r0, r3
 800a57e:	460d      	mov	r5, r1
 800a580:	e7b1      	b.n	800a4e6 <_strtod_l+0x1d6>
 800a582:	f04f 0900 	mov.w	r9, #0
 800a586:	2301      	movs	r3, #1
 800a588:	e77d      	b.n	800a486 <_strtod_l+0x176>
 800a58a:	f04f 0c00 	mov.w	ip, #0
 800a58e:	1ca2      	adds	r2, r4, #2
 800a590:	9219      	str	r2, [sp, #100]	@ 0x64
 800a592:	78a2      	ldrb	r2, [r4, #2]
 800a594:	e785      	b.n	800a4a2 <_strtod_l+0x192>
 800a596:	f04f 0c01 	mov.w	ip, #1
 800a59a:	e7f8      	b.n	800a58e <_strtod_l+0x27e>
 800a59c:	0800ebbc 	.word	0x0800ebbc
 800a5a0:	0800eba4 	.word	0x0800eba4
 800a5a4:	7ff00000 	.word	0x7ff00000
 800a5a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a5aa:	1c51      	adds	r1, r2, #1
 800a5ac:	9119      	str	r1, [sp, #100]	@ 0x64
 800a5ae:	7852      	ldrb	r2, [r2, #1]
 800a5b0:	2a30      	cmp	r2, #48	@ 0x30
 800a5b2:	d0f9      	beq.n	800a5a8 <_strtod_l+0x298>
 800a5b4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a5b8:	2908      	cmp	r1, #8
 800a5ba:	f63f af78 	bhi.w	800a4ae <_strtod_l+0x19e>
 800a5be:	3a30      	subs	r2, #48	@ 0x30
 800a5c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a5c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a5c4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a5c6:	f04f 080a 	mov.w	r8, #10
 800a5ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a5cc:	1c56      	adds	r6, r2, #1
 800a5ce:	9619      	str	r6, [sp, #100]	@ 0x64
 800a5d0:	7852      	ldrb	r2, [r2, #1]
 800a5d2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a5d6:	f1be 0f09 	cmp.w	lr, #9
 800a5da:	d939      	bls.n	800a650 <_strtod_l+0x340>
 800a5dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a5de:	1a76      	subs	r6, r6, r1
 800a5e0:	2e08      	cmp	r6, #8
 800a5e2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a5e6:	dc03      	bgt.n	800a5f0 <_strtod_l+0x2e0>
 800a5e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a5ea:	4588      	cmp	r8, r1
 800a5ec:	bfa8      	it	ge
 800a5ee:	4688      	movge	r8, r1
 800a5f0:	f1bc 0f00 	cmp.w	ip, #0
 800a5f4:	d001      	beq.n	800a5fa <_strtod_l+0x2ea>
 800a5f6:	f1c8 0800 	rsb	r8, r8, #0
 800a5fa:	2d00      	cmp	r5, #0
 800a5fc:	d14e      	bne.n	800a69c <_strtod_l+0x38c>
 800a5fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a600:	4308      	orrs	r0, r1
 800a602:	f47f aebe 	bne.w	800a382 <_strtod_l+0x72>
 800a606:	2b00      	cmp	r3, #0
 800a608:	f47f aed6 	bne.w	800a3b8 <_strtod_l+0xa8>
 800a60c:	2a69      	cmp	r2, #105	@ 0x69
 800a60e:	d028      	beq.n	800a662 <_strtod_l+0x352>
 800a610:	dc25      	bgt.n	800a65e <_strtod_l+0x34e>
 800a612:	2a49      	cmp	r2, #73	@ 0x49
 800a614:	d025      	beq.n	800a662 <_strtod_l+0x352>
 800a616:	2a4e      	cmp	r2, #78	@ 0x4e
 800a618:	f47f aece 	bne.w	800a3b8 <_strtod_l+0xa8>
 800a61c:	499b      	ldr	r1, [pc, #620]	@ (800a88c <_strtod_l+0x57c>)
 800a61e:	a819      	add	r0, sp, #100	@ 0x64
 800a620:	f002 fede 	bl	800d3e0 <__match>
 800a624:	2800      	cmp	r0, #0
 800a626:	f43f aec7 	beq.w	800a3b8 <_strtod_l+0xa8>
 800a62a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	2b28      	cmp	r3, #40	@ 0x28
 800a630:	d12e      	bne.n	800a690 <_strtod_l+0x380>
 800a632:	4997      	ldr	r1, [pc, #604]	@ (800a890 <_strtod_l+0x580>)
 800a634:	aa1c      	add	r2, sp, #112	@ 0x70
 800a636:	a819      	add	r0, sp, #100	@ 0x64
 800a638:	f002 fee6 	bl	800d408 <__hexnan>
 800a63c:	2805      	cmp	r0, #5
 800a63e:	d127      	bne.n	800a690 <_strtod_l+0x380>
 800a640:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a642:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a646:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a64a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a64e:	e698      	b.n	800a382 <_strtod_l+0x72>
 800a650:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a652:	fb08 2101 	mla	r1, r8, r1, r2
 800a656:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a65a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a65c:	e7b5      	b.n	800a5ca <_strtod_l+0x2ba>
 800a65e:	2a6e      	cmp	r2, #110	@ 0x6e
 800a660:	e7da      	b.n	800a618 <_strtod_l+0x308>
 800a662:	498c      	ldr	r1, [pc, #560]	@ (800a894 <_strtod_l+0x584>)
 800a664:	a819      	add	r0, sp, #100	@ 0x64
 800a666:	f002 febb 	bl	800d3e0 <__match>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	f43f aea4 	beq.w	800a3b8 <_strtod_l+0xa8>
 800a670:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a672:	4989      	ldr	r1, [pc, #548]	@ (800a898 <_strtod_l+0x588>)
 800a674:	3b01      	subs	r3, #1
 800a676:	a819      	add	r0, sp, #100	@ 0x64
 800a678:	9319      	str	r3, [sp, #100]	@ 0x64
 800a67a:	f002 feb1 	bl	800d3e0 <__match>
 800a67e:	b910      	cbnz	r0, 800a686 <_strtod_l+0x376>
 800a680:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a682:	3301      	adds	r3, #1
 800a684:	9319      	str	r3, [sp, #100]	@ 0x64
 800a686:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a8a8 <_strtod_l+0x598>
 800a68a:	f04f 0a00 	mov.w	sl, #0
 800a68e:	e678      	b.n	800a382 <_strtod_l+0x72>
 800a690:	4882      	ldr	r0, [pc, #520]	@ (800a89c <_strtod_l+0x58c>)
 800a692:	f001 fd59 	bl	800c148 <nan>
 800a696:	ec5b ab10 	vmov	sl, fp, d0
 800a69a:	e672      	b.n	800a382 <_strtod_l+0x72>
 800a69c:	eba8 0309 	sub.w	r3, r8, r9
 800a6a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a6a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6a4:	2f00      	cmp	r7, #0
 800a6a6:	bf08      	it	eq
 800a6a8:	462f      	moveq	r7, r5
 800a6aa:	2d10      	cmp	r5, #16
 800a6ac:	462c      	mov	r4, r5
 800a6ae:	bfa8      	it	ge
 800a6b0:	2410      	movge	r4, #16
 800a6b2:	f7f5 ff5f 	bl	8000574 <__aeabi_ui2d>
 800a6b6:	2d09      	cmp	r5, #9
 800a6b8:	4682      	mov	sl, r0
 800a6ba:	468b      	mov	fp, r1
 800a6bc:	dc13      	bgt.n	800a6e6 <_strtod_l+0x3d6>
 800a6be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	f43f ae5e 	beq.w	800a382 <_strtod_l+0x72>
 800a6c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6c8:	dd78      	ble.n	800a7bc <_strtod_l+0x4ac>
 800a6ca:	2b16      	cmp	r3, #22
 800a6cc:	dc5f      	bgt.n	800a78e <_strtod_l+0x47e>
 800a6ce:	4974      	ldr	r1, [pc, #464]	@ (800a8a0 <_strtod_l+0x590>)
 800a6d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a6d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6d8:	4652      	mov	r2, sl
 800a6da:	465b      	mov	r3, fp
 800a6dc:	f7f5 ffc4 	bl	8000668 <__aeabi_dmul>
 800a6e0:	4682      	mov	sl, r0
 800a6e2:	468b      	mov	fp, r1
 800a6e4:	e64d      	b.n	800a382 <_strtod_l+0x72>
 800a6e6:	4b6e      	ldr	r3, [pc, #440]	@ (800a8a0 <_strtod_l+0x590>)
 800a6e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a6ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a6f0:	f7f5 ffba 	bl	8000668 <__aeabi_dmul>
 800a6f4:	4682      	mov	sl, r0
 800a6f6:	9808      	ldr	r0, [sp, #32]
 800a6f8:	468b      	mov	fp, r1
 800a6fa:	f7f5 ff3b 	bl	8000574 <__aeabi_ui2d>
 800a6fe:	4602      	mov	r2, r0
 800a700:	460b      	mov	r3, r1
 800a702:	4650      	mov	r0, sl
 800a704:	4659      	mov	r1, fp
 800a706:	f7f5 fdf9 	bl	80002fc <__adddf3>
 800a70a:	2d0f      	cmp	r5, #15
 800a70c:	4682      	mov	sl, r0
 800a70e:	468b      	mov	fp, r1
 800a710:	ddd5      	ble.n	800a6be <_strtod_l+0x3ae>
 800a712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a714:	1b2c      	subs	r4, r5, r4
 800a716:	441c      	add	r4, r3
 800a718:	2c00      	cmp	r4, #0
 800a71a:	f340 8096 	ble.w	800a84a <_strtod_l+0x53a>
 800a71e:	f014 030f 	ands.w	r3, r4, #15
 800a722:	d00a      	beq.n	800a73a <_strtod_l+0x42a>
 800a724:	495e      	ldr	r1, [pc, #376]	@ (800a8a0 <_strtod_l+0x590>)
 800a726:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a72a:	4652      	mov	r2, sl
 800a72c:	465b      	mov	r3, fp
 800a72e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a732:	f7f5 ff99 	bl	8000668 <__aeabi_dmul>
 800a736:	4682      	mov	sl, r0
 800a738:	468b      	mov	fp, r1
 800a73a:	f034 040f 	bics.w	r4, r4, #15
 800a73e:	d073      	beq.n	800a828 <_strtod_l+0x518>
 800a740:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a744:	dd48      	ble.n	800a7d8 <_strtod_l+0x4c8>
 800a746:	2400      	movs	r4, #0
 800a748:	46a0      	mov	r8, r4
 800a74a:	940a      	str	r4, [sp, #40]	@ 0x28
 800a74c:	46a1      	mov	r9, r4
 800a74e:	9a05      	ldr	r2, [sp, #20]
 800a750:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a8a8 <_strtod_l+0x598>
 800a754:	2322      	movs	r3, #34	@ 0x22
 800a756:	6013      	str	r3, [r2, #0]
 800a758:	f04f 0a00 	mov.w	sl, #0
 800a75c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a75e:	2b00      	cmp	r3, #0
 800a760:	f43f ae0f 	beq.w	800a382 <_strtod_l+0x72>
 800a764:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a766:	9805      	ldr	r0, [sp, #20]
 800a768:	f002 fff2 	bl	800d750 <_Bfree>
 800a76c:	9805      	ldr	r0, [sp, #20]
 800a76e:	4649      	mov	r1, r9
 800a770:	f002 ffee 	bl	800d750 <_Bfree>
 800a774:	9805      	ldr	r0, [sp, #20]
 800a776:	4641      	mov	r1, r8
 800a778:	f002 ffea 	bl	800d750 <_Bfree>
 800a77c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a77e:	9805      	ldr	r0, [sp, #20]
 800a780:	f002 ffe6 	bl	800d750 <_Bfree>
 800a784:	9805      	ldr	r0, [sp, #20]
 800a786:	4621      	mov	r1, r4
 800a788:	f002 ffe2 	bl	800d750 <_Bfree>
 800a78c:	e5f9      	b.n	800a382 <_strtod_l+0x72>
 800a78e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a790:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a794:	4293      	cmp	r3, r2
 800a796:	dbbc      	blt.n	800a712 <_strtod_l+0x402>
 800a798:	4c41      	ldr	r4, [pc, #260]	@ (800a8a0 <_strtod_l+0x590>)
 800a79a:	f1c5 050f 	rsb	r5, r5, #15
 800a79e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a7a2:	4652      	mov	r2, sl
 800a7a4:	465b      	mov	r3, fp
 800a7a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7aa:	f7f5 ff5d 	bl	8000668 <__aeabi_dmul>
 800a7ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7b0:	1b5d      	subs	r5, r3, r5
 800a7b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a7b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a7ba:	e78f      	b.n	800a6dc <_strtod_l+0x3cc>
 800a7bc:	3316      	adds	r3, #22
 800a7be:	dba8      	blt.n	800a712 <_strtod_l+0x402>
 800a7c0:	4b37      	ldr	r3, [pc, #220]	@ (800a8a0 <_strtod_l+0x590>)
 800a7c2:	eba9 0808 	sub.w	r8, r9, r8
 800a7c6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a7ca:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a7ce:	4650      	mov	r0, sl
 800a7d0:	4659      	mov	r1, fp
 800a7d2:	f7f6 f873 	bl	80008bc <__aeabi_ddiv>
 800a7d6:	e783      	b.n	800a6e0 <_strtod_l+0x3d0>
 800a7d8:	4b32      	ldr	r3, [pc, #200]	@ (800a8a4 <_strtod_l+0x594>)
 800a7da:	9308      	str	r3, [sp, #32]
 800a7dc:	2300      	movs	r3, #0
 800a7de:	1124      	asrs	r4, r4, #4
 800a7e0:	4650      	mov	r0, sl
 800a7e2:	4659      	mov	r1, fp
 800a7e4:	461e      	mov	r6, r3
 800a7e6:	2c01      	cmp	r4, #1
 800a7e8:	dc21      	bgt.n	800a82e <_strtod_l+0x51e>
 800a7ea:	b10b      	cbz	r3, 800a7f0 <_strtod_l+0x4e0>
 800a7ec:	4682      	mov	sl, r0
 800a7ee:	468b      	mov	fp, r1
 800a7f0:	492c      	ldr	r1, [pc, #176]	@ (800a8a4 <_strtod_l+0x594>)
 800a7f2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a7f6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a7fa:	4652      	mov	r2, sl
 800a7fc:	465b      	mov	r3, fp
 800a7fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a802:	f7f5 ff31 	bl	8000668 <__aeabi_dmul>
 800a806:	4b28      	ldr	r3, [pc, #160]	@ (800a8a8 <_strtod_l+0x598>)
 800a808:	460a      	mov	r2, r1
 800a80a:	400b      	ands	r3, r1
 800a80c:	4927      	ldr	r1, [pc, #156]	@ (800a8ac <_strtod_l+0x59c>)
 800a80e:	428b      	cmp	r3, r1
 800a810:	4682      	mov	sl, r0
 800a812:	d898      	bhi.n	800a746 <_strtod_l+0x436>
 800a814:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a818:	428b      	cmp	r3, r1
 800a81a:	bf86      	itte	hi
 800a81c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a8b0 <_strtod_l+0x5a0>
 800a820:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800a824:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a828:	2300      	movs	r3, #0
 800a82a:	9308      	str	r3, [sp, #32]
 800a82c:	e07a      	b.n	800a924 <_strtod_l+0x614>
 800a82e:	07e2      	lsls	r2, r4, #31
 800a830:	d505      	bpl.n	800a83e <_strtod_l+0x52e>
 800a832:	9b08      	ldr	r3, [sp, #32]
 800a834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a838:	f7f5 ff16 	bl	8000668 <__aeabi_dmul>
 800a83c:	2301      	movs	r3, #1
 800a83e:	9a08      	ldr	r2, [sp, #32]
 800a840:	3208      	adds	r2, #8
 800a842:	3601      	adds	r6, #1
 800a844:	1064      	asrs	r4, r4, #1
 800a846:	9208      	str	r2, [sp, #32]
 800a848:	e7cd      	b.n	800a7e6 <_strtod_l+0x4d6>
 800a84a:	d0ed      	beq.n	800a828 <_strtod_l+0x518>
 800a84c:	4264      	negs	r4, r4
 800a84e:	f014 020f 	ands.w	r2, r4, #15
 800a852:	d00a      	beq.n	800a86a <_strtod_l+0x55a>
 800a854:	4b12      	ldr	r3, [pc, #72]	@ (800a8a0 <_strtod_l+0x590>)
 800a856:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a85a:	4650      	mov	r0, sl
 800a85c:	4659      	mov	r1, fp
 800a85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a862:	f7f6 f82b 	bl	80008bc <__aeabi_ddiv>
 800a866:	4682      	mov	sl, r0
 800a868:	468b      	mov	fp, r1
 800a86a:	1124      	asrs	r4, r4, #4
 800a86c:	d0dc      	beq.n	800a828 <_strtod_l+0x518>
 800a86e:	2c1f      	cmp	r4, #31
 800a870:	dd20      	ble.n	800a8b4 <_strtod_l+0x5a4>
 800a872:	2400      	movs	r4, #0
 800a874:	46a0      	mov	r8, r4
 800a876:	940a      	str	r4, [sp, #40]	@ 0x28
 800a878:	46a1      	mov	r9, r4
 800a87a:	9a05      	ldr	r2, [sp, #20]
 800a87c:	2322      	movs	r3, #34	@ 0x22
 800a87e:	f04f 0a00 	mov.w	sl, #0
 800a882:	f04f 0b00 	mov.w	fp, #0
 800a886:	6013      	str	r3, [r2, #0]
 800a888:	e768      	b.n	800a75c <_strtod_l+0x44c>
 800a88a:	bf00      	nop
 800a88c:	0800ed06 	.word	0x0800ed06
 800a890:	0800eba8 	.word	0x0800eba8
 800a894:	0800ecfe 	.word	0x0800ecfe
 800a898:	0800edea 	.word	0x0800edea
 800a89c:	0800ede6 	.word	0x0800ede6
 800a8a0:	0800ef50 	.word	0x0800ef50
 800a8a4:	0800ef28 	.word	0x0800ef28
 800a8a8:	7ff00000 	.word	0x7ff00000
 800a8ac:	7ca00000 	.word	0x7ca00000
 800a8b0:	7fefffff 	.word	0x7fefffff
 800a8b4:	f014 0310 	ands.w	r3, r4, #16
 800a8b8:	bf18      	it	ne
 800a8ba:	236a      	movne	r3, #106	@ 0x6a
 800a8bc:	4ea9      	ldr	r6, [pc, #676]	@ (800ab64 <_strtod_l+0x854>)
 800a8be:	9308      	str	r3, [sp, #32]
 800a8c0:	4650      	mov	r0, sl
 800a8c2:	4659      	mov	r1, fp
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	07e2      	lsls	r2, r4, #31
 800a8c8:	d504      	bpl.n	800a8d4 <_strtod_l+0x5c4>
 800a8ca:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a8ce:	f7f5 fecb 	bl	8000668 <__aeabi_dmul>
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	1064      	asrs	r4, r4, #1
 800a8d6:	f106 0608 	add.w	r6, r6, #8
 800a8da:	d1f4      	bne.n	800a8c6 <_strtod_l+0x5b6>
 800a8dc:	b10b      	cbz	r3, 800a8e2 <_strtod_l+0x5d2>
 800a8de:	4682      	mov	sl, r0
 800a8e0:	468b      	mov	fp, r1
 800a8e2:	9b08      	ldr	r3, [sp, #32]
 800a8e4:	b1b3      	cbz	r3, 800a914 <_strtod_l+0x604>
 800a8e6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a8ea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	4659      	mov	r1, fp
 800a8f2:	dd0f      	ble.n	800a914 <_strtod_l+0x604>
 800a8f4:	2b1f      	cmp	r3, #31
 800a8f6:	dd55      	ble.n	800a9a4 <_strtod_l+0x694>
 800a8f8:	2b34      	cmp	r3, #52	@ 0x34
 800a8fa:	bfde      	ittt	le
 800a8fc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800a900:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a904:	4093      	lslle	r3, r2
 800a906:	f04f 0a00 	mov.w	sl, #0
 800a90a:	bfcc      	ite	gt
 800a90c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a910:	ea03 0b01 	andle.w	fp, r3, r1
 800a914:	2200      	movs	r2, #0
 800a916:	2300      	movs	r3, #0
 800a918:	4650      	mov	r0, sl
 800a91a:	4659      	mov	r1, fp
 800a91c:	f7f6 f90c 	bl	8000b38 <__aeabi_dcmpeq>
 800a920:	2800      	cmp	r0, #0
 800a922:	d1a6      	bne.n	800a872 <_strtod_l+0x562>
 800a924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a926:	9300      	str	r3, [sp, #0]
 800a928:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a92a:	9805      	ldr	r0, [sp, #20]
 800a92c:	462b      	mov	r3, r5
 800a92e:	463a      	mov	r2, r7
 800a930:	f002 ff76 	bl	800d820 <__s2b>
 800a934:	900a      	str	r0, [sp, #40]	@ 0x28
 800a936:	2800      	cmp	r0, #0
 800a938:	f43f af05 	beq.w	800a746 <_strtod_l+0x436>
 800a93c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a93e:	2a00      	cmp	r2, #0
 800a940:	eba9 0308 	sub.w	r3, r9, r8
 800a944:	bfa8      	it	ge
 800a946:	2300      	movge	r3, #0
 800a948:	9312      	str	r3, [sp, #72]	@ 0x48
 800a94a:	2400      	movs	r4, #0
 800a94c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a950:	9316      	str	r3, [sp, #88]	@ 0x58
 800a952:	46a0      	mov	r8, r4
 800a954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a956:	9805      	ldr	r0, [sp, #20]
 800a958:	6859      	ldr	r1, [r3, #4]
 800a95a:	f002 feb9 	bl	800d6d0 <_Balloc>
 800a95e:	4681      	mov	r9, r0
 800a960:	2800      	cmp	r0, #0
 800a962:	f43f aef4 	beq.w	800a74e <_strtod_l+0x43e>
 800a966:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a968:	691a      	ldr	r2, [r3, #16]
 800a96a:	3202      	adds	r2, #2
 800a96c:	f103 010c 	add.w	r1, r3, #12
 800a970:	0092      	lsls	r2, r2, #2
 800a972:	300c      	adds	r0, #12
 800a974:	f001 fbd9 	bl	800c12a <memcpy>
 800a978:	ec4b ab10 	vmov	d0, sl, fp
 800a97c:	9805      	ldr	r0, [sp, #20]
 800a97e:	aa1c      	add	r2, sp, #112	@ 0x70
 800a980:	a91b      	add	r1, sp, #108	@ 0x6c
 800a982:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a986:	f003 fa87 	bl	800de98 <__d2b>
 800a98a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a98c:	2800      	cmp	r0, #0
 800a98e:	f43f aede 	beq.w	800a74e <_strtod_l+0x43e>
 800a992:	9805      	ldr	r0, [sp, #20]
 800a994:	2101      	movs	r1, #1
 800a996:	f002 ffd9 	bl	800d94c <__i2b>
 800a99a:	4680      	mov	r8, r0
 800a99c:	b948      	cbnz	r0, 800a9b2 <_strtod_l+0x6a2>
 800a99e:	f04f 0800 	mov.w	r8, #0
 800a9a2:	e6d4      	b.n	800a74e <_strtod_l+0x43e>
 800a9a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a9a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ac:	ea03 0a0a 	and.w	sl, r3, sl
 800a9b0:	e7b0      	b.n	800a914 <_strtod_l+0x604>
 800a9b2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a9b4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a9b6:	2d00      	cmp	r5, #0
 800a9b8:	bfab      	itete	ge
 800a9ba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a9bc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a9be:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a9c0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a9c2:	bfac      	ite	ge
 800a9c4:	18ef      	addge	r7, r5, r3
 800a9c6:	1b5e      	sublt	r6, r3, r5
 800a9c8:	9b08      	ldr	r3, [sp, #32]
 800a9ca:	1aed      	subs	r5, r5, r3
 800a9cc:	4415      	add	r5, r2
 800a9ce:	4b66      	ldr	r3, [pc, #408]	@ (800ab68 <_strtod_l+0x858>)
 800a9d0:	3d01      	subs	r5, #1
 800a9d2:	429d      	cmp	r5, r3
 800a9d4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a9d8:	da50      	bge.n	800aa7c <_strtod_l+0x76c>
 800a9da:	1b5b      	subs	r3, r3, r5
 800a9dc:	2b1f      	cmp	r3, #31
 800a9de:	eba2 0203 	sub.w	r2, r2, r3
 800a9e2:	f04f 0101 	mov.w	r1, #1
 800a9e6:	dc3d      	bgt.n	800aa64 <_strtod_l+0x754>
 800a9e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a9ec:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a9f2:	18bd      	adds	r5, r7, r2
 800a9f4:	9b08      	ldr	r3, [sp, #32]
 800a9f6:	42af      	cmp	r7, r5
 800a9f8:	4416      	add	r6, r2
 800a9fa:	441e      	add	r6, r3
 800a9fc:	463b      	mov	r3, r7
 800a9fe:	bfa8      	it	ge
 800aa00:	462b      	movge	r3, r5
 800aa02:	42b3      	cmp	r3, r6
 800aa04:	bfa8      	it	ge
 800aa06:	4633      	movge	r3, r6
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	bfc2      	ittt	gt
 800aa0c:	1aed      	subgt	r5, r5, r3
 800aa0e:	1af6      	subgt	r6, r6, r3
 800aa10:	1aff      	subgt	r7, r7, r3
 800aa12:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	dd16      	ble.n	800aa46 <_strtod_l+0x736>
 800aa18:	4641      	mov	r1, r8
 800aa1a:	9805      	ldr	r0, [sp, #20]
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	f003 f855 	bl	800dacc <__pow5mult>
 800aa22:	4680      	mov	r8, r0
 800aa24:	2800      	cmp	r0, #0
 800aa26:	d0ba      	beq.n	800a99e <_strtod_l+0x68e>
 800aa28:	4601      	mov	r1, r0
 800aa2a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aa2c:	9805      	ldr	r0, [sp, #20]
 800aa2e:	f002 ffa3 	bl	800d978 <__multiply>
 800aa32:	900e      	str	r0, [sp, #56]	@ 0x38
 800aa34:	2800      	cmp	r0, #0
 800aa36:	f43f ae8a 	beq.w	800a74e <_strtod_l+0x43e>
 800aa3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa3c:	9805      	ldr	r0, [sp, #20]
 800aa3e:	f002 fe87 	bl	800d750 <_Bfree>
 800aa42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa44:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa46:	2d00      	cmp	r5, #0
 800aa48:	dc1d      	bgt.n	800aa86 <_strtod_l+0x776>
 800aa4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	dd23      	ble.n	800aa98 <_strtod_l+0x788>
 800aa50:	4649      	mov	r1, r9
 800aa52:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800aa54:	9805      	ldr	r0, [sp, #20]
 800aa56:	f003 f839 	bl	800dacc <__pow5mult>
 800aa5a:	4681      	mov	r9, r0
 800aa5c:	b9e0      	cbnz	r0, 800aa98 <_strtod_l+0x788>
 800aa5e:	f04f 0900 	mov.w	r9, #0
 800aa62:	e674      	b.n	800a74e <_strtod_l+0x43e>
 800aa64:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800aa68:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800aa6c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800aa70:	35e2      	adds	r5, #226	@ 0xe2
 800aa72:	fa01 f305 	lsl.w	r3, r1, r5
 800aa76:	9310      	str	r3, [sp, #64]	@ 0x40
 800aa78:	9113      	str	r1, [sp, #76]	@ 0x4c
 800aa7a:	e7ba      	b.n	800a9f2 <_strtod_l+0x6e2>
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	9310      	str	r3, [sp, #64]	@ 0x40
 800aa80:	2301      	movs	r3, #1
 800aa82:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aa84:	e7b5      	b.n	800a9f2 <_strtod_l+0x6e2>
 800aa86:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa88:	9805      	ldr	r0, [sp, #20]
 800aa8a:	462a      	mov	r2, r5
 800aa8c:	f003 f878 	bl	800db80 <__lshift>
 800aa90:	901a      	str	r0, [sp, #104]	@ 0x68
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d1d9      	bne.n	800aa4a <_strtod_l+0x73a>
 800aa96:	e65a      	b.n	800a74e <_strtod_l+0x43e>
 800aa98:	2e00      	cmp	r6, #0
 800aa9a:	dd07      	ble.n	800aaac <_strtod_l+0x79c>
 800aa9c:	4649      	mov	r1, r9
 800aa9e:	9805      	ldr	r0, [sp, #20]
 800aaa0:	4632      	mov	r2, r6
 800aaa2:	f003 f86d 	bl	800db80 <__lshift>
 800aaa6:	4681      	mov	r9, r0
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	d0d8      	beq.n	800aa5e <_strtod_l+0x74e>
 800aaac:	2f00      	cmp	r7, #0
 800aaae:	dd08      	ble.n	800aac2 <_strtod_l+0x7b2>
 800aab0:	4641      	mov	r1, r8
 800aab2:	9805      	ldr	r0, [sp, #20]
 800aab4:	463a      	mov	r2, r7
 800aab6:	f003 f863 	bl	800db80 <__lshift>
 800aaba:	4680      	mov	r8, r0
 800aabc:	2800      	cmp	r0, #0
 800aabe:	f43f ae46 	beq.w	800a74e <_strtod_l+0x43e>
 800aac2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aac4:	9805      	ldr	r0, [sp, #20]
 800aac6:	464a      	mov	r2, r9
 800aac8:	f003 f8e2 	bl	800dc90 <__mdiff>
 800aacc:	4604      	mov	r4, r0
 800aace:	2800      	cmp	r0, #0
 800aad0:	f43f ae3d 	beq.w	800a74e <_strtod_l+0x43e>
 800aad4:	68c3      	ldr	r3, [r0, #12]
 800aad6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aad8:	2300      	movs	r3, #0
 800aada:	60c3      	str	r3, [r0, #12]
 800aadc:	4641      	mov	r1, r8
 800aade:	f003 f8bb 	bl	800dc58 <__mcmp>
 800aae2:	2800      	cmp	r0, #0
 800aae4:	da46      	bge.n	800ab74 <_strtod_l+0x864>
 800aae6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aae8:	ea53 030a 	orrs.w	r3, r3, sl
 800aaec:	d16c      	bne.n	800abc8 <_strtod_l+0x8b8>
 800aaee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d168      	bne.n	800abc8 <_strtod_l+0x8b8>
 800aaf6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aafa:	0d1b      	lsrs	r3, r3, #20
 800aafc:	051b      	lsls	r3, r3, #20
 800aafe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ab02:	d961      	bls.n	800abc8 <_strtod_l+0x8b8>
 800ab04:	6963      	ldr	r3, [r4, #20]
 800ab06:	b913      	cbnz	r3, 800ab0e <_strtod_l+0x7fe>
 800ab08:	6923      	ldr	r3, [r4, #16]
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	dd5c      	ble.n	800abc8 <_strtod_l+0x8b8>
 800ab0e:	4621      	mov	r1, r4
 800ab10:	2201      	movs	r2, #1
 800ab12:	9805      	ldr	r0, [sp, #20]
 800ab14:	f003 f834 	bl	800db80 <__lshift>
 800ab18:	4641      	mov	r1, r8
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	f003 f89c 	bl	800dc58 <__mcmp>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	dd51      	ble.n	800abc8 <_strtod_l+0x8b8>
 800ab24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab28:	9a08      	ldr	r2, [sp, #32]
 800ab2a:	0d1b      	lsrs	r3, r3, #20
 800ab2c:	051b      	lsls	r3, r3, #20
 800ab2e:	2a00      	cmp	r2, #0
 800ab30:	d06b      	beq.n	800ac0a <_strtod_l+0x8fa>
 800ab32:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ab36:	d868      	bhi.n	800ac0a <_strtod_l+0x8fa>
 800ab38:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ab3c:	f67f ae9d 	bls.w	800a87a <_strtod_l+0x56a>
 800ab40:	4b0a      	ldr	r3, [pc, #40]	@ (800ab6c <_strtod_l+0x85c>)
 800ab42:	4650      	mov	r0, sl
 800ab44:	4659      	mov	r1, fp
 800ab46:	2200      	movs	r2, #0
 800ab48:	f7f5 fd8e 	bl	8000668 <__aeabi_dmul>
 800ab4c:	4b08      	ldr	r3, [pc, #32]	@ (800ab70 <_strtod_l+0x860>)
 800ab4e:	400b      	ands	r3, r1
 800ab50:	4682      	mov	sl, r0
 800ab52:	468b      	mov	fp, r1
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f47f ae05 	bne.w	800a764 <_strtod_l+0x454>
 800ab5a:	9a05      	ldr	r2, [sp, #20]
 800ab5c:	2322      	movs	r3, #34	@ 0x22
 800ab5e:	6013      	str	r3, [r2, #0]
 800ab60:	e600      	b.n	800a764 <_strtod_l+0x454>
 800ab62:	bf00      	nop
 800ab64:	0800ebd0 	.word	0x0800ebd0
 800ab68:	fffffc02 	.word	0xfffffc02
 800ab6c:	39500000 	.word	0x39500000
 800ab70:	7ff00000 	.word	0x7ff00000
 800ab74:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ab78:	d165      	bne.n	800ac46 <_strtod_l+0x936>
 800ab7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ab7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab80:	b35a      	cbz	r2, 800abda <_strtod_l+0x8ca>
 800ab82:	4a9f      	ldr	r2, [pc, #636]	@ (800ae00 <_strtod_l+0xaf0>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d12b      	bne.n	800abe0 <_strtod_l+0x8d0>
 800ab88:	9b08      	ldr	r3, [sp, #32]
 800ab8a:	4651      	mov	r1, sl
 800ab8c:	b303      	cbz	r3, 800abd0 <_strtod_l+0x8c0>
 800ab8e:	4b9d      	ldr	r3, [pc, #628]	@ (800ae04 <_strtod_l+0xaf4>)
 800ab90:	465a      	mov	r2, fp
 800ab92:	4013      	ands	r3, r2
 800ab94:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ab98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab9c:	d81b      	bhi.n	800abd6 <_strtod_l+0x8c6>
 800ab9e:	0d1b      	lsrs	r3, r3, #20
 800aba0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aba4:	fa02 f303 	lsl.w	r3, r2, r3
 800aba8:	4299      	cmp	r1, r3
 800abaa:	d119      	bne.n	800abe0 <_strtod_l+0x8d0>
 800abac:	4b96      	ldr	r3, [pc, #600]	@ (800ae08 <_strtod_l+0xaf8>)
 800abae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d102      	bne.n	800abba <_strtod_l+0x8aa>
 800abb4:	3101      	adds	r1, #1
 800abb6:	f43f adca 	beq.w	800a74e <_strtod_l+0x43e>
 800abba:	4b92      	ldr	r3, [pc, #584]	@ (800ae04 <_strtod_l+0xaf4>)
 800abbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abbe:	401a      	ands	r2, r3
 800abc0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800abc4:	f04f 0a00 	mov.w	sl, #0
 800abc8:	9b08      	ldr	r3, [sp, #32]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1b8      	bne.n	800ab40 <_strtod_l+0x830>
 800abce:	e5c9      	b.n	800a764 <_strtod_l+0x454>
 800abd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800abd4:	e7e8      	b.n	800aba8 <_strtod_l+0x898>
 800abd6:	4613      	mov	r3, r2
 800abd8:	e7e6      	b.n	800aba8 <_strtod_l+0x898>
 800abda:	ea53 030a 	orrs.w	r3, r3, sl
 800abde:	d0a1      	beq.n	800ab24 <_strtod_l+0x814>
 800abe0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800abe2:	b1db      	cbz	r3, 800ac1c <_strtod_l+0x90c>
 800abe4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abe6:	4213      	tst	r3, r2
 800abe8:	d0ee      	beq.n	800abc8 <_strtod_l+0x8b8>
 800abea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abec:	9a08      	ldr	r2, [sp, #32]
 800abee:	4650      	mov	r0, sl
 800abf0:	4659      	mov	r1, fp
 800abf2:	b1bb      	cbz	r3, 800ac24 <_strtod_l+0x914>
 800abf4:	f7ff fb6d 	bl	800a2d2 <sulp>
 800abf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abfc:	ec53 2b10 	vmov	r2, r3, d0
 800ac00:	f7f5 fb7c 	bl	80002fc <__adddf3>
 800ac04:	4682      	mov	sl, r0
 800ac06:	468b      	mov	fp, r1
 800ac08:	e7de      	b.n	800abc8 <_strtod_l+0x8b8>
 800ac0a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ac0e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ac12:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ac16:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ac1a:	e7d5      	b.n	800abc8 <_strtod_l+0x8b8>
 800ac1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac1e:	ea13 0f0a 	tst.w	r3, sl
 800ac22:	e7e1      	b.n	800abe8 <_strtod_l+0x8d8>
 800ac24:	f7ff fb55 	bl	800a2d2 <sulp>
 800ac28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac2c:	ec53 2b10 	vmov	r2, r3, d0
 800ac30:	f7f5 fb62 	bl	80002f8 <__aeabi_dsub>
 800ac34:	2200      	movs	r2, #0
 800ac36:	2300      	movs	r3, #0
 800ac38:	4682      	mov	sl, r0
 800ac3a:	468b      	mov	fp, r1
 800ac3c:	f7f5 ff7c 	bl	8000b38 <__aeabi_dcmpeq>
 800ac40:	2800      	cmp	r0, #0
 800ac42:	d0c1      	beq.n	800abc8 <_strtod_l+0x8b8>
 800ac44:	e619      	b.n	800a87a <_strtod_l+0x56a>
 800ac46:	4641      	mov	r1, r8
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f003 f97d 	bl	800df48 <__ratio>
 800ac4e:	ec57 6b10 	vmov	r6, r7, d0
 800ac52:	2200      	movs	r2, #0
 800ac54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ac58:	4630      	mov	r0, r6
 800ac5a:	4639      	mov	r1, r7
 800ac5c:	f7f5 ff80 	bl	8000b60 <__aeabi_dcmple>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d06f      	beq.n	800ad44 <_strtod_l+0xa34>
 800ac64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d17a      	bne.n	800ad60 <_strtod_l+0xa50>
 800ac6a:	f1ba 0f00 	cmp.w	sl, #0
 800ac6e:	d158      	bne.n	800ad22 <_strtod_l+0xa12>
 800ac70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d15a      	bne.n	800ad30 <_strtod_l+0xa20>
 800ac7a:	4b64      	ldr	r3, [pc, #400]	@ (800ae0c <_strtod_l+0xafc>)
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	4630      	mov	r0, r6
 800ac80:	4639      	mov	r1, r7
 800ac82:	f7f5 ff63 	bl	8000b4c <__aeabi_dcmplt>
 800ac86:	2800      	cmp	r0, #0
 800ac88:	d159      	bne.n	800ad3e <_strtod_l+0xa2e>
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	4639      	mov	r1, r7
 800ac8e:	4b60      	ldr	r3, [pc, #384]	@ (800ae10 <_strtod_l+0xb00>)
 800ac90:	2200      	movs	r2, #0
 800ac92:	f7f5 fce9 	bl	8000668 <__aeabi_dmul>
 800ac96:	4606      	mov	r6, r0
 800ac98:	460f      	mov	r7, r1
 800ac9a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ac9e:	9606      	str	r6, [sp, #24]
 800aca0:	9307      	str	r3, [sp, #28]
 800aca2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aca6:	4d57      	ldr	r5, [pc, #348]	@ (800ae04 <_strtod_l+0xaf4>)
 800aca8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800acac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acae:	401d      	ands	r5, r3
 800acb0:	4b58      	ldr	r3, [pc, #352]	@ (800ae14 <_strtod_l+0xb04>)
 800acb2:	429d      	cmp	r5, r3
 800acb4:	f040 80b2 	bne.w	800ae1c <_strtod_l+0xb0c>
 800acb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800acbe:	ec4b ab10 	vmov	d0, sl, fp
 800acc2:	f003 f879 	bl	800ddb8 <__ulp>
 800acc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acca:	ec51 0b10 	vmov	r0, r1, d0
 800acce:	f7f5 fccb 	bl	8000668 <__aeabi_dmul>
 800acd2:	4652      	mov	r2, sl
 800acd4:	465b      	mov	r3, fp
 800acd6:	f7f5 fb11 	bl	80002fc <__adddf3>
 800acda:	460b      	mov	r3, r1
 800acdc:	4949      	ldr	r1, [pc, #292]	@ (800ae04 <_strtod_l+0xaf4>)
 800acde:	4a4e      	ldr	r2, [pc, #312]	@ (800ae18 <_strtod_l+0xb08>)
 800ace0:	4019      	ands	r1, r3
 800ace2:	4291      	cmp	r1, r2
 800ace4:	4682      	mov	sl, r0
 800ace6:	d942      	bls.n	800ad6e <_strtod_l+0xa5e>
 800ace8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800acea:	4b47      	ldr	r3, [pc, #284]	@ (800ae08 <_strtod_l+0xaf8>)
 800acec:	429a      	cmp	r2, r3
 800acee:	d103      	bne.n	800acf8 <_strtod_l+0x9e8>
 800acf0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800acf2:	3301      	adds	r3, #1
 800acf4:	f43f ad2b 	beq.w	800a74e <_strtod_l+0x43e>
 800acf8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ae08 <_strtod_l+0xaf8>
 800acfc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ad00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad02:	9805      	ldr	r0, [sp, #20]
 800ad04:	f002 fd24 	bl	800d750 <_Bfree>
 800ad08:	9805      	ldr	r0, [sp, #20]
 800ad0a:	4649      	mov	r1, r9
 800ad0c:	f002 fd20 	bl	800d750 <_Bfree>
 800ad10:	9805      	ldr	r0, [sp, #20]
 800ad12:	4641      	mov	r1, r8
 800ad14:	f002 fd1c 	bl	800d750 <_Bfree>
 800ad18:	9805      	ldr	r0, [sp, #20]
 800ad1a:	4621      	mov	r1, r4
 800ad1c:	f002 fd18 	bl	800d750 <_Bfree>
 800ad20:	e618      	b.n	800a954 <_strtod_l+0x644>
 800ad22:	f1ba 0f01 	cmp.w	sl, #1
 800ad26:	d103      	bne.n	800ad30 <_strtod_l+0xa20>
 800ad28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	f43f ada5 	beq.w	800a87a <_strtod_l+0x56a>
 800ad30:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ade0 <_strtod_l+0xad0>
 800ad34:	4f35      	ldr	r7, [pc, #212]	@ (800ae0c <_strtod_l+0xafc>)
 800ad36:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad3a:	2600      	movs	r6, #0
 800ad3c:	e7b1      	b.n	800aca2 <_strtod_l+0x992>
 800ad3e:	4f34      	ldr	r7, [pc, #208]	@ (800ae10 <_strtod_l+0xb00>)
 800ad40:	2600      	movs	r6, #0
 800ad42:	e7aa      	b.n	800ac9a <_strtod_l+0x98a>
 800ad44:	4b32      	ldr	r3, [pc, #200]	@ (800ae10 <_strtod_l+0xb00>)
 800ad46:	4630      	mov	r0, r6
 800ad48:	4639      	mov	r1, r7
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f7f5 fc8c 	bl	8000668 <__aeabi_dmul>
 800ad50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad52:	4606      	mov	r6, r0
 800ad54:	460f      	mov	r7, r1
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d09f      	beq.n	800ac9a <_strtod_l+0x98a>
 800ad5a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ad5e:	e7a0      	b.n	800aca2 <_strtod_l+0x992>
 800ad60:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ade8 <_strtod_l+0xad8>
 800ad64:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad68:	ec57 6b17 	vmov	r6, r7, d7
 800ad6c:	e799      	b.n	800aca2 <_strtod_l+0x992>
 800ad6e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ad72:	9b08      	ldr	r3, [sp, #32]
 800ad74:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d1c1      	bne.n	800ad00 <_strtod_l+0x9f0>
 800ad7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ad80:	0d1b      	lsrs	r3, r3, #20
 800ad82:	051b      	lsls	r3, r3, #20
 800ad84:	429d      	cmp	r5, r3
 800ad86:	d1bb      	bne.n	800ad00 <_strtod_l+0x9f0>
 800ad88:	4630      	mov	r0, r6
 800ad8a:	4639      	mov	r1, r7
 800ad8c:	f7f5 ffcc 	bl	8000d28 <__aeabi_d2lz>
 800ad90:	f7f5 fc3c 	bl	800060c <__aeabi_l2d>
 800ad94:	4602      	mov	r2, r0
 800ad96:	460b      	mov	r3, r1
 800ad98:	4630      	mov	r0, r6
 800ad9a:	4639      	mov	r1, r7
 800ad9c:	f7f5 faac 	bl	80002f8 <__aeabi_dsub>
 800ada0:	460b      	mov	r3, r1
 800ada2:	4602      	mov	r2, r0
 800ada4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ada8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800adac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adae:	ea46 060a 	orr.w	r6, r6, sl
 800adb2:	431e      	orrs	r6, r3
 800adb4:	d06f      	beq.n	800ae96 <_strtod_l+0xb86>
 800adb6:	a30e      	add	r3, pc, #56	@ (adr r3, 800adf0 <_strtod_l+0xae0>)
 800adb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbc:	f7f5 fec6 	bl	8000b4c <__aeabi_dcmplt>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	f47f accf 	bne.w	800a764 <_strtod_l+0x454>
 800adc6:	a30c      	add	r3, pc, #48	@ (adr r3, 800adf8 <_strtod_l+0xae8>)
 800adc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800add0:	f7f5 feda 	bl	8000b88 <__aeabi_dcmpgt>
 800add4:	2800      	cmp	r0, #0
 800add6:	d093      	beq.n	800ad00 <_strtod_l+0x9f0>
 800add8:	e4c4      	b.n	800a764 <_strtod_l+0x454>
 800adda:	bf00      	nop
 800addc:	f3af 8000 	nop.w
 800ade0:	00000000 	.word	0x00000000
 800ade4:	bff00000 	.word	0xbff00000
 800ade8:	00000000 	.word	0x00000000
 800adec:	3ff00000 	.word	0x3ff00000
 800adf0:	94a03595 	.word	0x94a03595
 800adf4:	3fdfffff 	.word	0x3fdfffff
 800adf8:	35afe535 	.word	0x35afe535
 800adfc:	3fe00000 	.word	0x3fe00000
 800ae00:	000fffff 	.word	0x000fffff
 800ae04:	7ff00000 	.word	0x7ff00000
 800ae08:	7fefffff 	.word	0x7fefffff
 800ae0c:	3ff00000 	.word	0x3ff00000
 800ae10:	3fe00000 	.word	0x3fe00000
 800ae14:	7fe00000 	.word	0x7fe00000
 800ae18:	7c9fffff 	.word	0x7c9fffff
 800ae1c:	9b08      	ldr	r3, [sp, #32]
 800ae1e:	b323      	cbz	r3, 800ae6a <_strtod_l+0xb5a>
 800ae20:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ae24:	d821      	bhi.n	800ae6a <_strtod_l+0xb5a>
 800ae26:	a328      	add	r3, pc, #160	@ (adr r3, 800aec8 <_strtod_l+0xbb8>)
 800ae28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	4639      	mov	r1, r7
 800ae30:	f7f5 fe96 	bl	8000b60 <__aeabi_dcmple>
 800ae34:	b1a0      	cbz	r0, 800ae60 <_strtod_l+0xb50>
 800ae36:	4639      	mov	r1, r7
 800ae38:	4630      	mov	r0, r6
 800ae3a:	f7f5 feed 	bl	8000c18 <__aeabi_d2uiz>
 800ae3e:	2801      	cmp	r0, #1
 800ae40:	bf38      	it	cc
 800ae42:	2001      	movcc	r0, #1
 800ae44:	f7f5 fb96 	bl	8000574 <__aeabi_ui2d>
 800ae48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae4a:	4606      	mov	r6, r0
 800ae4c:	460f      	mov	r7, r1
 800ae4e:	b9fb      	cbnz	r3, 800ae90 <_strtod_l+0xb80>
 800ae50:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae54:	9014      	str	r0, [sp, #80]	@ 0x50
 800ae56:	9315      	str	r3, [sp, #84]	@ 0x54
 800ae58:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ae5c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ae60:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ae62:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ae66:	1b5b      	subs	r3, r3, r5
 800ae68:	9311      	str	r3, [sp, #68]	@ 0x44
 800ae6a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ae6e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ae72:	f002 ffa1 	bl	800ddb8 <__ulp>
 800ae76:	4650      	mov	r0, sl
 800ae78:	ec53 2b10 	vmov	r2, r3, d0
 800ae7c:	4659      	mov	r1, fp
 800ae7e:	f7f5 fbf3 	bl	8000668 <__aeabi_dmul>
 800ae82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ae86:	f7f5 fa39 	bl	80002fc <__adddf3>
 800ae8a:	4682      	mov	sl, r0
 800ae8c:	468b      	mov	fp, r1
 800ae8e:	e770      	b.n	800ad72 <_strtod_l+0xa62>
 800ae90:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ae94:	e7e0      	b.n	800ae58 <_strtod_l+0xb48>
 800ae96:	a30e      	add	r3, pc, #56	@ (adr r3, 800aed0 <_strtod_l+0xbc0>)
 800ae98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae9c:	f7f5 fe56 	bl	8000b4c <__aeabi_dcmplt>
 800aea0:	e798      	b.n	800add4 <_strtod_l+0xac4>
 800aea2:	2300      	movs	r3, #0
 800aea4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aea6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800aea8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aeaa:	6013      	str	r3, [r2, #0]
 800aeac:	f7ff ba6d 	b.w	800a38a <_strtod_l+0x7a>
 800aeb0:	2a65      	cmp	r2, #101	@ 0x65
 800aeb2:	f43f ab66 	beq.w	800a582 <_strtod_l+0x272>
 800aeb6:	2a45      	cmp	r2, #69	@ 0x45
 800aeb8:	f43f ab63 	beq.w	800a582 <_strtod_l+0x272>
 800aebc:	2301      	movs	r3, #1
 800aebe:	f7ff bb9e 	b.w	800a5fe <_strtod_l+0x2ee>
 800aec2:	bf00      	nop
 800aec4:	f3af 8000 	nop.w
 800aec8:	ffc00000 	.word	0xffc00000
 800aecc:	41dfffff 	.word	0x41dfffff
 800aed0:	94a03595 	.word	0x94a03595
 800aed4:	3fcfffff 	.word	0x3fcfffff

0800aed8 <_strtod_r>:
 800aed8:	4b01      	ldr	r3, [pc, #4]	@ (800aee0 <_strtod_r+0x8>)
 800aeda:	f7ff ba19 	b.w	800a310 <_strtod_l>
 800aede:	bf00      	nop
 800aee0:	200001ec 	.word	0x200001ec

0800aee4 <strtod>:
 800aee4:	460a      	mov	r2, r1
 800aee6:	4601      	mov	r1, r0
 800aee8:	4802      	ldr	r0, [pc, #8]	@ (800aef4 <strtod+0x10>)
 800aeea:	4b03      	ldr	r3, [pc, #12]	@ (800aef8 <strtod+0x14>)
 800aeec:	6800      	ldr	r0, [r0, #0]
 800aeee:	f7ff ba0f 	b.w	800a310 <_strtod_l>
 800aef2:	bf00      	nop
 800aef4:	20000358 	.word	0x20000358
 800aef8:	200001ec 	.word	0x200001ec

0800aefc <_strtol_l.constprop.0>:
 800aefc:	2b24      	cmp	r3, #36	@ 0x24
 800aefe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af02:	4686      	mov	lr, r0
 800af04:	4690      	mov	r8, r2
 800af06:	d801      	bhi.n	800af0c <_strtol_l.constprop.0+0x10>
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d106      	bne.n	800af1a <_strtol_l.constprop.0+0x1e>
 800af0c:	f001 f8e0 	bl	800c0d0 <__errno>
 800af10:	2316      	movs	r3, #22
 800af12:	6003      	str	r3, [r0, #0]
 800af14:	2000      	movs	r0, #0
 800af16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af1a:	4834      	ldr	r0, [pc, #208]	@ (800afec <_strtol_l.constprop.0+0xf0>)
 800af1c:	460d      	mov	r5, r1
 800af1e:	462a      	mov	r2, r5
 800af20:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af24:	5d06      	ldrb	r6, [r0, r4]
 800af26:	f016 0608 	ands.w	r6, r6, #8
 800af2a:	d1f8      	bne.n	800af1e <_strtol_l.constprop.0+0x22>
 800af2c:	2c2d      	cmp	r4, #45	@ 0x2d
 800af2e:	d12d      	bne.n	800af8c <_strtol_l.constprop.0+0x90>
 800af30:	782c      	ldrb	r4, [r5, #0]
 800af32:	2601      	movs	r6, #1
 800af34:	1c95      	adds	r5, r2, #2
 800af36:	f033 0210 	bics.w	r2, r3, #16
 800af3a:	d109      	bne.n	800af50 <_strtol_l.constprop.0+0x54>
 800af3c:	2c30      	cmp	r4, #48	@ 0x30
 800af3e:	d12a      	bne.n	800af96 <_strtol_l.constprop.0+0x9a>
 800af40:	782a      	ldrb	r2, [r5, #0]
 800af42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800af46:	2a58      	cmp	r2, #88	@ 0x58
 800af48:	d125      	bne.n	800af96 <_strtol_l.constprop.0+0x9a>
 800af4a:	786c      	ldrb	r4, [r5, #1]
 800af4c:	2310      	movs	r3, #16
 800af4e:	3502      	adds	r5, #2
 800af50:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800af54:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800af58:	2200      	movs	r2, #0
 800af5a:	fbbc f9f3 	udiv	r9, ip, r3
 800af5e:	4610      	mov	r0, r2
 800af60:	fb03 ca19 	mls	sl, r3, r9, ip
 800af64:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800af68:	2f09      	cmp	r7, #9
 800af6a:	d81b      	bhi.n	800afa4 <_strtol_l.constprop.0+0xa8>
 800af6c:	463c      	mov	r4, r7
 800af6e:	42a3      	cmp	r3, r4
 800af70:	dd27      	ble.n	800afc2 <_strtol_l.constprop.0+0xc6>
 800af72:	1c57      	adds	r7, r2, #1
 800af74:	d007      	beq.n	800af86 <_strtol_l.constprop.0+0x8a>
 800af76:	4581      	cmp	r9, r0
 800af78:	d320      	bcc.n	800afbc <_strtol_l.constprop.0+0xc0>
 800af7a:	d101      	bne.n	800af80 <_strtol_l.constprop.0+0x84>
 800af7c:	45a2      	cmp	sl, r4
 800af7e:	db1d      	blt.n	800afbc <_strtol_l.constprop.0+0xc0>
 800af80:	fb00 4003 	mla	r0, r0, r3, r4
 800af84:	2201      	movs	r2, #1
 800af86:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af8a:	e7eb      	b.n	800af64 <_strtol_l.constprop.0+0x68>
 800af8c:	2c2b      	cmp	r4, #43	@ 0x2b
 800af8e:	bf04      	itt	eq
 800af90:	782c      	ldrbeq	r4, [r5, #0]
 800af92:	1c95      	addeq	r5, r2, #2
 800af94:	e7cf      	b.n	800af36 <_strtol_l.constprop.0+0x3a>
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1da      	bne.n	800af50 <_strtol_l.constprop.0+0x54>
 800af9a:	2c30      	cmp	r4, #48	@ 0x30
 800af9c:	bf0c      	ite	eq
 800af9e:	2308      	moveq	r3, #8
 800afa0:	230a      	movne	r3, #10
 800afa2:	e7d5      	b.n	800af50 <_strtol_l.constprop.0+0x54>
 800afa4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800afa8:	2f19      	cmp	r7, #25
 800afaa:	d801      	bhi.n	800afb0 <_strtol_l.constprop.0+0xb4>
 800afac:	3c37      	subs	r4, #55	@ 0x37
 800afae:	e7de      	b.n	800af6e <_strtol_l.constprop.0+0x72>
 800afb0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800afb4:	2f19      	cmp	r7, #25
 800afb6:	d804      	bhi.n	800afc2 <_strtol_l.constprop.0+0xc6>
 800afb8:	3c57      	subs	r4, #87	@ 0x57
 800afba:	e7d8      	b.n	800af6e <_strtol_l.constprop.0+0x72>
 800afbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800afc0:	e7e1      	b.n	800af86 <_strtol_l.constprop.0+0x8a>
 800afc2:	1c53      	adds	r3, r2, #1
 800afc4:	d108      	bne.n	800afd8 <_strtol_l.constprop.0+0xdc>
 800afc6:	2322      	movs	r3, #34	@ 0x22
 800afc8:	f8ce 3000 	str.w	r3, [lr]
 800afcc:	4660      	mov	r0, ip
 800afce:	f1b8 0f00 	cmp.w	r8, #0
 800afd2:	d0a0      	beq.n	800af16 <_strtol_l.constprop.0+0x1a>
 800afd4:	1e69      	subs	r1, r5, #1
 800afd6:	e006      	b.n	800afe6 <_strtol_l.constprop.0+0xea>
 800afd8:	b106      	cbz	r6, 800afdc <_strtol_l.constprop.0+0xe0>
 800afda:	4240      	negs	r0, r0
 800afdc:	f1b8 0f00 	cmp.w	r8, #0
 800afe0:	d099      	beq.n	800af16 <_strtol_l.constprop.0+0x1a>
 800afe2:	2a00      	cmp	r2, #0
 800afe4:	d1f6      	bne.n	800afd4 <_strtol_l.constprop.0+0xd8>
 800afe6:	f8c8 1000 	str.w	r1, [r8]
 800afea:	e794      	b.n	800af16 <_strtol_l.constprop.0+0x1a>
 800afec:	0800ebf9 	.word	0x0800ebf9

0800aff0 <_strtol_r>:
 800aff0:	f7ff bf84 	b.w	800aefc <_strtol_l.constprop.0>

0800aff4 <strtol>:
 800aff4:	4613      	mov	r3, r2
 800aff6:	460a      	mov	r2, r1
 800aff8:	4601      	mov	r1, r0
 800affa:	4802      	ldr	r0, [pc, #8]	@ (800b004 <strtol+0x10>)
 800affc:	6800      	ldr	r0, [r0, #0]
 800affe:	f7ff bf7d 	b.w	800aefc <_strtol_l.constprop.0>
 800b002:	bf00      	nop
 800b004:	20000358 	.word	0x20000358

0800b008 <__cvt>:
 800b008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b00c:	ec57 6b10 	vmov	r6, r7, d0
 800b010:	2f00      	cmp	r7, #0
 800b012:	460c      	mov	r4, r1
 800b014:	4619      	mov	r1, r3
 800b016:	463b      	mov	r3, r7
 800b018:	bfbb      	ittet	lt
 800b01a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b01e:	461f      	movlt	r7, r3
 800b020:	2300      	movge	r3, #0
 800b022:	232d      	movlt	r3, #45	@ 0x2d
 800b024:	700b      	strb	r3, [r1, #0]
 800b026:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b028:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b02c:	4691      	mov	r9, r2
 800b02e:	f023 0820 	bic.w	r8, r3, #32
 800b032:	bfbc      	itt	lt
 800b034:	4632      	movlt	r2, r6
 800b036:	4616      	movlt	r6, r2
 800b038:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b03c:	d005      	beq.n	800b04a <__cvt+0x42>
 800b03e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b042:	d100      	bne.n	800b046 <__cvt+0x3e>
 800b044:	3401      	adds	r4, #1
 800b046:	2102      	movs	r1, #2
 800b048:	e000      	b.n	800b04c <__cvt+0x44>
 800b04a:	2103      	movs	r1, #3
 800b04c:	ab03      	add	r3, sp, #12
 800b04e:	9301      	str	r3, [sp, #4]
 800b050:	ab02      	add	r3, sp, #8
 800b052:	9300      	str	r3, [sp, #0]
 800b054:	ec47 6b10 	vmov	d0, r6, r7
 800b058:	4653      	mov	r3, sl
 800b05a:	4622      	mov	r2, r4
 800b05c:	f001 f928 	bl	800c2b0 <_dtoa_r>
 800b060:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b064:	4605      	mov	r5, r0
 800b066:	d119      	bne.n	800b09c <__cvt+0x94>
 800b068:	f019 0f01 	tst.w	r9, #1
 800b06c:	d00e      	beq.n	800b08c <__cvt+0x84>
 800b06e:	eb00 0904 	add.w	r9, r0, r4
 800b072:	2200      	movs	r2, #0
 800b074:	2300      	movs	r3, #0
 800b076:	4630      	mov	r0, r6
 800b078:	4639      	mov	r1, r7
 800b07a:	f7f5 fd5d 	bl	8000b38 <__aeabi_dcmpeq>
 800b07e:	b108      	cbz	r0, 800b084 <__cvt+0x7c>
 800b080:	f8cd 900c 	str.w	r9, [sp, #12]
 800b084:	2230      	movs	r2, #48	@ 0x30
 800b086:	9b03      	ldr	r3, [sp, #12]
 800b088:	454b      	cmp	r3, r9
 800b08a:	d31e      	bcc.n	800b0ca <__cvt+0xc2>
 800b08c:	9b03      	ldr	r3, [sp, #12]
 800b08e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b090:	1b5b      	subs	r3, r3, r5
 800b092:	4628      	mov	r0, r5
 800b094:	6013      	str	r3, [r2, #0]
 800b096:	b004      	add	sp, #16
 800b098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b09c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b0a0:	eb00 0904 	add.w	r9, r0, r4
 800b0a4:	d1e5      	bne.n	800b072 <__cvt+0x6a>
 800b0a6:	7803      	ldrb	r3, [r0, #0]
 800b0a8:	2b30      	cmp	r3, #48	@ 0x30
 800b0aa:	d10a      	bne.n	800b0c2 <__cvt+0xba>
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	4630      	mov	r0, r6
 800b0b2:	4639      	mov	r1, r7
 800b0b4:	f7f5 fd40 	bl	8000b38 <__aeabi_dcmpeq>
 800b0b8:	b918      	cbnz	r0, 800b0c2 <__cvt+0xba>
 800b0ba:	f1c4 0401 	rsb	r4, r4, #1
 800b0be:	f8ca 4000 	str.w	r4, [sl]
 800b0c2:	f8da 3000 	ldr.w	r3, [sl]
 800b0c6:	4499      	add	r9, r3
 800b0c8:	e7d3      	b.n	800b072 <__cvt+0x6a>
 800b0ca:	1c59      	adds	r1, r3, #1
 800b0cc:	9103      	str	r1, [sp, #12]
 800b0ce:	701a      	strb	r2, [r3, #0]
 800b0d0:	e7d9      	b.n	800b086 <__cvt+0x7e>

0800b0d2 <__exponent>:
 800b0d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0d4:	2900      	cmp	r1, #0
 800b0d6:	bfba      	itte	lt
 800b0d8:	4249      	neglt	r1, r1
 800b0da:	232d      	movlt	r3, #45	@ 0x2d
 800b0dc:	232b      	movge	r3, #43	@ 0x2b
 800b0de:	2909      	cmp	r1, #9
 800b0e0:	7002      	strb	r2, [r0, #0]
 800b0e2:	7043      	strb	r3, [r0, #1]
 800b0e4:	dd29      	ble.n	800b13a <__exponent+0x68>
 800b0e6:	f10d 0307 	add.w	r3, sp, #7
 800b0ea:	461d      	mov	r5, r3
 800b0ec:	270a      	movs	r7, #10
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	fbb1 f6f7 	udiv	r6, r1, r7
 800b0f4:	fb07 1416 	mls	r4, r7, r6, r1
 800b0f8:	3430      	adds	r4, #48	@ 0x30
 800b0fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b0fe:	460c      	mov	r4, r1
 800b100:	2c63      	cmp	r4, #99	@ 0x63
 800b102:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b106:	4631      	mov	r1, r6
 800b108:	dcf1      	bgt.n	800b0ee <__exponent+0x1c>
 800b10a:	3130      	adds	r1, #48	@ 0x30
 800b10c:	1e94      	subs	r4, r2, #2
 800b10e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b112:	1c41      	adds	r1, r0, #1
 800b114:	4623      	mov	r3, r4
 800b116:	42ab      	cmp	r3, r5
 800b118:	d30a      	bcc.n	800b130 <__exponent+0x5e>
 800b11a:	f10d 0309 	add.w	r3, sp, #9
 800b11e:	1a9b      	subs	r3, r3, r2
 800b120:	42ac      	cmp	r4, r5
 800b122:	bf88      	it	hi
 800b124:	2300      	movhi	r3, #0
 800b126:	3302      	adds	r3, #2
 800b128:	4403      	add	r3, r0
 800b12a:	1a18      	subs	r0, r3, r0
 800b12c:	b003      	add	sp, #12
 800b12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b130:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b134:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b138:	e7ed      	b.n	800b116 <__exponent+0x44>
 800b13a:	2330      	movs	r3, #48	@ 0x30
 800b13c:	3130      	adds	r1, #48	@ 0x30
 800b13e:	7083      	strb	r3, [r0, #2]
 800b140:	70c1      	strb	r1, [r0, #3]
 800b142:	1d03      	adds	r3, r0, #4
 800b144:	e7f1      	b.n	800b12a <__exponent+0x58>
	...

0800b148 <_printf_float>:
 800b148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14c:	b08d      	sub	sp, #52	@ 0x34
 800b14e:	460c      	mov	r4, r1
 800b150:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b154:	4616      	mov	r6, r2
 800b156:	461f      	mov	r7, r3
 800b158:	4605      	mov	r5, r0
 800b15a:	f000 ff6f 	bl	800c03c <_localeconv_r>
 800b15e:	6803      	ldr	r3, [r0, #0]
 800b160:	9304      	str	r3, [sp, #16]
 800b162:	4618      	mov	r0, r3
 800b164:	f7f5 f8bc 	bl	80002e0 <strlen>
 800b168:	2300      	movs	r3, #0
 800b16a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b16c:	f8d8 3000 	ldr.w	r3, [r8]
 800b170:	9005      	str	r0, [sp, #20]
 800b172:	3307      	adds	r3, #7
 800b174:	f023 0307 	bic.w	r3, r3, #7
 800b178:	f103 0208 	add.w	r2, r3, #8
 800b17c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b180:	f8d4 b000 	ldr.w	fp, [r4]
 800b184:	f8c8 2000 	str.w	r2, [r8]
 800b188:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b18c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b190:	9307      	str	r3, [sp, #28]
 800b192:	f8cd 8018 	str.w	r8, [sp, #24]
 800b196:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b19a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b19e:	4b9c      	ldr	r3, [pc, #624]	@ (800b410 <_printf_float+0x2c8>)
 800b1a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b1a4:	f7f5 fcfa 	bl	8000b9c <__aeabi_dcmpun>
 800b1a8:	bb70      	cbnz	r0, 800b208 <_printf_float+0xc0>
 800b1aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1ae:	4b98      	ldr	r3, [pc, #608]	@ (800b410 <_printf_float+0x2c8>)
 800b1b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b1b4:	f7f5 fcd4 	bl	8000b60 <__aeabi_dcmple>
 800b1b8:	bb30      	cbnz	r0, 800b208 <_printf_float+0xc0>
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	2300      	movs	r3, #0
 800b1be:	4640      	mov	r0, r8
 800b1c0:	4649      	mov	r1, r9
 800b1c2:	f7f5 fcc3 	bl	8000b4c <__aeabi_dcmplt>
 800b1c6:	b110      	cbz	r0, 800b1ce <_printf_float+0x86>
 800b1c8:	232d      	movs	r3, #45	@ 0x2d
 800b1ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1ce:	4a91      	ldr	r2, [pc, #580]	@ (800b414 <_printf_float+0x2cc>)
 800b1d0:	4b91      	ldr	r3, [pc, #580]	@ (800b418 <_printf_float+0x2d0>)
 800b1d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b1d6:	bf94      	ite	ls
 800b1d8:	4690      	movls	r8, r2
 800b1da:	4698      	movhi	r8, r3
 800b1dc:	2303      	movs	r3, #3
 800b1de:	6123      	str	r3, [r4, #16]
 800b1e0:	f02b 0304 	bic.w	r3, fp, #4
 800b1e4:	6023      	str	r3, [r4, #0]
 800b1e6:	f04f 0900 	mov.w	r9, #0
 800b1ea:	9700      	str	r7, [sp, #0]
 800b1ec:	4633      	mov	r3, r6
 800b1ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b1f0:	4621      	mov	r1, r4
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	f000 f9d2 	bl	800b59c <_printf_common>
 800b1f8:	3001      	adds	r0, #1
 800b1fa:	f040 808d 	bne.w	800b318 <_printf_float+0x1d0>
 800b1fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b202:	b00d      	add	sp, #52	@ 0x34
 800b204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b208:	4642      	mov	r2, r8
 800b20a:	464b      	mov	r3, r9
 800b20c:	4640      	mov	r0, r8
 800b20e:	4649      	mov	r1, r9
 800b210:	f7f5 fcc4 	bl	8000b9c <__aeabi_dcmpun>
 800b214:	b140      	cbz	r0, 800b228 <_printf_float+0xe0>
 800b216:	464b      	mov	r3, r9
 800b218:	2b00      	cmp	r3, #0
 800b21a:	bfbc      	itt	lt
 800b21c:	232d      	movlt	r3, #45	@ 0x2d
 800b21e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b222:	4a7e      	ldr	r2, [pc, #504]	@ (800b41c <_printf_float+0x2d4>)
 800b224:	4b7e      	ldr	r3, [pc, #504]	@ (800b420 <_printf_float+0x2d8>)
 800b226:	e7d4      	b.n	800b1d2 <_printf_float+0x8a>
 800b228:	6863      	ldr	r3, [r4, #4]
 800b22a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b22e:	9206      	str	r2, [sp, #24]
 800b230:	1c5a      	adds	r2, r3, #1
 800b232:	d13b      	bne.n	800b2ac <_printf_float+0x164>
 800b234:	2306      	movs	r3, #6
 800b236:	6063      	str	r3, [r4, #4]
 800b238:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b23c:	2300      	movs	r3, #0
 800b23e:	6022      	str	r2, [r4, #0]
 800b240:	9303      	str	r3, [sp, #12]
 800b242:	ab0a      	add	r3, sp, #40	@ 0x28
 800b244:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b248:	ab09      	add	r3, sp, #36	@ 0x24
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	6861      	ldr	r1, [r4, #4]
 800b24e:	ec49 8b10 	vmov	d0, r8, r9
 800b252:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b256:	4628      	mov	r0, r5
 800b258:	f7ff fed6 	bl	800b008 <__cvt>
 800b25c:	9b06      	ldr	r3, [sp, #24]
 800b25e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b260:	2b47      	cmp	r3, #71	@ 0x47
 800b262:	4680      	mov	r8, r0
 800b264:	d129      	bne.n	800b2ba <_printf_float+0x172>
 800b266:	1cc8      	adds	r0, r1, #3
 800b268:	db02      	blt.n	800b270 <_printf_float+0x128>
 800b26a:	6863      	ldr	r3, [r4, #4]
 800b26c:	4299      	cmp	r1, r3
 800b26e:	dd41      	ble.n	800b2f4 <_printf_float+0x1ac>
 800b270:	f1aa 0a02 	sub.w	sl, sl, #2
 800b274:	fa5f fa8a 	uxtb.w	sl, sl
 800b278:	3901      	subs	r1, #1
 800b27a:	4652      	mov	r2, sl
 800b27c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b280:	9109      	str	r1, [sp, #36]	@ 0x24
 800b282:	f7ff ff26 	bl	800b0d2 <__exponent>
 800b286:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b288:	1813      	adds	r3, r2, r0
 800b28a:	2a01      	cmp	r2, #1
 800b28c:	4681      	mov	r9, r0
 800b28e:	6123      	str	r3, [r4, #16]
 800b290:	dc02      	bgt.n	800b298 <_printf_float+0x150>
 800b292:	6822      	ldr	r2, [r4, #0]
 800b294:	07d2      	lsls	r2, r2, #31
 800b296:	d501      	bpl.n	800b29c <_printf_float+0x154>
 800b298:	3301      	adds	r3, #1
 800b29a:	6123      	str	r3, [r4, #16]
 800b29c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d0a2      	beq.n	800b1ea <_printf_float+0xa2>
 800b2a4:	232d      	movs	r3, #45	@ 0x2d
 800b2a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2aa:	e79e      	b.n	800b1ea <_printf_float+0xa2>
 800b2ac:	9a06      	ldr	r2, [sp, #24]
 800b2ae:	2a47      	cmp	r2, #71	@ 0x47
 800b2b0:	d1c2      	bne.n	800b238 <_printf_float+0xf0>
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1c0      	bne.n	800b238 <_printf_float+0xf0>
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	e7bd      	b.n	800b236 <_printf_float+0xee>
 800b2ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b2be:	d9db      	bls.n	800b278 <_printf_float+0x130>
 800b2c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b2c4:	d118      	bne.n	800b2f8 <_printf_float+0x1b0>
 800b2c6:	2900      	cmp	r1, #0
 800b2c8:	6863      	ldr	r3, [r4, #4]
 800b2ca:	dd0b      	ble.n	800b2e4 <_printf_float+0x19c>
 800b2cc:	6121      	str	r1, [r4, #16]
 800b2ce:	b913      	cbnz	r3, 800b2d6 <_printf_float+0x18e>
 800b2d0:	6822      	ldr	r2, [r4, #0]
 800b2d2:	07d0      	lsls	r0, r2, #31
 800b2d4:	d502      	bpl.n	800b2dc <_printf_float+0x194>
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	440b      	add	r3, r1
 800b2da:	6123      	str	r3, [r4, #16]
 800b2dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b2de:	f04f 0900 	mov.w	r9, #0
 800b2e2:	e7db      	b.n	800b29c <_printf_float+0x154>
 800b2e4:	b913      	cbnz	r3, 800b2ec <_printf_float+0x1a4>
 800b2e6:	6822      	ldr	r2, [r4, #0]
 800b2e8:	07d2      	lsls	r2, r2, #31
 800b2ea:	d501      	bpl.n	800b2f0 <_printf_float+0x1a8>
 800b2ec:	3302      	adds	r3, #2
 800b2ee:	e7f4      	b.n	800b2da <_printf_float+0x192>
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	e7f2      	b.n	800b2da <_printf_float+0x192>
 800b2f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b2f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2fa:	4299      	cmp	r1, r3
 800b2fc:	db05      	blt.n	800b30a <_printf_float+0x1c2>
 800b2fe:	6823      	ldr	r3, [r4, #0]
 800b300:	6121      	str	r1, [r4, #16]
 800b302:	07d8      	lsls	r0, r3, #31
 800b304:	d5ea      	bpl.n	800b2dc <_printf_float+0x194>
 800b306:	1c4b      	adds	r3, r1, #1
 800b308:	e7e7      	b.n	800b2da <_printf_float+0x192>
 800b30a:	2900      	cmp	r1, #0
 800b30c:	bfd4      	ite	le
 800b30e:	f1c1 0202 	rsble	r2, r1, #2
 800b312:	2201      	movgt	r2, #1
 800b314:	4413      	add	r3, r2
 800b316:	e7e0      	b.n	800b2da <_printf_float+0x192>
 800b318:	6823      	ldr	r3, [r4, #0]
 800b31a:	055a      	lsls	r2, r3, #21
 800b31c:	d407      	bmi.n	800b32e <_printf_float+0x1e6>
 800b31e:	6923      	ldr	r3, [r4, #16]
 800b320:	4642      	mov	r2, r8
 800b322:	4631      	mov	r1, r6
 800b324:	4628      	mov	r0, r5
 800b326:	47b8      	blx	r7
 800b328:	3001      	adds	r0, #1
 800b32a:	d12b      	bne.n	800b384 <_printf_float+0x23c>
 800b32c:	e767      	b.n	800b1fe <_printf_float+0xb6>
 800b32e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b332:	f240 80dd 	bls.w	800b4f0 <_printf_float+0x3a8>
 800b336:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b33a:	2200      	movs	r2, #0
 800b33c:	2300      	movs	r3, #0
 800b33e:	f7f5 fbfb 	bl	8000b38 <__aeabi_dcmpeq>
 800b342:	2800      	cmp	r0, #0
 800b344:	d033      	beq.n	800b3ae <_printf_float+0x266>
 800b346:	4a37      	ldr	r2, [pc, #220]	@ (800b424 <_printf_float+0x2dc>)
 800b348:	2301      	movs	r3, #1
 800b34a:	4631      	mov	r1, r6
 800b34c:	4628      	mov	r0, r5
 800b34e:	47b8      	blx	r7
 800b350:	3001      	adds	r0, #1
 800b352:	f43f af54 	beq.w	800b1fe <_printf_float+0xb6>
 800b356:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b35a:	4543      	cmp	r3, r8
 800b35c:	db02      	blt.n	800b364 <_printf_float+0x21c>
 800b35e:	6823      	ldr	r3, [r4, #0]
 800b360:	07d8      	lsls	r0, r3, #31
 800b362:	d50f      	bpl.n	800b384 <_printf_float+0x23c>
 800b364:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b368:	4631      	mov	r1, r6
 800b36a:	4628      	mov	r0, r5
 800b36c:	47b8      	blx	r7
 800b36e:	3001      	adds	r0, #1
 800b370:	f43f af45 	beq.w	800b1fe <_printf_float+0xb6>
 800b374:	f04f 0900 	mov.w	r9, #0
 800b378:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b37c:	f104 0a1a 	add.w	sl, r4, #26
 800b380:	45c8      	cmp	r8, r9
 800b382:	dc09      	bgt.n	800b398 <_printf_float+0x250>
 800b384:	6823      	ldr	r3, [r4, #0]
 800b386:	079b      	lsls	r3, r3, #30
 800b388:	f100 8103 	bmi.w	800b592 <_printf_float+0x44a>
 800b38c:	68e0      	ldr	r0, [r4, #12]
 800b38e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b390:	4298      	cmp	r0, r3
 800b392:	bfb8      	it	lt
 800b394:	4618      	movlt	r0, r3
 800b396:	e734      	b.n	800b202 <_printf_float+0xba>
 800b398:	2301      	movs	r3, #1
 800b39a:	4652      	mov	r2, sl
 800b39c:	4631      	mov	r1, r6
 800b39e:	4628      	mov	r0, r5
 800b3a0:	47b8      	blx	r7
 800b3a2:	3001      	adds	r0, #1
 800b3a4:	f43f af2b 	beq.w	800b1fe <_printf_float+0xb6>
 800b3a8:	f109 0901 	add.w	r9, r9, #1
 800b3ac:	e7e8      	b.n	800b380 <_printf_float+0x238>
 800b3ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	dc39      	bgt.n	800b428 <_printf_float+0x2e0>
 800b3b4:	4a1b      	ldr	r2, [pc, #108]	@ (800b424 <_printf_float+0x2dc>)
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	4631      	mov	r1, r6
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	47b8      	blx	r7
 800b3be:	3001      	adds	r0, #1
 800b3c0:	f43f af1d 	beq.w	800b1fe <_printf_float+0xb6>
 800b3c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b3c8:	ea59 0303 	orrs.w	r3, r9, r3
 800b3cc:	d102      	bne.n	800b3d4 <_printf_float+0x28c>
 800b3ce:	6823      	ldr	r3, [r4, #0]
 800b3d0:	07d9      	lsls	r1, r3, #31
 800b3d2:	d5d7      	bpl.n	800b384 <_printf_float+0x23c>
 800b3d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3d8:	4631      	mov	r1, r6
 800b3da:	4628      	mov	r0, r5
 800b3dc:	47b8      	blx	r7
 800b3de:	3001      	adds	r0, #1
 800b3e0:	f43f af0d 	beq.w	800b1fe <_printf_float+0xb6>
 800b3e4:	f04f 0a00 	mov.w	sl, #0
 800b3e8:	f104 0b1a 	add.w	fp, r4, #26
 800b3ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3ee:	425b      	negs	r3, r3
 800b3f0:	4553      	cmp	r3, sl
 800b3f2:	dc01      	bgt.n	800b3f8 <_printf_float+0x2b0>
 800b3f4:	464b      	mov	r3, r9
 800b3f6:	e793      	b.n	800b320 <_printf_float+0x1d8>
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	465a      	mov	r2, fp
 800b3fc:	4631      	mov	r1, r6
 800b3fe:	4628      	mov	r0, r5
 800b400:	47b8      	blx	r7
 800b402:	3001      	adds	r0, #1
 800b404:	f43f aefb 	beq.w	800b1fe <_printf_float+0xb6>
 800b408:	f10a 0a01 	add.w	sl, sl, #1
 800b40c:	e7ee      	b.n	800b3ec <_printf_float+0x2a4>
 800b40e:	bf00      	nop
 800b410:	7fefffff 	.word	0x7fefffff
 800b414:	0800ecf9 	.word	0x0800ecf9
 800b418:	0800ecfd 	.word	0x0800ecfd
 800b41c:	0800ed01 	.word	0x0800ed01
 800b420:	0800ed05 	.word	0x0800ed05
 800b424:	0800ed09 	.word	0x0800ed09
 800b428:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b42a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b42e:	4553      	cmp	r3, sl
 800b430:	bfa8      	it	ge
 800b432:	4653      	movge	r3, sl
 800b434:	2b00      	cmp	r3, #0
 800b436:	4699      	mov	r9, r3
 800b438:	dc36      	bgt.n	800b4a8 <_printf_float+0x360>
 800b43a:	f04f 0b00 	mov.w	fp, #0
 800b43e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b442:	f104 021a 	add.w	r2, r4, #26
 800b446:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b448:	9306      	str	r3, [sp, #24]
 800b44a:	eba3 0309 	sub.w	r3, r3, r9
 800b44e:	455b      	cmp	r3, fp
 800b450:	dc31      	bgt.n	800b4b6 <_printf_float+0x36e>
 800b452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b454:	459a      	cmp	sl, r3
 800b456:	dc3a      	bgt.n	800b4ce <_printf_float+0x386>
 800b458:	6823      	ldr	r3, [r4, #0]
 800b45a:	07da      	lsls	r2, r3, #31
 800b45c:	d437      	bmi.n	800b4ce <_printf_float+0x386>
 800b45e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b460:	ebaa 0903 	sub.w	r9, sl, r3
 800b464:	9b06      	ldr	r3, [sp, #24]
 800b466:	ebaa 0303 	sub.w	r3, sl, r3
 800b46a:	4599      	cmp	r9, r3
 800b46c:	bfa8      	it	ge
 800b46e:	4699      	movge	r9, r3
 800b470:	f1b9 0f00 	cmp.w	r9, #0
 800b474:	dc33      	bgt.n	800b4de <_printf_float+0x396>
 800b476:	f04f 0800 	mov.w	r8, #0
 800b47a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b47e:	f104 0b1a 	add.w	fp, r4, #26
 800b482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b484:	ebaa 0303 	sub.w	r3, sl, r3
 800b488:	eba3 0309 	sub.w	r3, r3, r9
 800b48c:	4543      	cmp	r3, r8
 800b48e:	f77f af79 	ble.w	800b384 <_printf_float+0x23c>
 800b492:	2301      	movs	r3, #1
 800b494:	465a      	mov	r2, fp
 800b496:	4631      	mov	r1, r6
 800b498:	4628      	mov	r0, r5
 800b49a:	47b8      	blx	r7
 800b49c:	3001      	adds	r0, #1
 800b49e:	f43f aeae 	beq.w	800b1fe <_printf_float+0xb6>
 800b4a2:	f108 0801 	add.w	r8, r8, #1
 800b4a6:	e7ec      	b.n	800b482 <_printf_float+0x33a>
 800b4a8:	4642      	mov	r2, r8
 800b4aa:	4631      	mov	r1, r6
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	47b8      	blx	r7
 800b4b0:	3001      	adds	r0, #1
 800b4b2:	d1c2      	bne.n	800b43a <_printf_float+0x2f2>
 800b4b4:	e6a3      	b.n	800b1fe <_printf_float+0xb6>
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	4631      	mov	r1, r6
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	9206      	str	r2, [sp, #24]
 800b4be:	47b8      	blx	r7
 800b4c0:	3001      	adds	r0, #1
 800b4c2:	f43f ae9c 	beq.w	800b1fe <_printf_float+0xb6>
 800b4c6:	9a06      	ldr	r2, [sp, #24]
 800b4c8:	f10b 0b01 	add.w	fp, fp, #1
 800b4cc:	e7bb      	b.n	800b446 <_printf_float+0x2fe>
 800b4ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4d2:	4631      	mov	r1, r6
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	47b8      	blx	r7
 800b4d8:	3001      	adds	r0, #1
 800b4da:	d1c0      	bne.n	800b45e <_printf_float+0x316>
 800b4dc:	e68f      	b.n	800b1fe <_printf_float+0xb6>
 800b4de:	9a06      	ldr	r2, [sp, #24]
 800b4e0:	464b      	mov	r3, r9
 800b4e2:	4442      	add	r2, r8
 800b4e4:	4631      	mov	r1, r6
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	47b8      	blx	r7
 800b4ea:	3001      	adds	r0, #1
 800b4ec:	d1c3      	bne.n	800b476 <_printf_float+0x32e>
 800b4ee:	e686      	b.n	800b1fe <_printf_float+0xb6>
 800b4f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b4f4:	f1ba 0f01 	cmp.w	sl, #1
 800b4f8:	dc01      	bgt.n	800b4fe <_printf_float+0x3b6>
 800b4fa:	07db      	lsls	r3, r3, #31
 800b4fc:	d536      	bpl.n	800b56c <_printf_float+0x424>
 800b4fe:	2301      	movs	r3, #1
 800b500:	4642      	mov	r2, r8
 800b502:	4631      	mov	r1, r6
 800b504:	4628      	mov	r0, r5
 800b506:	47b8      	blx	r7
 800b508:	3001      	adds	r0, #1
 800b50a:	f43f ae78 	beq.w	800b1fe <_printf_float+0xb6>
 800b50e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b512:	4631      	mov	r1, r6
 800b514:	4628      	mov	r0, r5
 800b516:	47b8      	blx	r7
 800b518:	3001      	adds	r0, #1
 800b51a:	f43f ae70 	beq.w	800b1fe <_printf_float+0xb6>
 800b51e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b522:	2200      	movs	r2, #0
 800b524:	2300      	movs	r3, #0
 800b526:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b52a:	f7f5 fb05 	bl	8000b38 <__aeabi_dcmpeq>
 800b52e:	b9c0      	cbnz	r0, 800b562 <_printf_float+0x41a>
 800b530:	4653      	mov	r3, sl
 800b532:	f108 0201 	add.w	r2, r8, #1
 800b536:	4631      	mov	r1, r6
 800b538:	4628      	mov	r0, r5
 800b53a:	47b8      	blx	r7
 800b53c:	3001      	adds	r0, #1
 800b53e:	d10c      	bne.n	800b55a <_printf_float+0x412>
 800b540:	e65d      	b.n	800b1fe <_printf_float+0xb6>
 800b542:	2301      	movs	r3, #1
 800b544:	465a      	mov	r2, fp
 800b546:	4631      	mov	r1, r6
 800b548:	4628      	mov	r0, r5
 800b54a:	47b8      	blx	r7
 800b54c:	3001      	adds	r0, #1
 800b54e:	f43f ae56 	beq.w	800b1fe <_printf_float+0xb6>
 800b552:	f108 0801 	add.w	r8, r8, #1
 800b556:	45d0      	cmp	r8, sl
 800b558:	dbf3      	blt.n	800b542 <_printf_float+0x3fa>
 800b55a:	464b      	mov	r3, r9
 800b55c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b560:	e6df      	b.n	800b322 <_printf_float+0x1da>
 800b562:	f04f 0800 	mov.w	r8, #0
 800b566:	f104 0b1a 	add.w	fp, r4, #26
 800b56a:	e7f4      	b.n	800b556 <_printf_float+0x40e>
 800b56c:	2301      	movs	r3, #1
 800b56e:	4642      	mov	r2, r8
 800b570:	e7e1      	b.n	800b536 <_printf_float+0x3ee>
 800b572:	2301      	movs	r3, #1
 800b574:	464a      	mov	r2, r9
 800b576:	4631      	mov	r1, r6
 800b578:	4628      	mov	r0, r5
 800b57a:	47b8      	blx	r7
 800b57c:	3001      	adds	r0, #1
 800b57e:	f43f ae3e 	beq.w	800b1fe <_printf_float+0xb6>
 800b582:	f108 0801 	add.w	r8, r8, #1
 800b586:	68e3      	ldr	r3, [r4, #12]
 800b588:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b58a:	1a5b      	subs	r3, r3, r1
 800b58c:	4543      	cmp	r3, r8
 800b58e:	dcf0      	bgt.n	800b572 <_printf_float+0x42a>
 800b590:	e6fc      	b.n	800b38c <_printf_float+0x244>
 800b592:	f04f 0800 	mov.w	r8, #0
 800b596:	f104 0919 	add.w	r9, r4, #25
 800b59a:	e7f4      	b.n	800b586 <_printf_float+0x43e>

0800b59c <_printf_common>:
 800b59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5a0:	4616      	mov	r6, r2
 800b5a2:	4698      	mov	r8, r3
 800b5a4:	688a      	ldr	r2, [r1, #8]
 800b5a6:	690b      	ldr	r3, [r1, #16]
 800b5a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	bfb8      	it	lt
 800b5b0:	4613      	movlt	r3, r2
 800b5b2:	6033      	str	r3, [r6, #0]
 800b5b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b5b8:	4607      	mov	r7, r0
 800b5ba:	460c      	mov	r4, r1
 800b5bc:	b10a      	cbz	r2, 800b5c2 <_printf_common+0x26>
 800b5be:	3301      	adds	r3, #1
 800b5c0:	6033      	str	r3, [r6, #0]
 800b5c2:	6823      	ldr	r3, [r4, #0]
 800b5c4:	0699      	lsls	r1, r3, #26
 800b5c6:	bf42      	ittt	mi
 800b5c8:	6833      	ldrmi	r3, [r6, #0]
 800b5ca:	3302      	addmi	r3, #2
 800b5cc:	6033      	strmi	r3, [r6, #0]
 800b5ce:	6825      	ldr	r5, [r4, #0]
 800b5d0:	f015 0506 	ands.w	r5, r5, #6
 800b5d4:	d106      	bne.n	800b5e4 <_printf_common+0x48>
 800b5d6:	f104 0a19 	add.w	sl, r4, #25
 800b5da:	68e3      	ldr	r3, [r4, #12]
 800b5dc:	6832      	ldr	r2, [r6, #0]
 800b5de:	1a9b      	subs	r3, r3, r2
 800b5e0:	42ab      	cmp	r3, r5
 800b5e2:	dc26      	bgt.n	800b632 <_printf_common+0x96>
 800b5e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b5e8:	6822      	ldr	r2, [r4, #0]
 800b5ea:	3b00      	subs	r3, #0
 800b5ec:	bf18      	it	ne
 800b5ee:	2301      	movne	r3, #1
 800b5f0:	0692      	lsls	r2, r2, #26
 800b5f2:	d42b      	bmi.n	800b64c <_printf_common+0xb0>
 800b5f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b5f8:	4641      	mov	r1, r8
 800b5fa:	4638      	mov	r0, r7
 800b5fc:	47c8      	blx	r9
 800b5fe:	3001      	adds	r0, #1
 800b600:	d01e      	beq.n	800b640 <_printf_common+0xa4>
 800b602:	6823      	ldr	r3, [r4, #0]
 800b604:	6922      	ldr	r2, [r4, #16]
 800b606:	f003 0306 	and.w	r3, r3, #6
 800b60a:	2b04      	cmp	r3, #4
 800b60c:	bf02      	ittt	eq
 800b60e:	68e5      	ldreq	r5, [r4, #12]
 800b610:	6833      	ldreq	r3, [r6, #0]
 800b612:	1aed      	subeq	r5, r5, r3
 800b614:	68a3      	ldr	r3, [r4, #8]
 800b616:	bf0c      	ite	eq
 800b618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b61c:	2500      	movne	r5, #0
 800b61e:	4293      	cmp	r3, r2
 800b620:	bfc4      	itt	gt
 800b622:	1a9b      	subgt	r3, r3, r2
 800b624:	18ed      	addgt	r5, r5, r3
 800b626:	2600      	movs	r6, #0
 800b628:	341a      	adds	r4, #26
 800b62a:	42b5      	cmp	r5, r6
 800b62c:	d11a      	bne.n	800b664 <_printf_common+0xc8>
 800b62e:	2000      	movs	r0, #0
 800b630:	e008      	b.n	800b644 <_printf_common+0xa8>
 800b632:	2301      	movs	r3, #1
 800b634:	4652      	mov	r2, sl
 800b636:	4641      	mov	r1, r8
 800b638:	4638      	mov	r0, r7
 800b63a:	47c8      	blx	r9
 800b63c:	3001      	adds	r0, #1
 800b63e:	d103      	bne.n	800b648 <_printf_common+0xac>
 800b640:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b648:	3501      	adds	r5, #1
 800b64a:	e7c6      	b.n	800b5da <_printf_common+0x3e>
 800b64c:	18e1      	adds	r1, r4, r3
 800b64e:	1c5a      	adds	r2, r3, #1
 800b650:	2030      	movs	r0, #48	@ 0x30
 800b652:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b656:	4422      	add	r2, r4
 800b658:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b65c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b660:	3302      	adds	r3, #2
 800b662:	e7c7      	b.n	800b5f4 <_printf_common+0x58>
 800b664:	2301      	movs	r3, #1
 800b666:	4622      	mov	r2, r4
 800b668:	4641      	mov	r1, r8
 800b66a:	4638      	mov	r0, r7
 800b66c:	47c8      	blx	r9
 800b66e:	3001      	adds	r0, #1
 800b670:	d0e6      	beq.n	800b640 <_printf_common+0xa4>
 800b672:	3601      	adds	r6, #1
 800b674:	e7d9      	b.n	800b62a <_printf_common+0x8e>
	...

0800b678 <_printf_i>:
 800b678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b67c:	7e0f      	ldrb	r7, [r1, #24]
 800b67e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b680:	2f78      	cmp	r7, #120	@ 0x78
 800b682:	4691      	mov	r9, r2
 800b684:	4680      	mov	r8, r0
 800b686:	460c      	mov	r4, r1
 800b688:	469a      	mov	sl, r3
 800b68a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b68e:	d807      	bhi.n	800b6a0 <_printf_i+0x28>
 800b690:	2f62      	cmp	r7, #98	@ 0x62
 800b692:	d80a      	bhi.n	800b6aa <_printf_i+0x32>
 800b694:	2f00      	cmp	r7, #0
 800b696:	f000 80d2 	beq.w	800b83e <_printf_i+0x1c6>
 800b69a:	2f58      	cmp	r7, #88	@ 0x58
 800b69c:	f000 80b9 	beq.w	800b812 <_printf_i+0x19a>
 800b6a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b6a8:	e03a      	b.n	800b720 <_printf_i+0xa8>
 800b6aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b6ae:	2b15      	cmp	r3, #21
 800b6b0:	d8f6      	bhi.n	800b6a0 <_printf_i+0x28>
 800b6b2:	a101      	add	r1, pc, #4	@ (adr r1, 800b6b8 <_printf_i+0x40>)
 800b6b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6b8:	0800b711 	.word	0x0800b711
 800b6bc:	0800b725 	.word	0x0800b725
 800b6c0:	0800b6a1 	.word	0x0800b6a1
 800b6c4:	0800b6a1 	.word	0x0800b6a1
 800b6c8:	0800b6a1 	.word	0x0800b6a1
 800b6cc:	0800b6a1 	.word	0x0800b6a1
 800b6d0:	0800b725 	.word	0x0800b725
 800b6d4:	0800b6a1 	.word	0x0800b6a1
 800b6d8:	0800b6a1 	.word	0x0800b6a1
 800b6dc:	0800b6a1 	.word	0x0800b6a1
 800b6e0:	0800b6a1 	.word	0x0800b6a1
 800b6e4:	0800b825 	.word	0x0800b825
 800b6e8:	0800b74f 	.word	0x0800b74f
 800b6ec:	0800b7df 	.word	0x0800b7df
 800b6f0:	0800b6a1 	.word	0x0800b6a1
 800b6f4:	0800b6a1 	.word	0x0800b6a1
 800b6f8:	0800b847 	.word	0x0800b847
 800b6fc:	0800b6a1 	.word	0x0800b6a1
 800b700:	0800b74f 	.word	0x0800b74f
 800b704:	0800b6a1 	.word	0x0800b6a1
 800b708:	0800b6a1 	.word	0x0800b6a1
 800b70c:	0800b7e7 	.word	0x0800b7e7
 800b710:	6833      	ldr	r3, [r6, #0]
 800b712:	1d1a      	adds	r2, r3, #4
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	6032      	str	r2, [r6, #0]
 800b718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b71c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b720:	2301      	movs	r3, #1
 800b722:	e09d      	b.n	800b860 <_printf_i+0x1e8>
 800b724:	6833      	ldr	r3, [r6, #0]
 800b726:	6820      	ldr	r0, [r4, #0]
 800b728:	1d19      	adds	r1, r3, #4
 800b72a:	6031      	str	r1, [r6, #0]
 800b72c:	0606      	lsls	r6, r0, #24
 800b72e:	d501      	bpl.n	800b734 <_printf_i+0xbc>
 800b730:	681d      	ldr	r5, [r3, #0]
 800b732:	e003      	b.n	800b73c <_printf_i+0xc4>
 800b734:	0645      	lsls	r5, r0, #25
 800b736:	d5fb      	bpl.n	800b730 <_printf_i+0xb8>
 800b738:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b73c:	2d00      	cmp	r5, #0
 800b73e:	da03      	bge.n	800b748 <_printf_i+0xd0>
 800b740:	232d      	movs	r3, #45	@ 0x2d
 800b742:	426d      	negs	r5, r5
 800b744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b748:	4859      	ldr	r0, [pc, #356]	@ (800b8b0 <_printf_i+0x238>)
 800b74a:	230a      	movs	r3, #10
 800b74c:	e011      	b.n	800b772 <_printf_i+0xfa>
 800b74e:	6821      	ldr	r1, [r4, #0]
 800b750:	6833      	ldr	r3, [r6, #0]
 800b752:	0608      	lsls	r0, r1, #24
 800b754:	f853 5b04 	ldr.w	r5, [r3], #4
 800b758:	d402      	bmi.n	800b760 <_printf_i+0xe8>
 800b75a:	0649      	lsls	r1, r1, #25
 800b75c:	bf48      	it	mi
 800b75e:	b2ad      	uxthmi	r5, r5
 800b760:	2f6f      	cmp	r7, #111	@ 0x6f
 800b762:	4853      	ldr	r0, [pc, #332]	@ (800b8b0 <_printf_i+0x238>)
 800b764:	6033      	str	r3, [r6, #0]
 800b766:	bf14      	ite	ne
 800b768:	230a      	movne	r3, #10
 800b76a:	2308      	moveq	r3, #8
 800b76c:	2100      	movs	r1, #0
 800b76e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b772:	6866      	ldr	r6, [r4, #4]
 800b774:	60a6      	str	r6, [r4, #8]
 800b776:	2e00      	cmp	r6, #0
 800b778:	bfa2      	ittt	ge
 800b77a:	6821      	ldrge	r1, [r4, #0]
 800b77c:	f021 0104 	bicge.w	r1, r1, #4
 800b780:	6021      	strge	r1, [r4, #0]
 800b782:	b90d      	cbnz	r5, 800b788 <_printf_i+0x110>
 800b784:	2e00      	cmp	r6, #0
 800b786:	d04b      	beq.n	800b820 <_printf_i+0x1a8>
 800b788:	4616      	mov	r6, r2
 800b78a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b78e:	fb03 5711 	mls	r7, r3, r1, r5
 800b792:	5dc7      	ldrb	r7, [r0, r7]
 800b794:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b798:	462f      	mov	r7, r5
 800b79a:	42bb      	cmp	r3, r7
 800b79c:	460d      	mov	r5, r1
 800b79e:	d9f4      	bls.n	800b78a <_printf_i+0x112>
 800b7a0:	2b08      	cmp	r3, #8
 800b7a2:	d10b      	bne.n	800b7bc <_printf_i+0x144>
 800b7a4:	6823      	ldr	r3, [r4, #0]
 800b7a6:	07df      	lsls	r7, r3, #31
 800b7a8:	d508      	bpl.n	800b7bc <_printf_i+0x144>
 800b7aa:	6923      	ldr	r3, [r4, #16]
 800b7ac:	6861      	ldr	r1, [r4, #4]
 800b7ae:	4299      	cmp	r1, r3
 800b7b0:	bfde      	ittt	le
 800b7b2:	2330      	movle	r3, #48	@ 0x30
 800b7b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b7b8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b7bc:	1b92      	subs	r2, r2, r6
 800b7be:	6122      	str	r2, [r4, #16]
 800b7c0:	f8cd a000 	str.w	sl, [sp]
 800b7c4:	464b      	mov	r3, r9
 800b7c6:	aa03      	add	r2, sp, #12
 800b7c8:	4621      	mov	r1, r4
 800b7ca:	4640      	mov	r0, r8
 800b7cc:	f7ff fee6 	bl	800b59c <_printf_common>
 800b7d0:	3001      	adds	r0, #1
 800b7d2:	d14a      	bne.n	800b86a <_printf_i+0x1f2>
 800b7d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7d8:	b004      	add	sp, #16
 800b7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7de:	6823      	ldr	r3, [r4, #0]
 800b7e0:	f043 0320 	orr.w	r3, r3, #32
 800b7e4:	6023      	str	r3, [r4, #0]
 800b7e6:	4833      	ldr	r0, [pc, #204]	@ (800b8b4 <_printf_i+0x23c>)
 800b7e8:	2778      	movs	r7, #120	@ 0x78
 800b7ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b7ee:	6823      	ldr	r3, [r4, #0]
 800b7f0:	6831      	ldr	r1, [r6, #0]
 800b7f2:	061f      	lsls	r7, r3, #24
 800b7f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b7f8:	d402      	bmi.n	800b800 <_printf_i+0x188>
 800b7fa:	065f      	lsls	r7, r3, #25
 800b7fc:	bf48      	it	mi
 800b7fe:	b2ad      	uxthmi	r5, r5
 800b800:	6031      	str	r1, [r6, #0]
 800b802:	07d9      	lsls	r1, r3, #31
 800b804:	bf44      	itt	mi
 800b806:	f043 0320 	orrmi.w	r3, r3, #32
 800b80a:	6023      	strmi	r3, [r4, #0]
 800b80c:	b11d      	cbz	r5, 800b816 <_printf_i+0x19e>
 800b80e:	2310      	movs	r3, #16
 800b810:	e7ac      	b.n	800b76c <_printf_i+0xf4>
 800b812:	4827      	ldr	r0, [pc, #156]	@ (800b8b0 <_printf_i+0x238>)
 800b814:	e7e9      	b.n	800b7ea <_printf_i+0x172>
 800b816:	6823      	ldr	r3, [r4, #0]
 800b818:	f023 0320 	bic.w	r3, r3, #32
 800b81c:	6023      	str	r3, [r4, #0]
 800b81e:	e7f6      	b.n	800b80e <_printf_i+0x196>
 800b820:	4616      	mov	r6, r2
 800b822:	e7bd      	b.n	800b7a0 <_printf_i+0x128>
 800b824:	6833      	ldr	r3, [r6, #0]
 800b826:	6825      	ldr	r5, [r4, #0]
 800b828:	6961      	ldr	r1, [r4, #20]
 800b82a:	1d18      	adds	r0, r3, #4
 800b82c:	6030      	str	r0, [r6, #0]
 800b82e:	062e      	lsls	r6, r5, #24
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	d501      	bpl.n	800b838 <_printf_i+0x1c0>
 800b834:	6019      	str	r1, [r3, #0]
 800b836:	e002      	b.n	800b83e <_printf_i+0x1c6>
 800b838:	0668      	lsls	r0, r5, #25
 800b83a:	d5fb      	bpl.n	800b834 <_printf_i+0x1bc>
 800b83c:	8019      	strh	r1, [r3, #0]
 800b83e:	2300      	movs	r3, #0
 800b840:	6123      	str	r3, [r4, #16]
 800b842:	4616      	mov	r6, r2
 800b844:	e7bc      	b.n	800b7c0 <_printf_i+0x148>
 800b846:	6833      	ldr	r3, [r6, #0]
 800b848:	1d1a      	adds	r2, r3, #4
 800b84a:	6032      	str	r2, [r6, #0]
 800b84c:	681e      	ldr	r6, [r3, #0]
 800b84e:	6862      	ldr	r2, [r4, #4]
 800b850:	2100      	movs	r1, #0
 800b852:	4630      	mov	r0, r6
 800b854:	f7f4 fcf4 	bl	8000240 <memchr>
 800b858:	b108      	cbz	r0, 800b85e <_printf_i+0x1e6>
 800b85a:	1b80      	subs	r0, r0, r6
 800b85c:	6060      	str	r0, [r4, #4]
 800b85e:	6863      	ldr	r3, [r4, #4]
 800b860:	6123      	str	r3, [r4, #16]
 800b862:	2300      	movs	r3, #0
 800b864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b868:	e7aa      	b.n	800b7c0 <_printf_i+0x148>
 800b86a:	6923      	ldr	r3, [r4, #16]
 800b86c:	4632      	mov	r2, r6
 800b86e:	4649      	mov	r1, r9
 800b870:	4640      	mov	r0, r8
 800b872:	47d0      	blx	sl
 800b874:	3001      	adds	r0, #1
 800b876:	d0ad      	beq.n	800b7d4 <_printf_i+0x15c>
 800b878:	6823      	ldr	r3, [r4, #0]
 800b87a:	079b      	lsls	r3, r3, #30
 800b87c:	d413      	bmi.n	800b8a6 <_printf_i+0x22e>
 800b87e:	68e0      	ldr	r0, [r4, #12]
 800b880:	9b03      	ldr	r3, [sp, #12]
 800b882:	4298      	cmp	r0, r3
 800b884:	bfb8      	it	lt
 800b886:	4618      	movlt	r0, r3
 800b888:	e7a6      	b.n	800b7d8 <_printf_i+0x160>
 800b88a:	2301      	movs	r3, #1
 800b88c:	4632      	mov	r2, r6
 800b88e:	4649      	mov	r1, r9
 800b890:	4640      	mov	r0, r8
 800b892:	47d0      	blx	sl
 800b894:	3001      	adds	r0, #1
 800b896:	d09d      	beq.n	800b7d4 <_printf_i+0x15c>
 800b898:	3501      	adds	r5, #1
 800b89a:	68e3      	ldr	r3, [r4, #12]
 800b89c:	9903      	ldr	r1, [sp, #12]
 800b89e:	1a5b      	subs	r3, r3, r1
 800b8a0:	42ab      	cmp	r3, r5
 800b8a2:	dcf2      	bgt.n	800b88a <_printf_i+0x212>
 800b8a4:	e7eb      	b.n	800b87e <_printf_i+0x206>
 800b8a6:	2500      	movs	r5, #0
 800b8a8:	f104 0619 	add.w	r6, r4, #25
 800b8ac:	e7f5      	b.n	800b89a <_printf_i+0x222>
 800b8ae:	bf00      	nop
 800b8b0:	0800ed0b 	.word	0x0800ed0b
 800b8b4:	0800ed1c 	.word	0x0800ed1c

0800b8b8 <_scanf_float>:
 800b8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8bc:	b087      	sub	sp, #28
 800b8be:	4617      	mov	r7, r2
 800b8c0:	9303      	str	r3, [sp, #12]
 800b8c2:	688b      	ldr	r3, [r1, #8]
 800b8c4:	1e5a      	subs	r2, r3, #1
 800b8c6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b8ca:	bf81      	itttt	hi
 800b8cc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b8d0:	eb03 0b05 	addhi.w	fp, r3, r5
 800b8d4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b8d8:	608b      	strhi	r3, [r1, #8]
 800b8da:	680b      	ldr	r3, [r1, #0]
 800b8dc:	460a      	mov	r2, r1
 800b8de:	f04f 0500 	mov.w	r5, #0
 800b8e2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b8e6:	f842 3b1c 	str.w	r3, [r2], #28
 800b8ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b8ee:	4680      	mov	r8, r0
 800b8f0:	460c      	mov	r4, r1
 800b8f2:	bf98      	it	ls
 800b8f4:	f04f 0b00 	movls.w	fp, #0
 800b8f8:	9201      	str	r2, [sp, #4]
 800b8fa:	4616      	mov	r6, r2
 800b8fc:	46aa      	mov	sl, r5
 800b8fe:	46a9      	mov	r9, r5
 800b900:	9502      	str	r5, [sp, #8]
 800b902:	68a2      	ldr	r2, [r4, #8]
 800b904:	b152      	cbz	r2, 800b91c <_scanf_float+0x64>
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	2b4e      	cmp	r3, #78	@ 0x4e
 800b90c:	d864      	bhi.n	800b9d8 <_scanf_float+0x120>
 800b90e:	2b40      	cmp	r3, #64	@ 0x40
 800b910:	d83c      	bhi.n	800b98c <_scanf_float+0xd4>
 800b912:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b916:	b2c8      	uxtb	r0, r1
 800b918:	280e      	cmp	r0, #14
 800b91a:	d93a      	bls.n	800b992 <_scanf_float+0xda>
 800b91c:	f1b9 0f00 	cmp.w	r9, #0
 800b920:	d003      	beq.n	800b92a <_scanf_float+0x72>
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b928:	6023      	str	r3, [r4, #0]
 800b92a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b92e:	f1ba 0f01 	cmp.w	sl, #1
 800b932:	f200 8117 	bhi.w	800bb64 <_scanf_float+0x2ac>
 800b936:	9b01      	ldr	r3, [sp, #4]
 800b938:	429e      	cmp	r6, r3
 800b93a:	f200 8108 	bhi.w	800bb4e <_scanf_float+0x296>
 800b93e:	2001      	movs	r0, #1
 800b940:	b007      	add	sp, #28
 800b942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b946:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b94a:	2a0d      	cmp	r2, #13
 800b94c:	d8e6      	bhi.n	800b91c <_scanf_float+0x64>
 800b94e:	a101      	add	r1, pc, #4	@ (adr r1, 800b954 <_scanf_float+0x9c>)
 800b950:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b954:	0800ba9b 	.word	0x0800ba9b
 800b958:	0800b91d 	.word	0x0800b91d
 800b95c:	0800b91d 	.word	0x0800b91d
 800b960:	0800b91d 	.word	0x0800b91d
 800b964:	0800bafb 	.word	0x0800bafb
 800b968:	0800bad3 	.word	0x0800bad3
 800b96c:	0800b91d 	.word	0x0800b91d
 800b970:	0800b91d 	.word	0x0800b91d
 800b974:	0800baa9 	.word	0x0800baa9
 800b978:	0800b91d 	.word	0x0800b91d
 800b97c:	0800b91d 	.word	0x0800b91d
 800b980:	0800b91d 	.word	0x0800b91d
 800b984:	0800b91d 	.word	0x0800b91d
 800b988:	0800ba61 	.word	0x0800ba61
 800b98c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b990:	e7db      	b.n	800b94a <_scanf_float+0x92>
 800b992:	290e      	cmp	r1, #14
 800b994:	d8c2      	bhi.n	800b91c <_scanf_float+0x64>
 800b996:	a001      	add	r0, pc, #4	@ (adr r0, 800b99c <_scanf_float+0xe4>)
 800b998:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b99c:	0800ba51 	.word	0x0800ba51
 800b9a0:	0800b91d 	.word	0x0800b91d
 800b9a4:	0800ba51 	.word	0x0800ba51
 800b9a8:	0800bae7 	.word	0x0800bae7
 800b9ac:	0800b91d 	.word	0x0800b91d
 800b9b0:	0800b9f9 	.word	0x0800b9f9
 800b9b4:	0800ba37 	.word	0x0800ba37
 800b9b8:	0800ba37 	.word	0x0800ba37
 800b9bc:	0800ba37 	.word	0x0800ba37
 800b9c0:	0800ba37 	.word	0x0800ba37
 800b9c4:	0800ba37 	.word	0x0800ba37
 800b9c8:	0800ba37 	.word	0x0800ba37
 800b9cc:	0800ba37 	.word	0x0800ba37
 800b9d0:	0800ba37 	.word	0x0800ba37
 800b9d4:	0800ba37 	.word	0x0800ba37
 800b9d8:	2b6e      	cmp	r3, #110	@ 0x6e
 800b9da:	d809      	bhi.n	800b9f0 <_scanf_float+0x138>
 800b9dc:	2b60      	cmp	r3, #96	@ 0x60
 800b9de:	d8b2      	bhi.n	800b946 <_scanf_float+0x8e>
 800b9e0:	2b54      	cmp	r3, #84	@ 0x54
 800b9e2:	d07b      	beq.n	800badc <_scanf_float+0x224>
 800b9e4:	2b59      	cmp	r3, #89	@ 0x59
 800b9e6:	d199      	bne.n	800b91c <_scanf_float+0x64>
 800b9e8:	2d07      	cmp	r5, #7
 800b9ea:	d197      	bne.n	800b91c <_scanf_float+0x64>
 800b9ec:	2508      	movs	r5, #8
 800b9ee:	e02c      	b.n	800ba4a <_scanf_float+0x192>
 800b9f0:	2b74      	cmp	r3, #116	@ 0x74
 800b9f2:	d073      	beq.n	800badc <_scanf_float+0x224>
 800b9f4:	2b79      	cmp	r3, #121	@ 0x79
 800b9f6:	e7f6      	b.n	800b9e6 <_scanf_float+0x12e>
 800b9f8:	6821      	ldr	r1, [r4, #0]
 800b9fa:	05c8      	lsls	r0, r1, #23
 800b9fc:	d51b      	bpl.n	800ba36 <_scanf_float+0x17e>
 800b9fe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800ba02:	6021      	str	r1, [r4, #0]
 800ba04:	f109 0901 	add.w	r9, r9, #1
 800ba08:	f1bb 0f00 	cmp.w	fp, #0
 800ba0c:	d003      	beq.n	800ba16 <_scanf_float+0x15e>
 800ba0e:	3201      	adds	r2, #1
 800ba10:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800ba14:	60a2      	str	r2, [r4, #8]
 800ba16:	68a3      	ldr	r3, [r4, #8]
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	60a3      	str	r3, [r4, #8]
 800ba1c:	6923      	ldr	r3, [r4, #16]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	6123      	str	r3, [r4, #16]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	3b01      	subs	r3, #1
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	607b      	str	r3, [r7, #4]
 800ba2a:	f340 8087 	ble.w	800bb3c <_scanf_float+0x284>
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	3301      	adds	r3, #1
 800ba32:	603b      	str	r3, [r7, #0]
 800ba34:	e765      	b.n	800b902 <_scanf_float+0x4a>
 800ba36:	eb1a 0105 	adds.w	r1, sl, r5
 800ba3a:	f47f af6f 	bne.w	800b91c <_scanf_float+0x64>
 800ba3e:	6822      	ldr	r2, [r4, #0]
 800ba40:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ba44:	6022      	str	r2, [r4, #0]
 800ba46:	460d      	mov	r5, r1
 800ba48:	468a      	mov	sl, r1
 800ba4a:	f806 3b01 	strb.w	r3, [r6], #1
 800ba4e:	e7e2      	b.n	800ba16 <_scanf_float+0x15e>
 800ba50:	6822      	ldr	r2, [r4, #0]
 800ba52:	0610      	lsls	r0, r2, #24
 800ba54:	f57f af62 	bpl.w	800b91c <_scanf_float+0x64>
 800ba58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ba5c:	6022      	str	r2, [r4, #0]
 800ba5e:	e7f4      	b.n	800ba4a <_scanf_float+0x192>
 800ba60:	f1ba 0f00 	cmp.w	sl, #0
 800ba64:	d10e      	bne.n	800ba84 <_scanf_float+0x1cc>
 800ba66:	f1b9 0f00 	cmp.w	r9, #0
 800ba6a:	d10e      	bne.n	800ba8a <_scanf_float+0x1d2>
 800ba6c:	6822      	ldr	r2, [r4, #0]
 800ba6e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ba72:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ba76:	d108      	bne.n	800ba8a <_scanf_float+0x1d2>
 800ba78:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ba7c:	6022      	str	r2, [r4, #0]
 800ba7e:	f04f 0a01 	mov.w	sl, #1
 800ba82:	e7e2      	b.n	800ba4a <_scanf_float+0x192>
 800ba84:	f1ba 0f02 	cmp.w	sl, #2
 800ba88:	d055      	beq.n	800bb36 <_scanf_float+0x27e>
 800ba8a:	2d01      	cmp	r5, #1
 800ba8c:	d002      	beq.n	800ba94 <_scanf_float+0x1dc>
 800ba8e:	2d04      	cmp	r5, #4
 800ba90:	f47f af44 	bne.w	800b91c <_scanf_float+0x64>
 800ba94:	3501      	adds	r5, #1
 800ba96:	b2ed      	uxtb	r5, r5
 800ba98:	e7d7      	b.n	800ba4a <_scanf_float+0x192>
 800ba9a:	f1ba 0f01 	cmp.w	sl, #1
 800ba9e:	f47f af3d 	bne.w	800b91c <_scanf_float+0x64>
 800baa2:	f04f 0a02 	mov.w	sl, #2
 800baa6:	e7d0      	b.n	800ba4a <_scanf_float+0x192>
 800baa8:	b97d      	cbnz	r5, 800baca <_scanf_float+0x212>
 800baaa:	f1b9 0f00 	cmp.w	r9, #0
 800baae:	f47f af38 	bne.w	800b922 <_scanf_float+0x6a>
 800bab2:	6822      	ldr	r2, [r4, #0]
 800bab4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bab8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800babc:	f040 8108 	bne.w	800bcd0 <_scanf_float+0x418>
 800bac0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bac4:	6022      	str	r2, [r4, #0]
 800bac6:	2501      	movs	r5, #1
 800bac8:	e7bf      	b.n	800ba4a <_scanf_float+0x192>
 800baca:	2d03      	cmp	r5, #3
 800bacc:	d0e2      	beq.n	800ba94 <_scanf_float+0x1dc>
 800bace:	2d05      	cmp	r5, #5
 800bad0:	e7de      	b.n	800ba90 <_scanf_float+0x1d8>
 800bad2:	2d02      	cmp	r5, #2
 800bad4:	f47f af22 	bne.w	800b91c <_scanf_float+0x64>
 800bad8:	2503      	movs	r5, #3
 800bada:	e7b6      	b.n	800ba4a <_scanf_float+0x192>
 800badc:	2d06      	cmp	r5, #6
 800bade:	f47f af1d 	bne.w	800b91c <_scanf_float+0x64>
 800bae2:	2507      	movs	r5, #7
 800bae4:	e7b1      	b.n	800ba4a <_scanf_float+0x192>
 800bae6:	6822      	ldr	r2, [r4, #0]
 800bae8:	0591      	lsls	r1, r2, #22
 800baea:	f57f af17 	bpl.w	800b91c <_scanf_float+0x64>
 800baee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800baf2:	6022      	str	r2, [r4, #0]
 800baf4:	f8cd 9008 	str.w	r9, [sp, #8]
 800baf8:	e7a7      	b.n	800ba4a <_scanf_float+0x192>
 800bafa:	6822      	ldr	r2, [r4, #0]
 800bafc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800bb00:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bb04:	d006      	beq.n	800bb14 <_scanf_float+0x25c>
 800bb06:	0550      	lsls	r0, r2, #21
 800bb08:	f57f af08 	bpl.w	800b91c <_scanf_float+0x64>
 800bb0c:	f1b9 0f00 	cmp.w	r9, #0
 800bb10:	f000 80de 	beq.w	800bcd0 <_scanf_float+0x418>
 800bb14:	0591      	lsls	r1, r2, #22
 800bb16:	bf58      	it	pl
 800bb18:	9902      	ldrpl	r1, [sp, #8]
 800bb1a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bb1e:	bf58      	it	pl
 800bb20:	eba9 0101 	subpl.w	r1, r9, r1
 800bb24:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bb28:	bf58      	it	pl
 800bb2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bb2e:	6022      	str	r2, [r4, #0]
 800bb30:	f04f 0900 	mov.w	r9, #0
 800bb34:	e789      	b.n	800ba4a <_scanf_float+0x192>
 800bb36:	f04f 0a03 	mov.w	sl, #3
 800bb3a:	e786      	b.n	800ba4a <_scanf_float+0x192>
 800bb3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bb40:	4639      	mov	r1, r7
 800bb42:	4640      	mov	r0, r8
 800bb44:	4798      	blx	r3
 800bb46:	2800      	cmp	r0, #0
 800bb48:	f43f aedb 	beq.w	800b902 <_scanf_float+0x4a>
 800bb4c:	e6e6      	b.n	800b91c <_scanf_float+0x64>
 800bb4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb56:	463a      	mov	r2, r7
 800bb58:	4640      	mov	r0, r8
 800bb5a:	4798      	blx	r3
 800bb5c:	6923      	ldr	r3, [r4, #16]
 800bb5e:	3b01      	subs	r3, #1
 800bb60:	6123      	str	r3, [r4, #16]
 800bb62:	e6e8      	b.n	800b936 <_scanf_float+0x7e>
 800bb64:	1e6b      	subs	r3, r5, #1
 800bb66:	2b06      	cmp	r3, #6
 800bb68:	d824      	bhi.n	800bbb4 <_scanf_float+0x2fc>
 800bb6a:	2d02      	cmp	r5, #2
 800bb6c:	d836      	bhi.n	800bbdc <_scanf_float+0x324>
 800bb6e:	9b01      	ldr	r3, [sp, #4]
 800bb70:	429e      	cmp	r6, r3
 800bb72:	f67f aee4 	bls.w	800b93e <_scanf_float+0x86>
 800bb76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb7e:	463a      	mov	r2, r7
 800bb80:	4640      	mov	r0, r8
 800bb82:	4798      	blx	r3
 800bb84:	6923      	ldr	r3, [r4, #16]
 800bb86:	3b01      	subs	r3, #1
 800bb88:	6123      	str	r3, [r4, #16]
 800bb8a:	e7f0      	b.n	800bb6e <_scanf_float+0x2b6>
 800bb8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb90:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bb94:	463a      	mov	r2, r7
 800bb96:	4640      	mov	r0, r8
 800bb98:	4798      	blx	r3
 800bb9a:	6923      	ldr	r3, [r4, #16]
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	6123      	str	r3, [r4, #16]
 800bba0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800bba4:	fa5f fa8a 	uxtb.w	sl, sl
 800bba8:	f1ba 0f02 	cmp.w	sl, #2
 800bbac:	d1ee      	bne.n	800bb8c <_scanf_float+0x2d4>
 800bbae:	3d03      	subs	r5, #3
 800bbb0:	b2ed      	uxtb	r5, r5
 800bbb2:	1b76      	subs	r6, r6, r5
 800bbb4:	6823      	ldr	r3, [r4, #0]
 800bbb6:	05da      	lsls	r2, r3, #23
 800bbb8:	d530      	bpl.n	800bc1c <_scanf_float+0x364>
 800bbba:	055b      	lsls	r3, r3, #21
 800bbbc:	d511      	bpl.n	800bbe2 <_scanf_float+0x32a>
 800bbbe:	9b01      	ldr	r3, [sp, #4]
 800bbc0:	429e      	cmp	r6, r3
 800bbc2:	f67f aebc 	bls.w	800b93e <_scanf_float+0x86>
 800bbc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bbca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bbce:	463a      	mov	r2, r7
 800bbd0:	4640      	mov	r0, r8
 800bbd2:	4798      	blx	r3
 800bbd4:	6923      	ldr	r3, [r4, #16]
 800bbd6:	3b01      	subs	r3, #1
 800bbd8:	6123      	str	r3, [r4, #16]
 800bbda:	e7f0      	b.n	800bbbe <_scanf_float+0x306>
 800bbdc:	46aa      	mov	sl, r5
 800bbde:	46b3      	mov	fp, r6
 800bbe0:	e7de      	b.n	800bba0 <_scanf_float+0x2e8>
 800bbe2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bbe6:	6923      	ldr	r3, [r4, #16]
 800bbe8:	2965      	cmp	r1, #101	@ 0x65
 800bbea:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800bbee:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800bbf2:	6123      	str	r3, [r4, #16]
 800bbf4:	d00c      	beq.n	800bc10 <_scanf_float+0x358>
 800bbf6:	2945      	cmp	r1, #69	@ 0x45
 800bbf8:	d00a      	beq.n	800bc10 <_scanf_float+0x358>
 800bbfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bbfe:	463a      	mov	r2, r7
 800bc00:	4640      	mov	r0, r8
 800bc02:	4798      	blx	r3
 800bc04:	6923      	ldr	r3, [r4, #16]
 800bc06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bc0a:	3b01      	subs	r3, #1
 800bc0c:	1eb5      	subs	r5, r6, #2
 800bc0e:	6123      	str	r3, [r4, #16]
 800bc10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc14:	463a      	mov	r2, r7
 800bc16:	4640      	mov	r0, r8
 800bc18:	4798      	blx	r3
 800bc1a:	462e      	mov	r6, r5
 800bc1c:	6822      	ldr	r2, [r4, #0]
 800bc1e:	f012 0210 	ands.w	r2, r2, #16
 800bc22:	d001      	beq.n	800bc28 <_scanf_float+0x370>
 800bc24:	2000      	movs	r0, #0
 800bc26:	e68b      	b.n	800b940 <_scanf_float+0x88>
 800bc28:	7032      	strb	r2, [r6, #0]
 800bc2a:	6823      	ldr	r3, [r4, #0]
 800bc2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bc30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc34:	d11c      	bne.n	800bc70 <_scanf_float+0x3b8>
 800bc36:	9b02      	ldr	r3, [sp, #8]
 800bc38:	454b      	cmp	r3, r9
 800bc3a:	eba3 0209 	sub.w	r2, r3, r9
 800bc3e:	d123      	bne.n	800bc88 <_scanf_float+0x3d0>
 800bc40:	9901      	ldr	r1, [sp, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	4640      	mov	r0, r8
 800bc46:	f7ff f947 	bl	800aed8 <_strtod_r>
 800bc4a:	9b03      	ldr	r3, [sp, #12]
 800bc4c:	6821      	ldr	r1, [r4, #0]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f011 0f02 	tst.w	r1, #2
 800bc54:	ec57 6b10 	vmov	r6, r7, d0
 800bc58:	f103 0204 	add.w	r2, r3, #4
 800bc5c:	d01f      	beq.n	800bc9e <_scanf_float+0x3e6>
 800bc5e:	9903      	ldr	r1, [sp, #12]
 800bc60:	600a      	str	r2, [r1, #0]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	e9c3 6700 	strd	r6, r7, [r3]
 800bc68:	68e3      	ldr	r3, [r4, #12]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	60e3      	str	r3, [r4, #12]
 800bc6e:	e7d9      	b.n	800bc24 <_scanf_float+0x36c>
 800bc70:	9b04      	ldr	r3, [sp, #16]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d0e4      	beq.n	800bc40 <_scanf_float+0x388>
 800bc76:	9905      	ldr	r1, [sp, #20]
 800bc78:	230a      	movs	r3, #10
 800bc7a:	3101      	adds	r1, #1
 800bc7c:	4640      	mov	r0, r8
 800bc7e:	f7ff f9b7 	bl	800aff0 <_strtol_r>
 800bc82:	9b04      	ldr	r3, [sp, #16]
 800bc84:	9e05      	ldr	r6, [sp, #20]
 800bc86:	1ac2      	subs	r2, r0, r3
 800bc88:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bc8c:	429e      	cmp	r6, r3
 800bc8e:	bf28      	it	cs
 800bc90:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bc94:	4910      	ldr	r1, [pc, #64]	@ (800bcd8 <_scanf_float+0x420>)
 800bc96:	4630      	mov	r0, r6
 800bc98:	f000 f8f6 	bl	800be88 <siprintf>
 800bc9c:	e7d0      	b.n	800bc40 <_scanf_float+0x388>
 800bc9e:	f011 0f04 	tst.w	r1, #4
 800bca2:	9903      	ldr	r1, [sp, #12]
 800bca4:	600a      	str	r2, [r1, #0]
 800bca6:	d1dc      	bne.n	800bc62 <_scanf_float+0x3aa>
 800bca8:	681d      	ldr	r5, [r3, #0]
 800bcaa:	4632      	mov	r2, r6
 800bcac:	463b      	mov	r3, r7
 800bcae:	4630      	mov	r0, r6
 800bcb0:	4639      	mov	r1, r7
 800bcb2:	f7f4 ff73 	bl	8000b9c <__aeabi_dcmpun>
 800bcb6:	b128      	cbz	r0, 800bcc4 <_scanf_float+0x40c>
 800bcb8:	4808      	ldr	r0, [pc, #32]	@ (800bcdc <_scanf_float+0x424>)
 800bcba:	f000 fa4d 	bl	800c158 <nanf>
 800bcbe:	ed85 0a00 	vstr	s0, [r5]
 800bcc2:	e7d1      	b.n	800bc68 <_scanf_float+0x3b0>
 800bcc4:	4630      	mov	r0, r6
 800bcc6:	4639      	mov	r1, r7
 800bcc8:	f7f4 ffc6 	bl	8000c58 <__aeabi_d2f>
 800bccc:	6028      	str	r0, [r5, #0]
 800bcce:	e7cb      	b.n	800bc68 <_scanf_float+0x3b0>
 800bcd0:	f04f 0900 	mov.w	r9, #0
 800bcd4:	e629      	b.n	800b92a <_scanf_float+0x72>
 800bcd6:	bf00      	nop
 800bcd8:	0800ed2d 	.word	0x0800ed2d
 800bcdc:	0800ede6 	.word	0x0800ede6

0800bce0 <std>:
 800bce0:	2300      	movs	r3, #0
 800bce2:	b510      	push	{r4, lr}
 800bce4:	4604      	mov	r4, r0
 800bce6:	e9c0 3300 	strd	r3, r3, [r0]
 800bcea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bcee:	6083      	str	r3, [r0, #8]
 800bcf0:	8181      	strh	r1, [r0, #12]
 800bcf2:	6643      	str	r3, [r0, #100]	@ 0x64
 800bcf4:	81c2      	strh	r2, [r0, #14]
 800bcf6:	6183      	str	r3, [r0, #24]
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	2208      	movs	r2, #8
 800bcfc:	305c      	adds	r0, #92	@ 0x5c
 800bcfe:	f000 f926 	bl	800bf4e <memset>
 800bd02:	4b0d      	ldr	r3, [pc, #52]	@ (800bd38 <std+0x58>)
 800bd04:	6263      	str	r3, [r4, #36]	@ 0x24
 800bd06:	4b0d      	ldr	r3, [pc, #52]	@ (800bd3c <std+0x5c>)
 800bd08:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bd0a:	4b0d      	ldr	r3, [pc, #52]	@ (800bd40 <std+0x60>)
 800bd0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bd0e:	4b0d      	ldr	r3, [pc, #52]	@ (800bd44 <std+0x64>)
 800bd10:	6323      	str	r3, [r4, #48]	@ 0x30
 800bd12:	4b0d      	ldr	r3, [pc, #52]	@ (800bd48 <std+0x68>)
 800bd14:	6224      	str	r4, [r4, #32]
 800bd16:	429c      	cmp	r4, r3
 800bd18:	d006      	beq.n	800bd28 <std+0x48>
 800bd1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bd1e:	4294      	cmp	r4, r2
 800bd20:	d002      	beq.n	800bd28 <std+0x48>
 800bd22:	33d0      	adds	r3, #208	@ 0xd0
 800bd24:	429c      	cmp	r4, r3
 800bd26:	d105      	bne.n	800bd34 <std+0x54>
 800bd28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd30:	f000 b9f8 	b.w	800c124 <__retarget_lock_init_recursive>
 800bd34:	bd10      	pop	{r4, pc}
 800bd36:	bf00      	nop
 800bd38:	0800bec9 	.word	0x0800bec9
 800bd3c:	0800beeb 	.word	0x0800beeb
 800bd40:	0800bf23 	.word	0x0800bf23
 800bd44:	0800bf47 	.word	0x0800bf47
 800bd48:	20000828 	.word	0x20000828

0800bd4c <stdio_exit_handler>:
 800bd4c:	4a02      	ldr	r2, [pc, #8]	@ (800bd58 <stdio_exit_handler+0xc>)
 800bd4e:	4903      	ldr	r1, [pc, #12]	@ (800bd5c <stdio_exit_handler+0x10>)
 800bd50:	4803      	ldr	r0, [pc, #12]	@ (800bd60 <stdio_exit_handler+0x14>)
 800bd52:	f000 b869 	b.w	800be28 <_fwalk_sglue>
 800bd56:	bf00      	nop
 800bd58:	200001e0 	.word	0x200001e0
 800bd5c:	0800e689 	.word	0x0800e689
 800bd60:	2000035c 	.word	0x2000035c

0800bd64 <cleanup_stdio>:
 800bd64:	6841      	ldr	r1, [r0, #4]
 800bd66:	4b0c      	ldr	r3, [pc, #48]	@ (800bd98 <cleanup_stdio+0x34>)
 800bd68:	4299      	cmp	r1, r3
 800bd6a:	b510      	push	{r4, lr}
 800bd6c:	4604      	mov	r4, r0
 800bd6e:	d001      	beq.n	800bd74 <cleanup_stdio+0x10>
 800bd70:	f002 fc8a 	bl	800e688 <_fflush_r>
 800bd74:	68a1      	ldr	r1, [r4, #8]
 800bd76:	4b09      	ldr	r3, [pc, #36]	@ (800bd9c <cleanup_stdio+0x38>)
 800bd78:	4299      	cmp	r1, r3
 800bd7a:	d002      	beq.n	800bd82 <cleanup_stdio+0x1e>
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f002 fc83 	bl	800e688 <_fflush_r>
 800bd82:	68e1      	ldr	r1, [r4, #12]
 800bd84:	4b06      	ldr	r3, [pc, #24]	@ (800bda0 <cleanup_stdio+0x3c>)
 800bd86:	4299      	cmp	r1, r3
 800bd88:	d004      	beq.n	800bd94 <cleanup_stdio+0x30>
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd90:	f002 bc7a 	b.w	800e688 <_fflush_r>
 800bd94:	bd10      	pop	{r4, pc}
 800bd96:	bf00      	nop
 800bd98:	20000828 	.word	0x20000828
 800bd9c:	20000890 	.word	0x20000890
 800bda0:	200008f8 	.word	0x200008f8

0800bda4 <global_stdio_init.part.0>:
 800bda4:	b510      	push	{r4, lr}
 800bda6:	4b0b      	ldr	r3, [pc, #44]	@ (800bdd4 <global_stdio_init.part.0+0x30>)
 800bda8:	4c0b      	ldr	r4, [pc, #44]	@ (800bdd8 <global_stdio_init.part.0+0x34>)
 800bdaa:	4a0c      	ldr	r2, [pc, #48]	@ (800bddc <global_stdio_init.part.0+0x38>)
 800bdac:	601a      	str	r2, [r3, #0]
 800bdae:	4620      	mov	r0, r4
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	2104      	movs	r1, #4
 800bdb4:	f7ff ff94 	bl	800bce0 <std>
 800bdb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	2109      	movs	r1, #9
 800bdc0:	f7ff ff8e 	bl	800bce0 <std>
 800bdc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bdc8:	2202      	movs	r2, #2
 800bdca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdce:	2112      	movs	r1, #18
 800bdd0:	f7ff bf86 	b.w	800bce0 <std>
 800bdd4:	20000960 	.word	0x20000960
 800bdd8:	20000828 	.word	0x20000828
 800bddc:	0800bd4d 	.word	0x0800bd4d

0800bde0 <__sfp_lock_acquire>:
 800bde0:	4801      	ldr	r0, [pc, #4]	@ (800bde8 <__sfp_lock_acquire+0x8>)
 800bde2:	f000 b9a0 	b.w	800c126 <__retarget_lock_acquire_recursive>
 800bde6:	bf00      	nop
 800bde8:	20000969 	.word	0x20000969

0800bdec <__sfp_lock_release>:
 800bdec:	4801      	ldr	r0, [pc, #4]	@ (800bdf4 <__sfp_lock_release+0x8>)
 800bdee:	f000 b99b 	b.w	800c128 <__retarget_lock_release_recursive>
 800bdf2:	bf00      	nop
 800bdf4:	20000969 	.word	0x20000969

0800bdf8 <__sinit>:
 800bdf8:	b510      	push	{r4, lr}
 800bdfa:	4604      	mov	r4, r0
 800bdfc:	f7ff fff0 	bl	800bde0 <__sfp_lock_acquire>
 800be00:	6a23      	ldr	r3, [r4, #32]
 800be02:	b11b      	cbz	r3, 800be0c <__sinit+0x14>
 800be04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be08:	f7ff bff0 	b.w	800bdec <__sfp_lock_release>
 800be0c:	4b04      	ldr	r3, [pc, #16]	@ (800be20 <__sinit+0x28>)
 800be0e:	6223      	str	r3, [r4, #32]
 800be10:	4b04      	ldr	r3, [pc, #16]	@ (800be24 <__sinit+0x2c>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d1f5      	bne.n	800be04 <__sinit+0xc>
 800be18:	f7ff ffc4 	bl	800bda4 <global_stdio_init.part.0>
 800be1c:	e7f2      	b.n	800be04 <__sinit+0xc>
 800be1e:	bf00      	nop
 800be20:	0800bd65 	.word	0x0800bd65
 800be24:	20000960 	.word	0x20000960

0800be28 <_fwalk_sglue>:
 800be28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be2c:	4607      	mov	r7, r0
 800be2e:	4688      	mov	r8, r1
 800be30:	4614      	mov	r4, r2
 800be32:	2600      	movs	r6, #0
 800be34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be38:	f1b9 0901 	subs.w	r9, r9, #1
 800be3c:	d505      	bpl.n	800be4a <_fwalk_sglue+0x22>
 800be3e:	6824      	ldr	r4, [r4, #0]
 800be40:	2c00      	cmp	r4, #0
 800be42:	d1f7      	bne.n	800be34 <_fwalk_sglue+0xc>
 800be44:	4630      	mov	r0, r6
 800be46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be4a:	89ab      	ldrh	r3, [r5, #12]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d907      	bls.n	800be60 <_fwalk_sglue+0x38>
 800be50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be54:	3301      	adds	r3, #1
 800be56:	d003      	beq.n	800be60 <_fwalk_sglue+0x38>
 800be58:	4629      	mov	r1, r5
 800be5a:	4638      	mov	r0, r7
 800be5c:	47c0      	blx	r8
 800be5e:	4306      	orrs	r6, r0
 800be60:	3568      	adds	r5, #104	@ 0x68
 800be62:	e7e9      	b.n	800be38 <_fwalk_sglue+0x10>

0800be64 <iprintf>:
 800be64:	b40f      	push	{r0, r1, r2, r3}
 800be66:	b507      	push	{r0, r1, r2, lr}
 800be68:	4906      	ldr	r1, [pc, #24]	@ (800be84 <iprintf+0x20>)
 800be6a:	ab04      	add	r3, sp, #16
 800be6c:	6808      	ldr	r0, [r1, #0]
 800be6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800be72:	6881      	ldr	r1, [r0, #8]
 800be74:	9301      	str	r3, [sp, #4]
 800be76:	f002 fa6b 	bl	800e350 <_vfiprintf_r>
 800be7a:	b003      	add	sp, #12
 800be7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800be80:	b004      	add	sp, #16
 800be82:	4770      	bx	lr
 800be84:	20000358 	.word	0x20000358

0800be88 <siprintf>:
 800be88:	b40e      	push	{r1, r2, r3}
 800be8a:	b500      	push	{lr}
 800be8c:	b09c      	sub	sp, #112	@ 0x70
 800be8e:	ab1d      	add	r3, sp, #116	@ 0x74
 800be90:	9002      	str	r0, [sp, #8]
 800be92:	9006      	str	r0, [sp, #24]
 800be94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800be98:	4809      	ldr	r0, [pc, #36]	@ (800bec0 <siprintf+0x38>)
 800be9a:	9107      	str	r1, [sp, #28]
 800be9c:	9104      	str	r1, [sp, #16]
 800be9e:	4909      	ldr	r1, [pc, #36]	@ (800bec4 <siprintf+0x3c>)
 800bea0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bea4:	9105      	str	r1, [sp, #20]
 800bea6:	6800      	ldr	r0, [r0, #0]
 800bea8:	9301      	str	r3, [sp, #4]
 800beaa:	a902      	add	r1, sp, #8
 800beac:	f002 f92a 	bl	800e104 <_svfiprintf_r>
 800beb0:	9b02      	ldr	r3, [sp, #8]
 800beb2:	2200      	movs	r2, #0
 800beb4:	701a      	strb	r2, [r3, #0]
 800beb6:	b01c      	add	sp, #112	@ 0x70
 800beb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bebc:	b003      	add	sp, #12
 800bebe:	4770      	bx	lr
 800bec0:	20000358 	.word	0x20000358
 800bec4:	ffff0208 	.word	0xffff0208

0800bec8 <__sread>:
 800bec8:	b510      	push	{r4, lr}
 800beca:	460c      	mov	r4, r1
 800becc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bed0:	f000 f8da 	bl	800c088 <_read_r>
 800bed4:	2800      	cmp	r0, #0
 800bed6:	bfab      	itete	ge
 800bed8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800beda:	89a3      	ldrhlt	r3, [r4, #12]
 800bedc:	181b      	addge	r3, r3, r0
 800bede:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bee2:	bfac      	ite	ge
 800bee4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bee6:	81a3      	strhlt	r3, [r4, #12]
 800bee8:	bd10      	pop	{r4, pc}

0800beea <__swrite>:
 800beea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beee:	461f      	mov	r7, r3
 800bef0:	898b      	ldrh	r3, [r1, #12]
 800bef2:	05db      	lsls	r3, r3, #23
 800bef4:	4605      	mov	r5, r0
 800bef6:	460c      	mov	r4, r1
 800bef8:	4616      	mov	r6, r2
 800befa:	d505      	bpl.n	800bf08 <__swrite+0x1e>
 800befc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf00:	2302      	movs	r3, #2
 800bf02:	2200      	movs	r2, #0
 800bf04:	f000 f8ae 	bl	800c064 <_lseek_r>
 800bf08:	89a3      	ldrh	r3, [r4, #12]
 800bf0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf12:	81a3      	strh	r3, [r4, #12]
 800bf14:	4632      	mov	r2, r6
 800bf16:	463b      	mov	r3, r7
 800bf18:	4628      	mov	r0, r5
 800bf1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf1e:	f000 b8c5 	b.w	800c0ac <_write_r>

0800bf22 <__sseek>:
 800bf22:	b510      	push	{r4, lr}
 800bf24:	460c      	mov	r4, r1
 800bf26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf2a:	f000 f89b 	bl	800c064 <_lseek_r>
 800bf2e:	1c43      	adds	r3, r0, #1
 800bf30:	89a3      	ldrh	r3, [r4, #12]
 800bf32:	bf15      	itete	ne
 800bf34:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bf36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bf3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bf3e:	81a3      	strheq	r3, [r4, #12]
 800bf40:	bf18      	it	ne
 800bf42:	81a3      	strhne	r3, [r4, #12]
 800bf44:	bd10      	pop	{r4, pc}

0800bf46 <__sclose>:
 800bf46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf4a:	f000 b87b 	b.w	800c044 <_close_r>

0800bf4e <memset>:
 800bf4e:	4402      	add	r2, r0
 800bf50:	4603      	mov	r3, r0
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d100      	bne.n	800bf58 <memset+0xa>
 800bf56:	4770      	bx	lr
 800bf58:	f803 1b01 	strb.w	r1, [r3], #1
 800bf5c:	e7f9      	b.n	800bf52 <memset+0x4>

0800bf5e <strncmp>:
 800bf5e:	b510      	push	{r4, lr}
 800bf60:	b16a      	cbz	r2, 800bf7e <strncmp+0x20>
 800bf62:	3901      	subs	r1, #1
 800bf64:	1884      	adds	r4, r0, r2
 800bf66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf6a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d103      	bne.n	800bf7a <strncmp+0x1c>
 800bf72:	42a0      	cmp	r0, r4
 800bf74:	d001      	beq.n	800bf7a <strncmp+0x1c>
 800bf76:	2a00      	cmp	r2, #0
 800bf78:	d1f5      	bne.n	800bf66 <strncmp+0x8>
 800bf7a:	1ad0      	subs	r0, r2, r3
 800bf7c:	bd10      	pop	{r4, pc}
 800bf7e:	4610      	mov	r0, r2
 800bf80:	e7fc      	b.n	800bf7c <strncmp+0x1e>
	...

0800bf84 <strtok>:
 800bf84:	4b16      	ldr	r3, [pc, #88]	@ (800bfe0 <strtok+0x5c>)
 800bf86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf8a:	681f      	ldr	r7, [r3, #0]
 800bf8c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800bf8e:	4605      	mov	r5, r0
 800bf90:	460e      	mov	r6, r1
 800bf92:	b9ec      	cbnz	r4, 800bfd0 <strtok+0x4c>
 800bf94:	2050      	movs	r0, #80	@ 0x50
 800bf96:	f001 fad3 	bl	800d540 <malloc>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	6478      	str	r0, [r7, #68]	@ 0x44
 800bf9e:	b920      	cbnz	r0, 800bfaa <strtok+0x26>
 800bfa0:	4b10      	ldr	r3, [pc, #64]	@ (800bfe4 <strtok+0x60>)
 800bfa2:	4811      	ldr	r0, [pc, #68]	@ (800bfe8 <strtok+0x64>)
 800bfa4:	215b      	movs	r1, #91	@ 0x5b
 800bfa6:	f000 f8dd 	bl	800c164 <__assert_func>
 800bfaa:	e9c0 4400 	strd	r4, r4, [r0]
 800bfae:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800bfb2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800bfb6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800bfba:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800bfbe:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800bfc2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800bfc6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800bfca:	6184      	str	r4, [r0, #24]
 800bfcc:	7704      	strb	r4, [r0, #28]
 800bfce:	6244      	str	r4, [r0, #36]	@ 0x24
 800bfd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bfd2:	4631      	mov	r1, r6
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfdc:	f000 b806 	b.w	800bfec <__strtok_r>
 800bfe0:	20000358 	.word	0x20000358
 800bfe4:	0800ed32 	.word	0x0800ed32
 800bfe8:	0800ed49 	.word	0x0800ed49

0800bfec <__strtok_r>:
 800bfec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfee:	4604      	mov	r4, r0
 800bff0:	b908      	cbnz	r0, 800bff6 <__strtok_r+0xa>
 800bff2:	6814      	ldr	r4, [r2, #0]
 800bff4:	b144      	cbz	r4, 800c008 <__strtok_r+0x1c>
 800bff6:	4620      	mov	r0, r4
 800bff8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800bffc:	460f      	mov	r7, r1
 800bffe:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c002:	b91e      	cbnz	r6, 800c00c <__strtok_r+0x20>
 800c004:	b965      	cbnz	r5, 800c020 <__strtok_r+0x34>
 800c006:	6015      	str	r5, [r2, #0]
 800c008:	2000      	movs	r0, #0
 800c00a:	e005      	b.n	800c018 <__strtok_r+0x2c>
 800c00c:	42b5      	cmp	r5, r6
 800c00e:	d1f6      	bne.n	800bffe <__strtok_r+0x12>
 800c010:	2b00      	cmp	r3, #0
 800c012:	d1f0      	bne.n	800bff6 <__strtok_r+0xa>
 800c014:	6014      	str	r4, [r2, #0]
 800c016:	7003      	strb	r3, [r0, #0]
 800c018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c01a:	461c      	mov	r4, r3
 800c01c:	e00c      	b.n	800c038 <__strtok_r+0x4c>
 800c01e:	b915      	cbnz	r5, 800c026 <__strtok_r+0x3a>
 800c020:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c024:	460e      	mov	r6, r1
 800c026:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c02a:	42ab      	cmp	r3, r5
 800c02c:	d1f7      	bne.n	800c01e <__strtok_r+0x32>
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d0f3      	beq.n	800c01a <__strtok_r+0x2e>
 800c032:	2300      	movs	r3, #0
 800c034:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c038:	6014      	str	r4, [r2, #0]
 800c03a:	e7ed      	b.n	800c018 <__strtok_r+0x2c>

0800c03c <_localeconv_r>:
 800c03c:	4800      	ldr	r0, [pc, #0]	@ (800c040 <_localeconv_r+0x4>)
 800c03e:	4770      	bx	lr
 800c040:	200002dc 	.word	0x200002dc

0800c044 <_close_r>:
 800c044:	b538      	push	{r3, r4, r5, lr}
 800c046:	4d06      	ldr	r5, [pc, #24]	@ (800c060 <_close_r+0x1c>)
 800c048:	2300      	movs	r3, #0
 800c04a:	4604      	mov	r4, r0
 800c04c:	4608      	mov	r0, r1
 800c04e:	602b      	str	r3, [r5, #0]
 800c050:	f7f5 fe50 	bl	8001cf4 <_close>
 800c054:	1c43      	adds	r3, r0, #1
 800c056:	d102      	bne.n	800c05e <_close_r+0x1a>
 800c058:	682b      	ldr	r3, [r5, #0]
 800c05a:	b103      	cbz	r3, 800c05e <_close_r+0x1a>
 800c05c:	6023      	str	r3, [r4, #0]
 800c05e:	bd38      	pop	{r3, r4, r5, pc}
 800c060:	20000964 	.word	0x20000964

0800c064 <_lseek_r>:
 800c064:	b538      	push	{r3, r4, r5, lr}
 800c066:	4d07      	ldr	r5, [pc, #28]	@ (800c084 <_lseek_r+0x20>)
 800c068:	4604      	mov	r4, r0
 800c06a:	4608      	mov	r0, r1
 800c06c:	4611      	mov	r1, r2
 800c06e:	2200      	movs	r2, #0
 800c070:	602a      	str	r2, [r5, #0]
 800c072:	461a      	mov	r2, r3
 800c074:	f7f5 fe65 	bl	8001d42 <_lseek>
 800c078:	1c43      	adds	r3, r0, #1
 800c07a:	d102      	bne.n	800c082 <_lseek_r+0x1e>
 800c07c:	682b      	ldr	r3, [r5, #0]
 800c07e:	b103      	cbz	r3, 800c082 <_lseek_r+0x1e>
 800c080:	6023      	str	r3, [r4, #0]
 800c082:	bd38      	pop	{r3, r4, r5, pc}
 800c084:	20000964 	.word	0x20000964

0800c088 <_read_r>:
 800c088:	b538      	push	{r3, r4, r5, lr}
 800c08a:	4d07      	ldr	r5, [pc, #28]	@ (800c0a8 <_read_r+0x20>)
 800c08c:	4604      	mov	r4, r0
 800c08e:	4608      	mov	r0, r1
 800c090:	4611      	mov	r1, r2
 800c092:	2200      	movs	r2, #0
 800c094:	602a      	str	r2, [r5, #0]
 800c096:	461a      	mov	r2, r3
 800c098:	f7f5 fdf3 	bl	8001c82 <_read>
 800c09c:	1c43      	adds	r3, r0, #1
 800c09e:	d102      	bne.n	800c0a6 <_read_r+0x1e>
 800c0a0:	682b      	ldr	r3, [r5, #0]
 800c0a2:	b103      	cbz	r3, 800c0a6 <_read_r+0x1e>
 800c0a4:	6023      	str	r3, [r4, #0]
 800c0a6:	bd38      	pop	{r3, r4, r5, pc}
 800c0a8:	20000964 	.word	0x20000964

0800c0ac <_write_r>:
 800c0ac:	b538      	push	{r3, r4, r5, lr}
 800c0ae:	4d07      	ldr	r5, [pc, #28]	@ (800c0cc <_write_r+0x20>)
 800c0b0:	4604      	mov	r4, r0
 800c0b2:	4608      	mov	r0, r1
 800c0b4:	4611      	mov	r1, r2
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	602a      	str	r2, [r5, #0]
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	f7f5 fdfe 	bl	8001cbc <_write>
 800c0c0:	1c43      	adds	r3, r0, #1
 800c0c2:	d102      	bne.n	800c0ca <_write_r+0x1e>
 800c0c4:	682b      	ldr	r3, [r5, #0]
 800c0c6:	b103      	cbz	r3, 800c0ca <_write_r+0x1e>
 800c0c8:	6023      	str	r3, [r4, #0]
 800c0ca:	bd38      	pop	{r3, r4, r5, pc}
 800c0cc:	20000964 	.word	0x20000964

0800c0d0 <__errno>:
 800c0d0:	4b01      	ldr	r3, [pc, #4]	@ (800c0d8 <__errno+0x8>)
 800c0d2:	6818      	ldr	r0, [r3, #0]
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	20000358 	.word	0x20000358

0800c0dc <__libc_init_array>:
 800c0dc:	b570      	push	{r4, r5, r6, lr}
 800c0de:	4d0d      	ldr	r5, [pc, #52]	@ (800c114 <__libc_init_array+0x38>)
 800c0e0:	4c0d      	ldr	r4, [pc, #52]	@ (800c118 <__libc_init_array+0x3c>)
 800c0e2:	1b64      	subs	r4, r4, r5
 800c0e4:	10a4      	asrs	r4, r4, #2
 800c0e6:	2600      	movs	r6, #0
 800c0e8:	42a6      	cmp	r6, r4
 800c0ea:	d109      	bne.n	800c100 <__libc_init_array+0x24>
 800c0ec:	4d0b      	ldr	r5, [pc, #44]	@ (800c11c <__libc_init_array+0x40>)
 800c0ee:	4c0c      	ldr	r4, [pc, #48]	@ (800c120 <__libc_init_array+0x44>)
 800c0f0:	f002 fcdc 	bl	800eaac <_init>
 800c0f4:	1b64      	subs	r4, r4, r5
 800c0f6:	10a4      	asrs	r4, r4, #2
 800c0f8:	2600      	movs	r6, #0
 800c0fa:	42a6      	cmp	r6, r4
 800c0fc:	d105      	bne.n	800c10a <__libc_init_array+0x2e>
 800c0fe:	bd70      	pop	{r4, r5, r6, pc}
 800c100:	f855 3b04 	ldr.w	r3, [r5], #4
 800c104:	4798      	blx	r3
 800c106:	3601      	adds	r6, #1
 800c108:	e7ee      	b.n	800c0e8 <__libc_init_array+0xc>
 800c10a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c10e:	4798      	blx	r3
 800c110:	3601      	adds	r6, #1
 800c112:	e7f2      	b.n	800c0fa <__libc_init_array+0x1e>
 800c114:	0800f034 	.word	0x0800f034
 800c118:	0800f034 	.word	0x0800f034
 800c11c:	0800f034 	.word	0x0800f034
 800c120:	0800f038 	.word	0x0800f038

0800c124 <__retarget_lock_init_recursive>:
 800c124:	4770      	bx	lr

0800c126 <__retarget_lock_acquire_recursive>:
 800c126:	4770      	bx	lr

0800c128 <__retarget_lock_release_recursive>:
 800c128:	4770      	bx	lr

0800c12a <memcpy>:
 800c12a:	440a      	add	r2, r1
 800c12c:	4291      	cmp	r1, r2
 800c12e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c132:	d100      	bne.n	800c136 <memcpy+0xc>
 800c134:	4770      	bx	lr
 800c136:	b510      	push	{r4, lr}
 800c138:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c13c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c140:	4291      	cmp	r1, r2
 800c142:	d1f9      	bne.n	800c138 <memcpy+0xe>
 800c144:	bd10      	pop	{r4, pc}
	...

0800c148 <nan>:
 800c148:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c150 <nan+0x8>
 800c14c:	4770      	bx	lr
 800c14e:	bf00      	nop
 800c150:	00000000 	.word	0x00000000
 800c154:	7ff80000 	.word	0x7ff80000

0800c158 <nanf>:
 800c158:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c160 <nanf+0x8>
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop
 800c160:	7fc00000 	.word	0x7fc00000

0800c164 <__assert_func>:
 800c164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c166:	4614      	mov	r4, r2
 800c168:	461a      	mov	r2, r3
 800c16a:	4b09      	ldr	r3, [pc, #36]	@ (800c190 <__assert_func+0x2c>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4605      	mov	r5, r0
 800c170:	68d8      	ldr	r0, [r3, #12]
 800c172:	b954      	cbnz	r4, 800c18a <__assert_func+0x26>
 800c174:	4b07      	ldr	r3, [pc, #28]	@ (800c194 <__assert_func+0x30>)
 800c176:	461c      	mov	r4, r3
 800c178:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c17c:	9100      	str	r1, [sp, #0]
 800c17e:	462b      	mov	r3, r5
 800c180:	4905      	ldr	r1, [pc, #20]	@ (800c198 <__assert_func+0x34>)
 800c182:	f002 faa9 	bl	800e6d8 <fiprintf>
 800c186:	f002 fb77 	bl	800e878 <abort>
 800c18a:	4b04      	ldr	r3, [pc, #16]	@ (800c19c <__assert_func+0x38>)
 800c18c:	e7f4      	b.n	800c178 <__assert_func+0x14>
 800c18e:	bf00      	nop
 800c190:	20000358 	.word	0x20000358
 800c194:	0800ede6 	.word	0x0800ede6
 800c198:	0800edb8 	.word	0x0800edb8
 800c19c:	0800edab 	.word	0x0800edab

0800c1a0 <quorem>:
 800c1a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a4:	6903      	ldr	r3, [r0, #16]
 800c1a6:	690c      	ldr	r4, [r1, #16]
 800c1a8:	42a3      	cmp	r3, r4
 800c1aa:	4607      	mov	r7, r0
 800c1ac:	db7e      	blt.n	800c2ac <quorem+0x10c>
 800c1ae:	3c01      	subs	r4, #1
 800c1b0:	f101 0814 	add.w	r8, r1, #20
 800c1b4:	00a3      	lsls	r3, r4, #2
 800c1b6:	f100 0514 	add.w	r5, r0, #20
 800c1ba:	9300      	str	r3, [sp, #0]
 800c1bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1c0:	9301      	str	r3, [sp, #4]
 800c1c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c1c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c1d2:	fbb2 f6f3 	udiv	r6, r2, r3
 800c1d6:	d32e      	bcc.n	800c236 <quorem+0x96>
 800c1d8:	f04f 0a00 	mov.w	sl, #0
 800c1dc:	46c4      	mov	ip, r8
 800c1de:	46ae      	mov	lr, r5
 800c1e0:	46d3      	mov	fp, sl
 800c1e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c1e6:	b298      	uxth	r0, r3
 800c1e8:	fb06 a000 	mla	r0, r6, r0, sl
 800c1ec:	0c02      	lsrs	r2, r0, #16
 800c1ee:	0c1b      	lsrs	r3, r3, #16
 800c1f0:	fb06 2303 	mla	r3, r6, r3, r2
 800c1f4:	f8de 2000 	ldr.w	r2, [lr]
 800c1f8:	b280      	uxth	r0, r0
 800c1fa:	b292      	uxth	r2, r2
 800c1fc:	1a12      	subs	r2, r2, r0
 800c1fe:	445a      	add	r2, fp
 800c200:	f8de 0000 	ldr.w	r0, [lr]
 800c204:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c208:	b29b      	uxth	r3, r3
 800c20a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c20e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c212:	b292      	uxth	r2, r2
 800c214:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c218:	45e1      	cmp	r9, ip
 800c21a:	f84e 2b04 	str.w	r2, [lr], #4
 800c21e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c222:	d2de      	bcs.n	800c1e2 <quorem+0x42>
 800c224:	9b00      	ldr	r3, [sp, #0]
 800c226:	58eb      	ldr	r3, [r5, r3]
 800c228:	b92b      	cbnz	r3, 800c236 <quorem+0x96>
 800c22a:	9b01      	ldr	r3, [sp, #4]
 800c22c:	3b04      	subs	r3, #4
 800c22e:	429d      	cmp	r5, r3
 800c230:	461a      	mov	r2, r3
 800c232:	d32f      	bcc.n	800c294 <quorem+0xf4>
 800c234:	613c      	str	r4, [r7, #16]
 800c236:	4638      	mov	r0, r7
 800c238:	f001 fd0e 	bl	800dc58 <__mcmp>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	db25      	blt.n	800c28c <quorem+0xec>
 800c240:	4629      	mov	r1, r5
 800c242:	2000      	movs	r0, #0
 800c244:	f858 2b04 	ldr.w	r2, [r8], #4
 800c248:	f8d1 c000 	ldr.w	ip, [r1]
 800c24c:	fa1f fe82 	uxth.w	lr, r2
 800c250:	fa1f f38c 	uxth.w	r3, ip
 800c254:	eba3 030e 	sub.w	r3, r3, lr
 800c258:	4403      	add	r3, r0
 800c25a:	0c12      	lsrs	r2, r2, #16
 800c25c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c260:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c264:	b29b      	uxth	r3, r3
 800c266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c26a:	45c1      	cmp	r9, r8
 800c26c:	f841 3b04 	str.w	r3, [r1], #4
 800c270:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c274:	d2e6      	bcs.n	800c244 <quorem+0xa4>
 800c276:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c27a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c27e:	b922      	cbnz	r2, 800c28a <quorem+0xea>
 800c280:	3b04      	subs	r3, #4
 800c282:	429d      	cmp	r5, r3
 800c284:	461a      	mov	r2, r3
 800c286:	d30b      	bcc.n	800c2a0 <quorem+0x100>
 800c288:	613c      	str	r4, [r7, #16]
 800c28a:	3601      	adds	r6, #1
 800c28c:	4630      	mov	r0, r6
 800c28e:	b003      	add	sp, #12
 800c290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c294:	6812      	ldr	r2, [r2, #0]
 800c296:	3b04      	subs	r3, #4
 800c298:	2a00      	cmp	r2, #0
 800c29a:	d1cb      	bne.n	800c234 <quorem+0x94>
 800c29c:	3c01      	subs	r4, #1
 800c29e:	e7c6      	b.n	800c22e <quorem+0x8e>
 800c2a0:	6812      	ldr	r2, [r2, #0]
 800c2a2:	3b04      	subs	r3, #4
 800c2a4:	2a00      	cmp	r2, #0
 800c2a6:	d1ef      	bne.n	800c288 <quorem+0xe8>
 800c2a8:	3c01      	subs	r4, #1
 800c2aa:	e7ea      	b.n	800c282 <quorem+0xe2>
 800c2ac:	2000      	movs	r0, #0
 800c2ae:	e7ee      	b.n	800c28e <quorem+0xee>

0800c2b0 <_dtoa_r>:
 800c2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b4:	69c7      	ldr	r7, [r0, #28]
 800c2b6:	b099      	sub	sp, #100	@ 0x64
 800c2b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c2bc:	ec55 4b10 	vmov	r4, r5, d0
 800c2c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c2c2:	9109      	str	r1, [sp, #36]	@ 0x24
 800c2c4:	4683      	mov	fp, r0
 800c2c6:	920e      	str	r2, [sp, #56]	@ 0x38
 800c2c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c2ca:	b97f      	cbnz	r7, 800c2ec <_dtoa_r+0x3c>
 800c2cc:	2010      	movs	r0, #16
 800c2ce:	f001 f937 	bl	800d540 <malloc>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	f8cb 001c 	str.w	r0, [fp, #28]
 800c2d8:	b920      	cbnz	r0, 800c2e4 <_dtoa_r+0x34>
 800c2da:	4ba7      	ldr	r3, [pc, #668]	@ (800c578 <_dtoa_r+0x2c8>)
 800c2dc:	21ef      	movs	r1, #239	@ 0xef
 800c2de:	48a7      	ldr	r0, [pc, #668]	@ (800c57c <_dtoa_r+0x2cc>)
 800c2e0:	f7ff ff40 	bl	800c164 <__assert_func>
 800c2e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c2e8:	6007      	str	r7, [r0, #0]
 800c2ea:	60c7      	str	r7, [r0, #12]
 800c2ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c2f0:	6819      	ldr	r1, [r3, #0]
 800c2f2:	b159      	cbz	r1, 800c30c <_dtoa_r+0x5c>
 800c2f4:	685a      	ldr	r2, [r3, #4]
 800c2f6:	604a      	str	r2, [r1, #4]
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	4093      	lsls	r3, r2
 800c2fc:	608b      	str	r3, [r1, #8]
 800c2fe:	4658      	mov	r0, fp
 800c300:	f001 fa26 	bl	800d750 <_Bfree>
 800c304:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c308:	2200      	movs	r2, #0
 800c30a:	601a      	str	r2, [r3, #0]
 800c30c:	1e2b      	subs	r3, r5, #0
 800c30e:	bfb9      	ittee	lt
 800c310:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c314:	9303      	strlt	r3, [sp, #12]
 800c316:	2300      	movge	r3, #0
 800c318:	6033      	strge	r3, [r6, #0]
 800c31a:	9f03      	ldr	r7, [sp, #12]
 800c31c:	4b98      	ldr	r3, [pc, #608]	@ (800c580 <_dtoa_r+0x2d0>)
 800c31e:	bfbc      	itt	lt
 800c320:	2201      	movlt	r2, #1
 800c322:	6032      	strlt	r2, [r6, #0]
 800c324:	43bb      	bics	r3, r7
 800c326:	d112      	bne.n	800c34e <_dtoa_r+0x9e>
 800c328:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c32a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c32e:	6013      	str	r3, [r2, #0]
 800c330:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c334:	4323      	orrs	r3, r4
 800c336:	f000 854d 	beq.w	800cdd4 <_dtoa_r+0xb24>
 800c33a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c33c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c594 <_dtoa_r+0x2e4>
 800c340:	2b00      	cmp	r3, #0
 800c342:	f000 854f 	beq.w	800cde4 <_dtoa_r+0xb34>
 800c346:	f10a 0303 	add.w	r3, sl, #3
 800c34a:	f000 bd49 	b.w	800cde0 <_dtoa_r+0xb30>
 800c34e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c352:	2200      	movs	r2, #0
 800c354:	ec51 0b17 	vmov	r0, r1, d7
 800c358:	2300      	movs	r3, #0
 800c35a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c35e:	f7f4 fbeb 	bl	8000b38 <__aeabi_dcmpeq>
 800c362:	4680      	mov	r8, r0
 800c364:	b158      	cbz	r0, 800c37e <_dtoa_r+0xce>
 800c366:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c368:	2301      	movs	r3, #1
 800c36a:	6013      	str	r3, [r2, #0]
 800c36c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c36e:	b113      	cbz	r3, 800c376 <_dtoa_r+0xc6>
 800c370:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c372:	4b84      	ldr	r3, [pc, #528]	@ (800c584 <_dtoa_r+0x2d4>)
 800c374:	6013      	str	r3, [r2, #0]
 800c376:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c598 <_dtoa_r+0x2e8>
 800c37a:	f000 bd33 	b.w	800cde4 <_dtoa_r+0xb34>
 800c37e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c382:	aa16      	add	r2, sp, #88	@ 0x58
 800c384:	a917      	add	r1, sp, #92	@ 0x5c
 800c386:	4658      	mov	r0, fp
 800c388:	f001 fd86 	bl	800de98 <__d2b>
 800c38c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c390:	4681      	mov	r9, r0
 800c392:	2e00      	cmp	r6, #0
 800c394:	d077      	beq.n	800c486 <_dtoa_r+0x1d6>
 800c396:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c398:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c39c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c3a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c3ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	4b74      	ldr	r3, [pc, #464]	@ (800c588 <_dtoa_r+0x2d8>)
 800c3b6:	f7f3 ff9f 	bl	80002f8 <__aeabi_dsub>
 800c3ba:	a369      	add	r3, pc, #420	@ (adr r3, 800c560 <_dtoa_r+0x2b0>)
 800c3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c0:	f7f4 f952 	bl	8000668 <__aeabi_dmul>
 800c3c4:	a368      	add	r3, pc, #416	@ (adr r3, 800c568 <_dtoa_r+0x2b8>)
 800c3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ca:	f7f3 ff97 	bl	80002fc <__adddf3>
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	460d      	mov	r5, r1
 800c3d4:	f7f4 f8de 	bl	8000594 <__aeabi_i2d>
 800c3d8:	a365      	add	r3, pc, #404	@ (adr r3, 800c570 <_dtoa_r+0x2c0>)
 800c3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3de:	f7f4 f943 	bl	8000668 <__aeabi_dmul>
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	4629      	mov	r1, r5
 800c3ea:	f7f3 ff87 	bl	80002fc <__adddf3>
 800c3ee:	4604      	mov	r4, r0
 800c3f0:	460d      	mov	r5, r1
 800c3f2:	f7f4 fbe9 	bl	8000bc8 <__aeabi_d2iz>
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	4607      	mov	r7, r0
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	4629      	mov	r1, r5
 800c400:	f7f4 fba4 	bl	8000b4c <__aeabi_dcmplt>
 800c404:	b140      	cbz	r0, 800c418 <_dtoa_r+0x168>
 800c406:	4638      	mov	r0, r7
 800c408:	f7f4 f8c4 	bl	8000594 <__aeabi_i2d>
 800c40c:	4622      	mov	r2, r4
 800c40e:	462b      	mov	r3, r5
 800c410:	f7f4 fb92 	bl	8000b38 <__aeabi_dcmpeq>
 800c414:	b900      	cbnz	r0, 800c418 <_dtoa_r+0x168>
 800c416:	3f01      	subs	r7, #1
 800c418:	2f16      	cmp	r7, #22
 800c41a:	d851      	bhi.n	800c4c0 <_dtoa_r+0x210>
 800c41c:	4b5b      	ldr	r3, [pc, #364]	@ (800c58c <_dtoa_r+0x2dc>)
 800c41e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c426:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c42a:	f7f4 fb8f 	bl	8000b4c <__aeabi_dcmplt>
 800c42e:	2800      	cmp	r0, #0
 800c430:	d048      	beq.n	800c4c4 <_dtoa_r+0x214>
 800c432:	3f01      	subs	r7, #1
 800c434:	2300      	movs	r3, #0
 800c436:	9312      	str	r3, [sp, #72]	@ 0x48
 800c438:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c43a:	1b9b      	subs	r3, r3, r6
 800c43c:	1e5a      	subs	r2, r3, #1
 800c43e:	bf44      	itt	mi
 800c440:	f1c3 0801 	rsbmi	r8, r3, #1
 800c444:	2300      	movmi	r3, #0
 800c446:	9208      	str	r2, [sp, #32]
 800c448:	bf54      	ite	pl
 800c44a:	f04f 0800 	movpl.w	r8, #0
 800c44e:	9308      	strmi	r3, [sp, #32]
 800c450:	2f00      	cmp	r7, #0
 800c452:	db39      	blt.n	800c4c8 <_dtoa_r+0x218>
 800c454:	9b08      	ldr	r3, [sp, #32]
 800c456:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c458:	443b      	add	r3, r7
 800c45a:	9308      	str	r3, [sp, #32]
 800c45c:	2300      	movs	r3, #0
 800c45e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c462:	2b09      	cmp	r3, #9
 800c464:	d864      	bhi.n	800c530 <_dtoa_r+0x280>
 800c466:	2b05      	cmp	r3, #5
 800c468:	bfc4      	itt	gt
 800c46a:	3b04      	subgt	r3, #4
 800c46c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c46e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c470:	f1a3 0302 	sub.w	r3, r3, #2
 800c474:	bfcc      	ite	gt
 800c476:	2400      	movgt	r4, #0
 800c478:	2401      	movle	r4, #1
 800c47a:	2b03      	cmp	r3, #3
 800c47c:	d863      	bhi.n	800c546 <_dtoa_r+0x296>
 800c47e:	e8df f003 	tbb	[pc, r3]
 800c482:	372a      	.short	0x372a
 800c484:	5535      	.short	0x5535
 800c486:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c48a:	441e      	add	r6, r3
 800c48c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c490:	2b20      	cmp	r3, #32
 800c492:	bfc1      	itttt	gt
 800c494:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c498:	409f      	lslgt	r7, r3
 800c49a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c49e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c4a2:	bfd6      	itet	le
 800c4a4:	f1c3 0320 	rsble	r3, r3, #32
 800c4a8:	ea47 0003 	orrgt.w	r0, r7, r3
 800c4ac:	fa04 f003 	lslle.w	r0, r4, r3
 800c4b0:	f7f4 f860 	bl	8000574 <__aeabi_ui2d>
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c4ba:	3e01      	subs	r6, #1
 800c4bc:	9214      	str	r2, [sp, #80]	@ 0x50
 800c4be:	e777      	b.n	800c3b0 <_dtoa_r+0x100>
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	e7b8      	b.n	800c436 <_dtoa_r+0x186>
 800c4c4:	9012      	str	r0, [sp, #72]	@ 0x48
 800c4c6:	e7b7      	b.n	800c438 <_dtoa_r+0x188>
 800c4c8:	427b      	negs	r3, r7
 800c4ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	eba8 0807 	sub.w	r8, r8, r7
 800c4d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c4d4:	e7c4      	b.n	800c460 <_dtoa_r+0x1b0>
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	dc35      	bgt.n	800c54c <_dtoa_r+0x29c>
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	9300      	str	r3, [sp, #0]
 800c4e4:	9307      	str	r3, [sp, #28]
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c4ea:	e00b      	b.n	800c504 <_dtoa_r+0x254>
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	e7f3      	b.n	800c4d8 <_dtoa_r+0x228>
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4f6:	18fb      	adds	r3, r7, r3
 800c4f8:	9300      	str	r3, [sp, #0]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	9307      	str	r3, [sp, #28]
 800c500:	bfb8      	it	lt
 800c502:	2301      	movlt	r3, #1
 800c504:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c508:	2100      	movs	r1, #0
 800c50a:	2204      	movs	r2, #4
 800c50c:	f102 0514 	add.w	r5, r2, #20
 800c510:	429d      	cmp	r5, r3
 800c512:	d91f      	bls.n	800c554 <_dtoa_r+0x2a4>
 800c514:	6041      	str	r1, [r0, #4]
 800c516:	4658      	mov	r0, fp
 800c518:	f001 f8da 	bl	800d6d0 <_Balloc>
 800c51c:	4682      	mov	sl, r0
 800c51e:	2800      	cmp	r0, #0
 800c520:	d13c      	bne.n	800c59c <_dtoa_r+0x2ec>
 800c522:	4b1b      	ldr	r3, [pc, #108]	@ (800c590 <_dtoa_r+0x2e0>)
 800c524:	4602      	mov	r2, r0
 800c526:	f240 11af 	movw	r1, #431	@ 0x1af
 800c52a:	e6d8      	b.n	800c2de <_dtoa_r+0x2e>
 800c52c:	2301      	movs	r3, #1
 800c52e:	e7e0      	b.n	800c4f2 <_dtoa_r+0x242>
 800c530:	2401      	movs	r4, #1
 800c532:	2300      	movs	r3, #0
 800c534:	9309      	str	r3, [sp, #36]	@ 0x24
 800c536:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c538:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c53c:	9300      	str	r3, [sp, #0]
 800c53e:	9307      	str	r3, [sp, #28]
 800c540:	2200      	movs	r2, #0
 800c542:	2312      	movs	r3, #18
 800c544:	e7d0      	b.n	800c4e8 <_dtoa_r+0x238>
 800c546:	2301      	movs	r3, #1
 800c548:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c54a:	e7f5      	b.n	800c538 <_dtoa_r+0x288>
 800c54c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	9307      	str	r3, [sp, #28]
 800c552:	e7d7      	b.n	800c504 <_dtoa_r+0x254>
 800c554:	3101      	adds	r1, #1
 800c556:	0052      	lsls	r2, r2, #1
 800c558:	e7d8      	b.n	800c50c <_dtoa_r+0x25c>
 800c55a:	bf00      	nop
 800c55c:	f3af 8000 	nop.w
 800c560:	636f4361 	.word	0x636f4361
 800c564:	3fd287a7 	.word	0x3fd287a7
 800c568:	8b60c8b3 	.word	0x8b60c8b3
 800c56c:	3fc68a28 	.word	0x3fc68a28
 800c570:	509f79fb 	.word	0x509f79fb
 800c574:	3fd34413 	.word	0x3fd34413
 800c578:	0800ed32 	.word	0x0800ed32
 800c57c:	0800edf4 	.word	0x0800edf4
 800c580:	7ff00000 	.word	0x7ff00000
 800c584:	0800ed0a 	.word	0x0800ed0a
 800c588:	3ff80000 	.word	0x3ff80000
 800c58c:	0800ef50 	.word	0x0800ef50
 800c590:	0800ee4c 	.word	0x0800ee4c
 800c594:	0800edf0 	.word	0x0800edf0
 800c598:	0800ed09 	.word	0x0800ed09
 800c59c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c5a0:	6018      	str	r0, [r3, #0]
 800c5a2:	9b07      	ldr	r3, [sp, #28]
 800c5a4:	2b0e      	cmp	r3, #14
 800c5a6:	f200 80a4 	bhi.w	800c6f2 <_dtoa_r+0x442>
 800c5aa:	2c00      	cmp	r4, #0
 800c5ac:	f000 80a1 	beq.w	800c6f2 <_dtoa_r+0x442>
 800c5b0:	2f00      	cmp	r7, #0
 800c5b2:	dd33      	ble.n	800c61c <_dtoa_r+0x36c>
 800c5b4:	4bad      	ldr	r3, [pc, #692]	@ (800c86c <_dtoa_r+0x5bc>)
 800c5b6:	f007 020f 	and.w	r2, r7, #15
 800c5ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5be:	ed93 7b00 	vldr	d7, [r3]
 800c5c2:	05f8      	lsls	r0, r7, #23
 800c5c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c5c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c5cc:	d516      	bpl.n	800c5fc <_dtoa_r+0x34c>
 800c5ce:	4ba8      	ldr	r3, [pc, #672]	@ (800c870 <_dtoa_r+0x5c0>)
 800c5d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c5d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c5d8:	f7f4 f970 	bl	80008bc <__aeabi_ddiv>
 800c5dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5e0:	f004 040f 	and.w	r4, r4, #15
 800c5e4:	2603      	movs	r6, #3
 800c5e6:	4da2      	ldr	r5, [pc, #648]	@ (800c870 <_dtoa_r+0x5c0>)
 800c5e8:	b954      	cbnz	r4, 800c600 <_dtoa_r+0x350>
 800c5ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5f2:	f7f4 f963 	bl	80008bc <__aeabi_ddiv>
 800c5f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5fa:	e028      	b.n	800c64e <_dtoa_r+0x39e>
 800c5fc:	2602      	movs	r6, #2
 800c5fe:	e7f2      	b.n	800c5e6 <_dtoa_r+0x336>
 800c600:	07e1      	lsls	r1, r4, #31
 800c602:	d508      	bpl.n	800c616 <_dtoa_r+0x366>
 800c604:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c608:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c60c:	f7f4 f82c 	bl	8000668 <__aeabi_dmul>
 800c610:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c614:	3601      	adds	r6, #1
 800c616:	1064      	asrs	r4, r4, #1
 800c618:	3508      	adds	r5, #8
 800c61a:	e7e5      	b.n	800c5e8 <_dtoa_r+0x338>
 800c61c:	f000 80d2 	beq.w	800c7c4 <_dtoa_r+0x514>
 800c620:	427c      	negs	r4, r7
 800c622:	4b92      	ldr	r3, [pc, #584]	@ (800c86c <_dtoa_r+0x5bc>)
 800c624:	4d92      	ldr	r5, [pc, #584]	@ (800c870 <_dtoa_r+0x5c0>)
 800c626:	f004 020f 	and.w	r2, r4, #15
 800c62a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c632:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c636:	f7f4 f817 	bl	8000668 <__aeabi_dmul>
 800c63a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c63e:	1124      	asrs	r4, r4, #4
 800c640:	2300      	movs	r3, #0
 800c642:	2602      	movs	r6, #2
 800c644:	2c00      	cmp	r4, #0
 800c646:	f040 80b2 	bne.w	800c7ae <_dtoa_r+0x4fe>
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d1d3      	bne.n	800c5f6 <_dtoa_r+0x346>
 800c64e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c650:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c654:	2b00      	cmp	r3, #0
 800c656:	f000 80b7 	beq.w	800c7c8 <_dtoa_r+0x518>
 800c65a:	4b86      	ldr	r3, [pc, #536]	@ (800c874 <_dtoa_r+0x5c4>)
 800c65c:	2200      	movs	r2, #0
 800c65e:	4620      	mov	r0, r4
 800c660:	4629      	mov	r1, r5
 800c662:	f7f4 fa73 	bl	8000b4c <__aeabi_dcmplt>
 800c666:	2800      	cmp	r0, #0
 800c668:	f000 80ae 	beq.w	800c7c8 <_dtoa_r+0x518>
 800c66c:	9b07      	ldr	r3, [sp, #28]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f000 80aa 	beq.w	800c7c8 <_dtoa_r+0x518>
 800c674:	9b00      	ldr	r3, [sp, #0]
 800c676:	2b00      	cmp	r3, #0
 800c678:	dd37      	ble.n	800c6ea <_dtoa_r+0x43a>
 800c67a:	1e7b      	subs	r3, r7, #1
 800c67c:	9304      	str	r3, [sp, #16]
 800c67e:	4620      	mov	r0, r4
 800c680:	4b7d      	ldr	r3, [pc, #500]	@ (800c878 <_dtoa_r+0x5c8>)
 800c682:	2200      	movs	r2, #0
 800c684:	4629      	mov	r1, r5
 800c686:	f7f3 ffef 	bl	8000668 <__aeabi_dmul>
 800c68a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c68e:	9c00      	ldr	r4, [sp, #0]
 800c690:	3601      	adds	r6, #1
 800c692:	4630      	mov	r0, r6
 800c694:	f7f3 ff7e 	bl	8000594 <__aeabi_i2d>
 800c698:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c69c:	f7f3 ffe4 	bl	8000668 <__aeabi_dmul>
 800c6a0:	4b76      	ldr	r3, [pc, #472]	@ (800c87c <_dtoa_r+0x5cc>)
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f7f3 fe2a 	bl	80002fc <__adddf3>
 800c6a8:	4605      	mov	r5, r0
 800c6aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c6ae:	2c00      	cmp	r4, #0
 800c6b0:	f040 808d 	bne.w	800c7ce <_dtoa_r+0x51e>
 800c6b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6b8:	4b71      	ldr	r3, [pc, #452]	@ (800c880 <_dtoa_r+0x5d0>)
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	f7f3 fe1c 	bl	80002f8 <__aeabi_dsub>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c6c8:	462a      	mov	r2, r5
 800c6ca:	4633      	mov	r3, r6
 800c6cc:	f7f4 fa5c 	bl	8000b88 <__aeabi_dcmpgt>
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	f040 828b 	bne.w	800cbec <_dtoa_r+0x93c>
 800c6d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6da:	462a      	mov	r2, r5
 800c6dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c6e0:	f7f4 fa34 	bl	8000b4c <__aeabi_dcmplt>
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	f040 8128 	bne.w	800c93a <_dtoa_r+0x68a>
 800c6ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c6ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c6f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	f2c0 815a 	blt.w	800c9ae <_dtoa_r+0x6fe>
 800c6fa:	2f0e      	cmp	r7, #14
 800c6fc:	f300 8157 	bgt.w	800c9ae <_dtoa_r+0x6fe>
 800c700:	4b5a      	ldr	r3, [pc, #360]	@ (800c86c <_dtoa_r+0x5bc>)
 800c702:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c706:	ed93 7b00 	vldr	d7, [r3]
 800c70a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	ed8d 7b00 	vstr	d7, [sp]
 800c712:	da03      	bge.n	800c71c <_dtoa_r+0x46c>
 800c714:	9b07      	ldr	r3, [sp, #28]
 800c716:	2b00      	cmp	r3, #0
 800c718:	f340 8101 	ble.w	800c91e <_dtoa_r+0x66e>
 800c71c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c720:	4656      	mov	r6, sl
 800c722:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c726:	4620      	mov	r0, r4
 800c728:	4629      	mov	r1, r5
 800c72a:	f7f4 f8c7 	bl	80008bc <__aeabi_ddiv>
 800c72e:	f7f4 fa4b 	bl	8000bc8 <__aeabi_d2iz>
 800c732:	4680      	mov	r8, r0
 800c734:	f7f3 ff2e 	bl	8000594 <__aeabi_i2d>
 800c738:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c73c:	f7f3 ff94 	bl	8000668 <__aeabi_dmul>
 800c740:	4602      	mov	r2, r0
 800c742:	460b      	mov	r3, r1
 800c744:	4620      	mov	r0, r4
 800c746:	4629      	mov	r1, r5
 800c748:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c74c:	f7f3 fdd4 	bl	80002f8 <__aeabi_dsub>
 800c750:	f806 4b01 	strb.w	r4, [r6], #1
 800c754:	9d07      	ldr	r5, [sp, #28]
 800c756:	eba6 040a 	sub.w	r4, r6, sl
 800c75a:	42a5      	cmp	r5, r4
 800c75c:	4602      	mov	r2, r0
 800c75e:	460b      	mov	r3, r1
 800c760:	f040 8117 	bne.w	800c992 <_dtoa_r+0x6e2>
 800c764:	f7f3 fdca 	bl	80002fc <__adddf3>
 800c768:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c76c:	4604      	mov	r4, r0
 800c76e:	460d      	mov	r5, r1
 800c770:	f7f4 fa0a 	bl	8000b88 <__aeabi_dcmpgt>
 800c774:	2800      	cmp	r0, #0
 800c776:	f040 80f9 	bne.w	800c96c <_dtoa_r+0x6bc>
 800c77a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c77e:	4620      	mov	r0, r4
 800c780:	4629      	mov	r1, r5
 800c782:	f7f4 f9d9 	bl	8000b38 <__aeabi_dcmpeq>
 800c786:	b118      	cbz	r0, 800c790 <_dtoa_r+0x4e0>
 800c788:	f018 0f01 	tst.w	r8, #1
 800c78c:	f040 80ee 	bne.w	800c96c <_dtoa_r+0x6bc>
 800c790:	4649      	mov	r1, r9
 800c792:	4658      	mov	r0, fp
 800c794:	f000 ffdc 	bl	800d750 <_Bfree>
 800c798:	2300      	movs	r3, #0
 800c79a:	7033      	strb	r3, [r6, #0]
 800c79c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c79e:	3701      	adds	r7, #1
 800c7a0:	601f      	str	r7, [r3, #0]
 800c7a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	f000 831d 	beq.w	800cde4 <_dtoa_r+0xb34>
 800c7aa:	601e      	str	r6, [r3, #0]
 800c7ac:	e31a      	b.n	800cde4 <_dtoa_r+0xb34>
 800c7ae:	07e2      	lsls	r2, r4, #31
 800c7b0:	d505      	bpl.n	800c7be <_dtoa_r+0x50e>
 800c7b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c7b6:	f7f3 ff57 	bl	8000668 <__aeabi_dmul>
 800c7ba:	3601      	adds	r6, #1
 800c7bc:	2301      	movs	r3, #1
 800c7be:	1064      	asrs	r4, r4, #1
 800c7c0:	3508      	adds	r5, #8
 800c7c2:	e73f      	b.n	800c644 <_dtoa_r+0x394>
 800c7c4:	2602      	movs	r6, #2
 800c7c6:	e742      	b.n	800c64e <_dtoa_r+0x39e>
 800c7c8:	9c07      	ldr	r4, [sp, #28]
 800c7ca:	9704      	str	r7, [sp, #16]
 800c7cc:	e761      	b.n	800c692 <_dtoa_r+0x3e2>
 800c7ce:	4b27      	ldr	r3, [pc, #156]	@ (800c86c <_dtoa_r+0x5bc>)
 800c7d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c7d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c7d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c7da:	4454      	add	r4, sl
 800c7dc:	2900      	cmp	r1, #0
 800c7de:	d053      	beq.n	800c888 <_dtoa_r+0x5d8>
 800c7e0:	4928      	ldr	r1, [pc, #160]	@ (800c884 <_dtoa_r+0x5d4>)
 800c7e2:	2000      	movs	r0, #0
 800c7e4:	f7f4 f86a 	bl	80008bc <__aeabi_ddiv>
 800c7e8:	4633      	mov	r3, r6
 800c7ea:	462a      	mov	r2, r5
 800c7ec:	f7f3 fd84 	bl	80002f8 <__aeabi_dsub>
 800c7f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c7f4:	4656      	mov	r6, sl
 800c7f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7fa:	f7f4 f9e5 	bl	8000bc8 <__aeabi_d2iz>
 800c7fe:	4605      	mov	r5, r0
 800c800:	f7f3 fec8 	bl	8000594 <__aeabi_i2d>
 800c804:	4602      	mov	r2, r0
 800c806:	460b      	mov	r3, r1
 800c808:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c80c:	f7f3 fd74 	bl	80002f8 <__aeabi_dsub>
 800c810:	3530      	adds	r5, #48	@ 0x30
 800c812:	4602      	mov	r2, r0
 800c814:	460b      	mov	r3, r1
 800c816:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c81a:	f806 5b01 	strb.w	r5, [r6], #1
 800c81e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c822:	f7f4 f993 	bl	8000b4c <__aeabi_dcmplt>
 800c826:	2800      	cmp	r0, #0
 800c828:	d171      	bne.n	800c90e <_dtoa_r+0x65e>
 800c82a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c82e:	4911      	ldr	r1, [pc, #68]	@ (800c874 <_dtoa_r+0x5c4>)
 800c830:	2000      	movs	r0, #0
 800c832:	f7f3 fd61 	bl	80002f8 <__aeabi_dsub>
 800c836:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c83a:	f7f4 f987 	bl	8000b4c <__aeabi_dcmplt>
 800c83e:	2800      	cmp	r0, #0
 800c840:	f040 8095 	bne.w	800c96e <_dtoa_r+0x6be>
 800c844:	42a6      	cmp	r6, r4
 800c846:	f43f af50 	beq.w	800c6ea <_dtoa_r+0x43a>
 800c84a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c84e:	4b0a      	ldr	r3, [pc, #40]	@ (800c878 <_dtoa_r+0x5c8>)
 800c850:	2200      	movs	r2, #0
 800c852:	f7f3 ff09 	bl	8000668 <__aeabi_dmul>
 800c856:	4b08      	ldr	r3, [pc, #32]	@ (800c878 <_dtoa_r+0x5c8>)
 800c858:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c85c:	2200      	movs	r2, #0
 800c85e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c862:	f7f3 ff01 	bl	8000668 <__aeabi_dmul>
 800c866:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c86a:	e7c4      	b.n	800c7f6 <_dtoa_r+0x546>
 800c86c:	0800ef50 	.word	0x0800ef50
 800c870:	0800ef28 	.word	0x0800ef28
 800c874:	3ff00000 	.word	0x3ff00000
 800c878:	40240000 	.word	0x40240000
 800c87c:	401c0000 	.word	0x401c0000
 800c880:	40140000 	.word	0x40140000
 800c884:	3fe00000 	.word	0x3fe00000
 800c888:	4631      	mov	r1, r6
 800c88a:	4628      	mov	r0, r5
 800c88c:	f7f3 feec 	bl	8000668 <__aeabi_dmul>
 800c890:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c894:	9415      	str	r4, [sp, #84]	@ 0x54
 800c896:	4656      	mov	r6, sl
 800c898:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c89c:	f7f4 f994 	bl	8000bc8 <__aeabi_d2iz>
 800c8a0:	4605      	mov	r5, r0
 800c8a2:	f7f3 fe77 	bl	8000594 <__aeabi_i2d>
 800c8a6:	4602      	mov	r2, r0
 800c8a8:	460b      	mov	r3, r1
 800c8aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8ae:	f7f3 fd23 	bl	80002f8 <__aeabi_dsub>
 800c8b2:	3530      	adds	r5, #48	@ 0x30
 800c8b4:	f806 5b01 	strb.w	r5, [r6], #1
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	460b      	mov	r3, r1
 800c8bc:	42a6      	cmp	r6, r4
 800c8be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c8c2:	f04f 0200 	mov.w	r2, #0
 800c8c6:	d124      	bne.n	800c912 <_dtoa_r+0x662>
 800c8c8:	4bac      	ldr	r3, [pc, #688]	@ (800cb7c <_dtoa_r+0x8cc>)
 800c8ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c8ce:	f7f3 fd15 	bl	80002fc <__adddf3>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8da:	f7f4 f955 	bl	8000b88 <__aeabi_dcmpgt>
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	d145      	bne.n	800c96e <_dtoa_r+0x6be>
 800c8e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c8e6:	49a5      	ldr	r1, [pc, #660]	@ (800cb7c <_dtoa_r+0x8cc>)
 800c8e8:	2000      	movs	r0, #0
 800c8ea:	f7f3 fd05 	bl	80002f8 <__aeabi_dsub>
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8f6:	f7f4 f929 	bl	8000b4c <__aeabi_dcmplt>
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	f43f aef5 	beq.w	800c6ea <_dtoa_r+0x43a>
 800c900:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c902:	1e73      	subs	r3, r6, #1
 800c904:	9315      	str	r3, [sp, #84]	@ 0x54
 800c906:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c90a:	2b30      	cmp	r3, #48	@ 0x30
 800c90c:	d0f8      	beq.n	800c900 <_dtoa_r+0x650>
 800c90e:	9f04      	ldr	r7, [sp, #16]
 800c910:	e73e      	b.n	800c790 <_dtoa_r+0x4e0>
 800c912:	4b9b      	ldr	r3, [pc, #620]	@ (800cb80 <_dtoa_r+0x8d0>)
 800c914:	f7f3 fea8 	bl	8000668 <__aeabi_dmul>
 800c918:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c91c:	e7bc      	b.n	800c898 <_dtoa_r+0x5e8>
 800c91e:	d10c      	bne.n	800c93a <_dtoa_r+0x68a>
 800c920:	4b98      	ldr	r3, [pc, #608]	@ (800cb84 <_dtoa_r+0x8d4>)
 800c922:	2200      	movs	r2, #0
 800c924:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c928:	f7f3 fe9e 	bl	8000668 <__aeabi_dmul>
 800c92c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c930:	f7f4 f920 	bl	8000b74 <__aeabi_dcmpge>
 800c934:	2800      	cmp	r0, #0
 800c936:	f000 8157 	beq.w	800cbe8 <_dtoa_r+0x938>
 800c93a:	2400      	movs	r4, #0
 800c93c:	4625      	mov	r5, r4
 800c93e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c940:	43db      	mvns	r3, r3
 800c942:	9304      	str	r3, [sp, #16]
 800c944:	4656      	mov	r6, sl
 800c946:	2700      	movs	r7, #0
 800c948:	4621      	mov	r1, r4
 800c94a:	4658      	mov	r0, fp
 800c94c:	f000 ff00 	bl	800d750 <_Bfree>
 800c950:	2d00      	cmp	r5, #0
 800c952:	d0dc      	beq.n	800c90e <_dtoa_r+0x65e>
 800c954:	b12f      	cbz	r7, 800c962 <_dtoa_r+0x6b2>
 800c956:	42af      	cmp	r7, r5
 800c958:	d003      	beq.n	800c962 <_dtoa_r+0x6b2>
 800c95a:	4639      	mov	r1, r7
 800c95c:	4658      	mov	r0, fp
 800c95e:	f000 fef7 	bl	800d750 <_Bfree>
 800c962:	4629      	mov	r1, r5
 800c964:	4658      	mov	r0, fp
 800c966:	f000 fef3 	bl	800d750 <_Bfree>
 800c96a:	e7d0      	b.n	800c90e <_dtoa_r+0x65e>
 800c96c:	9704      	str	r7, [sp, #16]
 800c96e:	4633      	mov	r3, r6
 800c970:	461e      	mov	r6, r3
 800c972:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c976:	2a39      	cmp	r2, #57	@ 0x39
 800c978:	d107      	bne.n	800c98a <_dtoa_r+0x6da>
 800c97a:	459a      	cmp	sl, r3
 800c97c:	d1f8      	bne.n	800c970 <_dtoa_r+0x6c0>
 800c97e:	9a04      	ldr	r2, [sp, #16]
 800c980:	3201      	adds	r2, #1
 800c982:	9204      	str	r2, [sp, #16]
 800c984:	2230      	movs	r2, #48	@ 0x30
 800c986:	f88a 2000 	strb.w	r2, [sl]
 800c98a:	781a      	ldrb	r2, [r3, #0]
 800c98c:	3201      	adds	r2, #1
 800c98e:	701a      	strb	r2, [r3, #0]
 800c990:	e7bd      	b.n	800c90e <_dtoa_r+0x65e>
 800c992:	4b7b      	ldr	r3, [pc, #492]	@ (800cb80 <_dtoa_r+0x8d0>)
 800c994:	2200      	movs	r2, #0
 800c996:	f7f3 fe67 	bl	8000668 <__aeabi_dmul>
 800c99a:	2200      	movs	r2, #0
 800c99c:	2300      	movs	r3, #0
 800c99e:	4604      	mov	r4, r0
 800c9a0:	460d      	mov	r5, r1
 800c9a2:	f7f4 f8c9 	bl	8000b38 <__aeabi_dcmpeq>
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	f43f aebb 	beq.w	800c722 <_dtoa_r+0x472>
 800c9ac:	e6f0      	b.n	800c790 <_dtoa_r+0x4e0>
 800c9ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c9b0:	2a00      	cmp	r2, #0
 800c9b2:	f000 80db 	beq.w	800cb6c <_dtoa_r+0x8bc>
 800c9b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9b8:	2a01      	cmp	r2, #1
 800c9ba:	f300 80bf 	bgt.w	800cb3c <_dtoa_r+0x88c>
 800c9be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c9c0:	2a00      	cmp	r2, #0
 800c9c2:	f000 80b7 	beq.w	800cb34 <_dtoa_r+0x884>
 800c9c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c9ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c9cc:	4646      	mov	r6, r8
 800c9ce:	9a08      	ldr	r2, [sp, #32]
 800c9d0:	2101      	movs	r1, #1
 800c9d2:	441a      	add	r2, r3
 800c9d4:	4658      	mov	r0, fp
 800c9d6:	4498      	add	r8, r3
 800c9d8:	9208      	str	r2, [sp, #32]
 800c9da:	f000 ffb7 	bl	800d94c <__i2b>
 800c9de:	4605      	mov	r5, r0
 800c9e0:	b15e      	cbz	r6, 800c9fa <_dtoa_r+0x74a>
 800c9e2:	9b08      	ldr	r3, [sp, #32]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	dd08      	ble.n	800c9fa <_dtoa_r+0x74a>
 800c9e8:	42b3      	cmp	r3, r6
 800c9ea:	9a08      	ldr	r2, [sp, #32]
 800c9ec:	bfa8      	it	ge
 800c9ee:	4633      	movge	r3, r6
 800c9f0:	eba8 0803 	sub.w	r8, r8, r3
 800c9f4:	1af6      	subs	r6, r6, r3
 800c9f6:	1ad3      	subs	r3, r2, r3
 800c9f8:	9308      	str	r3, [sp, #32]
 800c9fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9fc:	b1f3      	cbz	r3, 800ca3c <_dtoa_r+0x78c>
 800c9fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	f000 80b7 	beq.w	800cb74 <_dtoa_r+0x8c4>
 800ca06:	b18c      	cbz	r4, 800ca2c <_dtoa_r+0x77c>
 800ca08:	4629      	mov	r1, r5
 800ca0a:	4622      	mov	r2, r4
 800ca0c:	4658      	mov	r0, fp
 800ca0e:	f001 f85d 	bl	800dacc <__pow5mult>
 800ca12:	464a      	mov	r2, r9
 800ca14:	4601      	mov	r1, r0
 800ca16:	4605      	mov	r5, r0
 800ca18:	4658      	mov	r0, fp
 800ca1a:	f000 ffad 	bl	800d978 <__multiply>
 800ca1e:	4649      	mov	r1, r9
 800ca20:	9004      	str	r0, [sp, #16]
 800ca22:	4658      	mov	r0, fp
 800ca24:	f000 fe94 	bl	800d750 <_Bfree>
 800ca28:	9b04      	ldr	r3, [sp, #16]
 800ca2a:	4699      	mov	r9, r3
 800ca2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca2e:	1b1a      	subs	r2, r3, r4
 800ca30:	d004      	beq.n	800ca3c <_dtoa_r+0x78c>
 800ca32:	4649      	mov	r1, r9
 800ca34:	4658      	mov	r0, fp
 800ca36:	f001 f849 	bl	800dacc <__pow5mult>
 800ca3a:	4681      	mov	r9, r0
 800ca3c:	2101      	movs	r1, #1
 800ca3e:	4658      	mov	r0, fp
 800ca40:	f000 ff84 	bl	800d94c <__i2b>
 800ca44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca46:	4604      	mov	r4, r0
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	f000 81cf 	beq.w	800cdec <_dtoa_r+0xb3c>
 800ca4e:	461a      	mov	r2, r3
 800ca50:	4601      	mov	r1, r0
 800ca52:	4658      	mov	r0, fp
 800ca54:	f001 f83a 	bl	800dacc <__pow5mult>
 800ca58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	4604      	mov	r4, r0
 800ca5e:	f300 8095 	bgt.w	800cb8c <_dtoa_r+0x8dc>
 800ca62:	9b02      	ldr	r3, [sp, #8]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	f040 8087 	bne.w	800cb78 <_dtoa_r+0x8c8>
 800ca6a:	9b03      	ldr	r3, [sp, #12]
 800ca6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	f040 8089 	bne.w	800cb88 <_dtoa_r+0x8d8>
 800ca76:	9b03      	ldr	r3, [sp, #12]
 800ca78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ca7c:	0d1b      	lsrs	r3, r3, #20
 800ca7e:	051b      	lsls	r3, r3, #20
 800ca80:	b12b      	cbz	r3, 800ca8e <_dtoa_r+0x7de>
 800ca82:	9b08      	ldr	r3, [sp, #32]
 800ca84:	3301      	adds	r3, #1
 800ca86:	9308      	str	r3, [sp, #32]
 800ca88:	f108 0801 	add.w	r8, r8, #1
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	f000 81b0 	beq.w	800cdf8 <_dtoa_r+0xb48>
 800ca98:	6923      	ldr	r3, [r4, #16]
 800ca9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ca9e:	6918      	ldr	r0, [r3, #16]
 800caa0:	f000 ff08 	bl	800d8b4 <__hi0bits>
 800caa4:	f1c0 0020 	rsb	r0, r0, #32
 800caa8:	9b08      	ldr	r3, [sp, #32]
 800caaa:	4418      	add	r0, r3
 800caac:	f010 001f 	ands.w	r0, r0, #31
 800cab0:	d077      	beq.n	800cba2 <_dtoa_r+0x8f2>
 800cab2:	f1c0 0320 	rsb	r3, r0, #32
 800cab6:	2b04      	cmp	r3, #4
 800cab8:	dd6b      	ble.n	800cb92 <_dtoa_r+0x8e2>
 800caba:	9b08      	ldr	r3, [sp, #32]
 800cabc:	f1c0 001c 	rsb	r0, r0, #28
 800cac0:	4403      	add	r3, r0
 800cac2:	4480      	add	r8, r0
 800cac4:	4406      	add	r6, r0
 800cac6:	9308      	str	r3, [sp, #32]
 800cac8:	f1b8 0f00 	cmp.w	r8, #0
 800cacc:	dd05      	ble.n	800cada <_dtoa_r+0x82a>
 800cace:	4649      	mov	r1, r9
 800cad0:	4642      	mov	r2, r8
 800cad2:	4658      	mov	r0, fp
 800cad4:	f001 f854 	bl	800db80 <__lshift>
 800cad8:	4681      	mov	r9, r0
 800cada:	9b08      	ldr	r3, [sp, #32]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	dd05      	ble.n	800caec <_dtoa_r+0x83c>
 800cae0:	4621      	mov	r1, r4
 800cae2:	461a      	mov	r2, r3
 800cae4:	4658      	mov	r0, fp
 800cae6:	f001 f84b 	bl	800db80 <__lshift>
 800caea:	4604      	mov	r4, r0
 800caec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d059      	beq.n	800cba6 <_dtoa_r+0x8f6>
 800caf2:	4621      	mov	r1, r4
 800caf4:	4648      	mov	r0, r9
 800caf6:	f001 f8af 	bl	800dc58 <__mcmp>
 800cafa:	2800      	cmp	r0, #0
 800cafc:	da53      	bge.n	800cba6 <_dtoa_r+0x8f6>
 800cafe:	1e7b      	subs	r3, r7, #1
 800cb00:	9304      	str	r3, [sp, #16]
 800cb02:	4649      	mov	r1, r9
 800cb04:	2300      	movs	r3, #0
 800cb06:	220a      	movs	r2, #10
 800cb08:	4658      	mov	r0, fp
 800cb0a:	f000 fe43 	bl	800d794 <__multadd>
 800cb0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb10:	4681      	mov	r9, r0
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	f000 8172 	beq.w	800cdfc <_dtoa_r+0xb4c>
 800cb18:	2300      	movs	r3, #0
 800cb1a:	4629      	mov	r1, r5
 800cb1c:	220a      	movs	r2, #10
 800cb1e:	4658      	mov	r0, fp
 800cb20:	f000 fe38 	bl	800d794 <__multadd>
 800cb24:	9b00      	ldr	r3, [sp, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	4605      	mov	r5, r0
 800cb2a:	dc67      	bgt.n	800cbfc <_dtoa_r+0x94c>
 800cb2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb2e:	2b02      	cmp	r3, #2
 800cb30:	dc41      	bgt.n	800cbb6 <_dtoa_r+0x906>
 800cb32:	e063      	b.n	800cbfc <_dtoa_r+0x94c>
 800cb34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cb36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cb3a:	e746      	b.n	800c9ca <_dtoa_r+0x71a>
 800cb3c:	9b07      	ldr	r3, [sp, #28]
 800cb3e:	1e5c      	subs	r4, r3, #1
 800cb40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb42:	42a3      	cmp	r3, r4
 800cb44:	bfbf      	itttt	lt
 800cb46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cb48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800cb4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cb4c:	1ae3      	sublt	r3, r4, r3
 800cb4e:	bfb4      	ite	lt
 800cb50:	18d2      	addlt	r2, r2, r3
 800cb52:	1b1c      	subge	r4, r3, r4
 800cb54:	9b07      	ldr	r3, [sp, #28]
 800cb56:	bfbc      	itt	lt
 800cb58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800cb5a:	2400      	movlt	r4, #0
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	bfb5      	itete	lt
 800cb60:	eba8 0603 	sublt.w	r6, r8, r3
 800cb64:	9b07      	ldrge	r3, [sp, #28]
 800cb66:	2300      	movlt	r3, #0
 800cb68:	4646      	movge	r6, r8
 800cb6a:	e730      	b.n	800c9ce <_dtoa_r+0x71e>
 800cb6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cb6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cb70:	4646      	mov	r6, r8
 800cb72:	e735      	b.n	800c9e0 <_dtoa_r+0x730>
 800cb74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cb76:	e75c      	b.n	800ca32 <_dtoa_r+0x782>
 800cb78:	2300      	movs	r3, #0
 800cb7a:	e788      	b.n	800ca8e <_dtoa_r+0x7de>
 800cb7c:	3fe00000 	.word	0x3fe00000
 800cb80:	40240000 	.word	0x40240000
 800cb84:	40140000 	.word	0x40140000
 800cb88:	9b02      	ldr	r3, [sp, #8]
 800cb8a:	e780      	b.n	800ca8e <_dtoa_r+0x7de>
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb90:	e782      	b.n	800ca98 <_dtoa_r+0x7e8>
 800cb92:	d099      	beq.n	800cac8 <_dtoa_r+0x818>
 800cb94:	9a08      	ldr	r2, [sp, #32]
 800cb96:	331c      	adds	r3, #28
 800cb98:	441a      	add	r2, r3
 800cb9a:	4498      	add	r8, r3
 800cb9c:	441e      	add	r6, r3
 800cb9e:	9208      	str	r2, [sp, #32]
 800cba0:	e792      	b.n	800cac8 <_dtoa_r+0x818>
 800cba2:	4603      	mov	r3, r0
 800cba4:	e7f6      	b.n	800cb94 <_dtoa_r+0x8e4>
 800cba6:	9b07      	ldr	r3, [sp, #28]
 800cba8:	9704      	str	r7, [sp, #16]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	dc20      	bgt.n	800cbf0 <_dtoa_r+0x940>
 800cbae:	9300      	str	r3, [sp, #0]
 800cbb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbb2:	2b02      	cmp	r3, #2
 800cbb4:	dd1e      	ble.n	800cbf4 <_dtoa_r+0x944>
 800cbb6:	9b00      	ldr	r3, [sp, #0]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	f47f aec0 	bne.w	800c93e <_dtoa_r+0x68e>
 800cbbe:	4621      	mov	r1, r4
 800cbc0:	2205      	movs	r2, #5
 800cbc2:	4658      	mov	r0, fp
 800cbc4:	f000 fde6 	bl	800d794 <__multadd>
 800cbc8:	4601      	mov	r1, r0
 800cbca:	4604      	mov	r4, r0
 800cbcc:	4648      	mov	r0, r9
 800cbce:	f001 f843 	bl	800dc58 <__mcmp>
 800cbd2:	2800      	cmp	r0, #0
 800cbd4:	f77f aeb3 	ble.w	800c93e <_dtoa_r+0x68e>
 800cbd8:	4656      	mov	r6, sl
 800cbda:	2331      	movs	r3, #49	@ 0x31
 800cbdc:	f806 3b01 	strb.w	r3, [r6], #1
 800cbe0:	9b04      	ldr	r3, [sp, #16]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	9304      	str	r3, [sp, #16]
 800cbe6:	e6ae      	b.n	800c946 <_dtoa_r+0x696>
 800cbe8:	9c07      	ldr	r4, [sp, #28]
 800cbea:	9704      	str	r7, [sp, #16]
 800cbec:	4625      	mov	r5, r4
 800cbee:	e7f3      	b.n	800cbd8 <_dtoa_r+0x928>
 800cbf0:	9b07      	ldr	r3, [sp, #28]
 800cbf2:	9300      	str	r3, [sp, #0]
 800cbf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	f000 8104 	beq.w	800ce04 <_dtoa_r+0xb54>
 800cbfc:	2e00      	cmp	r6, #0
 800cbfe:	dd05      	ble.n	800cc0c <_dtoa_r+0x95c>
 800cc00:	4629      	mov	r1, r5
 800cc02:	4632      	mov	r2, r6
 800cc04:	4658      	mov	r0, fp
 800cc06:	f000 ffbb 	bl	800db80 <__lshift>
 800cc0a:	4605      	mov	r5, r0
 800cc0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d05a      	beq.n	800ccc8 <_dtoa_r+0xa18>
 800cc12:	6869      	ldr	r1, [r5, #4]
 800cc14:	4658      	mov	r0, fp
 800cc16:	f000 fd5b 	bl	800d6d0 <_Balloc>
 800cc1a:	4606      	mov	r6, r0
 800cc1c:	b928      	cbnz	r0, 800cc2a <_dtoa_r+0x97a>
 800cc1e:	4b84      	ldr	r3, [pc, #528]	@ (800ce30 <_dtoa_r+0xb80>)
 800cc20:	4602      	mov	r2, r0
 800cc22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cc26:	f7ff bb5a 	b.w	800c2de <_dtoa_r+0x2e>
 800cc2a:	692a      	ldr	r2, [r5, #16]
 800cc2c:	3202      	adds	r2, #2
 800cc2e:	0092      	lsls	r2, r2, #2
 800cc30:	f105 010c 	add.w	r1, r5, #12
 800cc34:	300c      	adds	r0, #12
 800cc36:	f7ff fa78 	bl	800c12a <memcpy>
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	4631      	mov	r1, r6
 800cc3e:	4658      	mov	r0, fp
 800cc40:	f000 ff9e 	bl	800db80 <__lshift>
 800cc44:	f10a 0301 	add.w	r3, sl, #1
 800cc48:	9307      	str	r3, [sp, #28]
 800cc4a:	9b00      	ldr	r3, [sp, #0]
 800cc4c:	4453      	add	r3, sl
 800cc4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc50:	9b02      	ldr	r3, [sp, #8]
 800cc52:	f003 0301 	and.w	r3, r3, #1
 800cc56:	462f      	mov	r7, r5
 800cc58:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc5a:	4605      	mov	r5, r0
 800cc5c:	9b07      	ldr	r3, [sp, #28]
 800cc5e:	4621      	mov	r1, r4
 800cc60:	3b01      	subs	r3, #1
 800cc62:	4648      	mov	r0, r9
 800cc64:	9300      	str	r3, [sp, #0]
 800cc66:	f7ff fa9b 	bl	800c1a0 <quorem>
 800cc6a:	4639      	mov	r1, r7
 800cc6c:	9002      	str	r0, [sp, #8]
 800cc6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cc72:	4648      	mov	r0, r9
 800cc74:	f000 fff0 	bl	800dc58 <__mcmp>
 800cc78:	462a      	mov	r2, r5
 800cc7a:	9008      	str	r0, [sp, #32]
 800cc7c:	4621      	mov	r1, r4
 800cc7e:	4658      	mov	r0, fp
 800cc80:	f001 f806 	bl	800dc90 <__mdiff>
 800cc84:	68c2      	ldr	r2, [r0, #12]
 800cc86:	4606      	mov	r6, r0
 800cc88:	bb02      	cbnz	r2, 800cccc <_dtoa_r+0xa1c>
 800cc8a:	4601      	mov	r1, r0
 800cc8c:	4648      	mov	r0, r9
 800cc8e:	f000 ffe3 	bl	800dc58 <__mcmp>
 800cc92:	4602      	mov	r2, r0
 800cc94:	4631      	mov	r1, r6
 800cc96:	4658      	mov	r0, fp
 800cc98:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc9a:	f000 fd59 	bl	800d750 <_Bfree>
 800cc9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cca0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cca2:	9e07      	ldr	r6, [sp, #28]
 800cca4:	ea43 0102 	orr.w	r1, r3, r2
 800cca8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccaa:	4319      	orrs	r1, r3
 800ccac:	d110      	bne.n	800ccd0 <_dtoa_r+0xa20>
 800ccae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ccb2:	d029      	beq.n	800cd08 <_dtoa_r+0xa58>
 800ccb4:	9b08      	ldr	r3, [sp, #32]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	dd02      	ble.n	800ccc0 <_dtoa_r+0xa10>
 800ccba:	9b02      	ldr	r3, [sp, #8]
 800ccbc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ccc0:	9b00      	ldr	r3, [sp, #0]
 800ccc2:	f883 8000 	strb.w	r8, [r3]
 800ccc6:	e63f      	b.n	800c948 <_dtoa_r+0x698>
 800ccc8:	4628      	mov	r0, r5
 800ccca:	e7bb      	b.n	800cc44 <_dtoa_r+0x994>
 800cccc:	2201      	movs	r2, #1
 800ccce:	e7e1      	b.n	800cc94 <_dtoa_r+0x9e4>
 800ccd0:	9b08      	ldr	r3, [sp, #32]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	db04      	blt.n	800cce0 <_dtoa_r+0xa30>
 800ccd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ccd8:	430b      	orrs	r3, r1
 800ccda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ccdc:	430b      	orrs	r3, r1
 800ccde:	d120      	bne.n	800cd22 <_dtoa_r+0xa72>
 800cce0:	2a00      	cmp	r2, #0
 800cce2:	dded      	ble.n	800ccc0 <_dtoa_r+0xa10>
 800cce4:	4649      	mov	r1, r9
 800cce6:	2201      	movs	r2, #1
 800cce8:	4658      	mov	r0, fp
 800ccea:	f000 ff49 	bl	800db80 <__lshift>
 800ccee:	4621      	mov	r1, r4
 800ccf0:	4681      	mov	r9, r0
 800ccf2:	f000 ffb1 	bl	800dc58 <__mcmp>
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	dc03      	bgt.n	800cd02 <_dtoa_r+0xa52>
 800ccfa:	d1e1      	bne.n	800ccc0 <_dtoa_r+0xa10>
 800ccfc:	f018 0f01 	tst.w	r8, #1
 800cd00:	d0de      	beq.n	800ccc0 <_dtoa_r+0xa10>
 800cd02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cd06:	d1d8      	bne.n	800ccba <_dtoa_r+0xa0a>
 800cd08:	9a00      	ldr	r2, [sp, #0]
 800cd0a:	2339      	movs	r3, #57	@ 0x39
 800cd0c:	7013      	strb	r3, [r2, #0]
 800cd0e:	4633      	mov	r3, r6
 800cd10:	461e      	mov	r6, r3
 800cd12:	3b01      	subs	r3, #1
 800cd14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cd18:	2a39      	cmp	r2, #57	@ 0x39
 800cd1a:	d052      	beq.n	800cdc2 <_dtoa_r+0xb12>
 800cd1c:	3201      	adds	r2, #1
 800cd1e:	701a      	strb	r2, [r3, #0]
 800cd20:	e612      	b.n	800c948 <_dtoa_r+0x698>
 800cd22:	2a00      	cmp	r2, #0
 800cd24:	dd07      	ble.n	800cd36 <_dtoa_r+0xa86>
 800cd26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cd2a:	d0ed      	beq.n	800cd08 <_dtoa_r+0xa58>
 800cd2c:	9a00      	ldr	r2, [sp, #0]
 800cd2e:	f108 0301 	add.w	r3, r8, #1
 800cd32:	7013      	strb	r3, [r2, #0]
 800cd34:	e608      	b.n	800c948 <_dtoa_r+0x698>
 800cd36:	9b07      	ldr	r3, [sp, #28]
 800cd38:	9a07      	ldr	r2, [sp, #28]
 800cd3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cd3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd40:	4293      	cmp	r3, r2
 800cd42:	d028      	beq.n	800cd96 <_dtoa_r+0xae6>
 800cd44:	4649      	mov	r1, r9
 800cd46:	2300      	movs	r3, #0
 800cd48:	220a      	movs	r2, #10
 800cd4a:	4658      	mov	r0, fp
 800cd4c:	f000 fd22 	bl	800d794 <__multadd>
 800cd50:	42af      	cmp	r7, r5
 800cd52:	4681      	mov	r9, r0
 800cd54:	f04f 0300 	mov.w	r3, #0
 800cd58:	f04f 020a 	mov.w	r2, #10
 800cd5c:	4639      	mov	r1, r7
 800cd5e:	4658      	mov	r0, fp
 800cd60:	d107      	bne.n	800cd72 <_dtoa_r+0xac2>
 800cd62:	f000 fd17 	bl	800d794 <__multadd>
 800cd66:	4607      	mov	r7, r0
 800cd68:	4605      	mov	r5, r0
 800cd6a:	9b07      	ldr	r3, [sp, #28]
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	9307      	str	r3, [sp, #28]
 800cd70:	e774      	b.n	800cc5c <_dtoa_r+0x9ac>
 800cd72:	f000 fd0f 	bl	800d794 <__multadd>
 800cd76:	4629      	mov	r1, r5
 800cd78:	4607      	mov	r7, r0
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	220a      	movs	r2, #10
 800cd7e:	4658      	mov	r0, fp
 800cd80:	f000 fd08 	bl	800d794 <__multadd>
 800cd84:	4605      	mov	r5, r0
 800cd86:	e7f0      	b.n	800cd6a <_dtoa_r+0xaba>
 800cd88:	9b00      	ldr	r3, [sp, #0]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	bfcc      	ite	gt
 800cd8e:	461e      	movgt	r6, r3
 800cd90:	2601      	movle	r6, #1
 800cd92:	4456      	add	r6, sl
 800cd94:	2700      	movs	r7, #0
 800cd96:	4649      	mov	r1, r9
 800cd98:	2201      	movs	r2, #1
 800cd9a:	4658      	mov	r0, fp
 800cd9c:	f000 fef0 	bl	800db80 <__lshift>
 800cda0:	4621      	mov	r1, r4
 800cda2:	4681      	mov	r9, r0
 800cda4:	f000 ff58 	bl	800dc58 <__mcmp>
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	dcb0      	bgt.n	800cd0e <_dtoa_r+0xa5e>
 800cdac:	d102      	bne.n	800cdb4 <_dtoa_r+0xb04>
 800cdae:	f018 0f01 	tst.w	r8, #1
 800cdb2:	d1ac      	bne.n	800cd0e <_dtoa_r+0xa5e>
 800cdb4:	4633      	mov	r3, r6
 800cdb6:	461e      	mov	r6, r3
 800cdb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cdbc:	2a30      	cmp	r2, #48	@ 0x30
 800cdbe:	d0fa      	beq.n	800cdb6 <_dtoa_r+0xb06>
 800cdc0:	e5c2      	b.n	800c948 <_dtoa_r+0x698>
 800cdc2:	459a      	cmp	sl, r3
 800cdc4:	d1a4      	bne.n	800cd10 <_dtoa_r+0xa60>
 800cdc6:	9b04      	ldr	r3, [sp, #16]
 800cdc8:	3301      	adds	r3, #1
 800cdca:	9304      	str	r3, [sp, #16]
 800cdcc:	2331      	movs	r3, #49	@ 0x31
 800cdce:	f88a 3000 	strb.w	r3, [sl]
 800cdd2:	e5b9      	b.n	800c948 <_dtoa_r+0x698>
 800cdd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cdd6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ce34 <_dtoa_r+0xb84>
 800cdda:	b11b      	cbz	r3, 800cde4 <_dtoa_r+0xb34>
 800cddc:	f10a 0308 	add.w	r3, sl, #8
 800cde0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cde2:	6013      	str	r3, [r2, #0]
 800cde4:	4650      	mov	r0, sl
 800cde6:	b019      	add	sp, #100	@ 0x64
 800cde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdee:	2b01      	cmp	r3, #1
 800cdf0:	f77f ae37 	ble.w	800ca62 <_dtoa_r+0x7b2>
 800cdf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cdf8:	2001      	movs	r0, #1
 800cdfa:	e655      	b.n	800caa8 <_dtoa_r+0x7f8>
 800cdfc:	9b00      	ldr	r3, [sp, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	f77f aed6 	ble.w	800cbb0 <_dtoa_r+0x900>
 800ce04:	4656      	mov	r6, sl
 800ce06:	4621      	mov	r1, r4
 800ce08:	4648      	mov	r0, r9
 800ce0a:	f7ff f9c9 	bl	800c1a0 <quorem>
 800ce0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ce12:	f806 8b01 	strb.w	r8, [r6], #1
 800ce16:	9b00      	ldr	r3, [sp, #0]
 800ce18:	eba6 020a 	sub.w	r2, r6, sl
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	ddb3      	ble.n	800cd88 <_dtoa_r+0xad8>
 800ce20:	4649      	mov	r1, r9
 800ce22:	2300      	movs	r3, #0
 800ce24:	220a      	movs	r2, #10
 800ce26:	4658      	mov	r0, fp
 800ce28:	f000 fcb4 	bl	800d794 <__multadd>
 800ce2c:	4681      	mov	r9, r0
 800ce2e:	e7ea      	b.n	800ce06 <_dtoa_r+0xb56>
 800ce30:	0800ee4c 	.word	0x0800ee4c
 800ce34:	0800ede7 	.word	0x0800ede7

0800ce38 <_free_r>:
 800ce38:	b538      	push	{r3, r4, r5, lr}
 800ce3a:	4605      	mov	r5, r0
 800ce3c:	2900      	cmp	r1, #0
 800ce3e:	d041      	beq.n	800cec4 <_free_r+0x8c>
 800ce40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce44:	1f0c      	subs	r4, r1, #4
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	bfb8      	it	lt
 800ce4a:	18e4      	addlt	r4, r4, r3
 800ce4c:	f000 fc34 	bl	800d6b8 <__malloc_lock>
 800ce50:	4a1d      	ldr	r2, [pc, #116]	@ (800cec8 <_free_r+0x90>)
 800ce52:	6813      	ldr	r3, [r2, #0]
 800ce54:	b933      	cbnz	r3, 800ce64 <_free_r+0x2c>
 800ce56:	6063      	str	r3, [r4, #4]
 800ce58:	6014      	str	r4, [r2, #0]
 800ce5a:	4628      	mov	r0, r5
 800ce5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce60:	f000 bc30 	b.w	800d6c4 <__malloc_unlock>
 800ce64:	42a3      	cmp	r3, r4
 800ce66:	d908      	bls.n	800ce7a <_free_r+0x42>
 800ce68:	6820      	ldr	r0, [r4, #0]
 800ce6a:	1821      	adds	r1, r4, r0
 800ce6c:	428b      	cmp	r3, r1
 800ce6e:	bf01      	itttt	eq
 800ce70:	6819      	ldreq	r1, [r3, #0]
 800ce72:	685b      	ldreq	r3, [r3, #4]
 800ce74:	1809      	addeq	r1, r1, r0
 800ce76:	6021      	streq	r1, [r4, #0]
 800ce78:	e7ed      	b.n	800ce56 <_free_r+0x1e>
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	685b      	ldr	r3, [r3, #4]
 800ce7e:	b10b      	cbz	r3, 800ce84 <_free_r+0x4c>
 800ce80:	42a3      	cmp	r3, r4
 800ce82:	d9fa      	bls.n	800ce7a <_free_r+0x42>
 800ce84:	6811      	ldr	r1, [r2, #0]
 800ce86:	1850      	adds	r0, r2, r1
 800ce88:	42a0      	cmp	r0, r4
 800ce8a:	d10b      	bne.n	800cea4 <_free_r+0x6c>
 800ce8c:	6820      	ldr	r0, [r4, #0]
 800ce8e:	4401      	add	r1, r0
 800ce90:	1850      	adds	r0, r2, r1
 800ce92:	4283      	cmp	r3, r0
 800ce94:	6011      	str	r1, [r2, #0]
 800ce96:	d1e0      	bne.n	800ce5a <_free_r+0x22>
 800ce98:	6818      	ldr	r0, [r3, #0]
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	6053      	str	r3, [r2, #4]
 800ce9e:	4408      	add	r0, r1
 800cea0:	6010      	str	r0, [r2, #0]
 800cea2:	e7da      	b.n	800ce5a <_free_r+0x22>
 800cea4:	d902      	bls.n	800ceac <_free_r+0x74>
 800cea6:	230c      	movs	r3, #12
 800cea8:	602b      	str	r3, [r5, #0]
 800ceaa:	e7d6      	b.n	800ce5a <_free_r+0x22>
 800ceac:	6820      	ldr	r0, [r4, #0]
 800ceae:	1821      	adds	r1, r4, r0
 800ceb0:	428b      	cmp	r3, r1
 800ceb2:	bf04      	itt	eq
 800ceb4:	6819      	ldreq	r1, [r3, #0]
 800ceb6:	685b      	ldreq	r3, [r3, #4]
 800ceb8:	6063      	str	r3, [r4, #4]
 800ceba:	bf04      	itt	eq
 800cebc:	1809      	addeq	r1, r1, r0
 800cebe:	6021      	streq	r1, [r4, #0]
 800cec0:	6054      	str	r4, [r2, #4]
 800cec2:	e7ca      	b.n	800ce5a <_free_r+0x22>
 800cec4:	bd38      	pop	{r3, r4, r5, pc}
 800cec6:	bf00      	nop
 800cec8:	20000970 	.word	0x20000970

0800cecc <rshift>:
 800cecc:	6903      	ldr	r3, [r0, #16]
 800cece:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ced2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ced6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ceda:	f100 0414 	add.w	r4, r0, #20
 800cede:	dd45      	ble.n	800cf6c <rshift+0xa0>
 800cee0:	f011 011f 	ands.w	r1, r1, #31
 800cee4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cee8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ceec:	d10c      	bne.n	800cf08 <rshift+0x3c>
 800ceee:	f100 0710 	add.w	r7, r0, #16
 800cef2:	4629      	mov	r1, r5
 800cef4:	42b1      	cmp	r1, r6
 800cef6:	d334      	bcc.n	800cf62 <rshift+0x96>
 800cef8:	1a9b      	subs	r3, r3, r2
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	1eea      	subs	r2, r5, #3
 800cefe:	4296      	cmp	r6, r2
 800cf00:	bf38      	it	cc
 800cf02:	2300      	movcc	r3, #0
 800cf04:	4423      	add	r3, r4
 800cf06:	e015      	b.n	800cf34 <rshift+0x68>
 800cf08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cf0c:	f1c1 0820 	rsb	r8, r1, #32
 800cf10:	40cf      	lsrs	r7, r1
 800cf12:	f105 0e04 	add.w	lr, r5, #4
 800cf16:	46a1      	mov	r9, r4
 800cf18:	4576      	cmp	r6, lr
 800cf1a:	46f4      	mov	ip, lr
 800cf1c:	d815      	bhi.n	800cf4a <rshift+0x7e>
 800cf1e:	1a9a      	subs	r2, r3, r2
 800cf20:	0092      	lsls	r2, r2, #2
 800cf22:	3a04      	subs	r2, #4
 800cf24:	3501      	adds	r5, #1
 800cf26:	42ae      	cmp	r6, r5
 800cf28:	bf38      	it	cc
 800cf2a:	2200      	movcc	r2, #0
 800cf2c:	18a3      	adds	r3, r4, r2
 800cf2e:	50a7      	str	r7, [r4, r2]
 800cf30:	b107      	cbz	r7, 800cf34 <rshift+0x68>
 800cf32:	3304      	adds	r3, #4
 800cf34:	1b1a      	subs	r2, r3, r4
 800cf36:	42a3      	cmp	r3, r4
 800cf38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cf3c:	bf08      	it	eq
 800cf3e:	2300      	moveq	r3, #0
 800cf40:	6102      	str	r2, [r0, #16]
 800cf42:	bf08      	it	eq
 800cf44:	6143      	streq	r3, [r0, #20]
 800cf46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf4a:	f8dc c000 	ldr.w	ip, [ip]
 800cf4e:	fa0c fc08 	lsl.w	ip, ip, r8
 800cf52:	ea4c 0707 	orr.w	r7, ip, r7
 800cf56:	f849 7b04 	str.w	r7, [r9], #4
 800cf5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cf5e:	40cf      	lsrs	r7, r1
 800cf60:	e7da      	b.n	800cf18 <rshift+0x4c>
 800cf62:	f851 cb04 	ldr.w	ip, [r1], #4
 800cf66:	f847 cf04 	str.w	ip, [r7, #4]!
 800cf6a:	e7c3      	b.n	800cef4 <rshift+0x28>
 800cf6c:	4623      	mov	r3, r4
 800cf6e:	e7e1      	b.n	800cf34 <rshift+0x68>

0800cf70 <__hexdig_fun>:
 800cf70:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cf74:	2b09      	cmp	r3, #9
 800cf76:	d802      	bhi.n	800cf7e <__hexdig_fun+0xe>
 800cf78:	3820      	subs	r0, #32
 800cf7a:	b2c0      	uxtb	r0, r0
 800cf7c:	4770      	bx	lr
 800cf7e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cf82:	2b05      	cmp	r3, #5
 800cf84:	d801      	bhi.n	800cf8a <__hexdig_fun+0x1a>
 800cf86:	3847      	subs	r0, #71	@ 0x47
 800cf88:	e7f7      	b.n	800cf7a <__hexdig_fun+0xa>
 800cf8a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cf8e:	2b05      	cmp	r3, #5
 800cf90:	d801      	bhi.n	800cf96 <__hexdig_fun+0x26>
 800cf92:	3827      	subs	r0, #39	@ 0x27
 800cf94:	e7f1      	b.n	800cf7a <__hexdig_fun+0xa>
 800cf96:	2000      	movs	r0, #0
 800cf98:	4770      	bx	lr
	...

0800cf9c <__gethex>:
 800cf9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa0:	b085      	sub	sp, #20
 800cfa2:	468a      	mov	sl, r1
 800cfa4:	9302      	str	r3, [sp, #8]
 800cfa6:	680b      	ldr	r3, [r1, #0]
 800cfa8:	9001      	str	r0, [sp, #4]
 800cfaa:	4690      	mov	r8, r2
 800cfac:	1c9c      	adds	r4, r3, #2
 800cfae:	46a1      	mov	r9, r4
 800cfb0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cfb4:	2830      	cmp	r0, #48	@ 0x30
 800cfb6:	d0fa      	beq.n	800cfae <__gethex+0x12>
 800cfb8:	eba9 0303 	sub.w	r3, r9, r3
 800cfbc:	f1a3 0b02 	sub.w	fp, r3, #2
 800cfc0:	f7ff ffd6 	bl	800cf70 <__hexdig_fun>
 800cfc4:	4605      	mov	r5, r0
 800cfc6:	2800      	cmp	r0, #0
 800cfc8:	d168      	bne.n	800d09c <__gethex+0x100>
 800cfca:	49a0      	ldr	r1, [pc, #640]	@ (800d24c <__gethex+0x2b0>)
 800cfcc:	2201      	movs	r2, #1
 800cfce:	4648      	mov	r0, r9
 800cfd0:	f7fe ffc5 	bl	800bf5e <strncmp>
 800cfd4:	4607      	mov	r7, r0
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	d167      	bne.n	800d0aa <__gethex+0x10e>
 800cfda:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cfde:	4626      	mov	r6, r4
 800cfe0:	f7ff ffc6 	bl	800cf70 <__hexdig_fun>
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	d062      	beq.n	800d0ae <__gethex+0x112>
 800cfe8:	4623      	mov	r3, r4
 800cfea:	7818      	ldrb	r0, [r3, #0]
 800cfec:	2830      	cmp	r0, #48	@ 0x30
 800cfee:	4699      	mov	r9, r3
 800cff0:	f103 0301 	add.w	r3, r3, #1
 800cff4:	d0f9      	beq.n	800cfea <__gethex+0x4e>
 800cff6:	f7ff ffbb 	bl	800cf70 <__hexdig_fun>
 800cffa:	fab0 f580 	clz	r5, r0
 800cffe:	096d      	lsrs	r5, r5, #5
 800d000:	f04f 0b01 	mov.w	fp, #1
 800d004:	464a      	mov	r2, r9
 800d006:	4616      	mov	r6, r2
 800d008:	3201      	adds	r2, #1
 800d00a:	7830      	ldrb	r0, [r6, #0]
 800d00c:	f7ff ffb0 	bl	800cf70 <__hexdig_fun>
 800d010:	2800      	cmp	r0, #0
 800d012:	d1f8      	bne.n	800d006 <__gethex+0x6a>
 800d014:	498d      	ldr	r1, [pc, #564]	@ (800d24c <__gethex+0x2b0>)
 800d016:	2201      	movs	r2, #1
 800d018:	4630      	mov	r0, r6
 800d01a:	f7fe ffa0 	bl	800bf5e <strncmp>
 800d01e:	2800      	cmp	r0, #0
 800d020:	d13f      	bne.n	800d0a2 <__gethex+0x106>
 800d022:	b944      	cbnz	r4, 800d036 <__gethex+0x9a>
 800d024:	1c74      	adds	r4, r6, #1
 800d026:	4622      	mov	r2, r4
 800d028:	4616      	mov	r6, r2
 800d02a:	3201      	adds	r2, #1
 800d02c:	7830      	ldrb	r0, [r6, #0]
 800d02e:	f7ff ff9f 	bl	800cf70 <__hexdig_fun>
 800d032:	2800      	cmp	r0, #0
 800d034:	d1f8      	bne.n	800d028 <__gethex+0x8c>
 800d036:	1ba4      	subs	r4, r4, r6
 800d038:	00a7      	lsls	r7, r4, #2
 800d03a:	7833      	ldrb	r3, [r6, #0]
 800d03c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d040:	2b50      	cmp	r3, #80	@ 0x50
 800d042:	d13e      	bne.n	800d0c2 <__gethex+0x126>
 800d044:	7873      	ldrb	r3, [r6, #1]
 800d046:	2b2b      	cmp	r3, #43	@ 0x2b
 800d048:	d033      	beq.n	800d0b2 <__gethex+0x116>
 800d04a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d04c:	d034      	beq.n	800d0b8 <__gethex+0x11c>
 800d04e:	1c71      	adds	r1, r6, #1
 800d050:	2400      	movs	r4, #0
 800d052:	7808      	ldrb	r0, [r1, #0]
 800d054:	f7ff ff8c 	bl	800cf70 <__hexdig_fun>
 800d058:	1e43      	subs	r3, r0, #1
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	2b18      	cmp	r3, #24
 800d05e:	d830      	bhi.n	800d0c2 <__gethex+0x126>
 800d060:	f1a0 0210 	sub.w	r2, r0, #16
 800d064:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d068:	f7ff ff82 	bl	800cf70 <__hexdig_fun>
 800d06c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800d070:	fa5f fc8c 	uxtb.w	ip, ip
 800d074:	f1bc 0f18 	cmp.w	ip, #24
 800d078:	f04f 030a 	mov.w	r3, #10
 800d07c:	d91e      	bls.n	800d0bc <__gethex+0x120>
 800d07e:	b104      	cbz	r4, 800d082 <__gethex+0xe6>
 800d080:	4252      	negs	r2, r2
 800d082:	4417      	add	r7, r2
 800d084:	f8ca 1000 	str.w	r1, [sl]
 800d088:	b1ed      	cbz	r5, 800d0c6 <__gethex+0x12a>
 800d08a:	f1bb 0f00 	cmp.w	fp, #0
 800d08e:	bf0c      	ite	eq
 800d090:	2506      	moveq	r5, #6
 800d092:	2500      	movne	r5, #0
 800d094:	4628      	mov	r0, r5
 800d096:	b005      	add	sp, #20
 800d098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d09c:	2500      	movs	r5, #0
 800d09e:	462c      	mov	r4, r5
 800d0a0:	e7b0      	b.n	800d004 <__gethex+0x68>
 800d0a2:	2c00      	cmp	r4, #0
 800d0a4:	d1c7      	bne.n	800d036 <__gethex+0x9a>
 800d0a6:	4627      	mov	r7, r4
 800d0a8:	e7c7      	b.n	800d03a <__gethex+0x9e>
 800d0aa:	464e      	mov	r6, r9
 800d0ac:	462f      	mov	r7, r5
 800d0ae:	2501      	movs	r5, #1
 800d0b0:	e7c3      	b.n	800d03a <__gethex+0x9e>
 800d0b2:	2400      	movs	r4, #0
 800d0b4:	1cb1      	adds	r1, r6, #2
 800d0b6:	e7cc      	b.n	800d052 <__gethex+0xb6>
 800d0b8:	2401      	movs	r4, #1
 800d0ba:	e7fb      	b.n	800d0b4 <__gethex+0x118>
 800d0bc:	fb03 0002 	mla	r0, r3, r2, r0
 800d0c0:	e7ce      	b.n	800d060 <__gethex+0xc4>
 800d0c2:	4631      	mov	r1, r6
 800d0c4:	e7de      	b.n	800d084 <__gethex+0xe8>
 800d0c6:	eba6 0309 	sub.w	r3, r6, r9
 800d0ca:	3b01      	subs	r3, #1
 800d0cc:	4629      	mov	r1, r5
 800d0ce:	2b07      	cmp	r3, #7
 800d0d0:	dc0a      	bgt.n	800d0e8 <__gethex+0x14c>
 800d0d2:	9801      	ldr	r0, [sp, #4]
 800d0d4:	f000 fafc 	bl	800d6d0 <_Balloc>
 800d0d8:	4604      	mov	r4, r0
 800d0da:	b940      	cbnz	r0, 800d0ee <__gethex+0x152>
 800d0dc:	4b5c      	ldr	r3, [pc, #368]	@ (800d250 <__gethex+0x2b4>)
 800d0de:	4602      	mov	r2, r0
 800d0e0:	21e4      	movs	r1, #228	@ 0xe4
 800d0e2:	485c      	ldr	r0, [pc, #368]	@ (800d254 <__gethex+0x2b8>)
 800d0e4:	f7ff f83e 	bl	800c164 <__assert_func>
 800d0e8:	3101      	adds	r1, #1
 800d0ea:	105b      	asrs	r3, r3, #1
 800d0ec:	e7ef      	b.n	800d0ce <__gethex+0x132>
 800d0ee:	f100 0a14 	add.w	sl, r0, #20
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	4655      	mov	r5, sl
 800d0f6:	469b      	mov	fp, r3
 800d0f8:	45b1      	cmp	r9, r6
 800d0fa:	d337      	bcc.n	800d16c <__gethex+0x1d0>
 800d0fc:	f845 bb04 	str.w	fp, [r5], #4
 800d100:	eba5 050a 	sub.w	r5, r5, sl
 800d104:	10ad      	asrs	r5, r5, #2
 800d106:	6125      	str	r5, [r4, #16]
 800d108:	4658      	mov	r0, fp
 800d10a:	f000 fbd3 	bl	800d8b4 <__hi0bits>
 800d10e:	016d      	lsls	r5, r5, #5
 800d110:	f8d8 6000 	ldr.w	r6, [r8]
 800d114:	1a2d      	subs	r5, r5, r0
 800d116:	42b5      	cmp	r5, r6
 800d118:	dd54      	ble.n	800d1c4 <__gethex+0x228>
 800d11a:	1bad      	subs	r5, r5, r6
 800d11c:	4629      	mov	r1, r5
 800d11e:	4620      	mov	r0, r4
 800d120:	f000 ff67 	bl	800dff2 <__any_on>
 800d124:	4681      	mov	r9, r0
 800d126:	b178      	cbz	r0, 800d148 <__gethex+0x1ac>
 800d128:	1e6b      	subs	r3, r5, #1
 800d12a:	1159      	asrs	r1, r3, #5
 800d12c:	f003 021f 	and.w	r2, r3, #31
 800d130:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d134:	f04f 0901 	mov.w	r9, #1
 800d138:	fa09 f202 	lsl.w	r2, r9, r2
 800d13c:	420a      	tst	r2, r1
 800d13e:	d003      	beq.n	800d148 <__gethex+0x1ac>
 800d140:	454b      	cmp	r3, r9
 800d142:	dc36      	bgt.n	800d1b2 <__gethex+0x216>
 800d144:	f04f 0902 	mov.w	r9, #2
 800d148:	4629      	mov	r1, r5
 800d14a:	4620      	mov	r0, r4
 800d14c:	f7ff febe 	bl	800cecc <rshift>
 800d150:	442f      	add	r7, r5
 800d152:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d156:	42bb      	cmp	r3, r7
 800d158:	da42      	bge.n	800d1e0 <__gethex+0x244>
 800d15a:	9801      	ldr	r0, [sp, #4]
 800d15c:	4621      	mov	r1, r4
 800d15e:	f000 faf7 	bl	800d750 <_Bfree>
 800d162:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d164:	2300      	movs	r3, #0
 800d166:	6013      	str	r3, [r2, #0]
 800d168:	25a3      	movs	r5, #163	@ 0xa3
 800d16a:	e793      	b.n	800d094 <__gethex+0xf8>
 800d16c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d170:	2a2e      	cmp	r2, #46	@ 0x2e
 800d172:	d012      	beq.n	800d19a <__gethex+0x1fe>
 800d174:	2b20      	cmp	r3, #32
 800d176:	d104      	bne.n	800d182 <__gethex+0x1e6>
 800d178:	f845 bb04 	str.w	fp, [r5], #4
 800d17c:	f04f 0b00 	mov.w	fp, #0
 800d180:	465b      	mov	r3, fp
 800d182:	7830      	ldrb	r0, [r6, #0]
 800d184:	9303      	str	r3, [sp, #12]
 800d186:	f7ff fef3 	bl	800cf70 <__hexdig_fun>
 800d18a:	9b03      	ldr	r3, [sp, #12]
 800d18c:	f000 000f 	and.w	r0, r0, #15
 800d190:	4098      	lsls	r0, r3
 800d192:	ea4b 0b00 	orr.w	fp, fp, r0
 800d196:	3304      	adds	r3, #4
 800d198:	e7ae      	b.n	800d0f8 <__gethex+0x15c>
 800d19a:	45b1      	cmp	r9, r6
 800d19c:	d8ea      	bhi.n	800d174 <__gethex+0x1d8>
 800d19e:	492b      	ldr	r1, [pc, #172]	@ (800d24c <__gethex+0x2b0>)
 800d1a0:	9303      	str	r3, [sp, #12]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	4630      	mov	r0, r6
 800d1a6:	f7fe feda 	bl	800bf5e <strncmp>
 800d1aa:	9b03      	ldr	r3, [sp, #12]
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	d1e1      	bne.n	800d174 <__gethex+0x1d8>
 800d1b0:	e7a2      	b.n	800d0f8 <__gethex+0x15c>
 800d1b2:	1ea9      	subs	r1, r5, #2
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	f000 ff1c 	bl	800dff2 <__any_on>
 800d1ba:	2800      	cmp	r0, #0
 800d1bc:	d0c2      	beq.n	800d144 <__gethex+0x1a8>
 800d1be:	f04f 0903 	mov.w	r9, #3
 800d1c2:	e7c1      	b.n	800d148 <__gethex+0x1ac>
 800d1c4:	da09      	bge.n	800d1da <__gethex+0x23e>
 800d1c6:	1b75      	subs	r5, r6, r5
 800d1c8:	4621      	mov	r1, r4
 800d1ca:	9801      	ldr	r0, [sp, #4]
 800d1cc:	462a      	mov	r2, r5
 800d1ce:	f000 fcd7 	bl	800db80 <__lshift>
 800d1d2:	1b7f      	subs	r7, r7, r5
 800d1d4:	4604      	mov	r4, r0
 800d1d6:	f100 0a14 	add.w	sl, r0, #20
 800d1da:	f04f 0900 	mov.w	r9, #0
 800d1de:	e7b8      	b.n	800d152 <__gethex+0x1b6>
 800d1e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d1e4:	42bd      	cmp	r5, r7
 800d1e6:	dd6f      	ble.n	800d2c8 <__gethex+0x32c>
 800d1e8:	1bed      	subs	r5, r5, r7
 800d1ea:	42ae      	cmp	r6, r5
 800d1ec:	dc34      	bgt.n	800d258 <__gethex+0x2bc>
 800d1ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d1f2:	2b02      	cmp	r3, #2
 800d1f4:	d022      	beq.n	800d23c <__gethex+0x2a0>
 800d1f6:	2b03      	cmp	r3, #3
 800d1f8:	d024      	beq.n	800d244 <__gethex+0x2a8>
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	d115      	bne.n	800d22a <__gethex+0x28e>
 800d1fe:	42ae      	cmp	r6, r5
 800d200:	d113      	bne.n	800d22a <__gethex+0x28e>
 800d202:	2e01      	cmp	r6, #1
 800d204:	d10b      	bne.n	800d21e <__gethex+0x282>
 800d206:	9a02      	ldr	r2, [sp, #8]
 800d208:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d20c:	6013      	str	r3, [r2, #0]
 800d20e:	2301      	movs	r3, #1
 800d210:	6123      	str	r3, [r4, #16]
 800d212:	f8ca 3000 	str.w	r3, [sl]
 800d216:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d218:	2562      	movs	r5, #98	@ 0x62
 800d21a:	601c      	str	r4, [r3, #0]
 800d21c:	e73a      	b.n	800d094 <__gethex+0xf8>
 800d21e:	1e71      	subs	r1, r6, #1
 800d220:	4620      	mov	r0, r4
 800d222:	f000 fee6 	bl	800dff2 <__any_on>
 800d226:	2800      	cmp	r0, #0
 800d228:	d1ed      	bne.n	800d206 <__gethex+0x26a>
 800d22a:	9801      	ldr	r0, [sp, #4]
 800d22c:	4621      	mov	r1, r4
 800d22e:	f000 fa8f 	bl	800d750 <_Bfree>
 800d232:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d234:	2300      	movs	r3, #0
 800d236:	6013      	str	r3, [r2, #0]
 800d238:	2550      	movs	r5, #80	@ 0x50
 800d23a:	e72b      	b.n	800d094 <__gethex+0xf8>
 800d23c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d1f3      	bne.n	800d22a <__gethex+0x28e>
 800d242:	e7e0      	b.n	800d206 <__gethex+0x26a>
 800d244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d246:	2b00      	cmp	r3, #0
 800d248:	d1dd      	bne.n	800d206 <__gethex+0x26a>
 800d24a:	e7ee      	b.n	800d22a <__gethex+0x28e>
 800d24c:	0800eba4 	.word	0x0800eba4
 800d250:	0800ee4c 	.word	0x0800ee4c
 800d254:	0800ee5d 	.word	0x0800ee5d
 800d258:	1e6f      	subs	r7, r5, #1
 800d25a:	f1b9 0f00 	cmp.w	r9, #0
 800d25e:	d130      	bne.n	800d2c2 <__gethex+0x326>
 800d260:	b127      	cbz	r7, 800d26c <__gethex+0x2d0>
 800d262:	4639      	mov	r1, r7
 800d264:	4620      	mov	r0, r4
 800d266:	f000 fec4 	bl	800dff2 <__any_on>
 800d26a:	4681      	mov	r9, r0
 800d26c:	117a      	asrs	r2, r7, #5
 800d26e:	2301      	movs	r3, #1
 800d270:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d274:	f007 071f 	and.w	r7, r7, #31
 800d278:	40bb      	lsls	r3, r7
 800d27a:	4213      	tst	r3, r2
 800d27c:	4629      	mov	r1, r5
 800d27e:	4620      	mov	r0, r4
 800d280:	bf18      	it	ne
 800d282:	f049 0902 	orrne.w	r9, r9, #2
 800d286:	f7ff fe21 	bl	800cecc <rshift>
 800d28a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d28e:	1b76      	subs	r6, r6, r5
 800d290:	2502      	movs	r5, #2
 800d292:	f1b9 0f00 	cmp.w	r9, #0
 800d296:	d047      	beq.n	800d328 <__gethex+0x38c>
 800d298:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d29c:	2b02      	cmp	r3, #2
 800d29e:	d015      	beq.n	800d2cc <__gethex+0x330>
 800d2a0:	2b03      	cmp	r3, #3
 800d2a2:	d017      	beq.n	800d2d4 <__gethex+0x338>
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d109      	bne.n	800d2bc <__gethex+0x320>
 800d2a8:	f019 0f02 	tst.w	r9, #2
 800d2ac:	d006      	beq.n	800d2bc <__gethex+0x320>
 800d2ae:	f8da 3000 	ldr.w	r3, [sl]
 800d2b2:	ea49 0903 	orr.w	r9, r9, r3
 800d2b6:	f019 0f01 	tst.w	r9, #1
 800d2ba:	d10e      	bne.n	800d2da <__gethex+0x33e>
 800d2bc:	f045 0510 	orr.w	r5, r5, #16
 800d2c0:	e032      	b.n	800d328 <__gethex+0x38c>
 800d2c2:	f04f 0901 	mov.w	r9, #1
 800d2c6:	e7d1      	b.n	800d26c <__gethex+0x2d0>
 800d2c8:	2501      	movs	r5, #1
 800d2ca:	e7e2      	b.n	800d292 <__gethex+0x2f6>
 800d2cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2ce:	f1c3 0301 	rsb	r3, r3, #1
 800d2d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d2d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d0f0      	beq.n	800d2bc <__gethex+0x320>
 800d2da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d2de:	f104 0314 	add.w	r3, r4, #20
 800d2e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d2e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d2ea:	f04f 0c00 	mov.w	ip, #0
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2f4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800d2f8:	d01b      	beq.n	800d332 <__gethex+0x396>
 800d2fa:	3201      	adds	r2, #1
 800d2fc:	6002      	str	r2, [r0, #0]
 800d2fe:	2d02      	cmp	r5, #2
 800d300:	f104 0314 	add.w	r3, r4, #20
 800d304:	d13c      	bne.n	800d380 <__gethex+0x3e4>
 800d306:	f8d8 2000 	ldr.w	r2, [r8]
 800d30a:	3a01      	subs	r2, #1
 800d30c:	42b2      	cmp	r2, r6
 800d30e:	d109      	bne.n	800d324 <__gethex+0x388>
 800d310:	1171      	asrs	r1, r6, #5
 800d312:	2201      	movs	r2, #1
 800d314:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d318:	f006 061f 	and.w	r6, r6, #31
 800d31c:	fa02 f606 	lsl.w	r6, r2, r6
 800d320:	421e      	tst	r6, r3
 800d322:	d13a      	bne.n	800d39a <__gethex+0x3fe>
 800d324:	f045 0520 	orr.w	r5, r5, #32
 800d328:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d32a:	601c      	str	r4, [r3, #0]
 800d32c:	9b02      	ldr	r3, [sp, #8]
 800d32e:	601f      	str	r7, [r3, #0]
 800d330:	e6b0      	b.n	800d094 <__gethex+0xf8>
 800d332:	4299      	cmp	r1, r3
 800d334:	f843 cc04 	str.w	ip, [r3, #-4]
 800d338:	d8d9      	bhi.n	800d2ee <__gethex+0x352>
 800d33a:	68a3      	ldr	r3, [r4, #8]
 800d33c:	459b      	cmp	fp, r3
 800d33e:	db17      	blt.n	800d370 <__gethex+0x3d4>
 800d340:	6861      	ldr	r1, [r4, #4]
 800d342:	9801      	ldr	r0, [sp, #4]
 800d344:	3101      	adds	r1, #1
 800d346:	f000 f9c3 	bl	800d6d0 <_Balloc>
 800d34a:	4681      	mov	r9, r0
 800d34c:	b918      	cbnz	r0, 800d356 <__gethex+0x3ba>
 800d34e:	4b1a      	ldr	r3, [pc, #104]	@ (800d3b8 <__gethex+0x41c>)
 800d350:	4602      	mov	r2, r0
 800d352:	2184      	movs	r1, #132	@ 0x84
 800d354:	e6c5      	b.n	800d0e2 <__gethex+0x146>
 800d356:	6922      	ldr	r2, [r4, #16]
 800d358:	3202      	adds	r2, #2
 800d35a:	f104 010c 	add.w	r1, r4, #12
 800d35e:	0092      	lsls	r2, r2, #2
 800d360:	300c      	adds	r0, #12
 800d362:	f7fe fee2 	bl	800c12a <memcpy>
 800d366:	4621      	mov	r1, r4
 800d368:	9801      	ldr	r0, [sp, #4]
 800d36a:	f000 f9f1 	bl	800d750 <_Bfree>
 800d36e:	464c      	mov	r4, r9
 800d370:	6923      	ldr	r3, [r4, #16]
 800d372:	1c5a      	adds	r2, r3, #1
 800d374:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d378:	6122      	str	r2, [r4, #16]
 800d37a:	2201      	movs	r2, #1
 800d37c:	615a      	str	r2, [r3, #20]
 800d37e:	e7be      	b.n	800d2fe <__gethex+0x362>
 800d380:	6922      	ldr	r2, [r4, #16]
 800d382:	455a      	cmp	r2, fp
 800d384:	dd0b      	ble.n	800d39e <__gethex+0x402>
 800d386:	2101      	movs	r1, #1
 800d388:	4620      	mov	r0, r4
 800d38a:	f7ff fd9f 	bl	800cecc <rshift>
 800d38e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d392:	3701      	adds	r7, #1
 800d394:	42bb      	cmp	r3, r7
 800d396:	f6ff aee0 	blt.w	800d15a <__gethex+0x1be>
 800d39a:	2501      	movs	r5, #1
 800d39c:	e7c2      	b.n	800d324 <__gethex+0x388>
 800d39e:	f016 061f 	ands.w	r6, r6, #31
 800d3a2:	d0fa      	beq.n	800d39a <__gethex+0x3fe>
 800d3a4:	4453      	add	r3, sl
 800d3a6:	f1c6 0620 	rsb	r6, r6, #32
 800d3aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d3ae:	f000 fa81 	bl	800d8b4 <__hi0bits>
 800d3b2:	42b0      	cmp	r0, r6
 800d3b4:	dbe7      	blt.n	800d386 <__gethex+0x3ea>
 800d3b6:	e7f0      	b.n	800d39a <__gethex+0x3fe>
 800d3b8:	0800ee4c 	.word	0x0800ee4c

0800d3bc <L_shift>:
 800d3bc:	f1c2 0208 	rsb	r2, r2, #8
 800d3c0:	0092      	lsls	r2, r2, #2
 800d3c2:	b570      	push	{r4, r5, r6, lr}
 800d3c4:	f1c2 0620 	rsb	r6, r2, #32
 800d3c8:	6843      	ldr	r3, [r0, #4]
 800d3ca:	6804      	ldr	r4, [r0, #0]
 800d3cc:	fa03 f506 	lsl.w	r5, r3, r6
 800d3d0:	432c      	orrs	r4, r5
 800d3d2:	40d3      	lsrs	r3, r2
 800d3d4:	6004      	str	r4, [r0, #0]
 800d3d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800d3da:	4288      	cmp	r0, r1
 800d3dc:	d3f4      	bcc.n	800d3c8 <L_shift+0xc>
 800d3de:	bd70      	pop	{r4, r5, r6, pc}

0800d3e0 <__match>:
 800d3e0:	b530      	push	{r4, r5, lr}
 800d3e2:	6803      	ldr	r3, [r0, #0]
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3ea:	b914      	cbnz	r4, 800d3f2 <__match+0x12>
 800d3ec:	6003      	str	r3, [r0, #0]
 800d3ee:	2001      	movs	r0, #1
 800d3f0:	bd30      	pop	{r4, r5, pc}
 800d3f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d3fa:	2d19      	cmp	r5, #25
 800d3fc:	bf98      	it	ls
 800d3fe:	3220      	addls	r2, #32
 800d400:	42a2      	cmp	r2, r4
 800d402:	d0f0      	beq.n	800d3e6 <__match+0x6>
 800d404:	2000      	movs	r0, #0
 800d406:	e7f3      	b.n	800d3f0 <__match+0x10>

0800d408 <__hexnan>:
 800d408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d40c:	680b      	ldr	r3, [r1, #0]
 800d40e:	6801      	ldr	r1, [r0, #0]
 800d410:	115e      	asrs	r6, r3, #5
 800d412:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d416:	f013 031f 	ands.w	r3, r3, #31
 800d41a:	b087      	sub	sp, #28
 800d41c:	bf18      	it	ne
 800d41e:	3604      	addne	r6, #4
 800d420:	2500      	movs	r5, #0
 800d422:	1f37      	subs	r7, r6, #4
 800d424:	4682      	mov	sl, r0
 800d426:	4690      	mov	r8, r2
 800d428:	9301      	str	r3, [sp, #4]
 800d42a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d42e:	46b9      	mov	r9, r7
 800d430:	463c      	mov	r4, r7
 800d432:	9502      	str	r5, [sp, #8]
 800d434:	46ab      	mov	fp, r5
 800d436:	784a      	ldrb	r2, [r1, #1]
 800d438:	1c4b      	adds	r3, r1, #1
 800d43a:	9303      	str	r3, [sp, #12]
 800d43c:	b342      	cbz	r2, 800d490 <__hexnan+0x88>
 800d43e:	4610      	mov	r0, r2
 800d440:	9105      	str	r1, [sp, #20]
 800d442:	9204      	str	r2, [sp, #16]
 800d444:	f7ff fd94 	bl	800cf70 <__hexdig_fun>
 800d448:	2800      	cmp	r0, #0
 800d44a:	d151      	bne.n	800d4f0 <__hexnan+0xe8>
 800d44c:	9a04      	ldr	r2, [sp, #16]
 800d44e:	9905      	ldr	r1, [sp, #20]
 800d450:	2a20      	cmp	r2, #32
 800d452:	d818      	bhi.n	800d486 <__hexnan+0x7e>
 800d454:	9b02      	ldr	r3, [sp, #8]
 800d456:	459b      	cmp	fp, r3
 800d458:	dd13      	ble.n	800d482 <__hexnan+0x7a>
 800d45a:	454c      	cmp	r4, r9
 800d45c:	d206      	bcs.n	800d46c <__hexnan+0x64>
 800d45e:	2d07      	cmp	r5, #7
 800d460:	dc04      	bgt.n	800d46c <__hexnan+0x64>
 800d462:	462a      	mov	r2, r5
 800d464:	4649      	mov	r1, r9
 800d466:	4620      	mov	r0, r4
 800d468:	f7ff ffa8 	bl	800d3bc <L_shift>
 800d46c:	4544      	cmp	r4, r8
 800d46e:	d952      	bls.n	800d516 <__hexnan+0x10e>
 800d470:	2300      	movs	r3, #0
 800d472:	f1a4 0904 	sub.w	r9, r4, #4
 800d476:	f844 3c04 	str.w	r3, [r4, #-4]
 800d47a:	f8cd b008 	str.w	fp, [sp, #8]
 800d47e:	464c      	mov	r4, r9
 800d480:	461d      	mov	r5, r3
 800d482:	9903      	ldr	r1, [sp, #12]
 800d484:	e7d7      	b.n	800d436 <__hexnan+0x2e>
 800d486:	2a29      	cmp	r2, #41	@ 0x29
 800d488:	d157      	bne.n	800d53a <__hexnan+0x132>
 800d48a:	3102      	adds	r1, #2
 800d48c:	f8ca 1000 	str.w	r1, [sl]
 800d490:	f1bb 0f00 	cmp.w	fp, #0
 800d494:	d051      	beq.n	800d53a <__hexnan+0x132>
 800d496:	454c      	cmp	r4, r9
 800d498:	d206      	bcs.n	800d4a8 <__hexnan+0xa0>
 800d49a:	2d07      	cmp	r5, #7
 800d49c:	dc04      	bgt.n	800d4a8 <__hexnan+0xa0>
 800d49e:	462a      	mov	r2, r5
 800d4a0:	4649      	mov	r1, r9
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	f7ff ff8a 	bl	800d3bc <L_shift>
 800d4a8:	4544      	cmp	r4, r8
 800d4aa:	d936      	bls.n	800d51a <__hexnan+0x112>
 800d4ac:	f1a8 0204 	sub.w	r2, r8, #4
 800d4b0:	4623      	mov	r3, r4
 800d4b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800d4b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800d4ba:	429f      	cmp	r7, r3
 800d4bc:	d2f9      	bcs.n	800d4b2 <__hexnan+0xaa>
 800d4be:	1b3b      	subs	r3, r7, r4
 800d4c0:	f023 0303 	bic.w	r3, r3, #3
 800d4c4:	3304      	adds	r3, #4
 800d4c6:	3401      	adds	r4, #1
 800d4c8:	3e03      	subs	r6, #3
 800d4ca:	42b4      	cmp	r4, r6
 800d4cc:	bf88      	it	hi
 800d4ce:	2304      	movhi	r3, #4
 800d4d0:	4443      	add	r3, r8
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	f843 2b04 	str.w	r2, [r3], #4
 800d4d8:	429f      	cmp	r7, r3
 800d4da:	d2fb      	bcs.n	800d4d4 <__hexnan+0xcc>
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	b91b      	cbnz	r3, 800d4e8 <__hexnan+0xe0>
 800d4e0:	4547      	cmp	r7, r8
 800d4e2:	d128      	bne.n	800d536 <__hexnan+0x12e>
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	603b      	str	r3, [r7, #0]
 800d4e8:	2005      	movs	r0, #5
 800d4ea:	b007      	add	sp, #28
 800d4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f0:	3501      	adds	r5, #1
 800d4f2:	2d08      	cmp	r5, #8
 800d4f4:	f10b 0b01 	add.w	fp, fp, #1
 800d4f8:	dd06      	ble.n	800d508 <__hexnan+0x100>
 800d4fa:	4544      	cmp	r4, r8
 800d4fc:	d9c1      	bls.n	800d482 <__hexnan+0x7a>
 800d4fe:	2300      	movs	r3, #0
 800d500:	f844 3c04 	str.w	r3, [r4, #-4]
 800d504:	2501      	movs	r5, #1
 800d506:	3c04      	subs	r4, #4
 800d508:	6822      	ldr	r2, [r4, #0]
 800d50a:	f000 000f 	and.w	r0, r0, #15
 800d50e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d512:	6020      	str	r0, [r4, #0]
 800d514:	e7b5      	b.n	800d482 <__hexnan+0x7a>
 800d516:	2508      	movs	r5, #8
 800d518:	e7b3      	b.n	800d482 <__hexnan+0x7a>
 800d51a:	9b01      	ldr	r3, [sp, #4]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d0dd      	beq.n	800d4dc <__hexnan+0xd4>
 800d520:	f1c3 0320 	rsb	r3, r3, #32
 800d524:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d528:	40da      	lsrs	r2, r3
 800d52a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d52e:	4013      	ands	r3, r2
 800d530:	f846 3c04 	str.w	r3, [r6, #-4]
 800d534:	e7d2      	b.n	800d4dc <__hexnan+0xd4>
 800d536:	3f04      	subs	r7, #4
 800d538:	e7d0      	b.n	800d4dc <__hexnan+0xd4>
 800d53a:	2004      	movs	r0, #4
 800d53c:	e7d5      	b.n	800d4ea <__hexnan+0xe2>
	...

0800d540 <malloc>:
 800d540:	4b02      	ldr	r3, [pc, #8]	@ (800d54c <malloc+0xc>)
 800d542:	4601      	mov	r1, r0
 800d544:	6818      	ldr	r0, [r3, #0]
 800d546:	f000 b825 	b.w	800d594 <_malloc_r>
 800d54a:	bf00      	nop
 800d54c:	20000358 	.word	0x20000358

0800d550 <sbrk_aligned>:
 800d550:	b570      	push	{r4, r5, r6, lr}
 800d552:	4e0f      	ldr	r6, [pc, #60]	@ (800d590 <sbrk_aligned+0x40>)
 800d554:	460c      	mov	r4, r1
 800d556:	6831      	ldr	r1, [r6, #0]
 800d558:	4605      	mov	r5, r0
 800d55a:	b911      	cbnz	r1, 800d562 <sbrk_aligned+0x12>
 800d55c:	f001 f97c 	bl	800e858 <_sbrk_r>
 800d560:	6030      	str	r0, [r6, #0]
 800d562:	4621      	mov	r1, r4
 800d564:	4628      	mov	r0, r5
 800d566:	f001 f977 	bl	800e858 <_sbrk_r>
 800d56a:	1c43      	adds	r3, r0, #1
 800d56c:	d103      	bne.n	800d576 <sbrk_aligned+0x26>
 800d56e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d572:	4620      	mov	r0, r4
 800d574:	bd70      	pop	{r4, r5, r6, pc}
 800d576:	1cc4      	adds	r4, r0, #3
 800d578:	f024 0403 	bic.w	r4, r4, #3
 800d57c:	42a0      	cmp	r0, r4
 800d57e:	d0f8      	beq.n	800d572 <sbrk_aligned+0x22>
 800d580:	1a21      	subs	r1, r4, r0
 800d582:	4628      	mov	r0, r5
 800d584:	f001 f968 	bl	800e858 <_sbrk_r>
 800d588:	3001      	adds	r0, #1
 800d58a:	d1f2      	bne.n	800d572 <sbrk_aligned+0x22>
 800d58c:	e7ef      	b.n	800d56e <sbrk_aligned+0x1e>
 800d58e:	bf00      	nop
 800d590:	2000096c 	.word	0x2000096c

0800d594 <_malloc_r>:
 800d594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d598:	1ccd      	adds	r5, r1, #3
 800d59a:	f025 0503 	bic.w	r5, r5, #3
 800d59e:	3508      	adds	r5, #8
 800d5a0:	2d0c      	cmp	r5, #12
 800d5a2:	bf38      	it	cc
 800d5a4:	250c      	movcc	r5, #12
 800d5a6:	2d00      	cmp	r5, #0
 800d5a8:	4606      	mov	r6, r0
 800d5aa:	db01      	blt.n	800d5b0 <_malloc_r+0x1c>
 800d5ac:	42a9      	cmp	r1, r5
 800d5ae:	d904      	bls.n	800d5ba <_malloc_r+0x26>
 800d5b0:	230c      	movs	r3, #12
 800d5b2:	6033      	str	r3, [r6, #0]
 800d5b4:	2000      	movs	r0, #0
 800d5b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d690 <_malloc_r+0xfc>
 800d5be:	f000 f87b 	bl	800d6b8 <__malloc_lock>
 800d5c2:	f8d8 3000 	ldr.w	r3, [r8]
 800d5c6:	461c      	mov	r4, r3
 800d5c8:	bb44      	cbnz	r4, 800d61c <_malloc_r+0x88>
 800d5ca:	4629      	mov	r1, r5
 800d5cc:	4630      	mov	r0, r6
 800d5ce:	f7ff ffbf 	bl	800d550 <sbrk_aligned>
 800d5d2:	1c43      	adds	r3, r0, #1
 800d5d4:	4604      	mov	r4, r0
 800d5d6:	d158      	bne.n	800d68a <_malloc_r+0xf6>
 800d5d8:	f8d8 4000 	ldr.w	r4, [r8]
 800d5dc:	4627      	mov	r7, r4
 800d5de:	2f00      	cmp	r7, #0
 800d5e0:	d143      	bne.n	800d66a <_malloc_r+0xd6>
 800d5e2:	2c00      	cmp	r4, #0
 800d5e4:	d04b      	beq.n	800d67e <_malloc_r+0xea>
 800d5e6:	6823      	ldr	r3, [r4, #0]
 800d5e8:	4639      	mov	r1, r7
 800d5ea:	4630      	mov	r0, r6
 800d5ec:	eb04 0903 	add.w	r9, r4, r3
 800d5f0:	f001 f932 	bl	800e858 <_sbrk_r>
 800d5f4:	4581      	cmp	r9, r0
 800d5f6:	d142      	bne.n	800d67e <_malloc_r+0xea>
 800d5f8:	6821      	ldr	r1, [r4, #0]
 800d5fa:	1a6d      	subs	r5, r5, r1
 800d5fc:	4629      	mov	r1, r5
 800d5fe:	4630      	mov	r0, r6
 800d600:	f7ff ffa6 	bl	800d550 <sbrk_aligned>
 800d604:	3001      	adds	r0, #1
 800d606:	d03a      	beq.n	800d67e <_malloc_r+0xea>
 800d608:	6823      	ldr	r3, [r4, #0]
 800d60a:	442b      	add	r3, r5
 800d60c:	6023      	str	r3, [r4, #0]
 800d60e:	f8d8 3000 	ldr.w	r3, [r8]
 800d612:	685a      	ldr	r2, [r3, #4]
 800d614:	bb62      	cbnz	r2, 800d670 <_malloc_r+0xdc>
 800d616:	f8c8 7000 	str.w	r7, [r8]
 800d61a:	e00f      	b.n	800d63c <_malloc_r+0xa8>
 800d61c:	6822      	ldr	r2, [r4, #0]
 800d61e:	1b52      	subs	r2, r2, r5
 800d620:	d420      	bmi.n	800d664 <_malloc_r+0xd0>
 800d622:	2a0b      	cmp	r2, #11
 800d624:	d917      	bls.n	800d656 <_malloc_r+0xc2>
 800d626:	1961      	adds	r1, r4, r5
 800d628:	42a3      	cmp	r3, r4
 800d62a:	6025      	str	r5, [r4, #0]
 800d62c:	bf18      	it	ne
 800d62e:	6059      	strne	r1, [r3, #4]
 800d630:	6863      	ldr	r3, [r4, #4]
 800d632:	bf08      	it	eq
 800d634:	f8c8 1000 	streq.w	r1, [r8]
 800d638:	5162      	str	r2, [r4, r5]
 800d63a:	604b      	str	r3, [r1, #4]
 800d63c:	4630      	mov	r0, r6
 800d63e:	f000 f841 	bl	800d6c4 <__malloc_unlock>
 800d642:	f104 000b 	add.w	r0, r4, #11
 800d646:	1d23      	adds	r3, r4, #4
 800d648:	f020 0007 	bic.w	r0, r0, #7
 800d64c:	1ac2      	subs	r2, r0, r3
 800d64e:	bf1c      	itt	ne
 800d650:	1a1b      	subne	r3, r3, r0
 800d652:	50a3      	strne	r3, [r4, r2]
 800d654:	e7af      	b.n	800d5b6 <_malloc_r+0x22>
 800d656:	6862      	ldr	r2, [r4, #4]
 800d658:	42a3      	cmp	r3, r4
 800d65a:	bf0c      	ite	eq
 800d65c:	f8c8 2000 	streq.w	r2, [r8]
 800d660:	605a      	strne	r2, [r3, #4]
 800d662:	e7eb      	b.n	800d63c <_malloc_r+0xa8>
 800d664:	4623      	mov	r3, r4
 800d666:	6864      	ldr	r4, [r4, #4]
 800d668:	e7ae      	b.n	800d5c8 <_malloc_r+0x34>
 800d66a:	463c      	mov	r4, r7
 800d66c:	687f      	ldr	r7, [r7, #4]
 800d66e:	e7b6      	b.n	800d5de <_malloc_r+0x4a>
 800d670:	461a      	mov	r2, r3
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	42a3      	cmp	r3, r4
 800d676:	d1fb      	bne.n	800d670 <_malloc_r+0xdc>
 800d678:	2300      	movs	r3, #0
 800d67a:	6053      	str	r3, [r2, #4]
 800d67c:	e7de      	b.n	800d63c <_malloc_r+0xa8>
 800d67e:	230c      	movs	r3, #12
 800d680:	6033      	str	r3, [r6, #0]
 800d682:	4630      	mov	r0, r6
 800d684:	f000 f81e 	bl	800d6c4 <__malloc_unlock>
 800d688:	e794      	b.n	800d5b4 <_malloc_r+0x20>
 800d68a:	6005      	str	r5, [r0, #0]
 800d68c:	e7d6      	b.n	800d63c <_malloc_r+0xa8>
 800d68e:	bf00      	nop
 800d690:	20000970 	.word	0x20000970

0800d694 <__ascii_mbtowc>:
 800d694:	b082      	sub	sp, #8
 800d696:	b901      	cbnz	r1, 800d69a <__ascii_mbtowc+0x6>
 800d698:	a901      	add	r1, sp, #4
 800d69a:	b142      	cbz	r2, 800d6ae <__ascii_mbtowc+0x1a>
 800d69c:	b14b      	cbz	r3, 800d6b2 <__ascii_mbtowc+0x1e>
 800d69e:	7813      	ldrb	r3, [r2, #0]
 800d6a0:	600b      	str	r3, [r1, #0]
 800d6a2:	7812      	ldrb	r2, [r2, #0]
 800d6a4:	1e10      	subs	r0, r2, #0
 800d6a6:	bf18      	it	ne
 800d6a8:	2001      	movne	r0, #1
 800d6aa:	b002      	add	sp, #8
 800d6ac:	4770      	bx	lr
 800d6ae:	4610      	mov	r0, r2
 800d6b0:	e7fb      	b.n	800d6aa <__ascii_mbtowc+0x16>
 800d6b2:	f06f 0001 	mvn.w	r0, #1
 800d6b6:	e7f8      	b.n	800d6aa <__ascii_mbtowc+0x16>

0800d6b8 <__malloc_lock>:
 800d6b8:	4801      	ldr	r0, [pc, #4]	@ (800d6c0 <__malloc_lock+0x8>)
 800d6ba:	f7fe bd34 	b.w	800c126 <__retarget_lock_acquire_recursive>
 800d6be:	bf00      	nop
 800d6c0:	20000968 	.word	0x20000968

0800d6c4 <__malloc_unlock>:
 800d6c4:	4801      	ldr	r0, [pc, #4]	@ (800d6cc <__malloc_unlock+0x8>)
 800d6c6:	f7fe bd2f 	b.w	800c128 <__retarget_lock_release_recursive>
 800d6ca:	bf00      	nop
 800d6cc:	20000968 	.word	0x20000968

0800d6d0 <_Balloc>:
 800d6d0:	b570      	push	{r4, r5, r6, lr}
 800d6d2:	69c6      	ldr	r6, [r0, #28]
 800d6d4:	4604      	mov	r4, r0
 800d6d6:	460d      	mov	r5, r1
 800d6d8:	b976      	cbnz	r6, 800d6f8 <_Balloc+0x28>
 800d6da:	2010      	movs	r0, #16
 800d6dc:	f7ff ff30 	bl	800d540 <malloc>
 800d6e0:	4602      	mov	r2, r0
 800d6e2:	61e0      	str	r0, [r4, #28]
 800d6e4:	b920      	cbnz	r0, 800d6f0 <_Balloc+0x20>
 800d6e6:	4b18      	ldr	r3, [pc, #96]	@ (800d748 <_Balloc+0x78>)
 800d6e8:	4818      	ldr	r0, [pc, #96]	@ (800d74c <_Balloc+0x7c>)
 800d6ea:	216b      	movs	r1, #107	@ 0x6b
 800d6ec:	f7fe fd3a 	bl	800c164 <__assert_func>
 800d6f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6f4:	6006      	str	r6, [r0, #0]
 800d6f6:	60c6      	str	r6, [r0, #12]
 800d6f8:	69e6      	ldr	r6, [r4, #28]
 800d6fa:	68f3      	ldr	r3, [r6, #12]
 800d6fc:	b183      	cbz	r3, 800d720 <_Balloc+0x50>
 800d6fe:	69e3      	ldr	r3, [r4, #28]
 800d700:	68db      	ldr	r3, [r3, #12]
 800d702:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d706:	b9b8      	cbnz	r0, 800d738 <_Balloc+0x68>
 800d708:	2101      	movs	r1, #1
 800d70a:	fa01 f605 	lsl.w	r6, r1, r5
 800d70e:	1d72      	adds	r2, r6, #5
 800d710:	0092      	lsls	r2, r2, #2
 800d712:	4620      	mov	r0, r4
 800d714:	f001 f8b7 	bl	800e886 <_calloc_r>
 800d718:	b160      	cbz	r0, 800d734 <_Balloc+0x64>
 800d71a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d71e:	e00e      	b.n	800d73e <_Balloc+0x6e>
 800d720:	2221      	movs	r2, #33	@ 0x21
 800d722:	2104      	movs	r1, #4
 800d724:	4620      	mov	r0, r4
 800d726:	f001 f8ae 	bl	800e886 <_calloc_r>
 800d72a:	69e3      	ldr	r3, [r4, #28]
 800d72c:	60f0      	str	r0, [r6, #12]
 800d72e:	68db      	ldr	r3, [r3, #12]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d1e4      	bne.n	800d6fe <_Balloc+0x2e>
 800d734:	2000      	movs	r0, #0
 800d736:	bd70      	pop	{r4, r5, r6, pc}
 800d738:	6802      	ldr	r2, [r0, #0]
 800d73a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d73e:	2300      	movs	r3, #0
 800d740:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d744:	e7f7      	b.n	800d736 <_Balloc+0x66>
 800d746:	bf00      	nop
 800d748:	0800ed32 	.word	0x0800ed32
 800d74c:	0800eebd 	.word	0x0800eebd

0800d750 <_Bfree>:
 800d750:	b570      	push	{r4, r5, r6, lr}
 800d752:	69c6      	ldr	r6, [r0, #28]
 800d754:	4605      	mov	r5, r0
 800d756:	460c      	mov	r4, r1
 800d758:	b976      	cbnz	r6, 800d778 <_Bfree+0x28>
 800d75a:	2010      	movs	r0, #16
 800d75c:	f7ff fef0 	bl	800d540 <malloc>
 800d760:	4602      	mov	r2, r0
 800d762:	61e8      	str	r0, [r5, #28]
 800d764:	b920      	cbnz	r0, 800d770 <_Bfree+0x20>
 800d766:	4b09      	ldr	r3, [pc, #36]	@ (800d78c <_Bfree+0x3c>)
 800d768:	4809      	ldr	r0, [pc, #36]	@ (800d790 <_Bfree+0x40>)
 800d76a:	218f      	movs	r1, #143	@ 0x8f
 800d76c:	f7fe fcfa 	bl	800c164 <__assert_func>
 800d770:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d774:	6006      	str	r6, [r0, #0]
 800d776:	60c6      	str	r6, [r0, #12]
 800d778:	b13c      	cbz	r4, 800d78a <_Bfree+0x3a>
 800d77a:	69eb      	ldr	r3, [r5, #28]
 800d77c:	6862      	ldr	r2, [r4, #4]
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d784:	6021      	str	r1, [r4, #0]
 800d786:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d78a:	bd70      	pop	{r4, r5, r6, pc}
 800d78c:	0800ed32 	.word	0x0800ed32
 800d790:	0800eebd 	.word	0x0800eebd

0800d794 <__multadd>:
 800d794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d798:	690d      	ldr	r5, [r1, #16]
 800d79a:	4607      	mov	r7, r0
 800d79c:	460c      	mov	r4, r1
 800d79e:	461e      	mov	r6, r3
 800d7a0:	f101 0c14 	add.w	ip, r1, #20
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	f8dc 3000 	ldr.w	r3, [ip]
 800d7aa:	b299      	uxth	r1, r3
 800d7ac:	fb02 6101 	mla	r1, r2, r1, r6
 800d7b0:	0c1e      	lsrs	r6, r3, #16
 800d7b2:	0c0b      	lsrs	r3, r1, #16
 800d7b4:	fb02 3306 	mla	r3, r2, r6, r3
 800d7b8:	b289      	uxth	r1, r1
 800d7ba:	3001      	adds	r0, #1
 800d7bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7c0:	4285      	cmp	r5, r0
 800d7c2:	f84c 1b04 	str.w	r1, [ip], #4
 800d7c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7ca:	dcec      	bgt.n	800d7a6 <__multadd+0x12>
 800d7cc:	b30e      	cbz	r6, 800d812 <__multadd+0x7e>
 800d7ce:	68a3      	ldr	r3, [r4, #8]
 800d7d0:	42ab      	cmp	r3, r5
 800d7d2:	dc19      	bgt.n	800d808 <__multadd+0x74>
 800d7d4:	6861      	ldr	r1, [r4, #4]
 800d7d6:	4638      	mov	r0, r7
 800d7d8:	3101      	adds	r1, #1
 800d7da:	f7ff ff79 	bl	800d6d0 <_Balloc>
 800d7de:	4680      	mov	r8, r0
 800d7e0:	b928      	cbnz	r0, 800d7ee <__multadd+0x5a>
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	4b0c      	ldr	r3, [pc, #48]	@ (800d818 <__multadd+0x84>)
 800d7e6:	480d      	ldr	r0, [pc, #52]	@ (800d81c <__multadd+0x88>)
 800d7e8:	21ba      	movs	r1, #186	@ 0xba
 800d7ea:	f7fe fcbb 	bl	800c164 <__assert_func>
 800d7ee:	6922      	ldr	r2, [r4, #16]
 800d7f0:	3202      	adds	r2, #2
 800d7f2:	f104 010c 	add.w	r1, r4, #12
 800d7f6:	0092      	lsls	r2, r2, #2
 800d7f8:	300c      	adds	r0, #12
 800d7fa:	f7fe fc96 	bl	800c12a <memcpy>
 800d7fe:	4621      	mov	r1, r4
 800d800:	4638      	mov	r0, r7
 800d802:	f7ff ffa5 	bl	800d750 <_Bfree>
 800d806:	4644      	mov	r4, r8
 800d808:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d80c:	3501      	adds	r5, #1
 800d80e:	615e      	str	r6, [r3, #20]
 800d810:	6125      	str	r5, [r4, #16]
 800d812:	4620      	mov	r0, r4
 800d814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d818:	0800ee4c 	.word	0x0800ee4c
 800d81c:	0800eebd 	.word	0x0800eebd

0800d820 <__s2b>:
 800d820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d824:	460c      	mov	r4, r1
 800d826:	4615      	mov	r5, r2
 800d828:	461f      	mov	r7, r3
 800d82a:	2209      	movs	r2, #9
 800d82c:	3308      	adds	r3, #8
 800d82e:	4606      	mov	r6, r0
 800d830:	fb93 f3f2 	sdiv	r3, r3, r2
 800d834:	2100      	movs	r1, #0
 800d836:	2201      	movs	r2, #1
 800d838:	429a      	cmp	r2, r3
 800d83a:	db09      	blt.n	800d850 <__s2b+0x30>
 800d83c:	4630      	mov	r0, r6
 800d83e:	f7ff ff47 	bl	800d6d0 <_Balloc>
 800d842:	b940      	cbnz	r0, 800d856 <__s2b+0x36>
 800d844:	4602      	mov	r2, r0
 800d846:	4b19      	ldr	r3, [pc, #100]	@ (800d8ac <__s2b+0x8c>)
 800d848:	4819      	ldr	r0, [pc, #100]	@ (800d8b0 <__s2b+0x90>)
 800d84a:	21d3      	movs	r1, #211	@ 0xd3
 800d84c:	f7fe fc8a 	bl	800c164 <__assert_func>
 800d850:	0052      	lsls	r2, r2, #1
 800d852:	3101      	adds	r1, #1
 800d854:	e7f0      	b.n	800d838 <__s2b+0x18>
 800d856:	9b08      	ldr	r3, [sp, #32]
 800d858:	6143      	str	r3, [r0, #20]
 800d85a:	2d09      	cmp	r5, #9
 800d85c:	f04f 0301 	mov.w	r3, #1
 800d860:	6103      	str	r3, [r0, #16]
 800d862:	dd16      	ble.n	800d892 <__s2b+0x72>
 800d864:	f104 0909 	add.w	r9, r4, #9
 800d868:	46c8      	mov	r8, r9
 800d86a:	442c      	add	r4, r5
 800d86c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d870:	4601      	mov	r1, r0
 800d872:	3b30      	subs	r3, #48	@ 0x30
 800d874:	220a      	movs	r2, #10
 800d876:	4630      	mov	r0, r6
 800d878:	f7ff ff8c 	bl	800d794 <__multadd>
 800d87c:	45a0      	cmp	r8, r4
 800d87e:	d1f5      	bne.n	800d86c <__s2b+0x4c>
 800d880:	f1a5 0408 	sub.w	r4, r5, #8
 800d884:	444c      	add	r4, r9
 800d886:	1b2d      	subs	r5, r5, r4
 800d888:	1963      	adds	r3, r4, r5
 800d88a:	42bb      	cmp	r3, r7
 800d88c:	db04      	blt.n	800d898 <__s2b+0x78>
 800d88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d892:	340a      	adds	r4, #10
 800d894:	2509      	movs	r5, #9
 800d896:	e7f6      	b.n	800d886 <__s2b+0x66>
 800d898:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d89c:	4601      	mov	r1, r0
 800d89e:	3b30      	subs	r3, #48	@ 0x30
 800d8a0:	220a      	movs	r2, #10
 800d8a2:	4630      	mov	r0, r6
 800d8a4:	f7ff ff76 	bl	800d794 <__multadd>
 800d8a8:	e7ee      	b.n	800d888 <__s2b+0x68>
 800d8aa:	bf00      	nop
 800d8ac:	0800ee4c 	.word	0x0800ee4c
 800d8b0:	0800eebd 	.word	0x0800eebd

0800d8b4 <__hi0bits>:
 800d8b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	bf36      	itet	cc
 800d8bc:	0403      	lslcc	r3, r0, #16
 800d8be:	2000      	movcs	r0, #0
 800d8c0:	2010      	movcc	r0, #16
 800d8c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d8c6:	bf3c      	itt	cc
 800d8c8:	021b      	lslcc	r3, r3, #8
 800d8ca:	3008      	addcc	r0, #8
 800d8cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d8d0:	bf3c      	itt	cc
 800d8d2:	011b      	lslcc	r3, r3, #4
 800d8d4:	3004      	addcc	r0, #4
 800d8d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8da:	bf3c      	itt	cc
 800d8dc:	009b      	lslcc	r3, r3, #2
 800d8de:	3002      	addcc	r0, #2
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	db05      	blt.n	800d8f0 <__hi0bits+0x3c>
 800d8e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d8e8:	f100 0001 	add.w	r0, r0, #1
 800d8ec:	bf08      	it	eq
 800d8ee:	2020      	moveq	r0, #32
 800d8f0:	4770      	bx	lr

0800d8f2 <__lo0bits>:
 800d8f2:	6803      	ldr	r3, [r0, #0]
 800d8f4:	4602      	mov	r2, r0
 800d8f6:	f013 0007 	ands.w	r0, r3, #7
 800d8fa:	d00b      	beq.n	800d914 <__lo0bits+0x22>
 800d8fc:	07d9      	lsls	r1, r3, #31
 800d8fe:	d421      	bmi.n	800d944 <__lo0bits+0x52>
 800d900:	0798      	lsls	r0, r3, #30
 800d902:	bf49      	itett	mi
 800d904:	085b      	lsrmi	r3, r3, #1
 800d906:	089b      	lsrpl	r3, r3, #2
 800d908:	2001      	movmi	r0, #1
 800d90a:	6013      	strmi	r3, [r2, #0]
 800d90c:	bf5c      	itt	pl
 800d90e:	6013      	strpl	r3, [r2, #0]
 800d910:	2002      	movpl	r0, #2
 800d912:	4770      	bx	lr
 800d914:	b299      	uxth	r1, r3
 800d916:	b909      	cbnz	r1, 800d91c <__lo0bits+0x2a>
 800d918:	0c1b      	lsrs	r3, r3, #16
 800d91a:	2010      	movs	r0, #16
 800d91c:	b2d9      	uxtb	r1, r3
 800d91e:	b909      	cbnz	r1, 800d924 <__lo0bits+0x32>
 800d920:	3008      	adds	r0, #8
 800d922:	0a1b      	lsrs	r3, r3, #8
 800d924:	0719      	lsls	r1, r3, #28
 800d926:	bf04      	itt	eq
 800d928:	091b      	lsreq	r3, r3, #4
 800d92a:	3004      	addeq	r0, #4
 800d92c:	0799      	lsls	r1, r3, #30
 800d92e:	bf04      	itt	eq
 800d930:	089b      	lsreq	r3, r3, #2
 800d932:	3002      	addeq	r0, #2
 800d934:	07d9      	lsls	r1, r3, #31
 800d936:	d403      	bmi.n	800d940 <__lo0bits+0x4e>
 800d938:	085b      	lsrs	r3, r3, #1
 800d93a:	f100 0001 	add.w	r0, r0, #1
 800d93e:	d003      	beq.n	800d948 <__lo0bits+0x56>
 800d940:	6013      	str	r3, [r2, #0]
 800d942:	4770      	bx	lr
 800d944:	2000      	movs	r0, #0
 800d946:	4770      	bx	lr
 800d948:	2020      	movs	r0, #32
 800d94a:	4770      	bx	lr

0800d94c <__i2b>:
 800d94c:	b510      	push	{r4, lr}
 800d94e:	460c      	mov	r4, r1
 800d950:	2101      	movs	r1, #1
 800d952:	f7ff febd 	bl	800d6d0 <_Balloc>
 800d956:	4602      	mov	r2, r0
 800d958:	b928      	cbnz	r0, 800d966 <__i2b+0x1a>
 800d95a:	4b05      	ldr	r3, [pc, #20]	@ (800d970 <__i2b+0x24>)
 800d95c:	4805      	ldr	r0, [pc, #20]	@ (800d974 <__i2b+0x28>)
 800d95e:	f240 1145 	movw	r1, #325	@ 0x145
 800d962:	f7fe fbff 	bl	800c164 <__assert_func>
 800d966:	2301      	movs	r3, #1
 800d968:	6144      	str	r4, [r0, #20]
 800d96a:	6103      	str	r3, [r0, #16]
 800d96c:	bd10      	pop	{r4, pc}
 800d96e:	bf00      	nop
 800d970:	0800ee4c 	.word	0x0800ee4c
 800d974:	0800eebd 	.word	0x0800eebd

0800d978 <__multiply>:
 800d978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d97c:	4614      	mov	r4, r2
 800d97e:	690a      	ldr	r2, [r1, #16]
 800d980:	6923      	ldr	r3, [r4, #16]
 800d982:	429a      	cmp	r2, r3
 800d984:	bfa8      	it	ge
 800d986:	4623      	movge	r3, r4
 800d988:	460f      	mov	r7, r1
 800d98a:	bfa4      	itt	ge
 800d98c:	460c      	movge	r4, r1
 800d98e:	461f      	movge	r7, r3
 800d990:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d994:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d998:	68a3      	ldr	r3, [r4, #8]
 800d99a:	6861      	ldr	r1, [r4, #4]
 800d99c:	eb0a 0609 	add.w	r6, sl, r9
 800d9a0:	42b3      	cmp	r3, r6
 800d9a2:	b085      	sub	sp, #20
 800d9a4:	bfb8      	it	lt
 800d9a6:	3101      	addlt	r1, #1
 800d9a8:	f7ff fe92 	bl	800d6d0 <_Balloc>
 800d9ac:	b930      	cbnz	r0, 800d9bc <__multiply+0x44>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	4b44      	ldr	r3, [pc, #272]	@ (800dac4 <__multiply+0x14c>)
 800d9b2:	4845      	ldr	r0, [pc, #276]	@ (800dac8 <__multiply+0x150>)
 800d9b4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d9b8:	f7fe fbd4 	bl	800c164 <__assert_func>
 800d9bc:	f100 0514 	add.w	r5, r0, #20
 800d9c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d9c4:	462b      	mov	r3, r5
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	4543      	cmp	r3, r8
 800d9ca:	d321      	bcc.n	800da10 <__multiply+0x98>
 800d9cc:	f107 0114 	add.w	r1, r7, #20
 800d9d0:	f104 0214 	add.w	r2, r4, #20
 800d9d4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d9d8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d9dc:	9302      	str	r3, [sp, #8]
 800d9de:	1b13      	subs	r3, r2, r4
 800d9e0:	3b15      	subs	r3, #21
 800d9e2:	f023 0303 	bic.w	r3, r3, #3
 800d9e6:	3304      	adds	r3, #4
 800d9e8:	f104 0715 	add.w	r7, r4, #21
 800d9ec:	42ba      	cmp	r2, r7
 800d9ee:	bf38      	it	cc
 800d9f0:	2304      	movcc	r3, #4
 800d9f2:	9301      	str	r3, [sp, #4]
 800d9f4:	9b02      	ldr	r3, [sp, #8]
 800d9f6:	9103      	str	r1, [sp, #12]
 800d9f8:	428b      	cmp	r3, r1
 800d9fa:	d80c      	bhi.n	800da16 <__multiply+0x9e>
 800d9fc:	2e00      	cmp	r6, #0
 800d9fe:	dd03      	ble.n	800da08 <__multiply+0x90>
 800da00:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800da04:	2b00      	cmp	r3, #0
 800da06:	d05b      	beq.n	800dac0 <__multiply+0x148>
 800da08:	6106      	str	r6, [r0, #16]
 800da0a:	b005      	add	sp, #20
 800da0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da10:	f843 2b04 	str.w	r2, [r3], #4
 800da14:	e7d8      	b.n	800d9c8 <__multiply+0x50>
 800da16:	f8b1 a000 	ldrh.w	sl, [r1]
 800da1a:	f1ba 0f00 	cmp.w	sl, #0
 800da1e:	d024      	beq.n	800da6a <__multiply+0xf2>
 800da20:	f104 0e14 	add.w	lr, r4, #20
 800da24:	46a9      	mov	r9, r5
 800da26:	f04f 0c00 	mov.w	ip, #0
 800da2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800da2e:	f8d9 3000 	ldr.w	r3, [r9]
 800da32:	fa1f fb87 	uxth.w	fp, r7
 800da36:	b29b      	uxth	r3, r3
 800da38:	fb0a 330b 	mla	r3, sl, fp, r3
 800da3c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800da40:	f8d9 7000 	ldr.w	r7, [r9]
 800da44:	4463      	add	r3, ip
 800da46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800da4a:	fb0a c70b 	mla	r7, sl, fp, ip
 800da4e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800da52:	b29b      	uxth	r3, r3
 800da54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800da58:	4572      	cmp	r2, lr
 800da5a:	f849 3b04 	str.w	r3, [r9], #4
 800da5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800da62:	d8e2      	bhi.n	800da2a <__multiply+0xb2>
 800da64:	9b01      	ldr	r3, [sp, #4]
 800da66:	f845 c003 	str.w	ip, [r5, r3]
 800da6a:	9b03      	ldr	r3, [sp, #12]
 800da6c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800da70:	3104      	adds	r1, #4
 800da72:	f1b9 0f00 	cmp.w	r9, #0
 800da76:	d021      	beq.n	800dabc <__multiply+0x144>
 800da78:	682b      	ldr	r3, [r5, #0]
 800da7a:	f104 0c14 	add.w	ip, r4, #20
 800da7e:	46ae      	mov	lr, r5
 800da80:	f04f 0a00 	mov.w	sl, #0
 800da84:	f8bc b000 	ldrh.w	fp, [ip]
 800da88:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800da8c:	fb09 770b 	mla	r7, r9, fp, r7
 800da90:	4457      	add	r7, sl
 800da92:	b29b      	uxth	r3, r3
 800da94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800da98:	f84e 3b04 	str.w	r3, [lr], #4
 800da9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800daa0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800daa4:	f8be 3000 	ldrh.w	r3, [lr]
 800daa8:	fb09 330a 	mla	r3, r9, sl, r3
 800daac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800dab0:	4562      	cmp	r2, ip
 800dab2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dab6:	d8e5      	bhi.n	800da84 <__multiply+0x10c>
 800dab8:	9f01      	ldr	r7, [sp, #4]
 800daba:	51eb      	str	r3, [r5, r7]
 800dabc:	3504      	adds	r5, #4
 800dabe:	e799      	b.n	800d9f4 <__multiply+0x7c>
 800dac0:	3e01      	subs	r6, #1
 800dac2:	e79b      	b.n	800d9fc <__multiply+0x84>
 800dac4:	0800ee4c 	.word	0x0800ee4c
 800dac8:	0800eebd 	.word	0x0800eebd

0800dacc <__pow5mult>:
 800dacc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dad0:	4615      	mov	r5, r2
 800dad2:	f012 0203 	ands.w	r2, r2, #3
 800dad6:	4607      	mov	r7, r0
 800dad8:	460e      	mov	r6, r1
 800dada:	d007      	beq.n	800daec <__pow5mult+0x20>
 800dadc:	4c25      	ldr	r4, [pc, #148]	@ (800db74 <__pow5mult+0xa8>)
 800dade:	3a01      	subs	r2, #1
 800dae0:	2300      	movs	r3, #0
 800dae2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dae6:	f7ff fe55 	bl	800d794 <__multadd>
 800daea:	4606      	mov	r6, r0
 800daec:	10ad      	asrs	r5, r5, #2
 800daee:	d03d      	beq.n	800db6c <__pow5mult+0xa0>
 800daf0:	69fc      	ldr	r4, [r7, #28]
 800daf2:	b97c      	cbnz	r4, 800db14 <__pow5mult+0x48>
 800daf4:	2010      	movs	r0, #16
 800daf6:	f7ff fd23 	bl	800d540 <malloc>
 800dafa:	4602      	mov	r2, r0
 800dafc:	61f8      	str	r0, [r7, #28]
 800dafe:	b928      	cbnz	r0, 800db0c <__pow5mult+0x40>
 800db00:	4b1d      	ldr	r3, [pc, #116]	@ (800db78 <__pow5mult+0xac>)
 800db02:	481e      	ldr	r0, [pc, #120]	@ (800db7c <__pow5mult+0xb0>)
 800db04:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800db08:	f7fe fb2c 	bl	800c164 <__assert_func>
 800db0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db10:	6004      	str	r4, [r0, #0]
 800db12:	60c4      	str	r4, [r0, #12]
 800db14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800db18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800db1c:	b94c      	cbnz	r4, 800db32 <__pow5mult+0x66>
 800db1e:	f240 2171 	movw	r1, #625	@ 0x271
 800db22:	4638      	mov	r0, r7
 800db24:	f7ff ff12 	bl	800d94c <__i2b>
 800db28:	2300      	movs	r3, #0
 800db2a:	f8c8 0008 	str.w	r0, [r8, #8]
 800db2e:	4604      	mov	r4, r0
 800db30:	6003      	str	r3, [r0, #0]
 800db32:	f04f 0900 	mov.w	r9, #0
 800db36:	07eb      	lsls	r3, r5, #31
 800db38:	d50a      	bpl.n	800db50 <__pow5mult+0x84>
 800db3a:	4631      	mov	r1, r6
 800db3c:	4622      	mov	r2, r4
 800db3e:	4638      	mov	r0, r7
 800db40:	f7ff ff1a 	bl	800d978 <__multiply>
 800db44:	4631      	mov	r1, r6
 800db46:	4680      	mov	r8, r0
 800db48:	4638      	mov	r0, r7
 800db4a:	f7ff fe01 	bl	800d750 <_Bfree>
 800db4e:	4646      	mov	r6, r8
 800db50:	106d      	asrs	r5, r5, #1
 800db52:	d00b      	beq.n	800db6c <__pow5mult+0xa0>
 800db54:	6820      	ldr	r0, [r4, #0]
 800db56:	b938      	cbnz	r0, 800db68 <__pow5mult+0x9c>
 800db58:	4622      	mov	r2, r4
 800db5a:	4621      	mov	r1, r4
 800db5c:	4638      	mov	r0, r7
 800db5e:	f7ff ff0b 	bl	800d978 <__multiply>
 800db62:	6020      	str	r0, [r4, #0]
 800db64:	f8c0 9000 	str.w	r9, [r0]
 800db68:	4604      	mov	r4, r0
 800db6a:	e7e4      	b.n	800db36 <__pow5mult+0x6a>
 800db6c:	4630      	mov	r0, r6
 800db6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db72:	bf00      	nop
 800db74:	0800ef18 	.word	0x0800ef18
 800db78:	0800ed32 	.word	0x0800ed32
 800db7c:	0800eebd 	.word	0x0800eebd

0800db80 <__lshift>:
 800db80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db84:	460c      	mov	r4, r1
 800db86:	6849      	ldr	r1, [r1, #4]
 800db88:	6923      	ldr	r3, [r4, #16]
 800db8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db8e:	68a3      	ldr	r3, [r4, #8]
 800db90:	4607      	mov	r7, r0
 800db92:	4691      	mov	r9, r2
 800db94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db98:	f108 0601 	add.w	r6, r8, #1
 800db9c:	42b3      	cmp	r3, r6
 800db9e:	db0b      	blt.n	800dbb8 <__lshift+0x38>
 800dba0:	4638      	mov	r0, r7
 800dba2:	f7ff fd95 	bl	800d6d0 <_Balloc>
 800dba6:	4605      	mov	r5, r0
 800dba8:	b948      	cbnz	r0, 800dbbe <__lshift+0x3e>
 800dbaa:	4602      	mov	r2, r0
 800dbac:	4b28      	ldr	r3, [pc, #160]	@ (800dc50 <__lshift+0xd0>)
 800dbae:	4829      	ldr	r0, [pc, #164]	@ (800dc54 <__lshift+0xd4>)
 800dbb0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dbb4:	f7fe fad6 	bl	800c164 <__assert_func>
 800dbb8:	3101      	adds	r1, #1
 800dbba:	005b      	lsls	r3, r3, #1
 800dbbc:	e7ee      	b.n	800db9c <__lshift+0x1c>
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	f100 0114 	add.w	r1, r0, #20
 800dbc4:	f100 0210 	add.w	r2, r0, #16
 800dbc8:	4618      	mov	r0, r3
 800dbca:	4553      	cmp	r3, sl
 800dbcc:	db33      	blt.n	800dc36 <__lshift+0xb6>
 800dbce:	6920      	ldr	r0, [r4, #16]
 800dbd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dbd4:	f104 0314 	add.w	r3, r4, #20
 800dbd8:	f019 091f 	ands.w	r9, r9, #31
 800dbdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dbe0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dbe4:	d02b      	beq.n	800dc3e <__lshift+0xbe>
 800dbe6:	f1c9 0e20 	rsb	lr, r9, #32
 800dbea:	468a      	mov	sl, r1
 800dbec:	2200      	movs	r2, #0
 800dbee:	6818      	ldr	r0, [r3, #0]
 800dbf0:	fa00 f009 	lsl.w	r0, r0, r9
 800dbf4:	4310      	orrs	r0, r2
 800dbf6:	f84a 0b04 	str.w	r0, [sl], #4
 800dbfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbfe:	459c      	cmp	ip, r3
 800dc00:	fa22 f20e 	lsr.w	r2, r2, lr
 800dc04:	d8f3      	bhi.n	800dbee <__lshift+0x6e>
 800dc06:	ebac 0304 	sub.w	r3, ip, r4
 800dc0a:	3b15      	subs	r3, #21
 800dc0c:	f023 0303 	bic.w	r3, r3, #3
 800dc10:	3304      	adds	r3, #4
 800dc12:	f104 0015 	add.w	r0, r4, #21
 800dc16:	4584      	cmp	ip, r0
 800dc18:	bf38      	it	cc
 800dc1a:	2304      	movcc	r3, #4
 800dc1c:	50ca      	str	r2, [r1, r3]
 800dc1e:	b10a      	cbz	r2, 800dc24 <__lshift+0xa4>
 800dc20:	f108 0602 	add.w	r6, r8, #2
 800dc24:	3e01      	subs	r6, #1
 800dc26:	4638      	mov	r0, r7
 800dc28:	612e      	str	r6, [r5, #16]
 800dc2a:	4621      	mov	r1, r4
 800dc2c:	f7ff fd90 	bl	800d750 <_Bfree>
 800dc30:	4628      	mov	r0, r5
 800dc32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc36:	f842 0f04 	str.w	r0, [r2, #4]!
 800dc3a:	3301      	adds	r3, #1
 800dc3c:	e7c5      	b.n	800dbca <__lshift+0x4a>
 800dc3e:	3904      	subs	r1, #4
 800dc40:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc44:	f841 2f04 	str.w	r2, [r1, #4]!
 800dc48:	459c      	cmp	ip, r3
 800dc4a:	d8f9      	bhi.n	800dc40 <__lshift+0xc0>
 800dc4c:	e7ea      	b.n	800dc24 <__lshift+0xa4>
 800dc4e:	bf00      	nop
 800dc50:	0800ee4c 	.word	0x0800ee4c
 800dc54:	0800eebd 	.word	0x0800eebd

0800dc58 <__mcmp>:
 800dc58:	690a      	ldr	r2, [r1, #16]
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	6900      	ldr	r0, [r0, #16]
 800dc5e:	1a80      	subs	r0, r0, r2
 800dc60:	b530      	push	{r4, r5, lr}
 800dc62:	d10e      	bne.n	800dc82 <__mcmp+0x2a>
 800dc64:	3314      	adds	r3, #20
 800dc66:	3114      	adds	r1, #20
 800dc68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dc6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dc70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dc74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dc78:	4295      	cmp	r5, r2
 800dc7a:	d003      	beq.n	800dc84 <__mcmp+0x2c>
 800dc7c:	d205      	bcs.n	800dc8a <__mcmp+0x32>
 800dc7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc82:	bd30      	pop	{r4, r5, pc}
 800dc84:	42a3      	cmp	r3, r4
 800dc86:	d3f3      	bcc.n	800dc70 <__mcmp+0x18>
 800dc88:	e7fb      	b.n	800dc82 <__mcmp+0x2a>
 800dc8a:	2001      	movs	r0, #1
 800dc8c:	e7f9      	b.n	800dc82 <__mcmp+0x2a>
	...

0800dc90 <__mdiff>:
 800dc90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc94:	4689      	mov	r9, r1
 800dc96:	4606      	mov	r6, r0
 800dc98:	4611      	mov	r1, r2
 800dc9a:	4648      	mov	r0, r9
 800dc9c:	4614      	mov	r4, r2
 800dc9e:	f7ff ffdb 	bl	800dc58 <__mcmp>
 800dca2:	1e05      	subs	r5, r0, #0
 800dca4:	d112      	bne.n	800dccc <__mdiff+0x3c>
 800dca6:	4629      	mov	r1, r5
 800dca8:	4630      	mov	r0, r6
 800dcaa:	f7ff fd11 	bl	800d6d0 <_Balloc>
 800dcae:	4602      	mov	r2, r0
 800dcb0:	b928      	cbnz	r0, 800dcbe <__mdiff+0x2e>
 800dcb2:	4b3f      	ldr	r3, [pc, #252]	@ (800ddb0 <__mdiff+0x120>)
 800dcb4:	f240 2137 	movw	r1, #567	@ 0x237
 800dcb8:	483e      	ldr	r0, [pc, #248]	@ (800ddb4 <__mdiff+0x124>)
 800dcba:	f7fe fa53 	bl	800c164 <__assert_func>
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dcc4:	4610      	mov	r0, r2
 800dcc6:	b003      	add	sp, #12
 800dcc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dccc:	bfbc      	itt	lt
 800dcce:	464b      	movlt	r3, r9
 800dcd0:	46a1      	movlt	r9, r4
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dcd8:	bfba      	itte	lt
 800dcda:	461c      	movlt	r4, r3
 800dcdc:	2501      	movlt	r5, #1
 800dcde:	2500      	movge	r5, #0
 800dce0:	f7ff fcf6 	bl	800d6d0 <_Balloc>
 800dce4:	4602      	mov	r2, r0
 800dce6:	b918      	cbnz	r0, 800dcf0 <__mdiff+0x60>
 800dce8:	4b31      	ldr	r3, [pc, #196]	@ (800ddb0 <__mdiff+0x120>)
 800dcea:	f240 2145 	movw	r1, #581	@ 0x245
 800dcee:	e7e3      	b.n	800dcb8 <__mdiff+0x28>
 800dcf0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dcf4:	6926      	ldr	r6, [r4, #16]
 800dcf6:	60c5      	str	r5, [r0, #12]
 800dcf8:	f109 0310 	add.w	r3, r9, #16
 800dcfc:	f109 0514 	add.w	r5, r9, #20
 800dd00:	f104 0e14 	add.w	lr, r4, #20
 800dd04:	f100 0b14 	add.w	fp, r0, #20
 800dd08:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dd0c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dd10:	9301      	str	r3, [sp, #4]
 800dd12:	46d9      	mov	r9, fp
 800dd14:	f04f 0c00 	mov.w	ip, #0
 800dd18:	9b01      	ldr	r3, [sp, #4]
 800dd1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dd1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dd22:	9301      	str	r3, [sp, #4]
 800dd24:	fa1f f38a 	uxth.w	r3, sl
 800dd28:	4619      	mov	r1, r3
 800dd2a:	b283      	uxth	r3, r0
 800dd2c:	1acb      	subs	r3, r1, r3
 800dd2e:	0c00      	lsrs	r0, r0, #16
 800dd30:	4463      	add	r3, ip
 800dd32:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dd36:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dd3a:	b29b      	uxth	r3, r3
 800dd3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dd40:	4576      	cmp	r6, lr
 800dd42:	f849 3b04 	str.w	r3, [r9], #4
 800dd46:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dd4a:	d8e5      	bhi.n	800dd18 <__mdiff+0x88>
 800dd4c:	1b33      	subs	r3, r6, r4
 800dd4e:	3b15      	subs	r3, #21
 800dd50:	f023 0303 	bic.w	r3, r3, #3
 800dd54:	3415      	adds	r4, #21
 800dd56:	3304      	adds	r3, #4
 800dd58:	42a6      	cmp	r6, r4
 800dd5a:	bf38      	it	cc
 800dd5c:	2304      	movcc	r3, #4
 800dd5e:	441d      	add	r5, r3
 800dd60:	445b      	add	r3, fp
 800dd62:	461e      	mov	r6, r3
 800dd64:	462c      	mov	r4, r5
 800dd66:	4544      	cmp	r4, r8
 800dd68:	d30e      	bcc.n	800dd88 <__mdiff+0xf8>
 800dd6a:	f108 0103 	add.w	r1, r8, #3
 800dd6e:	1b49      	subs	r1, r1, r5
 800dd70:	f021 0103 	bic.w	r1, r1, #3
 800dd74:	3d03      	subs	r5, #3
 800dd76:	45a8      	cmp	r8, r5
 800dd78:	bf38      	it	cc
 800dd7a:	2100      	movcc	r1, #0
 800dd7c:	440b      	add	r3, r1
 800dd7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dd82:	b191      	cbz	r1, 800ddaa <__mdiff+0x11a>
 800dd84:	6117      	str	r7, [r2, #16]
 800dd86:	e79d      	b.n	800dcc4 <__mdiff+0x34>
 800dd88:	f854 1b04 	ldr.w	r1, [r4], #4
 800dd8c:	46e6      	mov	lr, ip
 800dd8e:	0c08      	lsrs	r0, r1, #16
 800dd90:	fa1c fc81 	uxtah	ip, ip, r1
 800dd94:	4471      	add	r1, lr
 800dd96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dd9a:	b289      	uxth	r1, r1
 800dd9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dda0:	f846 1b04 	str.w	r1, [r6], #4
 800dda4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dda8:	e7dd      	b.n	800dd66 <__mdiff+0xd6>
 800ddaa:	3f01      	subs	r7, #1
 800ddac:	e7e7      	b.n	800dd7e <__mdiff+0xee>
 800ddae:	bf00      	nop
 800ddb0:	0800ee4c 	.word	0x0800ee4c
 800ddb4:	0800eebd 	.word	0x0800eebd

0800ddb8 <__ulp>:
 800ddb8:	b082      	sub	sp, #8
 800ddba:	ed8d 0b00 	vstr	d0, [sp]
 800ddbe:	9a01      	ldr	r2, [sp, #4]
 800ddc0:	4b0f      	ldr	r3, [pc, #60]	@ (800de00 <__ulp+0x48>)
 800ddc2:	4013      	ands	r3, r2
 800ddc4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	dc08      	bgt.n	800ddde <__ulp+0x26>
 800ddcc:	425b      	negs	r3, r3
 800ddce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ddd2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ddd6:	da04      	bge.n	800dde2 <__ulp+0x2a>
 800ddd8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800dddc:	4113      	asrs	r3, r2
 800ddde:	2200      	movs	r2, #0
 800dde0:	e008      	b.n	800ddf4 <__ulp+0x3c>
 800dde2:	f1a2 0314 	sub.w	r3, r2, #20
 800dde6:	2b1e      	cmp	r3, #30
 800dde8:	bfda      	itte	le
 800ddea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ddee:	40da      	lsrle	r2, r3
 800ddf0:	2201      	movgt	r2, #1
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	4619      	mov	r1, r3
 800ddf6:	4610      	mov	r0, r2
 800ddf8:	ec41 0b10 	vmov	d0, r0, r1
 800ddfc:	b002      	add	sp, #8
 800ddfe:	4770      	bx	lr
 800de00:	7ff00000 	.word	0x7ff00000

0800de04 <__b2d>:
 800de04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de08:	6906      	ldr	r6, [r0, #16]
 800de0a:	f100 0814 	add.w	r8, r0, #20
 800de0e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800de12:	1f37      	subs	r7, r6, #4
 800de14:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800de18:	4610      	mov	r0, r2
 800de1a:	f7ff fd4b 	bl	800d8b4 <__hi0bits>
 800de1e:	f1c0 0320 	rsb	r3, r0, #32
 800de22:	280a      	cmp	r0, #10
 800de24:	600b      	str	r3, [r1, #0]
 800de26:	491b      	ldr	r1, [pc, #108]	@ (800de94 <__b2d+0x90>)
 800de28:	dc15      	bgt.n	800de56 <__b2d+0x52>
 800de2a:	f1c0 0c0b 	rsb	ip, r0, #11
 800de2e:	fa22 f30c 	lsr.w	r3, r2, ip
 800de32:	45b8      	cmp	r8, r7
 800de34:	ea43 0501 	orr.w	r5, r3, r1
 800de38:	bf34      	ite	cc
 800de3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800de3e:	2300      	movcs	r3, #0
 800de40:	3015      	adds	r0, #21
 800de42:	fa02 f000 	lsl.w	r0, r2, r0
 800de46:	fa23 f30c 	lsr.w	r3, r3, ip
 800de4a:	4303      	orrs	r3, r0
 800de4c:	461c      	mov	r4, r3
 800de4e:	ec45 4b10 	vmov	d0, r4, r5
 800de52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de56:	45b8      	cmp	r8, r7
 800de58:	bf3a      	itte	cc
 800de5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800de5e:	f1a6 0708 	subcc.w	r7, r6, #8
 800de62:	2300      	movcs	r3, #0
 800de64:	380b      	subs	r0, #11
 800de66:	d012      	beq.n	800de8e <__b2d+0x8a>
 800de68:	f1c0 0120 	rsb	r1, r0, #32
 800de6c:	fa23 f401 	lsr.w	r4, r3, r1
 800de70:	4082      	lsls	r2, r0
 800de72:	4322      	orrs	r2, r4
 800de74:	4547      	cmp	r7, r8
 800de76:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800de7a:	bf8c      	ite	hi
 800de7c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800de80:	2200      	movls	r2, #0
 800de82:	4083      	lsls	r3, r0
 800de84:	40ca      	lsrs	r2, r1
 800de86:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800de8a:	4313      	orrs	r3, r2
 800de8c:	e7de      	b.n	800de4c <__b2d+0x48>
 800de8e:	ea42 0501 	orr.w	r5, r2, r1
 800de92:	e7db      	b.n	800de4c <__b2d+0x48>
 800de94:	3ff00000 	.word	0x3ff00000

0800de98 <__d2b>:
 800de98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de9c:	460f      	mov	r7, r1
 800de9e:	2101      	movs	r1, #1
 800dea0:	ec59 8b10 	vmov	r8, r9, d0
 800dea4:	4616      	mov	r6, r2
 800dea6:	f7ff fc13 	bl	800d6d0 <_Balloc>
 800deaa:	4604      	mov	r4, r0
 800deac:	b930      	cbnz	r0, 800debc <__d2b+0x24>
 800deae:	4602      	mov	r2, r0
 800deb0:	4b23      	ldr	r3, [pc, #140]	@ (800df40 <__d2b+0xa8>)
 800deb2:	4824      	ldr	r0, [pc, #144]	@ (800df44 <__d2b+0xac>)
 800deb4:	f240 310f 	movw	r1, #783	@ 0x30f
 800deb8:	f7fe f954 	bl	800c164 <__assert_func>
 800debc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dec0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dec4:	b10d      	cbz	r5, 800deca <__d2b+0x32>
 800dec6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800deca:	9301      	str	r3, [sp, #4]
 800decc:	f1b8 0300 	subs.w	r3, r8, #0
 800ded0:	d023      	beq.n	800df1a <__d2b+0x82>
 800ded2:	4668      	mov	r0, sp
 800ded4:	9300      	str	r3, [sp, #0]
 800ded6:	f7ff fd0c 	bl	800d8f2 <__lo0bits>
 800deda:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dede:	b1d0      	cbz	r0, 800df16 <__d2b+0x7e>
 800dee0:	f1c0 0320 	rsb	r3, r0, #32
 800dee4:	fa02 f303 	lsl.w	r3, r2, r3
 800dee8:	430b      	orrs	r3, r1
 800deea:	40c2      	lsrs	r2, r0
 800deec:	6163      	str	r3, [r4, #20]
 800deee:	9201      	str	r2, [sp, #4]
 800def0:	9b01      	ldr	r3, [sp, #4]
 800def2:	61a3      	str	r3, [r4, #24]
 800def4:	2b00      	cmp	r3, #0
 800def6:	bf0c      	ite	eq
 800def8:	2201      	moveq	r2, #1
 800defa:	2202      	movne	r2, #2
 800defc:	6122      	str	r2, [r4, #16]
 800defe:	b1a5      	cbz	r5, 800df2a <__d2b+0x92>
 800df00:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800df04:	4405      	add	r5, r0
 800df06:	603d      	str	r5, [r7, #0]
 800df08:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800df0c:	6030      	str	r0, [r6, #0]
 800df0e:	4620      	mov	r0, r4
 800df10:	b003      	add	sp, #12
 800df12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df16:	6161      	str	r1, [r4, #20]
 800df18:	e7ea      	b.n	800def0 <__d2b+0x58>
 800df1a:	a801      	add	r0, sp, #4
 800df1c:	f7ff fce9 	bl	800d8f2 <__lo0bits>
 800df20:	9b01      	ldr	r3, [sp, #4]
 800df22:	6163      	str	r3, [r4, #20]
 800df24:	3020      	adds	r0, #32
 800df26:	2201      	movs	r2, #1
 800df28:	e7e8      	b.n	800defc <__d2b+0x64>
 800df2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800df2e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800df32:	6038      	str	r0, [r7, #0]
 800df34:	6918      	ldr	r0, [r3, #16]
 800df36:	f7ff fcbd 	bl	800d8b4 <__hi0bits>
 800df3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df3e:	e7e5      	b.n	800df0c <__d2b+0x74>
 800df40:	0800ee4c 	.word	0x0800ee4c
 800df44:	0800eebd 	.word	0x0800eebd

0800df48 <__ratio>:
 800df48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df4c:	b085      	sub	sp, #20
 800df4e:	e9cd 1000 	strd	r1, r0, [sp]
 800df52:	a902      	add	r1, sp, #8
 800df54:	f7ff ff56 	bl	800de04 <__b2d>
 800df58:	9800      	ldr	r0, [sp, #0]
 800df5a:	a903      	add	r1, sp, #12
 800df5c:	ec55 4b10 	vmov	r4, r5, d0
 800df60:	f7ff ff50 	bl	800de04 <__b2d>
 800df64:	9b01      	ldr	r3, [sp, #4]
 800df66:	6919      	ldr	r1, [r3, #16]
 800df68:	9b00      	ldr	r3, [sp, #0]
 800df6a:	691b      	ldr	r3, [r3, #16]
 800df6c:	1ac9      	subs	r1, r1, r3
 800df6e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800df72:	1a9b      	subs	r3, r3, r2
 800df74:	ec5b ab10 	vmov	sl, fp, d0
 800df78:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	bfce      	itee	gt
 800df80:	462a      	movgt	r2, r5
 800df82:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800df86:	465a      	movle	r2, fp
 800df88:	462f      	mov	r7, r5
 800df8a:	46d9      	mov	r9, fp
 800df8c:	bfcc      	ite	gt
 800df8e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800df92:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800df96:	464b      	mov	r3, r9
 800df98:	4652      	mov	r2, sl
 800df9a:	4620      	mov	r0, r4
 800df9c:	4639      	mov	r1, r7
 800df9e:	f7f2 fc8d 	bl	80008bc <__aeabi_ddiv>
 800dfa2:	ec41 0b10 	vmov	d0, r0, r1
 800dfa6:	b005      	add	sp, #20
 800dfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dfac <__copybits>:
 800dfac:	3901      	subs	r1, #1
 800dfae:	b570      	push	{r4, r5, r6, lr}
 800dfb0:	1149      	asrs	r1, r1, #5
 800dfb2:	6914      	ldr	r4, [r2, #16]
 800dfb4:	3101      	adds	r1, #1
 800dfb6:	f102 0314 	add.w	r3, r2, #20
 800dfba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dfbe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dfc2:	1f05      	subs	r5, r0, #4
 800dfc4:	42a3      	cmp	r3, r4
 800dfc6:	d30c      	bcc.n	800dfe2 <__copybits+0x36>
 800dfc8:	1aa3      	subs	r3, r4, r2
 800dfca:	3b11      	subs	r3, #17
 800dfcc:	f023 0303 	bic.w	r3, r3, #3
 800dfd0:	3211      	adds	r2, #17
 800dfd2:	42a2      	cmp	r2, r4
 800dfd4:	bf88      	it	hi
 800dfd6:	2300      	movhi	r3, #0
 800dfd8:	4418      	add	r0, r3
 800dfda:	2300      	movs	r3, #0
 800dfdc:	4288      	cmp	r0, r1
 800dfde:	d305      	bcc.n	800dfec <__copybits+0x40>
 800dfe0:	bd70      	pop	{r4, r5, r6, pc}
 800dfe2:	f853 6b04 	ldr.w	r6, [r3], #4
 800dfe6:	f845 6f04 	str.w	r6, [r5, #4]!
 800dfea:	e7eb      	b.n	800dfc4 <__copybits+0x18>
 800dfec:	f840 3b04 	str.w	r3, [r0], #4
 800dff0:	e7f4      	b.n	800dfdc <__copybits+0x30>

0800dff2 <__any_on>:
 800dff2:	f100 0214 	add.w	r2, r0, #20
 800dff6:	6900      	ldr	r0, [r0, #16]
 800dff8:	114b      	asrs	r3, r1, #5
 800dffa:	4298      	cmp	r0, r3
 800dffc:	b510      	push	{r4, lr}
 800dffe:	db11      	blt.n	800e024 <__any_on+0x32>
 800e000:	dd0a      	ble.n	800e018 <__any_on+0x26>
 800e002:	f011 011f 	ands.w	r1, r1, #31
 800e006:	d007      	beq.n	800e018 <__any_on+0x26>
 800e008:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e00c:	fa24 f001 	lsr.w	r0, r4, r1
 800e010:	fa00 f101 	lsl.w	r1, r0, r1
 800e014:	428c      	cmp	r4, r1
 800e016:	d10b      	bne.n	800e030 <__any_on+0x3e>
 800e018:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e01c:	4293      	cmp	r3, r2
 800e01e:	d803      	bhi.n	800e028 <__any_on+0x36>
 800e020:	2000      	movs	r0, #0
 800e022:	bd10      	pop	{r4, pc}
 800e024:	4603      	mov	r3, r0
 800e026:	e7f7      	b.n	800e018 <__any_on+0x26>
 800e028:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e02c:	2900      	cmp	r1, #0
 800e02e:	d0f5      	beq.n	800e01c <__any_on+0x2a>
 800e030:	2001      	movs	r0, #1
 800e032:	e7f6      	b.n	800e022 <__any_on+0x30>

0800e034 <__ascii_wctomb>:
 800e034:	4603      	mov	r3, r0
 800e036:	4608      	mov	r0, r1
 800e038:	b141      	cbz	r1, 800e04c <__ascii_wctomb+0x18>
 800e03a:	2aff      	cmp	r2, #255	@ 0xff
 800e03c:	d904      	bls.n	800e048 <__ascii_wctomb+0x14>
 800e03e:	228a      	movs	r2, #138	@ 0x8a
 800e040:	601a      	str	r2, [r3, #0]
 800e042:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e046:	4770      	bx	lr
 800e048:	700a      	strb	r2, [r1, #0]
 800e04a:	2001      	movs	r0, #1
 800e04c:	4770      	bx	lr

0800e04e <__ssputs_r>:
 800e04e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e052:	688e      	ldr	r6, [r1, #8]
 800e054:	461f      	mov	r7, r3
 800e056:	42be      	cmp	r6, r7
 800e058:	680b      	ldr	r3, [r1, #0]
 800e05a:	4682      	mov	sl, r0
 800e05c:	460c      	mov	r4, r1
 800e05e:	4690      	mov	r8, r2
 800e060:	d82d      	bhi.n	800e0be <__ssputs_r+0x70>
 800e062:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e066:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e06a:	d026      	beq.n	800e0ba <__ssputs_r+0x6c>
 800e06c:	6965      	ldr	r5, [r4, #20]
 800e06e:	6909      	ldr	r1, [r1, #16]
 800e070:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e074:	eba3 0901 	sub.w	r9, r3, r1
 800e078:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e07c:	1c7b      	adds	r3, r7, #1
 800e07e:	444b      	add	r3, r9
 800e080:	106d      	asrs	r5, r5, #1
 800e082:	429d      	cmp	r5, r3
 800e084:	bf38      	it	cc
 800e086:	461d      	movcc	r5, r3
 800e088:	0553      	lsls	r3, r2, #21
 800e08a:	d527      	bpl.n	800e0dc <__ssputs_r+0x8e>
 800e08c:	4629      	mov	r1, r5
 800e08e:	f7ff fa81 	bl	800d594 <_malloc_r>
 800e092:	4606      	mov	r6, r0
 800e094:	b360      	cbz	r0, 800e0f0 <__ssputs_r+0xa2>
 800e096:	6921      	ldr	r1, [r4, #16]
 800e098:	464a      	mov	r2, r9
 800e09a:	f7fe f846 	bl	800c12a <memcpy>
 800e09e:	89a3      	ldrh	r3, [r4, #12]
 800e0a0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e0a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0a8:	81a3      	strh	r3, [r4, #12]
 800e0aa:	6126      	str	r6, [r4, #16]
 800e0ac:	6165      	str	r5, [r4, #20]
 800e0ae:	444e      	add	r6, r9
 800e0b0:	eba5 0509 	sub.w	r5, r5, r9
 800e0b4:	6026      	str	r6, [r4, #0]
 800e0b6:	60a5      	str	r5, [r4, #8]
 800e0b8:	463e      	mov	r6, r7
 800e0ba:	42be      	cmp	r6, r7
 800e0bc:	d900      	bls.n	800e0c0 <__ssputs_r+0x72>
 800e0be:	463e      	mov	r6, r7
 800e0c0:	6820      	ldr	r0, [r4, #0]
 800e0c2:	4632      	mov	r2, r6
 800e0c4:	4641      	mov	r1, r8
 800e0c6:	f000 fbad 	bl	800e824 <memmove>
 800e0ca:	68a3      	ldr	r3, [r4, #8]
 800e0cc:	1b9b      	subs	r3, r3, r6
 800e0ce:	60a3      	str	r3, [r4, #8]
 800e0d0:	6823      	ldr	r3, [r4, #0]
 800e0d2:	4433      	add	r3, r6
 800e0d4:	6023      	str	r3, [r4, #0]
 800e0d6:	2000      	movs	r0, #0
 800e0d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0dc:	462a      	mov	r2, r5
 800e0de:	f000 fbe6 	bl	800e8ae <_realloc_r>
 800e0e2:	4606      	mov	r6, r0
 800e0e4:	2800      	cmp	r0, #0
 800e0e6:	d1e0      	bne.n	800e0aa <__ssputs_r+0x5c>
 800e0e8:	6921      	ldr	r1, [r4, #16]
 800e0ea:	4650      	mov	r0, sl
 800e0ec:	f7fe fea4 	bl	800ce38 <_free_r>
 800e0f0:	230c      	movs	r3, #12
 800e0f2:	f8ca 3000 	str.w	r3, [sl]
 800e0f6:	89a3      	ldrh	r3, [r4, #12]
 800e0f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0fc:	81a3      	strh	r3, [r4, #12]
 800e0fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e102:	e7e9      	b.n	800e0d8 <__ssputs_r+0x8a>

0800e104 <_svfiprintf_r>:
 800e104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e108:	4698      	mov	r8, r3
 800e10a:	898b      	ldrh	r3, [r1, #12]
 800e10c:	061b      	lsls	r3, r3, #24
 800e10e:	b09d      	sub	sp, #116	@ 0x74
 800e110:	4607      	mov	r7, r0
 800e112:	460d      	mov	r5, r1
 800e114:	4614      	mov	r4, r2
 800e116:	d510      	bpl.n	800e13a <_svfiprintf_r+0x36>
 800e118:	690b      	ldr	r3, [r1, #16]
 800e11a:	b973      	cbnz	r3, 800e13a <_svfiprintf_r+0x36>
 800e11c:	2140      	movs	r1, #64	@ 0x40
 800e11e:	f7ff fa39 	bl	800d594 <_malloc_r>
 800e122:	6028      	str	r0, [r5, #0]
 800e124:	6128      	str	r0, [r5, #16]
 800e126:	b930      	cbnz	r0, 800e136 <_svfiprintf_r+0x32>
 800e128:	230c      	movs	r3, #12
 800e12a:	603b      	str	r3, [r7, #0]
 800e12c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e130:	b01d      	add	sp, #116	@ 0x74
 800e132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e136:	2340      	movs	r3, #64	@ 0x40
 800e138:	616b      	str	r3, [r5, #20]
 800e13a:	2300      	movs	r3, #0
 800e13c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e13e:	2320      	movs	r3, #32
 800e140:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e144:	f8cd 800c 	str.w	r8, [sp, #12]
 800e148:	2330      	movs	r3, #48	@ 0x30
 800e14a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e2e8 <_svfiprintf_r+0x1e4>
 800e14e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e152:	f04f 0901 	mov.w	r9, #1
 800e156:	4623      	mov	r3, r4
 800e158:	469a      	mov	sl, r3
 800e15a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e15e:	b10a      	cbz	r2, 800e164 <_svfiprintf_r+0x60>
 800e160:	2a25      	cmp	r2, #37	@ 0x25
 800e162:	d1f9      	bne.n	800e158 <_svfiprintf_r+0x54>
 800e164:	ebba 0b04 	subs.w	fp, sl, r4
 800e168:	d00b      	beq.n	800e182 <_svfiprintf_r+0x7e>
 800e16a:	465b      	mov	r3, fp
 800e16c:	4622      	mov	r2, r4
 800e16e:	4629      	mov	r1, r5
 800e170:	4638      	mov	r0, r7
 800e172:	f7ff ff6c 	bl	800e04e <__ssputs_r>
 800e176:	3001      	adds	r0, #1
 800e178:	f000 80a7 	beq.w	800e2ca <_svfiprintf_r+0x1c6>
 800e17c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e17e:	445a      	add	r2, fp
 800e180:	9209      	str	r2, [sp, #36]	@ 0x24
 800e182:	f89a 3000 	ldrb.w	r3, [sl]
 800e186:	2b00      	cmp	r3, #0
 800e188:	f000 809f 	beq.w	800e2ca <_svfiprintf_r+0x1c6>
 800e18c:	2300      	movs	r3, #0
 800e18e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e196:	f10a 0a01 	add.w	sl, sl, #1
 800e19a:	9304      	str	r3, [sp, #16]
 800e19c:	9307      	str	r3, [sp, #28]
 800e19e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e1a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800e1a4:	4654      	mov	r4, sl
 800e1a6:	2205      	movs	r2, #5
 800e1a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1ac:	484e      	ldr	r0, [pc, #312]	@ (800e2e8 <_svfiprintf_r+0x1e4>)
 800e1ae:	f7f2 f847 	bl	8000240 <memchr>
 800e1b2:	9a04      	ldr	r2, [sp, #16]
 800e1b4:	b9d8      	cbnz	r0, 800e1ee <_svfiprintf_r+0xea>
 800e1b6:	06d0      	lsls	r0, r2, #27
 800e1b8:	bf44      	itt	mi
 800e1ba:	2320      	movmi	r3, #32
 800e1bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1c0:	0711      	lsls	r1, r2, #28
 800e1c2:	bf44      	itt	mi
 800e1c4:	232b      	movmi	r3, #43	@ 0x2b
 800e1c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1ca:	f89a 3000 	ldrb.w	r3, [sl]
 800e1ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1d0:	d015      	beq.n	800e1fe <_svfiprintf_r+0xfa>
 800e1d2:	9a07      	ldr	r2, [sp, #28]
 800e1d4:	4654      	mov	r4, sl
 800e1d6:	2000      	movs	r0, #0
 800e1d8:	f04f 0c0a 	mov.w	ip, #10
 800e1dc:	4621      	mov	r1, r4
 800e1de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1e2:	3b30      	subs	r3, #48	@ 0x30
 800e1e4:	2b09      	cmp	r3, #9
 800e1e6:	d94b      	bls.n	800e280 <_svfiprintf_r+0x17c>
 800e1e8:	b1b0      	cbz	r0, 800e218 <_svfiprintf_r+0x114>
 800e1ea:	9207      	str	r2, [sp, #28]
 800e1ec:	e014      	b.n	800e218 <_svfiprintf_r+0x114>
 800e1ee:	eba0 0308 	sub.w	r3, r0, r8
 800e1f2:	fa09 f303 	lsl.w	r3, r9, r3
 800e1f6:	4313      	orrs	r3, r2
 800e1f8:	9304      	str	r3, [sp, #16]
 800e1fa:	46a2      	mov	sl, r4
 800e1fc:	e7d2      	b.n	800e1a4 <_svfiprintf_r+0xa0>
 800e1fe:	9b03      	ldr	r3, [sp, #12]
 800e200:	1d19      	adds	r1, r3, #4
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	9103      	str	r1, [sp, #12]
 800e206:	2b00      	cmp	r3, #0
 800e208:	bfbb      	ittet	lt
 800e20a:	425b      	neglt	r3, r3
 800e20c:	f042 0202 	orrlt.w	r2, r2, #2
 800e210:	9307      	strge	r3, [sp, #28]
 800e212:	9307      	strlt	r3, [sp, #28]
 800e214:	bfb8      	it	lt
 800e216:	9204      	strlt	r2, [sp, #16]
 800e218:	7823      	ldrb	r3, [r4, #0]
 800e21a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e21c:	d10a      	bne.n	800e234 <_svfiprintf_r+0x130>
 800e21e:	7863      	ldrb	r3, [r4, #1]
 800e220:	2b2a      	cmp	r3, #42	@ 0x2a
 800e222:	d132      	bne.n	800e28a <_svfiprintf_r+0x186>
 800e224:	9b03      	ldr	r3, [sp, #12]
 800e226:	1d1a      	adds	r2, r3, #4
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	9203      	str	r2, [sp, #12]
 800e22c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e230:	3402      	adds	r4, #2
 800e232:	9305      	str	r3, [sp, #20]
 800e234:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e2f8 <_svfiprintf_r+0x1f4>
 800e238:	7821      	ldrb	r1, [r4, #0]
 800e23a:	2203      	movs	r2, #3
 800e23c:	4650      	mov	r0, sl
 800e23e:	f7f1 ffff 	bl	8000240 <memchr>
 800e242:	b138      	cbz	r0, 800e254 <_svfiprintf_r+0x150>
 800e244:	9b04      	ldr	r3, [sp, #16]
 800e246:	eba0 000a 	sub.w	r0, r0, sl
 800e24a:	2240      	movs	r2, #64	@ 0x40
 800e24c:	4082      	lsls	r2, r0
 800e24e:	4313      	orrs	r3, r2
 800e250:	3401      	adds	r4, #1
 800e252:	9304      	str	r3, [sp, #16]
 800e254:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e258:	4824      	ldr	r0, [pc, #144]	@ (800e2ec <_svfiprintf_r+0x1e8>)
 800e25a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e25e:	2206      	movs	r2, #6
 800e260:	f7f1 ffee 	bl	8000240 <memchr>
 800e264:	2800      	cmp	r0, #0
 800e266:	d036      	beq.n	800e2d6 <_svfiprintf_r+0x1d2>
 800e268:	4b21      	ldr	r3, [pc, #132]	@ (800e2f0 <_svfiprintf_r+0x1ec>)
 800e26a:	bb1b      	cbnz	r3, 800e2b4 <_svfiprintf_r+0x1b0>
 800e26c:	9b03      	ldr	r3, [sp, #12]
 800e26e:	3307      	adds	r3, #7
 800e270:	f023 0307 	bic.w	r3, r3, #7
 800e274:	3308      	adds	r3, #8
 800e276:	9303      	str	r3, [sp, #12]
 800e278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e27a:	4433      	add	r3, r6
 800e27c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e27e:	e76a      	b.n	800e156 <_svfiprintf_r+0x52>
 800e280:	fb0c 3202 	mla	r2, ip, r2, r3
 800e284:	460c      	mov	r4, r1
 800e286:	2001      	movs	r0, #1
 800e288:	e7a8      	b.n	800e1dc <_svfiprintf_r+0xd8>
 800e28a:	2300      	movs	r3, #0
 800e28c:	3401      	adds	r4, #1
 800e28e:	9305      	str	r3, [sp, #20]
 800e290:	4619      	mov	r1, r3
 800e292:	f04f 0c0a 	mov.w	ip, #10
 800e296:	4620      	mov	r0, r4
 800e298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e29c:	3a30      	subs	r2, #48	@ 0x30
 800e29e:	2a09      	cmp	r2, #9
 800e2a0:	d903      	bls.n	800e2aa <_svfiprintf_r+0x1a6>
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d0c6      	beq.n	800e234 <_svfiprintf_r+0x130>
 800e2a6:	9105      	str	r1, [sp, #20]
 800e2a8:	e7c4      	b.n	800e234 <_svfiprintf_r+0x130>
 800e2aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2ae:	4604      	mov	r4, r0
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	e7f0      	b.n	800e296 <_svfiprintf_r+0x192>
 800e2b4:	ab03      	add	r3, sp, #12
 800e2b6:	9300      	str	r3, [sp, #0]
 800e2b8:	462a      	mov	r2, r5
 800e2ba:	4b0e      	ldr	r3, [pc, #56]	@ (800e2f4 <_svfiprintf_r+0x1f0>)
 800e2bc:	a904      	add	r1, sp, #16
 800e2be:	4638      	mov	r0, r7
 800e2c0:	f7fc ff42 	bl	800b148 <_printf_float>
 800e2c4:	1c42      	adds	r2, r0, #1
 800e2c6:	4606      	mov	r6, r0
 800e2c8:	d1d6      	bne.n	800e278 <_svfiprintf_r+0x174>
 800e2ca:	89ab      	ldrh	r3, [r5, #12]
 800e2cc:	065b      	lsls	r3, r3, #25
 800e2ce:	f53f af2d 	bmi.w	800e12c <_svfiprintf_r+0x28>
 800e2d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e2d4:	e72c      	b.n	800e130 <_svfiprintf_r+0x2c>
 800e2d6:	ab03      	add	r3, sp, #12
 800e2d8:	9300      	str	r3, [sp, #0]
 800e2da:	462a      	mov	r2, r5
 800e2dc:	4b05      	ldr	r3, [pc, #20]	@ (800e2f4 <_svfiprintf_r+0x1f0>)
 800e2de:	a904      	add	r1, sp, #16
 800e2e0:	4638      	mov	r0, r7
 800e2e2:	f7fd f9c9 	bl	800b678 <_printf_i>
 800e2e6:	e7ed      	b.n	800e2c4 <_svfiprintf_r+0x1c0>
 800e2e8:	0800f018 	.word	0x0800f018
 800e2ec:	0800f022 	.word	0x0800f022
 800e2f0:	0800b149 	.word	0x0800b149
 800e2f4:	0800e04f 	.word	0x0800e04f
 800e2f8:	0800f01e 	.word	0x0800f01e

0800e2fc <__sfputc_r>:
 800e2fc:	6893      	ldr	r3, [r2, #8]
 800e2fe:	3b01      	subs	r3, #1
 800e300:	2b00      	cmp	r3, #0
 800e302:	b410      	push	{r4}
 800e304:	6093      	str	r3, [r2, #8]
 800e306:	da08      	bge.n	800e31a <__sfputc_r+0x1e>
 800e308:	6994      	ldr	r4, [r2, #24]
 800e30a:	42a3      	cmp	r3, r4
 800e30c:	db01      	blt.n	800e312 <__sfputc_r+0x16>
 800e30e:	290a      	cmp	r1, #10
 800e310:	d103      	bne.n	800e31a <__sfputc_r+0x1e>
 800e312:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e316:	f000 b9f1 	b.w	800e6fc <__swbuf_r>
 800e31a:	6813      	ldr	r3, [r2, #0]
 800e31c:	1c58      	adds	r0, r3, #1
 800e31e:	6010      	str	r0, [r2, #0]
 800e320:	7019      	strb	r1, [r3, #0]
 800e322:	4608      	mov	r0, r1
 800e324:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e328:	4770      	bx	lr

0800e32a <__sfputs_r>:
 800e32a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e32c:	4606      	mov	r6, r0
 800e32e:	460f      	mov	r7, r1
 800e330:	4614      	mov	r4, r2
 800e332:	18d5      	adds	r5, r2, r3
 800e334:	42ac      	cmp	r4, r5
 800e336:	d101      	bne.n	800e33c <__sfputs_r+0x12>
 800e338:	2000      	movs	r0, #0
 800e33a:	e007      	b.n	800e34c <__sfputs_r+0x22>
 800e33c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e340:	463a      	mov	r2, r7
 800e342:	4630      	mov	r0, r6
 800e344:	f7ff ffda 	bl	800e2fc <__sfputc_r>
 800e348:	1c43      	adds	r3, r0, #1
 800e34a:	d1f3      	bne.n	800e334 <__sfputs_r+0xa>
 800e34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e350 <_vfiprintf_r>:
 800e350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e354:	460d      	mov	r5, r1
 800e356:	b09d      	sub	sp, #116	@ 0x74
 800e358:	4614      	mov	r4, r2
 800e35a:	4698      	mov	r8, r3
 800e35c:	4606      	mov	r6, r0
 800e35e:	b118      	cbz	r0, 800e368 <_vfiprintf_r+0x18>
 800e360:	6a03      	ldr	r3, [r0, #32]
 800e362:	b90b      	cbnz	r3, 800e368 <_vfiprintf_r+0x18>
 800e364:	f7fd fd48 	bl	800bdf8 <__sinit>
 800e368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e36a:	07d9      	lsls	r1, r3, #31
 800e36c:	d405      	bmi.n	800e37a <_vfiprintf_r+0x2a>
 800e36e:	89ab      	ldrh	r3, [r5, #12]
 800e370:	059a      	lsls	r2, r3, #22
 800e372:	d402      	bmi.n	800e37a <_vfiprintf_r+0x2a>
 800e374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e376:	f7fd fed6 	bl	800c126 <__retarget_lock_acquire_recursive>
 800e37a:	89ab      	ldrh	r3, [r5, #12]
 800e37c:	071b      	lsls	r3, r3, #28
 800e37e:	d501      	bpl.n	800e384 <_vfiprintf_r+0x34>
 800e380:	692b      	ldr	r3, [r5, #16]
 800e382:	b99b      	cbnz	r3, 800e3ac <_vfiprintf_r+0x5c>
 800e384:	4629      	mov	r1, r5
 800e386:	4630      	mov	r0, r6
 800e388:	f000 f9f6 	bl	800e778 <__swsetup_r>
 800e38c:	b170      	cbz	r0, 800e3ac <_vfiprintf_r+0x5c>
 800e38e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e390:	07dc      	lsls	r4, r3, #31
 800e392:	d504      	bpl.n	800e39e <_vfiprintf_r+0x4e>
 800e394:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e398:	b01d      	add	sp, #116	@ 0x74
 800e39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e39e:	89ab      	ldrh	r3, [r5, #12]
 800e3a0:	0598      	lsls	r0, r3, #22
 800e3a2:	d4f7      	bmi.n	800e394 <_vfiprintf_r+0x44>
 800e3a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3a6:	f7fd febf 	bl	800c128 <__retarget_lock_release_recursive>
 800e3aa:	e7f3      	b.n	800e394 <_vfiprintf_r+0x44>
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3b0:	2320      	movs	r3, #32
 800e3b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e3b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3ba:	2330      	movs	r3, #48	@ 0x30
 800e3bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e56c <_vfiprintf_r+0x21c>
 800e3c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e3c4:	f04f 0901 	mov.w	r9, #1
 800e3c8:	4623      	mov	r3, r4
 800e3ca:	469a      	mov	sl, r3
 800e3cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3d0:	b10a      	cbz	r2, 800e3d6 <_vfiprintf_r+0x86>
 800e3d2:	2a25      	cmp	r2, #37	@ 0x25
 800e3d4:	d1f9      	bne.n	800e3ca <_vfiprintf_r+0x7a>
 800e3d6:	ebba 0b04 	subs.w	fp, sl, r4
 800e3da:	d00b      	beq.n	800e3f4 <_vfiprintf_r+0xa4>
 800e3dc:	465b      	mov	r3, fp
 800e3de:	4622      	mov	r2, r4
 800e3e0:	4629      	mov	r1, r5
 800e3e2:	4630      	mov	r0, r6
 800e3e4:	f7ff ffa1 	bl	800e32a <__sfputs_r>
 800e3e8:	3001      	adds	r0, #1
 800e3ea:	f000 80a7 	beq.w	800e53c <_vfiprintf_r+0x1ec>
 800e3ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3f0:	445a      	add	r2, fp
 800e3f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e3f4:	f89a 3000 	ldrb.w	r3, [sl]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	f000 809f 	beq.w	800e53c <_vfiprintf_r+0x1ec>
 800e3fe:	2300      	movs	r3, #0
 800e400:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e408:	f10a 0a01 	add.w	sl, sl, #1
 800e40c:	9304      	str	r3, [sp, #16]
 800e40e:	9307      	str	r3, [sp, #28]
 800e410:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e414:	931a      	str	r3, [sp, #104]	@ 0x68
 800e416:	4654      	mov	r4, sl
 800e418:	2205      	movs	r2, #5
 800e41a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e41e:	4853      	ldr	r0, [pc, #332]	@ (800e56c <_vfiprintf_r+0x21c>)
 800e420:	f7f1 ff0e 	bl	8000240 <memchr>
 800e424:	9a04      	ldr	r2, [sp, #16]
 800e426:	b9d8      	cbnz	r0, 800e460 <_vfiprintf_r+0x110>
 800e428:	06d1      	lsls	r1, r2, #27
 800e42a:	bf44      	itt	mi
 800e42c:	2320      	movmi	r3, #32
 800e42e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e432:	0713      	lsls	r3, r2, #28
 800e434:	bf44      	itt	mi
 800e436:	232b      	movmi	r3, #43	@ 0x2b
 800e438:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e43c:	f89a 3000 	ldrb.w	r3, [sl]
 800e440:	2b2a      	cmp	r3, #42	@ 0x2a
 800e442:	d015      	beq.n	800e470 <_vfiprintf_r+0x120>
 800e444:	9a07      	ldr	r2, [sp, #28]
 800e446:	4654      	mov	r4, sl
 800e448:	2000      	movs	r0, #0
 800e44a:	f04f 0c0a 	mov.w	ip, #10
 800e44e:	4621      	mov	r1, r4
 800e450:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e454:	3b30      	subs	r3, #48	@ 0x30
 800e456:	2b09      	cmp	r3, #9
 800e458:	d94b      	bls.n	800e4f2 <_vfiprintf_r+0x1a2>
 800e45a:	b1b0      	cbz	r0, 800e48a <_vfiprintf_r+0x13a>
 800e45c:	9207      	str	r2, [sp, #28]
 800e45e:	e014      	b.n	800e48a <_vfiprintf_r+0x13a>
 800e460:	eba0 0308 	sub.w	r3, r0, r8
 800e464:	fa09 f303 	lsl.w	r3, r9, r3
 800e468:	4313      	orrs	r3, r2
 800e46a:	9304      	str	r3, [sp, #16]
 800e46c:	46a2      	mov	sl, r4
 800e46e:	e7d2      	b.n	800e416 <_vfiprintf_r+0xc6>
 800e470:	9b03      	ldr	r3, [sp, #12]
 800e472:	1d19      	adds	r1, r3, #4
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	9103      	str	r1, [sp, #12]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	bfbb      	ittet	lt
 800e47c:	425b      	neglt	r3, r3
 800e47e:	f042 0202 	orrlt.w	r2, r2, #2
 800e482:	9307      	strge	r3, [sp, #28]
 800e484:	9307      	strlt	r3, [sp, #28]
 800e486:	bfb8      	it	lt
 800e488:	9204      	strlt	r2, [sp, #16]
 800e48a:	7823      	ldrb	r3, [r4, #0]
 800e48c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e48e:	d10a      	bne.n	800e4a6 <_vfiprintf_r+0x156>
 800e490:	7863      	ldrb	r3, [r4, #1]
 800e492:	2b2a      	cmp	r3, #42	@ 0x2a
 800e494:	d132      	bne.n	800e4fc <_vfiprintf_r+0x1ac>
 800e496:	9b03      	ldr	r3, [sp, #12]
 800e498:	1d1a      	adds	r2, r3, #4
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	9203      	str	r2, [sp, #12]
 800e49e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e4a2:	3402      	adds	r4, #2
 800e4a4:	9305      	str	r3, [sp, #20]
 800e4a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e57c <_vfiprintf_r+0x22c>
 800e4aa:	7821      	ldrb	r1, [r4, #0]
 800e4ac:	2203      	movs	r2, #3
 800e4ae:	4650      	mov	r0, sl
 800e4b0:	f7f1 fec6 	bl	8000240 <memchr>
 800e4b4:	b138      	cbz	r0, 800e4c6 <_vfiprintf_r+0x176>
 800e4b6:	9b04      	ldr	r3, [sp, #16]
 800e4b8:	eba0 000a 	sub.w	r0, r0, sl
 800e4bc:	2240      	movs	r2, #64	@ 0x40
 800e4be:	4082      	lsls	r2, r0
 800e4c0:	4313      	orrs	r3, r2
 800e4c2:	3401      	adds	r4, #1
 800e4c4:	9304      	str	r3, [sp, #16]
 800e4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4ca:	4829      	ldr	r0, [pc, #164]	@ (800e570 <_vfiprintf_r+0x220>)
 800e4cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e4d0:	2206      	movs	r2, #6
 800e4d2:	f7f1 feb5 	bl	8000240 <memchr>
 800e4d6:	2800      	cmp	r0, #0
 800e4d8:	d03f      	beq.n	800e55a <_vfiprintf_r+0x20a>
 800e4da:	4b26      	ldr	r3, [pc, #152]	@ (800e574 <_vfiprintf_r+0x224>)
 800e4dc:	bb1b      	cbnz	r3, 800e526 <_vfiprintf_r+0x1d6>
 800e4de:	9b03      	ldr	r3, [sp, #12]
 800e4e0:	3307      	adds	r3, #7
 800e4e2:	f023 0307 	bic.w	r3, r3, #7
 800e4e6:	3308      	adds	r3, #8
 800e4e8:	9303      	str	r3, [sp, #12]
 800e4ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4ec:	443b      	add	r3, r7
 800e4ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4f0:	e76a      	b.n	800e3c8 <_vfiprintf_r+0x78>
 800e4f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4f6:	460c      	mov	r4, r1
 800e4f8:	2001      	movs	r0, #1
 800e4fa:	e7a8      	b.n	800e44e <_vfiprintf_r+0xfe>
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	3401      	adds	r4, #1
 800e500:	9305      	str	r3, [sp, #20]
 800e502:	4619      	mov	r1, r3
 800e504:	f04f 0c0a 	mov.w	ip, #10
 800e508:	4620      	mov	r0, r4
 800e50a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e50e:	3a30      	subs	r2, #48	@ 0x30
 800e510:	2a09      	cmp	r2, #9
 800e512:	d903      	bls.n	800e51c <_vfiprintf_r+0x1cc>
 800e514:	2b00      	cmp	r3, #0
 800e516:	d0c6      	beq.n	800e4a6 <_vfiprintf_r+0x156>
 800e518:	9105      	str	r1, [sp, #20]
 800e51a:	e7c4      	b.n	800e4a6 <_vfiprintf_r+0x156>
 800e51c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e520:	4604      	mov	r4, r0
 800e522:	2301      	movs	r3, #1
 800e524:	e7f0      	b.n	800e508 <_vfiprintf_r+0x1b8>
 800e526:	ab03      	add	r3, sp, #12
 800e528:	9300      	str	r3, [sp, #0]
 800e52a:	462a      	mov	r2, r5
 800e52c:	4b12      	ldr	r3, [pc, #72]	@ (800e578 <_vfiprintf_r+0x228>)
 800e52e:	a904      	add	r1, sp, #16
 800e530:	4630      	mov	r0, r6
 800e532:	f7fc fe09 	bl	800b148 <_printf_float>
 800e536:	4607      	mov	r7, r0
 800e538:	1c78      	adds	r0, r7, #1
 800e53a:	d1d6      	bne.n	800e4ea <_vfiprintf_r+0x19a>
 800e53c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e53e:	07d9      	lsls	r1, r3, #31
 800e540:	d405      	bmi.n	800e54e <_vfiprintf_r+0x1fe>
 800e542:	89ab      	ldrh	r3, [r5, #12]
 800e544:	059a      	lsls	r2, r3, #22
 800e546:	d402      	bmi.n	800e54e <_vfiprintf_r+0x1fe>
 800e548:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e54a:	f7fd fded 	bl	800c128 <__retarget_lock_release_recursive>
 800e54e:	89ab      	ldrh	r3, [r5, #12]
 800e550:	065b      	lsls	r3, r3, #25
 800e552:	f53f af1f 	bmi.w	800e394 <_vfiprintf_r+0x44>
 800e556:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e558:	e71e      	b.n	800e398 <_vfiprintf_r+0x48>
 800e55a:	ab03      	add	r3, sp, #12
 800e55c:	9300      	str	r3, [sp, #0]
 800e55e:	462a      	mov	r2, r5
 800e560:	4b05      	ldr	r3, [pc, #20]	@ (800e578 <_vfiprintf_r+0x228>)
 800e562:	a904      	add	r1, sp, #16
 800e564:	4630      	mov	r0, r6
 800e566:	f7fd f887 	bl	800b678 <_printf_i>
 800e56a:	e7e4      	b.n	800e536 <_vfiprintf_r+0x1e6>
 800e56c:	0800f018 	.word	0x0800f018
 800e570:	0800f022 	.word	0x0800f022
 800e574:	0800b149 	.word	0x0800b149
 800e578:	0800e32b 	.word	0x0800e32b
 800e57c:	0800f01e 	.word	0x0800f01e

0800e580 <__sflush_r>:
 800e580:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e588:	0716      	lsls	r6, r2, #28
 800e58a:	4605      	mov	r5, r0
 800e58c:	460c      	mov	r4, r1
 800e58e:	d454      	bmi.n	800e63a <__sflush_r+0xba>
 800e590:	684b      	ldr	r3, [r1, #4]
 800e592:	2b00      	cmp	r3, #0
 800e594:	dc02      	bgt.n	800e59c <__sflush_r+0x1c>
 800e596:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e598:	2b00      	cmp	r3, #0
 800e59a:	dd48      	ble.n	800e62e <__sflush_r+0xae>
 800e59c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e59e:	2e00      	cmp	r6, #0
 800e5a0:	d045      	beq.n	800e62e <__sflush_r+0xae>
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e5a8:	682f      	ldr	r7, [r5, #0]
 800e5aa:	6a21      	ldr	r1, [r4, #32]
 800e5ac:	602b      	str	r3, [r5, #0]
 800e5ae:	d030      	beq.n	800e612 <__sflush_r+0x92>
 800e5b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e5b2:	89a3      	ldrh	r3, [r4, #12]
 800e5b4:	0759      	lsls	r1, r3, #29
 800e5b6:	d505      	bpl.n	800e5c4 <__sflush_r+0x44>
 800e5b8:	6863      	ldr	r3, [r4, #4]
 800e5ba:	1ad2      	subs	r2, r2, r3
 800e5bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e5be:	b10b      	cbz	r3, 800e5c4 <__sflush_r+0x44>
 800e5c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e5c2:	1ad2      	subs	r2, r2, r3
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e5c8:	6a21      	ldr	r1, [r4, #32]
 800e5ca:	4628      	mov	r0, r5
 800e5cc:	47b0      	blx	r6
 800e5ce:	1c43      	adds	r3, r0, #1
 800e5d0:	89a3      	ldrh	r3, [r4, #12]
 800e5d2:	d106      	bne.n	800e5e2 <__sflush_r+0x62>
 800e5d4:	6829      	ldr	r1, [r5, #0]
 800e5d6:	291d      	cmp	r1, #29
 800e5d8:	d82b      	bhi.n	800e632 <__sflush_r+0xb2>
 800e5da:	4a2a      	ldr	r2, [pc, #168]	@ (800e684 <__sflush_r+0x104>)
 800e5dc:	410a      	asrs	r2, r1
 800e5de:	07d6      	lsls	r6, r2, #31
 800e5e0:	d427      	bmi.n	800e632 <__sflush_r+0xb2>
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	6062      	str	r2, [r4, #4]
 800e5e6:	04d9      	lsls	r1, r3, #19
 800e5e8:	6922      	ldr	r2, [r4, #16]
 800e5ea:	6022      	str	r2, [r4, #0]
 800e5ec:	d504      	bpl.n	800e5f8 <__sflush_r+0x78>
 800e5ee:	1c42      	adds	r2, r0, #1
 800e5f0:	d101      	bne.n	800e5f6 <__sflush_r+0x76>
 800e5f2:	682b      	ldr	r3, [r5, #0]
 800e5f4:	b903      	cbnz	r3, 800e5f8 <__sflush_r+0x78>
 800e5f6:	6560      	str	r0, [r4, #84]	@ 0x54
 800e5f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e5fa:	602f      	str	r7, [r5, #0]
 800e5fc:	b1b9      	cbz	r1, 800e62e <__sflush_r+0xae>
 800e5fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e602:	4299      	cmp	r1, r3
 800e604:	d002      	beq.n	800e60c <__sflush_r+0x8c>
 800e606:	4628      	mov	r0, r5
 800e608:	f7fe fc16 	bl	800ce38 <_free_r>
 800e60c:	2300      	movs	r3, #0
 800e60e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e610:	e00d      	b.n	800e62e <__sflush_r+0xae>
 800e612:	2301      	movs	r3, #1
 800e614:	4628      	mov	r0, r5
 800e616:	47b0      	blx	r6
 800e618:	4602      	mov	r2, r0
 800e61a:	1c50      	adds	r0, r2, #1
 800e61c:	d1c9      	bne.n	800e5b2 <__sflush_r+0x32>
 800e61e:	682b      	ldr	r3, [r5, #0]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d0c6      	beq.n	800e5b2 <__sflush_r+0x32>
 800e624:	2b1d      	cmp	r3, #29
 800e626:	d001      	beq.n	800e62c <__sflush_r+0xac>
 800e628:	2b16      	cmp	r3, #22
 800e62a:	d11e      	bne.n	800e66a <__sflush_r+0xea>
 800e62c:	602f      	str	r7, [r5, #0]
 800e62e:	2000      	movs	r0, #0
 800e630:	e022      	b.n	800e678 <__sflush_r+0xf8>
 800e632:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e636:	b21b      	sxth	r3, r3
 800e638:	e01b      	b.n	800e672 <__sflush_r+0xf2>
 800e63a:	690f      	ldr	r7, [r1, #16]
 800e63c:	2f00      	cmp	r7, #0
 800e63e:	d0f6      	beq.n	800e62e <__sflush_r+0xae>
 800e640:	0793      	lsls	r3, r2, #30
 800e642:	680e      	ldr	r6, [r1, #0]
 800e644:	bf08      	it	eq
 800e646:	694b      	ldreq	r3, [r1, #20]
 800e648:	600f      	str	r7, [r1, #0]
 800e64a:	bf18      	it	ne
 800e64c:	2300      	movne	r3, #0
 800e64e:	eba6 0807 	sub.w	r8, r6, r7
 800e652:	608b      	str	r3, [r1, #8]
 800e654:	f1b8 0f00 	cmp.w	r8, #0
 800e658:	dde9      	ble.n	800e62e <__sflush_r+0xae>
 800e65a:	6a21      	ldr	r1, [r4, #32]
 800e65c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e65e:	4643      	mov	r3, r8
 800e660:	463a      	mov	r2, r7
 800e662:	4628      	mov	r0, r5
 800e664:	47b0      	blx	r6
 800e666:	2800      	cmp	r0, #0
 800e668:	dc08      	bgt.n	800e67c <__sflush_r+0xfc>
 800e66a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e66e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e672:	81a3      	strh	r3, [r4, #12]
 800e674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e67c:	4407      	add	r7, r0
 800e67e:	eba8 0800 	sub.w	r8, r8, r0
 800e682:	e7e7      	b.n	800e654 <__sflush_r+0xd4>
 800e684:	dfbffffe 	.word	0xdfbffffe

0800e688 <_fflush_r>:
 800e688:	b538      	push	{r3, r4, r5, lr}
 800e68a:	690b      	ldr	r3, [r1, #16]
 800e68c:	4605      	mov	r5, r0
 800e68e:	460c      	mov	r4, r1
 800e690:	b913      	cbnz	r3, 800e698 <_fflush_r+0x10>
 800e692:	2500      	movs	r5, #0
 800e694:	4628      	mov	r0, r5
 800e696:	bd38      	pop	{r3, r4, r5, pc}
 800e698:	b118      	cbz	r0, 800e6a2 <_fflush_r+0x1a>
 800e69a:	6a03      	ldr	r3, [r0, #32]
 800e69c:	b90b      	cbnz	r3, 800e6a2 <_fflush_r+0x1a>
 800e69e:	f7fd fbab 	bl	800bdf8 <__sinit>
 800e6a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d0f3      	beq.n	800e692 <_fflush_r+0xa>
 800e6aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e6ac:	07d0      	lsls	r0, r2, #31
 800e6ae:	d404      	bmi.n	800e6ba <_fflush_r+0x32>
 800e6b0:	0599      	lsls	r1, r3, #22
 800e6b2:	d402      	bmi.n	800e6ba <_fflush_r+0x32>
 800e6b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e6b6:	f7fd fd36 	bl	800c126 <__retarget_lock_acquire_recursive>
 800e6ba:	4628      	mov	r0, r5
 800e6bc:	4621      	mov	r1, r4
 800e6be:	f7ff ff5f 	bl	800e580 <__sflush_r>
 800e6c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e6c4:	07da      	lsls	r2, r3, #31
 800e6c6:	4605      	mov	r5, r0
 800e6c8:	d4e4      	bmi.n	800e694 <_fflush_r+0xc>
 800e6ca:	89a3      	ldrh	r3, [r4, #12]
 800e6cc:	059b      	lsls	r3, r3, #22
 800e6ce:	d4e1      	bmi.n	800e694 <_fflush_r+0xc>
 800e6d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e6d2:	f7fd fd29 	bl	800c128 <__retarget_lock_release_recursive>
 800e6d6:	e7dd      	b.n	800e694 <_fflush_r+0xc>

0800e6d8 <fiprintf>:
 800e6d8:	b40e      	push	{r1, r2, r3}
 800e6da:	b503      	push	{r0, r1, lr}
 800e6dc:	4601      	mov	r1, r0
 800e6de:	ab03      	add	r3, sp, #12
 800e6e0:	4805      	ldr	r0, [pc, #20]	@ (800e6f8 <fiprintf+0x20>)
 800e6e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6e6:	6800      	ldr	r0, [r0, #0]
 800e6e8:	9301      	str	r3, [sp, #4]
 800e6ea:	f7ff fe31 	bl	800e350 <_vfiprintf_r>
 800e6ee:	b002      	add	sp, #8
 800e6f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6f4:	b003      	add	sp, #12
 800e6f6:	4770      	bx	lr
 800e6f8:	20000358 	.word	0x20000358

0800e6fc <__swbuf_r>:
 800e6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6fe:	460e      	mov	r6, r1
 800e700:	4614      	mov	r4, r2
 800e702:	4605      	mov	r5, r0
 800e704:	b118      	cbz	r0, 800e70e <__swbuf_r+0x12>
 800e706:	6a03      	ldr	r3, [r0, #32]
 800e708:	b90b      	cbnz	r3, 800e70e <__swbuf_r+0x12>
 800e70a:	f7fd fb75 	bl	800bdf8 <__sinit>
 800e70e:	69a3      	ldr	r3, [r4, #24]
 800e710:	60a3      	str	r3, [r4, #8]
 800e712:	89a3      	ldrh	r3, [r4, #12]
 800e714:	071a      	lsls	r2, r3, #28
 800e716:	d501      	bpl.n	800e71c <__swbuf_r+0x20>
 800e718:	6923      	ldr	r3, [r4, #16]
 800e71a:	b943      	cbnz	r3, 800e72e <__swbuf_r+0x32>
 800e71c:	4621      	mov	r1, r4
 800e71e:	4628      	mov	r0, r5
 800e720:	f000 f82a 	bl	800e778 <__swsetup_r>
 800e724:	b118      	cbz	r0, 800e72e <__swbuf_r+0x32>
 800e726:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e72a:	4638      	mov	r0, r7
 800e72c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e72e:	6823      	ldr	r3, [r4, #0]
 800e730:	6922      	ldr	r2, [r4, #16]
 800e732:	1a98      	subs	r0, r3, r2
 800e734:	6963      	ldr	r3, [r4, #20]
 800e736:	b2f6      	uxtb	r6, r6
 800e738:	4283      	cmp	r3, r0
 800e73a:	4637      	mov	r7, r6
 800e73c:	dc05      	bgt.n	800e74a <__swbuf_r+0x4e>
 800e73e:	4621      	mov	r1, r4
 800e740:	4628      	mov	r0, r5
 800e742:	f7ff ffa1 	bl	800e688 <_fflush_r>
 800e746:	2800      	cmp	r0, #0
 800e748:	d1ed      	bne.n	800e726 <__swbuf_r+0x2a>
 800e74a:	68a3      	ldr	r3, [r4, #8]
 800e74c:	3b01      	subs	r3, #1
 800e74e:	60a3      	str	r3, [r4, #8]
 800e750:	6823      	ldr	r3, [r4, #0]
 800e752:	1c5a      	adds	r2, r3, #1
 800e754:	6022      	str	r2, [r4, #0]
 800e756:	701e      	strb	r6, [r3, #0]
 800e758:	6962      	ldr	r2, [r4, #20]
 800e75a:	1c43      	adds	r3, r0, #1
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d004      	beq.n	800e76a <__swbuf_r+0x6e>
 800e760:	89a3      	ldrh	r3, [r4, #12]
 800e762:	07db      	lsls	r3, r3, #31
 800e764:	d5e1      	bpl.n	800e72a <__swbuf_r+0x2e>
 800e766:	2e0a      	cmp	r6, #10
 800e768:	d1df      	bne.n	800e72a <__swbuf_r+0x2e>
 800e76a:	4621      	mov	r1, r4
 800e76c:	4628      	mov	r0, r5
 800e76e:	f7ff ff8b 	bl	800e688 <_fflush_r>
 800e772:	2800      	cmp	r0, #0
 800e774:	d0d9      	beq.n	800e72a <__swbuf_r+0x2e>
 800e776:	e7d6      	b.n	800e726 <__swbuf_r+0x2a>

0800e778 <__swsetup_r>:
 800e778:	b538      	push	{r3, r4, r5, lr}
 800e77a:	4b29      	ldr	r3, [pc, #164]	@ (800e820 <__swsetup_r+0xa8>)
 800e77c:	4605      	mov	r5, r0
 800e77e:	6818      	ldr	r0, [r3, #0]
 800e780:	460c      	mov	r4, r1
 800e782:	b118      	cbz	r0, 800e78c <__swsetup_r+0x14>
 800e784:	6a03      	ldr	r3, [r0, #32]
 800e786:	b90b      	cbnz	r3, 800e78c <__swsetup_r+0x14>
 800e788:	f7fd fb36 	bl	800bdf8 <__sinit>
 800e78c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e790:	0719      	lsls	r1, r3, #28
 800e792:	d422      	bmi.n	800e7da <__swsetup_r+0x62>
 800e794:	06da      	lsls	r2, r3, #27
 800e796:	d407      	bmi.n	800e7a8 <__swsetup_r+0x30>
 800e798:	2209      	movs	r2, #9
 800e79a:	602a      	str	r2, [r5, #0]
 800e79c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7a0:	81a3      	strh	r3, [r4, #12]
 800e7a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e7a6:	e033      	b.n	800e810 <__swsetup_r+0x98>
 800e7a8:	0758      	lsls	r0, r3, #29
 800e7aa:	d512      	bpl.n	800e7d2 <__swsetup_r+0x5a>
 800e7ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e7ae:	b141      	cbz	r1, 800e7c2 <__swsetup_r+0x4a>
 800e7b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e7b4:	4299      	cmp	r1, r3
 800e7b6:	d002      	beq.n	800e7be <__swsetup_r+0x46>
 800e7b8:	4628      	mov	r0, r5
 800e7ba:	f7fe fb3d 	bl	800ce38 <_free_r>
 800e7be:	2300      	movs	r3, #0
 800e7c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e7c2:	89a3      	ldrh	r3, [r4, #12]
 800e7c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e7c8:	81a3      	strh	r3, [r4, #12]
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	6063      	str	r3, [r4, #4]
 800e7ce:	6923      	ldr	r3, [r4, #16]
 800e7d0:	6023      	str	r3, [r4, #0]
 800e7d2:	89a3      	ldrh	r3, [r4, #12]
 800e7d4:	f043 0308 	orr.w	r3, r3, #8
 800e7d8:	81a3      	strh	r3, [r4, #12]
 800e7da:	6923      	ldr	r3, [r4, #16]
 800e7dc:	b94b      	cbnz	r3, 800e7f2 <__swsetup_r+0x7a>
 800e7de:	89a3      	ldrh	r3, [r4, #12]
 800e7e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e7e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e7e8:	d003      	beq.n	800e7f2 <__swsetup_r+0x7a>
 800e7ea:	4621      	mov	r1, r4
 800e7ec:	4628      	mov	r0, r5
 800e7ee:	f000 f8b2 	bl	800e956 <__smakebuf_r>
 800e7f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7f6:	f013 0201 	ands.w	r2, r3, #1
 800e7fa:	d00a      	beq.n	800e812 <__swsetup_r+0x9a>
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	60a2      	str	r2, [r4, #8]
 800e800:	6962      	ldr	r2, [r4, #20]
 800e802:	4252      	negs	r2, r2
 800e804:	61a2      	str	r2, [r4, #24]
 800e806:	6922      	ldr	r2, [r4, #16]
 800e808:	b942      	cbnz	r2, 800e81c <__swsetup_r+0xa4>
 800e80a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e80e:	d1c5      	bne.n	800e79c <__swsetup_r+0x24>
 800e810:	bd38      	pop	{r3, r4, r5, pc}
 800e812:	0799      	lsls	r1, r3, #30
 800e814:	bf58      	it	pl
 800e816:	6962      	ldrpl	r2, [r4, #20]
 800e818:	60a2      	str	r2, [r4, #8]
 800e81a:	e7f4      	b.n	800e806 <__swsetup_r+0x8e>
 800e81c:	2000      	movs	r0, #0
 800e81e:	e7f7      	b.n	800e810 <__swsetup_r+0x98>
 800e820:	20000358 	.word	0x20000358

0800e824 <memmove>:
 800e824:	4288      	cmp	r0, r1
 800e826:	b510      	push	{r4, lr}
 800e828:	eb01 0402 	add.w	r4, r1, r2
 800e82c:	d902      	bls.n	800e834 <memmove+0x10>
 800e82e:	4284      	cmp	r4, r0
 800e830:	4623      	mov	r3, r4
 800e832:	d807      	bhi.n	800e844 <memmove+0x20>
 800e834:	1e43      	subs	r3, r0, #1
 800e836:	42a1      	cmp	r1, r4
 800e838:	d008      	beq.n	800e84c <memmove+0x28>
 800e83a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e83e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e842:	e7f8      	b.n	800e836 <memmove+0x12>
 800e844:	4402      	add	r2, r0
 800e846:	4601      	mov	r1, r0
 800e848:	428a      	cmp	r2, r1
 800e84a:	d100      	bne.n	800e84e <memmove+0x2a>
 800e84c:	bd10      	pop	{r4, pc}
 800e84e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e856:	e7f7      	b.n	800e848 <memmove+0x24>

0800e858 <_sbrk_r>:
 800e858:	b538      	push	{r3, r4, r5, lr}
 800e85a:	4d06      	ldr	r5, [pc, #24]	@ (800e874 <_sbrk_r+0x1c>)
 800e85c:	2300      	movs	r3, #0
 800e85e:	4604      	mov	r4, r0
 800e860:	4608      	mov	r0, r1
 800e862:	602b      	str	r3, [r5, #0]
 800e864:	f7f3 fa7a 	bl	8001d5c <_sbrk>
 800e868:	1c43      	adds	r3, r0, #1
 800e86a:	d102      	bne.n	800e872 <_sbrk_r+0x1a>
 800e86c:	682b      	ldr	r3, [r5, #0]
 800e86e:	b103      	cbz	r3, 800e872 <_sbrk_r+0x1a>
 800e870:	6023      	str	r3, [r4, #0]
 800e872:	bd38      	pop	{r3, r4, r5, pc}
 800e874:	20000964 	.word	0x20000964

0800e878 <abort>:
 800e878:	b508      	push	{r3, lr}
 800e87a:	2006      	movs	r0, #6
 800e87c:	f000 f8d0 	bl	800ea20 <raise>
 800e880:	2001      	movs	r0, #1
 800e882:	f7f3 f9f3 	bl	8001c6c <_exit>

0800e886 <_calloc_r>:
 800e886:	b570      	push	{r4, r5, r6, lr}
 800e888:	fba1 5402 	umull	r5, r4, r1, r2
 800e88c:	b93c      	cbnz	r4, 800e89e <_calloc_r+0x18>
 800e88e:	4629      	mov	r1, r5
 800e890:	f7fe fe80 	bl	800d594 <_malloc_r>
 800e894:	4606      	mov	r6, r0
 800e896:	b928      	cbnz	r0, 800e8a4 <_calloc_r+0x1e>
 800e898:	2600      	movs	r6, #0
 800e89a:	4630      	mov	r0, r6
 800e89c:	bd70      	pop	{r4, r5, r6, pc}
 800e89e:	220c      	movs	r2, #12
 800e8a0:	6002      	str	r2, [r0, #0]
 800e8a2:	e7f9      	b.n	800e898 <_calloc_r+0x12>
 800e8a4:	462a      	mov	r2, r5
 800e8a6:	4621      	mov	r1, r4
 800e8a8:	f7fd fb51 	bl	800bf4e <memset>
 800e8ac:	e7f5      	b.n	800e89a <_calloc_r+0x14>

0800e8ae <_realloc_r>:
 800e8ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8b2:	4680      	mov	r8, r0
 800e8b4:	4615      	mov	r5, r2
 800e8b6:	460c      	mov	r4, r1
 800e8b8:	b921      	cbnz	r1, 800e8c4 <_realloc_r+0x16>
 800e8ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8be:	4611      	mov	r1, r2
 800e8c0:	f7fe be68 	b.w	800d594 <_malloc_r>
 800e8c4:	b92a      	cbnz	r2, 800e8d2 <_realloc_r+0x24>
 800e8c6:	f7fe fab7 	bl	800ce38 <_free_r>
 800e8ca:	2400      	movs	r4, #0
 800e8cc:	4620      	mov	r0, r4
 800e8ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8d2:	f000 f8e3 	bl	800ea9c <_malloc_usable_size_r>
 800e8d6:	4285      	cmp	r5, r0
 800e8d8:	4606      	mov	r6, r0
 800e8da:	d802      	bhi.n	800e8e2 <_realloc_r+0x34>
 800e8dc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e8e0:	d8f4      	bhi.n	800e8cc <_realloc_r+0x1e>
 800e8e2:	4629      	mov	r1, r5
 800e8e4:	4640      	mov	r0, r8
 800e8e6:	f7fe fe55 	bl	800d594 <_malloc_r>
 800e8ea:	4607      	mov	r7, r0
 800e8ec:	2800      	cmp	r0, #0
 800e8ee:	d0ec      	beq.n	800e8ca <_realloc_r+0x1c>
 800e8f0:	42b5      	cmp	r5, r6
 800e8f2:	462a      	mov	r2, r5
 800e8f4:	4621      	mov	r1, r4
 800e8f6:	bf28      	it	cs
 800e8f8:	4632      	movcs	r2, r6
 800e8fa:	f7fd fc16 	bl	800c12a <memcpy>
 800e8fe:	4621      	mov	r1, r4
 800e900:	4640      	mov	r0, r8
 800e902:	f7fe fa99 	bl	800ce38 <_free_r>
 800e906:	463c      	mov	r4, r7
 800e908:	e7e0      	b.n	800e8cc <_realloc_r+0x1e>

0800e90a <__swhatbuf_r>:
 800e90a:	b570      	push	{r4, r5, r6, lr}
 800e90c:	460c      	mov	r4, r1
 800e90e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e912:	2900      	cmp	r1, #0
 800e914:	b096      	sub	sp, #88	@ 0x58
 800e916:	4615      	mov	r5, r2
 800e918:	461e      	mov	r6, r3
 800e91a:	da0d      	bge.n	800e938 <__swhatbuf_r+0x2e>
 800e91c:	89a3      	ldrh	r3, [r4, #12]
 800e91e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e922:	f04f 0100 	mov.w	r1, #0
 800e926:	bf14      	ite	ne
 800e928:	2340      	movne	r3, #64	@ 0x40
 800e92a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e92e:	2000      	movs	r0, #0
 800e930:	6031      	str	r1, [r6, #0]
 800e932:	602b      	str	r3, [r5, #0]
 800e934:	b016      	add	sp, #88	@ 0x58
 800e936:	bd70      	pop	{r4, r5, r6, pc}
 800e938:	466a      	mov	r2, sp
 800e93a:	f000 f879 	bl	800ea30 <_fstat_r>
 800e93e:	2800      	cmp	r0, #0
 800e940:	dbec      	blt.n	800e91c <__swhatbuf_r+0x12>
 800e942:	9901      	ldr	r1, [sp, #4]
 800e944:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e948:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e94c:	4259      	negs	r1, r3
 800e94e:	4159      	adcs	r1, r3
 800e950:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e954:	e7eb      	b.n	800e92e <__swhatbuf_r+0x24>

0800e956 <__smakebuf_r>:
 800e956:	898b      	ldrh	r3, [r1, #12]
 800e958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e95a:	079d      	lsls	r5, r3, #30
 800e95c:	4606      	mov	r6, r0
 800e95e:	460c      	mov	r4, r1
 800e960:	d507      	bpl.n	800e972 <__smakebuf_r+0x1c>
 800e962:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e966:	6023      	str	r3, [r4, #0]
 800e968:	6123      	str	r3, [r4, #16]
 800e96a:	2301      	movs	r3, #1
 800e96c:	6163      	str	r3, [r4, #20]
 800e96e:	b003      	add	sp, #12
 800e970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e972:	ab01      	add	r3, sp, #4
 800e974:	466a      	mov	r2, sp
 800e976:	f7ff ffc8 	bl	800e90a <__swhatbuf_r>
 800e97a:	9f00      	ldr	r7, [sp, #0]
 800e97c:	4605      	mov	r5, r0
 800e97e:	4639      	mov	r1, r7
 800e980:	4630      	mov	r0, r6
 800e982:	f7fe fe07 	bl	800d594 <_malloc_r>
 800e986:	b948      	cbnz	r0, 800e99c <__smakebuf_r+0x46>
 800e988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e98c:	059a      	lsls	r2, r3, #22
 800e98e:	d4ee      	bmi.n	800e96e <__smakebuf_r+0x18>
 800e990:	f023 0303 	bic.w	r3, r3, #3
 800e994:	f043 0302 	orr.w	r3, r3, #2
 800e998:	81a3      	strh	r3, [r4, #12]
 800e99a:	e7e2      	b.n	800e962 <__smakebuf_r+0xc>
 800e99c:	89a3      	ldrh	r3, [r4, #12]
 800e99e:	6020      	str	r0, [r4, #0]
 800e9a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9a4:	81a3      	strh	r3, [r4, #12]
 800e9a6:	9b01      	ldr	r3, [sp, #4]
 800e9a8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e9ac:	b15b      	cbz	r3, 800e9c6 <__smakebuf_r+0x70>
 800e9ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9b2:	4630      	mov	r0, r6
 800e9b4:	f000 f84e 	bl	800ea54 <_isatty_r>
 800e9b8:	b128      	cbz	r0, 800e9c6 <__smakebuf_r+0x70>
 800e9ba:	89a3      	ldrh	r3, [r4, #12]
 800e9bc:	f023 0303 	bic.w	r3, r3, #3
 800e9c0:	f043 0301 	orr.w	r3, r3, #1
 800e9c4:	81a3      	strh	r3, [r4, #12]
 800e9c6:	89a3      	ldrh	r3, [r4, #12]
 800e9c8:	431d      	orrs	r5, r3
 800e9ca:	81a5      	strh	r5, [r4, #12]
 800e9cc:	e7cf      	b.n	800e96e <__smakebuf_r+0x18>

0800e9ce <_raise_r>:
 800e9ce:	291f      	cmp	r1, #31
 800e9d0:	b538      	push	{r3, r4, r5, lr}
 800e9d2:	4605      	mov	r5, r0
 800e9d4:	460c      	mov	r4, r1
 800e9d6:	d904      	bls.n	800e9e2 <_raise_r+0x14>
 800e9d8:	2316      	movs	r3, #22
 800e9da:	6003      	str	r3, [r0, #0]
 800e9dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e9e0:	bd38      	pop	{r3, r4, r5, pc}
 800e9e2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e9e4:	b112      	cbz	r2, 800e9ec <_raise_r+0x1e>
 800e9e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e9ea:	b94b      	cbnz	r3, 800ea00 <_raise_r+0x32>
 800e9ec:	4628      	mov	r0, r5
 800e9ee:	f000 f853 	bl	800ea98 <_getpid_r>
 800e9f2:	4622      	mov	r2, r4
 800e9f4:	4601      	mov	r1, r0
 800e9f6:	4628      	mov	r0, r5
 800e9f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9fc:	f000 b83a 	b.w	800ea74 <_kill_r>
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d00a      	beq.n	800ea1a <_raise_r+0x4c>
 800ea04:	1c59      	adds	r1, r3, #1
 800ea06:	d103      	bne.n	800ea10 <_raise_r+0x42>
 800ea08:	2316      	movs	r3, #22
 800ea0a:	6003      	str	r3, [r0, #0]
 800ea0c:	2001      	movs	r0, #1
 800ea0e:	e7e7      	b.n	800e9e0 <_raise_r+0x12>
 800ea10:	2100      	movs	r1, #0
 800ea12:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ea16:	4620      	mov	r0, r4
 800ea18:	4798      	blx	r3
 800ea1a:	2000      	movs	r0, #0
 800ea1c:	e7e0      	b.n	800e9e0 <_raise_r+0x12>
	...

0800ea20 <raise>:
 800ea20:	4b02      	ldr	r3, [pc, #8]	@ (800ea2c <raise+0xc>)
 800ea22:	4601      	mov	r1, r0
 800ea24:	6818      	ldr	r0, [r3, #0]
 800ea26:	f7ff bfd2 	b.w	800e9ce <_raise_r>
 800ea2a:	bf00      	nop
 800ea2c:	20000358 	.word	0x20000358

0800ea30 <_fstat_r>:
 800ea30:	b538      	push	{r3, r4, r5, lr}
 800ea32:	4d07      	ldr	r5, [pc, #28]	@ (800ea50 <_fstat_r+0x20>)
 800ea34:	2300      	movs	r3, #0
 800ea36:	4604      	mov	r4, r0
 800ea38:	4608      	mov	r0, r1
 800ea3a:	4611      	mov	r1, r2
 800ea3c:	602b      	str	r3, [r5, #0]
 800ea3e:	f7f3 f965 	bl	8001d0c <_fstat>
 800ea42:	1c43      	adds	r3, r0, #1
 800ea44:	d102      	bne.n	800ea4c <_fstat_r+0x1c>
 800ea46:	682b      	ldr	r3, [r5, #0]
 800ea48:	b103      	cbz	r3, 800ea4c <_fstat_r+0x1c>
 800ea4a:	6023      	str	r3, [r4, #0]
 800ea4c:	bd38      	pop	{r3, r4, r5, pc}
 800ea4e:	bf00      	nop
 800ea50:	20000964 	.word	0x20000964

0800ea54 <_isatty_r>:
 800ea54:	b538      	push	{r3, r4, r5, lr}
 800ea56:	4d06      	ldr	r5, [pc, #24]	@ (800ea70 <_isatty_r+0x1c>)
 800ea58:	2300      	movs	r3, #0
 800ea5a:	4604      	mov	r4, r0
 800ea5c:	4608      	mov	r0, r1
 800ea5e:	602b      	str	r3, [r5, #0]
 800ea60:	f7f3 f964 	bl	8001d2c <_isatty>
 800ea64:	1c43      	adds	r3, r0, #1
 800ea66:	d102      	bne.n	800ea6e <_isatty_r+0x1a>
 800ea68:	682b      	ldr	r3, [r5, #0]
 800ea6a:	b103      	cbz	r3, 800ea6e <_isatty_r+0x1a>
 800ea6c:	6023      	str	r3, [r4, #0]
 800ea6e:	bd38      	pop	{r3, r4, r5, pc}
 800ea70:	20000964 	.word	0x20000964

0800ea74 <_kill_r>:
 800ea74:	b538      	push	{r3, r4, r5, lr}
 800ea76:	4d07      	ldr	r5, [pc, #28]	@ (800ea94 <_kill_r+0x20>)
 800ea78:	2300      	movs	r3, #0
 800ea7a:	4604      	mov	r4, r0
 800ea7c:	4608      	mov	r0, r1
 800ea7e:	4611      	mov	r1, r2
 800ea80:	602b      	str	r3, [r5, #0]
 800ea82:	f7f3 f8e3 	bl	8001c4c <_kill>
 800ea86:	1c43      	adds	r3, r0, #1
 800ea88:	d102      	bne.n	800ea90 <_kill_r+0x1c>
 800ea8a:	682b      	ldr	r3, [r5, #0]
 800ea8c:	b103      	cbz	r3, 800ea90 <_kill_r+0x1c>
 800ea8e:	6023      	str	r3, [r4, #0]
 800ea90:	bd38      	pop	{r3, r4, r5, pc}
 800ea92:	bf00      	nop
 800ea94:	20000964 	.word	0x20000964

0800ea98 <_getpid_r>:
 800ea98:	f7f3 b8d0 	b.w	8001c3c <_getpid>

0800ea9c <_malloc_usable_size_r>:
 800ea9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eaa0:	1f18      	subs	r0, r3, #4
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	bfbc      	itt	lt
 800eaa6:	580b      	ldrlt	r3, [r1, r0]
 800eaa8:	18c0      	addlt	r0, r0, r3
 800eaaa:	4770      	bx	lr

0800eaac <_init>:
 800eaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaae:	bf00      	nop
 800eab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eab2:	bc08      	pop	{r3}
 800eab4:	469e      	mov	lr, r3
 800eab6:	4770      	bx	lr

0800eab8 <_fini>:
 800eab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaba:	bf00      	nop
 800eabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eabe:	bc08      	pop	{r3}
 800eac0:	469e      	mov	lr, r3
 800eac2:	4770      	bx	lr
