
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8c4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800eaa8  0800eaa8  0000faa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f00c  0800f00c  000113a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f00c  0800f00c  0001000c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f014  0800f014  000113a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f014  0800f014  00010014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f018  0800f018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a8  20000000  0800f01c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  200003a8  0800f3c4  000113a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000980  0800f3c4  00011980  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000113a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf09  00000000  00000000  000113d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003894  00000000  00000000  0002d2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  00030b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001178  00000000  00000000  00032218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a588  00000000  00000000  00033390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001afb1  00000000  00000000  0005d918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001147a6  00000000  00000000  000788c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018d06f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007594  00000000  00000000  0018d0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  00194648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200003a8 	.word	0x200003a8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ea8c 	.word	0x0800ea8c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200003ac 	.word	0x200003ac
 800021c:	0800ea8c 	.word	0x0800ea8c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d0c:	f000 b9a0 	b.w	8001050 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d14e      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da0:	4694      	mov	ip, r2
 8000da2:	458c      	cmp	ip, r1
 8000da4:	4686      	mov	lr, r0
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	d962      	bls.n	8000e72 <__udivmoddi4+0xde>
 8000dac:	b14a      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	4091      	lsls	r1, r2
 8000db4:	fa20 f303 	lsr.w	r3, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f f68c 	uxth.w	r6, ip
 8000dca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb04 f106 	mul.w	r1, r4, r6
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dea:	f080 8112 	bcs.w	8001012 <__udivmoddi4+0x27e>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 810f 	bls.w	8001012 <__udivmoddi4+0x27e>
 8000df4:	3c02      	subs	r4, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a59      	subs	r1, r3, r1
 8000dfa:	fa1f f38e 	uxth.w	r3, lr
 8000dfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e02:	fb07 1110 	mls	r1, r7, r0, r1
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f606 	mul.w	r6, r0, r6
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x94>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000e1a:	f080 80fc 	bcs.w	8001016 <__udivmoddi4+0x282>
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	f240 80f9 	bls.w	8001016 <__udivmoddi4+0x282>
 8000e24:	4463      	add	r3, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11d      	cbz	r5, 8000e3a <__udivmoddi4+0xa6>
 8000e32:	40d3      	lsrs	r3, r2
 8000e34:	2200      	movs	r2, #0
 8000e36:	e9c5 3200 	strd	r3, r2, [r5]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d905      	bls.n	8000e4e <__udivmoddi4+0xba>
 8000e42:	b10d      	cbz	r5, 8000e48 <__udivmoddi4+0xb4>
 8000e44:	e9c5 0100 	strd	r0, r1, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e7f5      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e4e:	fab3 f183 	clz	r1, r3
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d146      	bne.n	8000ee4 <__udivmoddi4+0x150>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d302      	bcc.n	8000e60 <__udivmoddi4+0xcc>
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	f0c0 80f0 	bcc.w	8001040 <__udivmoddi4+0x2ac>
 8000e60:	1a86      	subs	r6, r0, r2
 8000e62:	eb64 0303 	sbc.w	r3, r4, r3
 8000e66:	2001      	movs	r0, #1
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d0e6      	beq.n	8000e3a <__udivmoddi4+0xa6>
 8000e6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e70:	e7e3      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	f040 8090 	bne.w	8000f98 <__udivmoddi4+0x204>
 8000e78:	eba1 040c 	sub.w	r4, r1, ip
 8000e7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e80:	fa1f f78c 	uxth.w	r7, ip
 8000e84:	2101      	movs	r1, #1
 8000e86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e96:	fb07 f006 	mul.w	r0, r7, r6
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x11c>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x11a>
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	f200 80cd 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000eae:	4626      	mov	r6, r4
 8000eb0:	1a1c      	subs	r4, r3, r0
 8000eb2:	fa1f f38e 	uxth.w	r3, lr
 8000eb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eba:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec2:	fb00 f707 	mul.w	r7, r0, r7
 8000ec6:	429f      	cmp	r7, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x148>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x146>
 8000ed4:	429f      	cmp	r7, r3
 8000ed6:	f200 80b0 	bhi.w	800103a <__udivmoddi4+0x2a6>
 8000eda:	4620      	mov	r0, r4
 8000edc:	1bdb      	subs	r3, r3, r7
 8000ede:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ee2:	e7a5      	b.n	8000e30 <__udivmoddi4+0x9c>
 8000ee4:	f1c1 0620 	rsb	r6, r1, #32
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	fa22 f706 	lsr.w	r7, r2, r6
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ef4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ef8:	ea43 030c 	orr.w	r3, r3, ip
 8000efc:	40f4      	lsrs	r4, r6
 8000efe:	fa00 f801 	lsl.w	r8, r0, r1
 8000f02:	0c38      	lsrs	r0, r7, #16
 8000f04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f08:	fbb4 fef0 	udiv	lr, r4, r0
 8000f0c:	fa1f fc87 	uxth.w	ip, r7
 8000f10:	fb00 441e 	mls	r4, r0, lr, r4
 8000f14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f18:	fb0e f90c 	mul.w	r9, lr, ip
 8000f1c:	45a1      	cmp	r9, r4
 8000f1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f22:	d90a      	bls.n	8000f3a <__udivmoddi4+0x1a6>
 8000f24:	193c      	adds	r4, r7, r4
 8000f26:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f2a:	f080 8084 	bcs.w	8001036 <__udivmoddi4+0x2a2>
 8000f2e:	45a1      	cmp	r9, r4
 8000f30:	f240 8081 	bls.w	8001036 <__udivmoddi4+0x2a2>
 8000f34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	eba4 0409 	sub.w	r4, r4, r9
 8000f3e:	fa1f f983 	uxth.w	r9, r3
 8000f42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f46:	fb00 4413 	mls	r4, r0, r3, r4
 8000f4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f52:	45a4      	cmp	ip, r4
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x1d2>
 8000f56:	193c      	adds	r4, r7, r4
 8000f58:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f5c:	d267      	bcs.n	800102e <__udivmoddi4+0x29a>
 8000f5e:	45a4      	cmp	ip, r4
 8000f60:	d965      	bls.n	800102e <__udivmoddi4+0x29a>
 8000f62:	3b02      	subs	r3, #2
 8000f64:	443c      	add	r4, r7
 8000f66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f6e:	eba4 040c 	sub.w	r4, r4, ip
 8000f72:	429c      	cmp	r4, r3
 8000f74:	46ce      	mov	lr, r9
 8000f76:	469c      	mov	ip, r3
 8000f78:	d351      	bcc.n	800101e <__udivmoddi4+0x28a>
 8000f7a:	d04e      	beq.n	800101a <__udivmoddi4+0x286>
 8000f7c:	b155      	cbz	r5, 8000f94 <__udivmoddi4+0x200>
 8000f7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f82:	eb64 040c 	sbc.w	r4, r4, ip
 8000f86:	fa04 f606 	lsl.w	r6, r4, r6
 8000f8a:	40cb      	lsrs	r3, r1
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	e9c5 6400 	strd	r6, r4, [r5]
 8000f94:	2100      	movs	r1, #0
 8000f96:	e750      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000f98:	f1c2 0320 	rsb	r3, r2, #32
 8000f9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000fa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fa8:	4094      	lsls	r4, r2
 8000faa:	430c      	orrs	r4, r1
 8000fac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fb4:	fa1f f78c 	uxth.w	r7, ip
 8000fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fc0:	0c23      	lsrs	r3, r4, #16
 8000fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc6:	fb00 f107 	mul.w	r1, r0, r7
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	d908      	bls.n	8000fe0 <__udivmoddi4+0x24c>
 8000fce:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fd6:	d22c      	bcs.n	8001032 <__udivmoddi4+0x29e>
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d92a      	bls.n	8001032 <__udivmoddi4+0x29e>
 8000fdc:	3802      	subs	r0, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	b2a4      	uxth	r4, r4
 8000fe4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fe8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ff0:	fb01 f307 	mul.w	r3, r1, r7
 8000ff4:	42a3      	cmp	r3, r4
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x276>
 8000ff8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ffc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001000:	d213      	bcs.n	800102a <__udivmoddi4+0x296>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d911      	bls.n	800102a <__udivmoddi4+0x296>
 8001006:	3902      	subs	r1, #2
 8001008:	4464      	add	r4, ip
 800100a:	1ae4      	subs	r4, r4, r3
 800100c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001010:	e739      	b.n	8000e86 <__udivmoddi4+0xf2>
 8001012:	4604      	mov	r4, r0
 8001014:	e6f0      	b.n	8000df8 <__udivmoddi4+0x64>
 8001016:	4608      	mov	r0, r1
 8001018:	e706      	b.n	8000e28 <__udivmoddi4+0x94>
 800101a:	45c8      	cmp	r8, r9
 800101c:	d2ae      	bcs.n	8000f7c <__udivmoddi4+0x1e8>
 800101e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001022:	eb63 0c07 	sbc.w	ip, r3, r7
 8001026:	3801      	subs	r0, #1
 8001028:	e7a8      	b.n	8000f7c <__udivmoddi4+0x1e8>
 800102a:	4631      	mov	r1, r6
 800102c:	e7ed      	b.n	800100a <__udivmoddi4+0x276>
 800102e:	4603      	mov	r3, r0
 8001030:	e799      	b.n	8000f66 <__udivmoddi4+0x1d2>
 8001032:	4630      	mov	r0, r6
 8001034:	e7d4      	b.n	8000fe0 <__udivmoddi4+0x24c>
 8001036:	46d6      	mov	lr, sl
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1a6>
 800103a:	4463      	add	r3, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e74d      	b.n	8000edc <__udivmoddi4+0x148>
 8001040:	4606      	mov	r6, r0
 8001042:	4623      	mov	r3, r4
 8001044:	4608      	mov	r0, r1
 8001046:	e70f      	b.n	8000e68 <__udivmoddi4+0xd4>
 8001048:	3e02      	subs	r6, #2
 800104a:	4463      	add	r3, ip
 800104c:	e730      	b.n	8000eb0 <__udivmoddi4+0x11c>
 800104e:	bf00      	nop

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	@ 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800105a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	2220      	movs	r2, #32
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f00a ff5e 	bl	800bf2e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001072:	4b33      	ldr	r3, [pc, #204]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001074:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001078:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800107a:	4b31      	ldr	r3, [pc, #196]	@ (8001140 <MX_ADC1_Init+0xec>)
 800107c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001080:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001082:	4b2f      	ldr	r3, [pc, #188]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001088:	4b2d      	ldr	r3, [pc, #180]	@ (8001140 <MX_ADC1_Init+0xec>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800108e:	4b2c      	ldr	r3, [pc, #176]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001094:	4b2a      	ldr	r3, [pc, #168]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109a:	4b29      	ldr	r3, [pc, #164]	@ (8001140 <MX_ADC1_Init+0xec>)
 800109c:	2204      	movs	r2, #4
 800109e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010a0:	4b27      	ldr	r3, [pc, #156]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010a6:	4b26      	ldr	r3, [pc, #152]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80010ac:	4b24      	ldr	r3, [pc, #144]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b2:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80010ba:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010bc:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 80010c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010d8:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e0:	4817      	ldr	r0, [pc, #92]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010e2:	f001 fe67 	bl	8002db4 <HAL_ADC_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80010ec:	f000 fc7e 	bl	80019ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f8:	4619      	mov	r1, r3
 80010fa:	4811      	ldr	r0, [pc, #68]	@ (8001140 <MX_ADC1_Init+0xec>)
 80010fc:	f003 f9ea 	bl	80044d4 <HAL_ADCEx_MultiModeConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001106:	f000 fc71 	bl	80019ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <MX_ADC1_Init+0xf0>)
 800110c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110e:	2306      	movs	r3, #6
 8001110:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001116:	237f      	movs	r3, #127	@ 0x7f
 8001118:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800111a:	2304      	movs	r3, #4
 800111c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	4619      	mov	r1, r3
 8001126:	4806      	ldr	r0, [pc, #24]	@ (8001140 <MX_ADC1_Init+0xec>)
 8001128:	f002 fb58 	bl	80037dc <HAL_ADC_ConfigChannel>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001132:	f000 fc5b 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	3730      	adds	r7, #48	@ 0x30
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200003c4 	.word	0x200003c4
 8001144:	08600004 	.word	0x08600004

08001148 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800114e:	463b      	mov	r3, r7
 8001150:	2220      	movs	r2, #32
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f00a feea 	bl	800bf2e <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800115a:	4b2b      	ldr	r3, [pc, #172]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800115c:	4a2b      	ldr	r2, [pc, #172]	@ (800120c <MX_ADC2_Init+0xc4>)
 800115e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001160:	4b29      	ldr	r3, [pc, #164]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001162:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001166:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001168:	4b27      	ldr	r3, [pc, #156]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800116e:	4b26      	ldr	r3, [pc, #152]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001174:	4b24      	ldr	r3, [pc, #144]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800117a:	4b23      	ldr	r3, [pc, #140]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001180:	4b21      	ldr	r3, [pc, #132]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001182:	2204      	movs	r2, #4
 8001184:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001186:	4b20      	ldr	r3, [pc, #128]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001188:	2200      	movs	r2, #0
 800118a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800118c:	4b1e      	ldr	r3, [pc, #120]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800118e:	2200      	movs	r2, #0
 8001190:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001192:	4b1d      	ldr	r3, [pc, #116]	@ (8001208 <MX_ADC2_Init+0xc0>)
 8001194:	2201      	movs	r2, #1
 8001196:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001198:	4b1b      	ldr	r3, [pc, #108]	@ (8001208 <MX_ADC2_Init+0xc0>)
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a0:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a6:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011ac:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011c2:	4811      	ldr	r0, [pc, #68]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011c4:	f001 fdf6 	bl	8002db4 <HAL_ADC_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80011ce:	f000 fc0d 	bl	80019ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <MX_ADC2_Init+0xc8>)
 80011d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d6:	2306      	movs	r3, #6
 80011d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011de:	237f      	movs	r3, #127	@ 0x7f
 80011e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011e2:	2304      	movs	r3, #4
 80011e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011ea:	463b      	mov	r3, r7
 80011ec:	4619      	mov	r1, r3
 80011ee:	4806      	ldr	r0, [pc, #24]	@ (8001208 <MX_ADC2_Init+0xc0>)
 80011f0:	f002 faf4 	bl	80037dc <HAL_ADC_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80011fa:	f000 fbf7 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	3720      	adds	r7, #32
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000430 	.word	0x20000430
 800120c:	50000100 	.word	0x50000100
 8001210:	19200040 	.word	0x19200040

08001214 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b0a4      	sub	sp, #144	@ 0x90
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800122c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001230:	2254      	movs	r2, #84	@ 0x54
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f00a fe7a 	bl	800bf2e <memset>
  if(adcHandle->Instance==ADC1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001242:	f040 80a8 	bne.w	8001396 <HAL_ADC_MspInit+0x182>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800124a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800124c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001250:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001252:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001256:	4618      	mov	r0, r3
 8001258:	f004 fe2e 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001262:	f000 fbc3 	bl	80019ec <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001266:	4b81      	ldr	r3, [pc, #516]	@ (800146c <HAL_ADC_MspInit+0x258>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	4a7f      	ldr	r2, [pc, #508]	@ (800146c <HAL_ADC_MspInit+0x258>)
 800126e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001270:	4b7e      	ldr	r3, [pc, #504]	@ (800146c <HAL_ADC_MspInit+0x258>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d10b      	bne.n	8001290 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001278:	4b7d      	ldr	r3, [pc, #500]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127c:	4a7c      	ldr	r2, [pc, #496]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 800127e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001282:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001284:	4b7a      	ldr	r3, [pc, #488]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001290:	4b77      	ldr	r3, [pc, #476]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001294:	4a76      	ldr	r2, [pc, #472]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129c:	4b74      	ldr	r3, [pc, #464]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	623b      	str	r3, [r7, #32]
 80012a6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4b71      	ldr	r3, [pc, #452]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ac:	4a70      	ldr	r2, [pc, #448]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b4:	4b6e      	ldr	r3, [pc, #440]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c4:	4a6a      	ldr	r2, [pc, #424]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012cc:	4b68      	ldr	r3, [pc, #416]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 80012d8:	2304      	movs	r3, #4
 80012da:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012dc:	2303      	movs	r3, #3
 80012de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012ec:	4619      	mov	r1, r3
 80012ee:	4861      	ldr	r0, [pc, #388]	@ (8001474 <HAL_ADC_MspInit+0x260>)
 80012f0:	f003 fe0a 	bl	8004f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80012f4:	2302      	movs	r3, #2
 80012f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f8:	2303      	movs	r3, #3
 80012fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001308:	4619      	mov	r1, r3
 800130a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130e:	f003 fdfb 	bl	8004f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001312:	2303      	movs	r3, #3
 8001314:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001316:	2303      	movs	r3, #3
 8001318:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001322:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001326:	4619      	mov	r1, r3
 8001328:	4853      	ldr	r0, [pc, #332]	@ (8001478 <HAL_ADC_MspInit+0x264>)
 800132a:	f003 fded 	bl	8004f08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800132e:	4b53      	ldr	r3, [pc, #332]	@ (800147c <HAL_ADC_MspInit+0x268>)
 8001330:	4a53      	ldr	r2, [pc, #332]	@ (8001480 <HAL_ADC_MspInit+0x26c>)
 8001332:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001334:	4b51      	ldr	r3, [pc, #324]	@ (800147c <HAL_ADC_MspInit+0x268>)
 8001336:	2205      	movs	r2, #5
 8001338:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800133a:	4b50      	ldr	r3, [pc, #320]	@ (800147c <HAL_ADC_MspInit+0x268>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001340:	4b4e      	ldr	r3, [pc, #312]	@ (800147c <HAL_ADC_MspInit+0x268>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001346:	4b4d      	ldr	r3, [pc, #308]	@ (800147c <HAL_ADC_MspInit+0x268>)
 8001348:	2280      	movs	r2, #128	@ 0x80
 800134a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800134c:	4b4b      	ldr	r3, [pc, #300]	@ (800147c <HAL_ADC_MspInit+0x268>)
 800134e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001352:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001354:	4b49      	ldr	r3, [pc, #292]	@ (800147c <HAL_ADC_MspInit+0x268>)
 8001356:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800135a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800135c:	4b47      	ldr	r3, [pc, #284]	@ (800147c <HAL_ADC_MspInit+0x268>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001362:	4b46      	ldr	r3, [pc, #280]	@ (800147c <HAL_ADC_MspInit+0x268>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001368:	4844      	ldr	r0, [pc, #272]	@ (800147c <HAL_ADC_MspInit+0x268>)
 800136a:	f003 fa9b 	bl	80048a4 <HAL_DMA_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 8001374:	f000 fb3a 	bl	80019ec <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a40      	ldr	r2, [pc, #256]	@ (800147c <HAL_ADC_MspInit+0x268>)
 800137c:	655a      	str	r2, [r3, #84]	@ 0x54
 800137e:	4a3f      	ldr	r2, [pc, #252]	@ (800147c <HAL_ADC_MspInit+0x268>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001384:	2200      	movs	r2, #0
 8001386:	2100      	movs	r1, #0
 8001388:	2012      	movs	r0, #18
 800138a:	f003 fa63 	bl	8004854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800138e:	2012      	movs	r0, #18
 8001390:	f003 fa7a 	bl	8004888 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001394:	e066      	b.n	8001464 <HAL_ADC_MspInit+0x250>
  else if(adcHandle->Instance==ADC2)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a3a      	ldr	r2, [pc, #232]	@ (8001484 <HAL_ADC_MspInit+0x270>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d161      	bne.n	8001464 <HAL_ADC_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80013a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80013aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013b0:	4618      	mov	r0, r3
 80013b2:	f004 fd81 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_ADC_MspInit+0x1ac>
      Error_Handler();
 80013bc:	f000 fb16 	bl	80019ec <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013c0:	4b2a      	ldr	r3, [pc, #168]	@ (800146c <HAL_ADC_MspInit+0x258>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	4a29      	ldr	r2, [pc, #164]	@ (800146c <HAL_ADC_MspInit+0x258>)
 80013c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013ca:	4b28      	ldr	r3, [pc, #160]	@ (800146c <HAL_ADC_MspInit+0x258>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d10b      	bne.n	80013ea <HAL_ADC_MspInit+0x1d6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013d2:	4b27      	ldr	r3, [pc, #156]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d6:	4a26      	ldr	r2, [pc, #152]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80013d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013de:	4b24      	ldr	r3, [pc, #144]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ea:	4b21      	ldr	r3, [pc, #132]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ee:	4a20      	ldr	r2, [pc, #128]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b1b      	ldr	r3, [pc, #108]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001406:	4a1a      	ldr	r2, [pc, #104]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140e:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <HAL_ADC_MspInit+0x25c>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800141a:	230b      	movs	r3, #11
 800141c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141e:	2303      	movs	r3, #3
 8001420:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800142e:	4619      	mov	r1, r3
 8001430:	4810      	ldr	r0, [pc, #64]	@ (8001474 <HAL_ADC_MspInit+0x260>)
 8001432:	f003 fd69 	bl	8004f08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8001436:	2301      	movs	r3, #1
 8001438:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800143a:	2303      	movs	r3, #3
 800143c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8001446:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800144a:	4619      	mov	r1, r3
 800144c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001450:	f003 fd5a 	bl	8004f08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2100      	movs	r1, #0
 8001458:	2012      	movs	r0, #18
 800145a:	f003 f9fb 	bl	8004854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800145e:	2012      	movs	r0, #18
 8001460:	f003 fa12 	bl	8004888 <HAL_NVIC_EnableIRQ>
}
 8001464:	bf00      	nop
 8001466:	3790      	adds	r7, #144	@ 0x90
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200004fc 	.word	0x200004fc
 8001470:	40021000 	.word	0x40021000
 8001474:	48000800 	.word	0x48000800
 8001478:	48000400 	.word	0x48000400
 800147c:	2000049c 	.word	0x2000049c
 8001480:	40020008 	.word	0x40020008
 8001484:	50000100 	.word	0x50000100

08001488 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <MX_DMA_Init+0x50>)
 8001490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001492:	4a11      	ldr	r2, [pc, #68]	@ (80014d8 <MX_DMA_Init+0x50>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6493      	str	r3, [r2, #72]	@ 0x48
 800149a:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <MX_DMA_Init+0x50>)
 800149c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014a6:	4b0c      	ldr	r3, [pc, #48]	@ (80014d8 <MX_DMA_Init+0x50>)
 80014a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014aa:	4a0b      	ldr	r2, [pc, #44]	@ (80014d8 <MX_DMA_Init+0x50>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80014b2:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <MX_DMA_Init+0x50>)
 80014b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	200b      	movs	r0, #11
 80014c4:	f003 f9c6 	bl	8004854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014c8:	200b      	movs	r0, #11
 80014ca:	f003 f9dd 	bl	8004888 <HAL_NVIC_EnableIRQ>

}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000

080014dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	@ 0x28
 80014e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
 80014f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f2:	4b3f      	ldr	r3, [pc, #252]	@ (80015f0 <MX_GPIO_Init+0x114>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	4a3e      	ldr	r2, [pc, #248]	@ (80015f0 <MX_GPIO_Init+0x114>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fe:	4b3c      	ldr	r3, [pc, #240]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800150a:	4b39      	ldr	r3, [pc, #228]	@ (80015f0 <MX_GPIO_Init+0x114>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150e:	4a38      	ldr	r2, [pc, #224]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001510:	f043 0320 	orr.w	r3, r3, #32
 8001514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001516:	4b36      	ldr	r3, [pc, #216]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	f003 0320 	and.w	r3, r3, #32
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	4b33      	ldr	r3, [pc, #204]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	4a32      	ldr	r2, [pc, #200]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800152e:	4b30      	ldr	r3, [pc, #192]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	4b2d      	ldr	r3, [pc, #180]	@ (80015f0 <MX_GPIO_Init+0x114>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	4a2c      	ldr	r2, [pc, #176]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001546:	4b2a      	ldr	r3, [pc, #168]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001552:	4b27      	ldr	r3, [pc, #156]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	4a26      	ldr	r2, [pc, #152]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001558:	f043 0308 	orr.w	r3, r3, #8
 800155c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800155e:	4b24      	ldr	r3, [pc, #144]	@ (80015f0 <MX_GPIO_Init+0x114>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	2120      	movs	r1, #32
 800156e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001572:	f003 fe4b 	bl	800520c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2104      	movs	r1, #4
 800157a:	481e      	ldr	r0, [pc, #120]	@ (80015f4 <MX_GPIO_Init+0x118>)
 800157c:	f003 fe46 	bl	800520c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8001580:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001586:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800158a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	4818      	ldr	r0, [pc, #96]	@ (80015f8 <MX_GPIO_Init+0x11c>)
 8001598:	f003 fcb6 	bl	8004f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 800159c:	2320      	movs	r3, #32
 800159e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a0:	2301      	movs	r3, #1
 80015a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b6:	f003 fca7 	bl	8004f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 80015ba:	2304      	movs	r3, #4
 80015bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015be:	2301      	movs	r3, #1
 80015c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	4808      	ldr	r0, [pc, #32]	@ (80015f4 <MX_GPIO_Init+0x118>)
 80015d2:	f003 fc99 	bl	8004f08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	2028      	movs	r0, #40	@ 0x28
 80015dc:	f003 f93a 	bl	8004854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015e0:	2028      	movs	r0, #40	@ 0x28
 80015e2:	f003 f951 	bl	8004888 <HAL_NVIC_EnableIRQ>

}
 80015e6:	bf00      	nop
 80015e8:	3728      	adds	r7, #40	@ 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000
 80015f4:	48000c00 	.word	0x48000c00
 80015f8:	48000800 	.word	0x48000800

080015fc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001600:	f3bf 8f4f 	dsb	sy
}
 8001604:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <__NVIC_SystemReset+0x24>)
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800160e:	4904      	ldr	r1, [pc, #16]	@ (8001620 <__NVIC_SystemReset+0x24>)
 8001610:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <__NVIC_SystemReset+0x28>)
 8001612:	4313      	orrs	r3, r2
 8001614:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001616:	f3bf 8f4f 	dsb	sy
}
 800161a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <__NVIC_SystemReset+0x20>
 8001620:	e000ed00 	.word	0xe000ed00
 8001624:	05fa0004 	.word	0x05fa0004

08001628 <__io_putchar>:
 * @brief Sends a character via UART (overwrites the default character transmission).
 * @param ch Character to send
 * @return The sent character
 */
int __io_putchar(int ch)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001630:	1d39      	adds	r1, r7, #4
 8001632:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001636:	2201      	movs	r2, #1
 8001638:	4803      	ldr	r0, [pc, #12]	@ (8001648 <__io_putchar+0x20>)
 800163a:	f006 fe0c 	bl	8008256 <HAL_UART_Transmit>
	return ch;
 800163e:	687b      	ldr	r3, [r7, #4]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000654 	.word	0x20000654

0800164c <set_PWM>:
 * @brief Adjusts PWM pulse for TIM1 channels.
 * @param pulse Desired PWM pulse width
 * @attention The global variable current_speed_PWM must be initialized.
 */
void set_PWM()
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
	if (requested_speed_PWM < current_speed_PWM)
 8001650:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <set_PWM+0x78>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b1c      	ldr	r3, [pc, #112]	@ (80016c8 <set_PWM+0x7c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	da14      	bge.n	8001686 <set_PWM+0x3a>
	{
		current_speed_PWM -= 1;
 800165c:	4b1a      	ldr	r3, [pc, #104]	@ (80016c8 <set_PWM+0x7c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	3b01      	subs	r3, #1
 8001662:	4a19      	ldr	r2, [pc, #100]	@ (80016c8 <set_PWM+0x7c>)
 8001664:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,
 8001666:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <set_PWM+0x7c>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4b18      	ldr	r3, [pc, #96]	@ (80016cc <set_PWM+0x80>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	635a      	str	r2, [r3, #52]	@ 0x34
				current_speed_PWM);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,
 8001670:	4b16      	ldr	r3, [pc, #88]	@ (80016cc <set_PWM+0x80>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001676:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <set_PWM+0x7c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4619      	mov	r1, r3
 800167c:	4b13      	ldr	r3, [pc, #76]	@ (80016cc <set_PWM+0x80>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	1a52      	subs	r2, r2, r1
 8001682:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,
				current_speed_PWM);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,
				__HAL_TIM_GET_AUTORELOAD(&htim1) - current_speed_PWM);
	}
}
 8001684:	e019      	b.n	80016ba <set_PWM+0x6e>
	else if (requested_speed_PWM > current_speed_PWM)
 8001686:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <set_PWM+0x78>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <set_PWM+0x7c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	dd13      	ble.n	80016ba <set_PWM+0x6e>
		current_speed_PWM += 1;
 8001692:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <set_PWM+0x7c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	4a0b      	ldr	r2, [pc, #44]	@ (80016c8 <set_PWM+0x7c>)
 800169a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,
 800169c:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <set_PWM+0x7c>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <set_PWM+0x80>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,
 80016a6:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <set_PWM+0x80>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <set_PWM+0x7c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <set_PWM+0x80>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	1a52      	subs	r2, r2, r1
 80016b8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	20000504 	.word	0x20000504
 80016c8:	20000500 	.word	0x20000500
 80016cc:	20000570 	.word	0x20000570

080016d0 <set_PWM_ratio>:
/**
 * @brief Sets the PWM duty cycle ratio for TIM1 channels.
 * @param ratio Duty cycle ratio (0.0 to 1.0) with 12-bit resolution
 */
void set_PWM_ratio(double ratio)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	ed87 0b00 	vstr	d0, [r7]
	if (ratio < 1 && ratio > 0)
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <set_PWM_ratio+0x68>)
 80016e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016e4:	f7ff fa32 	bl	8000b4c <__aeabi_dcmplt>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d100      	bne.n	80016f0 <set_PWM_ratio+0x20>
	{
		// Set main PWM pulse width for Channel 1 and Channel 2
		requested_speed_PWM = (int)(ratio * PWM_MAX_VAL);
	}
}
 80016ee:	e01b      	b.n	8001728 <set_PWM_ratio+0x58>
	if (ratio < 1 && ratio > 0)
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016fc:	f7ff fa44 	bl	8000b88 <__aeabi_dcmpgt>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d100      	bne.n	8001708 <set_PWM_ratio+0x38>
}
 8001706:	e00f      	b.n	8001728 <set_PWM_ratio+0x58>
		requested_speed_PWM = (int)(ratio * PWM_MAX_VAL);
 8001708:	a309      	add	r3, pc, #36	@ (adr r3, 8001730 <set_PWM_ratio+0x60>)
 800170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001712:	f7fe ffa9 	bl	8000668 <__aeabi_dmul>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f7ff fa53 	bl	8000bc8 <__aeabi_d2iz>
 8001722:	4603      	mov	r3, r0
 8001724:	4a05      	ldr	r2, [pc, #20]	@ (800173c <set_PWM_ratio+0x6c>)
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	00000000 	.word	0x00000000
 8001734:	40b09a00 	.word	0x40b09a00
 8001738:	3ff00000 	.word	0x3ff00000
 800173c:	20000504 	.word	0x20000504

08001740 <set_PWM_speed>:
/**
 * @brief Sets a specific PWM pulse width for TIM1 channels.
 * @param speed Desired PWM pulse width (0 to PWM_MAX_VAL)
 */
void set_PWM_speed(int speed)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	if (speed < PWM_MAX_VAL && speed > 0)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f241 0299 	movw	r2, #4249	@ 0x1099
 800174e:	4293      	cmp	r3, r2
 8001750:	dc05      	bgt.n	800175e <set_PWM_speed+0x1e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	dd02      	ble.n	800175e <set_PWM_speed+0x1e>
	{
		// Set main PWM pulse width for Channel 1 and Channel 2
		requested_speed_PWM = speed;
 8001758:	4a04      	ldr	r2, [pc, #16]	@ (800176c <set_PWM_speed+0x2c>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
	}
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000504 	.word	0x20000504

08001770 <start_PWM>:

/**
 * @brief Starts PWM on TIM1 channels. Initial base speed set to 0.5 duty cycle.
 */
void start_PWM()
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	// TIM1 Channel 1 Initialisation
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001774:	2100      	movs	r1, #0
 8001776:	480e      	ldr	r0, [pc, #56]	@ (80017b0 <start_PWM+0x40>)
 8001778:	f004 ff14 	bl	80065a4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800177c:	2100      	movs	r1, #0
 800177e:	480c      	ldr	r0, [pc, #48]	@ (80017b0 <start_PWM+0x40>)
 8001780:	f006 fa46 	bl	8007c10 <HAL_TIMEx_PWMN_Start>

	// TIM1 Channel 2 Initialisation
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001784:	2104      	movs	r1, #4
 8001786:	480a      	ldr	r0, [pc, #40]	@ (80017b0 <start_PWM+0x40>)
 8001788:	f004 ff0c 	bl	80065a4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800178c:	2104      	movs	r1, #4
 800178e:	4808      	ldr	r0, [pc, #32]	@ (80017b0 <start_PWM+0x40>)
 8001790:	f006 fa3e 	bl	8007c10 <HAL_TIMEx_PWMN_Start>

	current_speed_PWM = (int)(PWM_MAX_VAL/2)+1; // We initialize the base speed to 0 (cyclic rate 0.5)
 8001794:	4b07      	ldr	r3, [pc, #28]	@ (80017b4 <start_PWM+0x44>)
 8001796:	f640 024e 	movw	r2, #2126	@ 0x84e
 800179a:	601a      	str	r2, [r3, #0]
	set_PWM_ratio(0.5);
 800179c:	ed9f 0b02 	vldr	d0, [pc, #8]	@ 80017a8 <start_PWM+0x38>
 80017a0:	f7ff ff96 	bl	80016d0 <set_PWM_ratio>
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	00000000 	.word	0x00000000
 80017ac:	3fe00000 	.word	0x3fe00000
 80017b0:	20000570 	.word	0x20000570
 80017b4:	20000500 	.word	0x20000500

080017b8 <stop_PWM>:

/**
 * @brief Stops PWM on TIM1 channels.
 */
void stop_PWM()
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	// We disable Tim1 channel 1
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80017bc:	2100      	movs	r1, #0
 80017be:	4808      	ldr	r0, [pc, #32]	@ (80017e0 <stop_PWM+0x28>)
 80017c0:	f005 f802 	bl	80067c8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80017c4:	2100      	movs	r1, #0
 80017c6:	4806      	ldr	r0, [pc, #24]	@ (80017e0 <stop_PWM+0x28>)
 80017c8:	f006 fae4 	bl	8007d94 <HAL_TIMEx_PWMN_Stop>

	// We disable Tim1 channel 2
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80017cc:	2104      	movs	r1, #4
 80017ce:	4804      	ldr	r0, [pc, #16]	@ (80017e0 <stop_PWM+0x28>)
 80017d0:	f004 fffa 	bl	80067c8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80017d4:	2104      	movs	r1, #4
 80017d6:	4802      	ldr	r0, [pc, #8]	@ (80017e0 <stop_PWM+0x28>)
 80017d8:	f006 fadc 	bl	8007d94 <HAL_TIMEx_PWMN_Stop>
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000570 	.word	0x20000570

080017e4 <reset_inverter>:

/**
 * @brief Resets the microcontroller.
 */
void reset_inverter()
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 80017e8:	f7ff ff08 	bl	80015fc <__NVIC_SystemReset>
 80017ec:	0000      	movs	r0, r0
	...

080017f0 <read_current>:

/**
 * @brief Reads the current U_Imes.
 */
void read_current()
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	// Read ADC1 DMA to update pData
	printf("\r\nRAW ADC value: %d\r\n", (int)(pData[0]));
 80017f4:	4b22      	ldr	r3, [pc, #136]	@ (8001880 <read_current+0x90>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4619      	mov	r1, r3
 80017fa:	4822      	ldr	r0, [pc, #136]	@ (8001884 <read_current+0x94>)
 80017fc:	f00a fb22 	bl	800be44 <iprintf>
	/**
	 * Convertion taking into account the offset due to the unsigned ADC measure:
	 * 	Resolution: 50 mV/A
	 * 	Vout = 3.3/2 + 0.05*Imeasured
	 **/
	Uadc = ADC_VCC * ((int)(pData[0]) - ADC_OFFSET) / ADC_MAX_VAL;
 8001800:	4b1f      	ldr	r3, [pc, #124]	@ (8001880 <read_current+0x90>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f6a3 1375 	subw	r3, r3, #2421	@ 0x975
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fec3 	bl	8000594 <__aeabi_i2d>
 800180e:	a318      	add	r3, pc, #96	@ (adr r3, 8001870 <read_current+0x80>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7fe ff28 	bl	8000668 <__aeabi_dmul>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	4b18      	ldr	r3, [pc, #96]	@ (8001888 <read_current+0x98>)
 8001826:	f7ff f849 	bl	80008bc <__aeabi_ddiv>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4917      	ldr	r1, [pc, #92]	@ (800188c <read_current+0x9c>)
 8001830:	e9c1 2300 	strd	r2, r3, [r1]
	U_Imes = (Uadc) / ADC_CURRENT_RESOLUTION;
 8001834:	4b15      	ldr	r3, [pc, #84]	@ (800188c <read_current+0x9c>)
 8001836:	e9d3 0100 	ldrd	r0, r1, [r3]
 800183a:	a30f      	add	r3, pc, #60	@ (adr r3, 8001878 <read_current+0x88>)
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	f7ff f83c 	bl	80008bc <__aeabi_ddiv>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4911      	ldr	r1, [pc, #68]	@ (8001890 <read_current+0xa0>)
 800184a:	e9c1 2300 	strd	r2, r3, [r1]

	printf("\r\nMeasured tension: %f V\r\n", Uadc);
 800184e:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <read_current+0x9c>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	480f      	ldr	r0, [pc, #60]	@ (8001894 <read_current+0xa4>)
 8001856:	f00a faf5 	bl	800be44 <iprintf>
	printf("\r\nMeasured current: %f A\r\n", U_Imes);
 800185a:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <read_current+0xa0>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	480d      	ldr	r0, [pc, #52]	@ (8001898 <read_current+0xa8>)
 8001862:	f00a faef 	bl	800be44 <iprintf>
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	f3af 8000 	nop.w
 8001870:	66666666 	.word	0x66666666
 8001874:	400a6666 	.word	0x400a6666
 8001878:	9999999a 	.word	0x9999999a
 800187c:	3fa99999 	.word	0x3fa99999
 8001880:	20000508 	.word	0x20000508
 8001884:	0800eaa8 	.word	0x0800eaa8
 8001888:	40b00000 	.word	0x40b00000
 800188c:	20000518 	.word	0x20000518
 8001890:	20000510 	.word	0x20000510
 8001894:	0800eac0 	.word	0x0800eac0
 8001898:	0800eadc 	.word	0x0800eadc

0800189c <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non-blocking mode. Updates the data read from the DMA.
 * @param hadc ADC handle
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018ac:	d104      	bne.n	80018b8 <HAL_ADC_ConvCpltCallback+0x1c>
		HAL_ADC_Start_DMA(hadc, pData, ADC_BUFF_SIZE);
 80018ae:	2201      	movs	r2, #1
 80018b0:	4903      	ldr	r1, [pc, #12]	@ (80018c0 <HAL_ADC_ConvCpltCallback+0x24>)
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f001 fc40 	bl	8003138 <HAL_ADC_Start_DMA>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000508 	.word	0x20000508

080018c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c8:	f000 ffd3 	bl	8002872 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018cc:	f000 f82c 	bl	8001928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018d0:	f7ff fe04 	bl	80014dc <MX_GPIO_Init>
  MX_DMA_Init();
 80018d4:	f7ff fdd8 	bl	8001488 <MX_DMA_Init>
  MX_ADC2_Init();
 80018d8:	f7ff fc36 	bl	8001148 <MX_ADC2_Init>
  MX_ADC1_Init();
 80018dc:	f7ff fbba 	bl	8001054 <MX_ADC1_Init>
  MX_TIM1_Init();
 80018e0:	f000 fa74 	bl	8001dcc <MX_TIM1_Init>
  MX_TIM3_Init();
 80018e4:	f000 fb72 	bl	8001fcc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80018e8:	f000 fcd0 	bl	800228c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80018ec:	f000 fd1a 	bl	8002324 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80018f0:	f000 fb1e 	bl	8001f30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80018f4:	4809      	ldr	r0, [pc, #36]	@ (800191c <main+0x58>)
 80018f6:	f004 fd85 	bl	8006404 <HAL_TIM_Base_Start_IT>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80018fa:	217f      	movs	r1, #127	@ 0x7f
 80018fc:	4808      	ldr	r0, [pc, #32]	@ (8001920 <main+0x5c>)
 80018fe:	f002 fd55 	bl	80043ac <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, pData, ADC_BUFF_SIZE);
 8001902:	2201      	movs	r2, #1
 8001904:	4907      	ldr	r1, [pc, #28]	@ (8001924 <main+0x60>)
 8001906:	4806      	ldr	r0, [pc, #24]	@ (8001920 <main+0x5c>)
 8001908:	f001 fc16 	bl	8003138 <HAL_ADC_Start_DMA>

	start_PWM();
 800190c:	f7ff ff30 	bl	8001770 <start_PWM>

	Shell_Init();
 8001910:	f000 fdfc 	bl	800250c <Shell_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8001914:	f000 fe3a 	bl	800258c <Shell_Loop>
 8001918:	e7fc      	b.n	8001914 <main+0x50>
 800191a:	bf00      	nop
 800191c:	200005bc 	.word	0x200005bc
 8001920:	200003c4 	.word	0x200003c4
 8001924:	20000508 	.word	0x20000508

08001928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b094      	sub	sp, #80	@ 0x50
 800192c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800192e:	f107 0318 	add.w	r3, r7, #24
 8001932:	2238      	movs	r2, #56	@ 0x38
 8001934:	2100      	movs	r1, #0
 8001936:	4618      	mov	r0, r3
 8001938:	f00a faf9 	bl	800bf2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
 8001948:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800194a:	2000      	movs	r0, #0
 800194c:	f003 fc9a 	bl	8005284 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001950:	2301      	movs	r3, #1
 8001952:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001954:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001958:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800195a:	2302      	movs	r3, #2
 800195c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800195e:	2303      	movs	r3, #3
 8001960:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001962:	2306      	movs	r3, #6
 8001964:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001966:	2355      	movs	r3, #85	@ 0x55
 8001968:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800196a:	2302      	movs	r3, #2
 800196c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800196e:	2302      	movs	r3, #2
 8001970:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001972:	2302      	movs	r3, #2
 8001974:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001976:	f107 0318 	add.w	r3, r7, #24
 800197a:	4618      	mov	r0, r3
 800197c:	f003 fd36 	bl	80053ec <HAL_RCC_OscConfig>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001986:	f000 f831 	bl	80019ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800198a:	230f      	movs	r3, #15
 800198c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800198e:	2303      	movs	r3, #3
 8001990:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	2104      	movs	r1, #4
 80019a2:	4618      	mov	r0, r3
 80019a4:	f004 f83a 	bl	8005a1c <HAL_RCC_ClockConfig>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80019ae:	f000 f81d 	bl	80019ec <Error_Handler>
  }
}
 80019b2:	bf00      	nop
 80019b4:	3750      	adds	r7, #80	@ 0x50
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM2)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019cc:	d101      	bne.n	80019d2 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		set_PWM();
 80019ce:	f7ff fe3d 	bl	800164c <set_PWM>
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a04      	ldr	r2, [pc, #16]	@ (80019e8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d101      	bne.n	80019e0 <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 80019dc:	f000 ff62 	bl	80028a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40001000 	.word	0x40001000

080019ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019f0:	b672      	cpsid	i
}
 80019f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <Error_Handler+0x8>

080019f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a02:	4a0e      	ldr	r2, [pc, #56]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1a:	4a08      	ldr	r2, [pc, #32]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a20:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a2e:	f003 fccd 	bl	80053cc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000

08001a40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	@ 0x30
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a50:	4b2c      	ldr	r3, [pc, #176]	@ (8001b04 <HAL_InitTick+0xc4>)
 8001a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a54:	4a2b      	ldr	r2, [pc, #172]	@ (8001b04 <HAL_InitTick+0xc4>)
 8001a56:	f043 0310 	orr.w	r3, r3, #16
 8001a5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a5c:	4b29      	ldr	r3, [pc, #164]	@ (8001b04 <HAL_InitTick+0xc4>)
 8001a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a68:	f107 020c 	add.w	r2, r7, #12
 8001a6c:	f107 0310 	add.w	r3, r7, #16
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f004 f9a8 	bl	8005dc8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a78:	f004 f97a 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8001a7c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a80:	4a21      	ldr	r2, [pc, #132]	@ (8001b08 <HAL_InitTick+0xc8>)
 8001a82:	fba2 2303 	umull	r2, r3, r2, r3
 8001a86:	0c9b      	lsrs	r3, r3, #18
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b0c <HAL_InitTick+0xcc>)
 8001a8e:	4a20      	ldr	r2, [pc, #128]	@ (8001b10 <HAL_InitTick+0xd0>)
 8001a90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a92:	4b1e      	ldr	r3, [pc, #120]	@ (8001b0c <HAL_InitTick+0xcc>)
 8001a94:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a98:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001b0c <HAL_InitTick+0xcc>)
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b0c <HAL_InitTick+0xcc>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa6:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <HAL_InitTick+0xcc>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001aac:	4817      	ldr	r0, [pc, #92]	@ (8001b0c <HAL_InitTick+0xcc>)
 8001aae:	f004 fc51 	bl	8006354 <HAL_TIM_Base_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001ab8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d11b      	bne.n	8001af8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001ac0:	4812      	ldr	r0, [pc, #72]	@ (8001b0c <HAL_InitTick+0xcc>)
 8001ac2:	f004 fc9f 	bl	8006404 <HAL_TIM_Base_Start_IT>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001acc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d111      	bne.n	8001af8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ad4:	2036      	movs	r0, #54	@ 0x36
 8001ad6:	f002 fed7 	bl	8004888 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b0f      	cmp	r3, #15
 8001ade:	d808      	bhi.n	8001af2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	2036      	movs	r0, #54	@ 0x36
 8001ae6:	f002 feb5 	bl	8004854 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aea:	4a0a      	ldr	r2, [pc, #40]	@ (8001b14 <HAL_InitTick+0xd4>)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	e002      	b.n	8001af8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001af8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3730      	adds	r7, #48	@ 0x30
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40021000 	.word	0x40021000
 8001b08:	431bde83 	.word	0x431bde83
 8001b0c:	20000520 	.word	0x20000520
 8001b10:	40001000 	.word	0x40001000
 8001b14:	200001d8 	.word	0x200001d8

08001b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <NMI_Handler+0x4>

08001b20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <HardFault_Handler+0x4>

08001b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <MemManage_Handler+0x4>

08001b30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <BusFault_Handler+0x4>

08001b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <UsageFault_Handler+0x4>

08001b40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b7c:	4802      	ldr	r0, [pc, #8]	@ (8001b88 <DMA1_Channel1_IRQHandler+0x10>)
 8001b7e:	f003 f874 	bl	8004c6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	2000049c 	.word	0x2000049c

08001b8c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b90:	4803      	ldr	r0, [pc, #12]	@ (8001ba0 <ADC1_2_IRQHandler+0x14>)
 8001b92:	f001 fba5 	bl	80032e0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001b96:	4803      	ldr	r0, [pc, #12]	@ (8001ba4 <ADC1_2_IRQHandler+0x18>)
 8001b98:	f001 fba2 	bl	80032e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200003c4 	.word	0x200003c4
 8001ba4:	20000430 	.word	0x20000430

08001ba8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bac:	4802      	ldr	r0, [pc, #8]	@ (8001bb8 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001bae:	f004 fea7 	bl	8006900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000570 	.word	0x20000570

08001bbc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bc0:	4802      	ldr	r0, [pc, #8]	@ (8001bcc <TIM2_IRQHandler+0x10>)
 8001bc2:	f004 fe9d 	bl	8006900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200005bc 	.word	0x200005bc

08001bd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bd4:	4802      	ldr	r0, [pc, #8]	@ (8001be0 <USART2_IRQHandler+0x10>)
 8001bd6:	f006 fc2b 	bl	8008430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	20000654 	.word	0x20000654

08001be4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001be8:	4802      	ldr	r0, [pc, #8]	@ (8001bf4 <USART3_IRQHandler+0x10>)
 8001bea:	f006 fc21 	bl	8008430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200006e4 	.word	0x200006e4

08001bf8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001bfc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c00:	f003 fb1c 	bl	800523c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c0c:	4802      	ldr	r0, [pc, #8]	@ (8001c18 <TIM6_DAC_IRQHandler+0x10>)
 8001c0e:	f004 fe77 	bl	8006900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000520 	.word	0x20000520

08001c1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return 1;
 8001c20:	2301      	movs	r3, #1
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <_kill>:

int _kill(int pid, int sig)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c36:	f00a fa3b 	bl	800c0b0 <__errno>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2216      	movs	r2, #22
 8001c3e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <_exit>:

void _exit (int status)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff ffe7 	bl	8001c2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c5e:	bf00      	nop
 8001c60:	e7fd      	b.n	8001c5e <_exit+0x12>

08001c62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	e00a      	b.n	8001c8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c74:	f3af 8000 	nop.w
 8001c78:	4601      	mov	r1, r0
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	60ba      	str	r2, [r7, #8]
 8001c80:	b2ca      	uxtb	r2, r1
 8001c82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	3301      	adds	r3, #1
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	dbf0      	blt.n	8001c74 <_read+0x12>
  }

  return len;
 8001c92:	687b      	ldr	r3, [r7, #4]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	e009      	b.n	8001cc2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	60ba      	str	r2, [r7, #8]
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fcb6 	bl	8001628 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	dbf1      	blt.n	8001cae <_write+0x12>
  }
  return len;
 8001cca:	687b      	ldr	r3, [r7, #4]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <_close>:

int _close(int file)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cfc:	605a      	str	r2, [r3, #4]
  return 0;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <_isatty>:

int _isatty(int file)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d14:	2301      	movs	r3, #1
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b085      	sub	sp, #20
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d44:	4a14      	ldr	r2, [pc, #80]	@ (8001d98 <_sbrk+0x5c>)
 8001d46:	4b15      	ldr	r3, [pc, #84]	@ (8001d9c <_sbrk+0x60>)
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d50:	4b13      	ldr	r3, [pc, #76]	@ (8001da0 <_sbrk+0x64>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d102      	bne.n	8001d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d58:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <_sbrk+0x64>)
 8001d5a:	4a12      	ldr	r2, [pc, #72]	@ (8001da4 <_sbrk+0x68>)
 8001d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d5e:	4b10      	ldr	r3, [pc, #64]	@ (8001da0 <_sbrk+0x64>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d207      	bcs.n	8001d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d6c:	f00a f9a0 	bl	800c0b0 <__errno>
 8001d70:	4603      	mov	r3, r0
 8001d72:	220c      	movs	r2, #12
 8001d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d7a:	e009      	b.n	8001d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d7c:	4b08      	ldr	r3, [pc, #32]	@ (8001da0 <_sbrk+0x64>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d82:	4b07      	ldr	r3, [pc, #28]	@ (8001da0 <_sbrk+0x64>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	4a05      	ldr	r2, [pc, #20]	@ (8001da0 <_sbrk+0x64>)
 8001d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20020000 	.word	0x20020000
 8001d9c:	00000400 	.word	0x00000400
 8001da0:	2000056c 	.word	0x2000056c
 8001da4:	20000980 	.word	0x20000980

08001da8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001dac:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <SystemInit+0x20>)
 8001dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001db2:	4a05      	ldr	r2, [pc, #20]	@ (8001dc8 <SystemInit+0x20>)
 8001db4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001db8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b098      	sub	sp, #96	@ 0x60
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dde:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]
 8001dec:	611a      	str	r2, [r3, #16]
 8001dee:	615a      	str	r2, [r3, #20]
 8001df0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	2234      	movs	r2, #52	@ 0x34
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f00a f898 	bl	800bf2e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dfe:	4b4a      	ldr	r3, [pc, #296]	@ (8001f28 <MX_TIM1_Init+0x15c>)
 8001e00:	4a4a      	ldr	r2, [pc, #296]	@ (8001f2c <MX_TIM1_Init+0x160>)
 8001e02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e04:	4b48      	ldr	r3, [pc, #288]	@ (8001f28 <MX_TIM1_Init+0x15c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001e0a:	4b47      	ldr	r3, [pc, #284]	@ (8001f28 <MX_TIM1_Init+0x15c>)
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4249;
 8001e10:	4b45      	ldr	r3, [pc, #276]	@ (8001f28 <MX_TIM1_Init+0x15c>)
 8001e12:	f241 0299 	movw	r2, #4249	@ 0x1099
 8001e16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e18:	4b43      	ldr	r3, [pc, #268]	@ (8001f28 <MX_TIM1_Init+0x15c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e1e:	4b42      	ldr	r3, [pc, #264]	@ (8001f28 <MX_TIM1_Init+0x15c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e24:	4b40      	ldr	r3, [pc, #256]	@ (8001f28 <MX_TIM1_Init+0x15c>)
 8001e26:	2280      	movs	r2, #128	@ 0x80
 8001e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e2a:	483f      	ldr	r0, [pc, #252]	@ (8001f28 <MX_TIM1_Init+0x15c>)
 8001e2c:	f004 fb62 	bl	80064f4 <HAL_TIM_PWM_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001e36:	f7ff fdd9 	bl	80019ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e3a:	2320      	movs	r3, #32
 8001e3c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001e42:	2380      	movs	r3, #128	@ 0x80
 8001e44:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e46:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4836      	ldr	r0, [pc, #216]	@ (8001f28 <MX_TIM1_Init+0x15c>)
 8001e4e:	f005 ffff 	bl	8007e50 <HAL_TIMEx_MasterConfigSynchronization>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e58:	f7ff fdc8 	bl	80019ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e5c:	2360      	movs	r3, #96	@ 0x60
 8001e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 3000;
 8001e60:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e66:	2300      	movs	r3, #0
 8001e68:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e72:	2300      	movs	r3, #0
 8001e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e76:	2300      	movs	r3, #0
 8001e78:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e7a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e7e:	2200      	movs	r2, #0
 8001e80:	4619      	mov	r1, r3
 8001e82:	4829      	ldr	r0, [pc, #164]	@ (8001f28 <MX_TIM1_Init+0x15c>)
 8001e84:	f004 febc 	bl	8006c00 <HAL_TIM_PWM_ConfigChannel>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001e8e:	f7ff fdad 	bl	80019ec <Error_Handler>
  }
  sConfigOC.Pulse = 5000;
 8001e92:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e98:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4821      	ldr	r0, [pc, #132]	@ (8001f28 <MX_TIM1_Init+0x15c>)
 8001ea2:	f004 fead 	bl	8006c00 <HAL_TIM_PWM_ConfigChannel>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8001eac:	f7ff fd9e 	bl	80019ec <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001eb4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001eb8:	2208      	movs	r2, #8
 8001eba:	4619      	mov	r1, r3
 8001ebc:	481a      	ldr	r0, [pc, #104]	@ (8001f28 <MX_TIM1_Init+0x15c>)
 8001ebe:	f004 fe9f 	bl	8006c00 <HAL_TIM_PWM_ConfigChannel>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001ec8:	f7ff fd90 	bl	80019ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 34;
 8001ed8:	2322      	movs	r3, #34	@ 0x22
 8001eda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ee0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ee4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001eea:	2300      	movs	r3, #0
 8001eec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ef2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001efc:	2300      	movs	r3, #0
 8001efe:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	4619      	mov	r1, r3
 8001f08:	4807      	ldr	r0, [pc, #28]	@ (8001f28 <MX_TIM1_Init+0x15c>)
 8001f0a:	f006 f837 	bl	8007f7c <HAL_TIMEx_ConfigBreakDeadTime>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8001f14:	f7ff fd6a 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f18:	4803      	ldr	r0, [pc, #12]	@ (8001f28 <MX_TIM1_Init+0x15c>)
 8001f1a:	f000 f94f 	bl	80021bc <HAL_TIM_MspPostInit>

}
 8001f1e:	bf00      	nop
 8001f20:	3760      	adds	r7, #96	@ 0x60
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000570 	.word	0x20000570
 8001f2c:	40012c00 	.word	0x40012c00

08001f30 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f36:	f107 0310 	add.w	r3, r7, #16
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc8 <MX_TIM2_Init+0x98>)
 8001f50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8001f56:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc8 <MX_TIM2_Init+0x98>)
 8001f58:	22a9      	movs	r2, #169	@ 0xa9
 8001f5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc8 <MX_TIM2_Init+0x98>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3332;
 8001f62:	4b19      	ldr	r3, [pc, #100]	@ (8001fc8 <MX_TIM2_Init+0x98>)
 8001f64:	f640 5204 	movw	r2, #3332	@ 0xd04
 8001f68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6a:	4b17      	ldr	r3, [pc, #92]	@ (8001fc8 <MX_TIM2_Init+0x98>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f70:	4b15      	ldr	r3, [pc, #84]	@ (8001fc8 <MX_TIM2_Init+0x98>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f76:	4814      	ldr	r0, [pc, #80]	@ (8001fc8 <MX_TIM2_Init+0x98>)
 8001f78:	f004 f9ec 	bl	8006354 <HAL_TIM_Base_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001f82:	f7ff fd33 	bl	80019ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f8c:	f107 0310 	add.w	r3, r7, #16
 8001f90:	4619      	mov	r1, r3
 8001f92:	480d      	ldr	r0, [pc, #52]	@ (8001fc8 <MX_TIM2_Init+0x98>)
 8001f94:	f004 ff48 	bl	8006e28 <HAL_TIM_ConfigClockSource>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001f9e:	f7ff fd25 	bl	80019ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	4619      	mov	r1, r3
 8001fae:	4806      	ldr	r0, [pc, #24]	@ (8001fc8 <MX_TIM2_Init+0x98>)
 8001fb0:	f005 ff4e 	bl	8007e50 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001fba:	f7ff fd17 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fbe:	bf00      	nop
 8001fc0:	3720      	adds	r7, #32
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200005bc 	.word	0x200005bc

08001fcc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001fd2:	f107 0310 	add.w	r3, r7, #16
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe0:	1d3b      	adds	r3, r7, #4
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	605a      	str	r2, [r3, #4]
 8001fe8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fea:	4b1c      	ldr	r3, [pc, #112]	@ (800205c <MX_TIM3_Init+0x90>)
 8001fec:	4a1c      	ldr	r2, [pc, #112]	@ (8002060 <MX_TIM3_Init+0x94>)
 8001fee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800205c <MX_TIM3_Init+0x90>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff6:	4b19      	ldr	r3, [pc, #100]	@ (800205c <MX_TIM3_Init+0x90>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ffc:	4b17      	ldr	r3, [pc, #92]	@ (800205c <MX_TIM3_Init+0x90>)
 8001ffe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002002:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002004:	4b15      	ldr	r3, [pc, #84]	@ (800205c <MX_TIM3_Init+0x90>)
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200a:	4b14      	ldr	r3, [pc, #80]	@ (800205c <MX_TIM3_Init+0x90>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002010:	2300      	movs	r3, #0
 8002012:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8002020:	f107 0310 	add.w	r3, r7, #16
 8002024:	4619      	mov	r1, r3
 8002026:	480d      	ldr	r0, [pc, #52]	@ (800205c <MX_TIM3_Init+0x90>)
 8002028:	f005 fd43 	bl	8007ab2 <HAL_TIMEx_HallSensor_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8002032:	f7ff fcdb 	bl	80019ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8002036:	2350      	movs	r3, #80	@ 0x50
 8002038:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	4619      	mov	r1, r3
 8002042:	4806      	ldr	r0, [pc, #24]	@ (800205c <MX_TIM3_Init+0x90>)
 8002044:	f005 ff04 	bl	8007e50 <HAL_TIMEx_MasterConfigSynchronization>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800204e:	f7ff fccd 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	3720      	adds	r7, #32
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000608 	.word	0x20000608
 8002060:	40000400 	.word	0x40000400

08002064 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0d      	ldr	r2, [pc, #52]	@ (80020a8 <HAL_TIM_PWM_MspInit+0x44>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d113      	bne.n	800209e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002076:	4b0d      	ldr	r3, [pc, #52]	@ (80020ac <HAL_TIM_PWM_MspInit+0x48>)
 8002078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800207a:	4a0c      	ldr	r2, [pc, #48]	@ (80020ac <HAL_TIM_PWM_MspInit+0x48>)
 800207c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002080:	6613      	str	r3, [r2, #96]	@ 0x60
 8002082:	4b0a      	ldr	r3, [pc, #40]	@ (80020ac <HAL_TIM_PWM_MspInit+0x48>)
 8002084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002086:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	2100      	movs	r1, #0
 8002092:	201a      	movs	r0, #26
 8002094:	f002 fbde 	bl	8004854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002098:	201a      	movs	r0, #26
 800209a:	f002 fbf5 	bl	8004888 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40012c00 	.word	0x40012c00
 80020ac:	40021000 	.word	0x40021000

080020b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020c0:	d113      	bne.n	80020ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020c2:	4b0c      	ldr	r3, [pc, #48]	@ (80020f4 <HAL_TIM_Base_MspInit+0x44>)
 80020c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c6:	4a0b      	ldr	r2, [pc, #44]	@ (80020f4 <HAL_TIM_Base_MspInit+0x44>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80020ce:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <HAL_TIM_Base_MspInit+0x44>)
 80020d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2100      	movs	r1, #0
 80020de:	201c      	movs	r0, #28
 80020e0:	f002 fbb8 	bl	8004854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020e4:	201c      	movs	r0, #28
 80020e6:	f002 fbcf 	bl	8004888 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000

080020f8 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	@ 0x28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a26      	ldr	r2, [pc, #152]	@ (80021b0 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d145      	bne.n	80021a6 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800211a:	4b26      	ldr	r3, [pc, #152]	@ (80021b4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800211c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211e:	4a25      	ldr	r2, [pc, #148]	@ (80021b4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002120:	f043 0302 	orr.w	r3, r3, #2
 8002124:	6593      	str	r3, [r2, #88]	@ 0x58
 8002126:	4b23      	ldr	r3, [pc, #140]	@ (80021b4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002132:	4b20      	ldr	r3, [pc, #128]	@ (80021b4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002136:	4a1f      	ldr	r2, [pc, #124]	@ (80021b4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800213e:	4b1d      	ldr	r3, [pc, #116]	@ (80021b4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800214a:	4b1a      	ldr	r3, [pc, #104]	@ (80021b4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800214c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800214e:	4a19      	ldr	r2, [pc, #100]	@ (80021b4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002156:	4b17      	ldr	r3, [pc, #92]	@ (80021b4 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8002158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002162:	2350      	movs	r3, #80	@ 0x50
 8002164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	2300      	movs	r3, #0
 8002170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002172:	2302      	movs	r3, #2
 8002174:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002176:	f107 0314 	add.w	r3, r7, #20
 800217a:	4619      	mov	r1, r3
 800217c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002180:	f002 fec2 	bl	8004f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002184:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2300      	movs	r3, #0
 8002194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002196:	2302      	movs	r3, #2
 8002198:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	4619      	mov	r1, r3
 80021a0:	4805      	ldr	r0, [pc, #20]	@ (80021b8 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80021a2:	f002 feb1 	bl	8004f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80021a6:	bf00      	nop
 80021a8:	3728      	adds	r7, #40	@ 0x28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40000400 	.word	0x40000400
 80021b4:	40021000 	.word	0x40021000
 80021b8:	48000800 	.word	0x48000800

080021bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08a      	sub	sp, #40	@ 0x28
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a29      	ldr	r2, [pc, #164]	@ (8002280 <HAL_TIM_MspPostInit+0xc4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d14b      	bne.n	8002276 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021de:	4b29      	ldr	r3, [pc, #164]	@ (8002284 <HAL_TIM_MspPostInit+0xc8>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e2:	4a28      	ldr	r2, [pc, #160]	@ (8002284 <HAL_TIM_MspPostInit+0xc8>)
 80021e4:	f043 0302 	orr.w	r3, r3, #2
 80021e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ea:	4b26      	ldr	r3, [pc, #152]	@ (8002284 <HAL_TIM_MspPostInit+0xc8>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	4b23      	ldr	r3, [pc, #140]	@ (8002284 <HAL_TIM_MspPostInit+0xc8>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021fa:	4a22      	ldr	r2, [pc, #136]	@ (8002284 <HAL_TIM_MspPostInit+0xc8>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002202:	4b20      	ldr	r3, [pc, #128]	@ (8002284 <HAL_TIM_MspPostInit+0xc8>)
 8002204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800220e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002220:	2306      	movs	r3, #6
 8002222:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	4619      	mov	r1, r3
 800222a:	4817      	ldr	r0, [pc, #92]	@ (8002288 <HAL_TIM_MspPostInit+0xcc>)
 800222c:	f002 fe6c 	bl	8004f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8002230:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223e:	2300      	movs	r3, #0
 8002240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002242:	2304      	movs	r3, #4
 8002244:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	4619      	mov	r1, r3
 800224c:	480e      	ldr	r0, [pc, #56]	@ (8002288 <HAL_TIM_MspPostInit+0xcc>)
 800224e:	f002 fe5b 	bl	8004f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8002252:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002264:	2306      	movs	r3, #6
 8002266:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	4619      	mov	r1, r3
 800226e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002272:	f002 fe49 	bl	8004f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002276:	bf00      	nop
 8002278:	3728      	adds	r7, #40	@ 0x28
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40012c00 	.word	0x40012c00
 8002284:	40021000 	.word	0x40021000
 8002288:	48000400 	.word	0x48000400

0800228c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002290:	4b22      	ldr	r3, [pc, #136]	@ (800231c <MX_USART2_UART_Init+0x90>)
 8002292:	4a23      	ldr	r2, [pc, #140]	@ (8002320 <MX_USART2_UART_Init+0x94>)
 8002294:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002296:	4b21      	ldr	r3, [pc, #132]	@ (800231c <MX_USART2_UART_Init+0x90>)
 8002298:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800229c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800229e:	4b1f      	ldr	r3, [pc, #124]	@ (800231c <MX_USART2_UART_Init+0x90>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022a4:	4b1d      	ldr	r3, [pc, #116]	@ (800231c <MX_USART2_UART_Init+0x90>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022aa:	4b1c      	ldr	r3, [pc, #112]	@ (800231c <MX_USART2_UART_Init+0x90>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022b0:	4b1a      	ldr	r3, [pc, #104]	@ (800231c <MX_USART2_UART_Init+0x90>)
 80022b2:	220c      	movs	r2, #12
 80022b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022b6:	4b19      	ldr	r3, [pc, #100]	@ (800231c <MX_USART2_UART_Init+0x90>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022bc:	4b17      	ldr	r3, [pc, #92]	@ (800231c <MX_USART2_UART_Init+0x90>)
 80022be:	2200      	movs	r2, #0
 80022c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022c2:	4b16      	ldr	r3, [pc, #88]	@ (800231c <MX_USART2_UART_Init+0x90>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022c8:	4b14      	ldr	r3, [pc, #80]	@ (800231c <MX_USART2_UART_Init+0x90>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022ce:	4b13      	ldr	r3, [pc, #76]	@ (800231c <MX_USART2_UART_Init+0x90>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022d4:	4811      	ldr	r0, [pc, #68]	@ (800231c <MX_USART2_UART_Init+0x90>)
 80022d6:	f005 ff6e 	bl	80081b6 <HAL_UART_Init>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80022e0:	f7ff fb84 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022e4:	2100      	movs	r1, #0
 80022e6:	480d      	ldr	r0, [pc, #52]	@ (800231c <MX_USART2_UART_Init+0x90>)
 80022e8:	f007 ff11 	bl	800a10e <HAL_UARTEx_SetTxFifoThreshold>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80022f2:	f7ff fb7b 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022f6:	2100      	movs	r1, #0
 80022f8:	4808      	ldr	r0, [pc, #32]	@ (800231c <MX_USART2_UART_Init+0x90>)
 80022fa:	f007 ff46 	bl	800a18a <HAL_UARTEx_SetRxFifoThreshold>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002304:	f7ff fb72 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002308:	4804      	ldr	r0, [pc, #16]	@ (800231c <MX_USART2_UART_Init+0x90>)
 800230a:	f007 fec7 	bl	800a09c <HAL_UARTEx_DisableFifoMode>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002314:	f7ff fb6a 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000654 	.word	0x20000654
 8002320:	40004400 	.word	0x40004400

08002324 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002328:	4b22      	ldr	r3, [pc, #136]	@ (80023b4 <MX_USART3_UART_Init+0x90>)
 800232a:	4a23      	ldr	r2, [pc, #140]	@ (80023b8 <MX_USART3_UART_Init+0x94>)
 800232c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800232e:	4b21      	ldr	r3, [pc, #132]	@ (80023b4 <MX_USART3_UART_Init+0x90>)
 8002330:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002334:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002336:	4b1f      	ldr	r3, [pc, #124]	@ (80023b4 <MX_USART3_UART_Init+0x90>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800233c:	4b1d      	ldr	r3, [pc, #116]	@ (80023b4 <MX_USART3_UART_Init+0x90>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002342:	4b1c      	ldr	r3, [pc, #112]	@ (80023b4 <MX_USART3_UART_Init+0x90>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002348:	4b1a      	ldr	r3, [pc, #104]	@ (80023b4 <MX_USART3_UART_Init+0x90>)
 800234a:	220c      	movs	r2, #12
 800234c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234e:	4b19      	ldr	r3, [pc, #100]	@ (80023b4 <MX_USART3_UART_Init+0x90>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002354:	4b17      	ldr	r3, [pc, #92]	@ (80023b4 <MX_USART3_UART_Init+0x90>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800235a:	4b16      	ldr	r3, [pc, #88]	@ (80023b4 <MX_USART3_UART_Init+0x90>)
 800235c:	2200      	movs	r2, #0
 800235e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002360:	4b14      	ldr	r3, [pc, #80]	@ (80023b4 <MX_USART3_UART_Init+0x90>)
 8002362:	2200      	movs	r2, #0
 8002364:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002366:	4b13      	ldr	r3, [pc, #76]	@ (80023b4 <MX_USART3_UART_Init+0x90>)
 8002368:	2200      	movs	r2, #0
 800236a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800236c:	4811      	ldr	r0, [pc, #68]	@ (80023b4 <MX_USART3_UART_Init+0x90>)
 800236e:	f005 ff22 	bl	80081b6 <HAL_UART_Init>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002378:	f7ff fb38 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800237c:	2100      	movs	r1, #0
 800237e:	480d      	ldr	r0, [pc, #52]	@ (80023b4 <MX_USART3_UART_Init+0x90>)
 8002380:	f007 fec5 	bl	800a10e <HAL_UARTEx_SetTxFifoThreshold>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800238a:	f7ff fb2f 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800238e:	2100      	movs	r1, #0
 8002390:	4808      	ldr	r0, [pc, #32]	@ (80023b4 <MX_USART3_UART_Init+0x90>)
 8002392:	f007 fefa 	bl	800a18a <HAL_UARTEx_SetRxFifoThreshold>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800239c:	f7ff fb26 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80023a0:	4804      	ldr	r0, [pc, #16]	@ (80023b4 <MX_USART3_UART_Init+0x90>)
 80023a2:	f007 fe7b 	bl	800a09c <HAL_UARTEx_DisableFifoMode>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80023ac:	f7ff fb1e 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	200006e4 	.word	0x200006e4
 80023b8:	40004800 	.word	0x40004800

080023bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b0a0      	sub	sp, #128	@ 0x80
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023d4:	f107 0318 	add.w	r3, r7, #24
 80023d8:	2254      	movs	r2, #84	@ 0x54
 80023da:	2100      	movs	r1, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f009 fda6 	bl	800bf2e <memset>
  if(uartHandle->Instance==USART2)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a45      	ldr	r2, [pc, #276]	@ (80024fc <HAL_UART_MspInit+0x140>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d13f      	bne.n	800246c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023ec:	2302      	movs	r3, #2
 80023ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023f0:	2300      	movs	r3, #0
 80023f2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023f4:	f107 0318 	add.w	r3, r7, #24
 80023f8:	4618      	mov	r0, r3
 80023fa:	f003 fd5d 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002404:	f7ff faf2 	bl	80019ec <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002408:	4b3d      	ldr	r3, [pc, #244]	@ (8002500 <HAL_UART_MspInit+0x144>)
 800240a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240c:	4a3c      	ldr	r2, [pc, #240]	@ (8002500 <HAL_UART_MspInit+0x144>)
 800240e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002412:	6593      	str	r3, [r2, #88]	@ 0x58
 8002414:	4b3a      	ldr	r3, [pc, #232]	@ (8002500 <HAL_UART_MspInit+0x144>)
 8002416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002420:	4b37      	ldr	r3, [pc, #220]	@ (8002500 <HAL_UART_MspInit+0x144>)
 8002422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002424:	4a36      	ldr	r2, [pc, #216]	@ (8002500 <HAL_UART_MspInit+0x144>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800242c:	4b34      	ldr	r3, [pc, #208]	@ (8002500 <HAL_UART_MspInit+0x144>)
 800242e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002438:	230c      	movs	r3, #12
 800243a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243c:	2302      	movs	r3, #2
 800243e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002444:	2300      	movs	r3, #0
 8002446:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002448:	2307      	movs	r3, #7
 800244a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002450:	4619      	mov	r1, r3
 8002452:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002456:	f002 fd57 	bl	8004f08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800245a:	2200      	movs	r2, #0
 800245c:	2100      	movs	r1, #0
 800245e:	2026      	movs	r0, #38	@ 0x26
 8002460:	f002 f9f8 	bl	8004854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002464:	2026      	movs	r0, #38	@ 0x26
 8002466:	f002 fa0f 	bl	8004888 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800246a:	e043      	b.n	80024f4 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a24      	ldr	r2, [pc, #144]	@ (8002504 <HAL_UART_MspInit+0x148>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d13e      	bne.n	80024f4 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002476:	2304      	movs	r3, #4
 8002478:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800247a:	2300      	movs	r3, #0
 800247c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800247e:	f107 0318 	add.w	r3, r7, #24
 8002482:	4618      	mov	r0, r3
 8002484:	f003 fd18 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800248e:	f7ff faad 	bl	80019ec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002492:	4b1b      	ldr	r3, [pc, #108]	@ (8002500 <HAL_UART_MspInit+0x144>)
 8002494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002496:	4a1a      	ldr	r2, [pc, #104]	@ (8002500 <HAL_UART_MspInit+0x144>)
 8002498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800249c:	6593      	str	r3, [r2, #88]	@ 0x58
 800249e:	4b18      	ldr	r3, [pc, #96]	@ (8002500 <HAL_UART_MspInit+0x144>)
 80024a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024aa:	4b15      	ldr	r3, [pc, #84]	@ (8002500 <HAL_UART_MspInit+0x144>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ae:	4a14      	ldr	r2, [pc, #80]	@ (8002500 <HAL_UART_MspInit+0x144>)
 80024b0:	f043 0304 	orr.w	r3, r3, #4
 80024b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024b6:	4b12      	ldr	r3, [pc, #72]	@ (8002500 <HAL_UART_MspInit+0x144>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024c2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80024c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c8:	2302      	movs	r3, #2
 80024ca:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d0:	2300      	movs	r3, #0
 80024d2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024d4:	2307      	movs	r3, #7
 80024d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024d8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80024dc:	4619      	mov	r1, r3
 80024de:	480a      	ldr	r0, [pc, #40]	@ (8002508 <HAL_UART_MspInit+0x14c>)
 80024e0:	f002 fd12 	bl	8004f08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80024e4:	2200      	movs	r2, #0
 80024e6:	2100      	movs	r1, #0
 80024e8:	2027      	movs	r0, #39	@ 0x27
 80024ea:	f002 f9b3 	bl	8004854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80024ee:	2027      	movs	r0, #39	@ 0x27
 80024f0:	f002 f9ca 	bl	8004888 <HAL_NVIC_EnableIRQ>
}
 80024f4:	bf00      	nop
 80024f6:	3780      	adds	r7, #128	@ 0x80
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40004400 	.word	0x40004400
 8002500:	40021000 	.word	0x40021000
 8002504:	40004800 	.word	0x40004800
 8002508:	48000800 	.word	0x48000800

0800250c <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8002510:	2224      	movs	r2, #36	@ 0x24
 8002512:	2100      	movs	r1, #0
 8002514:	4816      	ldr	r0, [pc, #88]	@ (8002570 <Shell_Init+0x64>)
 8002516:	f009 fd0a 	bl	800bf2e <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 800251a:	2240      	movs	r2, #64	@ 0x40
 800251c:	2100      	movs	r1, #0
 800251e:	4815      	ldr	r0, [pc, #84]	@ (8002574 <Shell_Init+0x68>)
 8002520:	f009 fd05 	bl	800bf2e <memset>
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
 8002524:	4b14      	ldr	r3, [pc, #80]	@ (8002578 <Shell_Init+0x6c>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 800252a:	2240      	movs	r2, #64	@ 0x40
 800252c:	2100      	movs	r1, #0
 800252e:	4813      	ldr	r0, [pc, #76]	@ (800257c <Shell_Init+0x70>)
 8002530:	f009 fcfd 	bl	800bf2e <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002534:	2201      	movs	r2, #1
 8002536:	4910      	ldr	r1, [pc, #64]	@ (8002578 <Shell_Init+0x6c>)
 8002538:	4811      	ldr	r0, [pc, #68]	@ (8002580 <Shell_Init+0x74>)
 800253a:	f005 ff23 	bl	8008384 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 800253e:	4811      	ldr	r0, [pc, #68]	@ (8002584 <Shell_Init+0x78>)
 8002540:	f7fd fece 	bl	80002e0 <strlen>
 8002544:	4603      	mov	r3, r0
 8002546:	b29a      	uxth	r2, r3
 8002548:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800254c:	490d      	ldr	r1, [pc, #52]	@ (8002584 <Shell_Init+0x78>)
 800254e:	480c      	ldr	r0, [pc, #48]	@ (8002580 <Shell_Init+0x74>)
 8002550:	f005 fe81 	bl	8008256 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8002554:	480c      	ldr	r0, [pc, #48]	@ (8002588 <Shell_Init+0x7c>)
 8002556:	f7fd fec3 	bl	80002e0 <strlen>
 800255a:	4603      	mov	r3, r0
 800255c:	b29a      	uxth	r2, r3
 800255e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002562:	4909      	ldr	r1, [pc, #36]	@ (8002588 <Shell_Init+0x7c>)
 8002564:	4806      	ldr	r0, [pc, #24]	@ (8002580 <Shell_Init+0x74>)
 8002566:	f005 fe76 	bl	8008256 <HAL_UART_Transmit>
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000800 	.word	0x20000800
 8002574:	200007bc 	.word	0x200007bc
 8002578:	20000778 	.word	0x20000778
 800257c:	2000077c 	.word	0x2000077c
 8002580:	20000654 	.word	0x20000654
 8002584:	20000020 	.word	0x20000020
 8002588:	20000004 	.word	0x20000004

0800258c <Shell_Loop>:

void Shell_Loop(void){
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 8002590:	4b80      	ldr	r3, [pc, #512]	@ (8002794 <Shell_Loop+0x208>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d05b      	beq.n	8002650 <Shell_Loop+0xc4>
		switch(uartRxBuffer[0]){
 8002598:	4b7f      	ldr	r3, [pc, #508]	@ (8002798 <Shell_Loop+0x20c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b08      	cmp	r3, #8
 800259e:	d034      	beq.n	800260a <Shell_Loop+0x7e>
 80025a0:	2b0d      	cmp	r3, #13
 80025a2:	d142      	bne.n	800262a <Shell_Loop+0x9e>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80025a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025a8:	2203      	movs	r2, #3
 80025aa:	497c      	ldr	r1, [pc, #496]	@ (800279c <Shell_Loop+0x210>)
 80025ac:	487c      	ldr	r0, [pc, #496]	@ (80027a0 <Shell_Loop+0x214>)
 80025ae:	f005 fe52 	bl	8008256 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 80025b2:	4b7c      	ldr	r3, [pc, #496]	@ (80027a4 <Shell_Loop+0x218>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a7c      	ldr	r2, [pc, #496]	@ (80027a8 <Shell_Loop+0x21c>)
 80025b8:	2100      	movs	r1, #0
 80025ba:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 80025bc:	4b7b      	ldr	r3, [pc, #492]	@ (80027ac <Shell_Loop+0x220>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 80025c2:	497b      	ldr	r1, [pc, #492]	@ (80027b0 <Shell_Loop+0x224>)
 80025c4:	4878      	ldr	r0, [pc, #480]	@ (80027a8 <Shell_Loop+0x21c>)
 80025c6:	f009 fccd 	bl	800bf64 <strtok>
 80025ca:	4603      	mov	r3, r0
 80025cc:	4a79      	ldr	r2, [pc, #484]	@ (80027b4 <Shell_Loop+0x228>)
 80025ce:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80025d0:	e010      	b.n	80025f4 <Shell_Loop+0x68>
				argv[argc++] = token;
 80025d2:	4b76      	ldr	r3, [pc, #472]	@ (80027ac <Shell_Loop+0x220>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	4974      	ldr	r1, [pc, #464]	@ (80027ac <Shell_Loop+0x220>)
 80025da:	600a      	str	r2, [r1, #0]
 80025dc:	4a75      	ldr	r2, [pc, #468]	@ (80027b4 <Shell_Loop+0x228>)
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	4975      	ldr	r1, [pc, #468]	@ (80027b8 <Shell_Loop+0x22c>)
 80025e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 80025e6:	4972      	ldr	r1, [pc, #456]	@ (80027b0 <Shell_Loop+0x224>)
 80025e8:	2000      	movs	r0, #0
 80025ea:	f009 fcbb 	bl	800bf64 <strtok>
 80025ee:	4603      	mov	r3, r0
 80025f0:	4a70      	ldr	r2, [pc, #448]	@ (80027b4 <Shell_Loop+0x228>)
 80025f2:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80025f4:	4b6f      	ldr	r3, [pc, #444]	@ (80027b4 <Shell_Loop+0x228>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1ea      	bne.n	80025d2 <Shell_Loop+0x46>
			}
			idx_cmd = 0;
 80025fc:	4b69      	ldr	r3, [pc, #420]	@ (80027a4 <Shell_Loop+0x218>)
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8002602:	4b6e      	ldr	r3, [pc, #440]	@ (80027bc <Shell_Loop+0x230>)
 8002604:	2201      	movs	r2, #1
 8002606:	601a      	str	r2, [r3, #0]
			break;
 8002608:	e01f      	b.n	800264a <Shell_Loop+0xbe>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 800260a:	4b66      	ldr	r3, [pc, #408]	@ (80027a4 <Shell_Loop+0x218>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	1e5a      	subs	r2, r3, #1
 8002610:	4964      	ldr	r1, [pc, #400]	@ (80027a4 <Shell_Loop+0x218>)
 8002612:	600a      	str	r2, [r1, #0]
 8002614:	4a64      	ldr	r2, [pc, #400]	@ (80027a8 <Shell_Loop+0x21c>)
 8002616:	2100      	movs	r1, #0
 8002618:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 800261a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800261e:	2204      	movs	r2, #4
 8002620:	4967      	ldr	r1, [pc, #412]	@ (80027c0 <Shell_Loop+0x234>)
 8002622:	485f      	ldr	r0, [pc, #380]	@ (80027a0 <Shell_Loop+0x214>)
 8002624:	f005 fe17 	bl	8008256 <HAL_UART_Transmit>
			break;
 8002628:	e00f      	b.n	800264a <Shell_Loop+0xbe>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 800262a:	4b5e      	ldr	r3, [pc, #376]	@ (80027a4 <Shell_Loop+0x218>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	495c      	ldr	r1, [pc, #368]	@ (80027a4 <Shell_Loop+0x218>)
 8002632:	600a      	str	r2, [r1, #0]
 8002634:	4a58      	ldr	r2, [pc, #352]	@ (8002798 <Shell_Loop+0x20c>)
 8002636:	7811      	ldrb	r1, [r2, #0]
 8002638:	4a5b      	ldr	r2, [pc, #364]	@ (80027a8 <Shell_Loop+0x21c>)
 800263a:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800263c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002640:	2201      	movs	r2, #1
 8002642:	4955      	ldr	r1, [pc, #340]	@ (8002798 <Shell_Loop+0x20c>)
 8002644:	4856      	ldr	r0, [pc, #344]	@ (80027a0 <Shell_Loop+0x214>)
 8002646:	f005 fe06 	bl	8008256 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 800264a:	4b52      	ldr	r3, [pc, #328]	@ (8002794 <Shell_Loop+0x208>)
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 8002650:	4b5a      	ldr	r3, [pc, #360]	@ (80027bc <Shell_Loop+0x230>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 809b 	beq.w	8002790 <Shell_Loop+0x204>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 800265a:	4b57      	ldr	r3, [pc, #348]	@ (80027b8 <Shell_Loop+0x22c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4959      	ldr	r1, [pc, #356]	@ (80027c4 <Shell_Loop+0x238>)
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd fddd 	bl	8000220 <strcmp>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d107      	bne.n	800267c <Shell_Loop+0xf0>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 800266c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002670:	221a      	movs	r2, #26
 8002672:	4955      	ldr	r1, [pc, #340]	@ (80027c8 <Shell_Loop+0x23c>)
 8002674:	484a      	ldr	r0, [pc, #296]	@ (80027a0 <Shell_Loop+0x214>)
 8002676:	f005 fdee 	bl	8008256 <HAL_UART_Transmit>
 800267a:	e07f      	b.n	800277c <Shell_Loop+0x1f0>
		}
		else if(strcmp(argv[0],"help")==0){
 800267c:	4b4e      	ldr	r3, [pc, #312]	@ (80027b8 <Shell_Loop+0x22c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4952      	ldr	r1, [pc, #328]	@ (80027cc <Shell_Loop+0x240>)
 8002682:	4618      	mov	r0, r3
 8002684:	f7fd fdcc 	bl	8000220 <strcmp>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10b      	bne.n	80026a6 <Shell_Loop+0x11a>
			HAL_UART_Transmit(&huart2, helpMessage, strlen((char *)helpMessage), HAL_MAX_DELAY);
 800268e:	4850      	ldr	r0, [pc, #320]	@ (80027d0 <Shell_Loop+0x244>)
 8002690:	f7fd fe26 	bl	80002e0 <strlen>
 8002694:	4603      	mov	r3, r0
 8002696:	b29a      	uxth	r2, r3
 8002698:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800269c:	494c      	ldr	r1, [pc, #304]	@ (80027d0 <Shell_Loop+0x244>)
 800269e:	4840      	ldr	r0, [pc, #256]	@ (80027a0 <Shell_Loop+0x214>)
 80026a0:	f005 fdd9 	bl	8008256 <HAL_UART_Transmit>
 80026a4:	e06a      	b.n	800277c <Shell_Loop+0x1f0>
		}
		else if(strcmp(argv[0],"ratio")==0){
 80026a6:	4b44      	ldr	r3, [pc, #272]	@ (80027b8 <Shell_Loop+0x22c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	494a      	ldr	r1, [pc, #296]	@ (80027d4 <Shell_Loop+0x248>)
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fd fdb7 	bl	8000220 <strcmp>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d113      	bne.n	80026e0 <Shell_Loop+0x154>
			if (argc > 1) {
 80026b8:	4b3c      	ldr	r3, [pc, #240]	@ (80027ac <Shell_Loop+0x220>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	dd5d      	ble.n	800277c <Shell_Loop+0x1f0>
				set_PWM_ratio(atof(argv[1]));
 80026c0:	4b3d      	ldr	r3, [pc, #244]	@ (80027b8 <Shell_Loop+0x22c>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f007 fded 	bl	800a2a4 <atof>
 80026ca:	eeb0 7a40 	vmov.f32	s14, s0
 80026ce:	eef0 7a60 	vmov.f32	s15, s1
 80026d2:	eeb0 0a47 	vmov.f32	s0, s14
 80026d6:	eef0 0a67 	vmov.f32	s1, s15
 80026da:	f7fe fff9 	bl	80016d0 <set_PWM_ratio>
 80026de:	e04d      	b.n	800277c <Shell_Loop+0x1f0>
			}
		}
		else if(strcmp(argv[0],"speed")==0){
 80026e0:	4b35      	ldr	r3, [pc, #212]	@ (80027b8 <Shell_Loop+0x22c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	493c      	ldr	r1, [pc, #240]	@ (80027d8 <Shell_Loop+0x24c>)
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fd fd9a 	bl	8000220 <strcmp>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10d      	bne.n	800270e <Shell_Loop+0x182>
			if (argc > 1) {
 80026f2:	4b2e      	ldr	r3, [pc, #184]	@ (80027ac <Shell_Loop+0x220>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	dd40      	ble.n	800277c <Shell_Loop+0x1f0>
				set_PWM_speed(atoi(argv[1]));
 80026fa:	4b2f      	ldr	r3, [pc, #188]	@ (80027b8 <Shell_Loop+0x22c>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4618      	mov	r0, r3
 8002700:	f007 fdd3 	bl	800a2aa <atoi>
 8002704:	4603      	mov	r3, r0
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff f81a 	bl	8001740 <set_PWM_speed>
 800270c:	e036      	b.n	800277c <Shell_Loop+0x1f0>
			}
		}
		else if(strcmp(argv[0],"start")==0){
 800270e:	4b2a      	ldr	r3, [pc, #168]	@ (80027b8 <Shell_Loop+0x22c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4932      	ldr	r1, [pc, #200]	@ (80027dc <Shell_Loop+0x250>)
 8002714:	4618      	mov	r0, r3
 8002716:	f7fd fd83 	bl	8000220 <strcmp>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d102      	bne.n	8002726 <Shell_Loop+0x19a>
			start_PWM();
 8002720:	f7ff f826 	bl	8001770 <start_PWM>
 8002724:	e02a      	b.n	800277c <Shell_Loop+0x1f0>
		}
		else if(strcmp(argv[0],"stop")==0){
 8002726:	4b24      	ldr	r3, [pc, #144]	@ (80027b8 <Shell_Loop+0x22c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	492d      	ldr	r1, [pc, #180]	@ (80027e0 <Shell_Loop+0x254>)
 800272c:	4618      	mov	r0, r3
 800272e:	f7fd fd77 	bl	8000220 <strcmp>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d102      	bne.n	800273e <Shell_Loop+0x1b2>
			stop_PWM();
 8002738:	f7ff f83e 	bl	80017b8 <stop_PWM>
 800273c:	e01e      	b.n	800277c <Shell_Loop+0x1f0>
		}
		else if(strcmp(argv[0],"reset")==0){
 800273e:	4b1e      	ldr	r3, [pc, #120]	@ (80027b8 <Shell_Loop+0x22c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4928      	ldr	r1, [pc, #160]	@ (80027e4 <Shell_Loop+0x258>)
 8002744:	4618      	mov	r0, r3
 8002746:	f7fd fd6b 	bl	8000220 <strcmp>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d102      	bne.n	8002756 <Shell_Loop+0x1ca>
			reset_inverter();
 8002750:	f7ff f848 	bl	80017e4 <reset_inverter>
 8002754:	e012      	b.n	800277c <Shell_Loop+0x1f0>
		}
		else if(strcmp(argv[0],"current")==0){
 8002756:	4b18      	ldr	r3, [pc, #96]	@ (80027b8 <Shell_Loop+0x22c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4923      	ldr	r1, [pc, #140]	@ (80027e8 <Shell_Loop+0x25c>)
 800275c:	4618      	mov	r0, r3
 800275e:	f7fd fd5f 	bl	8000220 <strcmp>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <Shell_Loop+0x1e2>
			read_current();
 8002768:	f7ff f842 	bl	80017f0 <read_current>
 800276c:	e006      	b.n	800277c <Shell_Loop+0x1f0>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 800276e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002772:	2214      	movs	r2, #20
 8002774:	491d      	ldr	r1, [pc, #116]	@ (80027ec <Shell_Loop+0x260>)
 8002776:	480a      	ldr	r0, [pc, #40]	@ (80027a0 <Shell_Loop+0x214>)
 8002778:	f005 fd6d 	bl	8008256 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800277c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002780:	221c      	movs	r2, #28
 8002782:	491b      	ldr	r1, [pc, #108]	@ (80027f0 <Shell_Loop+0x264>)
 8002784:	4806      	ldr	r0, [pc, #24]	@ (80027a0 <Shell_Loop+0x214>)
 8002786:	f005 fd66 	bl	8008256 <HAL_UART_Transmit>
		newCmdReady = 0;
 800278a:	4b0c      	ldr	r3, [pc, #48]	@ (80027bc <Shell_Loop+0x230>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
	}
}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000774 	.word	0x20000774
 8002798:	20000778 	.word	0x20000778
 800279c:	20000088 	.word	0x20000088
 80027a0:	20000654 	.word	0x20000654
 80027a4:	200007fc 	.word	0x200007fc
 80027a8:	200007bc 	.word	0x200007bc
 80027ac:	20000824 	.word	0x20000824
 80027b0:	0800eaf8 	.word	0x0800eaf8
 80027b4:	20000828 	.word	0x20000828
 80027b8:	20000800 	.word	0x20000800
 80027bc:	2000082c 	.word	0x2000082c
 80027c0:	2000008c 	.word	0x2000008c
 80027c4:	0800eafc 	.word	0x0800eafc
 80027c8:	200000a4 	.word	0x200000a4
 80027cc:	0800eb0c 	.word	0x0800eb0c
 80027d0:	200000c0 	.word	0x200000c0
 80027d4:	0800eb14 	.word	0x0800eb14
 80027d8:	0800eb1c 	.word	0x0800eb1c
 80027dc:	0800eb24 	.word	0x0800eb24
 80027e0:	0800eb2c 	.word	0x0800eb2c
 80027e4:	0800eb34 	.word	0x0800eb34
 80027e8:	0800eb3c 	.word	0x0800eb3c
 80027ec:	20000090 	.word	0x20000090
 80027f0:	20000004 	.word	0x20000004

080027f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80027fc:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <HAL_UART_RxCpltCallback+0x20>)
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002802:	2201      	movs	r2, #1
 8002804:	4904      	ldr	r1, [pc, #16]	@ (8002818 <HAL_UART_RxCpltCallback+0x24>)
 8002806:	4805      	ldr	r0, [pc, #20]	@ (800281c <HAL_UART_RxCpltCallback+0x28>)
 8002808:	f005 fdbc 	bl	8008384 <HAL_UART_Receive_IT>
}
 800280c:	bf00      	nop
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000774 	.word	0x20000774
 8002818:	20000778 	.word	0x20000778
 800281c:	20000654 	.word	0x20000654

08002820 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002820:	480d      	ldr	r0, [pc, #52]	@ (8002858 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002822:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002824:	480d      	ldr	r0, [pc, #52]	@ (800285c <LoopForever+0x6>)
  ldr r1, =_edata
 8002826:	490e      	ldr	r1, [pc, #56]	@ (8002860 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002828:	4a0e      	ldr	r2, [pc, #56]	@ (8002864 <LoopForever+0xe>)
  movs r3, #0
 800282a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800282c:	e002      	b.n	8002834 <LoopCopyDataInit>

0800282e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800282e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002832:	3304      	adds	r3, #4

08002834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002838:	d3f9      	bcc.n	800282e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800283a:	4a0b      	ldr	r2, [pc, #44]	@ (8002868 <LoopForever+0x12>)
  ldr r4, =_ebss
 800283c:	4c0b      	ldr	r4, [pc, #44]	@ (800286c <LoopForever+0x16>)
  movs r3, #0
 800283e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002840:	e001      	b.n	8002846 <LoopFillZerobss>

08002842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002844:	3204      	adds	r2, #4

08002846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002848:	d3fb      	bcc.n	8002842 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800284a:	f7ff faad 	bl	8001da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800284e:	f009 fc35 	bl	800c0bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002852:	f7ff f837 	bl	80018c4 <main>

08002856 <LoopForever>:

LoopForever:
    b LoopForever
 8002856:	e7fe      	b.n	8002856 <LoopForever>
  ldr   r0, =_estack
 8002858:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800285c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002860:	200003a8 	.word	0x200003a8
  ldr r2, =_sidata
 8002864:	0800f01c 	.word	0x0800f01c
  ldr r2, =_sbss
 8002868:	200003a8 	.word	0x200003a8
  ldr r4, =_ebss
 800286c:	20000980 	.word	0x20000980

08002870 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002870:	e7fe      	b.n	8002870 <ADC3_IRQHandler>

08002872 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800287c:	2003      	movs	r0, #3
 800287e:	f001 ffde 	bl	800483e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002882:	200f      	movs	r0, #15
 8002884:	f7ff f8dc 	bl	8001a40 <HAL_InitTick>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	71fb      	strb	r3, [r7, #7]
 8002892:	e001      	b.n	8002898 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002894:	f7ff f8b0 	bl	80019f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002898:	79fb      	ldrb	r3, [r7, #7]

}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a8:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <HAL_IncTick+0x1c>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b05      	ldr	r3, [pc, #20]	@ (80028c4 <HAL_IncTick+0x20>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4413      	add	r3, r2
 80028b2:	4a03      	ldr	r2, [pc, #12]	@ (80028c0 <HAL_IncTick+0x1c>)
 80028b4:	6013      	str	r3, [r2, #0]
}
 80028b6:	bf00      	nop
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	20000830 	.word	0x20000830
 80028c4:	200001dc 	.word	0x200001dc

080028c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return uwTick;
 80028cc:	4b03      	ldr	r3, [pc, #12]	@ (80028dc <HAL_GetTick+0x14>)
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000830 	.word	0x20000830

080028e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	609a      	str	r2, [r3, #8]
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	609a      	str	r2, [r3, #8]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800293c:	4618      	mov	r0, r3
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	3360      	adds	r3, #96	@ 0x60
 800295a:	461a      	mov	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4b08      	ldr	r3, [pc, #32]	@ (800298c <LL_ADC_SetOffset+0x44>)
 800296a:	4013      	ands	r3, r2
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	4313      	orrs	r3, r2
 8002978:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002980:	bf00      	nop
 8002982:	371c      	adds	r7, #28
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	03fff000 	.word	0x03fff000

08002990 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3360      	adds	r3, #96	@ 0x60
 800299e:	461a      	mov	r2, r3
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	3360      	adds	r3, #96	@ 0x60
 80029cc:	461a      	mov	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	431a      	orrs	r2, r3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80029e6:	bf00      	nop
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b087      	sub	sp, #28
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3360      	adds	r3, #96	@ 0x60
 8002a02:	461a      	mov	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002a1c:	bf00      	nop
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	3360      	adds	r3, #96	@ 0x60
 8002a38:	461a      	mov	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002a52:	bf00      	nop
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	615a      	str	r2, [r3, #20]
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b087      	sub	sp, #28
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	3330      	adds	r3, #48	@ 0x30
 8002aba:	461a      	mov	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	0a1b      	lsrs	r3, r3, #8
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	4413      	add	r3, r2
 8002ac8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	211f      	movs	r1, #31
 8002ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ada:	43db      	mvns	r3, r3
 8002adc:	401a      	ands	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	0e9b      	lsrs	r3, r3, #26
 8002ae2:	f003 011f 	and.w	r1, r3, #31
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	fa01 f303 	lsl.w	r3, r1, r3
 8002af0:	431a      	orrs	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002af6:	bf00      	nop
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b0e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3314      	adds	r3, #20
 8002b38:	461a      	mov	r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	0e5b      	lsrs	r3, r3, #25
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	4413      	add	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	0d1b      	lsrs	r3, r3, #20
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	2107      	movs	r1, #7
 8002b56:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	401a      	ands	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	0d1b      	lsrs	r3, r3, #20
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b72:	bf00      	nop
 8002b74:	371c      	adds	r7, #28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a0f      	ldr	r2, [pc, #60]	@ (8002bcc <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d10a      	bne.n	8002baa <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002ba8:	e00a      	b.n	8002bc0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	401a      	ands	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	407f0000 	.word	0x407f0000

08002bd0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 031f 	and.w	r3, r3, #31
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002c18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6093      	str	r3, [r2, #8]
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c40:	d101      	bne.n	8002c46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002c64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c68:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c90:	d101      	bne.n	8002c96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002cb8:	f043 0201 	orr.w	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cdc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ce0:	f043 0202 	orr.w	r2, r3, #2
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <LL_ADC_IsEnabled+0x18>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <LL_ADC_IsEnabled+0x1a>
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d101      	bne.n	8002d32 <LL_ADC_IsDisableOngoing+0x18>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <LL_ADC_IsDisableOngoing+0x1a>
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d54:	f043 0204 	orr.w	r2, r3, #4
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d101      	bne.n	8002d80 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d101      	bne.n	8002da6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002db4:	b590      	push	{r4, r7, lr}
 8002db6:	b089      	sub	sp, #36	@ 0x24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e1af      	b.n	800312e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7fe fa19 	bl	8001214 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff19 	bl	8002c2c <LL_ADC_IsDeepPowerDownEnabled>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d004      	beq.n	8002e0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff feff 	bl	8002c08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff ff34 	bl	8002c7c <LL_ADC_IsInternalRegulatorEnabled>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d115      	bne.n	8002e46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff ff18 	bl	8002c54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e24:	4b9f      	ldr	r3, [pc, #636]	@ (80030a4 <HAL_ADC_Init+0x2f0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	099b      	lsrs	r3, r3, #6
 8002e2a:	4a9f      	ldr	r2, [pc, #636]	@ (80030a8 <HAL_ADC_Init+0x2f4>)
 8002e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e30:	099b      	lsrs	r3, r3, #6
 8002e32:	3301      	adds	r3, #1
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e38:	e002      	b.n	8002e40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f9      	bne.n	8002e3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff ff16 	bl	8002c7c <LL_ADC_IsInternalRegulatorEnabled>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10d      	bne.n	8002e72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5a:	f043 0210 	orr.w	r2, r3, #16
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e66:	f043 0201 	orr.w	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff ff76 	bl	8002d68 <LL_ADC_REG_IsConversionOngoing>
 8002e7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f040 8148 	bne.w	800311c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f040 8144 	bne.w	800311c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e98:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e9c:	f043 0202 	orr.w	r2, r3, #2
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ff23 	bl	8002cf4 <LL_ADC_IsEnabled>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d141      	bne.n	8002f38 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ebc:	d004      	beq.n	8002ec8 <HAL_ADC_Init+0x114>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a7a      	ldr	r2, [pc, #488]	@ (80030ac <HAL_ADC_Init+0x2f8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d10f      	bne.n	8002ee8 <HAL_ADC_Init+0x134>
 8002ec8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ecc:	f7ff ff12 	bl	8002cf4 <LL_ADC_IsEnabled>
 8002ed0:	4604      	mov	r4, r0
 8002ed2:	4876      	ldr	r0, [pc, #472]	@ (80030ac <HAL_ADC_Init+0x2f8>)
 8002ed4:	f7ff ff0e 	bl	8002cf4 <LL_ADC_IsEnabled>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	4323      	orrs	r3, r4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bf0c      	ite	eq
 8002ee0:	2301      	moveq	r3, #1
 8002ee2:	2300      	movne	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	e012      	b.n	8002f0e <HAL_ADC_Init+0x15a>
 8002ee8:	4871      	ldr	r0, [pc, #452]	@ (80030b0 <HAL_ADC_Init+0x2fc>)
 8002eea:	f7ff ff03 	bl	8002cf4 <LL_ADC_IsEnabled>
 8002eee:	4604      	mov	r4, r0
 8002ef0:	4870      	ldr	r0, [pc, #448]	@ (80030b4 <HAL_ADC_Init+0x300>)
 8002ef2:	f7ff feff 	bl	8002cf4 <LL_ADC_IsEnabled>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	431c      	orrs	r4, r3
 8002efa:	486f      	ldr	r0, [pc, #444]	@ (80030b8 <HAL_ADC_Init+0x304>)
 8002efc:	f7ff fefa 	bl	8002cf4 <LL_ADC_IsEnabled>
 8002f00:	4603      	mov	r3, r0
 8002f02:	4323      	orrs	r3, r4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	bf0c      	ite	eq
 8002f08:	2301      	moveq	r3, #1
 8002f0a:	2300      	movne	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d012      	beq.n	8002f38 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f1a:	d004      	beq.n	8002f26 <HAL_ADC_Init+0x172>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a62      	ldr	r2, [pc, #392]	@ (80030ac <HAL_ADC_Init+0x2f8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <HAL_ADC_Init+0x176>
 8002f26:	4a65      	ldr	r2, [pc, #404]	@ (80030bc <HAL_ADC_Init+0x308>)
 8002f28:	e000      	b.n	8002f2c <HAL_ADC_Init+0x178>
 8002f2a:	4a65      	ldr	r2, [pc, #404]	@ (80030c0 <HAL_ADC_Init+0x30c>)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4619      	mov	r1, r3
 8002f32:	4610      	mov	r0, r2
 8002f34:	f7ff fcd4 	bl	80028e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	7f5b      	ldrb	r3, [r3, #29]
 8002f3c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f42:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002f48:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002f4e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f56:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d106      	bne.n	8002f74 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	045b      	lsls	r3, r3, #17
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d009      	beq.n	8002f90 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f80:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f88:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	4b4b      	ldr	r3, [pc, #300]	@ (80030c4 <HAL_ADC_Init+0x310>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	69b9      	ldr	r1, [r7, #24]
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fed2 	bl	8002d68 <LL_ADC_REG_IsConversionOngoing>
 8002fc4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff fedf 	bl	8002d8e <LL_ADC_INJ_IsConversionOngoing>
 8002fd0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d17f      	bne.n	80030d8 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d17c      	bne.n	80030d8 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fe2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002fea:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ffa:	f023 0302 	bic.w	r3, r3, #2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	69b9      	ldr	r1, [r7, #24]
 8003004:	430b      	orrs	r3, r1
 8003006:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d017      	beq.n	8003040 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691a      	ldr	r2, [r3, #16]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800301e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003028:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800302c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6911      	ldr	r1, [r2, #16]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	430b      	orrs	r3, r1
 800303a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800303e:	e013      	b.n	8003068 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691a      	ldr	r2, [r3, #16]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800304e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003060:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003064:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800306e:	2b01      	cmp	r3, #1
 8003070:	d12a      	bne.n	80030c8 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800307c:	f023 0304 	bic.w	r3, r3, #4
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003088:	4311      	orrs	r1, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800308e:	4311      	orrs	r1, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003094:	430a      	orrs	r2, r1
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0201 	orr.w	r2, r2, #1
 80030a0:	611a      	str	r2, [r3, #16]
 80030a2:	e019      	b.n	80030d8 <HAL_ADC_Init+0x324>
 80030a4:	20000000 	.word	0x20000000
 80030a8:	053e2d63 	.word	0x053e2d63
 80030ac:	50000100 	.word	0x50000100
 80030b0:	50000400 	.word	0x50000400
 80030b4:	50000500 	.word	0x50000500
 80030b8:	50000600 	.word	0x50000600
 80030bc:	50000300 	.word	0x50000300
 80030c0:	50000700 	.word	0x50000700
 80030c4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691a      	ldr	r2, [r3, #16]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0201 	bic.w	r2, r2, #1
 80030d6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d10c      	bne.n	80030fa <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	f023 010f 	bic.w	r1, r3, #15
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	1e5a      	subs	r2, r3, #1
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80030f8:	e007      	b.n	800310a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 020f 	bic.w	r2, r2, #15
 8003108:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310e:	f023 0303 	bic.w	r3, r3, #3
 8003112:	f043 0201 	orr.w	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	65da      	str	r2, [r3, #92]	@ 0x5c
 800311a:	e007      	b.n	800312c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003120:	f043 0210 	orr.w	r2, r3, #16
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800312c:	7ffb      	ldrb	r3, [r7, #31]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3724      	adds	r7, #36	@ 0x24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd90      	pop	{r4, r7, pc}
 8003136:	bf00      	nop

08003138 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800314c:	d004      	beq.n	8003158 <HAL_ADC_Start_DMA+0x20>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a5a      	ldr	r2, [pc, #360]	@ (80032bc <HAL_ADC_Start_DMA+0x184>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d101      	bne.n	800315c <HAL_ADC_Start_DMA+0x24>
 8003158:	4b59      	ldr	r3, [pc, #356]	@ (80032c0 <HAL_ADC_Start_DMA+0x188>)
 800315a:	e000      	b.n	800315e <HAL_ADC_Start_DMA+0x26>
 800315c:	4b59      	ldr	r3, [pc, #356]	@ (80032c4 <HAL_ADC_Start_DMA+0x18c>)
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff fd36 	bl	8002bd0 <LL_ADC_GetMultimode>
 8003164:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fdfc 	bl	8002d68 <LL_ADC_REG_IsConversionOngoing>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	f040 809b 	bne.w	80032ae <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_ADC_Start_DMA+0x4e>
 8003182:	2302      	movs	r3, #2
 8003184:	e096      	b.n	80032b4 <HAL_ADC_Start_DMA+0x17c>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a4d      	ldr	r2, [pc, #308]	@ (80032c8 <HAL_ADC_Start_DMA+0x190>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d008      	beq.n	80031aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b05      	cmp	r3, #5
 80031a2:	d002      	beq.n	80031aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b09      	cmp	r3, #9
 80031a8:	d17a      	bne.n	80032a0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 ff56 	bl	800405c <ADC_Enable>
 80031b0:	4603      	mov	r3, r0
 80031b2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d16d      	bne.n	8003296 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031be:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031c2:	f023 0301 	bic.w	r3, r3, #1
 80031c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a3a      	ldr	r2, [pc, #232]	@ (80032bc <HAL_ADC_Start_DMA+0x184>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d009      	beq.n	80031ec <HAL_ADC_Start_DMA+0xb4>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a3b      	ldr	r2, [pc, #236]	@ (80032cc <HAL_ADC_Start_DMA+0x194>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d002      	beq.n	80031e8 <HAL_ADC_Start_DMA+0xb0>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	e003      	b.n	80031f0 <HAL_ADC_Start_DMA+0xb8>
 80031e8:	4b39      	ldr	r3, [pc, #228]	@ (80032d0 <HAL_ADC_Start_DMA+0x198>)
 80031ea:	e001      	b.n	80031f0 <HAL_ADC_Start_DMA+0xb8>
 80031ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d002      	beq.n	80031fe <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d105      	bne.n	800320a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003202:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d006      	beq.n	8003224 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800321a:	f023 0206 	bic.w	r2, r3, #6
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	661a      	str	r2, [r3, #96]	@ 0x60
 8003222:	e002      	b.n	800322a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322e:	4a29      	ldr	r2, [pc, #164]	@ (80032d4 <HAL_ADC_Start_DMA+0x19c>)
 8003230:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003236:	4a28      	ldr	r2, [pc, #160]	@ (80032d8 <HAL_ADC_Start_DMA+0x1a0>)
 8003238:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323e:	4a27      	ldr	r2, [pc, #156]	@ (80032dc <HAL_ADC_Start_DMA+0x1a4>)
 8003240:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	221c      	movs	r2, #28
 8003248:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0210 	orr.w	r2, r2, #16
 8003260:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 0201 	orr.w	r2, r2, #1
 8003270:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3340      	adds	r3, #64	@ 0x40
 800327c:	4619      	mov	r1, r3
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f001 fbb7 	bl	80049f4 <HAL_DMA_Start_IT>
 8003286:	4603      	mov	r3, r0
 8003288:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fd56 	bl	8002d40 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003294:	e00d      	b.n	80032b2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800329e:	e008      	b.n	80032b2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80032ac:	e001      	b.n	80032b2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
 80032b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80032b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	50000100 	.word	0x50000100
 80032c0:	50000300 	.word	0x50000300
 80032c4:	50000700 	.word	0x50000700
 80032c8:	50000600 	.word	0x50000600
 80032cc:	50000500 	.word	0x50000500
 80032d0:	50000400 	.word	0x50000400
 80032d4:	080041df 	.word	0x080041df
 80032d8:	080042b7 	.word	0x080042b7
 80032dc:	080042d3 	.word	0x080042d3

080032e0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08a      	sub	sp, #40	@ 0x28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80032e8:	2300      	movs	r3, #0
 80032ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003304:	d004      	beq.n	8003310 <HAL_ADC_IRQHandler+0x30>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a8e      	ldr	r2, [pc, #568]	@ (8003544 <HAL_ADC_IRQHandler+0x264>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d101      	bne.n	8003314 <HAL_ADC_IRQHandler+0x34>
 8003310:	4b8d      	ldr	r3, [pc, #564]	@ (8003548 <HAL_ADC_IRQHandler+0x268>)
 8003312:	e000      	b.n	8003316 <HAL_ADC_IRQHandler+0x36>
 8003314:	4b8d      	ldr	r3, [pc, #564]	@ (800354c <HAL_ADC_IRQHandler+0x26c>)
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff fc5a 	bl	8002bd0 <LL_ADC_GetMultimode>
 800331c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d017      	beq.n	8003358 <HAL_ADC_IRQHandler+0x78>
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d012      	beq.n	8003358 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003336:	f003 0310 	and.w	r3, r3, #16
 800333a:	2b00      	cmp	r3, #0
 800333c:	d105      	bne.n	800334a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003342:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f001 f8b8 	bl	80044c0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2202      	movs	r2, #2
 8003356:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b00      	cmp	r3, #0
 8003360:	d004      	beq.n	800336c <HAL_ADC_IRQHandler+0x8c>
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10b      	bne.n	8003384 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8094 	beq.w	80034a0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 808e 	beq.w	80034a0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003388:	f003 0310 	and.w	r3, r3, #16
 800338c:	2b00      	cmp	r3, #0
 800338e:	d105      	bne.n	800339c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003394:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff fb6f 	bl	8002a84 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d072      	beq.n	8003492 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a64      	ldr	r2, [pc, #400]	@ (8003544 <HAL_ADC_IRQHandler+0x264>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d009      	beq.n	80033ca <HAL_ADC_IRQHandler+0xea>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a65      	ldr	r2, [pc, #404]	@ (8003550 <HAL_ADC_IRQHandler+0x270>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d002      	beq.n	80033c6 <HAL_ADC_IRQHandler+0xe6>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	e003      	b.n	80033ce <HAL_ADC_IRQHandler+0xee>
 80033c6:	4b63      	ldr	r3, [pc, #396]	@ (8003554 <HAL_ADC_IRQHandler+0x274>)
 80033c8:	e001      	b.n	80033ce <HAL_ADC_IRQHandler+0xee>
 80033ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6812      	ldr	r2, [r2, #0]
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d008      	beq.n	80033e8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	2b05      	cmp	r3, #5
 80033e0:	d002      	beq.n	80033e8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2b09      	cmp	r3, #9
 80033e6:	d104      	bne.n	80033f2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	623b      	str	r3, [r7, #32]
 80033f0:	e014      	b.n	800341c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a53      	ldr	r2, [pc, #332]	@ (8003544 <HAL_ADC_IRQHandler+0x264>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d009      	beq.n	8003410 <HAL_ADC_IRQHandler+0x130>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a53      	ldr	r2, [pc, #332]	@ (8003550 <HAL_ADC_IRQHandler+0x270>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d002      	beq.n	800340c <HAL_ADC_IRQHandler+0x12c>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	e003      	b.n	8003414 <HAL_ADC_IRQHandler+0x134>
 800340c:	4b51      	ldr	r3, [pc, #324]	@ (8003554 <HAL_ADC_IRQHandler+0x274>)
 800340e:	e001      	b.n	8003414 <HAL_ADC_IRQHandler+0x134>
 8003410:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003414:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d135      	bne.n	8003492 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b08      	cmp	r3, #8
 8003432:	d12e      	bne.n	8003492 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff fc95 	bl	8002d68 <LL_ADC_REG_IsConversionOngoing>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d11a      	bne.n	800347a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 020c 	bic.w	r2, r2, #12
 8003452:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003458:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003464:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d112      	bne.n	8003492 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003470:	f043 0201 	orr.w	r2, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003478:	e00b      	b.n	8003492 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800347e:	f043 0210 	orr.w	r2, r3, #16
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800348a:	f043 0201 	orr.w	r2, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fe fa02 	bl	800189c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	220c      	movs	r2, #12
 800349e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d004      	beq.n	80034b4 <HAL_ADC_IRQHandler+0x1d4>
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	f003 0320 	and.w	r3, r3, #32
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10b      	bne.n	80034cc <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 80b3 	beq.w	8003626 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 80ad 	beq.w	8003626 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d105      	bne.n	80034e4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034dc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fb0a 	bl	8002b02 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80034ee:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff fac5 	bl	8002a84 <LL_ADC_REG_IsTriggerSourceSWStart>
 80034fa:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a10      	ldr	r2, [pc, #64]	@ (8003544 <HAL_ADC_IRQHandler+0x264>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d009      	beq.n	800351a <HAL_ADC_IRQHandler+0x23a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a11      	ldr	r2, [pc, #68]	@ (8003550 <HAL_ADC_IRQHandler+0x270>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d002      	beq.n	8003516 <HAL_ADC_IRQHandler+0x236>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	e003      	b.n	800351e <HAL_ADC_IRQHandler+0x23e>
 8003516:	4b0f      	ldr	r3, [pc, #60]	@ (8003554 <HAL_ADC_IRQHandler+0x274>)
 8003518:	e001      	b.n	800351e <HAL_ADC_IRQHandler+0x23e>
 800351a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6812      	ldr	r2, [r2, #0]
 8003522:	4293      	cmp	r3, r2
 8003524:	d008      	beq.n	8003538 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2b06      	cmp	r3, #6
 8003530:	d002      	beq.n	8003538 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b07      	cmp	r3, #7
 8003536:	d10f      	bne.n	8003558 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	623b      	str	r3, [r7, #32]
 8003540:	e01f      	b.n	8003582 <HAL_ADC_IRQHandler+0x2a2>
 8003542:	bf00      	nop
 8003544:	50000100 	.word	0x50000100
 8003548:	50000300 	.word	0x50000300
 800354c:	50000700 	.word	0x50000700
 8003550:	50000500 	.word	0x50000500
 8003554:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a8b      	ldr	r2, [pc, #556]	@ (800378c <HAL_ADC_IRQHandler+0x4ac>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d009      	beq.n	8003576 <HAL_ADC_IRQHandler+0x296>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a8a      	ldr	r2, [pc, #552]	@ (8003790 <HAL_ADC_IRQHandler+0x4b0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d002      	beq.n	8003572 <HAL_ADC_IRQHandler+0x292>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	e003      	b.n	800357a <HAL_ADC_IRQHandler+0x29a>
 8003572:	4b88      	ldr	r3, [pc, #544]	@ (8003794 <HAL_ADC_IRQHandler+0x4b4>)
 8003574:	e001      	b.n	800357a <HAL_ADC_IRQHandler+0x29a>
 8003576:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800357a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d047      	beq.n	8003618 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d007      	beq.n	80035a2 <HAL_ADC_IRQHandler+0x2c2>
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d03f      	beq.n	8003618 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d13a      	bne.n	8003618 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ac:	2b40      	cmp	r3, #64	@ 0x40
 80035ae:	d133      	bne.n	8003618 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d12e      	bne.n	8003618 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff fbe5 	bl	8002d8e <LL_ADC_INJ_IsConversionOngoing>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d11a      	bne.n	8003600 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80035d8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d112      	bne.n	8003618 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f6:	f043 0201 	orr.w	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035fe:	e00b      	b.n	8003618 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003604:	f043 0210 	orr.w	r2, r3, #16
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003610:	f043 0201 	orr.w	r2, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 ff29 	bl	8004470 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2260      	movs	r2, #96	@ 0x60
 8003624:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362c:	2b00      	cmp	r3, #0
 800362e:	d011      	beq.n	8003654 <HAL_ADC_IRQHandler+0x374>
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00c      	beq.n	8003654 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f8b4 	bl	80037b4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2280      	movs	r2, #128	@ 0x80
 8003652:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d012      	beq.n	8003684 <HAL_ADC_IRQHandler+0x3a4>
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00d      	beq.n	8003684 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 ff0f 	bl	8004498 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003682:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800368a:	2b00      	cmp	r3, #0
 800368c:	d012      	beq.n	80036b4 <HAL_ADC_IRQHandler+0x3d4>
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00d      	beq.n	80036b4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 ff01 	bl	80044ac <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036b2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d043      	beq.n	8003746 <HAL_ADC_IRQHandler+0x466>
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d03e      	beq.n	8003746 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d102      	bne.n	80036d6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80036d0:	2301      	movs	r3, #1
 80036d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80036d4:	e021      	b.n	800371a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d015      	beq.n	8003708 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036e4:	d004      	beq.n	80036f0 <HAL_ADC_IRQHandler+0x410>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a28      	ldr	r2, [pc, #160]	@ (800378c <HAL_ADC_IRQHandler+0x4ac>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d101      	bne.n	80036f4 <HAL_ADC_IRQHandler+0x414>
 80036f0:	4b29      	ldr	r3, [pc, #164]	@ (8003798 <HAL_ADC_IRQHandler+0x4b8>)
 80036f2:	e000      	b.n	80036f6 <HAL_ADC_IRQHandler+0x416>
 80036f4:	4b29      	ldr	r3, [pc, #164]	@ (800379c <HAL_ADC_IRQHandler+0x4bc>)
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff fa78 	bl	8002bec <LL_ADC_GetMultiDMATransfer>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003702:	2301      	movs	r3, #1
 8003704:	627b      	str	r3, [r7, #36]	@ 0x24
 8003706:	e008      	b.n	800371a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003716:	2301      	movs	r3, #1
 8003718:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371c:	2b01      	cmp	r3, #1
 800371e:	d10e      	bne.n	800373e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003724:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003730:	f043 0202 	orr.w	r2, r3, #2
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f845 	bl	80037c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2210      	movs	r2, #16
 8003744:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800374c:	2b00      	cmp	r3, #0
 800374e:	d018      	beq.n	8003782 <HAL_ADC_IRQHandler+0x4a2>
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003756:	2b00      	cmp	r3, #0
 8003758:	d013      	beq.n	8003782 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800376a:	f043 0208 	orr.w	r2, r3, #8
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800377a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 fe81 	bl	8004484 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003782:	bf00      	nop
 8003784:	3728      	adds	r7, #40	@ 0x28
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	50000100 	.word	0x50000100
 8003790:	50000500 	.word	0x50000500
 8003794:	50000400 	.word	0x50000400
 8003798:	50000300 	.word	0x50000300
 800379c:	50000700 	.word	0x50000700

080037a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b0b6      	sub	sp, #216	@ 0xd8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d102      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x24>
 80037fa:	2302      	movs	r3, #2
 80037fc:	f000 bc13 	b.w	8004026 <HAL_ADC_ConfigChannel+0x84a>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff faab 	bl	8002d68 <LL_ADC_REG_IsConversionOngoing>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	f040 83f3 	bne.w	8004000 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6859      	ldr	r1, [r3, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	f7ff f93f 	bl	8002aaa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff fa99 	bl	8002d68 <LL_ADC_REG_IsConversionOngoing>
 8003836:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff faa5 	bl	8002d8e <LL_ADC_INJ_IsConversionOngoing>
 8003844:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003848:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800384c:	2b00      	cmp	r3, #0
 800384e:	f040 81d9 	bne.w	8003c04 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003852:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003856:	2b00      	cmp	r3, #0
 8003858:	f040 81d4 	bne.w	8003c04 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003864:	d10f      	bne.n	8003886 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2200      	movs	r2, #0
 8003870:	4619      	mov	r1, r3
 8003872:	f7ff f959 	bl	8002b28 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff f8ed 	bl	8002a5e <LL_ADC_SetSamplingTimeCommonConfig>
 8003884:	e00e      	b.n	80038a4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6818      	ldr	r0, [r3, #0]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	6819      	ldr	r1, [r3, #0]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	461a      	mov	r2, r3
 8003894:	f7ff f948 	bl	8002b28 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2100      	movs	r1, #0
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff f8dd 	bl	8002a5e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	695a      	ldr	r2, [r3, #20]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	08db      	lsrs	r3, r3, #3
 80038b0:	f003 0303 	and.w	r3, r3, #3
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d022      	beq.n	800390c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	6919      	ldr	r1, [r3, #16]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80038d6:	f7ff f837 	bl	8002948 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6818      	ldr	r0, [r3, #0]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	6919      	ldr	r1, [r3, #16]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	461a      	mov	r2, r3
 80038e8:	f7ff f883 	bl	80029f2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	6919      	ldr	r1, [r3, #16]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	7f1b      	ldrb	r3, [r3, #28]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d102      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x126>
 80038fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003900:	e000      	b.n	8003904 <HAL_ADC_ConfigChannel+0x128>
 8003902:	2300      	movs	r3, #0
 8003904:	461a      	mov	r2, r3
 8003906:	f7ff f88f 	bl	8002a28 <LL_ADC_SetOffsetSaturation>
 800390a:	e17b      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2100      	movs	r1, #0
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff f83c 	bl	8002990 <LL_ADC_GetOffsetChannel>
 8003918:	4603      	mov	r3, r0
 800391a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10a      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x15c>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2100      	movs	r1, #0
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff f831 	bl	8002990 <LL_ADC_GetOffsetChannel>
 800392e:	4603      	mov	r3, r0
 8003930:	0e9b      	lsrs	r3, r3, #26
 8003932:	f003 021f 	and.w	r2, r3, #31
 8003936:	e01e      	b.n	8003976 <HAL_ADC_ConfigChannel+0x19a>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2100      	movs	r1, #0
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff f826 	bl	8002990 <LL_ADC_GetOffsetChannel>
 8003944:	4603      	mov	r3, r0
 8003946:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800394e:	fa93 f3a3 	rbit	r3, r3
 8003952:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003956:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800395a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800395e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003966:	2320      	movs	r3, #32
 8003968:	e004      	b.n	8003974 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800396a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800396e:	fab3 f383 	clz	r3, r3
 8003972:	b2db      	uxtb	r3, r3
 8003974:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800397e:	2b00      	cmp	r3, #0
 8003980:	d105      	bne.n	800398e <HAL_ADC_ConfigChannel+0x1b2>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	0e9b      	lsrs	r3, r3, #26
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	e018      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x1e4>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003996:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800399a:	fa93 f3a3 	rbit	r3, r3
 800399e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80039a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80039aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80039b2:	2320      	movs	r3, #32
 80039b4:	e004      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80039b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80039ba:	fab3 f383 	clz	r3, r3
 80039be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d106      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2200      	movs	r2, #0
 80039ca:	2100      	movs	r1, #0
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe fff5 	bl	80029bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2101      	movs	r1, #1
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fe ffd9 	bl	8002990 <LL_ADC_GetOffsetChannel>
 80039de:	4603      	mov	r3, r0
 80039e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10a      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x222>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2101      	movs	r1, #1
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe ffce 	bl	8002990 <LL_ADC_GetOffsetChannel>
 80039f4:	4603      	mov	r3, r0
 80039f6:	0e9b      	lsrs	r3, r3, #26
 80039f8:	f003 021f 	and.w	r2, r3, #31
 80039fc:	e01e      	b.n	8003a3c <HAL_ADC_ConfigChannel+0x260>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2101      	movs	r1, #1
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fe ffc3 	bl	8002990 <LL_ADC_GetOffsetChannel>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a14:	fa93 f3a3 	rbit	r3, r3
 8003a18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003a1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003a24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003a2c:	2320      	movs	r3, #32
 8003a2e:	e004      	b.n	8003a3a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003a30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a34:	fab3 f383 	clz	r3, r3
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d105      	bne.n	8003a54 <HAL_ADC_ConfigChannel+0x278>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	0e9b      	lsrs	r3, r3, #26
 8003a4e:	f003 031f 	and.w	r3, r3, #31
 8003a52:	e018      	b.n	8003a86 <HAL_ADC_ConfigChannel+0x2aa>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a60:	fa93 f3a3 	rbit	r3, r3
 8003a64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003a68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003a70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003a78:	2320      	movs	r3, #32
 8003a7a:	e004      	b.n	8003a86 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a80:	fab3 f383 	clz	r3, r3
 8003a84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d106      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	2101      	movs	r1, #1
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fe ff92 	bl	80029bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2102      	movs	r1, #2
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fe ff76 	bl	8002990 <LL_ADC_GetOffsetChannel>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10a      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x2e8>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2102      	movs	r1, #2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe ff6b 	bl	8002990 <LL_ADC_GetOffsetChannel>
 8003aba:	4603      	mov	r3, r0
 8003abc:	0e9b      	lsrs	r3, r3, #26
 8003abe:	f003 021f 	and.w	r2, r3, #31
 8003ac2:	e01e      	b.n	8003b02 <HAL_ADC_ConfigChannel+0x326>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2102      	movs	r1, #2
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe ff60 	bl	8002990 <LL_ADC_GetOffsetChannel>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003ae2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ae6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003aea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003af2:	2320      	movs	r3, #32
 8003af4:	e004      	b.n	8003b00 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003af6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003afa:	fab3 f383 	clz	r3, r3
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d105      	bne.n	8003b1a <HAL_ADC_ConfigChannel+0x33e>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	0e9b      	lsrs	r3, r3, #26
 8003b14:	f003 031f 	and.w	r3, r3, #31
 8003b18:	e016      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x36c>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b22:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b26:	fa93 f3a3 	rbit	r3, r3
 8003b2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003b2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003b32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003b3a:	2320      	movs	r3, #32
 8003b3c:	e004      	b.n	8003b48 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003b3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b42:	fab3 f383 	clz	r3, r3
 8003b46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d106      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2200      	movs	r2, #0
 8003b52:	2102      	movs	r1, #2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fe ff31 	bl	80029bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2103      	movs	r1, #3
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fe ff15 	bl	8002990 <LL_ADC_GetOffsetChannel>
 8003b66:	4603      	mov	r3, r0
 8003b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <HAL_ADC_ConfigChannel+0x3aa>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2103      	movs	r1, #3
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fe ff0a 	bl	8002990 <LL_ADC_GetOffsetChannel>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	0e9b      	lsrs	r3, r3, #26
 8003b80:	f003 021f 	and.w	r2, r3, #31
 8003b84:	e017      	b.n	8003bb6 <HAL_ADC_ConfigChannel+0x3da>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2103      	movs	r1, #3
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fe feff 	bl	8002990 <LL_ADC_GetOffsetChannel>
 8003b92:	4603      	mov	r3, r0
 8003b94:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b98:	fa93 f3a3 	rbit	r3, r3
 8003b9c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003b9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ba0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003ba2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003ba8:	2320      	movs	r3, #32
 8003baa:	e003      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003bac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003bae:	fab3 f383 	clz	r3, r3
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d105      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x3f2>
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	0e9b      	lsrs	r3, r3, #26
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	e011      	b.n	8003bf2 <HAL_ADC_ConfigChannel+0x416>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bd6:	fa93 f3a3 	rbit	r3, r3
 8003bda:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003bdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bde:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003be0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003be6:	2320      	movs	r3, #32
 8003be8:	e003      	b.n	8003bf2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003bea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bec:	fab3 f383 	clz	r3, r3
 8003bf0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d106      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2103      	movs	r1, #3
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe fedc 	bl	80029bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff f873 	bl	8002cf4 <LL_ADC_IsEnabled>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f040 813d 	bne.w	8003e90 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	6819      	ldr	r1, [r3, #0]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	461a      	mov	r2, r3
 8003c24:	f7fe ffac 	bl	8002b80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4aa2      	ldr	r2, [pc, #648]	@ (8003eb8 <HAL_ADC_ConfigChannel+0x6dc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	f040 812e 	bne.w	8003e90 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10b      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x480>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	0e9b      	lsrs	r3, r3, #26
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f003 031f 	and.w	r3, r3, #31
 8003c50:	2b09      	cmp	r3, #9
 8003c52:	bf94      	ite	ls
 8003c54:	2301      	movls	r3, #1
 8003c56:	2300      	movhi	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	e019      	b.n	8003c90 <HAL_ADC_ConfigChannel+0x4b4>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c64:	fa93 f3a3 	rbit	r3, r3
 8003c68:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003c6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c6c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003c6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003c74:	2320      	movs	r3, #32
 8003c76:	e003      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003c78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c7a:	fab3 f383 	clz	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	3301      	adds	r3, #1
 8003c82:	f003 031f 	and.w	r3, r3, #31
 8003c86:	2b09      	cmp	r3, #9
 8003c88:	bf94      	ite	ls
 8003c8a:	2301      	movls	r3, #1
 8003c8c:	2300      	movhi	r3, #0
 8003c8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d079      	beq.n	8003d88 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d107      	bne.n	8003cb0 <HAL_ADC_ConfigChannel+0x4d4>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	0e9b      	lsrs	r3, r3, #26
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	069b      	lsls	r3, r3, #26
 8003caa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cae:	e015      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x500>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cb8:	fa93 f3a3 	rbit	r3, r3
 8003cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003cbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cc0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003cc8:	2320      	movs	r3, #32
 8003cca:	e003      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cce:	fab3 f383 	clz	r3, r3
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	069b      	lsls	r3, r3, #26
 8003cd8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d109      	bne.n	8003cfc <HAL_ADC_ConfigChannel+0x520>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	0e9b      	lsrs	r3, r3, #26
 8003cee:	3301      	adds	r3, #1
 8003cf0:	f003 031f 	and.w	r3, r3, #31
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfa:	e017      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x550>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d04:	fa93 f3a3 	rbit	r3, r3
 8003d08:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003d0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003d0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003d14:	2320      	movs	r3, #32
 8003d16:	e003      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003d18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d1a:	fab3 f383 	clz	r3, r3
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	3301      	adds	r3, #1
 8003d22:	f003 031f 	and.w	r3, r3, #31
 8003d26:	2101      	movs	r1, #1
 8003d28:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2c:	ea42 0103 	orr.w	r1, r2, r3
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10a      	bne.n	8003d52 <HAL_ADC_ConfigChannel+0x576>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	0e9b      	lsrs	r3, r3, #26
 8003d42:	3301      	adds	r3, #1
 8003d44:	f003 021f 	and.w	r2, r3, #31
 8003d48:	4613      	mov	r3, r2
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	4413      	add	r3, r2
 8003d4e:	051b      	lsls	r3, r3, #20
 8003d50:	e018      	b.n	8003d84 <HAL_ADC_ConfigChannel+0x5a8>
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d5a:	fa93 f3a3 	rbit	r3, r3
 8003d5e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003d6a:	2320      	movs	r3, #32
 8003d6c:	e003      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d70:	fab3 f383 	clz	r3, r3
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	3301      	adds	r3, #1
 8003d78:	f003 021f 	and.w	r2, r3, #31
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	4413      	add	r3, r2
 8003d82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d84:	430b      	orrs	r3, r1
 8003d86:	e07e      	b.n	8003e86 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d107      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x5c8>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	0e9b      	lsrs	r3, r3, #26
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	069b      	lsls	r3, r3, #26
 8003d9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003da2:	e015      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x5f4>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dac:	fa93 f3a3 	rbit	r3, r3
 8003db0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003dbc:	2320      	movs	r3, #32
 8003dbe:	e003      	b.n	8003dc8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc2:	fab3 f383 	clz	r3, r3
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	3301      	adds	r3, #1
 8003dca:	069b      	lsls	r3, r3, #26
 8003dcc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d109      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x614>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	0e9b      	lsrs	r3, r3, #26
 8003de2:	3301      	adds	r3, #1
 8003de4:	f003 031f 	and.w	r3, r3, #31
 8003de8:	2101      	movs	r1, #1
 8003dea:	fa01 f303 	lsl.w	r3, r1, r3
 8003dee:	e017      	b.n	8003e20 <HAL_ADC_ConfigChannel+0x644>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	fa93 f3a3 	rbit	r3, r3
 8003dfc:	61fb      	str	r3, [r7, #28]
  return result;
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003e08:	2320      	movs	r3, #32
 8003e0a:	e003      	b.n	8003e14 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	fab3 f383 	clz	r3, r3
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	3301      	adds	r3, #1
 8003e16:	f003 031f 	and.w	r3, r3, #31
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e20:	ea42 0103 	orr.w	r1, r2, r3
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10d      	bne.n	8003e4c <HAL_ADC_ConfigChannel+0x670>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	0e9b      	lsrs	r3, r3, #26
 8003e36:	3301      	adds	r3, #1
 8003e38:	f003 021f 	and.w	r2, r3, #31
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	4413      	add	r3, r2
 8003e42:	3b1e      	subs	r3, #30
 8003e44:	051b      	lsls	r3, r3, #20
 8003e46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e4a:	e01b      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x6a8>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	fa93 f3a3 	rbit	r3, r3
 8003e58:	613b      	str	r3, [r7, #16]
  return result;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003e64:	2320      	movs	r3, #32
 8003e66:	e003      	b.n	8003e70 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	fab3 f383 	clz	r3, r3
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	3301      	adds	r3, #1
 8003e72:	f003 021f 	and.w	r2, r3, #31
 8003e76:	4613      	mov	r3, r2
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	4413      	add	r3, r2
 8003e7c:	3b1e      	subs	r3, #30
 8003e7e:	051b      	lsls	r3, r3, #20
 8003e80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e84:	430b      	orrs	r3, r1
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	6892      	ldr	r2, [r2, #8]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	f7fe fe4c 	bl	8002b28 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	4b09      	ldr	r3, [pc, #36]	@ (8003ebc <HAL_ADC_ConfigChannel+0x6e0>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 80be 	beq.w	800401a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ea6:	d004      	beq.n	8003eb2 <HAL_ADC_ConfigChannel+0x6d6>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a04      	ldr	r2, [pc, #16]	@ (8003ec0 <HAL_ADC_ConfigChannel+0x6e4>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d10a      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x6ec>
 8003eb2:	4b04      	ldr	r3, [pc, #16]	@ (8003ec4 <HAL_ADC_ConfigChannel+0x6e8>)
 8003eb4:	e009      	b.n	8003eca <HAL_ADC_ConfigChannel+0x6ee>
 8003eb6:	bf00      	nop
 8003eb8:	407f0000 	.word	0x407f0000
 8003ebc:	80080000 	.word	0x80080000
 8003ec0:	50000100 	.word	0x50000100
 8003ec4:	50000300 	.word	0x50000300
 8003ec8:	4b59      	ldr	r3, [pc, #356]	@ (8004030 <HAL_ADC_ConfigChannel+0x854>)
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fe fd2e 	bl	800292c <LL_ADC_GetCommonPathInternalCh>
 8003ed0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a56      	ldr	r2, [pc, #344]	@ (8004034 <HAL_ADC_ConfigChannel+0x858>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d004      	beq.n	8003ee8 <HAL_ADC_ConfigChannel+0x70c>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a55      	ldr	r2, [pc, #340]	@ (8004038 <HAL_ADC_ConfigChannel+0x85c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d13a      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ee8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003eec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d134      	bne.n	8003f5e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003efc:	d005      	beq.n	8003f0a <HAL_ADC_ConfigChannel+0x72e>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a4e      	ldr	r2, [pc, #312]	@ (800403c <HAL_ADC_ConfigChannel+0x860>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	f040 8085 	bne.w	8004014 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f12:	d004      	beq.n	8003f1e <HAL_ADC_ConfigChannel+0x742>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a49      	ldr	r2, [pc, #292]	@ (8004040 <HAL_ADC_ConfigChannel+0x864>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d101      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x746>
 8003f1e:	4a49      	ldr	r2, [pc, #292]	@ (8004044 <HAL_ADC_ConfigChannel+0x868>)
 8003f20:	e000      	b.n	8003f24 <HAL_ADC_ConfigChannel+0x748>
 8003f22:	4a43      	ldr	r2, [pc, #268]	@ (8004030 <HAL_ADC_ConfigChannel+0x854>)
 8003f24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4610      	mov	r0, r2
 8003f30:	f7fe fce9 	bl	8002906 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f34:	4b44      	ldr	r3, [pc, #272]	@ (8004048 <HAL_ADC_ConfigChannel+0x86c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	099b      	lsrs	r3, r3, #6
 8003f3a:	4a44      	ldr	r2, [pc, #272]	@ (800404c <HAL_ADC_ConfigChannel+0x870>)
 8003f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f40:	099b      	lsrs	r3, r3, #6
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	4613      	mov	r3, r2
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	4413      	add	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f4e:	e002      	b.n	8003f56 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f9      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f5c:	e05a      	b.n	8004014 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a3b      	ldr	r2, [pc, #236]	@ (8004050 <HAL_ADC_ConfigChannel+0x874>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d125      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x7d8>
 8003f68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d11f      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a31      	ldr	r2, [pc, #196]	@ (8004040 <HAL_ADC_ConfigChannel+0x864>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d104      	bne.n	8003f88 <HAL_ADC_ConfigChannel+0x7ac>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a34      	ldr	r2, [pc, #208]	@ (8004054 <HAL_ADC_ConfigChannel+0x878>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d047      	beq.n	8004018 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f90:	d004      	beq.n	8003f9c <HAL_ADC_ConfigChannel+0x7c0>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a2a      	ldr	r2, [pc, #168]	@ (8004040 <HAL_ADC_ConfigChannel+0x864>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d101      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x7c4>
 8003f9c:	4a29      	ldr	r2, [pc, #164]	@ (8004044 <HAL_ADC_ConfigChannel+0x868>)
 8003f9e:	e000      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0x7c6>
 8003fa0:	4a23      	ldr	r2, [pc, #140]	@ (8004030 <HAL_ADC_ConfigChannel+0x854>)
 8003fa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fa6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003faa:	4619      	mov	r1, r3
 8003fac:	4610      	mov	r0, r2
 8003fae:	f7fe fcaa 	bl	8002906 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003fb2:	e031      	b.n	8004018 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a27      	ldr	r2, [pc, #156]	@ (8004058 <HAL_ADC_ConfigChannel+0x87c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d12d      	bne.n	800401a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d127      	bne.n	800401a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1c      	ldr	r2, [pc, #112]	@ (8004040 <HAL_ADC_ConfigChannel+0x864>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d022      	beq.n	800401a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fdc:	d004      	beq.n	8003fe8 <HAL_ADC_ConfigChannel+0x80c>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a17      	ldr	r2, [pc, #92]	@ (8004040 <HAL_ADC_ConfigChannel+0x864>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d101      	bne.n	8003fec <HAL_ADC_ConfigChannel+0x810>
 8003fe8:	4a16      	ldr	r2, [pc, #88]	@ (8004044 <HAL_ADC_ConfigChannel+0x868>)
 8003fea:	e000      	b.n	8003fee <HAL_ADC_ConfigChannel+0x812>
 8003fec:	4a10      	ldr	r2, [pc, #64]	@ (8004030 <HAL_ADC_ConfigChannel+0x854>)
 8003fee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ff2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	f7fe fc84 	bl	8002906 <LL_ADC_SetCommonPathInternalCh>
 8003ffe:	e00c      	b.n	800401a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004004:	f043 0220 	orr.w	r2, r3, #32
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004012:	e002      	b.n	800401a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004014:	bf00      	nop
 8004016:	e000      	b.n	800401a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004018:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004022:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004026:	4618      	mov	r0, r3
 8004028:	37d8      	adds	r7, #216	@ 0xd8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	50000700 	.word	0x50000700
 8004034:	c3210000 	.word	0xc3210000
 8004038:	90c00010 	.word	0x90c00010
 800403c:	50000600 	.word	0x50000600
 8004040:	50000100 	.word	0x50000100
 8004044:	50000300 	.word	0x50000300
 8004048:	20000000 	.word	0x20000000
 800404c:	053e2d63 	.word	0x053e2d63
 8004050:	c7520000 	.word	0xc7520000
 8004054:	50000500 	.word	0x50000500
 8004058:	cb840000 	.word	0xcb840000

0800405c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f7fe fe43 	bl	8002cf4 <LL_ADC_IsEnabled>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d14d      	bne.n	8004110 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	4b28      	ldr	r3, [pc, #160]	@ (800411c <ADC_Enable+0xc0>)
 800407c:	4013      	ands	r3, r2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00d      	beq.n	800409e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004086:	f043 0210 	orr.w	r2, r3, #16
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004092:	f043 0201 	orr.w	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e039      	b.n	8004112 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fe fdfe 	bl	8002ca4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80040a8:	f7fe fc0e 	bl	80028c8 <HAL_GetTick>
 80040ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040ae:	e028      	b.n	8004102 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fe fe1d 	bl	8002cf4 <LL_ADC_IsEnabled>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d104      	bne.n	80040ca <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fe fded 	bl	8002ca4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80040ca:	f7fe fbfd 	bl	80028c8 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d914      	bls.n	8004102 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d00d      	beq.n	8004102 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ea:	f043 0210 	orr.w	r2, r3, #16
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040f6:	f043 0201 	orr.w	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e007      	b.n	8004112 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b01      	cmp	r3, #1
 800410e:	d1cf      	bne.n	80040b0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	8000003f 	.word	0x8000003f

08004120 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f7fe fdf4 	bl	8002d1a <LL_ADC_IsDisableOngoing>
 8004132:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f7fe fddb 	bl	8002cf4 <LL_ADC_IsEnabled>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d047      	beq.n	80041d4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d144      	bne.n	80041d4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 030d 	and.w	r3, r3, #13
 8004154:	2b01      	cmp	r3, #1
 8004156:	d10c      	bne.n	8004172 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4618      	mov	r0, r3
 800415e:	f7fe fdb5 	bl	8002ccc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2203      	movs	r2, #3
 8004168:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800416a:	f7fe fbad 	bl	80028c8 <HAL_GetTick>
 800416e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004170:	e029      	b.n	80041c6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004176:	f043 0210 	orr.w	r2, r3, #16
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004182:	f043 0201 	orr.w	r2, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e023      	b.n	80041d6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800418e:	f7fe fb9b 	bl	80028c8 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d914      	bls.n	80041c6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00d      	beq.n	80041c6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ae:	f043 0210 	orr.w	r2, r3, #16
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ba:	f043 0201 	orr.w	r2, r3, #1
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e007      	b.n	80041d6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1dc      	bne.n	800418e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d14b      	bne.n	8004290 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d021      	beq.n	8004256 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f7fe fc34 	bl	8002a84 <LL_ADC_REG_IsTriggerSourceSWStart>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d032      	beq.n	8004288 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d12b      	bne.n	8004288 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004234:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004240:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d11f      	bne.n	8004288 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800424c:	f043 0201 	orr.w	r2, r3, #1
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004254:	e018      	b.n	8004288 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d111      	bne.n	8004288 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004268:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004274:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d105      	bne.n	8004288 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004280:	f043 0201 	orr.w	r2, r3, #1
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f7fd fb07 	bl	800189c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800428e:	e00e      	b.n	80042ae <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004294:	f003 0310 	and.w	r3, r3, #16
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f7ff fa93 	bl	80037c8 <HAL_ADC_ErrorCallback>
}
 80042a2:	e004      	b.n	80042ae <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	4798      	blx	r3
}
 80042ae:	bf00      	nop
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f7ff fa6b 	bl	80037a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042ca:	bf00      	nop
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b084      	sub	sp, #16
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042de:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042f0:	f043 0204 	orr.w	r2, r3, #4
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f7ff fa65 	bl	80037c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <LL_ADC_IsEnabled>:
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b01      	cmp	r3, #1
 8004318:	d101      	bne.n	800431e <LL_ADC_IsEnabled+0x18>
 800431a:	2301      	movs	r3, #1
 800431c:	e000      	b.n	8004320 <LL_ADC_IsEnabled+0x1a>
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <LL_ADC_StartCalibration>:
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800433e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004348:	4313      	orrs	r3, r2
 800434a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	609a      	str	r2, [r3, #8]
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <LL_ADC_IsCalibrationOnGoing>:
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800436e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004372:	d101      	bne.n	8004378 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <LL_ADC_REG_IsConversionOngoing>:
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b04      	cmp	r3, #4
 8004398:	d101      	bne.n	800439e <LL_ADC_REG_IsConversionOngoing+0x18>
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_ADCEx_Calibration_Start+0x1c>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e04d      	b.n	8004464 <HAL_ADCEx_Calibration_Start+0xb8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff fea5 	bl	8004120 <ADC_Disable>
 80043d6:	4603      	mov	r3, r0
 80043d8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80043da:	7bfb      	ldrb	r3, [r7, #15]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d136      	bne.n	800444e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80043e8:	f023 0302 	bic.w	r3, r3, #2
 80043ec:	f043 0202 	orr.w	r2, r3, #2
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6839      	ldr	r1, [r7, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff ff96 	bl	800432c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004400:	e014      	b.n	800442c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	3301      	adds	r3, #1
 8004406:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4a18      	ldr	r2, [pc, #96]	@ (800446c <HAL_ADCEx_Calibration_Start+0xc0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d90d      	bls.n	800442c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004414:	f023 0312 	bic.w	r3, r3, #18
 8004418:	f043 0210 	orr.w	r2, r3, #16
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e01b      	b.n	8004464 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff ff94 	bl	800435e <LL_ADC_IsCalibrationOnGoing>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e2      	bne.n	8004402 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004440:	f023 0303 	bic.w	r3, r3, #3
 8004444:	f043 0201 	orr.w	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800444c:	e005      	b.n	800445a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004452:	f043 0210 	orr.w	r2, r3, #16
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004462:	7bfb      	ldrb	r3, [r7, #15]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	0004de01 	.word	0x0004de01

08004470 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80044d4:	b590      	push	{r4, r7, lr}
 80044d6:	b0a1      	sub	sp, #132	@ 0x84
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044de:	2300      	movs	r3, #0
 80044e0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e0e7      	b.n	80046c2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80044fa:	2300      	movs	r3, #0
 80044fc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80044fe:	2300      	movs	r3, #0
 8004500:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800450a:	d102      	bne.n	8004512 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800450c:	4b6f      	ldr	r3, [pc, #444]	@ (80046cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800450e:	60bb      	str	r3, [r7, #8]
 8004510:	e009      	b.n	8004526 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a6e      	ldr	r2, [pc, #440]	@ (80046d0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d102      	bne.n	8004522 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800451c:	4b6d      	ldr	r3, [pc, #436]	@ (80046d4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800451e:	60bb      	str	r3, [r7, #8]
 8004520:	e001      	b.n	8004526 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004522:	2300      	movs	r3, #0
 8004524:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10b      	bne.n	8004544 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004530:	f043 0220 	orr.w	r2, r3, #32
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e0be      	b.n	80046c2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	4618      	mov	r0, r3
 8004548:	f7ff ff1d 	bl	8004386 <LL_ADC_REG_IsConversionOngoing>
 800454c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff ff17 	bl	8004386 <LL_ADC_REG_IsConversionOngoing>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	f040 80a0 	bne.w	80046a0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004560:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004562:	2b00      	cmp	r3, #0
 8004564:	f040 809c 	bne.w	80046a0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004570:	d004      	beq.n	800457c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a55      	ldr	r2, [pc, #340]	@ (80046cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d101      	bne.n	8004580 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800457c:	4b56      	ldr	r3, [pc, #344]	@ (80046d8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800457e:	e000      	b.n	8004582 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004580:	4b56      	ldr	r3, [pc, #344]	@ (80046dc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004582:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d04b      	beq.n	8004624 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800458c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	6859      	ldr	r1, [r3, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800459e:	035b      	lsls	r3, r3, #13
 80045a0:	430b      	orrs	r3, r1
 80045a2:	431a      	orrs	r2, r3
 80045a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045a6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045b0:	d004      	beq.n	80045bc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a45      	ldr	r2, [pc, #276]	@ (80046cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d10f      	bne.n	80045dc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80045bc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80045c0:	f7ff fea1 	bl	8004306 <LL_ADC_IsEnabled>
 80045c4:	4604      	mov	r4, r0
 80045c6:	4841      	ldr	r0, [pc, #260]	@ (80046cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045c8:	f7ff fe9d 	bl	8004306 <LL_ADC_IsEnabled>
 80045cc:	4603      	mov	r3, r0
 80045ce:	4323      	orrs	r3, r4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bf0c      	ite	eq
 80045d4:	2301      	moveq	r3, #1
 80045d6:	2300      	movne	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	e012      	b.n	8004602 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80045dc:	483c      	ldr	r0, [pc, #240]	@ (80046d0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80045de:	f7ff fe92 	bl	8004306 <LL_ADC_IsEnabled>
 80045e2:	4604      	mov	r4, r0
 80045e4:	483b      	ldr	r0, [pc, #236]	@ (80046d4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80045e6:	f7ff fe8e 	bl	8004306 <LL_ADC_IsEnabled>
 80045ea:	4603      	mov	r3, r0
 80045ec:	431c      	orrs	r4, r3
 80045ee:	483c      	ldr	r0, [pc, #240]	@ (80046e0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80045f0:	f7ff fe89 	bl	8004306 <LL_ADC_IsEnabled>
 80045f4:	4603      	mov	r3, r0
 80045f6:	4323      	orrs	r3, r4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	bf0c      	ite	eq
 80045fc:	2301      	moveq	r3, #1
 80045fe:	2300      	movne	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d056      	beq.n	80046b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004606:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800460e:	f023 030f 	bic.w	r3, r3, #15
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	6811      	ldr	r1, [r2, #0]
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	6892      	ldr	r2, [r2, #8]
 800461a:	430a      	orrs	r2, r1
 800461c:	431a      	orrs	r2, r3
 800461e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004620:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004622:	e047      	b.n	80046b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004624:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800462c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800462e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004638:	d004      	beq.n	8004644 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a23      	ldr	r2, [pc, #140]	@ (80046cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d10f      	bne.n	8004664 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004644:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004648:	f7ff fe5d 	bl	8004306 <LL_ADC_IsEnabled>
 800464c:	4604      	mov	r4, r0
 800464e:	481f      	ldr	r0, [pc, #124]	@ (80046cc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004650:	f7ff fe59 	bl	8004306 <LL_ADC_IsEnabled>
 8004654:	4603      	mov	r3, r0
 8004656:	4323      	orrs	r3, r4
 8004658:	2b00      	cmp	r3, #0
 800465a:	bf0c      	ite	eq
 800465c:	2301      	moveq	r3, #1
 800465e:	2300      	movne	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	e012      	b.n	800468a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004664:	481a      	ldr	r0, [pc, #104]	@ (80046d0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004666:	f7ff fe4e 	bl	8004306 <LL_ADC_IsEnabled>
 800466a:	4604      	mov	r4, r0
 800466c:	4819      	ldr	r0, [pc, #100]	@ (80046d4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800466e:	f7ff fe4a 	bl	8004306 <LL_ADC_IsEnabled>
 8004672:	4603      	mov	r3, r0
 8004674:	431c      	orrs	r4, r3
 8004676:	481a      	ldr	r0, [pc, #104]	@ (80046e0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004678:	f7ff fe45 	bl	8004306 <LL_ADC_IsEnabled>
 800467c:	4603      	mov	r3, r0
 800467e:	4323      	orrs	r3, r4
 8004680:	2b00      	cmp	r3, #0
 8004682:	bf0c      	ite	eq
 8004684:	2301      	moveq	r3, #1
 8004686:	2300      	movne	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d012      	beq.n	80046b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800468e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004696:	f023 030f 	bic.w	r3, r3, #15
 800469a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800469c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800469e:	e009      	b.n	80046b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a4:	f043 0220 	orr.w	r2, r3, #32
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80046b2:	e000      	b.n	80046b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80046be:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3784      	adds	r7, #132	@ 0x84
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd90      	pop	{r4, r7, pc}
 80046ca:	bf00      	nop
 80046cc:	50000100 	.word	0x50000100
 80046d0:	50000400 	.word	0x50000400
 80046d4:	50000500 	.word	0x50000500
 80046d8:	50000300 	.word	0x50000300
 80046dc:	50000700 	.word	0x50000700
 80046e0:	50000600 	.word	0x50000600

080046e4 <__NVIC_SetPriorityGrouping>:
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004728 <__NVIC_SetPriorityGrouping+0x44>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004700:	4013      	ands	r3, r2
 8004702:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800470c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004716:	4a04      	ldr	r2, [pc, #16]	@ (8004728 <__NVIC_SetPriorityGrouping+0x44>)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	60d3      	str	r3, [r2, #12]
}
 800471c:	bf00      	nop
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	e000ed00 	.word	0xe000ed00

0800472c <__NVIC_GetPriorityGrouping>:
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004730:	4b04      	ldr	r3, [pc, #16]	@ (8004744 <__NVIC_GetPriorityGrouping+0x18>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	0a1b      	lsrs	r3, r3, #8
 8004736:	f003 0307 	and.w	r3, r3, #7
}
 800473a:	4618      	mov	r0, r3
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	e000ed00 	.word	0xe000ed00

08004748 <__NVIC_EnableIRQ>:
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	4603      	mov	r3, r0
 8004750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004756:	2b00      	cmp	r3, #0
 8004758:	db0b      	blt.n	8004772 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800475a:	79fb      	ldrb	r3, [r7, #7]
 800475c:	f003 021f 	and.w	r2, r3, #31
 8004760:	4907      	ldr	r1, [pc, #28]	@ (8004780 <__NVIC_EnableIRQ+0x38>)
 8004762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	2001      	movs	r0, #1
 800476a:	fa00 f202 	lsl.w	r2, r0, r2
 800476e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	e000e100 	.word	0xe000e100

08004784 <__NVIC_SetPriority>:
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	6039      	str	r1, [r7, #0]
 800478e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004794:	2b00      	cmp	r3, #0
 8004796:	db0a      	blt.n	80047ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	b2da      	uxtb	r2, r3
 800479c:	490c      	ldr	r1, [pc, #48]	@ (80047d0 <__NVIC_SetPriority+0x4c>)
 800479e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a2:	0112      	lsls	r2, r2, #4
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	440b      	add	r3, r1
 80047a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80047ac:	e00a      	b.n	80047c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	4908      	ldr	r1, [pc, #32]	@ (80047d4 <__NVIC_SetPriority+0x50>)
 80047b4:	79fb      	ldrb	r3, [r7, #7]
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	3b04      	subs	r3, #4
 80047bc:	0112      	lsls	r2, r2, #4
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	440b      	add	r3, r1
 80047c2:	761a      	strb	r2, [r3, #24]
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	e000e100 	.word	0xe000e100
 80047d4:	e000ed00 	.word	0xe000ed00

080047d8 <NVIC_EncodePriority>:
{
 80047d8:	b480      	push	{r7}
 80047da:	b089      	sub	sp, #36	@ 0x24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f1c3 0307 	rsb	r3, r3, #7
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	bf28      	it	cs
 80047f6:	2304      	movcs	r3, #4
 80047f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	3304      	adds	r3, #4
 80047fe:	2b06      	cmp	r3, #6
 8004800:	d902      	bls.n	8004808 <NVIC_EncodePriority+0x30>
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	3b03      	subs	r3, #3
 8004806:	e000      	b.n	800480a <NVIC_EncodePriority+0x32>
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800480c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	43da      	mvns	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	401a      	ands	r2, r3
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004820:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	fa01 f303 	lsl.w	r3, r1, r3
 800482a:	43d9      	mvns	r1, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004830:	4313      	orrs	r3, r2
}
 8004832:	4618      	mov	r0, r3
 8004834:	3724      	adds	r7, #36	@ 0x24
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7ff ff4c 	bl	80046e4 <__NVIC_SetPriorityGrouping>
}
 800484c:	bf00      	nop
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004862:	f7ff ff63 	bl	800472c <__NVIC_GetPriorityGrouping>
 8004866:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	68b9      	ldr	r1, [r7, #8]
 800486c:	6978      	ldr	r0, [r7, #20]
 800486e:	f7ff ffb3 	bl	80047d8 <NVIC_EncodePriority>
 8004872:	4602      	mov	r2, r0
 8004874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004878:	4611      	mov	r1, r2
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff ff82 	bl	8004784 <__NVIC_SetPriority>
}
 8004880:	bf00      	nop
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	4603      	mov	r3, r0
 8004890:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff ff56 	bl	8004748 <__NVIC_EnableIRQ>
}
 800489c:	bf00      	nop
 800489e:	3708      	adds	r7, #8
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e08d      	b.n	80049d2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	4b47      	ldr	r3, [pc, #284]	@ (80049dc <HAL_DMA_Init+0x138>)
 80048be:	429a      	cmp	r2, r3
 80048c0:	d80f      	bhi.n	80048e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	4b45      	ldr	r3, [pc, #276]	@ (80049e0 <HAL_DMA_Init+0x13c>)
 80048ca:	4413      	add	r3, r2
 80048cc:	4a45      	ldr	r2, [pc, #276]	@ (80049e4 <HAL_DMA_Init+0x140>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	091b      	lsrs	r3, r3, #4
 80048d4:	009a      	lsls	r2, r3, #2
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a42      	ldr	r2, [pc, #264]	@ (80049e8 <HAL_DMA_Init+0x144>)
 80048de:	641a      	str	r2, [r3, #64]	@ 0x40
 80048e0:	e00e      	b.n	8004900 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	4b40      	ldr	r3, [pc, #256]	@ (80049ec <HAL_DMA_Init+0x148>)
 80048ea:	4413      	add	r3, r2
 80048ec:	4a3d      	ldr	r2, [pc, #244]	@ (80049e4 <HAL_DMA_Init+0x140>)
 80048ee:	fba2 2303 	umull	r2, r3, r2, r3
 80048f2:	091b      	lsrs	r3, r3, #4
 80048f4:	009a      	lsls	r2, r3, #2
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a3c      	ldr	r2, [pc, #240]	@ (80049f0 <HAL_DMA_Init+0x14c>)
 80048fe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800491a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004924:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004930:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800493c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fa76 	bl	8004e44 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004960:	d102      	bne.n	8004968 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800497c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d010      	beq.n	80049a8 <HAL_DMA_Init+0x104>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b04      	cmp	r3, #4
 800498c:	d80c      	bhi.n	80049a8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fa96 	bl	8004ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80049a4:	605a      	str	r2, [r3, #4]
 80049a6:	e008      	b.n	80049ba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40020407 	.word	0x40020407
 80049e0:	bffdfff8 	.word	0xbffdfff8
 80049e4:	cccccccd 	.word	0xcccccccd
 80049e8:	40020000 	.word	0x40020000
 80049ec:	bffdfbf8 	.word	0xbffdfbf8
 80049f0:	40020400 	.word	0x40020400

080049f4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_DMA_Start_IT+0x20>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e066      	b.n	8004ae2 <HAL_DMA_Start_IT+0xee>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d155      	bne.n	8004ad4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0201 	bic.w	r2, r2, #1
 8004a44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	68b9      	ldr	r1, [r7, #8]
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 f9bb 	bl	8004dc8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d008      	beq.n	8004a6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f042 020e 	orr.w	r2, r2, #14
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	e00f      	b.n	8004a8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0204 	bic.w	r2, r2, #4
 8004a7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 020a 	orr.w	r2, r2, #10
 8004a8a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004aa8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d007      	beq.n	8004ac2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004abc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ac0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f042 0201 	orr.w	r2, r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	e005      	b.n	8004ae0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004adc:	2302      	movs	r3, #2
 8004ade:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b085      	sub	sp, #20
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d005      	beq.n	8004b0e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2204      	movs	r2, #4
 8004b06:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	73fb      	strb	r3, [r7, #15]
 8004b0c:	e037      	b.n	8004b7e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 020e 	bic.w	r2, r2, #14
 8004b1c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b2c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0201 	bic.w	r2, r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b42:	f003 021f 	and.w	r2, r3, #31
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b50:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b5a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00c      	beq.n	8004b7e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b72:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b7c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d00d      	beq.n	8004bd0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2204      	movs	r2, #4
 8004bb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	73fb      	strb	r3, [r7, #15]
 8004bce:	e047      	b.n	8004c60 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 020e 	bic.w	r2, r2, #14
 8004bde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0201 	bic.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bfa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c04:	f003 021f 	and.w	r2, r3, #31
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c12:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c1c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00c      	beq.n	8004c40 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c34:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004c3e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	4798      	blx	r3
    }
  }
  return status;
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c86:	f003 031f 	and.w	r3, r3, #31
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	409a      	lsls	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4013      	ands	r3, r2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d026      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0x7a>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d021      	beq.n	8004ce4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d107      	bne.n	8004cbe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0204 	bic.w	r2, r2, #4
 8004cbc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cc2:	f003 021f 	and.w	r2, r3, #31
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cca:	2104      	movs	r1, #4
 8004ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8004cd0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d071      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004ce2:	e06c      	b.n	8004dbe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce8:	f003 031f 	and.w	r3, r3, #31
 8004cec:	2202      	movs	r2, #2
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d02e      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d029      	beq.n	8004d56 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10b      	bne.n	8004d28 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 020a 	bic.w	r2, r2, #10
 8004d1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2c:	f003 021f 	and.w	r2, r3, #31
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d34:	2102      	movs	r1, #2
 8004d36:	fa01 f202 	lsl.w	r2, r1, r2
 8004d3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d038      	beq.n	8004dbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004d54:	e033      	b.n	8004dbe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d5a:	f003 031f 	and.w	r3, r3, #31
 8004d5e:	2208      	movs	r2, #8
 8004d60:	409a      	lsls	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4013      	ands	r3, r2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d02a      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f003 0308 	and.w	r3, r3, #8
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d025      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 020e 	bic.w	r2, r2, #14
 8004d82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d88:	f003 021f 	and.w	r2, r3, #31
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d90:	2101      	movs	r1, #1
 8004d92:	fa01 f202 	lsl.w	r2, r1, r2
 8004d96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d004      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004dbe:	bf00      	nop
 8004dc0:	bf00      	nop
}
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004dde:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d004      	beq.n	8004df2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004df0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df6:	f003 021f 	and.w	r2, r3, #31
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfe:	2101      	movs	r1, #1
 8004e00:	fa01 f202 	lsl.w	r2, r1, r2
 8004e04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	2b10      	cmp	r3, #16
 8004e14:	d108      	bne.n	8004e28 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004e26:	e007      	b.n	8004e38 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	60da      	str	r2, [r3, #12]
}
 8004e38:	bf00      	nop
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	461a      	mov	r2, r3
 8004e52:	4b16      	ldr	r3, [pc, #88]	@ (8004eac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d802      	bhi.n	8004e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004e58:	4b15      	ldr	r3, [pc, #84]	@ (8004eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	e001      	b.n	8004e62 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004e5e:	4b15      	ldr	r3, [pc, #84]	@ (8004eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004e60:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	3b08      	subs	r3, #8
 8004e6e:	4a12      	ldr	r2, [pc, #72]	@ (8004eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004e70:	fba2 2303 	umull	r2, r3, r2, r3
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7c:	089b      	lsrs	r3, r3, #2
 8004e7e:	009a      	lsls	r2, r3, #2
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	4413      	add	r3, r2
 8004e84:	461a      	mov	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8004ebc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004e8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f003 031f 	and.w	r3, r3, #31
 8004e96:	2201      	movs	r2, #1
 8004e98:	409a      	lsls	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004e9e:	bf00      	nop
 8004ea0:	371c      	adds	r7, #28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40020407 	.word	0x40020407
 8004eb0:	40020800 	.word	0x40020800
 8004eb4:	40020820 	.word	0x40020820
 8004eb8:	cccccccd 	.word	0xcccccccd
 8004ebc:	40020880 	.word	0x40020880

08004ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8004f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	461a      	mov	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a08      	ldr	r2, [pc, #32]	@ (8004f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004ee2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	f003 031f 	and.w	r3, r3, #31
 8004eec:	2201      	movs	r2, #1
 8004eee:	409a      	lsls	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004ef4:	bf00      	nop
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	1000823f 	.word	0x1000823f
 8004f04:	40020940 	.word	0x40020940

08004f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f16:	e15a      	b.n	80051ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	fa01 f303 	lsl.w	r3, r1, r3
 8004f24:	4013      	ands	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 814c 	beq.w	80051c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f003 0303 	and.w	r3, r3, #3
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d005      	beq.n	8004f48 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d130      	bne.n	8004faa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	005b      	lsls	r3, r3, #1
 8004f52:	2203      	movs	r2, #3
 8004f54:	fa02 f303 	lsl.w	r3, r2, r3
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	68da      	ldr	r2, [r3, #12]
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f7e:	2201      	movs	r2, #1
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	43db      	mvns	r3, r3
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	091b      	lsrs	r3, r3, #4
 8004f94:	f003 0201 	and.w	r2, r3, #1
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d017      	beq.n	8004fe6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	2203      	movs	r2, #3
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	43db      	mvns	r3, r3
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d123      	bne.n	800503a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	08da      	lsrs	r2, r3, #3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3208      	adds	r2, #8
 8004ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	220f      	movs	r2, #15
 800500a:	fa02 f303 	lsl.w	r3, r2, r3
 800500e:	43db      	mvns	r3, r3
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4013      	ands	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	fa02 f303 	lsl.w	r3, r2, r3
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	08da      	lsrs	r2, r3, #3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3208      	adds	r2, #8
 8005034:	6939      	ldr	r1, [r7, #16]
 8005036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	2203      	movs	r2, #3
 8005046:	fa02 f303 	lsl.w	r3, r2, r3
 800504a:	43db      	mvns	r3, r3
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4013      	ands	r3, r2
 8005050:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f003 0203 	and.w	r2, r3, #3
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	fa02 f303 	lsl.w	r3, r2, r3
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 80a6 	beq.w	80051c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800507c:	4b5b      	ldr	r3, [pc, #364]	@ (80051ec <HAL_GPIO_Init+0x2e4>)
 800507e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005080:	4a5a      	ldr	r2, [pc, #360]	@ (80051ec <HAL_GPIO_Init+0x2e4>)
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	6613      	str	r3, [r2, #96]	@ 0x60
 8005088:	4b58      	ldr	r3, [pc, #352]	@ (80051ec <HAL_GPIO_Init+0x2e4>)
 800508a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	60bb      	str	r3, [r7, #8]
 8005092:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005094:	4a56      	ldr	r2, [pc, #344]	@ (80051f0 <HAL_GPIO_Init+0x2e8>)
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	089b      	lsrs	r3, r3, #2
 800509a:	3302      	adds	r3, #2
 800509c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	220f      	movs	r2, #15
 80050ac:	fa02 f303 	lsl.w	r3, r2, r3
 80050b0:	43db      	mvns	r3, r3
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4013      	ands	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80050be:	d01f      	beq.n	8005100 <HAL_GPIO_Init+0x1f8>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a4c      	ldr	r2, [pc, #304]	@ (80051f4 <HAL_GPIO_Init+0x2ec>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d019      	beq.n	80050fc <HAL_GPIO_Init+0x1f4>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a4b      	ldr	r2, [pc, #300]	@ (80051f8 <HAL_GPIO_Init+0x2f0>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d013      	beq.n	80050f8 <HAL_GPIO_Init+0x1f0>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a4a      	ldr	r2, [pc, #296]	@ (80051fc <HAL_GPIO_Init+0x2f4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d00d      	beq.n	80050f4 <HAL_GPIO_Init+0x1ec>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a49      	ldr	r2, [pc, #292]	@ (8005200 <HAL_GPIO_Init+0x2f8>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d007      	beq.n	80050f0 <HAL_GPIO_Init+0x1e8>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a48      	ldr	r2, [pc, #288]	@ (8005204 <HAL_GPIO_Init+0x2fc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d101      	bne.n	80050ec <HAL_GPIO_Init+0x1e4>
 80050e8:	2305      	movs	r3, #5
 80050ea:	e00a      	b.n	8005102 <HAL_GPIO_Init+0x1fa>
 80050ec:	2306      	movs	r3, #6
 80050ee:	e008      	b.n	8005102 <HAL_GPIO_Init+0x1fa>
 80050f0:	2304      	movs	r3, #4
 80050f2:	e006      	b.n	8005102 <HAL_GPIO_Init+0x1fa>
 80050f4:	2303      	movs	r3, #3
 80050f6:	e004      	b.n	8005102 <HAL_GPIO_Init+0x1fa>
 80050f8:	2302      	movs	r3, #2
 80050fa:	e002      	b.n	8005102 <HAL_GPIO_Init+0x1fa>
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <HAL_GPIO_Init+0x1fa>
 8005100:	2300      	movs	r3, #0
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	f002 0203 	and.w	r2, r2, #3
 8005108:	0092      	lsls	r2, r2, #2
 800510a:	4093      	lsls	r3, r2
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005112:	4937      	ldr	r1, [pc, #220]	@ (80051f0 <HAL_GPIO_Init+0x2e8>)
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	089b      	lsrs	r3, r3, #2
 8005118:	3302      	adds	r3, #2
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005120:	4b39      	ldr	r3, [pc, #228]	@ (8005208 <HAL_GPIO_Init+0x300>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	43db      	mvns	r3, r3
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4013      	ands	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4313      	orrs	r3, r2
 8005142:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005144:	4a30      	ldr	r2, [pc, #192]	@ (8005208 <HAL_GPIO_Init+0x300>)
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800514a:	4b2f      	ldr	r3, [pc, #188]	@ (8005208 <HAL_GPIO_Init+0x300>)
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	43db      	mvns	r3, r3
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4013      	ands	r3, r2
 8005158:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800516e:	4a26      	ldr	r2, [pc, #152]	@ (8005208 <HAL_GPIO_Init+0x300>)
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005174:	4b24      	ldr	r3, [pc, #144]	@ (8005208 <HAL_GPIO_Init+0x300>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	43db      	mvns	r3, r3
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	4013      	ands	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4313      	orrs	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005198:	4a1b      	ldr	r2, [pc, #108]	@ (8005208 <HAL_GPIO_Init+0x300>)
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800519e:	4b1a      	ldr	r3, [pc, #104]	@ (8005208 <HAL_GPIO_Init+0x300>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	43db      	mvns	r3, r3
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	4013      	ands	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80051c2:	4a11      	ldr	r2, [pc, #68]	@ (8005208 <HAL_GPIO_Init+0x300>)
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	3301      	adds	r3, #1
 80051cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	fa22 f303 	lsr.w	r3, r2, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f47f ae9d 	bne.w	8004f18 <HAL_GPIO_Init+0x10>
  }
}
 80051de:	bf00      	nop
 80051e0:	bf00      	nop
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	40021000 	.word	0x40021000
 80051f0:	40010000 	.word	0x40010000
 80051f4:	48000400 	.word	0x48000400
 80051f8:	48000800 	.word	0x48000800
 80051fc:	48000c00 	.word	0x48000c00
 8005200:	48001000 	.word	0x48001000
 8005204:	48001400 	.word	0x48001400
 8005208:	40010400 	.word	0x40010400

0800520c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	807b      	strh	r3, [r7, #2]
 8005218:	4613      	mov	r3, r2
 800521a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800521c:	787b      	ldrb	r3, [r7, #1]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005222:	887a      	ldrh	r2, [r7, #2]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005228:	e002      	b.n	8005230 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800522a:	887a      	ldrh	r2, [r7, #2]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	4603      	mov	r3, r0
 8005244:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005246:	4b08      	ldr	r3, [pc, #32]	@ (8005268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005248:	695a      	ldr	r2, [r3, #20]
 800524a:	88fb      	ldrh	r3, [r7, #6]
 800524c:	4013      	ands	r3, r2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d006      	beq.n	8005260 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005252:	4a05      	ldr	r2, [pc, #20]	@ (8005268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005254:	88fb      	ldrh	r3, [r7, #6]
 8005256:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005258:	88fb      	ldrh	r3, [r7, #6]
 800525a:	4618      	mov	r0, r3
 800525c:	f000 f806 	bl	800526c <HAL_GPIO_EXTI_Callback>
  }
}
 8005260:	bf00      	nop
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40010400 	.word	0x40010400

0800526c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	4603      	mov	r3, r0
 8005274:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005276:	bf00      	nop
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
	...

08005284 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d141      	bne.n	8005316 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005292:	4b4b      	ldr	r3, [pc, #300]	@ (80053c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800529a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800529e:	d131      	bne.n	8005304 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052a0:	4b47      	ldr	r3, [pc, #284]	@ (80053c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052a6:	4a46      	ldr	r2, [pc, #280]	@ (80053c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052b0:	4b43      	ldr	r3, [pc, #268]	@ (80053c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80052b8:	4a41      	ldr	r2, [pc, #260]	@ (80053c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80052be:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052c0:	4b40      	ldr	r3, [pc, #256]	@ (80053c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2232      	movs	r2, #50	@ 0x32
 80052c6:	fb02 f303 	mul.w	r3, r2, r3
 80052ca:	4a3f      	ldr	r2, [pc, #252]	@ (80053c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052cc:	fba2 2303 	umull	r2, r3, r2, r3
 80052d0:	0c9b      	lsrs	r3, r3, #18
 80052d2:	3301      	adds	r3, #1
 80052d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052d6:	e002      	b.n	80052de <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3b01      	subs	r3, #1
 80052dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052de:	4b38      	ldr	r3, [pc, #224]	@ (80053c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ea:	d102      	bne.n	80052f2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f2      	bne.n	80052d8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052f2:	4b33      	ldr	r3, [pc, #204]	@ (80053c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052fe:	d158      	bne.n	80053b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e057      	b.n	80053b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005304:	4b2e      	ldr	r3, [pc, #184]	@ (80053c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005306:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800530a:	4a2d      	ldr	r2, [pc, #180]	@ (80053c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800530c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005310:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005314:	e04d      	b.n	80053b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800531c:	d141      	bne.n	80053a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800531e:	4b28      	ldr	r3, [pc, #160]	@ (80053c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800532a:	d131      	bne.n	8005390 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800532c:	4b24      	ldr	r3, [pc, #144]	@ (80053c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800532e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005332:	4a23      	ldr	r2, [pc, #140]	@ (80053c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005338:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800533c:	4b20      	ldr	r3, [pc, #128]	@ (80053c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005344:	4a1e      	ldr	r2, [pc, #120]	@ (80053c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005346:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800534a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800534c:	4b1d      	ldr	r3, [pc, #116]	@ (80053c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2232      	movs	r2, #50	@ 0x32
 8005352:	fb02 f303 	mul.w	r3, r2, r3
 8005356:	4a1c      	ldr	r2, [pc, #112]	@ (80053c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005358:	fba2 2303 	umull	r2, r3, r2, r3
 800535c:	0c9b      	lsrs	r3, r3, #18
 800535e:	3301      	adds	r3, #1
 8005360:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005362:	e002      	b.n	800536a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3b01      	subs	r3, #1
 8005368:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800536a:	4b15      	ldr	r3, [pc, #84]	@ (80053c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005376:	d102      	bne.n	800537e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1f2      	bne.n	8005364 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800537e:	4b10      	ldr	r3, [pc, #64]	@ (80053c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800538a:	d112      	bne.n	80053b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e011      	b.n	80053b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005390:	4b0b      	ldr	r3, [pc, #44]	@ (80053c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005396:	4a0a      	ldr	r2, [pc, #40]	@ (80053c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800539c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80053a0:	e007      	b.n	80053b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80053a2:	4b07      	ldr	r3, [pc, #28]	@ (80053c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80053aa:	4a05      	ldr	r2, [pc, #20]	@ (80053c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80053b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	40007000 	.word	0x40007000
 80053c4:	20000000 	.word	0x20000000
 80053c8:	431bde83 	.word	0x431bde83

080053cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80053d0:	4b05      	ldr	r3, [pc, #20]	@ (80053e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	4a04      	ldr	r2, [pc, #16]	@ (80053e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80053d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053da:	6093      	str	r3, [r2, #8]
}
 80053dc:	bf00      	nop
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	40007000 	.word	0x40007000

080053ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e306      	b.n	8005a0c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d075      	beq.n	80054f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800540a:	4b97      	ldr	r3, [pc, #604]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 030c 	and.w	r3, r3, #12
 8005412:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005414:	4b94      	ldr	r3, [pc, #592]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f003 0303 	and.w	r3, r3, #3
 800541c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	2b0c      	cmp	r3, #12
 8005422:	d102      	bne.n	800542a <HAL_RCC_OscConfig+0x3e>
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2b03      	cmp	r3, #3
 8005428:	d002      	beq.n	8005430 <HAL_RCC_OscConfig+0x44>
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	2b08      	cmp	r3, #8
 800542e:	d10b      	bne.n	8005448 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005430:	4b8d      	ldr	r3, [pc, #564]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d05b      	beq.n	80054f4 <HAL_RCC_OscConfig+0x108>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d157      	bne.n	80054f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e2e1      	b.n	8005a0c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005450:	d106      	bne.n	8005460 <HAL_RCC_OscConfig+0x74>
 8005452:	4b85      	ldr	r3, [pc, #532]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a84      	ldr	r2, [pc, #528]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 8005458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	e01d      	b.n	800549c <HAL_RCC_OscConfig+0xb0>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005468:	d10c      	bne.n	8005484 <HAL_RCC_OscConfig+0x98>
 800546a:	4b7f      	ldr	r3, [pc, #508]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a7e      	ldr	r2, [pc, #504]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 8005470:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	4b7c      	ldr	r3, [pc, #496]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a7b      	ldr	r2, [pc, #492]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 800547c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	e00b      	b.n	800549c <HAL_RCC_OscConfig+0xb0>
 8005484:	4b78      	ldr	r3, [pc, #480]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a77      	ldr	r2, [pc, #476]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 800548a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	4b75      	ldr	r3, [pc, #468]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a74      	ldr	r2, [pc, #464]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 8005496:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800549a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d013      	beq.n	80054cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a4:	f7fd fa10 	bl	80028c8 <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054aa:	e008      	b.n	80054be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054ac:	f7fd fa0c 	bl	80028c8 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b64      	cmp	r3, #100	@ 0x64
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e2a6      	b.n	8005a0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054be:	4b6a      	ldr	r3, [pc, #424]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0f0      	beq.n	80054ac <HAL_RCC_OscConfig+0xc0>
 80054ca:	e014      	b.n	80054f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054cc:	f7fd f9fc 	bl	80028c8 <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054d4:	f7fd f9f8 	bl	80028c8 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b64      	cmp	r3, #100	@ 0x64
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e292      	b.n	8005a0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054e6:	4b60      	ldr	r3, [pc, #384]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1f0      	bne.n	80054d4 <HAL_RCC_OscConfig+0xe8>
 80054f2:	e000      	b.n	80054f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d075      	beq.n	80055ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005502:	4b59      	ldr	r3, [pc, #356]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 030c 	and.w	r3, r3, #12
 800550a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800550c:	4b56      	ldr	r3, [pc, #344]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f003 0303 	and.w	r3, r3, #3
 8005514:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	2b0c      	cmp	r3, #12
 800551a:	d102      	bne.n	8005522 <HAL_RCC_OscConfig+0x136>
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d002      	beq.n	8005528 <HAL_RCC_OscConfig+0x13c>
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	2b04      	cmp	r3, #4
 8005526:	d11f      	bne.n	8005568 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005528:	4b4f      	ldr	r3, [pc, #316]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005530:	2b00      	cmp	r3, #0
 8005532:	d005      	beq.n	8005540 <HAL_RCC_OscConfig+0x154>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e265      	b.n	8005a0c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005540:	4b49      	ldr	r3, [pc, #292]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	061b      	lsls	r3, r3, #24
 800554e:	4946      	ldr	r1, [pc, #280]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 8005550:	4313      	orrs	r3, r2
 8005552:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005554:	4b45      	ldr	r3, [pc, #276]	@ (800566c <HAL_RCC_OscConfig+0x280>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4618      	mov	r0, r3
 800555a:	f7fc fa71 	bl	8001a40 <HAL_InitTick>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d043      	beq.n	80055ec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e251      	b.n	8005a0c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d023      	beq.n	80055b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005570:	4b3d      	ldr	r3, [pc, #244]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a3c      	ldr	r2, [pc, #240]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 8005576:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800557a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557c:	f7fd f9a4 	bl	80028c8 <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005584:	f7fd f9a0 	bl	80028c8 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e23a      	b.n	8005a0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005596:	4b34      	ldr	r3, [pc, #208]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0f0      	beq.n	8005584 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055a2:	4b31      	ldr	r3, [pc, #196]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	061b      	lsls	r3, r3, #24
 80055b0:	492d      	ldr	r1, [pc, #180]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	604b      	str	r3, [r1, #4]
 80055b6:	e01a      	b.n	80055ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a2a      	ldr	r2, [pc, #168]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 80055be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c4:	f7fd f980 	bl	80028c8 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055cc:	f7fd f97c 	bl	80028c8 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e216      	b.n	8005a0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055de:	4b22      	ldr	r3, [pc, #136]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1f0      	bne.n	80055cc <HAL_RCC_OscConfig+0x1e0>
 80055ea:	e000      	b.n	80055ee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0308 	and.w	r3, r3, #8
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d041      	beq.n	800567e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01c      	beq.n	800563c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005602:	4b19      	ldr	r3, [pc, #100]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 8005604:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005608:	4a17      	ldr	r2, [pc, #92]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 800560a:	f043 0301 	orr.w	r3, r3, #1
 800560e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005612:	f7fd f959 	bl	80028c8 <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005618:	e008      	b.n	800562c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800561a:	f7fd f955 	bl	80028c8 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d901      	bls.n	800562c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e1ef      	b.n	8005a0c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800562c:	4b0e      	ldr	r3, [pc, #56]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 800562e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0ef      	beq.n	800561a <HAL_RCC_OscConfig+0x22e>
 800563a:	e020      	b.n	800567e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800563c:	4b0a      	ldr	r3, [pc, #40]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 800563e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005642:	4a09      	ldr	r2, [pc, #36]	@ (8005668 <HAL_RCC_OscConfig+0x27c>)
 8005644:	f023 0301 	bic.w	r3, r3, #1
 8005648:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564c:	f7fd f93c 	bl	80028c8 <HAL_GetTick>
 8005650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005652:	e00d      	b.n	8005670 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005654:	f7fd f938 	bl	80028c8 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d906      	bls.n	8005670 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e1d2      	b.n	8005a0c <HAL_RCC_OscConfig+0x620>
 8005666:	bf00      	nop
 8005668:	40021000 	.word	0x40021000
 800566c:	200001d8 	.word	0x200001d8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005670:	4b8c      	ldr	r3, [pc, #560]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 8005672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1ea      	bne.n	8005654 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0304 	and.w	r3, r3, #4
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 80a6 	beq.w	80057d8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800568c:	2300      	movs	r3, #0
 800568e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005690:	4b84      	ldr	r3, [pc, #528]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 8005692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <HAL_RCC_OscConfig+0x2b4>
 800569c:	2301      	movs	r3, #1
 800569e:	e000      	b.n	80056a2 <HAL_RCC_OscConfig+0x2b6>
 80056a0:	2300      	movs	r3, #0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00d      	beq.n	80056c2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056a6:	4b7f      	ldr	r3, [pc, #508]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 80056a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056aa:	4a7e      	ldr	r2, [pc, #504]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 80056ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80056b2:	4b7c      	ldr	r3, [pc, #496]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 80056b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80056be:	2301      	movs	r3, #1
 80056c0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056c2:	4b79      	ldr	r3, [pc, #484]	@ (80058a8 <HAL_RCC_OscConfig+0x4bc>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d118      	bne.n	8005700 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056ce:	4b76      	ldr	r3, [pc, #472]	@ (80058a8 <HAL_RCC_OscConfig+0x4bc>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a75      	ldr	r2, [pc, #468]	@ (80058a8 <HAL_RCC_OscConfig+0x4bc>)
 80056d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056da:	f7fd f8f5 	bl	80028c8 <HAL_GetTick>
 80056de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056e0:	e008      	b.n	80056f4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056e2:	f7fd f8f1 	bl	80028c8 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e18b      	b.n	8005a0c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056f4:	4b6c      	ldr	r3, [pc, #432]	@ (80058a8 <HAL_RCC_OscConfig+0x4bc>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0f0      	beq.n	80056e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d108      	bne.n	800571a <HAL_RCC_OscConfig+0x32e>
 8005708:	4b66      	ldr	r3, [pc, #408]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 800570a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800570e:	4a65      	ldr	r2, [pc, #404]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 8005710:	f043 0301 	orr.w	r3, r3, #1
 8005714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005718:	e024      	b.n	8005764 <HAL_RCC_OscConfig+0x378>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	2b05      	cmp	r3, #5
 8005720:	d110      	bne.n	8005744 <HAL_RCC_OscConfig+0x358>
 8005722:	4b60      	ldr	r3, [pc, #384]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 8005724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005728:	4a5e      	ldr	r2, [pc, #376]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 800572a:	f043 0304 	orr.w	r3, r3, #4
 800572e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005732:	4b5c      	ldr	r3, [pc, #368]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 8005734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005738:	4a5a      	ldr	r2, [pc, #360]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 800573a:	f043 0301 	orr.w	r3, r3, #1
 800573e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005742:	e00f      	b.n	8005764 <HAL_RCC_OscConfig+0x378>
 8005744:	4b57      	ldr	r3, [pc, #348]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 8005746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800574a:	4a56      	ldr	r2, [pc, #344]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 800574c:	f023 0301 	bic.w	r3, r3, #1
 8005750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005754:	4b53      	ldr	r3, [pc, #332]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 8005756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800575a:	4a52      	ldr	r2, [pc, #328]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 800575c:	f023 0304 	bic.w	r3, r3, #4
 8005760:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d016      	beq.n	800579a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800576c:	f7fd f8ac 	bl	80028c8 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005772:	e00a      	b.n	800578a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005774:	f7fd f8a8 	bl	80028c8 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005782:	4293      	cmp	r3, r2
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e140      	b.n	8005a0c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800578a:	4b46      	ldr	r3, [pc, #280]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 800578c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0ed      	beq.n	8005774 <HAL_RCC_OscConfig+0x388>
 8005798:	e015      	b.n	80057c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800579a:	f7fd f895 	bl	80028c8 <HAL_GetTick>
 800579e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057a0:	e00a      	b.n	80057b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057a2:	f7fd f891 	bl	80028c8 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e129      	b.n	8005a0c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057b8:	4b3a      	ldr	r3, [pc, #232]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 80057ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1ed      	bne.n	80057a2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057c6:	7ffb      	ldrb	r3, [r7, #31]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d105      	bne.n	80057d8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057cc:	4b35      	ldr	r3, [pc, #212]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 80057ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d0:	4a34      	ldr	r2, [pc, #208]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 80057d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057d6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0320 	and.w	r3, r3, #32
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d03c      	beq.n	800585e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d01c      	beq.n	8005826 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057ec:	4b2d      	ldr	r3, [pc, #180]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 80057ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057f2:	4a2c      	ldr	r2, [pc, #176]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 80057f4:	f043 0301 	orr.w	r3, r3, #1
 80057f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057fc:	f7fd f864 	bl	80028c8 <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005804:	f7fd f860 	bl	80028c8 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e0fa      	b.n	8005a0c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005816:	4b23      	ldr	r3, [pc, #140]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 8005818:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800581c:	f003 0302 	and.w	r3, r3, #2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0ef      	beq.n	8005804 <HAL_RCC_OscConfig+0x418>
 8005824:	e01b      	b.n	800585e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005826:	4b1f      	ldr	r3, [pc, #124]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 8005828:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800582c:	4a1d      	ldr	r2, [pc, #116]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 800582e:	f023 0301 	bic.w	r3, r3, #1
 8005832:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005836:	f7fd f847 	bl	80028c8 <HAL_GetTick>
 800583a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800583c:	e008      	b.n	8005850 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800583e:	f7fd f843 	bl	80028c8 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e0dd      	b.n	8005a0c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005850:	4b14      	ldr	r3, [pc, #80]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 8005852:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1ef      	bne.n	800583e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 80d1 	beq.w	8005a0a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005868:	4b0e      	ldr	r3, [pc, #56]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 030c 	and.w	r3, r3, #12
 8005870:	2b0c      	cmp	r3, #12
 8005872:	f000 808b 	beq.w	800598c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	2b02      	cmp	r3, #2
 800587c:	d15e      	bne.n	800593c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800587e:	4b09      	ldr	r3, [pc, #36]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a08      	ldr	r2, [pc, #32]	@ (80058a4 <HAL_RCC_OscConfig+0x4b8>)
 8005884:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588a:	f7fd f81d 	bl	80028c8 <HAL_GetTick>
 800588e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005890:	e00c      	b.n	80058ac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005892:	f7fd f819 	bl	80028c8 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	2b02      	cmp	r3, #2
 800589e:	d905      	bls.n	80058ac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e0b3      	b.n	8005a0c <HAL_RCC_OscConfig+0x620>
 80058a4:	40021000 	.word	0x40021000
 80058a8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058ac:	4b59      	ldr	r3, [pc, #356]	@ (8005a14 <HAL_RCC_OscConfig+0x628>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1ec      	bne.n	8005892 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058b8:	4b56      	ldr	r3, [pc, #344]	@ (8005a14 <HAL_RCC_OscConfig+0x628>)
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	4b56      	ldr	r3, [pc, #344]	@ (8005a18 <HAL_RCC_OscConfig+0x62c>)
 80058be:	4013      	ands	r3, r2
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6a11      	ldr	r1, [r2, #32]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058c8:	3a01      	subs	r2, #1
 80058ca:	0112      	lsls	r2, r2, #4
 80058cc:	4311      	orrs	r1, r2
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80058d2:	0212      	lsls	r2, r2, #8
 80058d4:	4311      	orrs	r1, r2
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80058da:	0852      	lsrs	r2, r2, #1
 80058dc:	3a01      	subs	r2, #1
 80058de:	0552      	lsls	r2, r2, #21
 80058e0:	4311      	orrs	r1, r2
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80058e6:	0852      	lsrs	r2, r2, #1
 80058e8:	3a01      	subs	r2, #1
 80058ea:	0652      	lsls	r2, r2, #25
 80058ec:	4311      	orrs	r1, r2
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80058f2:	06d2      	lsls	r2, r2, #27
 80058f4:	430a      	orrs	r2, r1
 80058f6:	4947      	ldr	r1, [pc, #284]	@ (8005a14 <HAL_RCC_OscConfig+0x628>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058fc:	4b45      	ldr	r3, [pc, #276]	@ (8005a14 <HAL_RCC_OscConfig+0x628>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a44      	ldr	r2, [pc, #272]	@ (8005a14 <HAL_RCC_OscConfig+0x628>)
 8005902:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005906:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005908:	4b42      	ldr	r3, [pc, #264]	@ (8005a14 <HAL_RCC_OscConfig+0x628>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	4a41      	ldr	r2, [pc, #260]	@ (8005a14 <HAL_RCC_OscConfig+0x628>)
 800590e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005912:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005914:	f7fc ffd8 	bl	80028c8 <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800591a:	e008      	b.n	800592e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800591c:	f7fc ffd4 	bl	80028c8 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e06e      	b.n	8005a0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800592e:	4b39      	ldr	r3, [pc, #228]	@ (8005a14 <HAL_RCC_OscConfig+0x628>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0f0      	beq.n	800591c <HAL_RCC_OscConfig+0x530>
 800593a:	e066      	b.n	8005a0a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800593c:	4b35      	ldr	r3, [pc, #212]	@ (8005a14 <HAL_RCC_OscConfig+0x628>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a34      	ldr	r2, [pc, #208]	@ (8005a14 <HAL_RCC_OscConfig+0x628>)
 8005942:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005946:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005948:	4b32      	ldr	r3, [pc, #200]	@ (8005a14 <HAL_RCC_OscConfig+0x628>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	4a31      	ldr	r2, [pc, #196]	@ (8005a14 <HAL_RCC_OscConfig+0x628>)
 800594e:	f023 0303 	bic.w	r3, r3, #3
 8005952:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005954:	4b2f      	ldr	r3, [pc, #188]	@ (8005a14 <HAL_RCC_OscConfig+0x628>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	4a2e      	ldr	r2, [pc, #184]	@ (8005a14 <HAL_RCC_OscConfig+0x628>)
 800595a:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800595e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005962:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005964:	f7fc ffb0 	bl	80028c8 <HAL_GetTick>
 8005968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800596c:	f7fc ffac 	bl	80028c8 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e046      	b.n	8005a0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800597e:	4b25      	ldr	r3, [pc, #148]	@ (8005a14 <HAL_RCC_OscConfig+0x628>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1f0      	bne.n	800596c <HAL_RCC_OscConfig+0x580>
 800598a:	e03e      	b.n	8005a0a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d101      	bne.n	8005998 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e039      	b.n	8005a0c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005998:	4b1e      	ldr	r3, [pc, #120]	@ (8005a14 <HAL_RCC_OscConfig+0x628>)
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f003 0203 	and.w	r2, r3, #3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d12c      	bne.n	8005a06 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b6:	3b01      	subs	r3, #1
 80059b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d123      	bne.n	8005a06 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d11b      	bne.n	8005a06 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80059da:	429a      	cmp	r2, r3
 80059dc:	d113      	bne.n	8005a06 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e8:	085b      	lsrs	r3, r3, #1
 80059ea:	3b01      	subs	r3, #1
 80059ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d109      	bne.n	8005a06 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059fc:	085b      	lsrs	r3, r3, #1
 80059fe:	3b01      	subs	r3, #1
 8005a00:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d001      	beq.n	8005a0a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3720      	adds	r7, #32
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40021000 	.word	0x40021000
 8005a18:	019f800c 	.word	0x019f800c

08005a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005a26:	2300      	movs	r3, #0
 8005a28:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e11e      	b.n	8005c72 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a34:	4b91      	ldr	r3, [pc, #580]	@ (8005c7c <HAL_RCC_ClockConfig+0x260>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 030f 	and.w	r3, r3, #15
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d910      	bls.n	8005a64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a42:	4b8e      	ldr	r3, [pc, #568]	@ (8005c7c <HAL_RCC_ClockConfig+0x260>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f023 020f 	bic.w	r2, r3, #15
 8005a4a:	498c      	ldr	r1, [pc, #560]	@ (8005c7c <HAL_RCC_ClockConfig+0x260>)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a52:	4b8a      	ldr	r3, [pc, #552]	@ (8005c7c <HAL_RCC_ClockConfig+0x260>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d001      	beq.n	8005a64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e106      	b.n	8005c72 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d073      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2b03      	cmp	r3, #3
 8005a76:	d129      	bne.n	8005acc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a78:	4b81      	ldr	r3, [pc, #516]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e0f4      	b.n	8005c72 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005a88:	f000 f9d0 	bl	8005e2c <RCC_GetSysClockFreqFromPLLSource>
 8005a8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	4a7c      	ldr	r2, [pc, #496]	@ (8005c84 <HAL_RCC_ClockConfig+0x268>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d93f      	bls.n	8005b16 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a96:	4b7a      	ldr	r3, [pc, #488]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d009      	beq.n	8005ab6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d033      	beq.n	8005b16 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d12f      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ab6:	4b72      	ldr	r3, [pc, #456]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005abe:	4a70      	ldr	r2, [pc, #448]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005ac0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ac4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005ac6:	2380      	movs	r3, #128	@ 0x80
 8005ac8:	617b      	str	r3, [r7, #20]
 8005aca:	e024      	b.n	8005b16 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d107      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ad4:	4b6a      	ldr	r3, [pc, #424]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d109      	bne.n	8005af4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e0c6      	b.n	8005c72 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ae4:	4b66      	ldr	r3, [pc, #408]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e0be      	b.n	8005c72 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005af4:	f000 f8ce 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8005af8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	4a61      	ldr	r2, [pc, #388]	@ (8005c84 <HAL_RCC_ClockConfig+0x268>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d909      	bls.n	8005b16 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b02:	4b5f      	ldr	r3, [pc, #380]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b0a:	4a5d      	ldr	r2, [pc, #372]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b10:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005b12:	2380      	movs	r3, #128	@ 0x80
 8005b14:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b16:	4b5a      	ldr	r3, [pc, #360]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f023 0203 	bic.w	r2, r3, #3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	4957      	ldr	r1, [pc, #348]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b28:	f7fc fece 	bl	80028c8 <HAL_GetTick>
 8005b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b2e:	e00a      	b.n	8005b46 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b30:	f7fc feca 	bl	80028c8 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e095      	b.n	8005c72 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b46:	4b4e      	ldr	r3, [pc, #312]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f003 020c 	and.w	r2, r3, #12
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d1eb      	bne.n	8005b30 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d023      	beq.n	8005bac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d005      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b70:	4b43      	ldr	r3, [pc, #268]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	4a42      	ldr	r2, [pc, #264]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005b76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b7a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d007      	beq.n	8005b98 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005b88:	4b3d      	ldr	r3, [pc, #244]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005b90:	4a3b      	ldr	r2, [pc, #236]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005b92:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b98:	4b39      	ldr	r3, [pc, #228]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	4936      	ldr	r1, [pc, #216]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	608b      	str	r3, [r1, #8]
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	2b80      	cmp	r3, #128	@ 0x80
 8005bb0:	d105      	bne.n	8005bbe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005bb2:	4b33      	ldr	r3, [pc, #204]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	4a32      	ldr	r2, [pc, #200]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005bb8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bbc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8005c7c <HAL_RCC_ClockConfig+0x260>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d21d      	bcs.n	8005c08 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8005c7c <HAL_RCC_ClockConfig+0x260>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f023 020f 	bic.w	r2, r3, #15
 8005bd4:	4929      	ldr	r1, [pc, #164]	@ (8005c7c <HAL_RCC_ClockConfig+0x260>)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005bdc:	f7fc fe74 	bl	80028c8 <HAL_GetTick>
 8005be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005be2:	e00a      	b.n	8005bfa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005be4:	f7fc fe70 	bl	80028c8 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e03b      	b.n	8005c72 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bfa:	4b20      	ldr	r3, [pc, #128]	@ (8005c7c <HAL_RCC_ClockConfig+0x260>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 030f 	and.w	r3, r3, #15
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d1ed      	bne.n	8005be4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d008      	beq.n	8005c26 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c14:	4b1a      	ldr	r3, [pc, #104]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	4917      	ldr	r1, [pc, #92]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d009      	beq.n	8005c46 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c32:	4b13      	ldr	r3, [pc, #76]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	490f      	ldr	r1, [pc, #60]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c46:	f000 f825 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c80 <HAL_RCC_ClockConfig+0x264>)
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	091b      	lsrs	r3, r3, #4
 8005c52:	f003 030f 	and.w	r3, r3, #15
 8005c56:	490c      	ldr	r1, [pc, #48]	@ (8005c88 <HAL_RCC_ClockConfig+0x26c>)
 8005c58:	5ccb      	ldrb	r3, [r1, r3]
 8005c5a:	f003 031f 	and.w	r3, r3, #31
 8005c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c62:	4a0a      	ldr	r2, [pc, #40]	@ (8005c8c <HAL_RCC_ClockConfig+0x270>)
 8005c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c66:	4b0a      	ldr	r3, [pc, #40]	@ (8005c90 <HAL_RCC_ClockConfig+0x274>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fb fee8 	bl	8001a40 <HAL_InitTick>
 8005c70:	4603      	mov	r3, r0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3718      	adds	r7, #24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	40022000 	.word	0x40022000
 8005c80:	40021000 	.word	0x40021000
 8005c84:	04c4b400 	.word	0x04c4b400
 8005c88:	0800eb44 	.word	0x0800eb44
 8005c8c:	20000000 	.word	0x20000000
 8005c90:	200001d8 	.word	0x200001d8

08005c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f003 030c 	and.w	r3, r3, #12
 8005ca2:	2b04      	cmp	r3, #4
 8005ca4:	d102      	bne.n	8005cac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ca8:	613b      	str	r3, [r7, #16]
 8005caa:	e047      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005cac:	4b27      	ldr	r3, [pc, #156]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f003 030c 	and.w	r3, r3, #12
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d102      	bne.n	8005cbe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005cb8:	4b26      	ldr	r3, [pc, #152]	@ (8005d54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005cba:	613b      	str	r3, [r7, #16]
 8005cbc:	e03e      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005cbe:	4b23      	ldr	r3, [pc, #140]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 030c 	and.w	r3, r3, #12
 8005cc6:	2b0c      	cmp	r3, #12
 8005cc8:	d136      	bne.n	8005d38 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cca:	4b20      	ldr	r3, [pc, #128]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	091b      	lsrs	r3, r3, #4
 8005cda:	f003 030f 	and.w	r3, r3, #15
 8005cde:	3301      	adds	r3, #1
 8005ce0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d10c      	bne.n	8005d02 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ce8:	4a1a      	ldr	r2, [pc, #104]	@ (8005d54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf0:	4a16      	ldr	r2, [pc, #88]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cf2:	68d2      	ldr	r2, [r2, #12]
 8005cf4:	0a12      	lsrs	r2, r2, #8
 8005cf6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005cfa:	fb02 f303 	mul.w	r3, r2, r3
 8005cfe:	617b      	str	r3, [r7, #20]
      break;
 8005d00:	e00c      	b.n	8005d1c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d02:	4a13      	ldr	r2, [pc, #76]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0a:	4a10      	ldr	r2, [pc, #64]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d0c:	68d2      	ldr	r2, [r2, #12]
 8005d0e:	0a12      	lsrs	r2, r2, #8
 8005d10:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d14:	fb02 f303 	mul.w	r3, r2, r3
 8005d18:	617b      	str	r3, [r7, #20]
      break;
 8005d1a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	0e5b      	lsrs	r3, r3, #25
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	3301      	adds	r3, #1
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d34:	613b      	str	r3, [r7, #16]
 8005d36:	e001      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005d3c:	693b      	ldr	r3, [r7, #16]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40021000 	.word	0x40021000
 8005d50:	00f42400 	.word	0x00f42400
 8005d54:	016e3600 	.word	0x016e3600

08005d58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d5c:	4b03      	ldr	r3, [pc, #12]	@ (8005d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20000000 	.word	0x20000000

08005d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d74:	f7ff fff0 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4b06      	ldr	r3, [pc, #24]	@ (8005d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	0a1b      	lsrs	r3, r3, #8
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	4904      	ldr	r1, [pc, #16]	@ (8005d98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d86:	5ccb      	ldrb	r3, [r1, r3]
 8005d88:	f003 031f 	and.w	r3, r3, #31
 8005d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	40021000 	.word	0x40021000
 8005d98:	0800eb54 	.word	0x0800eb54

08005d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005da0:	f7ff ffda 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005da4:	4602      	mov	r2, r0
 8005da6:	4b06      	ldr	r3, [pc, #24]	@ (8005dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	0adb      	lsrs	r3, r3, #11
 8005dac:	f003 0307 	and.w	r3, r3, #7
 8005db0:	4904      	ldr	r1, [pc, #16]	@ (8005dc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005db2:	5ccb      	ldrb	r3, [r1, r3]
 8005db4:	f003 031f 	and.w	r3, r3, #31
 8005db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	0800eb54 	.word	0x0800eb54

08005dc8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	220f      	movs	r2, #15
 8005dd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005dd8:	4b12      	ldr	r3, [pc, #72]	@ (8005e24 <HAL_RCC_GetClockConfig+0x5c>)
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f003 0203 	and.w	r2, r3, #3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005de4:	4b0f      	ldr	r3, [pc, #60]	@ (8005e24 <HAL_RCC_GetClockConfig+0x5c>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005df0:	4b0c      	ldr	r3, [pc, #48]	@ (8005e24 <HAL_RCC_GetClockConfig+0x5c>)
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005dfc:	4b09      	ldr	r3, [pc, #36]	@ (8005e24 <HAL_RCC_GetClockConfig+0x5c>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	08db      	lsrs	r3, r3, #3
 8005e02:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005e0a:	4b07      	ldr	r3, [pc, #28]	@ (8005e28 <HAL_RCC_GetClockConfig+0x60>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 020f 	and.w	r2, r3, #15
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	601a      	str	r2, [r3, #0]
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	40021000 	.word	0x40021000
 8005e28:	40022000 	.word	0x40022000

08005e2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e32:	4b1e      	ldr	r3, [pc, #120]	@ (8005eac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f003 0303 	and.w	r3, r3, #3
 8005e3a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005eac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	091b      	lsrs	r3, r3, #4
 8005e42:	f003 030f 	and.w	r3, r3, #15
 8005e46:	3301      	adds	r3, #1
 8005e48:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2b03      	cmp	r3, #3
 8005e4e:	d10c      	bne.n	8005e6a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e50:	4a17      	ldr	r2, [pc, #92]	@ (8005eb0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e58:	4a14      	ldr	r2, [pc, #80]	@ (8005eac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e5a:	68d2      	ldr	r2, [r2, #12]
 8005e5c:	0a12      	lsrs	r2, r2, #8
 8005e5e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e62:	fb02 f303 	mul.w	r3, r2, r3
 8005e66:	617b      	str	r3, [r7, #20]
    break;
 8005e68:	e00c      	b.n	8005e84 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e6a:	4a12      	ldr	r2, [pc, #72]	@ (8005eb4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e72:	4a0e      	ldr	r2, [pc, #56]	@ (8005eac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e74:	68d2      	ldr	r2, [r2, #12]
 8005e76:	0a12      	lsrs	r2, r2, #8
 8005e78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e7c:	fb02 f303 	mul.w	r3, r2, r3
 8005e80:	617b      	str	r3, [r7, #20]
    break;
 8005e82:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e84:	4b09      	ldr	r3, [pc, #36]	@ (8005eac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	0e5b      	lsrs	r3, r3, #25
 8005e8a:	f003 0303 	and.w	r3, r3, #3
 8005e8e:	3301      	adds	r3, #1
 8005e90:	005b      	lsls	r3, r3, #1
 8005e92:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005e9e:	687b      	ldr	r3, [r7, #4]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	371c      	adds	r7, #28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	016e3600 	.word	0x016e3600
 8005eb4:	00f42400 	.word	0x00f42400

08005eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 8098 	beq.w	8006006 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eda:	4b43      	ldr	r3, [pc, #268]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10d      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ee6:	4b40      	ldr	r3, [pc, #256]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eea:	4a3f      	ldr	r2, [pc, #252]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ef0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ef2:	4b3d      	ldr	r3, [pc, #244]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005efa:	60bb      	str	r3, [r7, #8]
 8005efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005efe:	2301      	movs	r3, #1
 8005f00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f02:	4b3a      	ldr	r3, [pc, #232]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a39      	ldr	r2, [pc, #228]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f0e:	f7fc fcdb 	bl	80028c8 <HAL_GetTick>
 8005f12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f14:	e009      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f16:	f7fc fcd7 	bl	80028c8 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d902      	bls.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	74fb      	strb	r3, [r7, #19]
        break;
 8005f28:	e005      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f2a:	4b30      	ldr	r3, [pc, #192]	@ (8005fec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0ef      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005f36:	7cfb      	ldrb	r3, [r7, #19]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d159      	bne.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d01e      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d019      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f58:	4b23      	ldr	r3, [pc, #140]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f64:	4b20      	ldr	r3, [pc, #128]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f74:	4b1c      	ldr	r3, [pc, #112]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f84:	4a18      	ldr	r2, [pc, #96]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d016      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f96:	f7fc fc97 	bl	80028c8 <HAL_GetTick>
 8005f9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f9c:	e00b      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f9e:	f7fc fc93 	bl	80028c8 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d902      	bls.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	74fb      	strb	r3, [r7, #19]
            break;
 8005fb4:	e006      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fbc:	f003 0302 	and.w	r3, r3, #2
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0ec      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005fc4:	7cfb      	ldrb	r3, [r7, #19]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10b      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fca:	4b07      	ldr	r3, [pc, #28]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fd8:	4903      	ldr	r1, [pc, #12]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005fe0:	e008      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fe2:	7cfb      	ldrb	r3, [r7, #19]
 8005fe4:	74bb      	strb	r3, [r7, #18]
 8005fe6:	e005      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005fe8:	40021000 	.word	0x40021000
 8005fec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff0:	7cfb      	ldrb	r3, [r7, #19]
 8005ff2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ff4:	7c7b      	ldrb	r3, [r7, #17]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d105      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ffa:	4ba7      	ldr	r3, [pc, #668]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ffe:	4aa6      	ldr	r2, [pc, #664]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006000:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006004:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006012:	4ba1      	ldr	r3, [pc, #644]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006018:	f023 0203 	bic.w	r2, r3, #3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	499d      	ldr	r1, [pc, #628]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006022:	4313      	orrs	r3, r2
 8006024:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00a      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006034:	4b98      	ldr	r3, [pc, #608]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800603a:	f023 020c 	bic.w	r2, r3, #12
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	4995      	ldr	r1, [pc, #596]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006044:	4313      	orrs	r3, r2
 8006046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0304 	and.w	r3, r3, #4
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00a      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006056:	4b90      	ldr	r3, [pc, #576]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800605c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	498c      	ldr	r1, [pc, #560]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006066:	4313      	orrs	r3, r2
 8006068:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 0308 	and.w	r3, r3, #8
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00a      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006078:	4b87      	ldr	r3, [pc, #540]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800607a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800607e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	4984      	ldr	r1, [pc, #528]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006088:	4313      	orrs	r3, r2
 800608a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0310 	and.w	r3, r3, #16
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800609a:	4b7f      	ldr	r3, [pc, #508]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800609c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	497b      	ldr	r1, [pc, #492]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0320 	and.w	r3, r3, #32
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00a      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060bc:	4b76      	ldr	r3, [pc, #472]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	4973      	ldr	r1, [pc, #460]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00a      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060de:	4b6e      	ldr	r3, [pc, #440]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060e4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	496a      	ldr	r1, [pc, #424]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00a      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006100:	4b65      	ldr	r3, [pc, #404]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006106:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	4962      	ldr	r1, [pc, #392]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006110:	4313      	orrs	r3, r2
 8006112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00a      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006122:	4b5d      	ldr	r3, [pc, #372]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006128:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006130:	4959      	ldr	r1, [pc, #356]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006132:	4313      	orrs	r3, r2
 8006134:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00a      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006144:	4b54      	ldr	r3, [pc, #336]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006146:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800614a:	f023 0203 	bic.w	r2, r3, #3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006152:	4951      	ldr	r1, [pc, #324]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006154:	4313      	orrs	r3, r2
 8006156:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00a      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006166:	4b4c      	ldr	r3, [pc, #304]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800616c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006174:	4948      	ldr	r1, [pc, #288]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006176:	4313      	orrs	r3, r2
 8006178:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006184:	2b00      	cmp	r3, #0
 8006186:	d015      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006188:	4b43      	ldr	r3, [pc, #268]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800618a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800618e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006196:	4940      	ldr	r1, [pc, #256]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006198:	4313      	orrs	r3, r2
 800619a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061a6:	d105      	bne.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061a8:	4b3b      	ldr	r3, [pc, #236]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	4a3a      	ldr	r2, [pc, #232]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061b2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d015      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80061c0:	4b35      	ldr	r3, [pc, #212]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ce:	4932      	ldr	r1, [pc, #200]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061de:	d105      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	4a2c      	ldr	r2, [pc, #176]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061ea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d015      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80061f8:	4b27      	ldr	r3, [pc, #156]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006206:	4924      	ldr	r1, [pc, #144]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006208:	4313      	orrs	r3, r2
 800620a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006212:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006216:	d105      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006218:	4b1f      	ldr	r3, [pc, #124]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	4a1e      	ldr	r2, [pc, #120]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800621e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006222:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d015      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006230:	4b19      	ldr	r3, [pc, #100]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006236:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800623e:	4916      	ldr	r1, [pc, #88]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006240:	4313      	orrs	r3, r2
 8006242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800624a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800624e:	d105      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006250:	4b11      	ldr	r3, [pc, #68]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	4a10      	ldr	r2, [pc, #64]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006256:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800625a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d019      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006268:	4b0b      	ldr	r3, [pc, #44]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800626a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800626e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006276:	4908      	ldr	r1, [pc, #32]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006278:	4313      	orrs	r3, r2
 800627a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006282:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006286:	d109      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006288:	4b03      	ldr	r3, [pc, #12]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	4a02      	ldr	r2, [pc, #8]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800628e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006292:	60d3      	str	r3, [r2, #12]
 8006294:	e002      	b.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006296:	bf00      	nop
 8006298:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d015      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80062a8:	4b29      	ldr	r3, [pc, #164]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b6:	4926      	ldr	r1, [pc, #152]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062c6:	d105      	bne.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80062c8:	4b21      	ldr	r3, [pc, #132]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	4a20      	ldr	r2, [pc, #128]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062d2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d015      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80062e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062e6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062ee:	4918      	ldr	r1, [pc, #96]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062fe:	d105      	bne.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006300:	4b13      	ldr	r3, [pc, #76]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	4a12      	ldr	r2, [pc, #72]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006306:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800630a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d015      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006318:	4b0d      	ldr	r3, [pc, #52]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800631a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800631e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006326:	490a      	ldr	r1, [pc, #40]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006328:	4313      	orrs	r3, r2
 800632a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006332:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006336:	d105      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006338:	4b05      	ldr	r3, [pc, #20]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	4a04      	ldr	r2, [pc, #16]	@ (8006350 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800633e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006342:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006344:	7cbb      	ldrb	r3, [r7, #18]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	40021000 	.word	0x40021000

08006354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e049      	b.n	80063fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d106      	bne.n	8006380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7fb fe98 	bl	80020b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2202      	movs	r2, #2
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3304      	adds	r3, #4
 8006390:	4619      	mov	r1, r3
 8006392:	4610      	mov	r0, r2
 8006394:	f000 fe86 	bl	80070a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006412:	b2db      	uxtb	r3, r3
 8006414:	2b01      	cmp	r3, #1
 8006416:	d001      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e054      	b.n	80064c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68da      	ldr	r2, [r3, #12]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0201 	orr.w	r2, r2, #1
 8006432:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a26      	ldr	r2, [pc, #152]	@ (80064d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d022      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0x80>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006446:	d01d      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0x80>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a22      	ldr	r2, [pc, #136]	@ (80064d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d018      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0x80>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a21      	ldr	r2, [pc, #132]	@ (80064dc <HAL_TIM_Base_Start_IT+0xd8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d013      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0x80>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a1f      	ldr	r2, [pc, #124]	@ (80064e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d00e      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0x80>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a1e      	ldr	r2, [pc, #120]	@ (80064e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d009      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0x80>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a1c      	ldr	r2, [pc, #112]	@ (80064e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d004      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0x80>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1b      	ldr	r2, [pc, #108]	@ (80064ec <HAL_TIM_Base_Start_IT+0xe8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d115      	bne.n	80064b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689a      	ldr	r2, [r3, #8]
 800648a:	4b19      	ldr	r3, [pc, #100]	@ (80064f0 <HAL_TIM_Base_Start_IT+0xec>)
 800648c:	4013      	ands	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b06      	cmp	r3, #6
 8006494:	d015      	beq.n	80064c2 <HAL_TIM_Base_Start_IT+0xbe>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800649c:	d011      	beq.n	80064c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f042 0201 	orr.w	r2, r2, #1
 80064ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ae:	e008      	b.n	80064c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f042 0201 	orr.w	r2, r2, #1
 80064be:	601a      	str	r2, [r3, #0]
 80064c0:	e000      	b.n	80064c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	40012c00 	.word	0x40012c00
 80064d8:	40000400 	.word	0x40000400
 80064dc:	40000800 	.word	0x40000800
 80064e0:	40000c00 	.word	0x40000c00
 80064e4:	40013400 	.word	0x40013400
 80064e8:	40014000 	.word	0x40014000
 80064ec:	40015000 	.word	0x40015000
 80064f0:	00010007 	.word	0x00010007

080064f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e049      	b.n	800659a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d106      	bne.n	8006520 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7fb fda2 	bl	8002064 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	3304      	adds	r3, #4
 8006530:	4619      	mov	r1, r3
 8006532:	4610      	mov	r0, r2
 8006534:	f000 fdb6 	bl	80070a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3708      	adds	r7, #8
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
	...

080065a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d109      	bne.n	80065c8 <HAL_TIM_PWM_Start+0x24>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b01      	cmp	r3, #1
 80065be:	bf14      	ite	ne
 80065c0:	2301      	movne	r3, #1
 80065c2:	2300      	moveq	r3, #0
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	e03c      	b.n	8006642 <HAL_TIM_PWM_Start+0x9e>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	d109      	bne.n	80065e2 <HAL_TIM_PWM_Start+0x3e>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	bf14      	ite	ne
 80065da:	2301      	movne	r3, #1
 80065dc:	2300      	moveq	r3, #0
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	e02f      	b.n	8006642 <HAL_TIM_PWM_Start+0x9e>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d109      	bne.n	80065fc <HAL_TIM_PWM_Start+0x58>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065ee:	b2db      	uxtb	r3, r3
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	bf14      	ite	ne
 80065f4:	2301      	movne	r3, #1
 80065f6:	2300      	moveq	r3, #0
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	e022      	b.n	8006642 <HAL_TIM_PWM_Start+0x9e>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b0c      	cmp	r3, #12
 8006600:	d109      	bne.n	8006616 <HAL_TIM_PWM_Start+0x72>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b01      	cmp	r3, #1
 800660c:	bf14      	ite	ne
 800660e:	2301      	movne	r3, #1
 8006610:	2300      	moveq	r3, #0
 8006612:	b2db      	uxtb	r3, r3
 8006614:	e015      	b.n	8006642 <HAL_TIM_PWM_Start+0x9e>
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b10      	cmp	r3, #16
 800661a:	d109      	bne.n	8006630 <HAL_TIM_PWM_Start+0x8c>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b01      	cmp	r3, #1
 8006626:	bf14      	ite	ne
 8006628:	2301      	movne	r3, #1
 800662a:	2300      	moveq	r3, #0
 800662c:	b2db      	uxtb	r3, r3
 800662e:	e008      	b.n	8006642 <HAL_TIM_PWM_Start+0x9e>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006636:	b2db      	uxtb	r3, r3
 8006638:	2b01      	cmp	r3, #1
 800663a:	bf14      	ite	ne
 800663c:	2301      	movne	r3, #1
 800663e:	2300      	moveq	r3, #0
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e0a6      	b.n	8006798 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d104      	bne.n	800665a <HAL_TIM_PWM_Start+0xb6>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006658:	e023      	b.n	80066a2 <HAL_TIM_PWM_Start+0xfe>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b04      	cmp	r3, #4
 800665e:	d104      	bne.n	800666a <HAL_TIM_PWM_Start+0xc6>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006668:	e01b      	b.n	80066a2 <HAL_TIM_PWM_Start+0xfe>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	2b08      	cmp	r3, #8
 800666e:	d104      	bne.n	800667a <HAL_TIM_PWM_Start+0xd6>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006678:	e013      	b.n	80066a2 <HAL_TIM_PWM_Start+0xfe>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b0c      	cmp	r3, #12
 800667e:	d104      	bne.n	800668a <HAL_TIM_PWM_Start+0xe6>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006688:	e00b      	b.n	80066a2 <HAL_TIM_PWM_Start+0xfe>
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2b10      	cmp	r3, #16
 800668e:	d104      	bne.n	800669a <HAL_TIM_PWM_Start+0xf6>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2202      	movs	r2, #2
 8006694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006698:	e003      	b.n	80066a2 <HAL_TIM_PWM_Start+0xfe>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2202      	movs	r2, #2
 800669e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2201      	movs	r2, #1
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f001 f9dc 	bl	8007a68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a3a      	ldr	r2, [pc, #232]	@ (80067a0 <HAL_TIM_PWM_Start+0x1fc>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d018      	beq.n	80066ec <HAL_TIM_PWM_Start+0x148>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a39      	ldr	r2, [pc, #228]	@ (80067a4 <HAL_TIM_PWM_Start+0x200>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d013      	beq.n	80066ec <HAL_TIM_PWM_Start+0x148>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a37      	ldr	r2, [pc, #220]	@ (80067a8 <HAL_TIM_PWM_Start+0x204>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d00e      	beq.n	80066ec <HAL_TIM_PWM_Start+0x148>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a36      	ldr	r2, [pc, #216]	@ (80067ac <HAL_TIM_PWM_Start+0x208>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d009      	beq.n	80066ec <HAL_TIM_PWM_Start+0x148>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a34      	ldr	r2, [pc, #208]	@ (80067b0 <HAL_TIM_PWM_Start+0x20c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d004      	beq.n	80066ec <HAL_TIM_PWM_Start+0x148>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a33      	ldr	r2, [pc, #204]	@ (80067b4 <HAL_TIM_PWM_Start+0x210>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d101      	bne.n	80066f0 <HAL_TIM_PWM_Start+0x14c>
 80066ec:	2301      	movs	r3, #1
 80066ee:	e000      	b.n	80066f2 <HAL_TIM_PWM_Start+0x14e>
 80066f0:	2300      	movs	r3, #0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d007      	beq.n	8006706 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006704:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a25      	ldr	r2, [pc, #148]	@ (80067a0 <HAL_TIM_PWM_Start+0x1fc>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d022      	beq.n	8006756 <HAL_TIM_PWM_Start+0x1b2>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006718:	d01d      	beq.n	8006756 <HAL_TIM_PWM_Start+0x1b2>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a26      	ldr	r2, [pc, #152]	@ (80067b8 <HAL_TIM_PWM_Start+0x214>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d018      	beq.n	8006756 <HAL_TIM_PWM_Start+0x1b2>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a24      	ldr	r2, [pc, #144]	@ (80067bc <HAL_TIM_PWM_Start+0x218>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d013      	beq.n	8006756 <HAL_TIM_PWM_Start+0x1b2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a23      	ldr	r2, [pc, #140]	@ (80067c0 <HAL_TIM_PWM_Start+0x21c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d00e      	beq.n	8006756 <HAL_TIM_PWM_Start+0x1b2>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a19      	ldr	r2, [pc, #100]	@ (80067a4 <HAL_TIM_PWM_Start+0x200>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d009      	beq.n	8006756 <HAL_TIM_PWM_Start+0x1b2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a18      	ldr	r2, [pc, #96]	@ (80067a8 <HAL_TIM_PWM_Start+0x204>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d004      	beq.n	8006756 <HAL_TIM_PWM_Start+0x1b2>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a18      	ldr	r2, [pc, #96]	@ (80067b4 <HAL_TIM_PWM_Start+0x210>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d115      	bne.n	8006782 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	4b19      	ldr	r3, [pc, #100]	@ (80067c4 <HAL_TIM_PWM_Start+0x220>)
 800675e:	4013      	ands	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2b06      	cmp	r3, #6
 8006766:	d015      	beq.n	8006794 <HAL_TIM_PWM_Start+0x1f0>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800676e:	d011      	beq.n	8006794 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f042 0201 	orr.w	r2, r2, #1
 800677e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006780:	e008      	b.n	8006794 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f042 0201 	orr.w	r2, r2, #1
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	e000      	b.n	8006796 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006794:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	40012c00 	.word	0x40012c00
 80067a4:	40013400 	.word	0x40013400
 80067a8:	40014000 	.word	0x40014000
 80067ac:	40014400 	.word	0x40014400
 80067b0:	40014800 	.word	0x40014800
 80067b4:	40015000 	.word	0x40015000
 80067b8:	40000400 	.word	0x40000400
 80067bc:	40000800 	.word	0x40000800
 80067c0:	40000c00 	.word	0x40000c00
 80067c4:	00010007 	.word	0x00010007

080067c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2200      	movs	r2, #0
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	4618      	mov	r0, r3
 80067dc:	f001 f944 	bl	8007a68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a40      	ldr	r2, [pc, #256]	@ (80068e8 <HAL_TIM_PWM_Stop+0x120>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d018      	beq.n	800681c <HAL_TIM_PWM_Stop+0x54>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a3f      	ldr	r2, [pc, #252]	@ (80068ec <HAL_TIM_PWM_Stop+0x124>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d013      	beq.n	800681c <HAL_TIM_PWM_Stop+0x54>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a3d      	ldr	r2, [pc, #244]	@ (80068f0 <HAL_TIM_PWM_Stop+0x128>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d00e      	beq.n	800681c <HAL_TIM_PWM_Stop+0x54>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a3c      	ldr	r2, [pc, #240]	@ (80068f4 <HAL_TIM_PWM_Stop+0x12c>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d009      	beq.n	800681c <HAL_TIM_PWM_Stop+0x54>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a3a      	ldr	r2, [pc, #232]	@ (80068f8 <HAL_TIM_PWM_Stop+0x130>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d004      	beq.n	800681c <HAL_TIM_PWM_Stop+0x54>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a39      	ldr	r2, [pc, #228]	@ (80068fc <HAL_TIM_PWM_Stop+0x134>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d101      	bne.n	8006820 <HAL_TIM_PWM_Stop+0x58>
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <HAL_TIM_PWM_Stop+0x5a>
 8006820:	2300      	movs	r3, #0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d017      	beq.n	8006856 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6a1a      	ldr	r2, [r3, #32]
 800682c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006830:	4013      	ands	r3, r2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10f      	bne.n	8006856 <HAL_TIM_PWM_Stop+0x8e>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6a1a      	ldr	r2, [r3, #32]
 800683c:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006840:	4013      	ands	r3, r2
 8006842:	2b00      	cmp	r3, #0
 8006844:	d107      	bne.n	8006856 <HAL_TIM_PWM_Stop+0x8e>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006854:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6a1a      	ldr	r2, [r3, #32]
 800685c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006860:	4013      	ands	r3, r2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10f      	bne.n	8006886 <HAL_TIM_PWM_Stop+0xbe>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6a1a      	ldr	r2, [r3, #32]
 800686c:	f244 4344 	movw	r3, #17476	@ 0x4444
 8006870:	4013      	ands	r3, r2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d107      	bne.n	8006886 <HAL_TIM_PWM_Stop+0xbe>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0201 	bic.w	r2, r2, #1
 8006884:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d104      	bne.n	8006896 <HAL_TIM_PWM_Stop+0xce>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006894:	e023      	b.n	80068de <HAL_TIM_PWM_Stop+0x116>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b04      	cmp	r3, #4
 800689a:	d104      	bne.n	80068a6 <HAL_TIM_PWM_Stop+0xde>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068a4:	e01b      	b.n	80068de <HAL_TIM_PWM_Stop+0x116>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b08      	cmp	r3, #8
 80068aa:	d104      	bne.n	80068b6 <HAL_TIM_PWM_Stop+0xee>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068b4:	e013      	b.n	80068de <HAL_TIM_PWM_Stop+0x116>
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b0c      	cmp	r3, #12
 80068ba:	d104      	bne.n	80068c6 <HAL_TIM_PWM_Stop+0xfe>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80068c4:	e00b      	b.n	80068de <HAL_TIM_PWM_Stop+0x116>
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b10      	cmp	r3, #16
 80068ca:	d104      	bne.n	80068d6 <HAL_TIM_PWM_Stop+0x10e>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068d4:	e003      	b.n	80068de <HAL_TIM_PWM_Stop+0x116>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	40012c00 	.word	0x40012c00
 80068ec:	40013400 	.word	0x40013400
 80068f0:	40014000 	.word	0x40014000
 80068f4:	40014400 	.word	0x40014400
 80068f8:	40014800 	.word	0x40014800
 80068fc:	40015000 	.word	0x40015000

08006900 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b02      	cmp	r3, #2
 8006914:	d122      	bne.n	800695c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	f003 0302 	and.w	r3, r3, #2
 8006920:	2b02      	cmp	r3, #2
 8006922:	d11b      	bne.n	800695c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f06f 0202 	mvn.w	r2, #2
 800692c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	f003 0303 	and.w	r3, r3, #3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fb90 	bl	8007068 <HAL_TIM_IC_CaptureCallback>
 8006948:	e005      	b.n	8006956 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fb82 	bl	8007054 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fb93 	bl	800707c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	f003 0304 	and.w	r3, r3, #4
 8006966:	2b04      	cmp	r3, #4
 8006968:	d122      	bne.n	80069b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f003 0304 	and.w	r3, r3, #4
 8006974:	2b04      	cmp	r3, #4
 8006976:	d11b      	bne.n	80069b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f06f 0204 	mvn.w	r2, #4
 8006980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2202      	movs	r2, #2
 8006986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fb66 	bl	8007068 <HAL_TIM_IC_CaptureCallback>
 800699c:	e005      	b.n	80069aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fb58 	bl	8007054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fb69 	bl	800707c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	f003 0308 	and.w	r3, r3, #8
 80069ba:	2b08      	cmp	r3, #8
 80069bc:	d122      	bne.n	8006a04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	f003 0308 	and.w	r3, r3, #8
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d11b      	bne.n	8006a04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f06f 0208 	mvn.w	r2, #8
 80069d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2204      	movs	r2, #4
 80069da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fb3c 	bl	8007068 <HAL_TIM_IC_CaptureCallback>
 80069f0:	e005      	b.n	80069fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fb2e 	bl	8007054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fb3f 	bl	800707c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	f003 0310 	and.w	r3, r3, #16
 8006a0e:	2b10      	cmp	r3, #16
 8006a10:	d122      	bne.n	8006a58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	f003 0310 	and.w	r3, r3, #16
 8006a1c:	2b10      	cmp	r3, #16
 8006a1e:	d11b      	bne.n	8006a58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f06f 0210 	mvn.w	r2, #16
 8006a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2208      	movs	r2, #8
 8006a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d003      	beq.n	8006a46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fb12 	bl	8007068 <HAL_TIM_IC_CaptureCallback>
 8006a44:	e005      	b.n	8006a52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fb04 	bl	8007054 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fb15 	bl	800707c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d10e      	bne.n	8006a84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f003 0301 	and.w	r3, r3, #1
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d107      	bne.n	8006a84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f06f 0201 	mvn.w	r2, #1
 8006a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7fa ff9c 	bl	80019bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a8e:	2b80      	cmp	r3, #128	@ 0x80
 8006a90:	d10e      	bne.n	8006ab0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a9c:	2b80      	cmp	r3, #128	@ 0x80
 8006a9e:	d107      	bne.n	8006ab0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f001 fb22 	bl	80080f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006abe:	d10e      	bne.n	8006ade <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aca:	2b80      	cmp	r3, #128	@ 0x80
 8006acc:	d107      	bne.n	8006ade <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f001 fb15 	bl	8008108 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae8:	2b40      	cmp	r3, #64	@ 0x40
 8006aea:	d10e      	bne.n	8006b0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006af6:	2b40      	cmp	r3, #64	@ 0x40
 8006af8:	d107      	bne.n	8006b0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 fac3 	bl	8007090 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	f003 0320 	and.w	r3, r3, #32
 8006b14:	2b20      	cmp	r3, #32
 8006b16:	d10e      	bne.n	8006b36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f003 0320 	and.w	r3, r3, #32
 8006b22:	2b20      	cmp	r3, #32
 8006b24:	d107      	bne.n	8006b36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f06f 0220 	mvn.w	r2, #32
 8006b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 fad5 	bl	80080e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b44:	d10f      	bne.n	8006b66 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b54:	d107      	bne.n	8006b66 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 fadb 	bl	800811c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b74:	d10f      	bne.n	8006b96 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b84:	d107      	bne.n	8006b96 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f001 facd 	bl	8008130 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ba0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ba4:	d10f      	bne.n	8006bc6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bb4:	d107      	bne.n	8006bc6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 fabf 	bl	8008144 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bd0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bd4:	d10f      	bne.n	8006bf6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006be0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006be4:	d107      	bne.n	8006bf6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 fab1 	bl	8008158 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bf6:	bf00      	nop
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
	...

08006c00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d101      	bne.n	8006c1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	e0ff      	b.n	8006e1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b14      	cmp	r3, #20
 8006c2a:	f200 80f0 	bhi.w	8006e0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c34:	08006c89 	.word	0x08006c89
 8006c38:	08006e0f 	.word	0x08006e0f
 8006c3c:	08006e0f 	.word	0x08006e0f
 8006c40:	08006e0f 	.word	0x08006e0f
 8006c44:	08006cc9 	.word	0x08006cc9
 8006c48:	08006e0f 	.word	0x08006e0f
 8006c4c:	08006e0f 	.word	0x08006e0f
 8006c50:	08006e0f 	.word	0x08006e0f
 8006c54:	08006d0b 	.word	0x08006d0b
 8006c58:	08006e0f 	.word	0x08006e0f
 8006c5c:	08006e0f 	.word	0x08006e0f
 8006c60:	08006e0f 	.word	0x08006e0f
 8006c64:	08006d4b 	.word	0x08006d4b
 8006c68:	08006e0f 	.word	0x08006e0f
 8006c6c:	08006e0f 	.word	0x08006e0f
 8006c70:	08006e0f 	.word	0x08006e0f
 8006c74:	08006d8d 	.word	0x08006d8d
 8006c78:	08006e0f 	.word	0x08006e0f
 8006c7c:	08006e0f 	.word	0x08006e0f
 8006c80:	08006e0f 	.word	0x08006e0f
 8006c84:	08006dcd 	.word	0x08006dcd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68b9      	ldr	r1, [r7, #8]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 fab0 	bl	80071f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	699a      	ldr	r2, [r3, #24]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f042 0208 	orr.w	r2, r2, #8
 8006ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699a      	ldr	r2, [r3, #24]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0204 	bic.w	r2, r2, #4
 8006cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6999      	ldr	r1, [r3, #24]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	691a      	ldr	r2, [r3, #16]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	619a      	str	r2, [r3, #24]
      break;
 8006cc6:	e0a5      	b.n	8006e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68b9      	ldr	r1, [r7, #8]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 fb2a 	bl	8007328 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	699a      	ldr	r2, [r3, #24]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	699a      	ldr	r2, [r3, #24]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6999      	ldr	r1, [r3, #24]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	021a      	lsls	r2, r3, #8
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	619a      	str	r2, [r3, #24]
      break;
 8006d08:	e084      	b.n	8006e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68b9      	ldr	r1, [r7, #8]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 fb9d 	bl	8007450 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	69da      	ldr	r2, [r3, #28]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f042 0208 	orr.w	r2, r2, #8
 8006d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69da      	ldr	r2, [r3, #28]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 0204 	bic.w	r2, r2, #4
 8006d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	69d9      	ldr	r1, [r3, #28]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	691a      	ldr	r2, [r3, #16]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	61da      	str	r2, [r3, #28]
      break;
 8006d48:	e064      	b.n	8006e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68b9      	ldr	r1, [r7, #8]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 fc0f 	bl	8007574 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	69da      	ldr	r2, [r3, #28]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	69da      	ldr	r2, [r3, #28]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69d9      	ldr	r1, [r3, #28]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	021a      	lsls	r2, r3, #8
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	61da      	str	r2, [r3, #28]
      break;
 8006d8a:	e043      	b.n	8006e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68b9      	ldr	r1, [r7, #8]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 fc82 	bl	800769c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f042 0208 	orr.w	r2, r2, #8
 8006da6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 0204 	bic.w	r2, r2, #4
 8006db6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	691a      	ldr	r2, [r3, #16]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006dca:	e023      	b.n	8006e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68b9      	ldr	r1, [r7, #8]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 fccc 	bl	8007770 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006de6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006df6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	021a      	lsls	r2, r3, #8
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006e0c:	e002      	b.n	8006e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	75fb      	strb	r3, [r7, #23]
      break;
 8006e12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop

08006e28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d101      	bne.n	8006e44 <HAL_TIM_ConfigClockSource+0x1c>
 8006e40:	2302      	movs	r3, #2
 8006e42:	e0f6      	b.n	8007032 <HAL_TIM_ConfigClockSource+0x20a>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006e62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006e66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a6f      	ldr	r2, [pc, #444]	@ (800703c <HAL_TIM_ConfigClockSource+0x214>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	f000 80c1 	beq.w	8007006 <HAL_TIM_ConfigClockSource+0x1de>
 8006e84:	4a6d      	ldr	r2, [pc, #436]	@ (800703c <HAL_TIM_ConfigClockSource+0x214>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	f200 80c6 	bhi.w	8007018 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e8c:	4a6c      	ldr	r2, [pc, #432]	@ (8007040 <HAL_TIM_ConfigClockSource+0x218>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	f000 80b9 	beq.w	8007006 <HAL_TIM_ConfigClockSource+0x1de>
 8006e94:	4a6a      	ldr	r2, [pc, #424]	@ (8007040 <HAL_TIM_ConfigClockSource+0x218>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	f200 80be 	bhi.w	8007018 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e9c:	4a69      	ldr	r2, [pc, #420]	@ (8007044 <HAL_TIM_ConfigClockSource+0x21c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	f000 80b1 	beq.w	8007006 <HAL_TIM_ConfigClockSource+0x1de>
 8006ea4:	4a67      	ldr	r2, [pc, #412]	@ (8007044 <HAL_TIM_ConfigClockSource+0x21c>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	f200 80b6 	bhi.w	8007018 <HAL_TIM_ConfigClockSource+0x1f0>
 8006eac:	4a66      	ldr	r2, [pc, #408]	@ (8007048 <HAL_TIM_ConfigClockSource+0x220>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	f000 80a9 	beq.w	8007006 <HAL_TIM_ConfigClockSource+0x1de>
 8006eb4:	4a64      	ldr	r2, [pc, #400]	@ (8007048 <HAL_TIM_ConfigClockSource+0x220>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	f200 80ae 	bhi.w	8007018 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ebc:	4a63      	ldr	r2, [pc, #396]	@ (800704c <HAL_TIM_ConfigClockSource+0x224>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	f000 80a1 	beq.w	8007006 <HAL_TIM_ConfigClockSource+0x1de>
 8006ec4:	4a61      	ldr	r2, [pc, #388]	@ (800704c <HAL_TIM_ConfigClockSource+0x224>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	f200 80a6 	bhi.w	8007018 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ecc:	4a60      	ldr	r2, [pc, #384]	@ (8007050 <HAL_TIM_ConfigClockSource+0x228>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	f000 8099 	beq.w	8007006 <HAL_TIM_ConfigClockSource+0x1de>
 8006ed4:	4a5e      	ldr	r2, [pc, #376]	@ (8007050 <HAL_TIM_ConfigClockSource+0x228>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	f200 809e 	bhi.w	8007018 <HAL_TIM_ConfigClockSource+0x1f0>
 8006edc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006ee0:	f000 8091 	beq.w	8007006 <HAL_TIM_ConfigClockSource+0x1de>
 8006ee4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006ee8:	f200 8096 	bhi.w	8007018 <HAL_TIM_ConfigClockSource+0x1f0>
 8006eec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ef0:	f000 8089 	beq.w	8007006 <HAL_TIM_ConfigClockSource+0x1de>
 8006ef4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ef8:	f200 808e 	bhi.w	8007018 <HAL_TIM_ConfigClockSource+0x1f0>
 8006efc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f00:	d03e      	beq.n	8006f80 <HAL_TIM_ConfigClockSource+0x158>
 8006f02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f06:	f200 8087 	bhi.w	8007018 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f0e:	f000 8086 	beq.w	800701e <HAL_TIM_ConfigClockSource+0x1f6>
 8006f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f16:	d87f      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f18:	2b70      	cmp	r3, #112	@ 0x70
 8006f1a:	d01a      	beq.n	8006f52 <HAL_TIM_ConfigClockSource+0x12a>
 8006f1c:	2b70      	cmp	r3, #112	@ 0x70
 8006f1e:	d87b      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f20:	2b60      	cmp	r3, #96	@ 0x60
 8006f22:	d050      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x19e>
 8006f24:	2b60      	cmp	r3, #96	@ 0x60
 8006f26:	d877      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f28:	2b50      	cmp	r3, #80	@ 0x50
 8006f2a:	d03c      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0x17e>
 8006f2c:	2b50      	cmp	r3, #80	@ 0x50
 8006f2e:	d873      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f30:	2b40      	cmp	r3, #64	@ 0x40
 8006f32:	d058      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0x1be>
 8006f34:	2b40      	cmp	r3, #64	@ 0x40
 8006f36:	d86f      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f38:	2b30      	cmp	r3, #48	@ 0x30
 8006f3a:	d064      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0x1de>
 8006f3c:	2b30      	cmp	r3, #48	@ 0x30
 8006f3e:	d86b      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d060      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0x1de>
 8006f44:	2b20      	cmp	r3, #32
 8006f46:	d867      	bhi.n	8007018 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d05c      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0x1de>
 8006f4c:	2b10      	cmp	r3, #16
 8006f4e:	d05a      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0x1de>
 8006f50:	e062      	b.n	8007018 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6818      	ldr	r0, [r3, #0]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	6899      	ldr	r1, [r3, #8]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f000 fd61 	bl	8007a28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006f74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	609a      	str	r2, [r3, #8]
      break;
 8006f7e:	e04f      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6818      	ldr	r0, [r3, #0]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	6899      	ldr	r1, [r3, #8]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	685a      	ldr	r2, [r3, #4]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	f000 fd4a 	bl	8007a28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689a      	ldr	r2, [r3, #8]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fa2:	609a      	str	r2, [r3, #8]
      break;
 8006fa4:	e03c      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6818      	ldr	r0, [r3, #0]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	6859      	ldr	r1, [r3, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f000 fcbc 	bl	8007930 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2150      	movs	r1, #80	@ 0x50
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 fd15 	bl	80079ee <TIM_ITRx_SetConfig>
      break;
 8006fc4:	e02c      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	6859      	ldr	r1, [r3, #4]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f000 fcdb 	bl	800798e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2160      	movs	r1, #96	@ 0x60
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 fd05 	bl	80079ee <TIM_ITRx_SetConfig>
      break;
 8006fe4:	e01c      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6818      	ldr	r0, [r3, #0]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	6859      	ldr	r1, [r3, #4]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f000 fc9c 	bl	8007930 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2140      	movs	r1, #64	@ 0x40
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 fcf5 	bl	80079ee <TIM_ITRx_SetConfig>
      break;
 8007004:	e00c      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4619      	mov	r1, r3
 8007010:	4610      	mov	r0, r2
 8007012:	f000 fcec 	bl	80079ee <TIM_ITRx_SetConfig>
      break;
 8007016:	e003      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	73fb      	strb	r3, [r7, #15]
      break;
 800701c:	e000      	b.n	8007020 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800701e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007030:	7bfb      	ldrb	r3, [r7, #15]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	00100070 	.word	0x00100070
 8007040:	00100060 	.word	0x00100060
 8007044:	00100050 	.word	0x00100050
 8007048:	00100040 	.word	0x00100040
 800704c:	00100030 	.word	0x00100030
 8007050:	00100020 	.word	0x00100020

08007054 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a46      	ldr	r2, [pc, #280]	@ (80071d0 <TIM_Base_SetConfig+0x12c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d017      	beq.n	80070ec <TIM_Base_SetConfig+0x48>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070c2:	d013      	beq.n	80070ec <TIM_Base_SetConfig+0x48>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a43      	ldr	r2, [pc, #268]	@ (80071d4 <TIM_Base_SetConfig+0x130>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d00f      	beq.n	80070ec <TIM_Base_SetConfig+0x48>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a42      	ldr	r2, [pc, #264]	@ (80071d8 <TIM_Base_SetConfig+0x134>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d00b      	beq.n	80070ec <TIM_Base_SetConfig+0x48>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a41      	ldr	r2, [pc, #260]	@ (80071dc <TIM_Base_SetConfig+0x138>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d007      	beq.n	80070ec <TIM_Base_SetConfig+0x48>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a40      	ldr	r2, [pc, #256]	@ (80071e0 <TIM_Base_SetConfig+0x13c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d003      	beq.n	80070ec <TIM_Base_SetConfig+0x48>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a3f      	ldr	r2, [pc, #252]	@ (80071e4 <TIM_Base_SetConfig+0x140>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d108      	bne.n	80070fe <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a33      	ldr	r2, [pc, #204]	@ (80071d0 <TIM_Base_SetConfig+0x12c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d023      	beq.n	800714e <TIM_Base_SetConfig+0xaa>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800710c:	d01f      	beq.n	800714e <TIM_Base_SetConfig+0xaa>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a30      	ldr	r2, [pc, #192]	@ (80071d4 <TIM_Base_SetConfig+0x130>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d01b      	beq.n	800714e <TIM_Base_SetConfig+0xaa>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a2f      	ldr	r2, [pc, #188]	@ (80071d8 <TIM_Base_SetConfig+0x134>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d017      	beq.n	800714e <TIM_Base_SetConfig+0xaa>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a2e      	ldr	r2, [pc, #184]	@ (80071dc <TIM_Base_SetConfig+0x138>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d013      	beq.n	800714e <TIM_Base_SetConfig+0xaa>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a2d      	ldr	r2, [pc, #180]	@ (80071e0 <TIM_Base_SetConfig+0x13c>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d00f      	beq.n	800714e <TIM_Base_SetConfig+0xaa>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a2d      	ldr	r2, [pc, #180]	@ (80071e8 <TIM_Base_SetConfig+0x144>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d00b      	beq.n	800714e <TIM_Base_SetConfig+0xaa>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a2c      	ldr	r2, [pc, #176]	@ (80071ec <TIM_Base_SetConfig+0x148>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d007      	beq.n	800714e <TIM_Base_SetConfig+0xaa>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a2b      	ldr	r2, [pc, #172]	@ (80071f0 <TIM_Base_SetConfig+0x14c>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d003      	beq.n	800714e <TIM_Base_SetConfig+0xaa>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a26      	ldr	r2, [pc, #152]	@ (80071e4 <TIM_Base_SetConfig+0x140>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d108      	bne.n	8007160 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	4313      	orrs	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	4313      	orrs	r3, r2
 800716c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a12      	ldr	r2, [pc, #72]	@ (80071d0 <TIM_Base_SetConfig+0x12c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d013      	beq.n	80071b4 <TIM_Base_SetConfig+0x110>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a14      	ldr	r2, [pc, #80]	@ (80071e0 <TIM_Base_SetConfig+0x13c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00f      	beq.n	80071b4 <TIM_Base_SetConfig+0x110>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a14      	ldr	r2, [pc, #80]	@ (80071e8 <TIM_Base_SetConfig+0x144>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d00b      	beq.n	80071b4 <TIM_Base_SetConfig+0x110>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a13      	ldr	r2, [pc, #76]	@ (80071ec <TIM_Base_SetConfig+0x148>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d007      	beq.n	80071b4 <TIM_Base_SetConfig+0x110>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a12      	ldr	r2, [pc, #72]	@ (80071f0 <TIM_Base_SetConfig+0x14c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d003      	beq.n	80071b4 <TIM_Base_SetConfig+0x110>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a0d      	ldr	r2, [pc, #52]	@ (80071e4 <TIM_Base_SetConfig+0x140>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d103      	bne.n	80071bc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	691a      	ldr	r2, [r3, #16]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	615a      	str	r2, [r3, #20]
}
 80071c2:	bf00      	nop
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	40012c00 	.word	0x40012c00
 80071d4:	40000400 	.word	0x40000400
 80071d8:	40000800 	.word	0x40000800
 80071dc:	40000c00 	.word	0x40000c00
 80071e0:	40013400 	.word	0x40013400
 80071e4:	40015000 	.word	0x40015000
 80071e8:	40014000 	.word	0x40014000
 80071ec:	40014400 	.word	0x40014400
 80071f0:	40014800 	.word	0x40014800

080071f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	f023 0201 	bic.w	r2, r3, #1
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0303 	bic.w	r3, r3, #3
 800722e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f023 0302 	bic.w	r3, r3, #2
 8007240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	4313      	orrs	r3, r2
 800724a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a30      	ldr	r2, [pc, #192]	@ (8007310 <TIM_OC1_SetConfig+0x11c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d013      	beq.n	800727c <TIM_OC1_SetConfig+0x88>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a2f      	ldr	r2, [pc, #188]	@ (8007314 <TIM_OC1_SetConfig+0x120>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d00f      	beq.n	800727c <TIM_OC1_SetConfig+0x88>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a2e      	ldr	r2, [pc, #184]	@ (8007318 <TIM_OC1_SetConfig+0x124>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d00b      	beq.n	800727c <TIM_OC1_SetConfig+0x88>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a2d      	ldr	r2, [pc, #180]	@ (800731c <TIM_OC1_SetConfig+0x128>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d007      	beq.n	800727c <TIM_OC1_SetConfig+0x88>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a2c      	ldr	r2, [pc, #176]	@ (8007320 <TIM_OC1_SetConfig+0x12c>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d003      	beq.n	800727c <TIM_OC1_SetConfig+0x88>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a2b      	ldr	r2, [pc, #172]	@ (8007324 <TIM_OC1_SetConfig+0x130>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d10c      	bne.n	8007296 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f023 0308 	bic.w	r3, r3, #8
 8007282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	697a      	ldr	r2, [r7, #20]
 800728a:	4313      	orrs	r3, r2
 800728c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f023 0304 	bic.w	r3, r3, #4
 8007294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	4a1d      	ldr	r2, [pc, #116]	@ (8007310 <TIM_OC1_SetConfig+0x11c>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d013      	beq.n	80072c6 <TIM_OC1_SetConfig+0xd2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a1c      	ldr	r2, [pc, #112]	@ (8007314 <TIM_OC1_SetConfig+0x120>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d00f      	beq.n	80072c6 <TIM_OC1_SetConfig+0xd2>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a1b      	ldr	r2, [pc, #108]	@ (8007318 <TIM_OC1_SetConfig+0x124>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d00b      	beq.n	80072c6 <TIM_OC1_SetConfig+0xd2>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a1a      	ldr	r2, [pc, #104]	@ (800731c <TIM_OC1_SetConfig+0x128>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d007      	beq.n	80072c6 <TIM_OC1_SetConfig+0xd2>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a19      	ldr	r2, [pc, #100]	@ (8007320 <TIM_OC1_SetConfig+0x12c>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d003      	beq.n	80072c6 <TIM_OC1_SetConfig+0xd2>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a18      	ldr	r2, [pc, #96]	@ (8007324 <TIM_OC1_SetConfig+0x130>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d111      	bne.n	80072ea <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80072d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	4313      	orrs	r3, r2
 80072de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	621a      	str	r2, [r3, #32]
}
 8007304:	bf00      	nop
 8007306:	371c      	adds	r7, #28
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	40012c00 	.word	0x40012c00
 8007314:	40013400 	.word	0x40013400
 8007318:	40014000 	.word	0x40014000
 800731c:	40014400 	.word	0x40014400
 8007320:	40014800 	.word	0x40014800
 8007324:	40015000 	.word	0x40015000

08007328 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	f023 0210 	bic.w	r2, r3, #16
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007356:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800735a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	021b      	lsls	r3, r3, #8
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	4313      	orrs	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	f023 0320 	bic.w	r3, r3, #32
 8007376:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	011b      	lsls	r3, r3, #4
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	4313      	orrs	r3, r2
 8007382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a2c      	ldr	r2, [pc, #176]	@ (8007438 <TIM_OC2_SetConfig+0x110>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d007      	beq.n	800739c <TIM_OC2_SetConfig+0x74>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a2b      	ldr	r2, [pc, #172]	@ (800743c <TIM_OC2_SetConfig+0x114>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d003      	beq.n	800739c <TIM_OC2_SetConfig+0x74>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a2a      	ldr	r2, [pc, #168]	@ (8007440 <TIM_OC2_SetConfig+0x118>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d10d      	bne.n	80073b8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	011b      	lsls	r3, r3, #4
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a1f      	ldr	r2, [pc, #124]	@ (8007438 <TIM_OC2_SetConfig+0x110>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d013      	beq.n	80073e8 <TIM_OC2_SetConfig+0xc0>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a1e      	ldr	r2, [pc, #120]	@ (800743c <TIM_OC2_SetConfig+0x114>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d00f      	beq.n	80073e8 <TIM_OC2_SetConfig+0xc0>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a1e      	ldr	r2, [pc, #120]	@ (8007444 <TIM_OC2_SetConfig+0x11c>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00b      	beq.n	80073e8 <TIM_OC2_SetConfig+0xc0>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a1d      	ldr	r2, [pc, #116]	@ (8007448 <TIM_OC2_SetConfig+0x120>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d007      	beq.n	80073e8 <TIM_OC2_SetConfig+0xc0>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a1c      	ldr	r2, [pc, #112]	@ (800744c <TIM_OC2_SetConfig+0x124>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d003      	beq.n	80073e8 <TIM_OC2_SetConfig+0xc0>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a17      	ldr	r2, [pc, #92]	@ (8007440 <TIM_OC2_SetConfig+0x118>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d113      	bne.n	8007410 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80073ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80073f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	4313      	orrs	r3, r2
 8007402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	4313      	orrs	r3, r2
 800740e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	685a      	ldr	r2, [r3, #4]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	621a      	str	r2, [r3, #32]
}
 800742a:	bf00      	nop
 800742c:	371c      	adds	r7, #28
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	40012c00 	.word	0x40012c00
 800743c:	40013400 	.word	0x40013400
 8007440:	40015000 	.word	0x40015000
 8007444:	40014000 	.word	0x40014000
 8007448:	40014400 	.word	0x40014400
 800744c:	40014800 	.word	0x40014800

08007450 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007450:	b480      	push	{r7}
 8007452:	b087      	sub	sp, #28
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800747e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f023 0303 	bic.w	r3, r3, #3
 800748a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	4313      	orrs	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800749c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	021b      	lsls	r3, r3, #8
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a2b      	ldr	r2, [pc, #172]	@ (800755c <TIM_OC3_SetConfig+0x10c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d007      	beq.n	80074c2 <TIM_OC3_SetConfig+0x72>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a2a      	ldr	r2, [pc, #168]	@ (8007560 <TIM_OC3_SetConfig+0x110>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d003      	beq.n	80074c2 <TIM_OC3_SetConfig+0x72>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a29      	ldr	r2, [pc, #164]	@ (8007564 <TIM_OC3_SetConfig+0x114>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d10d      	bne.n	80074de <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80074c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	021b      	lsls	r3, r3, #8
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80074dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a1e      	ldr	r2, [pc, #120]	@ (800755c <TIM_OC3_SetConfig+0x10c>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d013      	beq.n	800750e <TIM_OC3_SetConfig+0xbe>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007560 <TIM_OC3_SetConfig+0x110>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d00f      	beq.n	800750e <TIM_OC3_SetConfig+0xbe>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007568 <TIM_OC3_SetConfig+0x118>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d00b      	beq.n	800750e <TIM_OC3_SetConfig+0xbe>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a1c      	ldr	r2, [pc, #112]	@ (800756c <TIM_OC3_SetConfig+0x11c>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d007      	beq.n	800750e <TIM_OC3_SetConfig+0xbe>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a1b      	ldr	r2, [pc, #108]	@ (8007570 <TIM_OC3_SetConfig+0x120>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d003      	beq.n	800750e <TIM_OC3_SetConfig+0xbe>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a16      	ldr	r2, [pc, #88]	@ (8007564 <TIM_OC3_SetConfig+0x114>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d113      	bne.n	8007536 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800751c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	4313      	orrs	r3, r2
 8007528:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	4313      	orrs	r3, r2
 8007534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	621a      	str	r2, [r3, #32]
}
 8007550:	bf00      	nop
 8007552:	371c      	adds	r7, #28
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	40012c00 	.word	0x40012c00
 8007560:	40013400 	.word	0x40013400
 8007564:	40015000 	.word	0x40015000
 8007568:	40014000 	.word	0x40014000
 800756c:	40014400 	.word	0x40014400
 8007570:	40014800 	.word	0x40014800

08007574 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007574:	b480      	push	{r7}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	021b      	lsls	r3, r3, #8
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80075c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	031b      	lsls	r3, r3, #12
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a2c      	ldr	r2, [pc, #176]	@ (8007684 <TIM_OC4_SetConfig+0x110>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d007      	beq.n	80075e8 <TIM_OC4_SetConfig+0x74>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a2b      	ldr	r2, [pc, #172]	@ (8007688 <TIM_OC4_SetConfig+0x114>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d003      	beq.n	80075e8 <TIM_OC4_SetConfig+0x74>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a2a      	ldr	r2, [pc, #168]	@ (800768c <TIM_OC4_SetConfig+0x118>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d10d      	bne.n	8007604 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80075ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	031b      	lsls	r3, r3, #12
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007602:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a1f      	ldr	r2, [pc, #124]	@ (8007684 <TIM_OC4_SetConfig+0x110>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d013      	beq.n	8007634 <TIM_OC4_SetConfig+0xc0>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a1e      	ldr	r2, [pc, #120]	@ (8007688 <TIM_OC4_SetConfig+0x114>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d00f      	beq.n	8007634 <TIM_OC4_SetConfig+0xc0>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a1e      	ldr	r2, [pc, #120]	@ (8007690 <TIM_OC4_SetConfig+0x11c>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d00b      	beq.n	8007634 <TIM_OC4_SetConfig+0xc0>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a1d      	ldr	r2, [pc, #116]	@ (8007694 <TIM_OC4_SetConfig+0x120>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d007      	beq.n	8007634 <TIM_OC4_SetConfig+0xc0>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a1c      	ldr	r2, [pc, #112]	@ (8007698 <TIM_OC4_SetConfig+0x124>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d003      	beq.n	8007634 <TIM_OC4_SetConfig+0xc0>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a17      	ldr	r2, [pc, #92]	@ (800768c <TIM_OC4_SetConfig+0x118>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d113      	bne.n	800765c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800763a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007642:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	019b      	lsls	r3, r3, #6
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	4313      	orrs	r3, r2
 800764e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	019b      	lsls	r3, r3, #6
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	4313      	orrs	r3, r2
 800765a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	621a      	str	r2, [r3, #32]
}
 8007676:	bf00      	nop
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	40012c00 	.word	0x40012c00
 8007688:	40013400 	.word	0x40013400
 800768c:	40015000 	.word	0x40015000
 8007690:	40014000 	.word	0x40014000
 8007694:	40014400 	.word	0x40014400
 8007698:	40014800 	.word	0x40014800

0800769c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80076e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	041b      	lsls	r3, r3, #16
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a19      	ldr	r2, [pc, #100]	@ (8007758 <TIM_OC5_SetConfig+0xbc>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d013      	beq.n	800771e <TIM_OC5_SetConfig+0x82>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a18      	ldr	r2, [pc, #96]	@ (800775c <TIM_OC5_SetConfig+0xc0>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d00f      	beq.n	800771e <TIM_OC5_SetConfig+0x82>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a17      	ldr	r2, [pc, #92]	@ (8007760 <TIM_OC5_SetConfig+0xc4>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d00b      	beq.n	800771e <TIM_OC5_SetConfig+0x82>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a16      	ldr	r2, [pc, #88]	@ (8007764 <TIM_OC5_SetConfig+0xc8>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d007      	beq.n	800771e <TIM_OC5_SetConfig+0x82>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a15      	ldr	r2, [pc, #84]	@ (8007768 <TIM_OC5_SetConfig+0xcc>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d003      	beq.n	800771e <TIM_OC5_SetConfig+0x82>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a14      	ldr	r2, [pc, #80]	@ (800776c <TIM_OC5_SetConfig+0xd0>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d109      	bne.n	8007732 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007724:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	021b      	lsls	r3, r3, #8
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	4313      	orrs	r3, r2
 8007730:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	621a      	str	r2, [r3, #32]
}
 800774c:	bf00      	nop
 800774e:	371c      	adds	r7, #28
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	40012c00 	.word	0x40012c00
 800775c:	40013400 	.word	0x40013400
 8007760:	40014000 	.word	0x40014000
 8007764:	40014400 	.word	0x40014400
 8007768:	40014800 	.word	0x40014800
 800776c:	40015000 	.word	0x40015000

08007770 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007770:	b480      	push	{r7}
 8007772:	b087      	sub	sp, #28
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800779e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	021b      	lsls	r3, r3, #8
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80077b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	051b      	lsls	r3, r3, #20
 80077be:	693a      	ldr	r2, [r7, #16]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a1a      	ldr	r2, [pc, #104]	@ (8007830 <TIM_OC6_SetConfig+0xc0>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d013      	beq.n	80077f4 <TIM_OC6_SetConfig+0x84>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a19      	ldr	r2, [pc, #100]	@ (8007834 <TIM_OC6_SetConfig+0xc4>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d00f      	beq.n	80077f4 <TIM_OC6_SetConfig+0x84>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a18      	ldr	r2, [pc, #96]	@ (8007838 <TIM_OC6_SetConfig+0xc8>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d00b      	beq.n	80077f4 <TIM_OC6_SetConfig+0x84>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a17      	ldr	r2, [pc, #92]	@ (800783c <TIM_OC6_SetConfig+0xcc>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d007      	beq.n	80077f4 <TIM_OC6_SetConfig+0x84>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a16      	ldr	r2, [pc, #88]	@ (8007840 <TIM_OC6_SetConfig+0xd0>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d003      	beq.n	80077f4 <TIM_OC6_SetConfig+0x84>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a15      	ldr	r2, [pc, #84]	@ (8007844 <TIM_OC6_SetConfig+0xd4>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d109      	bne.n	8007808 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80077fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	029b      	lsls	r3, r3, #10
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	4313      	orrs	r3, r2
 8007806:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	621a      	str	r2, [r3, #32]
}
 8007822:	bf00      	nop
 8007824:	371c      	adds	r7, #28
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	40012c00 	.word	0x40012c00
 8007834:	40013400 	.word	0x40013400
 8007838:	40014000 	.word	0x40014000
 800783c:	40014400 	.word	0x40014400
 8007840:	40014800 	.word	0x40014800
 8007844:	40015000 	.word	0x40015000

08007848 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007848:	b480      	push	{r7}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
 8007854:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6a1b      	ldr	r3, [r3, #32]
 800785a:	f023 0201 	bic.w	r2, r3, #1
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6a1b      	ldr	r3, [r3, #32]
 800786c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	4a28      	ldr	r2, [pc, #160]	@ (8007914 <TIM_TI1_SetConfig+0xcc>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d01b      	beq.n	80078ae <TIM_TI1_SetConfig+0x66>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800787c:	d017      	beq.n	80078ae <TIM_TI1_SetConfig+0x66>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	4a25      	ldr	r2, [pc, #148]	@ (8007918 <TIM_TI1_SetConfig+0xd0>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d013      	beq.n	80078ae <TIM_TI1_SetConfig+0x66>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	4a24      	ldr	r2, [pc, #144]	@ (800791c <TIM_TI1_SetConfig+0xd4>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d00f      	beq.n	80078ae <TIM_TI1_SetConfig+0x66>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	4a23      	ldr	r2, [pc, #140]	@ (8007920 <TIM_TI1_SetConfig+0xd8>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d00b      	beq.n	80078ae <TIM_TI1_SetConfig+0x66>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	4a22      	ldr	r2, [pc, #136]	@ (8007924 <TIM_TI1_SetConfig+0xdc>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d007      	beq.n	80078ae <TIM_TI1_SetConfig+0x66>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	4a21      	ldr	r2, [pc, #132]	@ (8007928 <TIM_TI1_SetConfig+0xe0>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d003      	beq.n	80078ae <TIM_TI1_SetConfig+0x66>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	4a20      	ldr	r2, [pc, #128]	@ (800792c <TIM_TI1_SetConfig+0xe4>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d101      	bne.n	80078b2 <TIM_TI1_SetConfig+0x6a>
 80078ae:	2301      	movs	r3, #1
 80078b0:	e000      	b.n	80078b4 <TIM_TI1_SetConfig+0x6c>
 80078b2:	2300      	movs	r3, #0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d008      	beq.n	80078ca <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f023 0303 	bic.w	r3, r3, #3
 80078be:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	617b      	str	r3, [r7, #20]
 80078c8:	e003      	b.n	80078d2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f043 0301 	orr.w	r3, r3, #1
 80078d0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	011b      	lsls	r3, r3, #4
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	f023 030a 	bic.w	r3, r3, #10
 80078ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	f003 030a 	and.w	r3, r3, #10
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	621a      	str	r2, [r3, #32]
}
 8007906:	bf00      	nop
 8007908:	371c      	adds	r7, #28
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	40012c00 	.word	0x40012c00
 8007918:	40000400 	.word	0x40000400
 800791c:	40000800 	.word	0x40000800
 8007920:	40000c00 	.word	0x40000c00
 8007924:	40013400 	.word	0x40013400
 8007928:	40014000 	.word	0x40014000
 800792c:	40015000 	.word	0x40015000

08007930 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007930:	b480      	push	{r7}
 8007932:	b087      	sub	sp, #28
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6a1b      	ldr	r3, [r3, #32]
 8007940:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	f023 0201 	bic.w	r2, r3, #1
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800795a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	011b      	lsls	r3, r3, #4
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	4313      	orrs	r3, r2
 8007964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f023 030a 	bic.w	r3, r3, #10
 800796c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	4313      	orrs	r3, r2
 8007974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	693a      	ldr	r2, [r7, #16]
 800797a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	697a      	ldr	r2, [r7, #20]
 8007980:	621a      	str	r2, [r3, #32]
}
 8007982:	bf00      	nop
 8007984:	371c      	adds	r7, #28
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr

0800798e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800798e:	b480      	push	{r7}
 8007990:	b087      	sub	sp, #28
 8007992:	af00      	add	r7, sp, #0
 8007994:	60f8      	str	r0, [r7, #12]
 8007996:	60b9      	str	r1, [r7, #8]
 8007998:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6a1b      	ldr	r3, [r3, #32]
 800799e:	f023 0210 	bic.w	r2, r3, #16
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80079b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	031b      	lsls	r3, r3, #12
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80079ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	011b      	lsls	r3, r3, #4
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	621a      	str	r2, [r3, #32]
}
 80079e2:	bf00      	nop
 80079e4:	371c      	adds	r7, #28
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b085      	sub	sp, #20
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007a04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a0a:	683a      	ldr	r2, [r7, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	f043 0307 	orr.w	r3, r3, #7
 8007a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	609a      	str	r2, [r3, #8]
}
 8007a1c:	bf00      	nop
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
 8007a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	021a      	lsls	r2, r3, #8
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	431a      	orrs	r2, r3
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	609a      	str	r2, [r3, #8]
}
 8007a5c:	bf00      	nop
 8007a5e:	371c      	adds	r7, #28
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b087      	sub	sp, #28
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	f003 031f 	and.w	r3, r3, #31
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6a1a      	ldr	r2, [r3, #32]
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	43db      	mvns	r3, r3
 8007a8a:	401a      	ands	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6a1a      	ldr	r2, [r3, #32]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f003 031f 	and.w	r3, r3, #31
 8007a9a:	6879      	ldr	r1, [r7, #4]
 8007a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	621a      	str	r2, [r3, #32]
}
 8007aa6:	bf00      	nop
 8007aa8:	371c      	adds	r7, #28
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b08a      	sub	sp, #40	@ 0x28
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e0a0      	b.n	8007c08 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d106      	bne.n	8007ae0 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f7fa fb0c 	bl	80020f8 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	3304      	adds	r3, #4
 8007af0:	4619      	mov	r1, r3
 8007af2:	4610      	mov	r0, r2
 8007af4:	f7ff fad6 	bl	80070a4 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6818      	ldr	r0, [r3, #0]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	6819      	ldr	r1, [r3, #0]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	2203      	movs	r2, #3
 8007b06:	f7ff fe9f 	bl	8007848 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	699a      	ldr	r2, [r3, #24]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f022 020c 	bic.w	r2, r2, #12
 8007b18:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6999      	ldr	r1, [r3, #24]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007b3a:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	6812      	ldr	r2, [r2, #0]
 8007b46:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b4e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689a      	ldr	r2, [r3, #8]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b5e:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	6812      	ldr	r2, [r2, #0]
 8007b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b6e:	f023 0307 	bic.w	r3, r3, #7
 8007b72:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689a      	ldr	r2, [r3, #8]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f042 0204 	orr.w	r2, r2, #4
 8007b82:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8007b84:	2300      	movs	r3, #0
 8007b86:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8007b8c:	2370      	movs	r3, #112	@ 0x70
 8007b8e:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007b90:	2300      	movs	r3, #0
 8007b92:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007b94:	2300      	movs	r3, #0
 8007b96:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f107 020c 	add.w	r2, r7, #12
 8007baa:	4611      	mov	r1, r2
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7ff fbbb 	bl	8007328 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	6812      	ldr	r2, [r2, #0]
 8007bbc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007bc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bc4:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	685a      	ldr	r2, [r3, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8007bd4:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3728      	adds	r7, #40	@ 0x28
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d109      	bne.n	8007c34 <HAL_TIMEx_PWMN_Start+0x24>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	bf14      	ite	ne
 8007c2c:	2301      	movne	r3, #1
 8007c2e:	2300      	moveq	r3, #0
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	e022      	b.n	8007c7a <HAL_TIMEx_PWMN_Start+0x6a>
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2b04      	cmp	r3, #4
 8007c38:	d109      	bne.n	8007c4e <HAL_TIMEx_PWMN_Start+0x3e>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	bf14      	ite	ne
 8007c46:	2301      	movne	r3, #1
 8007c48:	2300      	moveq	r3, #0
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	e015      	b.n	8007c7a <HAL_TIMEx_PWMN_Start+0x6a>
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b08      	cmp	r3, #8
 8007c52:	d109      	bne.n	8007c68 <HAL_TIMEx_PWMN_Start+0x58>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	bf14      	ite	ne
 8007c60:	2301      	movne	r3, #1
 8007c62:	2300      	moveq	r3, #0
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	e008      	b.n	8007c7a <HAL_TIMEx_PWMN_Start+0x6a>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	bf14      	ite	ne
 8007c74:	2301      	movne	r3, #1
 8007c76:	2300      	moveq	r3, #0
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e073      	b.n	8007d6a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d104      	bne.n	8007c92 <HAL_TIMEx_PWMN_Start+0x82>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c90:	e013      	b.n	8007cba <HAL_TIMEx_PWMN_Start+0xaa>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b04      	cmp	r3, #4
 8007c96:	d104      	bne.n	8007ca2 <HAL_TIMEx_PWMN_Start+0x92>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ca0:	e00b      	b.n	8007cba <HAL_TIMEx_PWMN_Start+0xaa>
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2b08      	cmp	r3, #8
 8007ca6:	d104      	bne.n	8007cb2 <HAL_TIMEx_PWMN_Start+0xa2>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2202      	movs	r2, #2
 8007cac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007cb0:	e003      	b.n	8007cba <HAL_TIMEx_PWMN_Start+0xaa>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2204      	movs	r2, #4
 8007cc0:	6839      	ldr	r1, [r7, #0]
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 fa52 	bl	800816c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007cd6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a25      	ldr	r2, [pc, #148]	@ (8007d74 <HAL_TIMEx_PWMN_Start+0x164>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d022      	beq.n	8007d28 <HAL_TIMEx_PWMN_Start+0x118>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cea:	d01d      	beq.n	8007d28 <HAL_TIMEx_PWMN_Start+0x118>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a21      	ldr	r2, [pc, #132]	@ (8007d78 <HAL_TIMEx_PWMN_Start+0x168>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d018      	beq.n	8007d28 <HAL_TIMEx_PWMN_Start+0x118>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a20      	ldr	r2, [pc, #128]	@ (8007d7c <HAL_TIMEx_PWMN_Start+0x16c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d013      	beq.n	8007d28 <HAL_TIMEx_PWMN_Start+0x118>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a1e      	ldr	r2, [pc, #120]	@ (8007d80 <HAL_TIMEx_PWMN_Start+0x170>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d00e      	beq.n	8007d28 <HAL_TIMEx_PWMN_Start+0x118>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8007d84 <HAL_TIMEx_PWMN_Start+0x174>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d009      	beq.n	8007d28 <HAL_TIMEx_PWMN_Start+0x118>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a1b      	ldr	r2, [pc, #108]	@ (8007d88 <HAL_TIMEx_PWMN_Start+0x178>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d004      	beq.n	8007d28 <HAL_TIMEx_PWMN_Start+0x118>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a1a      	ldr	r2, [pc, #104]	@ (8007d8c <HAL_TIMEx_PWMN_Start+0x17c>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d115      	bne.n	8007d54 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689a      	ldr	r2, [r3, #8]
 8007d2e:	4b18      	ldr	r3, [pc, #96]	@ (8007d90 <HAL_TIMEx_PWMN_Start+0x180>)
 8007d30:	4013      	ands	r3, r2
 8007d32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2b06      	cmp	r3, #6
 8007d38:	d015      	beq.n	8007d66 <HAL_TIMEx_PWMN_Start+0x156>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d40:	d011      	beq.n	8007d66 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	681a      	ldr	r2, [r3, #0]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f042 0201 	orr.w	r2, r2, #1
 8007d50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d52:	e008      	b.n	8007d66 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f042 0201 	orr.w	r2, r2, #1
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	e000      	b.n	8007d68 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	40012c00 	.word	0x40012c00
 8007d78:	40000400 	.word	0x40000400
 8007d7c:	40000800 	.word	0x40000800
 8007d80:	40000c00 	.word	0x40000c00
 8007d84:	40013400 	.word	0x40013400
 8007d88:	40014000 	.word	0x40014000
 8007d8c:	40015000 	.word	0x40015000
 8007d90:	00010007 	.word	0x00010007

08007d94 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2200      	movs	r2, #0
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 f9e0 	bl	800816c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6a1a      	ldr	r2, [r3, #32]
 8007db2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007db6:	4013      	ands	r3, r2
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10f      	bne.n	8007ddc <HAL_TIMEx_PWMN_Stop+0x48>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6a1a      	ldr	r2, [r3, #32]
 8007dc2:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d107      	bne.n	8007ddc <HAL_TIMEx_PWMN_Stop+0x48>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007dda:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6a1a      	ldr	r2, [r3, #32]
 8007de2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007de6:	4013      	ands	r3, r2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10f      	bne.n	8007e0c <HAL_TIMEx_PWMN_Stop+0x78>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6a1a      	ldr	r2, [r3, #32]
 8007df2:	f244 4344 	movw	r3, #17476	@ 0x4444
 8007df6:	4013      	ands	r3, r2
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d107      	bne.n	8007e0c <HAL_TIMEx_PWMN_Stop+0x78>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f022 0201 	bic.w	r2, r2, #1
 8007e0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d104      	bne.n	8007e1c <HAL_TIMEx_PWMN_Stop+0x88>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e1a:	e013      	b.n	8007e44 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	2b04      	cmp	r3, #4
 8007e20:	d104      	bne.n	8007e2c <HAL_TIMEx_PWMN_Stop+0x98>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e2a:	e00b      	b.n	8007e44 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2b08      	cmp	r3, #8
 8007e30:	d104      	bne.n	8007e3c <HAL_TIMEx_PWMN_Stop+0xa8>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e3a:	e003      	b.n	8007e44 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
	...

08007e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d101      	bne.n	8007e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e64:	2302      	movs	r3, #2
 8007e66:	e074      	b.n	8007f52 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2202      	movs	r2, #2
 8007e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a34      	ldr	r2, [pc, #208]	@ (8007f60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d009      	beq.n	8007ea6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a33      	ldr	r2, [pc, #204]	@ (8007f64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d004      	beq.n	8007ea6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a31      	ldr	r2, [pc, #196]	@ (8007f68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d108      	bne.n	8007eb8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007eac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ec2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a21      	ldr	r2, [pc, #132]	@ (8007f60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d022      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ee8:	d01d      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a1f      	ldr	r2, [pc, #124]	@ (8007f6c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d018      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f70 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d013      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a1c      	ldr	r2, [pc, #112]	@ (8007f74 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d00e      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a15      	ldr	r2, [pc, #84]	@ (8007f64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d009      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a18      	ldr	r2, [pc, #96]	@ (8007f78 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d004      	beq.n	8007f26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a11      	ldr	r2, [pc, #68]	@ (8007f68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d10c      	bne.n	8007f40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3714      	adds	r7, #20
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	40012c00 	.word	0x40012c00
 8007f64:	40013400 	.word	0x40013400
 8007f68:	40015000 	.word	0x40015000
 8007f6c:	40000400 	.word	0x40000400
 8007f70:	40000800 	.word	0x40000800
 8007f74:	40000c00 	.word	0x40000c00
 8007f78:	40014000 	.word	0x40014000

08007f7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d101      	bne.n	8007f98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f94:	2302      	movs	r3, #2
 8007f96:	e096      	b.n	80080c6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	695b      	ldr	r3, [r3, #20]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ffe:	4313      	orrs	r3, r2
 8008000:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	041b      	lsls	r3, r3, #16
 800800e:	4313      	orrs	r3, r2
 8008010:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a2f      	ldr	r2, [pc, #188]	@ (80080d4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d009      	beq.n	8008030 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a2d      	ldr	r2, [pc, #180]	@ (80080d8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d004      	beq.n	8008030 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a2c      	ldr	r2, [pc, #176]	@ (80080dc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d106      	bne.n	800803e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	4313      	orrs	r3, r2
 800803c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a24      	ldr	r2, [pc, #144]	@ (80080d4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d009      	beq.n	800805c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a22      	ldr	r2, [pc, #136]	@ (80080d8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d004      	beq.n	800805c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a21      	ldr	r2, [pc, #132]	@ (80080dc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d12b      	bne.n	80080b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008066:	051b      	lsls	r3, r3, #20
 8008068:	4313      	orrs	r3, r2
 800806a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	4313      	orrs	r3, r2
 8008078:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008084:	4313      	orrs	r3, r2
 8008086:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a11      	ldr	r2, [pc, #68]	@ (80080d4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d009      	beq.n	80080a6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a10      	ldr	r2, [pc, #64]	@ (80080d8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d004      	beq.n	80080a6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a0e      	ldr	r2, [pc, #56]	@ (80080dc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d106      	bne.n	80080b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b0:	4313      	orrs	r3, r2
 80080b2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	40012c00 	.word	0x40012c00
 80080d8:	40013400 	.word	0x40013400
 80080dc:	40015000 	.word	0x40015000

080080e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800814c:	bf00      	nop
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008160:	bf00      	nop
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800816c:	b480      	push	{r7}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	f003 031f 	and.w	r3, r3, #31
 800817e:	2204      	movs	r2, #4
 8008180:	fa02 f303 	lsl.w	r3, r2, r3
 8008184:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6a1a      	ldr	r2, [r3, #32]
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	43db      	mvns	r3, r3
 800818e:	401a      	ands	r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6a1a      	ldr	r2, [r3, #32]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	f003 031f 	and.w	r3, r3, #31
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	fa01 f303 	lsl.w	r3, r1, r3
 80081a4:	431a      	orrs	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	621a      	str	r2, [r3, #32]
}
 80081aa:	bf00      	nop
 80081ac:	371c      	adds	r7, #28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b082      	sub	sp, #8
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d101      	bne.n	80081c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e042      	b.n	800824e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d106      	bne.n	80081e0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7fa f8ee 	bl	80023bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2224      	movs	r2, #36	@ 0x24
 80081e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f022 0201 	bic.w	r2, r2, #1
 80081f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 fc51 	bl	8008aa0 <UART_SetConfig>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b01      	cmp	r3, #1
 8008202:	d101      	bne.n	8008208 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	e022      	b.n	800824e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800820c:	2b00      	cmp	r3, #0
 800820e:	d002      	beq.n	8008216 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 ff41 	bl	8009098 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008224:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	689a      	ldr	r2, [r3, #8]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008234:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f042 0201 	orr.w	r2, r2, #1
 8008244:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 ffc8 	bl	80091dc <UART_CheckIdleState>
 800824c:	4603      	mov	r3, r0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b08a      	sub	sp, #40	@ 0x28
 800825a:	af02      	add	r7, sp, #8
 800825c:	60f8      	str	r0, [r7, #12]
 800825e:	60b9      	str	r1, [r7, #8]
 8008260:	603b      	str	r3, [r7, #0]
 8008262:	4613      	mov	r3, r2
 8008264:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800826c:	2b20      	cmp	r3, #32
 800826e:	f040 8083 	bne.w	8008378 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d002      	beq.n	800827e <HAL_UART_Transmit+0x28>
 8008278:	88fb      	ldrh	r3, [r7, #6]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d101      	bne.n	8008282 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e07b      	b.n	800837a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008288:	2b01      	cmp	r3, #1
 800828a:	d101      	bne.n	8008290 <HAL_UART_Transmit+0x3a>
 800828c:	2302      	movs	r3, #2
 800828e:	e074      	b.n	800837a <HAL_UART_Transmit+0x124>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2221      	movs	r2, #33	@ 0x21
 80082a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082a8:	f7fa fb0e 	bl	80028c8 <HAL_GetTick>
 80082ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	88fa      	ldrh	r2, [r7, #6]
 80082b2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	88fa      	ldrh	r2, [r7, #6]
 80082ba:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082c6:	d108      	bne.n	80082da <HAL_UART_Transmit+0x84>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d104      	bne.n	80082da <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80082d0:	2300      	movs	r3, #0
 80082d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	61bb      	str	r3, [r7, #24]
 80082d8:	e003      	b.n	80082e2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082de:	2300      	movs	r3, #0
 80082e0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    while (huart->TxXferCount > 0U)
 80082ea:	e02c      	b.n	8008346 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	2200      	movs	r2, #0
 80082f4:	2180      	movs	r1, #128	@ 0x80
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	f000 ffbb 	bl	8009272 <UART_WaitOnFlagUntilTimeout>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e039      	b.n	800837a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10b      	bne.n	8008324 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	461a      	mov	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800831a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	3302      	adds	r3, #2
 8008320:	61bb      	str	r3, [r7, #24]
 8008322:	e007      	b.n	8008334 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	781a      	ldrb	r2, [r3, #0]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	3301      	adds	r3, #1
 8008332:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800833a:	b29b      	uxth	r3, r3
 800833c:	3b01      	subs	r3, #1
 800833e:	b29a      	uxth	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800834c:	b29b      	uxth	r3, r3
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1cc      	bne.n	80082ec <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	2200      	movs	r2, #0
 800835a:	2140      	movs	r1, #64	@ 0x40
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f000 ff88 	bl	8009272 <UART_WaitOnFlagUntilTimeout>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	e006      	b.n	800837a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2220      	movs	r2, #32
 8008370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	e000      	b.n	800837a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008378:	2302      	movs	r3, #2
  }
}
 800837a:	4618      	mov	r0, r3
 800837c:	3720      	adds	r7, #32
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b08a      	sub	sp, #40	@ 0x28
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	4613      	mov	r3, r2
 8008390:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008398:	2b20      	cmp	r3, #32
 800839a:	d142      	bne.n	8008422 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d002      	beq.n	80083a8 <HAL_UART_Receive_IT+0x24>
 80083a2:	88fb      	ldrh	r3, [r7, #6]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d101      	bne.n	80083ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e03b      	b.n	8008424 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d101      	bne.n	80083ba <HAL_UART_Receive_IT+0x36>
 80083b6:	2302      	movs	r3, #2
 80083b8:	e034      	b.n	8008424 <HAL_UART_Receive_IT+0xa0>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2201      	movs	r2, #1
 80083be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a17      	ldr	r2, [pc, #92]	@ (800842c <HAL_UART_Receive_IT+0xa8>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d01f      	beq.n	8008412 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d018      	beq.n	8008412 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	613b      	str	r3, [r7, #16]
   return(result);
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80083f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fe:	623b      	str	r3, [r7, #32]
 8008400:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008402:	69f9      	ldr	r1, [r7, #28]
 8008404:	6a3a      	ldr	r2, [r7, #32]
 8008406:	e841 2300 	strex	r3, r2, [r1]
 800840a:	61bb      	str	r3, [r7, #24]
   return(result);
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e6      	bne.n	80083e0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008412:	88fb      	ldrh	r3, [r7, #6]
 8008414:	461a      	mov	r2, r3
 8008416:	68b9      	ldr	r1, [r7, #8]
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f000 fff3 	bl	8009404 <UART_Start_Receive_IT>
 800841e:	4603      	mov	r3, r0
 8008420:	e000      	b.n	8008424 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008422:	2302      	movs	r3, #2
  }
}
 8008424:	4618      	mov	r0, r3
 8008426:	3728      	adds	r7, #40	@ 0x28
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	40008000 	.word	0x40008000

08008430 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b0ba      	sub	sp, #232	@ 0xe8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	69db      	ldr	r3, [r3, #28]
 800843e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008456:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800845a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800845e:	4013      	ands	r3, r2
 8008460:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008464:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008468:	2b00      	cmp	r3, #0
 800846a:	d11b      	bne.n	80084a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800846c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008470:	f003 0320 	and.w	r3, r3, #32
 8008474:	2b00      	cmp	r3, #0
 8008476:	d015      	beq.n	80084a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800847c:	f003 0320 	and.w	r3, r3, #32
 8008480:	2b00      	cmp	r3, #0
 8008482:	d105      	bne.n	8008490 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008484:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800848c:	2b00      	cmp	r3, #0
 800848e:	d009      	beq.n	80084a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 82d6 	beq.w	8008a46 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	4798      	blx	r3
      }
      return;
 80084a2:	e2d0      	b.n	8008a46 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80084a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f000 811f 	beq.w	80086ec <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80084ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80084b2:	4b8b      	ldr	r3, [pc, #556]	@ (80086e0 <HAL_UART_IRQHandler+0x2b0>)
 80084b4:	4013      	ands	r3, r2
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d106      	bne.n	80084c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80084ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80084be:	4b89      	ldr	r3, [pc, #548]	@ (80086e4 <HAL_UART_IRQHandler+0x2b4>)
 80084c0:	4013      	ands	r3, r2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f000 8112 	beq.w	80086ec <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d011      	beq.n	80084f8 <HAL_UART_IRQHandler+0xc8>
 80084d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00b      	beq.n	80084f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2201      	movs	r2, #1
 80084e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084ee:	f043 0201 	orr.w	r2, r3, #1
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80084f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084fc:	f003 0302 	and.w	r3, r3, #2
 8008500:	2b00      	cmp	r3, #0
 8008502:	d011      	beq.n	8008528 <HAL_UART_IRQHandler+0xf8>
 8008504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008508:	f003 0301 	and.w	r3, r3, #1
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00b      	beq.n	8008528 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2202      	movs	r2, #2
 8008516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800851e:	f043 0204 	orr.w	r2, r3, #4
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800852c:	f003 0304 	and.w	r3, r3, #4
 8008530:	2b00      	cmp	r3, #0
 8008532:	d011      	beq.n	8008558 <HAL_UART_IRQHandler+0x128>
 8008534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008538:	f003 0301 	and.w	r3, r3, #1
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2204      	movs	r2, #4
 8008546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800854e:	f043 0202 	orr.w	r2, r3, #2
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800855c:	f003 0308 	and.w	r3, r3, #8
 8008560:	2b00      	cmp	r3, #0
 8008562:	d017      	beq.n	8008594 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008568:	f003 0320 	and.w	r3, r3, #32
 800856c:	2b00      	cmp	r3, #0
 800856e:	d105      	bne.n	800857c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008570:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008574:	4b5a      	ldr	r3, [pc, #360]	@ (80086e0 <HAL_UART_IRQHandler+0x2b0>)
 8008576:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00b      	beq.n	8008594 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2208      	movs	r2, #8
 8008582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800858a:	f043 0208 	orr.w	r2, r3, #8
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008598:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800859c:	2b00      	cmp	r3, #0
 800859e:	d012      	beq.n	80085c6 <HAL_UART_IRQHandler+0x196>
 80085a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00c      	beq.n	80085c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80085b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085bc:	f043 0220 	orr.w	r2, r3, #32
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 823c 	beq.w	8008a4a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80085d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085d6:	f003 0320 	and.w	r3, r3, #32
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d013      	beq.n	8008606 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80085de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085e2:	f003 0320 	and.w	r3, r3, #32
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d105      	bne.n	80085f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80085ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d007      	beq.n	8008606 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d003      	beq.n	8008606 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800860c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800861a:	2b40      	cmp	r3, #64	@ 0x40
 800861c:	d005      	beq.n	800862a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800861e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008622:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008626:	2b00      	cmp	r3, #0
 8008628:	d04f      	beq.n	80086ca <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f001 f814 	bl	8009658 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800863a:	2b40      	cmp	r3, #64	@ 0x40
 800863c:	d141      	bne.n	80086c2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3308      	adds	r3, #8
 8008644:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008648:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800864c:	e853 3f00 	ldrex	r3, [r3]
 8008650:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008654:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008658:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800865c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3308      	adds	r3, #8
 8008666:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800866a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800866e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008672:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008676:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800867a:	e841 2300 	strex	r3, r2, [r1]
 800867e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1d9      	bne.n	800863e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800868e:	2b00      	cmp	r3, #0
 8008690:	d013      	beq.n	80086ba <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008696:	4a14      	ldr	r2, [pc, #80]	@ (80086e8 <HAL_UART_IRQHandler+0x2b8>)
 8008698:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fc fa7c 	bl	8004b9c <HAL_DMA_Abort_IT>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d017      	beq.n	80086da <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 80086b4:	4610      	mov	r0, r2
 80086b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b8:	e00f      	b.n	80086da <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f9da 	bl	8008a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c0:	e00b      	b.n	80086da <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 f9d6 	bl	8008a74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c8:	e007      	b.n	80086da <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f9d2 	bl	8008a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 80086d8:	e1b7      	b.n	8008a4a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086da:	bf00      	nop
    return;
 80086dc:	e1b5      	b.n	8008a4a <HAL_UART_IRQHandler+0x61a>
 80086de:	bf00      	nop
 80086e0:	10000001 	.word	0x10000001
 80086e4:	04000120 	.word	0x04000120
 80086e8:	08009725 	.word	0x08009725

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	f040 814a 	bne.w	800898a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80086f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086fa:	f003 0310 	and.w	r3, r3, #16
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f000 8143 	beq.w	800898a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008708:	f003 0310 	and.w	r3, r3, #16
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 813c 	beq.w	800898a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2210      	movs	r2, #16
 8008718:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008724:	2b40      	cmp	r3, #64	@ 0x40
 8008726:	f040 80b5 	bne.w	8008894 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008736:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800873a:	2b00      	cmp	r3, #0
 800873c:	f000 8187 	beq.w	8008a4e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800874a:	429a      	cmp	r2, r3
 800874c:	f080 817f 	bcs.w	8008a4e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008756:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 0320 	and.w	r3, r3, #32
 8008766:	2b00      	cmp	r3, #0
 8008768:	f040 8086 	bne.w	8008878 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008774:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008778:	e853 3f00 	ldrex	r3, [r3]
 800877c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008780:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008788:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008796:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800879a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80087a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80087a6:	e841 2300 	strex	r3, r2, [r1]
 80087aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80087ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1da      	bne.n	800876c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	3308      	adds	r3, #8
 80087bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80087c0:	e853 3f00 	ldrex	r3, [r3]
 80087c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80087c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087c8:	f023 0301 	bic.w	r3, r3, #1
 80087cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3308      	adds	r3, #8
 80087d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80087da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80087de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80087e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80087e6:	e841 2300 	strex	r3, r2, [r1]
 80087ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80087ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1e1      	bne.n	80087b6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3308      	adds	r3, #8
 80087f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087fc:	e853 3f00 	ldrex	r3, [r3]
 8008800:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008802:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008808:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	3308      	adds	r3, #8
 8008812:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008816:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008818:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800881c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800881e:	e841 2300 	strex	r3, r2, [r1]
 8008822:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1e3      	bne.n	80087f2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2220      	movs	r2, #32
 800882e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008840:	e853 3f00 	ldrex	r3, [r3]
 8008844:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008848:	f023 0310 	bic.w	r3, r3, #16
 800884c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	461a      	mov	r2, r3
 8008856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800885a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800885c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008860:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008862:	e841 2300 	strex	r3, r2, [r1]
 8008866:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008868:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1e4      	bne.n	8008838 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008872:	4618      	mov	r0, r3
 8008874:	f7fc f939 	bl	8004aea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008884:	b29b      	uxth	r3, r3
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	b29b      	uxth	r3, r3
 800888a:	4619      	mov	r1, r3
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f8fb 	bl	8008a88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008892:	e0dc      	b.n	8008a4e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 80ce 	beq.w	8008a52 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80088b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f000 80c9 	beq.w	8008a52 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c8:	e853 3f00 	ldrex	r3, [r3]
 80088cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	461a      	mov	r2, r3
 80088de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80088e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80088e4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088ea:	e841 2300 	strex	r3, r2, [r1]
 80088ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1e4      	bne.n	80088c0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3308      	adds	r3, #8
 80088fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008900:	e853 3f00 	ldrex	r3, [r3]
 8008904:	623b      	str	r3, [r7, #32]
   return(result);
 8008906:	6a3b      	ldr	r3, [r7, #32]
 8008908:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800890c:	f023 0301 	bic.w	r3, r3, #1
 8008910:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	3308      	adds	r3, #8
 800891a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800891e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008920:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008922:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008926:	e841 2300 	strex	r3, r2, [r1]
 800892a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800892c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1e1      	bne.n	80088f6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2220      	movs	r2, #32
 8008936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	e853 3f00 	ldrex	r3, [r3]
 8008952:	60fb      	str	r3, [r7, #12]
   return(result);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f023 0310 	bic.w	r3, r3, #16
 800895a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	461a      	mov	r2, r3
 8008964:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008968:	61fb      	str	r3, [r7, #28]
 800896a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896c:	69b9      	ldr	r1, [r7, #24]
 800896e:	69fa      	ldr	r2, [r7, #28]
 8008970:	e841 2300 	strex	r3, r2, [r1]
 8008974:	617b      	str	r3, [r7, #20]
   return(result);
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1e4      	bne.n	8008946 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800897c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008980:	4619      	mov	r1, r3
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f880 	bl	8008a88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008988:	e063      	b.n	8008a52 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800898a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800898e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00e      	beq.n	80089b4 <HAL_UART_IRQHandler+0x584>
 8008996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800899a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d008      	beq.n	80089b4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80089aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f001 fb57 	bl	800a060 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089b2:	e051      	b.n	8008a58 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80089b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d014      	beq.n	80089ea <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80089c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d105      	bne.n	80089d8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80089cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d008      	beq.n	80089ea <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d03a      	beq.n	8008a56 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	4798      	blx	r3
    }
    return;
 80089e8:	e035      	b.n	8008a56 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80089ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d009      	beq.n	8008a0a <HAL_UART_IRQHandler+0x5da>
 80089f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d003      	beq.n	8008a0a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fea4 	bl	8009750 <UART_EndTransmit_IT>
    return;
 8008a08:	e026      	b.n	8008a58 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d009      	beq.n	8008a2a <HAL_UART_IRQHandler+0x5fa>
 8008a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a1a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f001 fb30 	bl	800a088 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a28:	e016      	b.n	8008a58 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d010      	beq.n	8008a58 <HAL_UART_IRQHandler+0x628>
 8008a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	da0c      	bge.n	8008a58 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f001 fb18 	bl	800a074 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a44:	e008      	b.n	8008a58 <HAL_UART_IRQHandler+0x628>
      return;
 8008a46:	bf00      	nop
 8008a48:	e006      	b.n	8008a58 <HAL_UART_IRQHandler+0x628>
    return;
 8008a4a:	bf00      	nop
 8008a4c:	e004      	b.n	8008a58 <HAL_UART_IRQHandler+0x628>
      return;
 8008a4e:	bf00      	nop
 8008a50:	e002      	b.n	8008a58 <HAL_UART_IRQHandler+0x628>
      return;
 8008a52:	bf00      	nop
 8008a54:	e000      	b.n	8008a58 <HAL_UART_IRQHandler+0x628>
    return;
 8008a56:	bf00      	nop
  }
}
 8008a58:	37e8      	adds	r7, #232	@ 0xe8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop

08008a60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008a68:	bf00      	nop
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	460b      	mov	r3, r1
 8008a92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008aa4:	b08c      	sub	sp, #48	@ 0x30
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	689a      	ldr	r2, [r3, #8]
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	431a      	orrs	r2, r3
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	431a      	orrs	r2, r3
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	69db      	ldr	r3, [r3, #28]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	4baa      	ldr	r3, [pc, #680]	@ (8008d78 <UART_SetConfig+0x2d8>)
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	6812      	ldr	r2, [r2, #0]
 8008ad6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ad8:	430b      	orrs	r3, r1
 8008ada:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	68da      	ldr	r2, [r3, #12]
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	430a      	orrs	r2, r1
 8008af0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a9f      	ldr	r2, [pc, #636]	@ (8008d7c <UART_SetConfig+0x2dc>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d004      	beq.n	8008b0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008b16:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	6812      	ldr	r2, [r2, #0]
 8008b1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b20:	430b      	orrs	r3, r1
 8008b22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b2a:	f023 010f 	bic.w	r1, r3, #15
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	430a      	orrs	r2, r1
 8008b38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a90      	ldr	r2, [pc, #576]	@ (8008d80 <UART_SetConfig+0x2e0>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d125      	bne.n	8008b90 <UART_SetConfig+0xf0>
 8008b44:	4b8f      	ldr	r3, [pc, #572]	@ (8008d84 <UART_SetConfig+0x2e4>)
 8008b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b4a:	f003 0303 	and.w	r3, r3, #3
 8008b4e:	2b03      	cmp	r3, #3
 8008b50:	d81a      	bhi.n	8008b88 <UART_SetConfig+0xe8>
 8008b52:	a201      	add	r2, pc, #4	@ (adr r2, 8008b58 <UART_SetConfig+0xb8>)
 8008b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b58:	08008b69 	.word	0x08008b69
 8008b5c:	08008b79 	.word	0x08008b79
 8008b60:	08008b71 	.word	0x08008b71
 8008b64:	08008b81 	.word	0x08008b81
 8008b68:	2301      	movs	r3, #1
 8008b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b6e:	e116      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008b70:	2302      	movs	r3, #2
 8008b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b76:	e112      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008b78:	2304      	movs	r3, #4
 8008b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b7e:	e10e      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008b80:	2308      	movs	r3, #8
 8008b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b86:	e10a      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008b88:	2310      	movs	r3, #16
 8008b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008b8e:	e106      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a7c      	ldr	r2, [pc, #496]	@ (8008d88 <UART_SetConfig+0x2e8>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d138      	bne.n	8008c0c <UART_SetConfig+0x16c>
 8008b9a:	4b7a      	ldr	r3, [pc, #488]	@ (8008d84 <UART_SetConfig+0x2e4>)
 8008b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ba0:	f003 030c 	and.w	r3, r3, #12
 8008ba4:	2b0c      	cmp	r3, #12
 8008ba6:	d82d      	bhi.n	8008c04 <UART_SetConfig+0x164>
 8008ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8008bb0 <UART_SetConfig+0x110>)
 8008baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bae:	bf00      	nop
 8008bb0:	08008be5 	.word	0x08008be5
 8008bb4:	08008c05 	.word	0x08008c05
 8008bb8:	08008c05 	.word	0x08008c05
 8008bbc:	08008c05 	.word	0x08008c05
 8008bc0:	08008bf5 	.word	0x08008bf5
 8008bc4:	08008c05 	.word	0x08008c05
 8008bc8:	08008c05 	.word	0x08008c05
 8008bcc:	08008c05 	.word	0x08008c05
 8008bd0:	08008bed 	.word	0x08008bed
 8008bd4:	08008c05 	.word	0x08008c05
 8008bd8:	08008c05 	.word	0x08008c05
 8008bdc:	08008c05 	.word	0x08008c05
 8008be0:	08008bfd 	.word	0x08008bfd
 8008be4:	2300      	movs	r3, #0
 8008be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bea:	e0d8      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008bec:	2302      	movs	r3, #2
 8008bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bf2:	e0d4      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008bf4:	2304      	movs	r3, #4
 8008bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008bfa:	e0d0      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008bfc:	2308      	movs	r3, #8
 8008bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c02:	e0cc      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008c04:	2310      	movs	r3, #16
 8008c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c0a:	e0c8      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a5e      	ldr	r2, [pc, #376]	@ (8008d8c <UART_SetConfig+0x2ec>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d125      	bne.n	8008c62 <UART_SetConfig+0x1c2>
 8008c16:	4b5b      	ldr	r3, [pc, #364]	@ (8008d84 <UART_SetConfig+0x2e4>)
 8008c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c1c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008c20:	2b30      	cmp	r3, #48	@ 0x30
 8008c22:	d016      	beq.n	8008c52 <UART_SetConfig+0x1b2>
 8008c24:	2b30      	cmp	r3, #48	@ 0x30
 8008c26:	d818      	bhi.n	8008c5a <UART_SetConfig+0x1ba>
 8008c28:	2b20      	cmp	r3, #32
 8008c2a:	d00a      	beq.n	8008c42 <UART_SetConfig+0x1a2>
 8008c2c:	2b20      	cmp	r3, #32
 8008c2e:	d814      	bhi.n	8008c5a <UART_SetConfig+0x1ba>
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d002      	beq.n	8008c3a <UART_SetConfig+0x19a>
 8008c34:	2b10      	cmp	r3, #16
 8008c36:	d008      	beq.n	8008c4a <UART_SetConfig+0x1aa>
 8008c38:	e00f      	b.n	8008c5a <UART_SetConfig+0x1ba>
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c40:	e0ad      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008c42:	2302      	movs	r3, #2
 8008c44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c48:	e0a9      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008c4a:	2304      	movs	r3, #4
 8008c4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c50:	e0a5      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008c52:	2308      	movs	r3, #8
 8008c54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c58:	e0a1      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008c5a:	2310      	movs	r3, #16
 8008c5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c60:	e09d      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a4a      	ldr	r2, [pc, #296]	@ (8008d90 <UART_SetConfig+0x2f0>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d125      	bne.n	8008cb8 <UART_SetConfig+0x218>
 8008c6c:	4b45      	ldr	r3, [pc, #276]	@ (8008d84 <UART_SetConfig+0x2e4>)
 8008c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c72:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008c76:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c78:	d016      	beq.n	8008ca8 <UART_SetConfig+0x208>
 8008c7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c7c:	d818      	bhi.n	8008cb0 <UART_SetConfig+0x210>
 8008c7e:	2b80      	cmp	r3, #128	@ 0x80
 8008c80:	d00a      	beq.n	8008c98 <UART_SetConfig+0x1f8>
 8008c82:	2b80      	cmp	r3, #128	@ 0x80
 8008c84:	d814      	bhi.n	8008cb0 <UART_SetConfig+0x210>
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d002      	beq.n	8008c90 <UART_SetConfig+0x1f0>
 8008c8a:	2b40      	cmp	r3, #64	@ 0x40
 8008c8c:	d008      	beq.n	8008ca0 <UART_SetConfig+0x200>
 8008c8e:	e00f      	b.n	8008cb0 <UART_SetConfig+0x210>
 8008c90:	2300      	movs	r3, #0
 8008c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c96:	e082      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008c98:	2302      	movs	r3, #2
 8008c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008c9e:	e07e      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008ca0:	2304      	movs	r3, #4
 8008ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ca6:	e07a      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008ca8:	2308      	movs	r3, #8
 8008caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cae:	e076      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008cb0:	2310      	movs	r3, #16
 8008cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cb6:	e072      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a35      	ldr	r2, [pc, #212]	@ (8008d94 <UART_SetConfig+0x2f4>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d12a      	bne.n	8008d18 <UART_SetConfig+0x278>
 8008cc2:	4b30      	ldr	r3, [pc, #192]	@ (8008d84 <UART_SetConfig+0x2e4>)
 8008cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ccc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008cd0:	d01a      	beq.n	8008d08 <UART_SetConfig+0x268>
 8008cd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008cd6:	d81b      	bhi.n	8008d10 <UART_SetConfig+0x270>
 8008cd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cdc:	d00c      	beq.n	8008cf8 <UART_SetConfig+0x258>
 8008cde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ce2:	d815      	bhi.n	8008d10 <UART_SetConfig+0x270>
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d003      	beq.n	8008cf0 <UART_SetConfig+0x250>
 8008ce8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cec:	d008      	beq.n	8008d00 <UART_SetConfig+0x260>
 8008cee:	e00f      	b.n	8008d10 <UART_SetConfig+0x270>
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cf6:	e052      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cfe:	e04e      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008d00:	2304      	movs	r3, #4
 8008d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d06:	e04a      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008d08:	2308      	movs	r3, #8
 8008d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d0e:	e046      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008d10:	2310      	movs	r3, #16
 8008d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d16:	e042      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a17      	ldr	r2, [pc, #92]	@ (8008d7c <UART_SetConfig+0x2dc>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d13a      	bne.n	8008d98 <UART_SetConfig+0x2f8>
 8008d22:	4b18      	ldr	r3, [pc, #96]	@ (8008d84 <UART_SetConfig+0x2e4>)
 8008d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d28:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008d2c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d30:	d01a      	beq.n	8008d68 <UART_SetConfig+0x2c8>
 8008d32:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008d36:	d81b      	bhi.n	8008d70 <UART_SetConfig+0x2d0>
 8008d38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d3c:	d00c      	beq.n	8008d58 <UART_SetConfig+0x2b8>
 8008d3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d42:	d815      	bhi.n	8008d70 <UART_SetConfig+0x2d0>
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d003      	beq.n	8008d50 <UART_SetConfig+0x2b0>
 8008d48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d4c:	d008      	beq.n	8008d60 <UART_SetConfig+0x2c0>
 8008d4e:	e00f      	b.n	8008d70 <UART_SetConfig+0x2d0>
 8008d50:	2300      	movs	r3, #0
 8008d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d56:	e022      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008d58:	2302      	movs	r3, #2
 8008d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d5e:	e01e      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008d60:	2304      	movs	r3, #4
 8008d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d66:	e01a      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008d68:	2308      	movs	r3, #8
 8008d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d6e:	e016      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008d70:	2310      	movs	r3, #16
 8008d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d76:	e012      	b.n	8008d9e <UART_SetConfig+0x2fe>
 8008d78:	cfff69f3 	.word	0xcfff69f3
 8008d7c:	40008000 	.word	0x40008000
 8008d80:	40013800 	.word	0x40013800
 8008d84:	40021000 	.word	0x40021000
 8008d88:	40004400 	.word	0x40004400
 8008d8c:	40004800 	.word	0x40004800
 8008d90:	40004c00 	.word	0x40004c00
 8008d94:	40005000 	.word	0x40005000
 8008d98:	2310      	movs	r3, #16
 8008d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4aae      	ldr	r2, [pc, #696]	@ (800905c <UART_SetConfig+0x5bc>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	f040 8097 	bne.w	8008ed8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008daa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008dae:	2b08      	cmp	r3, #8
 8008db0:	d823      	bhi.n	8008dfa <UART_SetConfig+0x35a>
 8008db2:	a201      	add	r2, pc, #4	@ (adr r2, 8008db8 <UART_SetConfig+0x318>)
 8008db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db8:	08008ddd 	.word	0x08008ddd
 8008dbc:	08008dfb 	.word	0x08008dfb
 8008dc0:	08008de5 	.word	0x08008de5
 8008dc4:	08008dfb 	.word	0x08008dfb
 8008dc8:	08008deb 	.word	0x08008deb
 8008dcc:	08008dfb 	.word	0x08008dfb
 8008dd0:	08008dfb 	.word	0x08008dfb
 8008dd4:	08008dfb 	.word	0x08008dfb
 8008dd8:	08008df3 	.word	0x08008df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ddc:	f7fc ffc8 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8008de0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008de2:	e010      	b.n	8008e06 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008de4:	4b9e      	ldr	r3, [pc, #632]	@ (8009060 <UART_SetConfig+0x5c0>)
 8008de6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008de8:	e00d      	b.n	8008e06 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008dea:	f7fc ff53 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8008dee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008df0:	e009      	b.n	8008e06 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008df2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008df6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008df8:	e005      	b.n	8008e06 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008e04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 8130 	beq.w	800906e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e12:	4a94      	ldr	r2, [pc, #592]	@ (8009064 <UART_SetConfig+0x5c4>)
 8008e14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e18:	461a      	mov	r2, r3
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e20:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	685a      	ldr	r2, [r3, #4]
 8008e26:	4613      	mov	r3, r2
 8008e28:	005b      	lsls	r3, r3, #1
 8008e2a:	4413      	add	r3, r2
 8008e2c:	69ba      	ldr	r2, [r7, #24]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d305      	bcc.n	8008e3e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e38:	69ba      	ldr	r2, [r7, #24]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d903      	bls.n	8008e46 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008e44:	e113      	b.n	800906e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e48:	2200      	movs	r2, #0
 8008e4a:	60bb      	str	r3, [r7, #8]
 8008e4c:	60fa      	str	r2, [r7, #12]
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e52:	4a84      	ldr	r2, [pc, #528]	@ (8009064 <UART_SetConfig+0x5c4>)
 8008e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	603b      	str	r3, [r7, #0]
 8008e5e:	607a      	str	r2, [r7, #4]
 8008e60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e68:	f7f7 ff46 	bl	8000cf8 <__aeabi_uldivmod>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4610      	mov	r0, r2
 8008e72:	4619      	mov	r1, r3
 8008e74:	f04f 0200 	mov.w	r2, #0
 8008e78:	f04f 0300 	mov.w	r3, #0
 8008e7c:	020b      	lsls	r3, r1, #8
 8008e7e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e82:	0202      	lsls	r2, r0, #8
 8008e84:	6979      	ldr	r1, [r7, #20]
 8008e86:	6849      	ldr	r1, [r1, #4]
 8008e88:	0849      	lsrs	r1, r1, #1
 8008e8a:	2000      	movs	r0, #0
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	4605      	mov	r5, r0
 8008e90:	eb12 0804 	adds.w	r8, r2, r4
 8008e94:	eb43 0905 	adc.w	r9, r3, r5
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	469a      	mov	sl, r3
 8008ea0:	4693      	mov	fp, r2
 8008ea2:	4652      	mov	r2, sl
 8008ea4:	465b      	mov	r3, fp
 8008ea6:	4640      	mov	r0, r8
 8008ea8:	4649      	mov	r1, r9
 8008eaa:	f7f7 ff25 	bl	8000cf8 <__aeabi_uldivmod>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ebc:	d308      	bcc.n	8008ed0 <UART_SetConfig+0x430>
 8008ebe:	6a3b      	ldr	r3, [r7, #32]
 8008ec0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ec4:	d204      	bcs.n	8008ed0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	6a3a      	ldr	r2, [r7, #32]
 8008ecc:	60da      	str	r2, [r3, #12]
 8008ece:	e0ce      	b.n	800906e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008ed6:	e0ca      	b.n	800906e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	69db      	ldr	r3, [r3, #28]
 8008edc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ee0:	d166      	bne.n	8008fb0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008ee2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008ee6:	2b08      	cmp	r3, #8
 8008ee8:	d827      	bhi.n	8008f3a <UART_SetConfig+0x49a>
 8008eea:	a201      	add	r2, pc, #4	@ (adr r2, 8008ef0 <UART_SetConfig+0x450>)
 8008eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef0:	08008f15 	.word	0x08008f15
 8008ef4:	08008f1d 	.word	0x08008f1d
 8008ef8:	08008f25 	.word	0x08008f25
 8008efc:	08008f3b 	.word	0x08008f3b
 8008f00:	08008f2b 	.word	0x08008f2b
 8008f04:	08008f3b 	.word	0x08008f3b
 8008f08:	08008f3b 	.word	0x08008f3b
 8008f0c:	08008f3b 	.word	0x08008f3b
 8008f10:	08008f33 	.word	0x08008f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f14:	f7fc ff2c 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8008f18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f1a:	e014      	b.n	8008f46 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f1c:	f7fc ff3e 	bl	8005d9c <HAL_RCC_GetPCLK2Freq>
 8008f20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f22:	e010      	b.n	8008f46 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f24:	4b4e      	ldr	r3, [pc, #312]	@ (8009060 <UART_SetConfig+0x5c0>)
 8008f26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f28:	e00d      	b.n	8008f46 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f2a:	f7fc feb3 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8008f2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f30:	e009      	b.n	8008f46 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f38:	e005      	b.n	8008f46 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008f44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f000 8090 	beq.w	800906e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f52:	4a44      	ldr	r2, [pc, #272]	@ (8009064 <UART_SetConfig+0x5c4>)
 8008f54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f60:	005a      	lsls	r2, r3, #1
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	085b      	lsrs	r3, r3, #1
 8008f68:	441a      	add	r2, r3
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f74:	6a3b      	ldr	r3, [r7, #32]
 8008f76:	2b0f      	cmp	r3, #15
 8008f78:	d916      	bls.n	8008fa8 <UART_SetConfig+0x508>
 8008f7a:	6a3b      	ldr	r3, [r7, #32]
 8008f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f80:	d212      	bcs.n	8008fa8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f82:	6a3b      	ldr	r3, [r7, #32]
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	f023 030f 	bic.w	r3, r3, #15
 8008f8a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	085b      	lsrs	r3, r3, #1
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	f003 0307 	and.w	r3, r3, #7
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	8bfb      	ldrh	r3, [r7, #30]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	8bfa      	ldrh	r2, [r7, #30]
 8008fa4:	60da      	str	r2, [r3, #12]
 8008fa6:	e062      	b.n	800906e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008fae:	e05e      	b.n	800906e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008fb0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008fb4:	2b08      	cmp	r3, #8
 8008fb6:	d828      	bhi.n	800900a <UART_SetConfig+0x56a>
 8008fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8008fc0 <UART_SetConfig+0x520>)
 8008fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fbe:	bf00      	nop
 8008fc0:	08008fe5 	.word	0x08008fe5
 8008fc4:	08008fed 	.word	0x08008fed
 8008fc8:	08008ff5 	.word	0x08008ff5
 8008fcc:	0800900b 	.word	0x0800900b
 8008fd0:	08008ffb 	.word	0x08008ffb
 8008fd4:	0800900b 	.word	0x0800900b
 8008fd8:	0800900b 	.word	0x0800900b
 8008fdc:	0800900b 	.word	0x0800900b
 8008fe0:	08009003 	.word	0x08009003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fe4:	f7fc fec4 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8008fe8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fea:	e014      	b.n	8009016 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fec:	f7fc fed6 	bl	8005d9c <HAL_RCC_GetPCLK2Freq>
 8008ff0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ff2:	e010      	b.n	8009016 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8009060 <UART_SetConfig+0x5c0>)
 8008ff6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ff8:	e00d      	b.n	8009016 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ffa:	f7fc fe4b 	bl	8005c94 <HAL_RCC_GetSysClockFreq>
 8008ffe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009000:	e009      	b.n	8009016 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009002:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009006:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009008:	e005      	b.n	8009016 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800900a:	2300      	movs	r3, #0
 800900c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009014:	bf00      	nop
    }

    if (pclk != 0U)
 8009016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009018:	2b00      	cmp	r3, #0
 800901a:	d028      	beq.n	800906e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009020:	4a10      	ldr	r2, [pc, #64]	@ (8009064 <UART_SetConfig+0x5c4>)
 8009022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009026:	461a      	mov	r2, r3
 8009028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902a:	fbb3 f2f2 	udiv	r2, r3, r2
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	085b      	lsrs	r3, r3, #1
 8009034:	441a      	add	r2, r3
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	fbb2 f3f3 	udiv	r3, r2, r3
 800903e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	2b0f      	cmp	r3, #15
 8009044:	d910      	bls.n	8009068 <UART_SetConfig+0x5c8>
 8009046:	6a3b      	ldr	r3, [r7, #32]
 8009048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800904c:	d20c      	bcs.n	8009068 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800904e:	6a3b      	ldr	r3, [r7, #32]
 8009050:	b29a      	uxth	r2, r3
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	60da      	str	r2, [r3, #12]
 8009058:	e009      	b.n	800906e <UART_SetConfig+0x5ce>
 800905a:	bf00      	nop
 800905c:	40008000 	.word	0x40008000
 8009060:	00f42400 	.word	0x00f42400
 8009064:	0800eb5c 	.word	0x0800eb5c
      }
      else
      {
        ret = HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	2201      	movs	r2, #1
 8009072:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	2201      	movs	r2, #1
 800907a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2200      	movs	r2, #0
 8009082:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	2200      	movs	r2, #0
 8009088:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 800908a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800908e:	4618      	mov	r0, r3
 8009090:	3730      	adds	r7, #48	@ 0x30
 8009092:	46bd      	mov	sp, r7
 8009094:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009098 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00a      	beq.n	80090c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	430a      	orrs	r2, r1
 80090c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c6:	f003 0302 	and.w	r3, r3, #2
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00a      	beq.n	80090e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	430a      	orrs	r2, r1
 80090e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090e8:	f003 0304 	and.w	r3, r3, #4
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00a      	beq.n	8009106 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	430a      	orrs	r2, r1
 8009104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800910a:	f003 0308 	and.w	r3, r3, #8
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00a      	beq.n	8009128 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	430a      	orrs	r2, r1
 8009126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800912c:	f003 0310 	and.w	r3, r3, #16
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00a      	beq.n	800914a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	430a      	orrs	r2, r1
 8009148:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800914e:	f003 0320 	and.w	r3, r3, #32
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00a      	beq.n	800916c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	430a      	orrs	r2, r1
 800916a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009174:	2b00      	cmp	r3, #0
 8009176:	d01a      	beq.n	80091ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	430a      	orrs	r2, r1
 800918c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009192:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009196:	d10a      	bne.n	80091ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	430a      	orrs	r2, r1
 80091ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00a      	beq.n	80091d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	430a      	orrs	r2, r1
 80091ce:	605a      	str	r2, [r3, #4]
  }
}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af02      	add	r7, sp, #8
 80091e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80091ec:	f7f9 fb6c 	bl	80028c8 <HAL_GetTick>
 80091f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 0308 	and.w	r3, r3, #8
 80091fc:	2b08      	cmp	r3, #8
 80091fe:	d10e      	bne.n	800921e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009200:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2200      	movs	r2, #0
 800920a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f82f 	bl	8009272 <UART_WaitOnFlagUntilTimeout>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d001      	beq.n	800921e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e025      	b.n	800926a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0304 	and.w	r3, r3, #4
 8009228:	2b04      	cmp	r3, #4
 800922a:	d10e      	bne.n	800924a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800922c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 f819 	bl	8009272 <UART_WaitOnFlagUntilTimeout>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009246:	2303      	movs	r3, #3
 8009248:	e00f      	b.n	800926a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2220      	movs	r2, #32
 800924e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2220      	movs	r2, #32
 8009256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b09c      	sub	sp, #112	@ 0x70
 8009276:	af00      	add	r7, sp, #0
 8009278:	60f8      	str	r0, [r7, #12]
 800927a:	60b9      	str	r1, [r7, #8]
 800927c:	603b      	str	r3, [r7, #0]
 800927e:	4613      	mov	r3, r2
 8009280:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009282:	e0a9      	b.n	80093d8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009284:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009286:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800928a:	f000 80a5 	beq.w	80093d8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800928e:	f7f9 fb1b 	bl	80028c8 <HAL_GetTick>
 8009292:	4602      	mov	r2, r0
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	1ad3      	subs	r3, r2, r3
 8009298:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800929a:	429a      	cmp	r2, r3
 800929c:	d302      	bcc.n	80092a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800929e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d140      	bne.n	8009326 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092ac:	e853 3f00 	ldrex	r3, [r3]
 80092b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80092b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092b4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80092b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	461a      	mov	r2, r3
 80092c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80092c4:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80092c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80092ca:	e841 2300 	strex	r3, r2, [r1]
 80092ce:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80092d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1e6      	bne.n	80092a4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	3308      	adds	r3, #8
 80092dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092e0:	e853 3f00 	ldrex	r3, [r3]
 80092e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e8:	f023 0301 	bic.w	r3, r3, #1
 80092ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	3308      	adds	r3, #8
 80092f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80092f6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80092f8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80092fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092fe:	e841 2300 	strex	r3, r2, [r1]
 8009302:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009304:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1e5      	bne.n	80092d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2220      	movs	r2, #32
 800930e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2220      	movs	r2, #32
 8009316:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8009322:	2303      	movs	r3, #3
 8009324:	e069      	b.n	80093fa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0304 	and.w	r3, r3, #4
 8009330:	2b00      	cmp	r3, #0
 8009332:	d051      	beq.n	80093d8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	69db      	ldr	r3, [r3, #28]
 800933a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800933e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009342:	d149      	bne.n	80093d8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800934c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009356:	e853 3f00 	ldrex	r3, [r3]
 800935a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800935c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009362:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	461a      	mov	r2, r3
 800936a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800936c:	637b      	str	r3, [r7, #52]	@ 0x34
 800936e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009370:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009372:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009374:	e841 2300 	strex	r3, r2, [r1]
 8009378:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800937a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1e6      	bne.n	800934e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3308      	adds	r3, #8
 8009386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	e853 3f00 	ldrex	r3, [r3]
 800938e:	613b      	str	r3, [r7, #16]
   return(result);
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	f023 0301 	bic.w	r3, r3, #1
 8009396:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3308      	adds	r3, #8
 800939e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80093a0:	623a      	str	r2, [r7, #32]
 80093a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a4:	69f9      	ldr	r1, [r7, #28]
 80093a6:	6a3a      	ldr	r2, [r7, #32]
 80093a8:	e841 2300 	strex	r3, r2, [r1]
 80093ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1e5      	bne.n	8009380 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2220      	movs	r2, #32
 80093b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2220      	movs	r2, #32
 80093c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2220      	movs	r2, #32
 80093c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80093d4:	2303      	movs	r3, #3
 80093d6:	e010      	b.n	80093fa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	69da      	ldr	r2, [r3, #28]
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	4013      	ands	r3, r2
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	bf0c      	ite	eq
 80093e8:	2301      	moveq	r3, #1
 80093ea:	2300      	movne	r3, #0
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	461a      	mov	r2, r3
 80093f0:	79fb      	ldrb	r3, [r7, #7]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	f43f af46 	beq.w	8009284 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3770      	adds	r7, #112	@ 0x70
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
	...

08009404 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009404:	b480      	push	{r7}
 8009406:	b0a3      	sub	sp, #140	@ 0x8c
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	4613      	mov	r3, r2
 8009410:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	68ba      	ldr	r2, [r7, #8]
 8009416:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	88fa      	ldrh	r2, [r7, #6]
 800941c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	88fa      	ldrh	r2, [r7, #6]
 8009424:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2200      	movs	r2, #0
 800942c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	689b      	ldr	r3, [r3, #8]
 8009432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009436:	d10e      	bne.n	8009456 <UART_Start_Receive_IT+0x52>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	691b      	ldr	r3, [r3, #16]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d105      	bne.n	800944c <UART_Start_Receive_IT+0x48>
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009446:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800944a:	e02d      	b.n	80094a8 <UART_Start_Receive_IT+0xa4>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	22ff      	movs	r2, #255	@ 0xff
 8009450:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009454:	e028      	b.n	80094a8 <UART_Start_Receive_IT+0xa4>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d10d      	bne.n	800947a <UART_Start_Receive_IT+0x76>
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d104      	bne.n	8009470 <UART_Start_Receive_IT+0x6c>
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	22ff      	movs	r2, #255	@ 0xff
 800946a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800946e:	e01b      	b.n	80094a8 <UART_Start_Receive_IT+0xa4>
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	227f      	movs	r2, #127	@ 0x7f
 8009474:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009478:	e016      	b.n	80094a8 <UART_Start_Receive_IT+0xa4>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009482:	d10d      	bne.n	80094a0 <UART_Start_Receive_IT+0x9c>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d104      	bne.n	8009496 <UART_Start_Receive_IT+0x92>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	227f      	movs	r2, #127	@ 0x7f
 8009490:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009494:	e008      	b.n	80094a8 <UART_Start_Receive_IT+0xa4>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	223f      	movs	r2, #63	@ 0x3f
 800949a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800949e:	e003      	b.n	80094a8 <UART_Start_Receive_IT+0xa4>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2222      	movs	r2, #34	@ 0x22
 80094b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	3308      	adds	r3, #8
 80094be:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094c2:	e853 3f00 	ldrex	r3, [r3]
 80094c6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80094c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094ca:	f043 0301 	orr.w	r3, r3, #1
 80094ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	3308      	adds	r3, #8
 80094d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80094dc:	673a      	str	r2, [r7, #112]	@ 0x70
 80094de:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80094e2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80094e4:	e841 2300 	strex	r3, r2, [r1]
 80094e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80094ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1e3      	bne.n	80094b8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094f8:	d153      	bne.n	80095a2 <UART_Start_Receive_IT+0x19e>
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009500:	88fa      	ldrh	r2, [r7, #6]
 8009502:	429a      	cmp	r2, r3
 8009504:	d34d      	bcc.n	80095a2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800950e:	d107      	bne.n	8009520 <UART_Start_Receive_IT+0x11c>
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d103      	bne.n	8009520 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	4a4b      	ldr	r2, [pc, #300]	@ (8009648 <UART_Start_Receive_IT+0x244>)
 800951c:	671a      	str	r2, [r3, #112]	@ 0x70
 800951e:	e002      	b.n	8009526 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	4a4a      	ldr	r2, [pc, #296]	@ (800964c <UART_Start_Receive_IT+0x248>)
 8009524:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d01a      	beq.n	800956c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800953e:	e853 3f00 	ldrex	r3, [r3]
 8009542:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009544:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800954a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009558:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800955a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800955e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009560:	e841 2300 	strex	r3, r2, [r1]
 8009564:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1e4      	bne.n	8009536 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	3308      	adds	r3, #8
 8009572:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009576:	e853 3f00 	ldrex	r3, [r3]
 800957a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800957c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800957e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009582:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	3308      	adds	r3, #8
 800958a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800958c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800958e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009590:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009592:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009594:	e841 2300 	strex	r3, r2, [r1]
 8009598:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800959a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800959c:	2b00      	cmp	r3, #0
 800959e:	d1e5      	bne.n	800956c <UART_Start_Receive_IT+0x168>
 80095a0:	e04a      	b.n	8009638 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095aa:	d107      	bne.n	80095bc <UART_Start_Receive_IT+0x1b8>
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d103      	bne.n	80095bc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	4a26      	ldr	r2, [pc, #152]	@ (8009650 <UART_Start_Receive_IT+0x24c>)
 80095b8:	671a      	str	r2, [r3, #112]	@ 0x70
 80095ba:	e002      	b.n	80095c2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	4a25      	ldr	r2, [pc, #148]	@ (8009654 <UART_Start_Receive_IT+0x250>)
 80095c0:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d019      	beq.n	8009606 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095da:	e853 3f00 	ldrex	r3, [r3]
 80095de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80095e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	461a      	mov	r2, r3
 80095ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80095f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80095f2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80095f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095f8:	e841 2300 	strex	r3, r2, [r1]
 80095fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80095fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1e6      	bne.n	80095d2 <UART_Start_Receive_IT+0x1ce>
 8009604:	e018      	b.n	8009638 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	e853 3f00 	ldrex	r3, [r3]
 8009612:	613b      	str	r3, [r7, #16]
   return(result);
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	f043 0320 	orr.w	r3, r3, #32
 800961a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	461a      	mov	r2, r3
 8009622:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009624:	623b      	str	r3, [r7, #32]
 8009626:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009628:	69f9      	ldr	r1, [r7, #28]
 800962a:	6a3a      	ldr	r2, [r7, #32]
 800962c:	e841 2300 	strex	r3, r2, [r1]
 8009630:	61bb      	str	r3, [r7, #24]
   return(result);
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1e6      	bne.n	8009606 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	378c      	adds	r7, #140	@ 0x8c
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	08009d61 	.word	0x08009d61
 800964c:	08009a69 	.word	0x08009a69
 8009650:	08009907 	.word	0x08009907
 8009654:	080097a7 	.word	0x080097a7

08009658 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009658:	b480      	push	{r7}
 800965a:	b095      	sub	sp, #84	@ 0x54
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009668:	e853 3f00 	ldrex	r3, [r3]
 800966c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800966e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009670:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009674:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	461a      	mov	r2, r3
 800967c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800967e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009680:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009682:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009684:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009686:	e841 2300 	strex	r3, r2, [r1]
 800968a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800968c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1e6      	bne.n	8009660 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	3308      	adds	r3, #8
 8009698:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969a:	6a3b      	ldr	r3, [r7, #32]
 800969c:	e853 3f00 	ldrex	r3, [r3]
 80096a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096a8:	f023 0301 	bic.w	r3, r3, #1
 80096ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	3308      	adds	r3, #8
 80096b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80096b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80096b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096be:	e841 2300 	strex	r3, r2, [r1]
 80096c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d1e3      	bne.n	8009692 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d118      	bne.n	8009704 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	e853 3f00 	ldrex	r3, [r3]
 80096de:	60bb      	str	r3, [r7, #8]
   return(result);
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	f023 0310 	bic.w	r3, r3, #16
 80096e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	461a      	mov	r2, r3
 80096ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096f0:	61bb      	str	r3, [r7, #24]
 80096f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f4:	6979      	ldr	r1, [r7, #20]
 80096f6:	69ba      	ldr	r2, [r7, #24]
 80096f8:	e841 2300 	strex	r3, r2, [r1]
 80096fc:	613b      	str	r3, [r7, #16]
   return(result);
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1e6      	bne.n	80096d2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2220      	movs	r2, #32
 8009708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8009718:	bf00      	nop
 800971a:	3754      	adds	r7, #84	@ 0x54
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009730:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f7ff f996 	bl	8008a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009748:	bf00      	nop
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b088      	sub	sp, #32
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	e853 3f00 	ldrex	r3, [r3]
 8009764:	60bb      	str	r3, [r7, #8]
   return(result);
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800976c:	61fb      	str	r3, [r7, #28]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	461a      	mov	r2, r3
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	61bb      	str	r3, [r7, #24]
 8009778:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977a:	6979      	ldr	r1, [r7, #20]
 800977c:	69ba      	ldr	r2, [r7, #24]
 800977e:	e841 2300 	strex	r3, r2, [r1]
 8009782:	613b      	str	r3, [r7, #16]
   return(result);
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1e6      	bne.n	8009758 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2220      	movs	r2, #32
 800978e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f7ff f961 	bl	8008a60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800979e:	bf00      	nop
 80097a0:	3720      	adds	r7, #32
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b096      	sub	sp, #88	@ 0x58
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80097b4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097be:	2b22      	cmp	r3, #34	@ 0x22
 80097c0:	f040 8095 	bne.w	80098ee <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ca:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80097ce:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80097d2:	b2d9      	uxtb	r1, r3
 80097d4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097de:	400a      	ands	r2, r1
 80097e0:	b2d2      	uxtb	r2, r2
 80097e2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097e8:	1c5a      	adds	r2, r3, #1
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	3b01      	subs	r3, #1
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009806:	b29b      	uxth	r3, r3
 8009808:	2b00      	cmp	r3, #0
 800980a:	d178      	bne.n	80098fe <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009814:	e853 3f00 	ldrex	r3, [r3]
 8009818:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800981a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800981c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009820:	653b      	str	r3, [r7, #80]	@ 0x50
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	461a      	mov	r2, r3
 8009828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800982a:	647b      	str	r3, [r7, #68]	@ 0x44
 800982c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009830:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009832:	e841 2300 	strex	r3, r2, [r1]
 8009836:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1e6      	bne.n	800980c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3308      	adds	r3, #8
 8009844:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009848:	e853 3f00 	ldrex	r3, [r3]
 800984c:	623b      	str	r3, [r7, #32]
   return(result);
 800984e:	6a3b      	ldr	r3, [r7, #32]
 8009850:	f023 0301 	bic.w	r3, r3, #1
 8009854:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	3308      	adds	r3, #8
 800985c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800985e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009860:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009862:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009866:	e841 2300 	strex	r3, r2, [r1]
 800986a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800986c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1e5      	bne.n	800983e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2220      	movs	r2, #32
 8009876:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009884:	2b01      	cmp	r3, #1
 8009886:	d12e      	bne.n	80098e6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	e853 3f00 	ldrex	r3, [r3]
 800989a:	60fb      	str	r3, [r7, #12]
   return(result);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f023 0310 	bic.w	r3, r3, #16
 80098a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	461a      	mov	r2, r3
 80098aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098ac:	61fb      	str	r3, [r7, #28]
 80098ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b0:	69b9      	ldr	r1, [r7, #24]
 80098b2:	69fa      	ldr	r2, [r7, #28]
 80098b4:	e841 2300 	strex	r3, r2, [r1]
 80098b8:	617b      	str	r3, [r7, #20]
   return(result);
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1e6      	bne.n	800988e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	69db      	ldr	r3, [r3, #28]
 80098c6:	f003 0310 	and.w	r3, r3, #16
 80098ca:	2b10      	cmp	r3, #16
 80098cc:	d103      	bne.n	80098d6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2210      	movs	r2, #16
 80098d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80098dc:	4619      	mov	r1, r3
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7ff f8d2 	bl	8008a88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098e4:	e00b      	b.n	80098fe <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f7f8 ff84 	bl	80027f4 <HAL_UART_RxCpltCallback>
}
 80098ec:	e007      	b.n	80098fe <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	699a      	ldr	r2, [r3, #24]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f042 0208 	orr.w	r2, r2, #8
 80098fc:	619a      	str	r2, [r3, #24]
}
 80098fe:	bf00      	nop
 8009900:	3758      	adds	r7, #88	@ 0x58
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b096      	sub	sp, #88	@ 0x58
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009914:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800991e:	2b22      	cmp	r3, #34	@ 0x22
 8009920:	f040 8095 	bne.w	8009a4e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800992a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009932:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009934:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8009938:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800993c:	4013      	ands	r3, r2
 800993e:	b29a      	uxth	r2, r3
 8009940:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009942:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009948:	1c9a      	adds	r2, r3, #2
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009954:	b29b      	uxth	r3, r3
 8009956:	3b01      	subs	r3, #1
 8009958:	b29a      	uxth	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009966:	b29b      	uxth	r3, r3
 8009968:	2b00      	cmp	r3, #0
 800996a:	d178      	bne.n	8009a5e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009974:	e853 3f00 	ldrex	r3, [r3]
 8009978:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800997a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009980:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	461a      	mov	r2, r3
 8009988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800998a:	643b      	str	r3, [r7, #64]	@ 0x40
 800998c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009990:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009992:	e841 2300 	strex	r3, r2, [r1]
 8009996:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1e6      	bne.n	800996c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	3308      	adds	r3, #8
 80099a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a6:	6a3b      	ldr	r3, [r7, #32]
 80099a8:	e853 3f00 	ldrex	r3, [r3]
 80099ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	f023 0301 	bic.w	r3, r3, #1
 80099b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	3308      	adds	r3, #8
 80099bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099c6:	e841 2300 	strex	r3, r2, [r1]
 80099ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1e5      	bne.n	800999e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2220      	movs	r2, #32
 80099d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d12e      	bne.n	8009a46 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2200      	movs	r2, #0
 80099ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	e853 3f00 	ldrex	r3, [r3]
 80099fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	f023 0310 	bic.w	r3, r3, #16
 8009a02:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	461a      	mov	r2, r3
 8009a0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a0c:	61bb      	str	r3, [r7, #24]
 8009a0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a10:	6979      	ldr	r1, [r7, #20]
 8009a12:	69ba      	ldr	r2, [r7, #24]
 8009a14:	e841 2300 	strex	r3, r2, [r1]
 8009a18:	613b      	str	r3, [r7, #16]
   return(result);
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1e6      	bne.n	80099ee <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	69db      	ldr	r3, [r3, #28]
 8009a26:	f003 0310 	and.w	r3, r3, #16
 8009a2a:	2b10      	cmp	r3, #16
 8009a2c:	d103      	bne.n	8009a36 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2210      	movs	r2, #16
 8009a34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7ff f822 	bl	8008a88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a44:	e00b      	b.n	8009a5e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f7f8 fed4 	bl	80027f4 <HAL_UART_RxCpltCallback>
}
 8009a4c:	e007      	b.n	8009a5e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	699a      	ldr	r2, [r3, #24]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f042 0208 	orr.w	r2, r2, #8
 8009a5c:	619a      	str	r2, [r3, #24]
}
 8009a5e:	bf00      	nop
 8009a60:	3758      	adds	r7, #88	@ 0x58
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
	...

08009a68 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b0a6      	sub	sp, #152	@ 0x98
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a76:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	69db      	ldr	r3, [r3, #28]
 8009a80:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a9e:	2b22      	cmp	r3, #34	@ 0x22
 8009aa0:	f040 814f 	bne.w	8009d42 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009aaa:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009aae:	e0f6      	b.n	8009c9e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab6:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009aba:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8009abe:	b2d9      	uxtb	r1, r3
 8009ac0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8009ac4:	b2da      	uxtb	r2, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009aca:	400a      	ands	r2, r1
 8009acc:	b2d2      	uxtb	r2, r2
 8009ace:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ad4:	1c5a      	adds	r2, r3, #1
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	69db      	ldr	r3, [r3, #28]
 8009af2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009af6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009afa:	f003 0307 	and.w	r3, r3, #7
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d053      	beq.n	8009baa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009b06:	f003 0301 	and.w	r3, r3, #1
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d011      	beq.n	8009b32 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009b0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00b      	beq.n	8009b32 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b28:	f043 0201 	orr.w	r2, r3, #1
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b32:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009b36:	f003 0302 	and.w	r3, r3, #2
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d011      	beq.n	8009b62 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009b3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b42:	f003 0301 	and.w	r3, r3, #1
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00b      	beq.n	8009b62 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2202      	movs	r2, #2
 8009b50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b58:	f043 0204 	orr.w	r2, r3, #4
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009b66:	f003 0304 	and.w	r3, r3, #4
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d011      	beq.n	8009b92 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009b6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b72:	f003 0301 	and.w	r3, r3, #1
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00b      	beq.n	8009b92 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2204      	movs	r2, #4
 8009b80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b88:	f043 0202 	orr.w	r2, r3, #2
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d006      	beq.n	8009baa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7fe ff69 	bl	8008a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d173      	bne.n	8009c9e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bbe:	e853 3f00 	ldrex	r3, [r3]
 8009bc2:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009bc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009bc6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009bca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009bd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009bda:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bdc:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009bde:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009be0:	e841 2300 	strex	r3, r2, [r1]
 8009be4:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009be6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d1e4      	bne.n	8009bb6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bf6:	e853 3f00 	ldrex	r3, [r3]
 8009bfa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009bfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c02:	f023 0301 	bic.w	r3, r3, #1
 8009c06:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	3308      	adds	r3, #8
 8009c0e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009c10:	657a      	str	r2, [r7, #84]	@ 0x54
 8009c12:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c14:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009c16:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009c18:	e841 2300 	strex	r3, r2, [r1]
 8009c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009c1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1e3      	bne.n	8009bec <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2220      	movs	r2, #32
 8009c28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d12e      	bne.n	8009c98 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c48:	e853 3f00 	ldrex	r3, [r3]
 8009c4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c50:	f023 0310 	bic.w	r3, r3, #16
 8009c54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c60:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c66:	e841 2300 	strex	r3, r2, [r1]
 8009c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1e6      	bne.n	8009c40 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	69db      	ldr	r3, [r3, #28]
 8009c78:	f003 0310 	and.w	r3, r3, #16
 8009c7c:	2b10      	cmp	r3, #16
 8009c7e:	d103      	bne.n	8009c88 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2210      	movs	r2, #16
 8009c86:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f7fe fef9 	bl	8008a88 <HAL_UARTEx_RxEventCallback>
 8009c96:	e002      	b.n	8009c9e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f7f8 fdab 	bl	80027f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c9e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d006      	beq.n	8009cb4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009ca6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009caa:	f003 0320 	and.w	r3, r3, #32
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	f47f aefe 	bne.w	8009ab0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009cba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009cbe:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d045      	beq.n	8009d52 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009ccc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d23e      	bcs.n	8009d52 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	3308      	adds	r3, #8
 8009cda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cdc:	6a3b      	ldr	r3, [r7, #32]
 8009cde:	e853 3f00 	ldrex	r3, [r3]
 8009ce2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009cea:	673b      	str	r3, [r7, #112]	@ 0x70
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	3308      	adds	r3, #8
 8009cf2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009cf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cfc:	e841 2300 	strex	r3, r2, [r1]
 8009d00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d1e5      	bne.n	8009cd4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a14      	ldr	r2, [pc, #80]	@ (8009d5c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009d0c:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	e853 3f00 	ldrex	r3, [r3]
 8009d1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	f043 0320 	orr.w	r3, r3, #32
 8009d22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	461a      	mov	r2, r3
 8009d2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d2c:	61bb      	str	r3, [r7, #24]
 8009d2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d30:	6979      	ldr	r1, [r7, #20]
 8009d32:	69ba      	ldr	r2, [r7, #24]
 8009d34:	e841 2300 	strex	r3, r2, [r1]
 8009d38:	613b      	str	r3, [r7, #16]
   return(result);
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d1e6      	bne.n	8009d0e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d40:	e007      	b.n	8009d52 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	699a      	ldr	r2, [r3, #24]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f042 0208 	orr.w	r2, r2, #8
 8009d50:	619a      	str	r2, [r3, #24]
}
 8009d52:	bf00      	nop
 8009d54:	3798      	adds	r7, #152	@ 0x98
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	080097a7 	.word	0x080097a7

08009d60 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b0a8      	sub	sp, #160	@ 0xa0
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009d6e:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	69db      	ldr	r3, [r3, #28]
 8009d78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d96:	2b22      	cmp	r3, #34	@ 0x22
 8009d98:	f040 8153 	bne.w	800a042 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009da2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009da6:	e0fa      	b.n	8009f9e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dae:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009db6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009dba:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8009dbe:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009dca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dd0:	1c9a      	adds	r2, r3, #2
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	3b01      	subs	r3, #1
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	69db      	ldr	r3, [r3, #28]
 8009dee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009df2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009df6:	f003 0307 	and.w	r3, r3, #7
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d053      	beq.n	8009ea6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009dfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e02:	f003 0301 	and.w	r3, r3, #1
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d011      	beq.n	8009e2e <UART_RxISR_16BIT_FIFOEN+0xce>
 8009e0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00b      	beq.n	8009e2e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e24:	f043 0201 	orr.w	r2, r3, #1
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e32:	f003 0302 	and.w	r3, r3, #2
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d011      	beq.n	8009e5e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009e3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e3e:	f003 0301 	and.w	r3, r3, #1
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00b      	beq.n	8009e5e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e54:	f043 0204 	orr.w	r2, r3, #4
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e62:	f003 0304 	and.w	r3, r3, #4
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d011      	beq.n	8009e8e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009e6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00b      	beq.n	8009e8e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2204      	movs	r2, #4
 8009e7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e84:	f043 0202 	orr.w	r2, r3, #2
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d006      	beq.n	8009ea6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f7fe fdeb 	bl	8008a74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d175      	bne.n	8009f9e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009eba:	e853 3f00 	ldrex	r3, [r3]
 8009ebe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009ec0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ec2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ec6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	461a      	mov	r2, r3
 8009ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ed4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009ed6:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009eda:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009edc:	e841 2300 	strex	r3, r2, [r1]
 8009ee0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009ee2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d1e4      	bne.n	8009eb2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	3308      	adds	r3, #8
 8009eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ef2:	e853 3f00 	ldrex	r3, [r3]
 8009ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ef8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009efa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009efe:	f023 0301 	bic.w	r3, r3, #1
 8009f02:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	3308      	adds	r3, #8
 8009f0c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009f10:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009f12:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f18:	e841 2300 	strex	r3, r2, [r1]
 8009f1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d1e1      	bne.n	8009ee8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2220      	movs	r2, #32
 8009f28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d12e      	bne.n	8009f98 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f48:	e853 3f00 	ldrex	r3, [r3]
 8009f4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f50:	f023 0310 	bic.w	r3, r3, #16
 8009f54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f60:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f66:	e841 2300 	strex	r3, r2, [r1]
 8009f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1e6      	bne.n	8009f40 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	69db      	ldr	r3, [r3, #28]
 8009f78:	f003 0310 	and.w	r3, r3, #16
 8009f7c:	2b10      	cmp	r3, #16
 8009f7e:	d103      	bne.n	8009f88 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	2210      	movs	r2, #16
 8009f86:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f8e:	4619      	mov	r1, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7fe fd79 	bl	8008a88 <HAL_UARTEx_RxEventCallback>
 8009f96:	e002      	b.n	8009f9e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f7f8 fc2b 	bl	80027f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f9e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d006      	beq.n	8009fb4 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009fa6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009faa:	f003 0320 	and.w	r3, r3, #32
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f47f aefa 	bne.w	8009da8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009fba:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009fbe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d045      	beq.n	800a052 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009fcc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d23e      	bcs.n	800a052 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	3308      	adds	r3, #8
 8009fda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fde:	e853 3f00 	ldrex	r3, [r3]
 8009fe2:	623b      	str	r3, [r7, #32]
   return(result);
 8009fe4:	6a3b      	ldr	r3, [r7, #32]
 8009fe6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009fea:	677b      	str	r3, [r7, #116]	@ 0x74
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	3308      	adds	r3, #8
 8009ff2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009ff4:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ffc:	e841 2300 	strex	r3, r2, [r1]
 800a000:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1e5      	bne.n	8009fd4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	4a14      	ldr	r2, [pc, #80]	@ (800a05c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a00c:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	e853 3f00 	ldrex	r3, [r3]
 800a01a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f043 0320 	orr.w	r3, r3, #32
 800a022:	673b      	str	r3, [r7, #112]	@ 0x70
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	461a      	mov	r2, r3
 800a02a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a02c:	61fb      	str	r3, [r7, #28]
 800a02e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a030:	69b9      	ldr	r1, [r7, #24]
 800a032:	69fa      	ldr	r2, [r7, #28]
 800a034:	e841 2300 	strex	r3, r2, [r1]
 800a038:	617b      	str	r3, [r7, #20]
   return(result);
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d1e6      	bne.n	800a00e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a040:	e007      	b.n	800a052 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	699a      	ldr	r2, [r3, #24]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f042 0208 	orr.w	r2, r2, #8
 800a050:	619a      	str	r2, [r3, #24]
}
 800a052:	bf00      	nop
 800a054:	37a0      	adds	r7, #160	@ 0xa0
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	08009907 	.word	0x08009907

0800a060 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a068:	bf00      	nop
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a07c:	bf00      	nop
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a090:	bf00      	nop
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d101      	bne.n	800a0b2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a0ae:	2302      	movs	r3, #2
 800a0b0:	e027      	b.n	800a102 <HAL_UARTEx_DisableFifoMode+0x66>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2224      	movs	r2, #36	@ 0x24
 800a0be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f022 0201 	bic.w	r2, r2, #1
 800a0d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a0e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2220      	movs	r2, #32
 800a0f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3714      	adds	r7, #20
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr

0800a10e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b084      	sub	sp, #16
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
 800a116:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d101      	bne.n	800a126 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a122:	2302      	movs	r3, #2
 800a124:	e02d      	b.n	800a182 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2224      	movs	r2, #36	@ 0x24
 800a132:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f022 0201 	bic.w	r2, r2, #1
 800a14c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	689b      	ldr	r3, [r3, #8]
 800a154:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	683a      	ldr	r2, [r7, #0]
 800a15e:	430a      	orrs	r2, r1
 800a160:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f850 	bl	800a208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2220      	movs	r2, #32
 800a174:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b084      	sub	sp, #16
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
 800a192:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d101      	bne.n	800a1a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a19e:	2302      	movs	r3, #2
 800a1a0:	e02d      	b.n	800a1fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2224      	movs	r2, #36	@ 0x24
 800a1ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f022 0201 	bic.w	r2, r2, #1
 800a1c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	683a      	ldr	r2, [r7, #0]
 800a1da:	430a      	orrs	r2, r1
 800a1dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f812 	bl	800a208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	68fa      	ldr	r2, [r7, #12]
 800a1ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2220      	movs	r2, #32
 800a1f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
	...

0800a208 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a208:	b480      	push	{r7}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a214:	2b00      	cmp	r3, #0
 800a216:	d108      	bne.n	800a22a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a228:	e031      	b.n	800a28e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a22a:	2308      	movs	r3, #8
 800a22c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a22e:	2308      	movs	r3, #8
 800a230:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	0e5b      	lsrs	r3, r3, #25
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	f003 0307 	and.w	r3, r3, #7
 800a240:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	0f5b      	lsrs	r3, r3, #29
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	f003 0307 	and.w	r3, r3, #7
 800a250:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a252:	7bbb      	ldrb	r3, [r7, #14]
 800a254:	7b3a      	ldrb	r2, [r7, #12]
 800a256:	4911      	ldr	r1, [pc, #68]	@ (800a29c <UARTEx_SetNbDataToProcess+0x94>)
 800a258:	5c8a      	ldrb	r2, [r1, r2]
 800a25a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a25e:	7b3a      	ldrb	r2, [r7, #12]
 800a260:	490f      	ldr	r1, [pc, #60]	@ (800a2a0 <UARTEx_SetNbDataToProcess+0x98>)
 800a262:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a264:	fb93 f3f2 	sdiv	r3, r3, r2
 800a268:	b29a      	uxth	r2, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a270:	7bfb      	ldrb	r3, [r7, #15]
 800a272:	7b7a      	ldrb	r2, [r7, #13]
 800a274:	4909      	ldr	r1, [pc, #36]	@ (800a29c <UARTEx_SetNbDataToProcess+0x94>)
 800a276:	5c8a      	ldrb	r2, [r1, r2]
 800a278:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a27c:	7b7a      	ldrb	r2, [r7, #13]
 800a27e:	4908      	ldr	r1, [pc, #32]	@ (800a2a0 <UARTEx_SetNbDataToProcess+0x98>)
 800a280:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a282:	fb93 f3f2 	sdiv	r3, r3, r2
 800a286:	b29a      	uxth	r2, r3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a28e:	bf00      	nop
 800a290:	3714      	adds	r7, #20
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	0800eb74 	.word	0x0800eb74
 800a2a0:	0800eb7c 	.word	0x0800eb7c

0800a2a4 <atof>:
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	f000 be0d 	b.w	800aec4 <strtod>

0800a2aa <atoi>:
 800a2aa:	220a      	movs	r2, #10
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	f000 be91 	b.w	800afd4 <strtol>

0800a2b2 <sulp>:
 800a2b2:	b570      	push	{r4, r5, r6, lr}
 800a2b4:	4604      	mov	r4, r0
 800a2b6:	460d      	mov	r5, r1
 800a2b8:	ec45 4b10 	vmov	d0, r4, r5
 800a2bc:	4616      	mov	r6, r2
 800a2be:	f003 fd6b 	bl	800dd98 <__ulp>
 800a2c2:	ec51 0b10 	vmov	r0, r1, d0
 800a2c6:	b17e      	cbz	r6, 800a2e8 <sulp+0x36>
 800a2c8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a2cc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	dd09      	ble.n	800a2e8 <sulp+0x36>
 800a2d4:	051b      	lsls	r3, r3, #20
 800a2d6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a2da:	2400      	movs	r4, #0
 800a2dc:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a2e0:	4622      	mov	r2, r4
 800a2e2:	462b      	mov	r3, r5
 800a2e4:	f7f6 f9c0 	bl	8000668 <__aeabi_dmul>
 800a2e8:	ec41 0b10 	vmov	d0, r0, r1
 800a2ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a2f0 <_strtod_l>:
 800a2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f4:	b09f      	sub	sp, #124	@ 0x7c
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	921a      	str	r2, [sp, #104]	@ 0x68
 800a2fe:	9005      	str	r0, [sp, #20]
 800a300:	f04f 0a00 	mov.w	sl, #0
 800a304:	f04f 0b00 	mov.w	fp, #0
 800a308:	460a      	mov	r2, r1
 800a30a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a30c:	7811      	ldrb	r1, [r2, #0]
 800a30e:	292b      	cmp	r1, #43	@ 0x2b
 800a310:	d04a      	beq.n	800a3a8 <_strtod_l+0xb8>
 800a312:	d838      	bhi.n	800a386 <_strtod_l+0x96>
 800a314:	290d      	cmp	r1, #13
 800a316:	d832      	bhi.n	800a37e <_strtod_l+0x8e>
 800a318:	2908      	cmp	r1, #8
 800a31a:	d832      	bhi.n	800a382 <_strtod_l+0x92>
 800a31c:	2900      	cmp	r1, #0
 800a31e:	d03b      	beq.n	800a398 <_strtod_l+0xa8>
 800a320:	2200      	movs	r2, #0
 800a322:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a324:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a326:	782a      	ldrb	r2, [r5, #0]
 800a328:	2a30      	cmp	r2, #48	@ 0x30
 800a32a:	f040 80b3 	bne.w	800a494 <_strtod_l+0x1a4>
 800a32e:	786a      	ldrb	r2, [r5, #1]
 800a330:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a334:	2a58      	cmp	r2, #88	@ 0x58
 800a336:	d16e      	bne.n	800a416 <_strtod_l+0x126>
 800a338:	9302      	str	r3, [sp, #8]
 800a33a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a33c:	9301      	str	r3, [sp, #4]
 800a33e:	ab1a      	add	r3, sp, #104	@ 0x68
 800a340:	9300      	str	r3, [sp, #0]
 800a342:	4a8e      	ldr	r2, [pc, #568]	@ (800a57c <_strtod_l+0x28c>)
 800a344:	9805      	ldr	r0, [sp, #20]
 800a346:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a348:	a919      	add	r1, sp, #100	@ 0x64
 800a34a:	f002 fe17 	bl	800cf7c <__gethex>
 800a34e:	f010 060f 	ands.w	r6, r0, #15
 800a352:	4604      	mov	r4, r0
 800a354:	d005      	beq.n	800a362 <_strtod_l+0x72>
 800a356:	2e06      	cmp	r6, #6
 800a358:	d128      	bne.n	800a3ac <_strtod_l+0xbc>
 800a35a:	3501      	adds	r5, #1
 800a35c:	2300      	movs	r3, #0
 800a35e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a360:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a362:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a364:	2b00      	cmp	r3, #0
 800a366:	f040 858e 	bne.w	800ae86 <_strtod_l+0xb96>
 800a36a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a36c:	b1cb      	cbz	r3, 800a3a2 <_strtod_l+0xb2>
 800a36e:	4652      	mov	r2, sl
 800a370:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a374:	ec43 2b10 	vmov	d0, r2, r3
 800a378:	b01f      	add	sp, #124	@ 0x7c
 800a37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a37e:	2920      	cmp	r1, #32
 800a380:	d1ce      	bne.n	800a320 <_strtod_l+0x30>
 800a382:	3201      	adds	r2, #1
 800a384:	e7c1      	b.n	800a30a <_strtod_l+0x1a>
 800a386:	292d      	cmp	r1, #45	@ 0x2d
 800a388:	d1ca      	bne.n	800a320 <_strtod_l+0x30>
 800a38a:	2101      	movs	r1, #1
 800a38c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a38e:	1c51      	adds	r1, r2, #1
 800a390:	9119      	str	r1, [sp, #100]	@ 0x64
 800a392:	7852      	ldrb	r2, [r2, #1]
 800a394:	2a00      	cmp	r2, #0
 800a396:	d1c5      	bne.n	800a324 <_strtod_l+0x34>
 800a398:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a39a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f040 8570 	bne.w	800ae82 <_strtod_l+0xb92>
 800a3a2:	4652      	mov	r2, sl
 800a3a4:	465b      	mov	r3, fp
 800a3a6:	e7e5      	b.n	800a374 <_strtod_l+0x84>
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	e7ef      	b.n	800a38c <_strtod_l+0x9c>
 800a3ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a3ae:	b13a      	cbz	r2, 800a3c0 <_strtod_l+0xd0>
 800a3b0:	2135      	movs	r1, #53	@ 0x35
 800a3b2:	a81c      	add	r0, sp, #112	@ 0x70
 800a3b4:	f003 fdea 	bl	800df8c <__copybits>
 800a3b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3ba:	9805      	ldr	r0, [sp, #20]
 800a3bc:	f003 f9b8 	bl	800d730 <_Bfree>
 800a3c0:	3e01      	subs	r6, #1
 800a3c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a3c4:	2e04      	cmp	r6, #4
 800a3c6:	d806      	bhi.n	800a3d6 <_strtod_l+0xe6>
 800a3c8:	e8df f006 	tbb	[pc, r6]
 800a3cc:	201d0314 	.word	0x201d0314
 800a3d0:	14          	.byte	0x14
 800a3d1:	00          	.byte	0x00
 800a3d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a3d6:	05e1      	lsls	r1, r4, #23
 800a3d8:	bf48      	it	mi
 800a3da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a3de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a3e2:	0d1b      	lsrs	r3, r3, #20
 800a3e4:	051b      	lsls	r3, r3, #20
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1bb      	bne.n	800a362 <_strtod_l+0x72>
 800a3ea:	f001 fe61 	bl	800c0b0 <__errno>
 800a3ee:	2322      	movs	r3, #34	@ 0x22
 800a3f0:	6003      	str	r3, [r0, #0]
 800a3f2:	e7b6      	b.n	800a362 <_strtod_l+0x72>
 800a3f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a3f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a3fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a400:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a404:	e7e7      	b.n	800a3d6 <_strtod_l+0xe6>
 800a406:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a584 <_strtod_l+0x294>
 800a40a:	e7e4      	b.n	800a3d6 <_strtod_l+0xe6>
 800a40c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a410:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a414:	e7df      	b.n	800a3d6 <_strtod_l+0xe6>
 800a416:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a418:	1c5a      	adds	r2, r3, #1
 800a41a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a41c:	785b      	ldrb	r3, [r3, #1]
 800a41e:	2b30      	cmp	r3, #48	@ 0x30
 800a420:	d0f9      	beq.n	800a416 <_strtod_l+0x126>
 800a422:	2b00      	cmp	r3, #0
 800a424:	d09d      	beq.n	800a362 <_strtod_l+0x72>
 800a426:	2301      	movs	r3, #1
 800a428:	9309      	str	r3, [sp, #36]	@ 0x24
 800a42a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a42c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a42e:	2300      	movs	r3, #0
 800a430:	9308      	str	r3, [sp, #32]
 800a432:	930a      	str	r3, [sp, #40]	@ 0x28
 800a434:	461f      	mov	r7, r3
 800a436:	220a      	movs	r2, #10
 800a438:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a43a:	7805      	ldrb	r5, [r0, #0]
 800a43c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a440:	b2d9      	uxtb	r1, r3
 800a442:	2909      	cmp	r1, #9
 800a444:	d928      	bls.n	800a498 <_strtod_l+0x1a8>
 800a446:	494e      	ldr	r1, [pc, #312]	@ (800a580 <_strtod_l+0x290>)
 800a448:	2201      	movs	r2, #1
 800a44a:	f001 fd78 	bl	800bf3e <strncmp>
 800a44e:	2800      	cmp	r0, #0
 800a450:	d032      	beq.n	800a4b8 <_strtod_l+0x1c8>
 800a452:	2000      	movs	r0, #0
 800a454:	462a      	mov	r2, r5
 800a456:	4681      	mov	r9, r0
 800a458:	463d      	mov	r5, r7
 800a45a:	4603      	mov	r3, r0
 800a45c:	2a65      	cmp	r2, #101	@ 0x65
 800a45e:	d001      	beq.n	800a464 <_strtod_l+0x174>
 800a460:	2a45      	cmp	r2, #69	@ 0x45
 800a462:	d114      	bne.n	800a48e <_strtod_l+0x19e>
 800a464:	b91d      	cbnz	r5, 800a46e <_strtod_l+0x17e>
 800a466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a468:	4302      	orrs	r2, r0
 800a46a:	d095      	beq.n	800a398 <_strtod_l+0xa8>
 800a46c:	2500      	movs	r5, #0
 800a46e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a470:	1c62      	adds	r2, r4, #1
 800a472:	9219      	str	r2, [sp, #100]	@ 0x64
 800a474:	7862      	ldrb	r2, [r4, #1]
 800a476:	2a2b      	cmp	r2, #43	@ 0x2b
 800a478:	d077      	beq.n	800a56a <_strtod_l+0x27a>
 800a47a:	2a2d      	cmp	r2, #45	@ 0x2d
 800a47c:	d07b      	beq.n	800a576 <_strtod_l+0x286>
 800a47e:	f04f 0c00 	mov.w	ip, #0
 800a482:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a486:	2909      	cmp	r1, #9
 800a488:	f240 8082 	bls.w	800a590 <_strtod_l+0x2a0>
 800a48c:	9419      	str	r4, [sp, #100]	@ 0x64
 800a48e:	f04f 0800 	mov.w	r8, #0
 800a492:	e0a2      	b.n	800a5da <_strtod_l+0x2ea>
 800a494:	2300      	movs	r3, #0
 800a496:	e7c7      	b.n	800a428 <_strtod_l+0x138>
 800a498:	2f08      	cmp	r7, #8
 800a49a:	bfd5      	itete	le
 800a49c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a49e:	9908      	ldrgt	r1, [sp, #32]
 800a4a0:	fb02 3301 	mlale	r3, r2, r1, r3
 800a4a4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a4a8:	f100 0001 	add.w	r0, r0, #1
 800a4ac:	bfd4      	ite	le
 800a4ae:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a4b0:	9308      	strgt	r3, [sp, #32]
 800a4b2:	3701      	adds	r7, #1
 800a4b4:	9019      	str	r0, [sp, #100]	@ 0x64
 800a4b6:	e7bf      	b.n	800a438 <_strtod_l+0x148>
 800a4b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4ba:	1c5a      	adds	r2, r3, #1
 800a4bc:	9219      	str	r2, [sp, #100]	@ 0x64
 800a4be:	785a      	ldrb	r2, [r3, #1]
 800a4c0:	b37f      	cbz	r7, 800a522 <_strtod_l+0x232>
 800a4c2:	4681      	mov	r9, r0
 800a4c4:	463d      	mov	r5, r7
 800a4c6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a4ca:	2b09      	cmp	r3, #9
 800a4cc:	d912      	bls.n	800a4f4 <_strtod_l+0x204>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e7c4      	b.n	800a45c <_strtod_l+0x16c>
 800a4d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4d4:	1c5a      	adds	r2, r3, #1
 800a4d6:	9219      	str	r2, [sp, #100]	@ 0x64
 800a4d8:	785a      	ldrb	r2, [r3, #1]
 800a4da:	3001      	adds	r0, #1
 800a4dc:	2a30      	cmp	r2, #48	@ 0x30
 800a4de:	d0f8      	beq.n	800a4d2 <_strtod_l+0x1e2>
 800a4e0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a4e4:	2b08      	cmp	r3, #8
 800a4e6:	f200 84d3 	bhi.w	800ae90 <_strtod_l+0xba0>
 800a4ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4ec:	930c      	str	r3, [sp, #48]	@ 0x30
 800a4ee:	4681      	mov	r9, r0
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	4605      	mov	r5, r0
 800a4f4:	3a30      	subs	r2, #48	@ 0x30
 800a4f6:	f100 0301 	add.w	r3, r0, #1
 800a4fa:	d02a      	beq.n	800a552 <_strtod_l+0x262>
 800a4fc:	4499      	add	r9, r3
 800a4fe:	eb00 0c05 	add.w	ip, r0, r5
 800a502:	462b      	mov	r3, r5
 800a504:	210a      	movs	r1, #10
 800a506:	4563      	cmp	r3, ip
 800a508:	d10d      	bne.n	800a526 <_strtod_l+0x236>
 800a50a:	1c69      	adds	r1, r5, #1
 800a50c:	4401      	add	r1, r0
 800a50e:	4428      	add	r0, r5
 800a510:	2808      	cmp	r0, #8
 800a512:	dc16      	bgt.n	800a542 <_strtod_l+0x252>
 800a514:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a516:	230a      	movs	r3, #10
 800a518:	fb03 2300 	mla	r3, r3, r0, r2
 800a51c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a51e:	2300      	movs	r3, #0
 800a520:	e018      	b.n	800a554 <_strtod_l+0x264>
 800a522:	4638      	mov	r0, r7
 800a524:	e7da      	b.n	800a4dc <_strtod_l+0x1ec>
 800a526:	2b08      	cmp	r3, #8
 800a528:	f103 0301 	add.w	r3, r3, #1
 800a52c:	dc03      	bgt.n	800a536 <_strtod_l+0x246>
 800a52e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a530:	434e      	muls	r6, r1
 800a532:	960a      	str	r6, [sp, #40]	@ 0x28
 800a534:	e7e7      	b.n	800a506 <_strtod_l+0x216>
 800a536:	2b10      	cmp	r3, #16
 800a538:	bfde      	ittt	le
 800a53a:	9e08      	ldrle	r6, [sp, #32]
 800a53c:	434e      	mulle	r6, r1
 800a53e:	9608      	strle	r6, [sp, #32]
 800a540:	e7e1      	b.n	800a506 <_strtod_l+0x216>
 800a542:	280f      	cmp	r0, #15
 800a544:	dceb      	bgt.n	800a51e <_strtod_l+0x22e>
 800a546:	9808      	ldr	r0, [sp, #32]
 800a548:	230a      	movs	r3, #10
 800a54a:	fb03 2300 	mla	r3, r3, r0, r2
 800a54e:	9308      	str	r3, [sp, #32]
 800a550:	e7e5      	b.n	800a51e <_strtod_l+0x22e>
 800a552:	4629      	mov	r1, r5
 800a554:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a556:	1c50      	adds	r0, r2, #1
 800a558:	9019      	str	r0, [sp, #100]	@ 0x64
 800a55a:	7852      	ldrb	r2, [r2, #1]
 800a55c:	4618      	mov	r0, r3
 800a55e:	460d      	mov	r5, r1
 800a560:	e7b1      	b.n	800a4c6 <_strtod_l+0x1d6>
 800a562:	f04f 0900 	mov.w	r9, #0
 800a566:	2301      	movs	r3, #1
 800a568:	e77d      	b.n	800a466 <_strtod_l+0x176>
 800a56a:	f04f 0c00 	mov.w	ip, #0
 800a56e:	1ca2      	adds	r2, r4, #2
 800a570:	9219      	str	r2, [sp, #100]	@ 0x64
 800a572:	78a2      	ldrb	r2, [r4, #2]
 800a574:	e785      	b.n	800a482 <_strtod_l+0x192>
 800a576:	f04f 0c01 	mov.w	ip, #1
 800a57a:	e7f8      	b.n	800a56e <_strtod_l+0x27e>
 800a57c:	0800eb9c 	.word	0x0800eb9c
 800a580:	0800eb84 	.word	0x0800eb84
 800a584:	7ff00000 	.word	0x7ff00000
 800a588:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a58a:	1c51      	adds	r1, r2, #1
 800a58c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a58e:	7852      	ldrb	r2, [r2, #1]
 800a590:	2a30      	cmp	r2, #48	@ 0x30
 800a592:	d0f9      	beq.n	800a588 <_strtod_l+0x298>
 800a594:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a598:	2908      	cmp	r1, #8
 800a59a:	f63f af78 	bhi.w	800a48e <_strtod_l+0x19e>
 800a59e:	3a30      	subs	r2, #48	@ 0x30
 800a5a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a5a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a5a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a5a6:	f04f 080a 	mov.w	r8, #10
 800a5aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a5ac:	1c56      	adds	r6, r2, #1
 800a5ae:	9619      	str	r6, [sp, #100]	@ 0x64
 800a5b0:	7852      	ldrb	r2, [r2, #1]
 800a5b2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a5b6:	f1be 0f09 	cmp.w	lr, #9
 800a5ba:	d939      	bls.n	800a630 <_strtod_l+0x340>
 800a5bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a5be:	1a76      	subs	r6, r6, r1
 800a5c0:	2e08      	cmp	r6, #8
 800a5c2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a5c6:	dc03      	bgt.n	800a5d0 <_strtod_l+0x2e0>
 800a5c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a5ca:	4588      	cmp	r8, r1
 800a5cc:	bfa8      	it	ge
 800a5ce:	4688      	movge	r8, r1
 800a5d0:	f1bc 0f00 	cmp.w	ip, #0
 800a5d4:	d001      	beq.n	800a5da <_strtod_l+0x2ea>
 800a5d6:	f1c8 0800 	rsb	r8, r8, #0
 800a5da:	2d00      	cmp	r5, #0
 800a5dc:	d14e      	bne.n	800a67c <_strtod_l+0x38c>
 800a5de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a5e0:	4308      	orrs	r0, r1
 800a5e2:	f47f aebe 	bne.w	800a362 <_strtod_l+0x72>
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f47f aed6 	bne.w	800a398 <_strtod_l+0xa8>
 800a5ec:	2a69      	cmp	r2, #105	@ 0x69
 800a5ee:	d028      	beq.n	800a642 <_strtod_l+0x352>
 800a5f0:	dc25      	bgt.n	800a63e <_strtod_l+0x34e>
 800a5f2:	2a49      	cmp	r2, #73	@ 0x49
 800a5f4:	d025      	beq.n	800a642 <_strtod_l+0x352>
 800a5f6:	2a4e      	cmp	r2, #78	@ 0x4e
 800a5f8:	f47f aece 	bne.w	800a398 <_strtod_l+0xa8>
 800a5fc:	499b      	ldr	r1, [pc, #620]	@ (800a86c <_strtod_l+0x57c>)
 800a5fe:	a819      	add	r0, sp, #100	@ 0x64
 800a600:	f002 fede 	bl	800d3c0 <__match>
 800a604:	2800      	cmp	r0, #0
 800a606:	f43f aec7 	beq.w	800a398 <_strtod_l+0xa8>
 800a60a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	2b28      	cmp	r3, #40	@ 0x28
 800a610:	d12e      	bne.n	800a670 <_strtod_l+0x380>
 800a612:	4997      	ldr	r1, [pc, #604]	@ (800a870 <_strtod_l+0x580>)
 800a614:	aa1c      	add	r2, sp, #112	@ 0x70
 800a616:	a819      	add	r0, sp, #100	@ 0x64
 800a618:	f002 fee6 	bl	800d3e8 <__hexnan>
 800a61c:	2805      	cmp	r0, #5
 800a61e:	d127      	bne.n	800a670 <_strtod_l+0x380>
 800a620:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a622:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a626:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a62a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a62e:	e698      	b.n	800a362 <_strtod_l+0x72>
 800a630:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a632:	fb08 2101 	mla	r1, r8, r1, r2
 800a636:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a63a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a63c:	e7b5      	b.n	800a5aa <_strtod_l+0x2ba>
 800a63e:	2a6e      	cmp	r2, #110	@ 0x6e
 800a640:	e7da      	b.n	800a5f8 <_strtod_l+0x308>
 800a642:	498c      	ldr	r1, [pc, #560]	@ (800a874 <_strtod_l+0x584>)
 800a644:	a819      	add	r0, sp, #100	@ 0x64
 800a646:	f002 febb 	bl	800d3c0 <__match>
 800a64a:	2800      	cmp	r0, #0
 800a64c:	f43f aea4 	beq.w	800a398 <_strtod_l+0xa8>
 800a650:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a652:	4989      	ldr	r1, [pc, #548]	@ (800a878 <_strtod_l+0x588>)
 800a654:	3b01      	subs	r3, #1
 800a656:	a819      	add	r0, sp, #100	@ 0x64
 800a658:	9319      	str	r3, [sp, #100]	@ 0x64
 800a65a:	f002 feb1 	bl	800d3c0 <__match>
 800a65e:	b910      	cbnz	r0, 800a666 <_strtod_l+0x376>
 800a660:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a662:	3301      	adds	r3, #1
 800a664:	9319      	str	r3, [sp, #100]	@ 0x64
 800a666:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a888 <_strtod_l+0x598>
 800a66a:	f04f 0a00 	mov.w	sl, #0
 800a66e:	e678      	b.n	800a362 <_strtod_l+0x72>
 800a670:	4882      	ldr	r0, [pc, #520]	@ (800a87c <_strtod_l+0x58c>)
 800a672:	f001 fd59 	bl	800c128 <nan>
 800a676:	ec5b ab10 	vmov	sl, fp, d0
 800a67a:	e672      	b.n	800a362 <_strtod_l+0x72>
 800a67c:	eba8 0309 	sub.w	r3, r8, r9
 800a680:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a682:	9309      	str	r3, [sp, #36]	@ 0x24
 800a684:	2f00      	cmp	r7, #0
 800a686:	bf08      	it	eq
 800a688:	462f      	moveq	r7, r5
 800a68a:	2d10      	cmp	r5, #16
 800a68c:	462c      	mov	r4, r5
 800a68e:	bfa8      	it	ge
 800a690:	2410      	movge	r4, #16
 800a692:	f7f5 ff6f 	bl	8000574 <__aeabi_ui2d>
 800a696:	2d09      	cmp	r5, #9
 800a698:	4682      	mov	sl, r0
 800a69a:	468b      	mov	fp, r1
 800a69c:	dc13      	bgt.n	800a6c6 <_strtod_l+0x3d6>
 800a69e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f43f ae5e 	beq.w	800a362 <_strtod_l+0x72>
 800a6a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6a8:	dd78      	ble.n	800a79c <_strtod_l+0x4ac>
 800a6aa:	2b16      	cmp	r3, #22
 800a6ac:	dc5f      	bgt.n	800a76e <_strtod_l+0x47e>
 800a6ae:	4974      	ldr	r1, [pc, #464]	@ (800a880 <_strtod_l+0x590>)
 800a6b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a6b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6b8:	4652      	mov	r2, sl
 800a6ba:	465b      	mov	r3, fp
 800a6bc:	f7f5 ffd4 	bl	8000668 <__aeabi_dmul>
 800a6c0:	4682      	mov	sl, r0
 800a6c2:	468b      	mov	fp, r1
 800a6c4:	e64d      	b.n	800a362 <_strtod_l+0x72>
 800a6c6:	4b6e      	ldr	r3, [pc, #440]	@ (800a880 <_strtod_l+0x590>)
 800a6c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a6cc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a6d0:	f7f5 ffca 	bl	8000668 <__aeabi_dmul>
 800a6d4:	4682      	mov	sl, r0
 800a6d6:	9808      	ldr	r0, [sp, #32]
 800a6d8:	468b      	mov	fp, r1
 800a6da:	f7f5 ff4b 	bl	8000574 <__aeabi_ui2d>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	4650      	mov	r0, sl
 800a6e4:	4659      	mov	r1, fp
 800a6e6:	f7f5 fe09 	bl	80002fc <__adddf3>
 800a6ea:	2d0f      	cmp	r5, #15
 800a6ec:	4682      	mov	sl, r0
 800a6ee:	468b      	mov	fp, r1
 800a6f0:	ddd5      	ble.n	800a69e <_strtod_l+0x3ae>
 800a6f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6f4:	1b2c      	subs	r4, r5, r4
 800a6f6:	441c      	add	r4, r3
 800a6f8:	2c00      	cmp	r4, #0
 800a6fa:	f340 8096 	ble.w	800a82a <_strtod_l+0x53a>
 800a6fe:	f014 030f 	ands.w	r3, r4, #15
 800a702:	d00a      	beq.n	800a71a <_strtod_l+0x42a>
 800a704:	495e      	ldr	r1, [pc, #376]	@ (800a880 <_strtod_l+0x590>)
 800a706:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a70a:	4652      	mov	r2, sl
 800a70c:	465b      	mov	r3, fp
 800a70e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a712:	f7f5 ffa9 	bl	8000668 <__aeabi_dmul>
 800a716:	4682      	mov	sl, r0
 800a718:	468b      	mov	fp, r1
 800a71a:	f034 040f 	bics.w	r4, r4, #15
 800a71e:	d073      	beq.n	800a808 <_strtod_l+0x518>
 800a720:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a724:	dd48      	ble.n	800a7b8 <_strtod_l+0x4c8>
 800a726:	2400      	movs	r4, #0
 800a728:	46a0      	mov	r8, r4
 800a72a:	940a      	str	r4, [sp, #40]	@ 0x28
 800a72c:	46a1      	mov	r9, r4
 800a72e:	9a05      	ldr	r2, [sp, #20]
 800a730:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a888 <_strtod_l+0x598>
 800a734:	2322      	movs	r3, #34	@ 0x22
 800a736:	6013      	str	r3, [r2, #0]
 800a738:	f04f 0a00 	mov.w	sl, #0
 800a73c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a73e:	2b00      	cmp	r3, #0
 800a740:	f43f ae0f 	beq.w	800a362 <_strtod_l+0x72>
 800a744:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a746:	9805      	ldr	r0, [sp, #20]
 800a748:	f002 fff2 	bl	800d730 <_Bfree>
 800a74c:	9805      	ldr	r0, [sp, #20]
 800a74e:	4649      	mov	r1, r9
 800a750:	f002 ffee 	bl	800d730 <_Bfree>
 800a754:	9805      	ldr	r0, [sp, #20]
 800a756:	4641      	mov	r1, r8
 800a758:	f002 ffea 	bl	800d730 <_Bfree>
 800a75c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a75e:	9805      	ldr	r0, [sp, #20]
 800a760:	f002 ffe6 	bl	800d730 <_Bfree>
 800a764:	9805      	ldr	r0, [sp, #20]
 800a766:	4621      	mov	r1, r4
 800a768:	f002 ffe2 	bl	800d730 <_Bfree>
 800a76c:	e5f9      	b.n	800a362 <_strtod_l+0x72>
 800a76e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a770:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a774:	4293      	cmp	r3, r2
 800a776:	dbbc      	blt.n	800a6f2 <_strtod_l+0x402>
 800a778:	4c41      	ldr	r4, [pc, #260]	@ (800a880 <_strtod_l+0x590>)
 800a77a:	f1c5 050f 	rsb	r5, r5, #15
 800a77e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a782:	4652      	mov	r2, sl
 800a784:	465b      	mov	r3, fp
 800a786:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a78a:	f7f5 ff6d 	bl	8000668 <__aeabi_dmul>
 800a78e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a790:	1b5d      	subs	r5, r3, r5
 800a792:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a796:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a79a:	e78f      	b.n	800a6bc <_strtod_l+0x3cc>
 800a79c:	3316      	adds	r3, #22
 800a79e:	dba8      	blt.n	800a6f2 <_strtod_l+0x402>
 800a7a0:	4b37      	ldr	r3, [pc, #220]	@ (800a880 <_strtod_l+0x590>)
 800a7a2:	eba9 0808 	sub.w	r8, r9, r8
 800a7a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a7aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a7ae:	4650      	mov	r0, sl
 800a7b0:	4659      	mov	r1, fp
 800a7b2:	f7f6 f883 	bl	80008bc <__aeabi_ddiv>
 800a7b6:	e783      	b.n	800a6c0 <_strtod_l+0x3d0>
 800a7b8:	4b32      	ldr	r3, [pc, #200]	@ (800a884 <_strtod_l+0x594>)
 800a7ba:	9308      	str	r3, [sp, #32]
 800a7bc:	2300      	movs	r3, #0
 800a7be:	1124      	asrs	r4, r4, #4
 800a7c0:	4650      	mov	r0, sl
 800a7c2:	4659      	mov	r1, fp
 800a7c4:	461e      	mov	r6, r3
 800a7c6:	2c01      	cmp	r4, #1
 800a7c8:	dc21      	bgt.n	800a80e <_strtod_l+0x51e>
 800a7ca:	b10b      	cbz	r3, 800a7d0 <_strtod_l+0x4e0>
 800a7cc:	4682      	mov	sl, r0
 800a7ce:	468b      	mov	fp, r1
 800a7d0:	492c      	ldr	r1, [pc, #176]	@ (800a884 <_strtod_l+0x594>)
 800a7d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a7d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a7da:	4652      	mov	r2, sl
 800a7dc:	465b      	mov	r3, fp
 800a7de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7e2:	f7f5 ff41 	bl	8000668 <__aeabi_dmul>
 800a7e6:	4b28      	ldr	r3, [pc, #160]	@ (800a888 <_strtod_l+0x598>)
 800a7e8:	460a      	mov	r2, r1
 800a7ea:	400b      	ands	r3, r1
 800a7ec:	4927      	ldr	r1, [pc, #156]	@ (800a88c <_strtod_l+0x59c>)
 800a7ee:	428b      	cmp	r3, r1
 800a7f0:	4682      	mov	sl, r0
 800a7f2:	d898      	bhi.n	800a726 <_strtod_l+0x436>
 800a7f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a7f8:	428b      	cmp	r3, r1
 800a7fa:	bf86      	itte	hi
 800a7fc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a890 <_strtod_l+0x5a0>
 800a800:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800a804:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a808:	2300      	movs	r3, #0
 800a80a:	9308      	str	r3, [sp, #32]
 800a80c:	e07a      	b.n	800a904 <_strtod_l+0x614>
 800a80e:	07e2      	lsls	r2, r4, #31
 800a810:	d505      	bpl.n	800a81e <_strtod_l+0x52e>
 800a812:	9b08      	ldr	r3, [sp, #32]
 800a814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a818:	f7f5 ff26 	bl	8000668 <__aeabi_dmul>
 800a81c:	2301      	movs	r3, #1
 800a81e:	9a08      	ldr	r2, [sp, #32]
 800a820:	3208      	adds	r2, #8
 800a822:	3601      	adds	r6, #1
 800a824:	1064      	asrs	r4, r4, #1
 800a826:	9208      	str	r2, [sp, #32]
 800a828:	e7cd      	b.n	800a7c6 <_strtod_l+0x4d6>
 800a82a:	d0ed      	beq.n	800a808 <_strtod_l+0x518>
 800a82c:	4264      	negs	r4, r4
 800a82e:	f014 020f 	ands.w	r2, r4, #15
 800a832:	d00a      	beq.n	800a84a <_strtod_l+0x55a>
 800a834:	4b12      	ldr	r3, [pc, #72]	@ (800a880 <_strtod_l+0x590>)
 800a836:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a83a:	4650      	mov	r0, sl
 800a83c:	4659      	mov	r1, fp
 800a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a842:	f7f6 f83b 	bl	80008bc <__aeabi_ddiv>
 800a846:	4682      	mov	sl, r0
 800a848:	468b      	mov	fp, r1
 800a84a:	1124      	asrs	r4, r4, #4
 800a84c:	d0dc      	beq.n	800a808 <_strtod_l+0x518>
 800a84e:	2c1f      	cmp	r4, #31
 800a850:	dd20      	ble.n	800a894 <_strtod_l+0x5a4>
 800a852:	2400      	movs	r4, #0
 800a854:	46a0      	mov	r8, r4
 800a856:	940a      	str	r4, [sp, #40]	@ 0x28
 800a858:	46a1      	mov	r9, r4
 800a85a:	9a05      	ldr	r2, [sp, #20]
 800a85c:	2322      	movs	r3, #34	@ 0x22
 800a85e:	f04f 0a00 	mov.w	sl, #0
 800a862:	f04f 0b00 	mov.w	fp, #0
 800a866:	6013      	str	r3, [r2, #0]
 800a868:	e768      	b.n	800a73c <_strtod_l+0x44c>
 800a86a:	bf00      	nop
 800a86c:	0800ece6 	.word	0x0800ece6
 800a870:	0800eb88 	.word	0x0800eb88
 800a874:	0800ecde 	.word	0x0800ecde
 800a878:	0800edca 	.word	0x0800edca
 800a87c:	0800edc6 	.word	0x0800edc6
 800a880:	0800ef30 	.word	0x0800ef30
 800a884:	0800ef08 	.word	0x0800ef08
 800a888:	7ff00000 	.word	0x7ff00000
 800a88c:	7ca00000 	.word	0x7ca00000
 800a890:	7fefffff 	.word	0x7fefffff
 800a894:	f014 0310 	ands.w	r3, r4, #16
 800a898:	bf18      	it	ne
 800a89a:	236a      	movne	r3, #106	@ 0x6a
 800a89c:	4ea9      	ldr	r6, [pc, #676]	@ (800ab44 <_strtod_l+0x854>)
 800a89e:	9308      	str	r3, [sp, #32]
 800a8a0:	4650      	mov	r0, sl
 800a8a2:	4659      	mov	r1, fp
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	07e2      	lsls	r2, r4, #31
 800a8a8:	d504      	bpl.n	800a8b4 <_strtod_l+0x5c4>
 800a8aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a8ae:	f7f5 fedb 	bl	8000668 <__aeabi_dmul>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	1064      	asrs	r4, r4, #1
 800a8b6:	f106 0608 	add.w	r6, r6, #8
 800a8ba:	d1f4      	bne.n	800a8a6 <_strtod_l+0x5b6>
 800a8bc:	b10b      	cbz	r3, 800a8c2 <_strtod_l+0x5d2>
 800a8be:	4682      	mov	sl, r0
 800a8c0:	468b      	mov	fp, r1
 800a8c2:	9b08      	ldr	r3, [sp, #32]
 800a8c4:	b1b3      	cbz	r3, 800a8f4 <_strtod_l+0x604>
 800a8c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a8ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	4659      	mov	r1, fp
 800a8d2:	dd0f      	ble.n	800a8f4 <_strtod_l+0x604>
 800a8d4:	2b1f      	cmp	r3, #31
 800a8d6:	dd55      	ble.n	800a984 <_strtod_l+0x694>
 800a8d8:	2b34      	cmp	r3, #52	@ 0x34
 800a8da:	bfde      	ittt	le
 800a8dc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800a8e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a8e4:	4093      	lslle	r3, r2
 800a8e6:	f04f 0a00 	mov.w	sl, #0
 800a8ea:	bfcc      	ite	gt
 800a8ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a8f0:	ea03 0b01 	andle.w	fp, r3, r1
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	4650      	mov	r0, sl
 800a8fa:	4659      	mov	r1, fp
 800a8fc:	f7f6 f91c 	bl	8000b38 <__aeabi_dcmpeq>
 800a900:	2800      	cmp	r0, #0
 800a902:	d1a6      	bne.n	800a852 <_strtod_l+0x562>
 800a904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a906:	9300      	str	r3, [sp, #0]
 800a908:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a90a:	9805      	ldr	r0, [sp, #20]
 800a90c:	462b      	mov	r3, r5
 800a90e:	463a      	mov	r2, r7
 800a910:	f002 ff76 	bl	800d800 <__s2b>
 800a914:	900a      	str	r0, [sp, #40]	@ 0x28
 800a916:	2800      	cmp	r0, #0
 800a918:	f43f af05 	beq.w	800a726 <_strtod_l+0x436>
 800a91c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a91e:	2a00      	cmp	r2, #0
 800a920:	eba9 0308 	sub.w	r3, r9, r8
 800a924:	bfa8      	it	ge
 800a926:	2300      	movge	r3, #0
 800a928:	9312      	str	r3, [sp, #72]	@ 0x48
 800a92a:	2400      	movs	r4, #0
 800a92c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a930:	9316      	str	r3, [sp, #88]	@ 0x58
 800a932:	46a0      	mov	r8, r4
 800a934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a936:	9805      	ldr	r0, [sp, #20]
 800a938:	6859      	ldr	r1, [r3, #4]
 800a93a:	f002 feb9 	bl	800d6b0 <_Balloc>
 800a93e:	4681      	mov	r9, r0
 800a940:	2800      	cmp	r0, #0
 800a942:	f43f aef4 	beq.w	800a72e <_strtod_l+0x43e>
 800a946:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a948:	691a      	ldr	r2, [r3, #16]
 800a94a:	3202      	adds	r2, #2
 800a94c:	f103 010c 	add.w	r1, r3, #12
 800a950:	0092      	lsls	r2, r2, #2
 800a952:	300c      	adds	r0, #12
 800a954:	f001 fbd9 	bl	800c10a <memcpy>
 800a958:	ec4b ab10 	vmov	d0, sl, fp
 800a95c:	9805      	ldr	r0, [sp, #20]
 800a95e:	aa1c      	add	r2, sp, #112	@ 0x70
 800a960:	a91b      	add	r1, sp, #108	@ 0x6c
 800a962:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a966:	f003 fa87 	bl	800de78 <__d2b>
 800a96a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a96c:	2800      	cmp	r0, #0
 800a96e:	f43f aede 	beq.w	800a72e <_strtod_l+0x43e>
 800a972:	9805      	ldr	r0, [sp, #20]
 800a974:	2101      	movs	r1, #1
 800a976:	f002 ffd9 	bl	800d92c <__i2b>
 800a97a:	4680      	mov	r8, r0
 800a97c:	b948      	cbnz	r0, 800a992 <_strtod_l+0x6a2>
 800a97e:	f04f 0800 	mov.w	r8, #0
 800a982:	e6d4      	b.n	800a72e <_strtod_l+0x43e>
 800a984:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a988:	fa02 f303 	lsl.w	r3, r2, r3
 800a98c:	ea03 0a0a 	and.w	sl, r3, sl
 800a990:	e7b0      	b.n	800a8f4 <_strtod_l+0x604>
 800a992:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a994:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a996:	2d00      	cmp	r5, #0
 800a998:	bfab      	itete	ge
 800a99a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a99c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a99e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a9a0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a9a2:	bfac      	ite	ge
 800a9a4:	18ef      	addge	r7, r5, r3
 800a9a6:	1b5e      	sublt	r6, r3, r5
 800a9a8:	9b08      	ldr	r3, [sp, #32]
 800a9aa:	1aed      	subs	r5, r5, r3
 800a9ac:	4415      	add	r5, r2
 800a9ae:	4b66      	ldr	r3, [pc, #408]	@ (800ab48 <_strtod_l+0x858>)
 800a9b0:	3d01      	subs	r5, #1
 800a9b2:	429d      	cmp	r5, r3
 800a9b4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a9b8:	da50      	bge.n	800aa5c <_strtod_l+0x76c>
 800a9ba:	1b5b      	subs	r3, r3, r5
 800a9bc:	2b1f      	cmp	r3, #31
 800a9be:	eba2 0203 	sub.w	r2, r2, r3
 800a9c2:	f04f 0101 	mov.w	r1, #1
 800a9c6:	dc3d      	bgt.n	800aa44 <_strtod_l+0x754>
 800a9c8:	fa01 f303 	lsl.w	r3, r1, r3
 800a9cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a9d2:	18bd      	adds	r5, r7, r2
 800a9d4:	9b08      	ldr	r3, [sp, #32]
 800a9d6:	42af      	cmp	r7, r5
 800a9d8:	4416      	add	r6, r2
 800a9da:	441e      	add	r6, r3
 800a9dc:	463b      	mov	r3, r7
 800a9de:	bfa8      	it	ge
 800a9e0:	462b      	movge	r3, r5
 800a9e2:	42b3      	cmp	r3, r6
 800a9e4:	bfa8      	it	ge
 800a9e6:	4633      	movge	r3, r6
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	bfc2      	ittt	gt
 800a9ec:	1aed      	subgt	r5, r5, r3
 800a9ee:	1af6      	subgt	r6, r6, r3
 800a9f0:	1aff      	subgt	r7, r7, r3
 800a9f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	dd16      	ble.n	800aa26 <_strtod_l+0x736>
 800a9f8:	4641      	mov	r1, r8
 800a9fa:	9805      	ldr	r0, [sp, #20]
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	f003 f855 	bl	800daac <__pow5mult>
 800aa02:	4680      	mov	r8, r0
 800aa04:	2800      	cmp	r0, #0
 800aa06:	d0ba      	beq.n	800a97e <_strtod_l+0x68e>
 800aa08:	4601      	mov	r1, r0
 800aa0a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aa0c:	9805      	ldr	r0, [sp, #20]
 800aa0e:	f002 ffa3 	bl	800d958 <__multiply>
 800aa12:	900e      	str	r0, [sp, #56]	@ 0x38
 800aa14:	2800      	cmp	r0, #0
 800aa16:	f43f ae8a 	beq.w	800a72e <_strtod_l+0x43e>
 800aa1a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa1c:	9805      	ldr	r0, [sp, #20]
 800aa1e:	f002 fe87 	bl	800d730 <_Bfree>
 800aa22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa24:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa26:	2d00      	cmp	r5, #0
 800aa28:	dc1d      	bgt.n	800aa66 <_strtod_l+0x776>
 800aa2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	dd23      	ble.n	800aa78 <_strtod_l+0x788>
 800aa30:	4649      	mov	r1, r9
 800aa32:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800aa34:	9805      	ldr	r0, [sp, #20]
 800aa36:	f003 f839 	bl	800daac <__pow5mult>
 800aa3a:	4681      	mov	r9, r0
 800aa3c:	b9e0      	cbnz	r0, 800aa78 <_strtod_l+0x788>
 800aa3e:	f04f 0900 	mov.w	r9, #0
 800aa42:	e674      	b.n	800a72e <_strtod_l+0x43e>
 800aa44:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800aa48:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800aa4c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800aa50:	35e2      	adds	r5, #226	@ 0xe2
 800aa52:	fa01 f305 	lsl.w	r3, r1, r5
 800aa56:	9310      	str	r3, [sp, #64]	@ 0x40
 800aa58:	9113      	str	r1, [sp, #76]	@ 0x4c
 800aa5a:	e7ba      	b.n	800a9d2 <_strtod_l+0x6e2>
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	9310      	str	r3, [sp, #64]	@ 0x40
 800aa60:	2301      	movs	r3, #1
 800aa62:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aa64:	e7b5      	b.n	800a9d2 <_strtod_l+0x6e2>
 800aa66:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa68:	9805      	ldr	r0, [sp, #20]
 800aa6a:	462a      	mov	r2, r5
 800aa6c:	f003 f878 	bl	800db60 <__lshift>
 800aa70:	901a      	str	r0, [sp, #104]	@ 0x68
 800aa72:	2800      	cmp	r0, #0
 800aa74:	d1d9      	bne.n	800aa2a <_strtod_l+0x73a>
 800aa76:	e65a      	b.n	800a72e <_strtod_l+0x43e>
 800aa78:	2e00      	cmp	r6, #0
 800aa7a:	dd07      	ble.n	800aa8c <_strtod_l+0x79c>
 800aa7c:	4649      	mov	r1, r9
 800aa7e:	9805      	ldr	r0, [sp, #20]
 800aa80:	4632      	mov	r2, r6
 800aa82:	f003 f86d 	bl	800db60 <__lshift>
 800aa86:	4681      	mov	r9, r0
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d0d8      	beq.n	800aa3e <_strtod_l+0x74e>
 800aa8c:	2f00      	cmp	r7, #0
 800aa8e:	dd08      	ble.n	800aaa2 <_strtod_l+0x7b2>
 800aa90:	4641      	mov	r1, r8
 800aa92:	9805      	ldr	r0, [sp, #20]
 800aa94:	463a      	mov	r2, r7
 800aa96:	f003 f863 	bl	800db60 <__lshift>
 800aa9a:	4680      	mov	r8, r0
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	f43f ae46 	beq.w	800a72e <_strtod_l+0x43e>
 800aaa2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aaa4:	9805      	ldr	r0, [sp, #20]
 800aaa6:	464a      	mov	r2, r9
 800aaa8:	f003 f8e2 	bl	800dc70 <__mdiff>
 800aaac:	4604      	mov	r4, r0
 800aaae:	2800      	cmp	r0, #0
 800aab0:	f43f ae3d 	beq.w	800a72e <_strtod_l+0x43e>
 800aab4:	68c3      	ldr	r3, [r0, #12]
 800aab6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aab8:	2300      	movs	r3, #0
 800aaba:	60c3      	str	r3, [r0, #12]
 800aabc:	4641      	mov	r1, r8
 800aabe:	f003 f8bb 	bl	800dc38 <__mcmp>
 800aac2:	2800      	cmp	r0, #0
 800aac4:	da46      	bge.n	800ab54 <_strtod_l+0x864>
 800aac6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aac8:	ea53 030a 	orrs.w	r3, r3, sl
 800aacc:	d16c      	bne.n	800aba8 <_strtod_l+0x8b8>
 800aace:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d168      	bne.n	800aba8 <_strtod_l+0x8b8>
 800aad6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aada:	0d1b      	lsrs	r3, r3, #20
 800aadc:	051b      	lsls	r3, r3, #20
 800aade:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aae2:	d961      	bls.n	800aba8 <_strtod_l+0x8b8>
 800aae4:	6963      	ldr	r3, [r4, #20]
 800aae6:	b913      	cbnz	r3, 800aaee <_strtod_l+0x7fe>
 800aae8:	6923      	ldr	r3, [r4, #16]
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	dd5c      	ble.n	800aba8 <_strtod_l+0x8b8>
 800aaee:	4621      	mov	r1, r4
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	9805      	ldr	r0, [sp, #20]
 800aaf4:	f003 f834 	bl	800db60 <__lshift>
 800aaf8:	4641      	mov	r1, r8
 800aafa:	4604      	mov	r4, r0
 800aafc:	f003 f89c 	bl	800dc38 <__mcmp>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	dd51      	ble.n	800aba8 <_strtod_l+0x8b8>
 800ab04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab08:	9a08      	ldr	r2, [sp, #32]
 800ab0a:	0d1b      	lsrs	r3, r3, #20
 800ab0c:	051b      	lsls	r3, r3, #20
 800ab0e:	2a00      	cmp	r2, #0
 800ab10:	d06b      	beq.n	800abea <_strtod_l+0x8fa>
 800ab12:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ab16:	d868      	bhi.n	800abea <_strtod_l+0x8fa>
 800ab18:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ab1c:	f67f ae9d 	bls.w	800a85a <_strtod_l+0x56a>
 800ab20:	4b0a      	ldr	r3, [pc, #40]	@ (800ab4c <_strtod_l+0x85c>)
 800ab22:	4650      	mov	r0, sl
 800ab24:	4659      	mov	r1, fp
 800ab26:	2200      	movs	r2, #0
 800ab28:	f7f5 fd9e 	bl	8000668 <__aeabi_dmul>
 800ab2c:	4b08      	ldr	r3, [pc, #32]	@ (800ab50 <_strtod_l+0x860>)
 800ab2e:	400b      	ands	r3, r1
 800ab30:	4682      	mov	sl, r0
 800ab32:	468b      	mov	fp, r1
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	f47f ae05 	bne.w	800a744 <_strtod_l+0x454>
 800ab3a:	9a05      	ldr	r2, [sp, #20]
 800ab3c:	2322      	movs	r3, #34	@ 0x22
 800ab3e:	6013      	str	r3, [r2, #0]
 800ab40:	e600      	b.n	800a744 <_strtod_l+0x454>
 800ab42:	bf00      	nop
 800ab44:	0800ebb0 	.word	0x0800ebb0
 800ab48:	fffffc02 	.word	0xfffffc02
 800ab4c:	39500000 	.word	0x39500000
 800ab50:	7ff00000 	.word	0x7ff00000
 800ab54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ab58:	d165      	bne.n	800ac26 <_strtod_l+0x936>
 800ab5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ab5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab60:	b35a      	cbz	r2, 800abba <_strtod_l+0x8ca>
 800ab62:	4a9f      	ldr	r2, [pc, #636]	@ (800ade0 <_strtod_l+0xaf0>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d12b      	bne.n	800abc0 <_strtod_l+0x8d0>
 800ab68:	9b08      	ldr	r3, [sp, #32]
 800ab6a:	4651      	mov	r1, sl
 800ab6c:	b303      	cbz	r3, 800abb0 <_strtod_l+0x8c0>
 800ab6e:	4b9d      	ldr	r3, [pc, #628]	@ (800ade4 <_strtod_l+0xaf4>)
 800ab70:	465a      	mov	r2, fp
 800ab72:	4013      	ands	r3, r2
 800ab74:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ab78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab7c:	d81b      	bhi.n	800abb6 <_strtod_l+0x8c6>
 800ab7e:	0d1b      	lsrs	r3, r3, #20
 800ab80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ab84:	fa02 f303 	lsl.w	r3, r2, r3
 800ab88:	4299      	cmp	r1, r3
 800ab8a:	d119      	bne.n	800abc0 <_strtod_l+0x8d0>
 800ab8c:	4b96      	ldr	r3, [pc, #600]	@ (800ade8 <_strtod_l+0xaf8>)
 800ab8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d102      	bne.n	800ab9a <_strtod_l+0x8aa>
 800ab94:	3101      	adds	r1, #1
 800ab96:	f43f adca 	beq.w	800a72e <_strtod_l+0x43e>
 800ab9a:	4b92      	ldr	r3, [pc, #584]	@ (800ade4 <_strtod_l+0xaf4>)
 800ab9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab9e:	401a      	ands	r2, r3
 800aba0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800aba4:	f04f 0a00 	mov.w	sl, #0
 800aba8:	9b08      	ldr	r3, [sp, #32]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1b8      	bne.n	800ab20 <_strtod_l+0x830>
 800abae:	e5c9      	b.n	800a744 <_strtod_l+0x454>
 800abb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800abb4:	e7e8      	b.n	800ab88 <_strtod_l+0x898>
 800abb6:	4613      	mov	r3, r2
 800abb8:	e7e6      	b.n	800ab88 <_strtod_l+0x898>
 800abba:	ea53 030a 	orrs.w	r3, r3, sl
 800abbe:	d0a1      	beq.n	800ab04 <_strtod_l+0x814>
 800abc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800abc2:	b1db      	cbz	r3, 800abfc <_strtod_l+0x90c>
 800abc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abc6:	4213      	tst	r3, r2
 800abc8:	d0ee      	beq.n	800aba8 <_strtod_l+0x8b8>
 800abca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abcc:	9a08      	ldr	r2, [sp, #32]
 800abce:	4650      	mov	r0, sl
 800abd0:	4659      	mov	r1, fp
 800abd2:	b1bb      	cbz	r3, 800ac04 <_strtod_l+0x914>
 800abd4:	f7ff fb6d 	bl	800a2b2 <sulp>
 800abd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800abdc:	ec53 2b10 	vmov	r2, r3, d0
 800abe0:	f7f5 fb8c 	bl	80002fc <__adddf3>
 800abe4:	4682      	mov	sl, r0
 800abe6:	468b      	mov	fp, r1
 800abe8:	e7de      	b.n	800aba8 <_strtod_l+0x8b8>
 800abea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800abee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800abf2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800abf6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800abfa:	e7d5      	b.n	800aba8 <_strtod_l+0x8b8>
 800abfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800abfe:	ea13 0f0a 	tst.w	r3, sl
 800ac02:	e7e1      	b.n	800abc8 <_strtod_l+0x8d8>
 800ac04:	f7ff fb55 	bl	800a2b2 <sulp>
 800ac08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac0c:	ec53 2b10 	vmov	r2, r3, d0
 800ac10:	f7f5 fb72 	bl	80002f8 <__aeabi_dsub>
 800ac14:	2200      	movs	r2, #0
 800ac16:	2300      	movs	r3, #0
 800ac18:	4682      	mov	sl, r0
 800ac1a:	468b      	mov	fp, r1
 800ac1c:	f7f5 ff8c 	bl	8000b38 <__aeabi_dcmpeq>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	d0c1      	beq.n	800aba8 <_strtod_l+0x8b8>
 800ac24:	e619      	b.n	800a85a <_strtod_l+0x56a>
 800ac26:	4641      	mov	r1, r8
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f003 f97d 	bl	800df28 <__ratio>
 800ac2e:	ec57 6b10 	vmov	r6, r7, d0
 800ac32:	2200      	movs	r2, #0
 800ac34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ac38:	4630      	mov	r0, r6
 800ac3a:	4639      	mov	r1, r7
 800ac3c:	f7f5 ff90 	bl	8000b60 <__aeabi_dcmple>
 800ac40:	2800      	cmp	r0, #0
 800ac42:	d06f      	beq.n	800ad24 <_strtod_l+0xa34>
 800ac44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d17a      	bne.n	800ad40 <_strtod_l+0xa50>
 800ac4a:	f1ba 0f00 	cmp.w	sl, #0
 800ac4e:	d158      	bne.n	800ad02 <_strtod_l+0xa12>
 800ac50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d15a      	bne.n	800ad10 <_strtod_l+0xa20>
 800ac5a:	4b64      	ldr	r3, [pc, #400]	@ (800adec <_strtod_l+0xafc>)
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	4630      	mov	r0, r6
 800ac60:	4639      	mov	r1, r7
 800ac62:	f7f5 ff73 	bl	8000b4c <__aeabi_dcmplt>
 800ac66:	2800      	cmp	r0, #0
 800ac68:	d159      	bne.n	800ad1e <_strtod_l+0xa2e>
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	4639      	mov	r1, r7
 800ac6e:	4b60      	ldr	r3, [pc, #384]	@ (800adf0 <_strtod_l+0xb00>)
 800ac70:	2200      	movs	r2, #0
 800ac72:	f7f5 fcf9 	bl	8000668 <__aeabi_dmul>
 800ac76:	4606      	mov	r6, r0
 800ac78:	460f      	mov	r7, r1
 800ac7a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ac7e:	9606      	str	r6, [sp, #24]
 800ac80:	9307      	str	r3, [sp, #28]
 800ac82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac86:	4d57      	ldr	r5, [pc, #348]	@ (800ade4 <_strtod_l+0xaf4>)
 800ac88:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ac8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac8e:	401d      	ands	r5, r3
 800ac90:	4b58      	ldr	r3, [pc, #352]	@ (800adf4 <_strtod_l+0xb04>)
 800ac92:	429d      	cmp	r5, r3
 800ac94:	f040 80b2 	bne.w	800adfc <_strtod_l+0xb0c>
 800ac98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac9a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ac9e:	ec4b ab10 	vmov	d0, sl, fp
 800aca2:	f003 f879 	bl	800dd98 <__ulp>
 800aca6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acaa:	ec51 0b10 	vmov	r0, r1, d0
 800acae:	f7f5 fcdb 	bl	8000668 <__aeabi_dmul>
 800acb2:	4652      	mov	r2, sl
 800acb4:	465b      	mov	r3, fp
 800acb6:	f7f5 fb21 	bl	80002fc <__adddf3>
 800acba:	460b      	mov	r3, r1
 800acbc:	4949      	ldr	r1, [pc, #292]	@ (800ade4 <_strtod_l+0xaf4>)
 800acbe:	4a4e      	ldr	r2, [pc, #312]	@ (800adf8 <_strtod_l+0xb08>)
 800acc0:	4019      	ands	r1, r3
 800acc2:	4291      	cmp	r1, r2
 800acc4:	4682      	mov	sl, r0
 800acc6:	d942      	bls.n	800ad4e <_strtod_l+0xa5e>
 800acc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800acca:	4b47      	ldr	r3, [pc, #284]	@ (800ade8 <_strtod_l+0xaf8>)
 800accc:	429a      	cmp	r2, r3
 800acce:	d103      	bne.n	800acd8 <_strtod_l+0x9e8>
 800acd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800acd2:	3301      	adds	r3, #1
 800acd4:	f43f ad2b 	beq.w	800a72e <_strtod_l+0x43e>
 800acd8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ade8 <_strtod_l+0xaf8>
 800acdc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ace0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ace2:	9805      	ldr	r0, [sp, #20]
 800ace4:	f002 fd24 	bl	800d730 <_Bfree>
 800ace8:	9805      	ldr	r0, [sp, #20]
 800acea:	4649      	mov	r1, r9
 800acec:	f002 fd20 	bl	800d730 <_Bfree>
 800acf0:	9805      	ldr	r0, [sp, #20]
 800acf2:	4641      	mov	r1, r8
 800acf4:	f002 fd1c 	bl	800d730 <_Bfree>
 800acf8:	9805      	ldr	r0, [sp, #20]
 800acfa:	4621      	mov	r1, r4
 800acfc:	f002 fd18 	bl	800d730 <_Bfree>
 800ad00:	e618      	b.n	800a934 <_strtod_l+0x644>
 800ad02:	f1ba 0f01 	cmp.w	sl, #1
 800ad06:	d103      	bne.n	800ad10 <_strtod_l+0xa20>
 800ad08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f43f ada5 	beq.w	800a85a <_strtod_l+0x56a>
 800ad10:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800adc0 <_strtod_l+0xad0>
 800ad14:	4f35      	ldr	r7, [pc, #212]	@ (800adec <_strtod_l+0xafc>)
 800ad16:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad1a:	2600      	movs	r6, #0
 800ad1c:	e7b1      	b.n	800ac82 <_strtod_l+0x992>
 800ad1e:	4f34      	ldr	r7, [pc, #208]	@ (800adf0 <_strtod_l+0xb00>)
 800ad20:	2600      	movs	r6, #0
 800ad22:	e7aa      	b.n	800ac7a <_strtod_l+0x98a>
 800ad24:	4b32      	ldr	r3, [pc, #200]	@ (800adf0 <_strtod_l+0xb00>)
 800ad26:	4630      	mov	r0, r6
 800ad28:	4639      	mov	r1, r7
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f7f5 fc9c 	bl	8000668 <__aeabi_dmul>
 800ad30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad32:	4606      	mov	r6, r0
 800ad34:	460f      	mov	r7, r1
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d09f      	beq.n	800ac7a <_strtod_l+0x98a>
 800ad3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ad3e:	e7a0      	b.n	800ac82 <_strtod_l+0x992>
 800ad40:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800adc8 <_strtod_l+0xad8>
 800ad44:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad48:	ec57 6b17 	vmov	r6, r7, d7
 800ad4c:	e799      	b.n	800ac82 <_strtod_l+0x992>
 800ad4e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ad52:	9b08      	ldr	r3, [sp, #32]
 800ad54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d1c1      	bne.n	800ace0 <_strtod_l+0x9f0>
 800ad5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ad60:	0d1b      	lsrs	r3, r3, #20
 800ad62:	051b      	lsls	r3, r3, #20
 800ad64:	429d      	cmp	r5, r3
 800ad66:	d1bb      	bne.n	800ace0 <_strtod_l+0x9f0>
 800ad68:	4630      	mov	r0, r6
 800ad6a:	4639      	mov	r1, r7
 800ad6c:	f7f5 ffdc 	bl	8000d28 <__aeabi_d2lz>
 800ad70:	f7f5 fc4c 	bl	800060c <__aeabi_l2d>
 800ad74:	4602      	mov	r2, r0
 800ad76:	460b      	mov	r3, r1
 800ad78:	4630      	mov	r0, r6
 800ad7a:	4639      	mov	r1, r7
 800ad7c:	f7f5 fabc 	bl	80002f8 <__aeabi_dsub>
 800ad80:	460b      	mov	r3, r1
 800ad82:	4602      	mov	r2, r0
 800ad84:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ad88:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ad8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad8e:	ea46 060a 	orr.w	r6, r6, sl
 800ad92:	431e      	orrs	r6, r3
 800ad94:	d06f      	beq.n	800ae76 <_strtod_l+0xb86>
 800ad96:	a30e      	add	r3, pc, #56	@ (adr r3, 800add0 <_strtod_l+0xae0>)
 800ad98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9c:	f7f5 fed6 	bl	8000b4c <__aeabi_dcmplt>
 800ada0:	2800      	cmp	r0, #0
 800ada2:	f47f accf 	bne.w	800a744 <_strtod_l+0x454>
 800ada6:	a30c      	add	r3, pc, #48	@ (adr r3, 800add8 <_strtod_l+0xae8>)
 800ada8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800adb0:	f7f5 feea 	bl	8000b88 <__aeabi_dcmpgt>
 800adb4:	2800      	cmp	r0, #0
 800adb6:	d093      	beq.n	800ace0 <_strtod_l+0x9f0>
 800adb8:	e4c4      	b.n	800a744 <_strtod_l+0x454>
 800adba:	bf00      	nop
 800adbc:	f3af 8000 	nop.w
 800adc0:	00000000 	.word	0x00000000
 800adc4:	bff00000 	.word	0xbff00000
 800adc8:	00000000 	.word	0x00000000
 800adcc:	3ff00000 	.word	0x3ff00000
 800add0:	94a03595 	.word	0x94a03595
 800add4:	3fdfffff 	.word	0x3fdfffff
 800add8:	35afe535 	.word	0x35afe535
 800addc:	3fe00000 	.word	0x3fe00000
 800ade0:	000fffff 	.word	0x000fffff
 800ade4:	7ff00000 	.word	0x7ff00000
 800ade8:	7fefffff 	.word	0x7fefffff
 800adec:	3ff00000 	.word	0x3ff00000
 800adf0:	3fe00000 	.word	0x3fe00000
 800adf4:	7fe00000 	.word	0x7fe00000
 800adf8:	7c9fffff 	.word	0x7c9fffff
 800adfc:	9b08      	ldr	r3, [sp, #32]
 800adfe:	b323      	cbz	r3, 800ae4a <_strtod_l+0xb5a>
 800ae00:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ae04:	d821      	bhi.n	800ae4a <_strtod_l+0xb5a>
 800ae06:	a328      	add	r3, pc, #160	@ (adr r3, 800aea8 <_strtod_l+0xbb8>)
 800ae08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0c:	4630      	mov	r0, r6
 800ae0e:	4639      	mov	r1, r7
 800ae10:	f7f5 fea6 	bl	8000b60 <__aeabi_dcmple>
 800ae14:	b1a0      	cbz	r0, 800ae40 <_strtod_l+0xb50>
 800ae16:	4639      	mov	r1, r7
 800ae18:	4630      	mov	r0, r6
 800ae1a:	f7f5 fefd 	bl	8000c18 <__aeabi_d2uiz>
 800ae1e:	2801      	cmp	r0, #1
 800ae20:	bf38      	it	cc
 800ae22:	2001      	movcc	r0, #1
 800ae24:	f7f5 fba6 	bl	8000574 <__aeabi_ui2d>
 800ae28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	460f      	mov	r7, r1
 800ae2e:	b9fb      	cbnz	r3, 800ae70 <_strtod_l+0xb80>
 800ae30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae34:	9014      	str	r0, [sp, #80]	@ 0x50
 800ae36:	9315      	str	r3, [sp, #84]	@ 0x54
 800ae38:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ae3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ae40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ae42:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ae46:	1b5b      	subs	r3, r3, r5
 800ae48:	9311      	str	r3, [sp, #68]	@ 0x44
 800ae4a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ae4e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ae52:	f002 ffa1 	bl	800dd98 <__ulp>
 800ae56:	4650      	mov	r0, sl
 800ae58:	ec53 2b10 	vmov	r2, r3, d0
 800ae5c:	4659      	mov	r1, fp
 800ae5e:	f7f5 fc03 	bl	8000668 <__aeabi_dmul>
 800ae62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ae66:	f7f5 fa49 	bl	80002fc <__adddf3>
 800ae6a:	4682      	mov	sl, r0
 800ae6c:	468b      	mov	fp, r1
 800ae6e:	e770      	b.n	800ad52 <_strtod_l+0xa62>
 800ae70:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ae74:	e7e0      	b.n	800ae38 <_strtod_l+0xb48>
 800ae76:	a30e      	add	r3, pc, #56	@ (adr r3, 800aeb0 <_strtod_l+0xbc0>)
 800ae78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7c:	f7f5 fe66 	bl	8000b4c <__aeabi_dcmplt>
 800ae80:	e798      	b.n	800adb4 <_strtod_l+0xac4>
 800ae82:	2300      	movs	r3, #0
 800ae84:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae86:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ae88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae8a:	6013      	str	r3, [r2, #0]
 800ae8c:	f7ff ba6d 	b.w	800a36a <_strtod_l+0x7a>
 800ae90:	2a65      	cmp	r2, #101	@ 0x65
 800ae92:	f43f ab66 	beq.w	800a562 <_strtod_l+0x272>
 800ae96:	2a45      	cmp	r2, #69	@ 0x45
 800ae98:	f43f ab63 	beq.w	800a562 <_strtod_l+0x272>
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	f7ff bb9e 	b.w	800a5de <_strtod_l+0x2ee>
 800aea2:	bf00      	nop
 800aea4:	f3af 8000 	nop.w
 800aea8:	ffc00000 	.word	0xffc00000
 800aeac:	41dfffff 	.word	0x41dfffff
 800aeb0:	94a03595 	.word	0x94a03595
 800aeb4:	3fcfffff 	.word	0x3fcfffff

0800aeb8 <_strtod_r>:
 800aeb8:	4b01      	ldr	r3, [pc, #4]	@ (800aec0 <_strtod_r+0x8>)
 800aeba:	f7ff ba19 	b.w	800a2f0 <_strtod_l>
 800aebe:	bf00      	nop
 800aec0:	200001ec 	.word	0x200001ec

0800aec4 <strtod>:
 800aec4:	460a      	mov	r2, r1
 800aec6:	4601      	mov	r1, r0
 800aec8:	4802      	ldr	r0, [pc, #8]	@ (800aed4 <strtod+0x10>)
 800aeca:	4b03      	ldr	r3, [pc, #12]	@ (800aed8 <strtod+0x14>)
 800aecc:	6800      	ldr	r0, [r0, #0]
 800aece:	f7ff ba0f 	b.w	800a2f0 <_strtod_l>
 800aed2:	bf00      	nop
 800aed4:	20000358 	.word	0x20000358
 800aed8:	200001ec 	.word	0x200001ec

0800aedc <_strtol_l.constprop.0>:
 800aedc:	2b24      	cmp	r3, #36	@ 0x24
 800aede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aee2:	4686      	mov	lr, r0
 800aee4:	4690      	mov	r8, r2
 800aee6:	d801      	bhi.n	800aeec <_strtol_l.constprop.0+0x10>
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d106      	bne.n	800aefa <_strtol_l.constprop.0+0x1e>
 800aeec:	f001 f8e0 	bl	800c0b0 <__errno>
 800aef0:	2316      	movs	r3, #22
 800aef2:	6003      	str	r3, [r0, #0]
 800aef4:	2000      	movs	r0, #0
 800aef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aefa:	4834      	ldr	r0, [pc, #208]	@ (800afcc <_strtol_l.constprop.0+0xf0>)
 800aefc:	460d      	mov	r5, r1
 800aefe:	462a      	mov	r2, r5
 800af00:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af04:	5d06      	ldrb	r6, [r0, r4]
 800af06:	f016 0608 	ands.w	r6, r6, #8
 800af0a:	d1f8      	bne.n	800aefe <_strtol_l.constprop.0+0x22>
 800af0c:	2c2d      	cmp	r4, #45	@ 0x2d
 800af0e:	d12d      	bne.n	800af6c <_strtol_l.constprop.0+0x90>
 800af10:	782c      	ldrb	r4, [r5, #0]
 800af12:	2601      	movs	r6, #1
 800af14:	1c95      	adds	r5, r2, #2
 800af16:	f033 0210 	bics.w	r2, r3, #16
 800af1a:	d109      	bne.n	800af30 <_strtol_l.constprop.0+0x54>
 800af1c:	2c30      	cmp	r4, #48	@ 0x30
 800af1e:	d12a      	bne.n	800af76 <_strtol_l.constprop.0+0x9a>
 800af20:	782a      	ldrb	r2, [r5, #0]
 800af22:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800af26:	2a58      	cmp	r2, #88	@ 0x58
 800af28:	d125      	bne.n	800af76 <_strtol_l.constprop.0+0x9a>
 800af2a:	786c      	ldrb	r4, [r5, #1]
 800af2c:	2310      	movs	r3, #16
 800af2e:	3502      	adds	r5, #2
 800af30:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800af34:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800af38:	2200      	movs	r2, #0
 800af3a:	fbbc f9f3 	udiv	r9, ip, r3
 800af3e:	4610      	mov	r0, r2
 800af40:	fb03 ca19 	mls	sl, r3, r9, ip
 800af44:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800af48:	2f09      	cmp	r7, #9
 800af4a:	d81b      	bhi.n	800af84 <_strtol_l.constprop.0+0xa8>
 800af4c:	463c      	mov	r4, r7
 800af4e:	42a3      	cmp	r3, r4
 800af50:	dd27      	ble.n	800afa2 <_strtol_l.constprop.0+0xc6>
 800af52:	1c57      	adds	r7, r2, #1
 800af54:	d007      	beq.n	800af66 <_strtol_l.constprop.0+0x8a>
 800af56:	4581      	cmp	r9, r0
 800af58:	d320      	bcc.n	800af9c <_strtol_l.constprop.0+0xc0>
 800af5a:	d101      	bne.n	800af60 <_strtol_l.constprop.0+0x84>
 800af5c:	45a2      	cmp	sl, r4
 800af5e:	db1d      	blt.n	800af9c <_strtol_l.constprop.0+0xc0>
 800af60:	fb00 4003 	mla	r0, r0, r3, r4
 800af64:	2201      	movs	r2, #1
 800af66:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af6a:	e7eb      	b.n	800af44 <_strtol_l.constprop.0+0x68>
 800af6c:	2c2b      	cmp	r4, #43	@ 0x2b
 800af6e:	bf04      	itt	eq
 800af70:	782c      	ldrbeq	r4, [r5, #0]
 800af72:	1c95      	addeq	r5, r2, #2
 800af74:	e7cf      	b.n	800af16 <_strtol_l.constprop.0+0x3a>
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1da      	bne.n	800af30 <_strtol_l.constprop.0+0x54>
 800af7a:	2c30      	cmp	r4, #48	@ 0x30
 800af7c:	bf0c      	ite	eq
 800af7e:	2308      	moveq	r3, #8
 800af80:	230a      	movne	r3, #10
 800af82:	e7d5      	b.n	800af30 <_strtol_l.constprop.0+0x54>
 800af84:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800af88:	2f19      	cmp	r7, #25
 800af8a:	d801      	bhi.n	800af90 <_strtol_l.constprop.0+0xb4>
 800af8c:	3c37      	subs	r4, #55	@ 0x37
 800af8e:	e7de      	b.n	800af4e <_strtol_l.constprop.0+0x72>
 800af90:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800af94:	2f19      	cmp	r7, #25
 800af96:	d804      	bhi.n	800afa2 <_strtol_l.constprop.0+0xc6>
 800af98:	3c57      	subs	r4, #87	@ 0x57
 800af9a:	e7d8      	b.n	800af4e <_strtol_l.constprop.0+0x72>
 800af9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800afa0:	e7e1      	b.n	800af66 <_strtol_l.constprop.0+0x8a>
 800afa2:	1c53      	adds	r3, r2, #1
 800afa4:	d108      	bne.n	800afb8 <_strtol_l.constprop.0+0xdc>
 800afa6:	2322      	movs	r3, #34	@ 0x22
 800afa8:	f8ce 3000 	str.w	r3, [lr]
 800afac:	4660      	mov	r0, ip
 800afae:	f1b8 0f00 	cmp.w	r8, #0
 800afb2:	d0a0      	beq.n	800aef6 <_strtol_l.constprop.0+0x1a>
 800afb4:	1e69      	subs	r1, r5, #1
 800afb6:	e006      	b.n	800afc6 <_strtol_l.constprop.0+0xea>
 800afb8:	b106      	cbz	r6, 800afbc <_strtol_l.constprop.0+0xe0>
 800afba:	4240      	negs	r0, r0
 800afbc:	f1b8 0f00 	cmp.w	r8, #0
 800afc0:	d099      	beq.n	800aef6 <_strtol_l.constprop.0+0x1a>
 800afc2:	2a00      	cmp	r2, #0
 800afc4:	d1f6      	bne.n	800afb4 <_strtol_l.constprop.0+0xd8>
 800afc6:	f8c8 1000 	str.w	r1, [r8]
 800afca:	e794      	b.n	800aef6 <_strtol_l.constprop.0+0x1a>
 800afcc:	0800ebd9 	.word	0x0800ebd9

0800afd0 <_strtol_r>:
 800afd0:	f7ff bf84 	b.w	800aedc <_strtol_l.constprop.0>

0800afd4 <strtol>:
 800afd4:	4613      	mov	r3, r2
 800afd6:	460a      	mov	r2, r1
 800afd8:	4601      	mov	r1, r0
 800afda:	4802      	ldr	r0, [pc, #8]	@ (800afe4 <strtol+0x10>)
 800afdc:	6800      	ldr	r0, [r0, #0]
 800afde:	f7ff bf7d 	b.w	800aedc <_strtol_l.constprop.0>
 800afe2:	bf00      	nop
 800afe4:	20000358 	.word	0x20000358

0800afe8 <__cvt>:
 800afe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afec:	ec57 6b10 	vmov	r6, r7, d0
 800aff0:	2f00      	cmp	r7, #0
 800aff2:	460c      	mov	r4, r1
 800aff4:	4619      	mov	r1, r3
 800aff6:	463b      	mov	r3, r7
 800aff8:	bfbb      	ittet	lt
 800affa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800affe:	461f      	movlt	r7, r3
 800b000:	2300      	movge	r3, #0
 800b002:	232d      	movlt	r3, #45	@ 0x2d
 800b004:	700b      	strb	r3, [r1, #0]
 800b006:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b008:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b00c:	4691      	mov	r9, r2
 800b00e:	f023 0820 	bic.w	r8, r3, #32
 800b012:	bfbc      	itt	lt
 800b014:	4632      	movlt	r2, r6
 800b016:	4616      	movlt	r6, r2
 800b018:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b01c:	d005      	beq.n	800b02a <__cvt+0x42>
 800b01e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b022:	d100      	bne.n	800b026 <__cvt+0x3e>
 800b024:	3401      	adds	r4, #1
 800b026:	2102      	movs	r1, #2
 800b028:	e000      	b.n	800b02c <__cvt+0x44>
 800b02a:	2103      	movs	r1, #3
 800b02c:	ab03      	add	r3, sp, #12
 800b02e:	9301      	str	r3, [sp, #4]
 800b030:	ab02      	add	r3, sp, #8
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	ec47 6b10 	vmov	d0, r6, r7
 800b038:	4653      	mov	r3, sl
 800b03a:	4622      	mov	r2, r4
 800b03c:	f001 f928 	bl	800c290 <_dtoa_r>
 800b040:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b044:	4605      	mov	r5, r0
 800b046:	d119      	bne.n	800b07c <__cvt+0x94>
 800b048:	f019 0f01 	tst.w	r9, #1
 800b04c:	d00e      	beq.n	800b06c <__cvt+0x84>
 800b04e:	eb00 0904 	add.w	r9, r0, r4
 800b052:	2200      	movs	r2, #0
 800b054:	2300      	movs	r3, #0
 800b056:	4630      	mov	r0, r6
 800b058:	4639      	mov	r1, r7
 800b05a:	f7f5 fd6d 	bl	8000b38 <__aeabi_dcmpeq>
 800b05e:	b108      	cbz	r0, 800b064 <__cvt+0x7c>
 800b060:	f8cd 900c 	str.w	r9, [sp, #12]
 800b064:	2230      	movs	r2, #48	@ 0x30
 800b066:	9b03      	ldr	r3, [sp, #12]
 800b068:	454b      	cmp	r3, r9
 800b06a:	d31e      	bcc.n	800b0aa <__cvt+0xc2>
 800b06c:	9b03      	ldr	r3, [sp, #12]
 800b06e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b070:	1b5b      	subs	r3, r3, r5
 800b072:	4628      	mov	r0, r5
 800b074:	6013      	str	r3, [r2, #0]
 800b076:	b004      	add	sp, #16
 800b078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b07c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b080:	eb00 0904 	add.w	r9, r0, r4
 800b084:	d1e5      	bne.n	800b052 <__cvt+0x6a>
 800b086:	7803      	ldrb	r3, [r0, #0]
 800b088:	2b30      	cmp	r3, #48	@ 0x30
 800b08a:	d10a      	bne.n	800b0a2 <__cvt+0xba>
 800b08c:	2200      	movs	r2, #0
 800b08e:	2300      	movs	r3, #0
 800b090:	4630      	mov	r0, r6
 800b092:	4639      	mov	r1, r7
 800b094:	f7f5 fd50 	bl	8000b38 <__aeabi_dcmpeq>
 800b098:	b918      	cbnz	r0, 800b0a2 <__cvt+0xba>
 800b09a:	f1c4 0401 	rsb	r4, r4, #1
 800b09e:	f8ca 4000 	str.w	r4, [sl]
 800b0a2:	f8da 3000 	ldr.w	r3, [sl]
 800b0a6:	4499      	add	r9, r3
 800b0a8:	e7d3      	b.n	800b052 <__cvt+0x6a>
 800b0aa:	1c59      	adds	r1, r3, #1
 800b0ac:	9103      	str	r1, [sp, #12]
 800b0ae:	701a      	strb	r2, [r3, #0]
 800b0b0:	e7d9      	b.n	800b066 <__cvt+0x7e>

0800b0b2 <__exponent>:
 800b0b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0b4:	2900      	cmp	r1, #0
 800b0b6:	bfba      	itte	lt
 800b0b8:	4249      	neglt	r1, r1
 800b0ba:	232d      	movlt	r3, #45	@ 0x2d
 800b0bc:	232b      	movge	r3, #43	@ 0x2b
 800b0be:	2909      	cmp	r1, #9
 800b0c0:	7002      	strb	r2, [r0, #0]
 800b0c2:	7043      	strb	r3, [r0, #1]
 800b0c4:	dd29      	ble.n	800b11a <__exponent+0x68>
 800b0c6:	f10d 0307 	add.w	r3, sp, #7
 800b0ca:	461d      	mov	r5, r3
 800b0cc:	270a      	movs	r7, #10
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	fbb1 f6f7 	udiv	r6, r1, r7
 800b0d4:	fb07 1416 	mls	r4, r7, r6, r1
 800b0d8:	3430      	adds	r4, #48	@ 0x30
 800b0da:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b0de:	460c      	mov	r4, r1
 800b0e0:	2c63      	cmp	r4, #99	@ 0x63
 800b0e2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800b0e6:	4631      	mov	r1, r6
 800b0e8:	dcf1      	bgt.n	800b0ce <__exponent+0x1c>
 800b0ea:	3130      	adds	r1, #48	@ 0x30
 800b0ec:	1e94      	subs	r4, r2, #2
 800b0ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b0f2:	1c41      	adds	r1, r0, #1
 800b0f4:	4623      	mov	r3, r4
 800b0f6:	42ab      	cmp	r3, r5
 800b0f8:	d30a      	bcc.n	800b110 <__exponent+0x5e>
 800b0fa:	f10d 0309 	add.w	r3, sp, #9
 800b0fe:	1a9b      	subs	r3, r3, r2
 800b100:	42ac      	cmp	r4, r5
 800b102:	bf88      	it	hi
 800b104:	2300      	movhi	r3, #0
 800b106:	3302      	adds	r3, #2
 800b108:	4403      	add	r3, r0
 800b10a:	1a18      	subs	r0, r3, r0
 800b10c:	b003      	add	sp, #12
 800b10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b110:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b114:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b118:	e7ed      	b.n	800b0f6 <__exponent+0x44>
 800b11a:	2330      	movs	r3, #48	@ 0x30
 800b11c:	3130      	adds	r1, #48	@ 0x30
 800b11e:	7083      	strb	r3, [r0, #2]
 800b120:	70c1      	strb	r1, [r0, #3]
 800b122:	1d03      	adds	r3, r0, #4
 800b124:	e7f1      	b.n	800b10a <__exponent+0x58>
	...

0800b128 <_printf_float>:
 800b128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b12c:	b08d      	sub	sp, #52	@ 0x34
 800b12e:	460c      	mov	r4, r1
 800b130:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b134:	4616      	mov	r6, r2
 800b136:	461f      	mov	r7, r3
 800b138:	4605      	mov	r5, r0
 800b13a:	f000 ff6f 	bl	800c01c <_localeconv_r>
 800b13e:	6803      	ldr	r3, [r0, #0]
 800b140:	9304      	str	r3, [sp, #16]
 800b142:	4618      	mov	r0, r3
 800b144:	f7f5 f8cc 	bl	80002e0 <strlen>
 800b148:	2300      	movs	r3, #0
 800b14a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b14c:	f8d8 3000 	ldr.w	r3, [r8]
 800b150:	9005      	str	r0, [sp, #20]
 800b152:	3307      	adds	r3, #7
 800b154:	f023 0307 	bic.w	r3, r3, #7
 800b158:	f103 0208 	add.w	r2, r3, #8
 800b15c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b160:	f8d4 b000 	ldr.w	fp, [r4]
 800b164:	f8c8 2000 	str.w	r2, [r8]
 800b168:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b16c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b170:	9307      	str	r3, [sp, #28]
 800b172:	f8cd 8018 	str.w	r8, [sp, #24]
 800b176:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b17a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b17e:	4b9c      	ldr	r3, [pc, #624]	@ (800b3f0 <_printf_float+0x2c8>)
 800b180:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b184:	f7f5 fd0a 	bl	8000b9c <__aeabi_dcmpun>
 800b188:	bb70      	cbnz	r0, 800b1e8 <_printf_float+0xc0>
 800b18a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b18e:	4b98      	ldr	r3, [pc, #608]	@ (800b3f0 <_printf_float+0x2c8>)
 800b190:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b194:	f7f5 fce4 	bl	8000b60 <__aeabi_dcmple>
 800b198:	bb30      	cbnz	r0, 800b1e8 <_printf_float+0xc0>
 800b19a:	2200      	movs	r2, #0
 800b19c:	2300      	movs	r3, #0
 800b19e:	4640      	mov	r0, r8
 800b1a0:	4649      	mov	r1, r9
 800b1a2:	f7f5 fcd3 	bl	8000b4c <__aeabi_dcmplt>
 800b1a6:	b110      	cbz	r0, 800b1ae <_printf_float+0x86>
 800b1a8:	232d      	movs	r3, #45	@ 0x2d
 800b1aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1ae:	4a91      	ldr	r2, [pc, #580]	@ (800b3f4 <_printf_float+0x2cc>)
 800b1b0:	4b91      	ldr	r3, [pc, #580]	@ (800b3f8 <_printf_float+0x2d0>)
 800b1b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b1b6:	bf94      	ite	ls
 800b1b8:	4690      	movls	r8, r2
 800b1ba:	4698      	movhi	r8, r3
 800b1bc:	2303      	movs	r3, #3
 800b1be:	6123      	str	r3, [r4, #16]
 800b1c0:	f02b 0304 	bic.w	r3, fp, #4
 800b1c4:	6023      	str	r3, [r4, #0]
 800b1c6:	f04f 0900 	mov.w	r9, #0
 800b1ca:	9700      	str	r7, [sp, #0]
 800b1cc:	4633      	mov	r3, r6
 800b1ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b1d0:	4621      	mov	r1, r4
 800b1d2:	4628      	mov	r0, r5
 800b1d4:	f000 f9d2 	bl	800b57c <_printf_common>
 800b1d8:	3001      	adds	r0, #1
 800b1da:	f040 808d 	bne.w	800b2f8 <_printf_float+0x1d0>
 800b1de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1e2:	b00d      	add	sp, #52	@ 0x34
 800b1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e8:	4642      	mov	r2, r8
 800b1ea:	464b      	mov	r3, r9
 800b1ec:	4640      	mov	r0, r8
 800b1ee:	4649      	mov	r1, r9
 800b1f0:	f7f5 fcd4 	bl	8000b9c <__aeabi_dcmpun>
 800b1f4:	b140      	cbz	r0, 800b208 <_printf_float+0xe0>
 800b1f6:	464b      	mov	r3, r9
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	bfbc      	itt	lt
 800b1fc:	232d      	movlt	r3, #45	@ 0x2d
 800b1fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b202:	4a7e      	ldr	r2, [pc, #504]	@ (800b3fc <_printf_float+0x2d4>)
 800b204:	4b7e      	ldr	r3, [pc, #504]	@ (800b400 <_printf_float+0x2d8>)
 800b206:	e7d4      	b.n	800b1b2 <_printf_float+0x8a>
 800b208:	6863      	ldr	r3, [r4, #4]
 800b20a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b20e:	9206      	str	r2, [sp, #24]
 800b210:	1c5a      	adds	r2, r3, #1
 800b212:	d13b      	bne.n	800b28c <_printf_float+0x164>
 800b214:	2306      	movs	r3, #6
 800b216:	6063      	str	r3, [r4, #4]
 800b218:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b21c:	2300      	movs	r3, #0
 800b21e:	6022      	str	r2, [r4, #0]
 800b220:	9303      	str	r3, [sp, #12]
 800b222:	ab0a      	add	r3, sp, #40	@ 0x28
 800b224:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b228:	ab09      	add	r3, sp, #36	@ 0x24
 800b22a:	9300      	str	r3, [sp, #0]
 800b22c:	6861      	ldr	r1, [r4, #4]
 800b22e:	ec49 8b10 	vmov	d0, r8, r9
 800b232:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b236:	4628      	mov	r0, r5
 800b238:	f7ff fed6 	bl	800afe8 <__cvt>
 800b23c:	9b06      	ldr	r3, [sp, #24]
 800b23e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b240:	2b47      	cmp	r3, #71	@ 0x47
 800b242:	4680      	mov	r8, r0
 800b244:	d129      	bne.n	800b29a <_printf_float+0x172>
 800b246:	1cc8      	adds	r0, r1, #3
 800b248:	db02      	blt.n	800b250 <_printf_float+0x128>
 800b24a:	6863      	ldr	r3, [r4, #4]
 800b24c:	4299      	cmp	r1, r3
 800b24e:	dd41      	ble.n	800b2d4 <_printf_float+0x1ac>
 800b250:	f1aa 0a02 	sub.w	sl, sl, #2
 800b254:	fa5f fa8a 	uxtb.w	sl, sl
 800b258:	3901      	subs	r1, #1
 800b25a:	4652      	mov	r2, sl
 800b25c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b260:	9109      	str	r1, [sp, #36]	@ 0x24
 800b262:	f7ff ff26 	bl	800b0b2 <__exponent>
 800b266:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b268:	1813      	adds	r3, r2, r0
 800b26a:	2a01      	cmp	r2, #1
 800b26c:	4681      	mov	r9, r0
 800b26e:	6123      	str	r3, [r4, #16]
 800b270:	dc02      	bgt.n	800b278 <_printf_float+0x150>
 800b272:	6822      	ldr	r2, [r4, #0]
 800b274:	07d2      	lsls	r2, r2, #31
 800b276:	d501      	bpl.n	800b27c <_printf_float+0x154>
 800b278:	3301      	adds	r3, #1
 800b27a:	6123      	str	r3, [r4, #16]
 800b27c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b280:	2b00      	cmp	r3, #0
 800b282:	d0a2      	beq.n	800b1ca <_printf_float+0xa2>
 800b284:	232d      	movs	r3, #45	@ 0x2d
 800b286:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b28a:	e79e      	b.n	800b1ca <_printf_float+0xa2>
 800b28c:	9a06      	ldr	r2, [sp, #24]
 800b28e:	2a47      	cmp	r2, #71	@ 0x47
 800b290:	d1c2      	bne.n	800b218 <_printf_float+0xf0>
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1c0      	bne.n	800b218 <_printf_float+0xf0>
 800b296:	2301      	movs	r3, #1
 800b298:	e7bd      	b.n	800b216 <_printf_float+0xee>
 800b29a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b29e:	d9db      	bls.n	800b258 <_printf_float+0x130>
 800b2a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b2a4:	d118      	bne.n	800b2d8 <_printf_float+0x1b0>
 800b2a6:	2900      	cmp	r1, #0
 800b2a8:	6863      	ldr	r3, [r4, #4]
 800b2aa:	dd0b      	ble.n	800b2c4 <_printf_float+0x19c>
 800b2ac:	6121      	str	r1, [r4, #16]
 800b2ae:	b913      	cbnz	r3, 800b2b6 <_printf_float+0x18e>
 800b2b0:	6822      	ldr	r2, [r4, #0]
 800b2b2:	07d0      	lsls	r0, r2, #31
 800b2b4:	d502      	bpl.n	800b2bc <_printf_float+0x194>
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	440b      	add	r3, r1
 800b2ba:	6123      	str	r3, [r4, #16]
 800b2bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b2be:	f04f 0900 	mov.w	r9, #0
 800b2c2:	e7db      	b.n	800b27c <_printf_float+0x154>
 800b2c4:	b913      	cbnz	r3, 800b2cc <_printf_float+0x1a4>
 800b2c6:	6822      	ldr	r2, [r4, #0]
 800b2c8:	07d2      	lsls	r2, r2, #31
 800b2ca:	d501      	bpl.n	800b2d0 <_printf_float+0x1a8>
 800b2cc:	3302      	adds	r3, #2
 800b2ce:	e7f4      	b.n	800b2ba <_printf_float+0x192>
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	e7f2      	b.n	800b2ba <_printf_float+0x192>
 800b2d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b2d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2da:	4299      	cmp	r1, r3
 800b2dc:	db05      	blt.n	800b2ea <_printf_float+0x1c2>
 800b2de:	6823      	ldr	r3, [r4, #0]
 800b2e0:	6121      	str	r1, [r4, #16]
 800b2e2:	07d8      	lsls	r0, r3, #31
 800b2e4:	d5ea      	bpl.n	800b2bc <_printf_float+0x194>
 800b2e6:	1c4b      	adds	r3, r1, #1
 800b2e8:	e7e7      	b.n	800b2ba <_printf_float+0x192>
 800b2ea:	2900      	cmp	r1, #0
 800b2ec:	bfd4      	ite	le
 800b2ee:	f1c1 0202 	rsble	r2, r1, #2
 800b2f2:	2201      	movgt	r2, #1
 800b2f4:	4413      	add	r3, r2
 800b2f6:	e7e0      	b.n	800b2ba <_printf_float+0x192>
 800b2f8:	6823      	ldr	r3, [r4, #0]
 800b2fa:	055a      	lsls	r2, r3, #21
 800b2fc:	d407      	bmi.n	800b30e <_printf_float+0x1e6>
 800b2fe:	6923      	ldr	r3, [r4, #16]
 800b300:	4642      	mov	r2, r8
 800b302:	4631      	mov	r1, r6
 800b304:	4628      	mov	r0, r5
 800b306:	47b8      	blx	r7
 800b308:	3001      	adds	r0, #1
 800b30a:	d12b      	bne.n	800b364 <_printf_float+0x23c>
 800b30c:	e767      	b.n	800b1de <_printf_float+0xb6>
 800b30e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b312:	f240 80dd 	bls.w	800b4d0 <_printf_float+0x3a8>
 800b316:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b31a:	2200      	movs	r2, #0
 800b31c:	2300      	movs	r3, #0
 800b31e:	f7f5 fc0b 	bl	8000b38 <__aeabi_dcmpeq>
 800b322:	2800      	cmp	r0, #0
 800b324:	d033      	beq.n	800b38e <_printf_float+0x266>
 800b326:	4a37      	ldr	r2, [pc, #220]	@ (800b404 <_printf_float+0x2dc>)
 800b328:	2301      	movs	r3, #1
 800b32a:	4631      	mov	r1, r6
 800b32c:	4628      	mov	r0, r5
 800b32e:	47b8      	blx	r7
 800b330:	3001      	adds	r0, #1
 800b332:	f43f af54 	beq.w	800b1de <_printf_float+0xb6>
 800b336:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b33a:	4543      	cmp	r3, r8
 800b33c:	db02      	blt.n	800b344 <_printf_float+0x21c>
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	07d8      	lsls	r0, r3, #31
 800b342:	d50f      	bpl.n	800b364 <_printf_float+0x23c>
 800b344:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b348:	4631      	mov	r1, r6
 800b34a:	4628      	mov	r0, r5
 800b34c:	47b8      	blx	r7
 800b34e:	3001      	adds	r0, #1
 800b350:	f43f af45 	beq.w	800b1de <_printf_float+0xb6>
 800b354:	f04f 0900 	mov.w	r9, #0
 800b358:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b35c:	f104 0a1a 	add.w	sl, r4, #26
 800b360:	45c8      	cmp	r8, r9
 800b362:	dc09      	bgt.n	800b378 <_printf_float+0x250>
 800b364:	6823      	ldr	r3, [r4, #0]
 800b366:	079b      	lsls	r3, r3, #30
 800b368:	f100 8103 	bmi.w	800b572 <_printf_float+0x44a>
 800b36c:	68e0      	ldr	r0, [r4, #12]
 800b36e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b370:	4298      	cmp	r0, r3
 800b372:	bfb8      	it	lt
 800b374:	4618      	movlt	r0, r3
 800b376:	e734      	b.n	800b1e2 <_printf_float+0xba>
 800b378:	2301      	movs	r3, #1
 800b37a:	4652      	mov	r2, sl
 800b37c:	4631      	mov	r1, r6
 800b37e:	4628      	mov	r0, r5
 800b380:	47b8      	blx	r7
 800b382:	3001      	adds	r0, #1
 800b384:	f43f af2b 	beq.w	800b1de <_printf_float+0xb6>
 800b388:	f109 0901 	add.w	r9, r9, #1
 800b38c:	e7e8      	b.n	800b360 <_printf_float+0x238>
 800b38e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b390:	2b00      	cmp	r3, #0
 800b392:	dc39      	bgt.n	800b408 <_printf_float+0x2e0>
 800b394:	4a1b      	ldr	r2, [pc, #108]	@ (800b404 <_printf_float+0x2dc>)
 800b396:	2301      	movs	r3, #1
 800b398:	4631      	mov	r1, r6
 800b39a:	4628      	mov	r0, r5
 800b39c:	47b8      	blx	r7
 800b39e:	3001      	adds	r0, #1
 800b3a0:	f43f af1d 	beq.w	800b1de <_printf_float+0xb6>
 800b3a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b3a8:	ea59 0303 	orrs.w	r3, r9, r3
 800b3ac:	d102      	bne.n	800b3b4 <_printf_float+0x28c>
 800b3ae:	6823      	ldr	r3, [r4, #0]
 800b3b0:	07d9      	lsls	r1, r3, #31
 800b3b2:	d5d7      	bpl.n	800b364 <_printf_float+0x23c>
 800b3b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3b8:	4631      	mov	r1, r6
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	47b8      	blx	r7
 800b3be:	3001      	adds	r0, #1
 800b3c0:	f43f af0d 	beq.w	800b1de <_printf_float+0xb6>
 800b3c4:	f04f 0a00 	mov.w	sl, #0
 800b3c8:	f104 0b1a 	add.w	fp, r4, #26
 800b3cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3ce:	425b      	negs	r3, r3
 800b3d0:	4553      	cmp	r3, sl
 800b3d2:	dc01      	bgt.n	800b3d8 <_printf_float+0x2b0>
 800b3d4:	464b      	mov	r3, r9
 800b3d6:	e793      	b.n	800b300 <_printf_float+0x1d8>
 800b3d8:	2301      	movs	r3, #1
 800b3da:	465a      	mov	r2, fp
 800b3dc:	4631      	mov	r1, r6
 800b3de:	4628      	mov	r0, r5
 800b3e0:	47b8      	blx	r7
 800b3e2:	3001      	adds	r0, #1
 800b3e4:	f43f aefb 	beq.w	800b1de <_printf_float+0xb6>
 800b3e8:	f10a 0a01 	add.w	sl, sl, #1
 800b3ec:	e7ee      	b.n	800b3cc <_printf_float+0x2a4>
 800b3ee:	bf00      	nop
 800b3f0:	7fefffff 	.word	0x7fefffff
 800b3f4:	0800ecd9 	.word	0x0800ecd9
 800b3f8:	0800ecdd 	.word	0x0800ecdd
 800b3fc:	0800ece1 	.word	0x0800ece1
 800b400:	0800ece5 	.word	0x0800ece5
 800b404:	0800ece9 	.word	0x0800ece9
 800b408:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b40a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b40e:	4553      	cmp	r3, sl
 800b410:	bfa8      	it	ge
 800b412:	4653      	movge	r3, sl
 800b414:	2b00      	cmp	r3, #0
 800b416:	4699      	mov	r9, r3
 800b418:	dc36      	bgt.n	800b488 <_printf_float+0x360>
 800b41a:	f04f 0b00 	mov.w	fp, #0
 800b41e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b422:	f104 021a 	add.w	r2, r4, #26
 800b426:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b428:	9306      	str	r3, [sp, #24]
 800b42a:	eba3 0309 	sub.w	r3, r3, r9
 800b42e:	455b      	cmp	r3, fp
 800b430:	dc31      	bgt.n	800b496 <_printf_float+0x36e>
 800b432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b434:	459a      	cmp	sl, r3
 800b436:	dc3a      	bgt.n	800b4ae <_printf_float+0x386>
 800b438:	6823      	ldr	r3, [r4, #0]
 800b43a:	07da      	lsls	r2, r3, #31
 800b43c:	d437      	bmi.n	800b4ae <_printf_float+0x386>
 800b43e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b440:	ebaa 0903 	sub.w	r9, sl, r3
 800b444:	9b06      	ldr	r3, [sp, #24]
 800b446:	ebaa 0303 	sub.w	r3, sl, r3
 800b44a:	4599      	cmp	r9, r3
 800b44c:	bfa8      	it	ge
 800b44e:	4699      	movge	r9, r3
 800b450:	f1b9 0f00 	cmp.w	r9, #0
 800b454:	dc33      	bgt.n	800b4be <_printf_float+0x396>
 800b456:	f04f 0800 	mov.w	r8, #0
 800b45a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b45e:	f104 0b1a 	add.w	fp, r4, #26
 800b462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b464:	ebaa 0303 	sub.w	r3, sl, r3
 800b468:	eba3 0309 	sub.w	r3, r3, r9
 800b46c:	4543      	cmp	r3, r8
 800b46e:	f77f af79 	ble.w	800b364 <_printf_float+0x23c>
 800b472:	2301      	movs	r3, #1
 800b474:	465a      	mov	r2, fp
 800b476:	4631      	mov	r1, r6
 800b478:	4628      	mov	r0, r5
 800b47a:	47b8      	blx	r7
 800b47c:	3001      	adds	r0, #1
 800b47e:	f43f aeae 	beq.w	800b1de <_printf_float+0xb6>
 800b482:	f108 0801 	add.w	r8, r8, #1
 800b486:	e7ec      	b.n	800b462 <_printf_float+0x33a>
 800b488:	4642      	mov	r2, r8
 800b48a:	4631      	mov	r1, r6
 800b48c:	4628      	mov	r0, r5
 800b48e:	47b8      	blx	r7
 800b490:	3001      	adds	r0, #1
 800b492:	d1c2      	bne.n	800b41a <_printf_float+0x2f2>
 800b494:	e6a3      	b.n	800b1de <_printf_float+0xb6>
 800b496:	2301      	movs	r3, #1
 800b498:	4631      	mov	r1, r6
 800b49a:	4628      	mov	r0, r5
 800b49c:	9206      	str	r2, [sp, #24]
 800b49e:	47b8      	blx	r7
 800b4a0:	3001      	adds	r0, #1
 800b4a2:	f43f ae9c 	beq.w	800b1de <_printf_float+0xb6>
 800b4a6:	9a06      	ldr	r2, [sp, #24]
 800b4a8:	f10b 0b01 	add.w	fp, fp, #1
 800b4ac:	e7bb      	b.n	800b426 <_printf_float+0x2fe>
 800b4ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4b2:	4631      	mov	r1, r6
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	47b8      	blx	r7
 800b4b8:	3001      	adds	r0, #1
 800b4ba:	d1c0      	bne.n	800b43e <_printf_float+0x316>
 800b4bc:	e68f      	b.n	800b1de <_printf_float+0xb6>
 800b4be:	9a06      	ldr	r2, [sp, #24]
 800b4c0:	464b      	mov	r3, r9
 800b4c2:	4442      	add	r2, r8
 800b4c4:	4631      	mov	r1, r6
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	47b8      	blx	r7
 800b4ca:	3001      	adds	r0, #1
 800b4cc:	d1c3      	bne.n	800b456 <_printf_float+0x32e>
 800b4ce:	e686      	b.n	800b1de <_printf_float+0xb6>
 800b4d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b4d4:	f1ba 0f01 	cmp.w	sl, #1
 800b4d8:	dc01      	bgt.n	800b4de <_printf_float+0x3b6>
 800b4da:	07db      	lsls	r3, r3, #31
 800b4dc:	d536      	bpl.n	800b54c <_printf_float+0x424>
 800b4de:	2301      	movs	r3, #1
 800b4e0:	4642      	mov	r2, r8
 800b4e2:	4631      	mov	r1, r6
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	47b8      	blx	r7
 800b4e8:	3001      	adds	r0, #1
 800b4ea:	f43f ae78 	beq.w	800b1de <_printf_float+0xb6>
 800b4ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4f2:	4631      	mov	r1, r6
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	47b8      	blx	r7
 800b4f8:	3001      	adds	r0, #1
 800b4fa:	f43f ae70 	beq.w	800b1de <_printf_float+0xb6>
 800b4fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b502:	2200      	movs	r2, #0
 800b504:	2300      	movs	r3, #0
 800b506:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b50a:	f7f5 fb15 	bl	8000b38 <__aeabi_dcmpeq>
 800b50e:	b9c0      	cbnz	r0, 800b542 <_printf_float+0x41a>
 800b510:	4653      	mov	r3, sl
 800b512:	f108 0201 	add.w	r2, r8, #1
 800b516:	4631      	mov	r1, r6
 800b518:	4628      	mov	r0, r5
 800b51a:	47b8      	blx	r7
 800b51c:	3001      	adds	r0, #1
 800b51e:	d10c      	bne.n	800b53a <_printf_float+0x412>
 800b520:	e65d      	b.n	800b1de <_printf_float+0xb6>
 800b522:	2301      	movs	r3, #1
 800b524:	465a      	mov	r2, fp
 800b526:	4631      	mov	r1, r6
 800b528:	4628      	mov	r0, r5
 800b52a:	47b8      	blx	r7
 800b52c:	3001      	adds	r0, #1
 800b52e:	f43f ae56 	beq.w	800b1de <_printf_float+0xb6>
 800b532:	f108 0801 	add.w	r8, r8, #1
 800b536:	45d0      	cmp	r8, sl
 800b538:	dbf3      	blt.n	800b522 <_printf_float+0x3fa>
 800b53a:	464b      	mov	r3, r9
 800b53c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b540:	e6df      	b.n	800b302 <_printf_float+0x1da>
 800b542:	f04f 0800 	mov.w	r8, #0
 800b546:	f104 0b1a 	add.w	fp, r4, #26
 800b54a:	e7f4      	b.n	800b536 <_printf_float+0x40e>
 800b54c:	2301      	movs	r3, #1
 800b54e:	4642      	mov	r2, r8
 800b550:	e7e1      	b.n	800b516 <_printf_float+0x3ee>
 800b552:	2301      	movs	r3, #1
 800b554:	464a      	mov	r2, r9
 800b556:	4631      	mov	r1, r6
 800b558:	4628      	mov	r0, r5
 800b55a:	47b8      	blx	r7
 800b55c:	3001      	adds	r0, #1
 800b55e:	f43f ae3e 	beq.w	800b1de <_printf_float+0xb6>
 800b562:	f108 0801 	add.w	r8, r8, #1
 800b566:	68e3      	ldr	r3, [r4, #12]
 800b568:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b56a:	1a5b      	subs	r3, r3, r1
 800b56c:	4543      	cmp	r3, r8
 800b56e:	dcf0      	bgt.n	800b552 <_printf_float+0x42a>
 800b570:	e6fc      	b.n	800b36c <_printf_float+0x244>
 800b572:	f04f 0800 	mov.w	r8, #0
 800b576:	f104 0919 	add.w	r9, r4, #25
 800b57a:	e7f4      	b.n	800b566 <_printf_float+0x43e>

0800b57c <_printf_common>:
 800b57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b580:	4616      	mov	r6, r2
 800b582:	4698      	mov	r8, r3
 800b584:	688a      	ldr	r2, [r1, #8]
 800b586:	690b      	ldr	r3, [r1, #16]
 800b588:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b58c:	4293      	cmp	r3, r2
 800b58e:	bfb8      	it	lt
 800b590:	4613      	movlt	r3, r2
 800b592:	6033      	str	r3, [r6, #0]
 800b594:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b598:	4607      	mov	r7, r0
 800b59a:	460c      	mov	r4, r1
 800b59c:	b10a      	cbz	r2, 800b5a2 <_printf_common+0x26>
 800b59e:	3301      	adds	r3, #1
 800b5a0:	6033      	str	r3, [r6, #0]
 800b5a2:	6823      	ldr	r3, [r4, #0]
 800b5a4:	0699      	lsls	r1, r3, #26
 800b5a6:	bf42      	ittt	mi
 800b5a8:	6833      	ldrmi	r3, [r6, #0]
 800b5aa:	3302      	addmi	r3, #2
 800b5ac:	6033      	strmi	r3, [r6, #0]
 800b5ae:	6825      	ldr	r5, [r4, #0]
 800b5b0:	f015 0506 	ands.w	r5, r5, #6
 800b5b4:	d106      	bne.n	800b5c4 <_printf_common+0x48>
 800b5b6:	f104 0a19 	add.w	sl, r4, #25
 800b5ba:	68e3      	ldr	r3, [r4, #12]
 800b5bc:	6832      	ldr	r2, [r6, #0]
 800b5be:	1a9b      	subs	r3, r3, r2
 800b5c0:	42ab      	cmp	r3, r5
 800b5c2:	dc26      	bgt.n	800b612 <_printf_common+0x96>
 800b5c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b5c8:	6822      	ldr	r2, [r4, #0]
 800b5ca:	3b00      	subs	r3, #0
 800b5cc:	bf18      	it	ne
 800b5ce:	2301      	movne	r3, #1
 800b5d0:	0692      	lsls	r2, r2, #26
 800b5d2:	d42b      	bmi.n	800b62c <_printf_common+0xb0>
 800b5d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b5d8:	4641      	mov	r1, r8
 800b5da:	4638      	mov	r0, r7
 800b5dc:	47c8      	blx	r9
 800b5de:	3001      	adds	r0, #1
 800b5e0:	d01e      	beq.n	800b620 <_printf_common+0xa4>
 800b5e2:	6823      	ldr	r3, [r4, #0]
 800b5e4:	6922      	ldr	r2, [r4, #16]
 800b5e6:	f003 0306 	and.w	r3, r3, #6
 800b5ea:	2b04      	cmp	r3, #4
 800b5ec:	bf02      	ittt	eq
 800b5ee:	68e5      	ldreq	r5, [r4, #12]
 800b5f0:	6833      	ldreq	r3, [r6, #0]
 800b5f2:	1aed      	subeq	r5, r5, r3
 800b5f4:	68a3      	ldr	r3, [r4, #8]
 800b5f6:	bf0c      	ite	eq
 800b5f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5fc:	2500      	movne	r5, #0
 800b5fe:	4293      	cmp	r3, r2
 800b600:	bfc4      	itt	gt
 800b602:	1a9b      	subgt	r3, r3, r2
 800b604:	18ed      	addgt	r5, r5, r3
 800b606:	2600      	movs	r6, #0
 800b608:	341a      	adds	r4, #26
 800b60a:	42b5      	cmp	r5, r6
 800b60c:	d11a      	bne.n	800b644 <_printf_common+0xc8>
 800b60e:	2000      	movs	r0, #0
 800b610:	e008      	b.n	800b624 <_printf_common+0xa8>
 800b612:	2301      	movs	r3, #1
 800b614:	4652      	mov	r2, sl
 800b616:	4641      	mov	r1, r8
 800b618:	4638      	mov	r0, r7
 800b61a:	47c8      	blx	r9
 800b61c:	3001      	adds	r0, #1
 800b61e:	d103      	bne.n	800b628 <_printf_common+0xac>
 800b620:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b628:	3501      	adds	r5, #1
 800b62a:	e7c6      	b.n	800b5ba <_printf_common+0x3e>
 800b62c:	18e1      	adds	r1, r4, r3
 800b62e:	1c5a      	adds	r2, r3, #1
 800b630:	2030      	movs	r0, #48	@ 0x30
 800b632:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b636:	4422      	add	r2, r4
 800b638:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b63c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b640:	3302      	adds	r3, #2
 800b642:	e7c7      	b.n	800b5d4 <_printf_common+0x58>
 800b644:	2301      	movs	r3, #1
 800b646:	4622      	mov	r2, r4
 800b648:	4641      	mov	r1, r8
 800b64a:	4638      	mov	r0, r7
 800b64c:	47c8      	blx	r9
 800b64e:	3001      	adds	r0, #1
 800b650:	d0e6      	beq.n	800b620 <_printf_common+0xa4>
 800b652:	3601      	adds	r6, #1
 800b654:	e7d9      	b.n	800b60a <_printf_common+0x8e>
	...

0800b658 <_printf_i>:
 800b658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b65c:	7e0f      	ldrb	r7, [r1, #24]
 800b65e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b660:	2f78      	cmp	r7, #120	@ 0x78
 800b662:	4691      	mov	r9, r2
 800b664:	4680      	mov	r8, r0
 800b666:	460c      	mov	r4, r1
 800b668:	469a      	mov	sl, r3
 800b66a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b66e:	d807      	bhi.n	800b680 <_printf_i+0x28>
 800b670:	2f62      	cmp	r7, #98	@ 0x62
 800b672:	d80a      	bhi.n	800b68a <_printf_i+0x32>
 800b674:	2f00      	cmp	r7, #0
 800b676:	f000 80d2 	beq.w	800b81e <_printf_i+0x1c6>
 800b67a:	2f58      	cmp	r7, #88	@ 0x58
 800b67c:	f000 80b9 	beq.w	800b7f2 <_printf_i+0x19a>
 800b680:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b684:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b688:	e03a      	b.n	800b700 <_printf_i+0xa8>
 800b68a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b68e:	2b15      	cmp	r3, #21
 800b690:	d8f6      	bhi.n	800b680 <_printf_i+0x28>
 800b692:	a101      	add	r1, pc, #4	@ (adr r1, 800b698 <_printf_i+0x40>)
 800b694:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b698:	0800b6f1 	.word	0x0800b6f1
 800b69c:	0800b705 	.word	0x0800b705
 800b6a0:	0800b681 	.word	0x0800b681
 800b6a4:	0800b681 	.word	0x0800b681
 800b6a8:	0800b681 	.word	0x0800b681
 800b6ac:	0800b681 	.word	0x0800b681
 800b6b0:	0800b705 	.word	0x0800b705
 800b6b4:	0800b681 	.word	0x0800b681
 800b6b8:	0800b681 	.word	0x0800b681
 800b6bc:	0800b681 	.word	0x0800b681
 800b6c0:	0800b681 	.word	0x0800b681
 800b6c4:	0800b805 	.word	0x0800b805
 800b6c8:	0800b72f 	.word	0x0800b72f
 800b6cc:	0800b7bf 	.word	0x0800b7bf
 800b6d0:	0800b681 	.word	0x0800b681
 800b6d4:	0800b681 	.word	0x0800b681
 800b6d8:	0800b827 	.word	0x0800b827
 800b6dc:	0800b681 	.word	0x0800b681
 800b6e0:	0800b72f 	.word	0x0800b72f
 800b6e4:	0800b681 	.word	0x0800b681
 800b6e8:	0800b681 	.word	0x0800b681
 800b6ec:	0800b7c7 	.word	0x0800b7c7
 800b6f0:	6833      	ldr	r3, [r6, #0]
 800b6f2:	1d1a      	adds	r2, r3, #4
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	6032      	str	r2, [r6, #0]
 800b6f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b700:	2301      	movs	r3, #1
 800b702:	e09d      	b.n	800b840 <_printf_i+0x1e8>
 800b704:	6833      	ldr	r3, [r6, #0]
 800b706:	6820      	ldr	r0, [r4, #0]
 800b708:	1d19      	adds	r1, r3, #4
 800b70a:	6031      	str	r1, [r6, #0]
 800b70c:	0606      	lsls	r6, r0, #24
 800b70e:	d501      	bpl.n	800b714 <_printf_i+0xbc>
 800b710:	681d      	ldr	r5, [r3, #0]
 800b712:	e003      	b.n	800b71c <_printf_i+0xc4>
 800b714:	0645      	lsls	r5, r0, #25
 800b716:	d5fb      	bpl.n	800b710 <_printf_i+0xb8>
 800b718:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b71c:	2d00      	cmp	r5, #0
 800b71e:	da03      	bge.n	800b728 <_printf_i+0xd0>
 800b720:	232d      	movs	r3, #45	@ 0x2d
 800b722:	426d      	negs	r5, r5
 800b724:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b728:	4859      	ldr	r0, [pc, #356]	@ (800b890 <_printf_i+0x238>)
 800b72a:	230a      	movs	r3, #10
 800b72c:	e011      	b.n	800b752 <_printf_i+0xfa>
 800b72e:	6821      	ldr	r1, [r4, #0]
 800b730:	6833      	ldr	r3, [r6, #0]
 800b732:	0608      	lsls	r0, r1, #24
 800b734:	f853 5b04 	ldr.w	r5, [r3], #4
 800b738:	d402      	bmi.n	800b740 <_printf_i+0xe8>
 800b73a:	0649      	lsls	r1, r1, #25
 800b73c:	bf48      	it	mi
 800b73e:	b2ad      	uxthmi	r5, r5
 800b740:	2f6f      	cmp	r7, #111	@ 0x6f
 800b742:	4853      	ldr	r0, [pc, #332]	@ (800b890 <_printf_i+0x238>)
 800b744:	6033      	str	r3, [r6, #0]
 800b746:	bf14      	ite	ne
 800b748:	230a      	movne	r3, #10
 800b74a:	2308      	moveq	r3, #8
 800b74c:	2100      	movs	r1, #0
 800b74e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b752:	6866      	ldr	r6, [r4, #4]
 800b754:	60a6      	str	r6, [r4, #8]
 800b756:	2e00      	cmp	r6, #0
 800b758:	bfa2      	ittt	ge
 800b75a:	6821      	ldrge	r1, [r4, #0]
 800b75c:	f021 0104 	bicge.w	r1, r1, #4
 800b760:	6021      	strge	r1, [r4, #0]
 800b762:	b90d      	cbnz	r5, 800b768 <_printf_i+0x110>
 800b764:	2e00      	cmp	r6, #0
 800b766:	d04b      	beq.n	800b800 <_printf_i+0x1a8>
 800b768:	4616      	mov	r6, r2
 800b76a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b76e:	fb03 5711 	mls	r7, r3, r1, r5
 800b772:	5dc7      	ldrb	r7, [r0, r7]
 800b774:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b778:	462f      	mov	r7, r5
 800b77a:	42bb      	cmp	r3, r7
 800b77c:	460d      	mov	r5, r1
 800b77e:	d9f4      	bls.n	800b76a <_printf_i+0x112>
 800b780:	2b08      	cmp	r3, #8
 800b782:	d10b      	bne.n	800b79c <_printf_i+0x144>
 800b784:	6823      	ldr	r3, [r4, #0]
 800b786:	07df      	lsls	r7, r3, #31
 800b788:	d508      	bpl.n	800b79c <_printf_i+0x144>
 800b78a:	6923      	ldr	r3, [r4, #16]
 800b78c:	6861      	ldr	r1, [r4, #4]
 800b78e:	4299      	cmp	r1, r3
 800b790:	bfde      	ittt	le
 800b792:	2330      	movle	r3, #48	@ 0x30
 800b794:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b798:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b79c:	1b92      	subs	r2, r2, r6
 800b79e:	6122      	str	r2, [r4, #16]
 800b7a0:	f8cd a000 	str.w	sl, [sp]
 800b7a4:	464b      	mov	r3, r9
 800b7a6:	aa03      	add	r2, sp, #12
 800b7a8:	4621      	mov	r1, r4
 800b7aa:	4640      	mov	r0, r8
 800b7ac:	f7ff fee6 	bl	800b57c <_printf_common>
 800b7b0:	3001      	adds	r0, #1
 800b7b2:	d14a      	bne.n	800b84a <_printf_i+0x1f2>
 800b7b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7b8:	b004      	add	sp, #16
 800b7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7be:	6823      	ldr	r3, [r4, #0]
 800b7c0:	f043 0320 	orr.w	r3, r3, #32
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	4833      	ldr	r0, [pc, #204]	@ (800b894 <_printf_i+0x23c>)
 800b7c8:	2778      	movs	r7, #120	@ 0x78
 800b7ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b7ce:	6823      	ldr	r3, [r4, #0]
 800b7d0:	6831      	ldr	r1, [r6, #0]
 800b7d2:	061f      	lsls	r7, r3, #24
 800b7d4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b7d8:	d402      	bmi.n	800b7e0 <_printf_i+0x188>
 800b7da:	065f      	lsls	r7, r3, #25
 800b7dc:	bf48      	it	mi
 800b7de:	b2ad      	uxthmi	r5, r5
 800b7e0:	6031      	str	r1, [r6, #0]
 800b7e2:	07d9      	lsls	r1, r3, #31
 800b7e4:	bf44      	itt	mi
 800b7e6:	f043 0320 	orrmi.w	r3, r3, #32
 800b7ea:	6023      	strmi	r3, [r4, #0]
 800b7ec:	b11d      	cbz	r5, 800b7f6 <_printf_i+0x19e>
 800b7ee:	2310      	movs	r3, #16
 800b7f0:	e7ac      	b.n	800b74c <_printf_i+0xf4>
 800b7f2:	4827      	ldr	r0, [pc, #156]	@ (800b890 <_printf_i+0x238>)
 800b7f4:	e7e9      	b.n	800b7ca <_printf_i+0x172>
 800b7f6:	6823      	ldr	r3, [r4, #0]
 800b7f8:	f023 0320 	bic.w	r3, r3, #32
 800b7fc:	6023      	str	r3, [r4, #0]
 800b7fe:	e7f6      	b.n	800b7ee <_printf_i+0x196>
 800b800:	4616      	mov	r6, r2
 800b802:	e7bd      	b.n	800b780 <_printf_i+0x128>
 800b804:	6833      	ldr	r3, [r6, #0]
 800b806:	6825      	ldr	r5, [r4, #0]
 800b808:	6961      	ldr	r1, [r4, #20]
 800b80a:	1d18      	adds	r0, r3, #4
 800b80c:	6030      	str	r0, [r6, #0]
 800b80e:	062e      	lsls	r6, r5, #24
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	d501      	bpl.n	800b818 <_printf_i+0x1c0>
 800b814:	6019      	str	r1, [r3, #0]
 800b816:	e002      	b.n	800b81e <_printf_i+0x1c6>
 800b818:	0668      	lsls	r0, r5, #25
 800b81a:	d5fb      	bpl.n	800b814 <_printf_i+0x1bc>
 800b81c:	8019      	strh	r1, [r3, #0]
 800b81e:	2300      	movs	r3, #0
 800b820:	6123      	str	r3, [r4, #16]
 800b822:	4616      	mov	r6, r2
 800b824:	e7bc      	b.n	800b7a0 <_printf_i+0x148>
 800b826:	6833      	ldr	r3, [r6, #0]
 800b828:	1d1a      	adds	r2, r3, #4
 800b82a:	6032      	str	r2, [r6, #0]
 800b82c:	681e      	ldr	r6, [r3, #0]
 800b82e:	6862      	ldr	r2, [r4, #4]
 800b830:	2100      	movs	r1, #0
 800b832:	4630      	mov	r0, r6
 800b834:	f7f4 fd04 	bl	8000240 <memchr>
 800b838:	b108      	cbz	r0, 800b83e <_printf_i+0x1e6>
 800b83a:	1b80      	subs	r0, r0, r6
 800b83c:	6060      	str	r0, [r4, #4]
 800b83e:	6863      	ldr	r3, [r4, #4]
 800b840:	6123      	str	r3, [r4, #16]
 800b842:	2300      	movs	r3, #0
 800b844:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b848:	e7aa      	b.n	800b7a0 <_printf_i+0x148>
 800b84a:	6923      	ldr	r3, [r4, #16]
 800b84c:	4632      	mov	r2, r6
 800b84e:	4649      	mov	r1, r9
 800b850:	4640      	mov	r0, r8
 800b852:	47d0      	blx	sl
 800b854:	3001      	adds	r0, #1
 800b856:	d0ad      	beq.n	800b7b4 <_printf_i+0x15c>
 800b858:	6823      	ldr	r3, [r4, #0]
 800b85a:	079b      	lsls	r3, r3, #30
 800b85c:	d413      	bmi.n	800b886 <_printf_i+0x22e>
 800b85e:	68e0      	ldr	r0, [r4, #12]
 800b860:	9b03      	ldr	r3, [sp, #12]
 800b862:	4298      	cmp	r0, r3
 800b864:	bfb8      	it	lt
 800b866:	4618      	movlt	r0, r3
 800b868:	e7a6      	b.n	800b7b8 <_printf_i+0x160>
 800b86a:	2301      	movs	r3, #1
 800b86c:	4632      	mov	r2, r6
 800b86e:	4649      	mov	r1, r9
 800b870:	4640      	mov	r0, r8
 800b872:	47d0      	blx	sl
 800b874:	3001      	adds	r0, #1
 800b876:	d09d      	beq.n	800b7b4 <_printf_i+0x15c>
 800b878:	3501      	adds	r5, #1
 800b87a:	68e3      	ldr	r3, [r4, #12]
 800b87c:	9903      	ldr	r1, [sp, #12]
 800b87e:	1a5b      	subs	r3, r3, r1
 800b880:	42ab      	cmp	r3, r5
 800b882:	dcf2      	bgt.n	800b86a <_printf_i+0x212>
 800b884:	e7eb      	b.n	800b85e <_printf_i+0x206>
 800b886:	2500      	movs	r5, #0
 800b888:	f104 0619 	add.w	r6, r4, #25
 800b88c:	e7f5      	b.n	800b87a <_printf_i+0x222>
 800b88e:	bf00      	nop
 800b890:	0800eceb 	.word	0x0800eceb
 800b894:	0800ecfc 	.word	0x0800ecfc

0800b898 <_scanf_float>:
 800b898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b89c:	b087      	sub	sp, #28
 800b89e:	4617      	mov	r7, r2
 800b8a0:	9303      	str	r3, [sp, #12]
 800b8a2:	688b      	ldr	r3, [r1, #8]
 800b8a4:	1e5a      	subs	r2, r3, #1
 800b8a6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b8aa:	bf81      	itttt	hi
 800b8ac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b8b0:	eb03 0b05 	addhi.w	fp, r3, r5
 800b8b4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b8b8:	608b      	strhi	r3, [r1, #8]
 800b8ba:	680b      	ldr	r3, [r1, #0]
 800b8bc:	460a      	mov	r2, r1
 800b8be:	f04f 0500 	mov.w	r5, #0
 800b8c2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b8c6:	f842 3b1c 	str.w	r3, [r2], #28
 800b8ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b8ce:	4680      	mov	r8, r0
 800b8d0:	460c      	mov	r4, r1
 800b8d2:	bf98      	it	ls
 800b8d4:	f04f 0b00 	movls.w	fp, #0
 800b8d8:	9201      	str	r2, [sp, #4]
 800b8da:	4616      	mov	r6, r2
 800b8dc:	46aa      	mov	sl, r5
 800b8de:	46a9      	mov	r9, r5
 800b8e0:	9502      	str	r5, [sp, #8]
 800b8e2:	68a2      	ldr	r2, [r4, #8]
 800b8e4:	b152      	cbz	r2, 800b8fc <_scanf_float+0x64>
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	2b4e      	cmp	r3, #78	@ 0x4e
 800b8ec:	d864      	bhi.n	800b9b8 <_scanf_float+0x120>
 800b8ee:	2b40      	cmp	r3, #64	@ 0x40
 800b8f0:	d83c      	bhi.n	800b96c <_scanf_float+0xd4>
 800b8f2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b8f6:	b2c8      	uxtb	r0, r1
 800b8f8:	280e      	cmp	r0, #14
 800b8fa:	d93a      	bls.n	800b972 <_scanf_float+0xda>
 800b8fc:	f1b9 0f00 	cmp.w	r9, #0
 800b900:	d003      	beq.n	800b90a <_scanf_float+0x72>
 800b902:	6823      	ldr	r3, [r4, #0]
 800b904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b908:	6023      	str	r3, [r4, #0]
 800b90a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b90e:	f1ba 0f01 	cmp.w	sl, #1
 800b912:	f200 8117 	bhi.w	800bb44 <_scanf_float+0x2ac>
 800b916:	9b01      	ldr	r3, [sp, #4]
 800b918:	429e      	cmp	r6, r3
 800b91a:	f200 8108 	bhi.w	800bb2e <_scanf_float+0x296>
 800b91e:	2001      	movs	r0, #1
 800b920:	b007      	add	sp, #28
 800b922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b926:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b92a:	2a0d      	cmp	r2, #13
 800b92c:	d8e6      	bhi.n	800b8fc <_scanf_float+0x64>
 800b92e:	a101      	add	r1, pc, #4	@ (adr r1, 800b934 <_scanf_float+0x9c>)
 800b930:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b934:	0800ba7b 	.word	0x0800ba7b
 800b938:	0800b8fd 	.word	0x0800b8fd
 800b93c:	0800b8fd 	.word	0x0800b8fd
 800b940:	0800b8fd 	.word	0x0800b8fd
 800b944:	0800badb 	.word	0x0800badb
 800b948:	0800bab3 	.word	0x0800bab3
 800b94c:	0800b8fd 	.word	0x0800b8fd
 800b950:	0800b8fd 	.word	0x0800b8fd
 800b954:	0800ba89 	.word	0x0800ba89
 800b958:	0800b8fd 	.word	0x0800b8fd
 800b95c:	0800b8fd 	.word	0x0800b8fd
 800b960:	0800b8fd 	.word	0x0800b8fd
 800b964:	0800b8fd 	.word	0x0800b8fd
 800b968:	0800ba41 	.word	0x0800ba41
 800b96c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b970:	e7db      	b.n	800b92a <_scanf_float+0x92>
 800b972:	290e      	cmp	r1, #14
 800b974:	d8c2      	bhi.n	800b8fc <_scanf_float+0x64>
 800b976:	a001      	add	r0, pc, #4	@ (adr r0, 800b97c <_scanf_float+0xe4>)
 800b978:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b97c:	0800ba31 	.word	0x0800ba31
 800b980:	0800b8fd 	.word	0x0800b8fd
 800b984:	0800ba31 	.word	0x0800ba31
 800b988:	0800bac7 	.word	0x0800bac7
 800b98c:	0800b8fd 	.word	0x0800b8fd
 800b990:	0800b9d9 	.word	0x0800b9d9
 800b994:	0800ba17 	.word	0x0800ba17
 800b998:	0800ba17 	.word	0x0800ba17
 800b99c:	0800ba17 	.word	0x0800ba17
 800b9a0:	0800ba17 	.word	0x0800ba17
 800b9a4:	0800ba17 	.word	0x0800ba17
 800b9a8:	0800ba17 	.word	0x0800ba17
 800b9ac:	0800ba17 	.word	0x0800ba17
 800b9b0:	0800ba17 	.word	0x0800ba17
 800b9b4:	0800ba17 	.word	0x0800ba17
 800b9b8:	2b6e      	cmp	r3, #110	@ 0x6e
 800b9ba:	d809      	bhi.n	800b9d0 <_scanf_float+0x138>
 800b9bc:	2b60      	cmp	r3, #96	@ 0x60
 800b9be:	d8b2      	bhi.n	800b926 <_scanf_float+0x8e>
 800b9c0:	2b54      	cmp	r3, #84	@ 0x54
 800b9c2:	d07b      	beq.n	800babc <_scanf_float+0x224>
 800b9c4:	2b59      	cmp	r3, #89	@ 0x59
 800b9c6:	d199      	bne.n	800b8fc <_scanf_float+0x64>
 800b9c8:	2d07      	cmp	r5, #7
 800b9ca:	d197      	bne.n	800b8fc <_scanf_float+0x64>
 800b9cc:	2508      	movs	r5, #8
 800b9ce:	e02c      	b.n	800ba2a <_scanf_float+0x192>
 800b9d0:	2b74      	cmp	r3, #116	@ 0x74
 800b9d2:	d073      	beq.n	800babc <_scanf_float+0x224>
 800b9d4:	2b79      	cmp	r3, #121	@ 0x79
 800b9d6:	e7f6      	b.n	800b9c6 <_scanf_float+0x12e>
 800b9d8:	6821      	ldr	r1, [r4, #0]
 800b9da:	05c8      	lsls	r0, r1, #23
 800b9dc:	d51b      	bpl.n	800ba16 <_scanf_float+0x17e>
 800b9de:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b9e2:	6021      	str	r1, [r4, #0]
 800b9e4:	f109 0901 	add.w	r9, r9, #1
 800b9e8:	f1bb 0f00 	cmp.w	fp, #0
 800b9ec:	d003      	beq.n	800b9f6 <_scanf_float+0x15e>
 800b9ee:	3201      	adds	r2, #1
 800b9f0:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800b9f4:	60a2      	str	r2, [r4, #8]
 800b9f6:	68a3      	ldr	r3, [r4, #8]
 800b9f8:	3b01      	subs	r3, #1
 800b9fa:	60a3      	str	r3, [r4, #8]
 800b9fc:	6923      	ldr	r3, [r4, #16]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	6123      	str	r3, [r4, #16]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	3b01      	subs	r3, #1
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	607b      	str	r3, [r7, #4]
 800ba0a:	f340 8087 	ble.w	800bb1c <_scanf_float+0x284>
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	3301      	adds	r3, #1
 800ba12:	603b      	str	r3, [r7, #0]
 800ba14:	e765      	b.n	800b8e2 <_scanf_float+0x4a>
 800ba16:	eb1a 0105 	adds.w	r1, sl, r5
 800ba1a:	f47f af6f 	bne.w	800b8fc <_scanf_float+0x64>
 800ba1e:	6822      	ldr	r2, [r4, #0]
 800ba20:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ba24:	6022      	str	r2, [r4, #0]
 800ba26:	460d      	mov	r5, r1
 800ba28:	468a      	mov	sl, r1
 800ba2a:	f806 3b01 	strb.w	r3, [r6], #1
 800ba2e:	e7e2      	b.n	800b9f6 <_scanf_float+0x15e>
 800ba30:	6822      	ldr	r2, [r4, #0]
 800ba32:	0610      	lsls	r0, r2, #24
 800ba34:	f57f af62 	bpl.w	800b8fc <_scanf_float+0x64>
 800ba38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ba3c:	6022      	str	r2, [r4, #0]
 800ba3e:	e7f4      	b.n	800ba2a <_scanf_float+0x192>
 800ba40:	f1ba 0f00 	cmp.w	sl, #0
 800ba44:	d10e      	bne.n	800ba64 <_scanf_float+0x1cc>
 800ba46:	f1b9 0f00 	cmp.w	r9, #0
 800ba4a:	d10e      	bne.n	800ba6a <_scanf_float+0x1d2>
 800ba4c:	6822      	ldr	r2, [r4, #0]
 800ba4e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ba52:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ba56:	d108      	bne.n	800ba6a <_scanf_float+0x1d2>
 800ba58:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ba5c:	6022      	str	r2, [r4, #0]
 800ba5e:	f04f 0a01 	mov.w	sl, #1
 800ba62:	e7e2      	b.n	800ba2a <_scanf_float+0x192>
 800ba64:	f1ba 0f02 	cmp.w	sl, #2
 800ba68:	d055      	beq.n	800bb16 <_scanf_float+0x27e>
 800ba6a:	2d01      	cmp	r5, #1
 800ba6c:	d002      	beq.n	800ba74 <_scanf_float+0x1dc>
 800ba6e:	2d04      	cmp	r5, #4
 800ba70:	f47f af44 	bne.w	800b8fc <_scanf_float+0x64>
 800ba74:	3501      	adds	r5, #1
 800ba76:	b2ed      	uxtb	r5, r5
 800ba78:	e7d7      	b.n	800ba2a <_scanf_float+0x192>
 800ba7a:	f1ba 0f01 	cmp.w	sl, #1
 800ba7e:	f47f af3d 	bne.w	800b8fc <_scanf_float+0x64>
 800ba82:	f04f 0a02 	mov.w	sl, #2
 800ba86:	e7d0      	b.n	800ba2a <_scanf_float+0x192>
 800ba88:	b97d      	cbnz	r5, 800baaa <_scanf_float+0x212>
 800ba8a:	f1b9 0f00 	cmp.w	r9, #0
 800ba8e:	f47f af38 	bne.w	800b902 <_scanf_float+0x6a>
 800ba92:	6822      	ldr	r2, [r4, #0]
 800ba94:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ba98:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ba9c:	f040 8108 	bne.w	800bcb0 <_scanf_float+0x418>
 800baa0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800baa4:	6022      	str	r2, [r4, #0]
 800baa6:	2501      	movs	r5, #1
 800baa8:	e7bf      	b.n	800ba2a <_scanf_float+0x192>
 800baaa:	2d03      	cmp	r5, #3
 800baac:	d0e2      	beq.n	800ba74 <_scanf_float+0x1dc>
 800baae:	2d05      	cmp	r5, #5
 800bab0:	e7de      	b.n	800ba70 <_scanf_float+0x1d8>
 800bab2:	2d02      	cmp	r5, #2
 800bab4:	f47f af22 	bne.w	800b8fc <_scanf_float+0x64>
 800bab8:	2503      	movs	r5, #3
 800baba:	e7b6      	b.n	800ba2a <_scanf_float+0x192>
 800babc:	2d06      	cmp	r5, #6
 800babe:	f47f af1d 	bne.w	800b8fc <_scanf_float+0x64>
 800bac2:	2507      	movs	r5, #7
 800bac4:	e7b1      	b.n	800ba2a <_scanf_float+0x192>
 800bac6:	6822      	ldr	r2, [r4, #0]
 800bac8:	0591      	lsls	r1, r2, #22
 800baca:	f57f af17 	bpl.w	800b8fc <_scanf_float+0x64>
 800bace:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800bad2:	6022      	str	r2, [r4, #0]
 800bad4:	f8cd 9008 	str.w	r9, [sp, #8]
 800bad8:	e7a7      	b.n	800ba2a <_scanf_float+0x192>
 800bada:	6822      	ldr	r2, [r4, #0]
 800badc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800bae0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bae4:	d006      	beq.n	800baf4 <_scanf_float+0x25c>
 800bae6:	0550      	lsls	r0, r2, #21
 800bae8:	f57f af08 	bpl.w	800b8fc <_scanf_float+0x64>
 800baec:	f1b9 0f00 	cmp.w	r9, #0
 800baf0:	f000 80de 	beq.w	800bcb0 <_scanf_float+0x418>
 800baf4:	0591      	lsls	r1, r2, #22
 800baf6:	bf58      	it	pl
 800baf8:	9902      	ldrpl	r1, [sp, #8]
 800bafa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bafe:	bf58      	it	pl
 800bb00:	eba9 0101 	subpl.w	r1, r9, r1
 800bb04:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bb08:	bf58      	it	pl
 800bb0a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bb0e:	6022      	str	r2, [r4, #0]
 800bb10:	f04f 0900 	mov.w	r9, #0
 800bb14:	e789      	b.n	800ba2a <_scanf_float+0x192>
 800bb16:	f04f 0a03 	mov.w	sl, #3
 800bb1a:	e786      	b.n	800ba2a <_scanf_float+0x192>
 800bb1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bb20:	4639      	mov	r1, r7
 800bb22:	4640      	mov	r0, r8
 800bb24:	4798      	blx	r3
 800bb26:	2800      	cmp	r0, #0
 800bb28:	f43f aedb 	beq.w	800b8e2 <_scanf_float+0x4a>
 800bb2c:	e6e6      	b.n	800b8fc <_scanf_float+0x64>
 800bb2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb36:	463a      	mov	r2, r7
 800bb38:	4640      	mov	r0, r8
 800bb3a:	4798      	blx	r3
 800bb3c:	6923      	ldr	r3, [r4, #16]
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	6123      	str	r3, [r4, #16]
 800bb42:	e6e8      	b.n	800b916 <_scanf_float+0x7e>
 800bb44:	1e6b      	subs	r3, r5, #1
 800bb46:	2b06      	cmp	r3, #6
 800bb48:	d824      	bhi.n	800bb94 <_scanf_float+0x2fc>
 800bb4a:	2d02      	cmp	r5, #2
 800bb4c:	d836      	bhi.n	800bbbc <_scanf_float+0x324>
 800bb4e:	9b01      	ldr	r3, [sp, #4]
 800bb50:	429e      	cmp	r6, r3
 800bb52:	f67f aee4 	bls.w	800b91e <_scanf_float+0x86>
 800bb56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb5e:	463a      	mov	r2, r7
 800bb60:	4640      	mov	r0, r8
 800bb62:	4798      	blx	r3
 800bb64:	6923      	ldr	r3, [r4, #16]
 800bb66:	3b01      	subs	r3, #1
 800bb68:	6123      	str	r3, [r4, #16]
 800bb6a:	e7f0      	b.n	800bb4e <_scanf_float+0x2b6>
 800bb6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb70:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bb74:	463a      	mov	r2, r7
 800bb76:	4640      	mov	r0, r8
 800bb78:	4798      	blx	r3
 800bb7a:	6923      	ldr	r3, [r4, #16]
 800bb7c:	3b01      	subs	r3, #1
 800bb7e:	6123      	str	r3, [r4, #16]
 800bb80:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800bb84:	fa5f fa8a 	uxtb.w	sl, sl
 800bb88:	f1ba 0f02 	cmp.w	sl, #2
 800bb8c:	d1ee      	bne.n	800bb6c <_scanf_float+0x2d4>
 800bb8e:	3d03      	subs	r5, #3
 800bb90:	b2ed      	uxtb	r5, r5
 800bb92:	1b76      	subs	r6, r6, r5
 800bb94:	6823      	ldr	r3, [r4, #0]
 800bb96:	05da      	lsls	r2, r3, #23
 800bb98:	d530      	bpl.n	800bbfc <_scanf_float+0x364>
 800bb9a:	055b      	lsls	r3, r3, #21
 800bb9c:	d511      	bpl.n	800bbc2 <_scanf_float+0x32a>
 800bb9e:	9b01      	ldr	r3, [sp, #4]
 800bba0:	429e      	cmp	r6, r3
 800bba2:	f67f aebc 	bls.w	800b91e <_scanf_float+0x86>
 800bba6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bbaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bbae:	463a      	mov	r2, r7
 800bbb0:	4640      	mov	r0, r8
 800bbb2:	4798      	blx	r3
 800bbb4:	6923      	ldr	r3, [r4, #16]
 800bbb6:	3b01      	subs	r3, #1
 800bbb8:	6123      	str	r3, [r4, #16]
 800bbba:	e7f0      	b.n	800bb9e <_scanf_float+0x306>
 800bbbc:	46aa      	mov	sl, r5
 800bbbe:	46b3      	mov	fp, r6
 800bbc0:	e7de      	b.n	800bb80 <_scanf_float+0x2e8>
 800bbc2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bbc6:	6923      	ldr	r3, [r4, #16]
 800bbc8:	2965      	cmp	r1, #101	@ 0x65
 800bbca:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800bbce:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800bbd2:	6123      	str	r3, [r4, #16]
 800bbd4:	d00c      	beq.n	800bbf0 <_scanf_float+0x358>
 800bbd6:	2945      	cmp	r1, #69	@ 0x45
 800bbd8:	d00a      	beq.n	800bbf0 <_scanf_float+0x358>
 800bbda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bbde:	463a      	mov	r2, r7
 800bbe0:	4640      	mov	r0, r8
 800bbe2:	4798      	blx	r3
 800bbe4:	6923      	ldr	r3, [r4, #16]
 800bbe6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bbea:	3b01      	subs	r3, #1
 800bbec:	1eb5      	subs	r5, r6, #2
 800bbee:	6123      	str	r3, [r4, #16]
 800bbf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bbf4:	463a      	mov	r2, r7
 800bbf6:	4640      	mov	r0, r8
 800bbf8:	4798      	blx	r3
 800bbfa:	462e      	mov	r6, r5
 800bbfc:	6822      	ldr	r2, [r4, #0]
 800bbfe:	f012 0210 	ands.w	r2, r2, #16
 800bc02:	d001      	beq.n	800bc08 <_scanf_float+0x370>
 800bc04:	2000      	movs	r0, #0
 800bc06:	e68b      	b.n	800b920 <_scanf_float+0x88>
 800bc08:	7032      	strb	r2, [r6, #0]
 800bc0a:	6823      	ldr	r3, [r4, #0]
 800bc0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bc10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc14:	d11c      	bne.n	800bc50 <_scanf_float+0x3b8>
 800bc16:	9b02      	ldr	r3, [sp, #8]
 800bc18:	454b      	cmp	r3, r9
 800bc1a:	eba3 0209 	sub.w	r2, r3, r9
 800bc1e:	d123      	bne.n	800bc68 <_scanf_float+0x3d0>
 800bc20:	9901      	ldr	r1, [sp, #4]
 800bc22:	2200      	movs	r2, #0
 800bc24:	4640      	mov	r0, r8
 800bc26:	f7ff f947 	bl	800aeb8 <_strtod_r>
 800bc2a:	9b03      	ldr	r3, [sp, #12]
 800bc2c:	6821      	ldr	r1, [r4, #0]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f011 0f02 	tst.w	r1, #2
 800bc34:	ec57 6b10 	vmov	r6, r7, d0
 800bc38:	f103 0204 	add.w	r2, r3, #4
 800bc3c:	d01f      	beq.n	800bc7e <_scanf_float+0x3e6>
 800bc3e:	9903      	ldr	r1, [sp, #12]
 800bc40:	600a      	str	r2, [r1, #0]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	e9c3 6700 	strd	r6, r7, [r3]
 800bc48:	68e3      	ldr	r3, [r4, #12]
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	60e3      	str	r3, [r4, #12]
 800bc4e:	e7d9      	b.n	800bc04 <_scanf_float+0x36c>
 800bc50:	9b04      	ldr	r3, [sp, #16]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d0e4      	beq.n	800bc20 <_scanf_float+0x388>
 800bc56:	9905      	ldr	r1, [sp, #20]
 800bc58:	230a      	movs	r3, #10
 800bc5a:	3101      	adds	r1, #1
 800bc5c:	4640      	mov	r0, r8
 800bc5e:	f7ff f9b7 	bl	800afd0 <_strtol_r>
 800bc62:	9b04      	ldr	r3, [sp, #16]
 800bc64:	9e05      	ldr	r6, [sp, #20]
 800bc66:	1ac2      	subs	r2, r0, r3
 800bc68:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bc6c:	429e      	cmp	r6, r3
 800bc6e:	bf28      	it	cs
 800bc70:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bc74:	4910      	ldr	r1, [pc, #64]	@ (800bcb8 <_scanf_float+0x420>)
 800bc76:	4630      	mov	r0, r6
 800bc78:	f000 f8f6 	bl	800be68 <siprintf>
 800bc7c:	e7d0      	b.n	800bc20 <_scanf_float+0x388>
 800bc7e:	f011 0f04 	tst.w	r1, #4
 800bc82:	9903      	ldr	r1, [sp, #12]
 800bc84:	600a      	str	r2, [r1, #0]
 800bc86:	d1dc      	bne.n	800bc42 <_scanf_float+0x3aa>
 800bc88:	681d      	ldr	r5, [r3, #0]
 800bc8a:	4632      	mov	r2, r6
 800bc8c:	463b      	mov	r3, r7
 800bc8e:	4630      	mov	r0, r6
 800bc90:	4639      	mov	r1, r7
 800bc92:	f7f4 ff83 	bl	8000b9c <__aeabi_dcmpun>
 800bc96:	b128      	cbz	r0, 800bca4 <_scanf_float+0x40c>
 800bc98:	4808      	ldr	r0, [pc, #32]	@ (800bcbc <_scanf_float+0x424>)
 800bc9a:	f000 fa4d 	bl	800c138 <nanf>
 800bc9e:	ed85 0a00 	vstr	s0, [r5]
 800bca2:	e7d1      	b.n	800bc48 <_scanf_float+0x3b0>
 800bca4:	4630      	mov	r0, r6
 800bca6:	4639      	mov	r1, r7
 800bca8:	f7f4 ffd6 	bl	8000c58 <__aeabi_d2f>
 800bcac:	6028      	str	r0, [r5, #0]
 800bcae:	e7cb      	b.n	800bc48 <_scanf_float+0x3b0>
 800bcb0:	f04f 0900 	mov.w	r9, #0
 800bcb4:	e629      	b.n	800b90a <_scanf_float+0x72>
 800bcb6:	bf00      	nop
 800bcb8:	0800ed0d 	.word	0x0800ed0d
 800bcbc:	0800edc6 	.word	0x0800edc6

0800bcc0 <std>:
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	b510      	push	{r4, lr}
 800bcc4:	4604      	mov	r4, r0
 800bcc6:	e9c0 3300 	strd	r3, r3, [r0]
 800bcca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bcce:	6083      	str	r3, [r0, #8]
 800bcd0:	8181      	strh	r1, [r0, #12]
 800bcd2:	6643      	str	r3, [r0, #100]	@ 0x64
 800bcd4:	81c2      	strh	r2, [r0, #14]
 800bcd6:	6183      	str	r3, [r0, #24]
 800bcd8:	4619      	mov	r1, r3
 800bcda:	2208      	movs	r2, #8
 800bcdc:	305c      	adds	r0, #92	@ 0x5c
 800bcde:	f000 f926 	bl	800bf2e <memset>
 800bce2:	4b0d      	ldr	r3, [pc, #52]	@ (800bd18 <std+0x58>)
 800bce4:	6263      	str	r3, [r4, #36]	@ 0x24
 800bce6:	4b0d      	ldr	r3, [pc, #52]	@ (800bd1c <std+0x5c>)
 800bce8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bcea:	4b0d      	ldr	r3, [pc, #52]	@ (800bd20 <std+0x60>)
 800bcec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bcee:	4b0d      	ldr	r3, [pc, #52]	@ (800bd24 <std+0x64>)
 800bcf0:	6323      	str	r3, [r4, #48]	@ 0x30
 800bcf2:	4b0d      	ldr	r3, [pc, #52]	@ (800bd28 <std+0x68>)
 800bcf4:	6224      	str	r4, [r4, #32]
 800bcf6:	429c      	cmp	r4, r3
 800bcf8:	d006      	beq.n	800bd08 <std+0x48>
 800bcfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bcfe:	4294      	cmp	r4, r2
 800bd00:	d002      	beq.n	800bd08 <std+0x48>
 800bd02:	33d0      	adds	r3, #208	@ 0xd0
 800bd04:	429c      	cmp	r4, r3
 800bd06:	d105      	bne.n	800bd14 <std+0x54>
 800bd08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd10:	f000 b9f8 	b.w	800c104 <__retarget_lock_init_recursive>
 800bd14:	bd10      	pop	{r4, pc}
 800bd16:	bf00      	nop
 800bd18:	0800bea9 	.word	0x0800bea9
 800bd1c:	0800becb 	.word	0x0800becb
 800bd20:	0800bf03 	.word	0x0800bf03
 800bd24:	0800bf27 	.word	0x0800bf27
 800bd28:	20000834 	.word	0x20000834

0800bd2c <stdio_exit_handler>:
 800bd2c:	4a02      	ldr	r2, [pc, #8]	@ (800bd38 <stdio_exit_handler+0xc>)
 800bd2e:	4903      	ldr	r1, [pc, #12]	@ (800bd3c <stdio_exit_handler+0x10>)
 800bd30:	4803      	ldr	r0, [pc, #12]	@ (800bd40 <stdio_exit_handler+0x14>)
 800bd32:	f000 b869 	b.w	800be08 <_fwalk_sglue>
 800bd36:	bf00      	nop
 800bd38:	200001e0 	.word	0x200001e0
 800bd3c:	0800e669 	.word	0x0800e669
 800bd40:	2000035c 	.word	0x2000035c

0800bd44 <cleanup_stdio>:
 800bd44:	6841      	ldr	r1, [r0, #4]
 800bd46:	4b0c      	ldr	r3, [pc, #48]	@ (800bd78 <cleanup_stdio+0x34>)
 800bd48:	4299      	cmp	r1, r3
 800bd4a:	b510      	push	{r4, lr}
 800bd4c:	4604      	mov	r4, r0
 800bd4e:	d001      	beq.n	800bd54 <cleanup_stdio+0x10>
 800bd50:	f002 fc8a 	bl	800e668 <_fflush_r>
 800bd54:	68a1      	ldr	r1, [r4, #8]
 800bd56:	4b09      	ldr	r3, [pc, #36]	@ (800bd7c <cleanup_stdio+0x38>)
 800bd58:	4299      	cmp	r1, r3
 800bd5a:	d002      	beq.n	800bd62 <cleanup_stdio+0x1e>
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	f002 fc83 	bl	800e668 <_fflush_r>
 800bd62:	68e1      	ldr	r1, [r4, #12]
 800bd64:	4b06      	ldr	r3, [pc, #24]	@ (800bd80 <cleanup_stdio+0x3c>)
 800bd66:	4299      	cmp	r1, r3
 800bd68:	d004      	beq.n	800bd74 <cleanup_stdio+0x30>
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd70:	f002 bc7a 	b.w	800e668 <_fflush_r>
 800bd74:	bd10      	pop	{r4, pc}
 800bd76:	bf00      	nop
 800bd78:	20000834 	.word	0x20000834
 800bd7c:	2000089c 	.word	0x2000089c
 800bd80:	20000904 	.word	0x20000904

0800bd84 <global_stdio_init.part.0>:
 800bd84:	b510      	push	{r4, lr}
 800bd86:	4b0b      	ldr	r3, [pc, #44]	@ (800bdb4 <global_stdio_init.part.0+0x30>)
 800bd88:	4c0b      	ldr	r4, [pc, #44]	@ (800bdb8 <global_stdio_init.part.0+0x34>)
 800bd8a:	4a0c      	ldr	r2, [pc, #48]	@ (800bdbc <global_stdio_init.part.0+0x38>)
 800bd8c:	601a      	str	r2, [r3, #0]
 800bd8e:	4620      	mov	r0, r4
 800bd90:	2200      	movs	r2, #0
 800bd92:	2104      	movs	r1, #4
 800bd94:	f7ff ff94 	bl	800bcc0 <std>
 800bd98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	2109      	movs	r1, #9
 800bda0:	f7ff ff8e 	bl	800bcc0 <std>
 800bda4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bda8:	2202      	movs	r2, #2
 800bdaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdae:	2112      	movs	r1, #18
 800bdb0:	f7ff bf86 	b.w	800bcc0 <std>
 800bdb4:	2000096c 	.word	0x2000096c
 800bdb8:	20000834 	.word	0x20000834
 800bdbc:	0800bd2d 	.word	0x0800bd2d

0800bdc0 <__sfp_lock_acquire>:
 800bdc0:	4801      	ldr	r0, [pc, #4]	@ (800bdc8 <__sfp_lock_acquire+0x8>)
 800bdc2:	f000 b9a0 	b.w	800c106 <__retarget_lock_acquire_recursive>
 800bdc6:	bf00      	nop
 800bdc8:	20000975 	.word	0x20000975

0800bdcc <__sfp_lock_release>:
 800bdcc:	4801      	ldr	r0, [pc, #4]	@ (800bdd4 <__sfp_lock_release+0x8>)
 800bdce:	f000 b99b 	b.w	800c108 <__retarget_lock_release_recursive>
 800bdd2:	bf00      	nop
 800bdd4:	20000975 	.word	0x20000975

0800bdd8 <__sinit>:
 800bdd8:	b510      	push	{r4, lr}
 800bdda:	4604      	mov	r4, r0
 800bddc:	f7ff fff0 	bl	800bdc0 <__sfp_lock_acquire>
 800bde0:	6a23      	ldr	r3, [r4, #32]
 800bde2:	b11b      	cbz	r3, 800bdec <__sinit+0x14>
 800bde4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bde8:	f7ff bff0 	b.w	800bdcc <__sfp_lock_release>
 800bdec:	4b04      	ldr	r3, [pc, #16]	@ (800be00 <__sinit+0x28>)
 800bdee:	6223      	str	r3, [r4, #32]
 800bdf0:	4b04      	ldr	r3, [pc, #16]	@ (800be04 <__sinit+0x2c>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d1f5      	bne.n	800bde4 <__sinit+0xc>
 800bdf8:	f7ff ffc4 	bl	800bd84 <global_stdio_init.part.0>
 800bdfc:	e7f2      	b.n	800bde4 <__sinit+0xc>
 800bdfe:	bf00      	nop
 800be00:	0800bd45 	.word	0x0800bd45
 800be04:	2000096c 	.word	0x2000096c

0800be08 <_fwalk_sglue>:
 800be08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be0c:	4607      	mov	r7, r0
 800be0e:	4688      	mov	r8, r1
 800be10:	4614      	mov	r4, r2
 800be12:	2600      	movs	r6, #0
 800be14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be18:	f1b9 0901 	subs.w	r9, r9, #1
 800be1c:	d505      	bpl.n	800be2a <_fwalk_sglue+0x22>
 800be1e:	6824      	ldr	r4, [r4, #0]
 800be20:	2c00      	cmp	r4, #0
 800be22:	d1f7      	bne.n	800be14 <_fwalk_sglue+0xc>
 800be24:	4630      	mov	r0, r6
 800be26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be2a:	89ab      	ldrh	r3, [r5, #12]
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d907      	bls.n	800be40 <_fwalk_sglue+0x38>
 800be30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be34:	3301      	adds	r3, #1
 800be36:	d003      	beq.n	800be40 <_fwalk_sglue+0x38>
 800be38:	4629      	mov	r1, r5
 800be3a:	4638      	mov	r0, r7
 800be3c:	47c0      	blx	r8
 800be3e:	4306      	orrs	r6, r0
 800be40:	3568      	adds	r5, #104	@ 0x68
 800be42:	e7e9      	b.n	800be18 <_fwalk_sglue+0x10>

0800be44 <iprintf>:
 800be44:	b40f      	push	{r0, r1, r2, r3}
 800be46:	b507      	push	{r0, r1, r2, lr}
 800be48:	4906      	ldr	r1, [pc, #24]	@ (800be64 <iprintf+0x20>)
 800be4a:	ab04      	add	r3, sp, #16
 800be4c:	6808      	ldr	r0, [r1, #0]
 800be4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800be52:	6881      	ldr	r1, [r0, #8]
 800be54:	9301      	str	r3, [sp, #4]
 800be56:	f002 fa6b 	bl	800e330 <_vfiprintf_r>
 800be5a:	b003      	add	sp, #12
 800be5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800be60:	b004      	add	sp, #16
 800be62:	4770      	bx	lr
 800be64:	20000358 	.word	0x20000358

0800be68 <siprintf>:
 800be68:	b40e      	push	{r1, r2, r3}
 800be6a:	b500      	push	{lr}
 800be6c:	b09c      	sub	sp, #112	@ 0x70
 800be6e:	ab1d      	add	r3, sp, #116	@ 0x74
 800be70:	9002      	str	r0, [sp, #8]
 800be72:	9006      	str	r0, [sp, #24]
 800be74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800be78:	4809      	ldr	r0, [pc, #36]	@ (800bea0 <siprintf+0x38>)
 800be7a:	9107      	str	r1, [sp, #28]
 800be7c:	9104      	str	r1, [sp, #16]
 800be7e:	4909      	ldr	r1, [pc, #36]	@ (800bea4 <siprintf+0x3c>)
 800be80:	f853 2b04 	ldr.w	r2, [r3], #4
 800be84:	9105      	str	r1, [sp, #20]
 800be86:	6800      	ldr	r0, [r0, #0]
 800be88:	9301      	str	r3, [sp, #4]
 800be8a:	a902      	add	r1, sp, #8
 800be8c:	f002 f92a 	bl	800e0e4 <_svfiprintf_r>
 800be90:	9b02      	ldr	r3, [sp, #8]
 800be92:	2200      	movs	r2, #0
 800be94:	701a      	strb	r2, [r3, #0]
 800be96:	b01c      	add	sp, #112	@ 0x70
 800be98:	f85d eb04 	ldr.w	lr, [sp], #4
 800be9c:	b003      	add	sp, #12
 800be9e:	4770      	bx	lr
 800bea0:	20000358 	.word	0x20000358
 800bea4:	ffff0208 	.word	0xffff0208

0800bea8 <__sread>:
 800bea8:	b510      	push	{r4, lr}
 800beaa:	460c      	mov	r4, r1
 800beac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beb0:	f000 f8da 	bl	800c068 <_read_r>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	bfab      	itete	ge
 800beb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800beba:	89a3      	ldrhlt	r3, [r4, #12]
 800bebc:	181b      	addge	r3, r3, r0
 800bebe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bec2:	bfac      	ite	ge
 800bec4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bec6:	81a3      	strhlt	r3, [r4, #12]
 800bec8:	bd10      	pop	{r4, pc}

0800beca <__swrite>:
 800beca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bece:	461f      	mov	r7, r3
 800bed0:	898b      	ldrh	r3, [r1, #12]
 800bed2:	05db      	lsls	r3, r3, #23
 800bed4:	4605      	mov	r5, r0
 800bed6:	460c      	mov	r4, r1
 800bed8:	4616      	mov	r6, r2
 800beda:	d505      	bpl.n	800bee8 <__swrite+0x1e>
 800bedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bee0:	2302      	movs	r3, #2
 800bee2:	2200      	movs	r2, #0
 800bee4:	f000 f8ae 	bl	800c044 <_lseek_r>
 800bee8:	89a3      	ldrh	r3, [r4, #12]
 800beea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800beee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bef2:	81a3      	strh	r3, [r4, #12]
 800bef4:	4632      	mov	r2, r6
 800bef6:	463b      	mov	r3, r7
 800bef8:	4628      	mov	r0, r5
 800befa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800befe:	f000 b8c5 	b.w	800c08c <_write_r>

0800bf02 <__sseek>:
 800bf02:	b510      	push	{r4, lr}
 800bf04:	460c      	mov	r4, r1
 800bf06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf0a:	f000 f89b 	bl	800c044 <_lseek_r>
 800bf0e:	1c43      	adds	r3, r0, #1
 800bf10:	89a3      	ldrh	r3, [r4, #12]
 800bf12:	bf15      	itete	ne
 800bf14:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bf16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bf1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bf1e:	81a3      	strheq	r3, [r4, #12]
 800bf20:	bf18      	it	ne
 800bf22:	81a3      	strhne	r3, [r4, #12]
 800bf24:	bd10      	pop	{r4, pc}

0800bf26 <__sclose>:
 800bf26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf2a:	f000 b87b 	b.w	800c024 <_close_r>

0800bf2e <memset>:
 800bf2e:	4402      	add	r2, r0
 800bf30:	4603      	mov	r3, r0
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d100      	bne.n	800bf38 <memset+0xa>
 800bf36:	4770      	bx	lr
 800bf38:	f803 1b01 	strb.w	r1, [r3], #1
 800bf3c:	e7f9      	b.n	800bf32 <memset+0x4>

0800bf3e <strncmp>:
 800bf3e:	b510      	push	{r4, lr}
 800bf40:	b16a      	cbz	r2, 800bf5e <strncmp+0x20>
 800bf42:	3901      	subs	r1, #1
 800bf44:	1884      	adds	r4, r0, r2
 800bf46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf4a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d103      	bne.n	800bf5a <strncmp+0x1c>
 800bf52:	42a0      	cmp	r0, r4
 800bf54:	d001      	beq.n	800bf5a <strncmp+0x1c>
 800bf56:	2a00      	cmp	r2, #0
 800bf58:	d1f5      	bne.n	800bf46 <strncmp+0x8>
 800bf5a:	1ad0      	subs	r0, r2, r3
 800bf5c:	bd10      	pop	{r4, pc}
 800bf5e:	4610      	mov	r0, r2
 800bf60:	e7fc      	b.n	800bf5c <strncmp+0x1e>
	...

0800bf64 <strtok>:
 800bf64:	4b16      	ldr	r3, [pc, #88]	@ (800bfc0 <strtok+0x5c>)
 800bf66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf6a:	681f      	ldr	r7, [r3, #0]
 800bf6c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800bf6e:	4605      	mov	r5, r0
 800bf70:	460e      	mov	r6, r1
 800bf72:	b9ec      	cbnz	r4, 800bfb0 <strtok+0x4c>
 800bf74:	2050      	movs	r0, #80	@ 0x50
 800bf76:	f001 fad3 	bl	800d520 <malloc>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	6478      	str	r0, [r7, #68]	@ 0x44
 800bf7e:	b920      	cbnz	r0, 800bf8a <strtok+0x26>
 800bf80:	4b10      	ldr	r3, [pc, #64]	@ (800bfc4 <strtok+0x60>)
 800bf82:	4811      	ldr	r0, [pc, #68]	@ (800bfc8 <strtok+0x64>)
 800bf84:	215b      	movs	r1, #91	@ 0x5b
 800bf86:	f000 f8dd 	bl	800c144 <__assert_func>
 800bf8a:	e9c0 4400 	strd	r4, r4, [r0]
 800bf8e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800bf92:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800bf96:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800bf9a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800bf9e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800bfa2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800bfa6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800bfaa:	6184      	str	r4, [r0, #24]
 800bfac:	7704      	strb	r4, [r0, #28]
 800bfae:	6244      	str	r4, [r0, #36]	@ 0x24
 800bfb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bfb2:	4631      	mov	r1, r6
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfbc:	f000 b806 	b.w	800bfcc <__strtok_r>
 800bfc0:	20000358 	.word	0x20000358
 800bfc4:	0800ed12 	.word	0x0800ed12
 800bfc8:	0800ed29 	.word	0x0800ed29

0800bfcc <__strtok_r>:
 800bfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfce:	4604      	mov	r4, r0
 800bfd0:	b908      	cbnz	r0, 800bfd6 <__strtok_r+0xa>
 800bfd2:	6814      	ldr	r4, [r2, #0]
 800bfd4:	b144      	cbz	r4, 800bfe8 <__strtok_r+0x1c>
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800bfdc:	460f      	mov	r7, r1
 800bfde:	f817 6b01 	ldrb.w	r6, [r7], #1
 800bfe2:	b91e      	cbnz	r6, 800bfec <__strtok_r+0x20>
 800bfe4:	b965      	cbnz	r5, 800c000 <__strtok_r+0x34>
 800bfe6:	6015      	str	r5, [r2, #0]
 800bfe8:	2000      	movs	r0, #0
 800bfea:	e005      	b.n	800bff8 <__strtok_r+0x2c>
 800bfec:	42b5      	cmp	r5, r6
 800bfee:	d1f6      	bne.n	800bfde <__strtok_r+0x12>
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d1f0      	bne.n	800bfd6 <__strtok_r+0xa>
 800bff4:	6014      	str	r4, [r2, #0]
 800bff6:	7003      	strb	r3, [r0, #0]
 800bff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bffa:	461c      	mov	r4, r3
 800bffc:	e00c      	b.n	800c018 <__strtok_r+0x4c>
 800bffe:	b915      	cbnz	r5, 800c006 <__strtok_r+0x3a>
 800c000:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c004:	460e      	mov	r6, r1
 800c006:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c00a:	42ab      	cmp	r3, r5
 800c00c:	d1f7      	bne.n	800bffe <__strtok_r+0x32>
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d0f3      	beq.n	800bffa <__strtok_r+0x2e>
 800c012:	2300      	movs	r3, #0
 800c014:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c018:	6014      	str	r4, [r2, #0]
 800c01a:	e7ed      	b.n	800bff8 <__strtok_r+0x2c>

0800c01c <_localeconv_r>:
 800c01c:	4800      	ldr	r0, [pc, #0]	@ (800c020 <_localeconv_r+0x4>)
 800c01e:	4770      	bx	lr
 800c020:	200002dc 	.word	0x200002dc

0800c024 <_close_r>:
 800c024:	b538      	push	{r3, r4, r5, lr}
 800c026:	4d06      	ldr	r5, [pc, #24]	@ (800c040 <_close_r+0x1c>)
 800c028:	2300      	movs	r3, #0
 800c02a:	4604      	mov	r4, r0
 800c02c:	4608      	mov	r0, r1
 800c02e:	602b      	str	r3, [r5, #0]
 800c030:	f7f5 fe50 	bl	8001cd4 <_close>
 800c034:	1c43      	adds	r3, r0, #1
 800c036:	d102      	bne.n	800c03e <_close_r+0x1a>
 800c038:	682b      	ldr	r3, [r5, #0]
 800c03a:	b103      	cbz	r3, 800c03e <_close_r+0x1a>
 800c03c:	6023      	str	r3, [r4, #0]
 800c03e:	bd38      	pop	{r3, r4, r5, pc}
 800c040:	20000970 	.word	0x20000970

0800c044 <_lseek_r>:
 800c044:	b538      	push	{r3, r4, r5, lr}
 800c046:	4d07      	ldr	r5, [pc, #28]	@ (800c064 <_lseek_r+0x20>)
 800c048:	4604      	mov	r4, r0
 800c04a:	4608      	mov	r0, r1
 800c04c:	4611      	mov	r1, r2
 800c04e:	2200      	movs	r2, #0
 800c050:	602a      	str	r2, [r5, #0]
 800c052:	461a      	mov	r2, r3
 800c054:	f7f5 fe65 	bl	8001d22 <_lseek>
 800c058:	1c43      	adds	r3, r0, #1
 800c05a:	d102      	bne.n	800c062 <_lseek_r+0x1e>
 800c05c:	682b      	ldr	r3, [r5, #0]
 800c05e:	b103      	cbz	r3, 800c062 <_lseek_r+0x1e>
 800c060:	6023      	str	r3, [r4, #0]
 800c062:	bd38      	pop	{r3, r4, r5, pc}
 800c064:	20000970 	.word	0x20000970

0800c068 <_read_r>:
 800c068:	b538      	push	{r3, r4, r5, lr}
 800c06a:	4d07      	ldr	r5, [pc, #28]	@ (800c088 <_read_r+0x20>)
 800c06c:	4604      	mov	r4, r0
 800c06e:	4608      	mov	r0, r1
 800c070:	4611      	mov	r1, r2
 800c072:	2200      	movs	r2, #0
 800c074:	602a      	str	r2, [r5, #0]
 800c076:	461a      	mov	r2, r3
 800c078:	f7f5 fdf3 	bl	8001c62 <_read>
 800c07c:	1c43      	adds	r3, r0, #1
 800c07e:	d102      	bne.n	800c086 <_read_r+0x1e>
 800c080:	682b      	ldr	r3, [r5, #0]
 800c082:	b103      	cbz	r3, 800c086 <_read_r+0x1e>
 800c084:	6023      	str	r3, [r4, #0]
 800c086:	bd38      	pop	{r3, r4, r5, pc}
 800c088:	20000970 	.word	0x20000970

0800c08c <_write_r>:
 800c08c:	b538      	push	{r3, r4, r5, lr}
 800c08e:	4d07      	ldr	r5, [pc, #28]	@ (800c0ac <_write_r+0x20>)
 800c090:	4604      	mov	r4, r0
 800c092:	4608      	mov	r0, r1
 800c094:	4611      	mov	r1, r2
 800c096:	2200      	movs	r2, #0
 800c098:	602a      	str	r2, [r5, #0]
 800c09a:	461a      	mov	r2, r3
 800c09c:	f7f5 fdfe 	bl	8001c9c <_write>
 800c0a0:	1c43      	adds	r3, r0, #1
 800c0a2:	d102      	bne.n	800c0aa <_write_r+0x1e>
 800c0a4:	682b      	ldr	r3, [r5, #0]
 800c0a6:	b103      	cbz	r3, 800c0aa <_write_r+0x1e>
 800c0a8:	6023      	str	r3, [r4, #0]
 800c0aa:	bd38      	pop	{r3, r4, r5, pc}
 800c0ac:	20000970 	.word	0x20000970

0800c0b0 <__errno>:
 800c0b0:	4b01      	ldr	r3, [pc, #4]	@ (800c0b8 <__errno+0x8>)
 800c0b2:	6818      	ldr	r0, [r3, #0]
 800c0b4:	4770      	bx	lr
 800c0b6:	bf00      	nop
 800c0b8:	20000358 	.word	0x20000358

0800c0bc <__libc_init_array>:
 800c0bc:	b570      	push	{r4, r5, r6, lr}
 800c0be:	4d0d      	ldr	r5, [pc, #52]	@ (800c0f4 <__libc_init_array+0x38>)
 800c0c0:	4c0d      	ldr	r4, [pc, #52]	@ (800c0f8 <__libc_init_array+0x3c>)
 800c0c2:	1b64      	subs	r4, r4, r5
 800c0c4:	10a4      	asrs	r4, r4, #2
 800c0c6:	2600      	movs	r6, #0
 800c0c8:	42a6      	cmp	r6, r4
 800c0ca:	d109      	bne.n	800c0e0 <__libc_init_array+0x24>
 800c0cc:	4d0b      	ldr	r5, [pc, #44]	@ (800c0fc <__libc_init_array+0x40>)
 800c0ce:	4c0c      	ldr	r4, [pc, #48]	@ (800c100 <__libc_init_array+0x44>)
 800c0d0:	f002 fcdc 	bl	800ea8c <_init>
 800c0d4:	1b64      	subs	r4, r4, r5
 800c0d6:	10a4      	asrs	r4, r4, #2
 800c0d8:	2600      	movs	r6, #0
 800c0da:	42a6      	cmp	r6, r4
 800c0dc:	d105      	bne.n	800c0ea <__libc_init_array+0x2e>
 800c0de:	bd70      	pop	{r4, r5, r6, pc}
 800c0e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0e4:	4798      	blx	r3
 800c0e6:	3601      	adds	r6, #1
 800c0e8:	e7ee      	b.n	800c0c8 <__libc_init_array+0xc>
 800c0ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0ee:	4798      	blx	r3
 800c0f0:	3601      	adds	r6, #1
 800c0f2:	e7f2      	b.n	800c0da <__libc_init_array+0x1e>
 800c0f4:	0800f014 	.word	0x0800f014
 800c0f8:	0800f014 	.word	0x0800f014
 800c0fc:	0800f014 	.word	0x0800f014
 800c100:	0800f018 	.word	0x0800f018

0800c104 <__retarget_lock_init_recursive>:
 800c104:	4770      	bx	lr

0800c106 <__retarget_lock_acquire_recursive>:
 800c106:	4770      	bx	lr

0800c108 <__retarget_lock_release_recursive>:
 800c108:	4770      	bx	lr

0800c10a <memcpy>:
 800c10a:	440a      	add	r2, r1
 800c10c:	4291      	cmp	r1, r2
 800c10e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c112:	d100      	bne.n	800c116 <memcpy+0xc>
 800c114:	4770      	bx	lr
 800c116:	b510      	push	{r4, lr}
 800c118:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c11c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c120:	4291      	cmp	r1, r2
 800c122:	d1f9      	bne.n	800c118 <memcpy+0xe>
 800c124:	bd10      	pop	{r4, pc}
	...

0800c128 <nan>:
 800c128:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c130 <nan+0x8>
 800c12c:	4770      	bx	lr
 800c12e:	bf00      	nop
 800c130:	00000000 	.word	0x00000000
 800c134:	7ff80000 	.word	0x7ff80000

0800c138 <nanf>:
 800c138:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c140 <nanf+0x8>
 800c13c:	4770      	bx	lr
 800c13e:	bf00      	nop
 800c140:	7fc00000 	.word	0x7fc00000

0800c144 <__assert_func>:
 800c144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c146:	4614      	mov	r4, r2
 800c148:	461a      	mov	r2, r3
 800c14a:	4b09      	ldr	r3, [pc, #36]	@ (800c170 <__assert_func+0x2c>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4605      	mov	r5, r0
 800c150:	68d8      	ldr	r0, [r3, #12]
 800c152:	b954      	cbnz	r4, 800c16a <__assert_func+0x26>
 800c154:	4b07      	ldr	r3, [pc, #28]	@ (800c174 <__assert_func+0x30>)
 800c156:	461c      	mov	r4, r3
 800c158:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c15c:	9100      	str	r1, [sp, #0]
 800c15e:	462b      	mov	r3, r5
 800c160:	4905      	ldr	r1, [pc, #20]	@ (800c178 <__assert_func+0x34>)
 800c162:	f002 faa9 	bl	800e6b8 <fiprintf>
 800c166:	f002 fb77 	bl	800e858 <abort>
 800c16a:	4b04      	ldr	r3, [pc, #16]	@ (800c17c <__assert_func+0x38>)
 800c16c:	e7f4      	b.n	800c158 <__assert_func+0x14>
 800c16e:	bf00      	nop
 800c170:	20000358 	.word	0x20000358
 800c174:	0800edc6 	.word	0x0800edc6
 800c178:	0800ed98 	.word	0x0800ed98
 800c17c:	0800ed8b 	.word	0x0800ed8b

0800c180 <quorem>:
 800c180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c184:	6903      	ldr	r3, [r0, #16]
 800c186:	690c      	ldr	r4, [r1, #16]
 800c188:	42a3      	cmp	r3, r4
 800c18a:	4607      	mov	r7, r0
 800c18c:	db7e      	blt.n	800c28c <quorem+0x10c>
 800c18e:	3c01      	subs	r4, #1
 800c190:	f101 0814 	add.w	r8, r1, #20
 800c194:	00a3      	lsls	r3, r4, #2
 800c196:	f100 0514 	add.w	r5, r0, #20
 800c19a:	9300      	str	r3, [sp, #0]
 800c19c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1a0:	9301      	str	r3, [sp, #4]
 800c1a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c1a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c1b2:	fbb2 f6f3 	udiv	r6, r2, r3
 800c1b6:	d32e      	bcc.n	800c216 <quorem+0x96>
 800c1b8:	f04f 0a00 	mov.w	sl, #0
 800c1bc:	46c4      	mov	ip, r8
 800c1be:	46ae      	mov	lr, r5
 800c1c0:	46d3      	mov	fp, sl
 800c1c2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c1c6:	b298      	uxth	r0, r3
 800c1c8:	fb06 a000 	mla	r0, r6, r0, sl
 800c1cc:	0c02      	lsrs	r2, r0, #16
 800c1ce:	0c1b      	lsrs	r3, r3, #16
 800c1d0:	fb06 2303 	mla	r3, r6, r3, r2
 800c1d4:	f8de 2000 	ldr.w	r2, [lr]
 800c1d8:	b280      	uxth	r0, r0
 800c1da:	b292      	uxth	r2, r2
 800c1dc:	1a12      	subs	r2, r2, r0
 800c1de:	445a      	add	r2, fp
 800c1e0:	f8de 0000 	ldr.w	r0, [lr]
 800c1e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c1e8:	b29b      	uxth	r3, r3
 800c1ea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c1ee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c1f2:	b292      	uxth	r2, r2
 800c1f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c1f8:	45e1      	cmp	r9, ip
 800c1fa:	f84e 2b04 	str.w	r2, [lr], #4
 800c1fe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c202:	d2de      	bcs.n	800c1c2 <quorem+0x42>
 800c204:	9b00      	ldr	r3, [sp, #0]
 800c206:	58eb      	ldr	r3, [r5, r3]
 800c208:	b92b      	cbnz	r3, 800c216 <quorem+0x96>
 800c20a:	9b01      	ldr	r3, [sp, #4]
 800c20c:	3b04      	subs	r3, #4
 800c20e:	429d      	cmp	r5, r3
 800c210:	461a      	mov	r2, r3
 800c212:	d32f      	bcc.n	800c274 <quorem+0xf4>
 800c214:	613c      	str	r4, [r7, #16]
 800c216:	4638      	mov	r0, r7
 800c218:	f001 fd0e 	bl	800dc38 <__mcmp>
 800c21c:	2800      	cmp	r0, #0
 800c21e:	db25      	blt.n	800c26c <quorem+0xec>
 800c220:	4629      	mov	r1, r5
 800c222:	2000      	movs	r0, #0
 800c224:	f858 2b04 	ldr.w	r2, [r8], #4
 800c228:	f8d1 c000 	ldr.w	ip, [r1]
 800c22c:	fa1f fe82 	uxth.w	lr, r2
 800c230:	fa1f f38c 	uxth.w	r3, ip
 800c234:	eba3 030e 	sub.w	r3, r3, lr
 800c238:	4403      	add	r3, r0
 800c23a:	0c12      	lsrs	r2, r2, #16
 800c23c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c240:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c244:	b29b      	uxth	r3, r3
 800c246:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c24a:	45c1      	cmp	r9, r8
 800c24c:	f841 3b04 	str.w	r3, [r1], #4
 800c250:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c254:	d2e6      	bcs.n	800c224 <quorem+0xa4>
 800c256:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c25a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c25e:	b922      	cbnz	r2, 800c26a <quorem+0xea>
 800c260:	3b04      	subs	r3, #4
 800c262:	429d      	cmp	r5, r3
 800c264:	461a      	mov	r2, r3
 800c266:	d30b      	bcc.n	800c280 <quorem+0x100>
 800c268:	613c      	str	r4, [r7, #16]
 800c26a:	3601      	adds	r6, #1
 800c26c:	4630      	mov	r0, r6
 800c26e:	b003      	add	sp, #12
 800c270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c274:	6812      	ldr	r2, [r2, #0]
 800c276:	3b04      	subs	r3, #4
 800c278:	2a00      	cmp	r2, #0
 800c27a:	d1cb      	bne.n	800c214 <quorem+0x94>
 800c27c:	3c01      	subs	r4, #1
 800c27e:	e7c6      	b.n	800c20e <quorem+0x8e>
 800c280:	6812      	ldr	r2, [r2, #0]
 800c282:	3b04      	subs	r3, #4
 800c284:	2a00      	cmp	r2, #0
 800c286:	d1ef      	bne.n	800c268 <quorem+0xe8>
 800c288:	3c01      	subs	r4, #1
 800c28a:	e7ea      	b.n	800c262 <quorem+0xe2>
 800c28c:	2000      	movs	r0, #0
 800c28e:	e7ee      	b.n	800c26e <quorem+0xee>

0800c290 <_dtoa_r>:
 800c290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c294:	69c7      	ldr	r7, [r0, #28]
 800c296:	b099      	sub	sp, #100	@ 0x64
 800c298:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c29c:	ec55 4b10 	vmov	r4, r5, d0
 800c2a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c2a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800c2a4:	4683      	mov	fp, r0
 800c2a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800c2a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c2aa:	b97f      	cbnz	r7, 800c2cc <_dtoa_r+0x3c>
 800c2ac:	2010      	movs	r0, #16
 800c2ae:	f001 f937 	bl	800d520 <malloc>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	f8cb 001c 	str.w	r0, [fp, #28]
 800c2b8:	b920      	cbnz	r0, 800c2c4 <_dtoa_r+0x34>
 800c2ba:	4ba7      	ldr	r3, [pc, #668]	@ (800c558 <_dtoa_r+0x2c8>)
 800c2bc:	21ef      	movs	r1, #239	@ 0xef
 800c2be:	48a7      	ldr	r0, [pc, #668]	@ (800c55c <_dtoa_r+0x2cc>)
 800c2c0:	f7ff ff40 	bl	800c144 <__assert_func>
 800c2c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c2c8:	6007      	str	r7, [r0, #0]
 800c2ca:	60c7      	str	r7, [r0, #12]
 800c2cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c2d0:	6819      	ldr	r1, [r3, #0]
 800c2d2:	b159      	cbz	r1, 800c2ec <_dtoa_r+0x5c>
 800c2d4:	685a      	ldr	r2, [r3, #4]
 800c2d6:	604a      	str	r2, [r1, #4]
 800c2d8:	2301      	movs	r3, #1
 800c2da:	4093      	lsls	r3, r2
 800c2dc:	608b      	str	r3, [r1, #8]
 800c2de:	4658      	mov	r0, fp
 800c2e0:	f001 fa26 	bl	800d730 <_Bfree>
 800c2e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	601a      	str	r2, [r3, #0]
 800c2ec:	1e2b      	subs	r3, r5, #0
 800c2ee:	bfb9      	ittee	lt
 800c2f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c2f4:	9303      	strlt	r3, [sp, #12]
 800c2f6:	2300      	movge	r3, #0
 800c2f8:	6033      	strge	r3, [r6, #0]
 800c2fa:	9f03      	ldr	r7, [sp, #12]
 800c2fc:	4b98      	ldr	r3, [pc, #608]	@ (800c560 <_dtoa_r+0x2d0>)
 800c2fe:	bfbc      	itt	lt
 800c300:	2201      	movlt	r2, #1
 800c302:	6032      	strlt	r2, [r6, #0]
 800c304:	43bb      	bics	r3, r7
 800c306:	d112      	bne.n	800c32e <_dtoa_r+0x9e>
 800c308:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c30a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c30e:	6013      	str	r3, [r2, #0]
 800c310:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c314:	4323      	orrs	r3, r4
 800c316:	f000 854d 	beq.w	800cdb4 <_dtoa_r+0xb24>
 800c31a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c31c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c574 <_dtoa_r+0x2e4>
 800c320:	2b00      	cmp	r3, #0
 800c322:	f000 854f 	beq.w	800cdc4 <_dtoa_r+0xb34>
 800c326:	f10a 0303 	add.w	r3, sl, #3
 800c32a:	f000 bd49 	b.w	800cdc0 <_dtoa_r+0xb30>
 800c32e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c332:	2200      	movs	r2, #0
 800c334:	ec51 0b17 	vmov	r0, r1, d7
 800c338:	2300      	movs	r3, #0
 800c33a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c33e:	f7f4 fbfb 	bl	8000b38 <__aeabi_dcmpeq>
 800c342:	4680      	mov	r8, r0
 800c344:	b158      	cbz	r0, 800c35e <_dtoa_r+0xce>
 800c346:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c348:	2301      	movs	r3, #1
 800c34a:	6013      	str	r3, [r2, #0]
 800c34c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c34e:	b113      	cbz	r3, 800c356 <_dtoa_r+0xc6>
 800c350:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c352:	4b84      	ldr	r3, [pc, #528]	@ (800c564 <_dtoa_r+0x2d4>)
 800c354:	6013      	str	r3, [r2, #0]
 800c356:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c578 <_dtoa_r+0x2e8>
 800c35a:	f000 bd33 	b.w	800cdc4 <_dtoa_r+0xb34>
 800c35e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c362:	aa16      	add	r2, sp, #88	@ 0x58
 800c364:	a917      	add	r1, sp, #92	@ 0x5c
 800c366:	4658      	mov	r0, fp
 800c368:	f001 fd86 	bl	800de78 <__d2b>
 800c36c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c370:	4681      	mov	r9, r0
 800c372:	2e00      	cmp	r6, #0
 800c374:	d077      	beq.n	800c466 <_dtoa_r+0x1d6>
 800c376:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c378:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c37c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c380:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c384:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c388:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c38c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c390:	4619      	mov	r1, r3
 800c392:	2200      	movs	r2, #0
 800c394:	4b74      	ldr	r3, [pc, #464]	@ (800c568 <_dtoa_r+0x2d8>)
 800c396:	f7f3 ffaf 	bl	80002f8 <__aeabi_dsub>
 800c39a:	a369      	add	r3, pc, #420	@ (adr r3, 800c540 <_dtoa_r+0x2b0>)
 800c39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a0:	f7f4 f962 	bl	8000668 <__aeabi_dmul>
 800c3a4:	a368      	add	r3, pc, #416	@ (adr r3, 800c548 <_dtoa_r+0x2b8>)
 800c3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3aa:	f7f3 ffa7 	bl	80002fc <__adddf3>
 800c3ae:	4604      	mov	r4, r0
 800c3b0:	4630      	mov	r0, r6
 800c3b2:	460d      	mov	r5, r1
 800c3b4:	f7f4 f8ee 	bl	8000594 <__aeabi_i2d>
 800c3b8:	a365      	add	r3, pc, #404	@ (adr r3, 800c550 <_dtoa_r+0x2c0>)
 800c3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3be:	f7f4 f953 	bl	8000668 <__aeabi_dmul>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	4629      	mov	r1, r5
 800c3ca:	f7f3 ff97 	bl	80002fc <__adddf3>
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	460d      	mov	r5, r1
 800c3d2:	f7f4 fbf9 	bl	8000bc8 <__aeabi_d2iz>
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	4607      	mov	r7, r0
 800c3da:	2300      	movs	r3, #0
 800c3dc:	4620      	mov	r0, r4
 800c3de:	4629      	mov	r1, r5
 800c3e0:	f7f4 fbb4 	bl	8000b4c <__aeabi_dcmplt>
 800c3e4:	b140      	cbz	r0, 800c3f8 <_dtoa_r+0x168>
 800c3e6:	4638      	mov	r0, r7
 800c3e8:	f7f4 f8d4 	bl	8000594 <__aeabi_i2d>
 800c3ec:	4622      	mov	r2, r4
 800c3ee:	462b      	mov	r3, r5
 800c3f0:	f7f4 fba2 	bl	8000b38 <__aeabi_dcmpeq>
 800c3f4:	b900      	cbnz	r0, 800c3f8 <_dtoa_r+0x168>
 800c3f6:	3f01      	subs	r7, #1
 800c3f8:	2f16      	cmp	r7, #22
 800c3fa:	d851      	bhi.n	800c4a0 <_dtoa_r+0x210>
 800c3fc:	4b5b      	ldr	r3, [pc, #364]	@ (800c56c <_dtoa_r+0x2dc>)
 800c3fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c406:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c40a:	f7f4 fb9f 	bl	8000b4c <__aeabi_dcmplt>
 800c40e:	2800      	cmp	r0, #0
 800c410:	d048      	beq.n	800c4a4 <_dtoa_r+0x214>
 800c412:	3f01      	subs	r7, #1
 800c414:	2300      	movs	r3, #0
 800c416:	9312      	str	r3, [sp, #72]	@ 0x48
 800c418:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c41a:	1b9b      	subs	r3, r3, r6
 800c41c:	1e5a      	subs	r2, r3, #1
 800c41e:	bf44      	itt	mi
 800c420:	f1c3 0801 	rsbmi	r8, r3, #1
 800c424:	2300      	movmi	r3, #0
 800c426:	9208      	str	r2, [sp, #32]
 800c428:	bf54      	ite	pl
 800c42a:	f04f 0800 	movpl.w	r8, #0
 800c42e:	9308      	strmi	r3, [sp, #32]
 800c430:	2f00      	cmp	r7, #0
 800c432:	db39      	blt.n	800c4a8 <_dtoa_r+0x218>
 800c434:	9b08      	ldr	r3, [sp, #32]
 800c436:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c438:	443b      	add	r3, r7
 800c43a:	9308      	str	r3, [sp, #32]
 800c43c:	2300      	movs	r3, #0
 800c43e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c442:	2b09      	cmp	r3, #9
 800c444:	d864      	bhi.n	800c510 <_dtoa_r+0x280>
 800c446:	2b05      	cmp	r3, #5
 800c448:	bfc4      	itt	gt
 800c44a:	3b04      	subgt	r3, #4
 800c44c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c44e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c450:	f1a3 0302 	sub.w	r3, r3, #2
 800c454:	bfcc      	ite	gt
 800c456:	2400      	movgt	r4, #0
 800c458:	2401      	movle	r4, #1
 800c45a:	2b03      	cmp	r3, #3
 800c45c:	d863      	bhi.n	800c526 <_dtoa_r+0x296>
 800c45e:	e8df f003 	tbb	[pc, r3]
 800c462:	372a      	.short	0x372a
 800c464:	5535      	.short	0x5535
 800c466:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c46a:	441e      	add	r6, r3
 800c46c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c470:	2b20      	cmp	r3, #32
 800c472:	bfc1      	itttt	gt
 800c474:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c478:	409f      	lslgt	r7, r3
 800c47a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c47e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c482:	bfd6      	itet	le
 800c484:	f1c3 0320 	rsble	r3, r3, #32
 800c488:	ea47 0003 	orrgt.w	r0, r7, r3
 800c48c:	fa04 f003 	lslle.w	r0, r4, r3
 800c490:	f7f4 f870 	bl	8000574 <__aeabi_ui2d>
 800c494:	2201      	movs	r2, #1
 800c496:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c49a:	3e01      	subs	r6, #1
 800c49c:	9214      	str	r2, [sp, #80]	@ 0x50
 800c49e:	e777      	b.n	800c390 <_dtoa_r+0x100>
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	e7b8      	b.n	800c416 <_dtoa_r+0x186>
 800c4a4:	9012      	str	r0, [sp, #72]	@ 0x48
 800c4a6:	e7b7      	b.n	800c418 <_dtoa_r+0x188>
 800c4a8:	427b      	negs	r3, r7
 800c4aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	eba8 0807 	sub.w	r8, r8, r7
 800c4b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c4b4:	e7c4      	b.n	800c440 <_dtoa_r+0x1b0>
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	dc35      	bgt.n	800c52c <_dtoa_r+0x29c>
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	9300      	str	r3, [sp, #0]
 800c4c4:	9307      	str	r3, [sp, #28]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c4ca:	e00b      	b.n	800c4e4 <_dtoa_r+0x254>
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	e7f3      	b.n	800c4b8 <_dtoa_r+0x228>
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4d6:	18fb      	adds	r3, r7, r3
 800c4d8:	9300      	str	r3, [sp, #0]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	9307      	str	r3, [sp, #28]
 800c4e0:	bfb8      	it	lt
 800c4e2:	2301      	movlt	r3, #1
 800c4e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	2204      	movs	r2, #4
 800c4ec:	f102 0514 	add.w	r5, r2, #20
 800c4f0:	429d      	cmp	r5, r3
 800c4f2:	d91f      	bls.n	800c534 <_dtoa_r+0x2a4>
 800c4f4:	6041      	str	r1, [r0, #4]
 800c4f6:	4658      	mov	r0, fp
 800c4f8:	f001 f8da 	bl	800d6b0 <_Balloc>
 800c4fc:	4682      	mov	sl, r0
 800c4fe:	2800      	cmp	r0, #0
 800c500:	d13c      	bne.n	800c57c <_dtoa_r+0x2ec>
 800c502:	4b1b      	ldr	r3, [pc, #108]	@ (800c570 <_dtoa_r+0x2e0>)
 800c504:	4602      	mov	r2, r0
 800c506:	f240 11af 	movw	r1, #431	@ 0x1af
 800c50a:	e6d8      	b.n	800c2be <_dtoa_r+0x2e>
 800c50c:	2301      	movs	r3, #1
 800c50e:	e7e0      	b.n	800c4d2 <_dtoa_r+0x242>
 800c510:	2401      	movs	r4, #1
 800c512:	2300      	movs	r3, #0
 800c514:	9309      	str	r3, [sp, #36]	@ 0x24
 800c516:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c518:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c51c:	9300      	str	r3, [sp, #0]
 800c51e:	9307      	str	r3, [sp, #28]
 800c520:	2200      	movs	r2, #0
 800c522:	2312      	movs	r3, #18
 800c524:	e7d0      	b.n	800c4c8 <_dtoa_r+0x238>
 800c526:	2301      	movs	r3, #1
 800c528:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c52a:	e7f5      	b.n	800c518 <_dtoa_r+0x288>
 800c52c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c52e:	9300      	str	r3, [sp, #0]
 800c530:	9307      	str	r3, [sp, #28]
 800c532:	e7d7      	b.n	800c4e4 <_dtoa_r+0x254>
 800c534:	3101      	adds	r1, #1
 800c536:	0052      	lsls	r2, r2, #1
 800c538:	e7d8      	b.n	800c4ec <_dtoa_r+0x25c>
 800c53a:	bf00      	nop
 800c53c:	f3af 8000 	nop.w
 800c540:	636f4361 	.word	0x636f4361
 800c544:	3fd287a7 	.word	0x3fd287a7
 800c548:	8b60c8b3 	.word	0x8b60c8b3
 800c54c:	3fc68a28 	.word	0x3fc68a28
 800c550:	509f79fb 	.word	0x509f79fb
 800c554:	3fd34413 	.word	0x3fd34413
 800c558:	0800ed12 	.word	0x0800ed12
 800c55c:	0800edd4 	.word	0x0800edd4
 800c560:	7ff00000 	.word	0x7ff00000
 800c564:	0800ecea 	.word	0x0800ecea
 800c568:	3ff80000 	.word	0x3ff80000
 800c56c:	0800ef30 	.word	0x0800ef30
 800c570:	0800ee2c 	.word	0x0800ee2c
 800c574:	0800edd0 	.word	0x0800edd0
 800c578:	0800ece9 	.word	0x0800ece9
 800c57c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c580:	6018      	str	r0, [r3, #0]
 800c582:	9b07      	ldr	r3, [sp, #28]
 800c584:	2b0e      	cmp	r3, #14
 800c586:	f200 80a4 	bhi.w	800c6d2 <_dtoa_r+0x442>
 800c58a:	2c00      	cmp	r4, #0
 800c58c:	f000 80a1 	beq.w	800c6d2 <_dtoa_r+0x442>
 800c590:	2f00      	cmp	r7, #0
 800c592:	dd33      	ble.n	800c5fc <_dtoa_r+0x36c>
 800c594:	4bad      	ldr	r3, [pc, #692]	@ (800c84c <_dtoa_r+0x5bc>)
 800c596:	f007 020f 	and.w	r2, r7, #15
 800c59a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c59e:	ed93 7b00 	vldr	d7, [r3]
 800c5a2:	05f8      	lsls	r0, r7, #23
 800c5a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c5a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c5ac:	d516      	bpl.n	800c5dc <_dtoa_r+0x34c>
 800c5ae:	4ba8      	ldr	r3, [pc, #672]	@ (800c850 <_dtoa_r+0x5c0>)
 800c5b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c5b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c5b8:	f7f4 f980 	bl	80008bc <__aeabi_ddiv>
 800c5bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5c0:	f004 040f 	and.w	r4, r4, #15
 800c5c4:	2603      	movs	r6, #3
 800c5c6:	4da2      	ldr	r5, [pc, #648]	@ (800c850 <_dtoa_r+0x5c0>)
 800c5c8:	b954      	cbnz	r4, 800c5e0 <_dtoa_r+0x350>
 800c5ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5d2:	f7f4 f973 	bl	80008bc <__aeabi_ddiv>
 800c5d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5da:	e028      	b.n	800c62e <_dtoa_r+0x39e>
 800c5dc:	2602      	movs	r6, #2
 800c5de:	e7f2      	b.n	800c5c6 <_dtoa_r+0x336>
 800c5e0:	07e1      	lsls	r1, r4, #31
 800c5e2:	d508      	bpl.n	800c5f6 <_dtoa_r+0x366>
 800c5e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c5ec:	f7f4 f83c 	bl	8000668 <__aeabi_dmul>
 800c5f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c5f4:	3601      	adds	r6, #1
 800c5f6:	1064      	asrs	r4, r4, #1
 800c5f8:	3508      	adds	r5, #8
 800c5fa:	e7e5      	b.n	800c5c8 <_dtoa_r+0x338>
 800c5fc:	f000 80d2 	beq.w	800c7a4 <_dtoa_r+0x514>
 800c600:	427c      	negs	r4, r7
 800c602:	4b92      	ldr	r3, [pc, #584]	@ (800c84c <_dtoa_r+0x5bc>)
 800c604:	4d92      	ldr	r5, [pc, #584]	@ (800c850 <_dtoa_r+0x5c0>)
 800c606:	f004 020f 	and.w	r2, r4, #15
 800c60a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c612:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c616:	f7f4 f827 	bl	8000668 <__aeabi_dmul>
 800c61a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c61e:	1124      	asrs	r4, r4, #4
 800c620:	2300      	movs	r3, #0
 800c622:	2602      	movs	r6, #2
 800c624:	2c00      	cmp	r4, #0
 800c626:	f040 80b2 	bne.w	800c78e <_dtoa_r+0x4fe>
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d1d3      	bne.n	800c5d6 <_dtoa_r+0x346>
 800c62e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c630:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c634:	2b00      	cmp	r3, #0
 800c636:	f000 80b7 	beq.w	800c7a8 <_dtoa_r+0x518>
 800c63a:	4b86      	ldr	r3, [pc, #536]	@ (800c854 <_dtoa_r+0x5c4>)
 800c63c:	2200      	movs	r2, #0
 800c63e:	4620      	mov	r0, r4
 800c640:	4629      	mov	r1, r5
 800c642:	f7f4 fa83 	bl	8000b4c <__aeabi_dcmplt>
 800c646:	2800      	cmp	r0, #0
 800c648:	f000 80ae 	beq.w	800c7a8 <_dtoa_r+0x518>
 800c64c:	9b07      	ldr	r3, [sp, #28]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	f000 80aa 	beq.w	800c7a8 <_dtoa_r+0x518>
 800c654:	9b00      	ldr	r3, [sp, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	dd37      	ble.n	800c6ca <_dtoa_r+0x43a>
 800c65a:	1e7b      	subs	r3, r7, #1
 800c65c:	9304      	str	r3, [sp, #16]
 800c65e:	4620      	mov	r0, r4
 800c660:	4b7d      	ldr	r3, [pc, #500]	@ (800c858 <_dtoa_r+0x5c8>)
 800c662:	2200      	movs	r2, #0
 800c664:	4629      	mov	r1, r5
 800c666:	f7f3 ffff 	bl	8000668 <__aeabi_dmul>
 800c66a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c66e:	9c00      	ldr	r4, [sp, #0]
 800c670:	3601      	adds	r6, #1
 800c672:	4630      	mov	r0, r6
 800c674:	f7f3 ff8e 	bl	8000594 <__aeabi_i2d>
 800c678:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c67c:	f7f3 fff4 	bl	8000668 <__aeabi_dmul>
 800c680:	4b76      	ldr	r3, [pc, #472]	@ (800c85c <_dtoa_r+0x5cc>)
 800c682:	2200      	movs	r2, #0
 800c684:	f7f3 fe3a 	bl	80002fc <__adddf3>
 800c688:	4605      	mov	r5, r0
 800c68a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c68e:	2c00      	cmp	r4, #0
 800c690:	f040 808d 	bne.w	800c7ae <_dtoa_r+0x51e>
 800c694:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c698:	4b71      	ldr	r3, [pc, #452]	@ (800c860 <_dtoa_r+0x5d0>)
 800c69a:	2200      	movs	r2, #0
 800c69c:	f7f3 fe2c 	bl	80002f8 <__aeabi_dsub>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c6a8:	462a      	mov	r2, r5
 800c6aa:	4633      	mov	r3, r6
 800c6ac:	f7f4 fa6c 	bl	8000b88 <__aeabi_dcmpgt>
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	f040 828b 	bne.w	800cbcc <_dtoa_r+0x93c>
 800c6b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6ba:	462a      	mov	r2, r5
 800c6bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c6c0:	f7f4 fa44 	bl	8000b4c <__aeabi_dcmplt>
 800c6c4:	2800      	cmp	r0, #0
 800c6c6:	f040 8128 	bne.w	800c91a <_dtoa_r+0x68a>
 800c6ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c6ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c6d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	f2c0 815a 	blt.w	800c98e <_dtoa_r+0x6fe>
 800c6da:	2f0e      	cmp	r7, #14
 800c6dc:	f300 8157 	bgt.w	800c98e <_dtoa_r+0x6fe>
 800c6e0:	4b5a      	ldr	r3, [pc, #360]	@ (800c84c <_dtoa_r+0x5bc>)
 800c6e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c6e6:	ed93 7b00 	vldr	d7, [r3]
 800c6ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	ed8d 7b00 	vstr	d7, [sp]
 800c6f2:	da03      	bge.n	800c6fc <_dtoa_r+0x46c>
 800c6f4:	9b07      	ldr	r3, [sp, #28]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	f340 8101 	ble.w	800c8fe <_dtoa_r+0x66e>
 800c6fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c700:	4656      	mov	r6, sl
 800c702:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c706:	4620      	mov	r0, r4
 800c708:	4629      	mov	r1, r5
 800c70a:	f7f4 f8d7 	bl	80008bc <__aeabi_ddiv>
 800c70e:	f7f4 fa5b 	bl	8000bc8 <__aeabi_d2iz>
 800c712:	4680      	mov	r8, r0
 800c714:	f7f3 ff3e 	bl	8000594 <__aeabi_i2d>
 800c718:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c71c:	f7f3 ffa4 	bl	8000668 <__aeabi_dmul>
 800c720:	4602      	mov	r2, r0
 800c722:	460b      	mov	r3, r1
 800c724:	4620      	mov	r0, r4
 800c726:	4629      	mov	r1, r5
 800c728:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c72c:	f7f3 fde4 	bl	80002f8 <__aeabi_dsub>
 800c730:	f806 4b01 	strb.w	r4, [r6], #1
 800c734:	9d07      	ldr	r5, [sp, #28]
 800c736:	eba6 040a 	sub.w	r4, r6, sl
 800c73a:	42a5      	cmp	r5, r4
 800c73c:	4602      	mov	r2, r0
 800c73e:	460b      	mov	r3, r1
 800c740:	f040 8117 	bne.w	800c972 <_dtoa_r+0x6e2>
 800c744:	f7f3 fdda 	bl	80002fc <__adddf3>
 800c748:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c74c:	4604      	mov	r4, r0
 800c74e:	460d      	mov	r5, r1
 800c750:	f7f4 fa1a 	bl	8000b88 <__aeabi_dcmpgt>
 800c754:	2800      	cmp	r0, #0
 800c756:	f040 80f9 	bne.w	800c94c <_dtoa_r+0x6bc>
 800c75a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c75e:	4620      	mov	r0, r4
 800c760:	4629      	mov	r1, r5
 800c762:	f7f4 f9e9 	bl	8000b38 <__aeabi_dcmpeq>
 800c766:	b118      	cbz	r0, 800c770 <_dtoa_r+0x4e0>
 800c768:	f018 0f01 	tst.w	r8, #1
 800c76c:	f040 80ee 	bne.w	800c94c <_dtoa_r+0x6bc>
 800c770:	4649      	mov	r1, r9
 800c772:	4658      	mov	r0, fp
 800c774:	f000 ffdc 	bl	800d730 <_Bfree>
 800c778:	2300      	movs	r3, #0
 800c77a:	7033      	strb	r3, [r6, #0]
 800c77c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c77e:	3701      	adds	r7, #1
 800c780:	601f      	str	r7, [r3, #0]
 800c782:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c784:	2b00      	cmp	r3, #0
 800c786:	f000 831d 	beq.w	800cdc4 <_dtoa_r+0xb34>
 800c78a:	601e      	str	r6, [r3, #0]
 800c78c:	e31a      	b.n	800cdc4 <_dtoa_r+0xb34>
 800c78e:	07e2      	lsls	r2, r4, #31
 800c790:	d505      	bpl.n	800c79e <_dtoa_r+0x50e>
 800c792:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c796:	f7f3 ff67 	bl	8000668 <__aeabi_dmul>
 800c79a:	3601      	adds	r6, #1
 800c79c:	2301      	movs	r3, #1
 800c79e:	1064      	asrs	r4, r4, #1
 800c7a0:	3508      	adds	r5, #8
 800c7a2:	e73f      	b.n	800c624 <_dtoa_r+0x394>
 800c7a4:	2602      	movs	r6, #2
 800c7a6:	e742      	b.n	800c62e <_dtoa_r+0x39e>
 800c7a8:	9c07      	ldr	r4, [sp, #28]
 800c7aa:	9704      	str	r7, [sp, #16]
 800c7ac:	e761      	b.n	800c672 <_dtoa_r+0x3e2>
 800c7ae:	4b27      	ldr	r3, [pc, #156]	@ (800c84c <_dtoa_r+0x5bc>)
 800c7b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c7b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c7b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c7ba:	4454      	add	r4, sl
 800c7bc:	2900      	cmp	r1, #0
 800c7be:	d053      	beq.n	800c868 <_dtoa_r+0x5d8>
 800c7c0:	4928      	ldr	r1, [pc, #160]	@ (800c864 <_dtoa_r+0x5d4>)
 800c7c2:	2000      	movs	r0, #0
 800c7c4:	f7f4 f87a 	bl	80008bc <__aeabi_ddiv>
 800c7c8:	4633      	mov	r3, r6
 800c7ca:	462a      	mov	r2, r5
 800c7cc:	f7f3 fd94 	bl	80002f8 <__aeabi_dsub>
 800c7d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c7d4:	4656      	mov	r6, sl
 800c7d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7da:	f7f4 f9f5 	bl	8000bc8 <__aeabi_d2iz>
 800c7de:	4605      	mov	r5, r0
 800c7e0:	f7f3 fed8 	bl	8000594 <__aeabi_i2d>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	460b      	mov	r3, r1
 800c7e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7ec:	f7f3 fd84 	bl	80002f8 <__aeabi_dsub>
 800c7f0:	3530      	adds	r5, #48	@ 0x30
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c7fa:	f806 5b01 	strb.w	r5, [r6], #1
 800c7fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c802:	f7f4 f9a3 	bl	8000b4c <__aeabi_dcmplt>
 800c806:	2800      	cmp	r0, #0
 800c808:	d171      	bne.n	800c8ee <_dtoa_r+0x65e>
 800c80a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c80e:	4911      	ldr	r1, [pc, #68]	@ (800c854 <_dtoa_r+0x5c4>)
 800c810:	2000      	movs	r0, #0
 800c812:	f7f3 fd71 	bl	80002f8 <__aeabi_dsub>
 800c816:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c81a:	f7f4 f997 	bl	8000b4c <__aeabi_dcmplt>
 800c81e:	2800      	cmp	r0, #0
 800c820:	f040 8095 	bne.w	800c94e <_dtoa_r+0x6be>
 800c824:	42a6      	cmp	r6, r4
 800c826:	f43f af50 	beq.w	800c6ca <_dtoa_r+0x43a>
 800c82a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c82e:	4b0a      	ldr	r3, [pc, #40]	@ (800c858 <_dtoa_r+0x5c8>)
 800c830:	2200      	movs	r2, #0
 800c832:	f7f3 ff19 	bl	8000668 <__aeabi_dmul>
 800c836:	4b08      	ldr	r3, [pc, #32]	@ (800c858 <_dtoa_r+0x5c8>)
 800c838:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c83c:	2200      	movs	r2, #0
 800c83e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c842:	f7f3 ff11 	bl	8000668 <__aeabi_dmul>
 800c846:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c84a:	e7c4      	b.n	800c7d6 <_dtoa_r+0x546>
 800c84c:	0800ef30 	.word	0x0800ef30
 800c850:	0800ef08 	.word	0x0800ef08
 800c854:	3ff00000 	.word	0x3ff00000
 800c858:	40240000 	.word	0x40240000
 800c85c:	401c0000 	.word	0x401c0000
 800c860:	40140000 	.word	0x40140000
 800c864:	3fe00000 	.word	0x3fe00000
 800c868:	4631      	mov	r1, r6
 800c86a:	4628      	mov	r0, r5
 800c86c:	f7f3 fefc 	bl	8000668 <__aeabi_dmul>
 800c870:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c874:	9415      	str	r4, [sp, #84]	@ 0x54
 800c876:	4656      	mov	r6, sl
 800c878:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c87c:	f7f4 f9a4 	bl	8000bc8 <__aeabi_d2iz>
 800c880:	4605      	mov	r5, r0
 800c882:	f7f3 fe87 	bl	8000594 <__aeabi_i2d>
 800c886:	4602      	mov	r2, r0
 800c888:	460b      	mov	r3, r1
 800c88a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c88e:	f7f3 fd33 	bl	80002f8 <__aeabi_dsub>
 800c892:	3530      	adds	r5, #48	@ 0x30
 800c894:	f806 5b01 	strb.w	r5, [r6], #1
 800c898:	4602      	mov	r2, r0
 800c89a:	460b      	mov	r3, r1
 800c89c:	42a6      	cmp	r6, r4
 800c89e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c8a2:	f04f 0200 	mov.w	r2, #0
 800c8a6:	d124      	bne.n	800c8f2 <_dtoa_r+0x662>
 800c8a8:	4bac      	ldr	r3, [pc, #688]	@ (800cb5c <_dtoa_r+0x8cc>)
 800c8aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c8ae:	f7f3 fd25 	bl	80002fc <__adddf3>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8ba:	f7f4 f965 	bl	8000b88 <__aeabi_dcmpgt>
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	d145      	bne.n	800c94e <_dtoa_r+0x6be>
 800c8c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c8c6:	49a5      	ldr	r1, [pc, #660]	@ (800cb5c <_dtoa_r+0x8cc>)
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	f7f3 fd15 	bl	80002f8 <__aeabi_dsub>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8d6:	f7f4 f939 	bl	8000b4c <__aeabi_dcmplt>
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	f43f aef5 	beq.w	800c6ca <_dtoa_r+0x43a>
 800c8e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c8e2:	1e73      	subs	r3, r6, #1
 800c8e4:	9315      	str	r3, [sp, #84]	@ 0x54
 800c8e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c8ea:	2b30      	cmp	r3, #48	@ 0x30
 800c8ec:	d0f8      	beq.n	800c8e0 <_dtoa_r+0x650>
 800c8ee:	9f04      	ldr	r7, [sp, #16]
 800c8f0:	e73e      	b.n	800c770 <_dtoa_r+0x4e0>
 800c8f2:	4b9b      	ldr	r3, [pc, #620]	@ (800cb60 <_dtoa_r+0x8d0>)
 800c8f4:	f7f3 feb8 	bl	8000668 <__aeabi_dmul>
 800c8f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8fc:	e7bc      	b.n	800c878 <_dtoa_r+0x5e8>
 800c8fe:	d10c      	bne.n	800c91a <_dtoa_r+0x68a>
 800c900:	4b98      	ldr	r3, [pc, #608]	@ (800cb64 <_dtoa_r+0x8d4>)
 800c902:	2200      	movs	r2, #0
 800c904:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c908:	f7f3 feae 	bl	8000668 <__aeabi_dmul>
 800c90c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c910:	f7f4 f930 	bl	8000b74 <__aeabi_dcmpge>
 800c914:	2800      	cmp	r0, #0
 800c916:	f000 8157 	beq.w	800cbc8 <_dtoa_r+0x938>
 800c91a:	2400      	movs	r4, #0
 800c91c:	4625      	mov	r5, r4
 800c91e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c920:	43db      	mvns	r3, r3
 800c922:	9304      	str	r3, [sp, #16]
 800c924:	4656      	mov	r6, sl
 800c926:	2700      	movs	r7, #0
 800c928:	4621      	mov	r1, r4
 800c92a:	4658      	mov	r0, fp
 800c92c:	f000 ff00 	bl	800d730 <_Bfree>
 800c930:	2d00      	cmp	r5, #0
 800c932:	d0dc      	beq.n	800c8ee <_dtoa_r+0x65e>
 800c934:	b12f      	cbz	r7, 800c942 <_dtoa_r+0x6b2>
 800c936:	42af      	cmp	r7, r5
 800c938:	d003      	beq.n	800c942 <_dtoa_r+0x6b2>
 800c93a:	4639      	mov	r1, r7
 800c93c:	4658      	mov	r0, fp
 800c93e:	f000 fef7 	bl	800d730 <_Bfree>
 800c942:	4629      	mov	r1, r5
 800c944:	4658      	mov	r0, fp
 800c946:	f000 fef3 	bl	800d730 <_Bfree>
 800c94a:	e7d0      	b.n	800c8ee <_dtoa_r+0x65e>
 800c94c:	9704      	str	r7, [sp, #16]
 800c94e:	4633      	mov	r3, r6
 800c950:	461e      	mov	r6, r3
 800c952:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c956:	2a39      	cmp	r2, #57	@ 0x39
 800c958:	d107      	bne.n	800c96a <_dtoa_r+0x6da>
 800c95a:	459a      	cmp	sl, r3
 800c95c:	d1f8      	bne.n	800c950 <_dtoa_r+0x6c0>
 800c95e:	9a04      	ldr	r2, [sp, #16]
 800c960:	3201      	adds	r2, #1
 800c962:	9204      	str	r2, [sp, #16]
 800c964:	2230      	movs	r2, #48	@ 0x30
 800c966:	f88a 2000 	strb.w	r2, [sl]
 800c96a:	781a      	ldrb	r2, [r3, #0]
 800c96c:	3201      	adds	r2, #1
 800c96e:	701a      	strb	r2, [r3, #0]
 800c970:	e7bd      	b.n	800c8ee <_dtoa_r+0x65e>
 800c972:	4b7b      	ldr	r3, [pc, #492]	@ (800cb60 <_dtoa_r+0x8d0>)
 800c974:	2200      	movs	r2, #0
 800c976:	f7f3 fe77 	bl	8000668 <__aeabi_dmul>
 800c97a:	2200      	movs	r2, #0
 800c97c:	2300      	movs	r3, #0
 800c97e:	4604      	mov	r4, r0
 800c980:	460d      	mov	r5, r1
 800c982:	f7f4 f8d9 	bl	8000b38 <__aeabi_dcmpeq>
 800c986:	2800      	cmp	r0, #0
 800c988:	f43f aebb 	beq.w	800c702 <_dtoa_r+0x472>
 800c98c:	e6f0      	b.n	800c770 <_dtoa_r+0x4e0>
 800c98e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c990:	2a00      	cmp	r2, #0
 800c992:	f000 80db 	beq.w	800cb4c <_dtoa_r+0x8bc>
 800c996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c998:	2a01      	cmp	r2, #1
 800c99a:	f300 80bf 	bgt.w	800cb1c <_dtoa_r+0x88c>
 800c99e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c9a0:	2a00      	cmp	r2, #0
 800c9a2:	f000 80b7 	beq.w	800cb14 <_dtoa_r+0x884>
 800c9a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c9aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c9ac:	4646      	mov	r6, r8
 800c9ae:	9a08      	ldr	r2, [sp, #32]
 800c9b0:	2101      	movs	r1, #1
 800c9b2:	441a      	add	r2, r3
 800c9b4:	4658      	mov	r0, fp
 800c9b6:	4498      	add	r8, r3
 800c9b8:	9208      	str	r2, [sp, #32]
 800c9ba:	f000 ffb7 	bl	800d92c <__i2b>
 800c9be:	4605      	mov	r5, r0
 800c9c0:	b15e      	cbz	r6, 800c9da <_dtoa_r+0x74a>
 800c9c2:	9b08      	ldr	r3, [sp, #32]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	dd08      	ble.n	800c9da <_dtoa_r+0x74a>
 800c9c8:	42b3      	cmp	r3, r6
 800c9ca:	9a08      	ldr	r2, [sp, #32]
 800c9cc:	bfa8      	it	ge
 800c9ce:	4633      	movge	r3, r6
 800c9d0:	eba8 0803 	sub.w	r8, r8, r3
 800c9d4:	1af6      	subs	r6, r6, r3
 800c9d6:	1ad3      	subs	r3, r2, r3
 800c9d8:	9308      	str	r3, [sp, #32]
 800c9da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9dc:	b1f3      	cbz	r3, 800ca1c <_dtoa_r+0x78c>
 800c9de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f000 80b7 	beq.w	800cb54 <_dtoa_r+0x8c4>
 800c9e6:	b18c      	cbz	r4, 800ca0c <_dtoa_r+0x77c>
 800c9e8:	4629      	mov	r1, r5
 800c9ea:	4622      	mov	r2, r4
 800c9ec:	4658      	mov	r0, fp
 800c9ee:	f001 f85d 	bl	800daac <__pow5mult>
 800c9f2:	464a      	mov	r2, r9
 800c9f4:	4601      	mov	r1, r0
 800c9f6:	4605      	mov	r5, r0
 800c9f8:	4658      	mov	r0, fp
 800c9fa:	f000 ffad 	bl	800d958 <__multiply>
 800c9fe:	4649      	mov	r1, r9
 800ca00:	9004      	str	r0, [sp, #16]
 800ca02:	4658      	mov	r0, fp
 800ca04:	f000 fe94 	bl	800d730 <_Bfree>
 800ca08:	9b04      	ldr	r3, [sp, #16]
 800ca0a:	4699      	mov	r9, r3
 800ca0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca0e:	1b1a      	subs	r2, r3, r4
 800ca10:	d004      	beq.n	800ca1c <_dtoa_r+0x78c>
 800ca12:	4649      	mov	r1, r9
 800ca14:	4658      	mov	r0, fp
 800ca16:	f001 f849 	bl	800daac <__pow5mult>
 800ca1a:	4681      	mov	r9, r0
 800ca1c:	2101      	movs	r1, #1
 800ca1e:	4658      	mov	r0, fp
 800ca20:	f000 ff84 	bl	800d92c <__i2b>
 800ca24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca26:	4604      	mov	r4, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	f000 81cf 	beq.w	800cdcc <_dtoa_r+0xb3c>
 800ca2e:	461a      	mov	r2, r3
 800ca30:	4601      	mov	r1, r0
 800ca32:	4658      	mov	r0, fp
 800ca34:	f001 f83a 	bl	800daac <__pow5mult>
 800ca38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca3a:	2b01      	cmp	r3, #1
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	f300 8095 	bgt.w	800cb6c <_dtoa_r+0x8dc>
 800ca42:	9b02      	ldr	r3, [sp, #8]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	f040 8087 	bne.w	800cb58 <_dtoa_r+0x8c8>
 800ca4a:	9b03      	ldr	r3, [sp, #12]
 800ca4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	f040 8089 	bne.w	800cb68 <_dtoa_r+0x8d8>
 800ca56:	9b03      	ldr	r3, [sp, #12]
 800ca58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ca5c:	0d1b      	lsrs	r3, r3, #20
 800ca5e:	051b      	lsls	r3, r3, #20
 800ca60:	b12b      	cbz	r3, 800ca6e <_dtoa_r+0x7de>
 800ca62:	9b08      	ldr	r3, [sp, #32]
 800ca64:	3301      	adds	r3, #1
 800ca66:	9308      	str	r3, [sp, #32]
 800ca68:	f108 0801 	add.w	r8, r8, #1
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f000 81b0 	beq.w	800cdd8 <_dtoa_r+0xb48>
 800ca78:	6923      	ldr	r3, [r4, #16]
 800ca7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ca7e:	6918      	ldr	r0, [r3, #16]
 800ca80:	f000 ff08 	bl	800d894 <__hi0bits>
 800ca84:	f1c0 0020 	rsb	r0, r0, #32
 800ca88:	9b08      	ldr	r3, [sp, #32]
 800ca8a:	4418      	add	r0, r3
 800ca8c:	f010 001f 	ands.w	r0, r0, #31
 800ca90:	d077      	beq.n	800cb82 <_dtoa_r+0x8f2>
 800ca92:	f1c0 0320 	rsb	r3, r0, #32
 800ca96:	2b04      	cmp	r3, #4
 800ca98:	dd6b      	ble.n	800cb72 <_dtoa_r+0x8e2>
 800ca9a:	9b08      	ldr	r3, [sp, #32]
 800ca9c:	f1c0 001c 	rsb	r0, r0, #28
 800caa0:	4403      	add	r3, r0
 800caa2:	4480      	add	r8, r0
 800caa4:	4406      	add	r6, r0
 800caa6:	9308      	str	r3, [sp, #32]
 800caa8:	f1b8 0f00 	cmp.w	r8, #0
 800caac:	dd05      	ble.n	800caba <_dtoa_r+0x82a>
 800caae:	4649      	mov	r1, r9
 800cab0:	4642      	mov	r2, r8
 800cab2:	4658      	mov	r0, fp
 800cab4:	f001 f854 	bl	800db60 <__lshift>
 800cab8:	4681      	mov	r9, r0
 800caba:	9b08      	ldr	r3, [sp, #32]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	dd05      	ble.n	800cacc <_dtoa_r+0x83c>
 800cac0:	4621      	mov	r1, r4
 800cac2:	461a      	mov	r2, r3
 800cac4:	4658      	mov	r0, fp
 800cac6:	f001 f84b 	bl	800db60 <__lshift>
 800caca:	4604      	mov	r4, r0
 800cacc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d059      	beq.n	800cb86 <_dtoa_r+0x8f6>
 800cad2:	4621      	mov	r1, r4
 800cad4:	4648      	mov	r0, r9
 800cad6:	f001 f8af 	bl	800dc38 <__mcmp>
 800cada:	2800      	cmp	r0, #0
 800cadc:	da53      	bge.n	800cb86 <_dtoa_r+0x8f6>
 800cade:	1e7b      	subs	r3, r7, #1
 800cae0:	9304      	str	r3, [sp, #16]
 800cae2:	4649      	mov	r1, r9
 800cae4:	2300      	movs	r3, #0
 800cae6:	220a      	movs	r2, #10
 800cae8:	4658      	mov	r0, fp
 800caea:	f000 fe43 	bl	800d774 <__multadd>
 800caee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800caf0:	4681      	mov	r9, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	f000 8172 	beq.w	800cddc <_dtoa_r+0xb4c>
 800caf8:	2300      	movs	r3, #0
 800cafa:	4629      	mov	r1, r5
 800cafc:	220a      	movs	r2, #10
 800cafe:	4658      	mov	r0, fp
 800cb00:	f000 fe38 	bl	800d774 <__multadd>
 800cb04:	9b00      	ldr	r3, [sp, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	4605      	mov	r5, r0
 800cb0a:	dc67      	bgt.n	800cbdc <_dtoa_r+0x94c>
 800cb0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb0e:	2b02      	cmp	r3, #2
 800cb10:	dc41      	bgt.n	800cb96 <_dtoa_r+0x906>
 800cb12:	e063      	b.n	800cbdc <_dtoa_r+0x94c>
 800cb14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cb16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cb1a:	e746      	b.n	800c9aa <_dtoa_r+0x71a>
 800cb1c:	9b07      	ldr	r3, [sp, #28]
 800cb1e:	1e5c      	subs	r4, r3, #1
 800cb20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb22:	42a3      	cmp	r3, r4
 800cb24:	bfbf      	itttt	lt
 800cb26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cb28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800cb2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cb2c:	1ae3      	sublt	r3, r4, r3
 800cb2e:	bfb4      	ite	lt
 800cb30:	18d2      	addlt	r2, r2, r3
 800cb32:	1b1c      	subge	r4, r3, r4
 800cb34:	9b07      	ldr	r3, [sp, #28]
 800cb36:	bfbc      	itt	lt
 800cb38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800cb3a:	2400      	movlt	r4, #0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	bfb5      	itete	lt
 800cb40:	eba8 0603 	sublt.w	r6, r8, r3
 800cb44:	9b07      	ldrge	r3, [sp, #28]
 800cb46:	2300      	movlt	r3, #0
 800cb48:	4646      	movge	r6, r8
 800cb4a:	e730      	b.n	800c9ae <_dtoa_r+0x71e>
 800cb4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cb4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800cb50:	4646      	mov	r6, r8
 800cb52:	e735      	b.n	800c9c0 <_dtoa_r+0x730>
 800cb54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cb56:	e75c      	b.n	800ca12 <_dtoa_r+0x782>
 800cb58:	2300      	movs	r3, #0
 800cb5a:	e788      	b.n	800ca6e <_dtoa_r+0x7de>
 800cb5c:	3fe00000 	.word	0x3fe00000
 800cb60:	40240000 	.word	0x40240000
 800cb64:	40140000 	.word	0x40140000
 800cb68:	9b02      	ldr	r3, [sp, #8]
 800cb6a:	e780      	b.n	800ca6e <_dtoa_r+0x7de>
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb70:	e782      	b.n	800ca78 <_dtoa_r+0x7e8>
 800cb72:	d099      	beq.n	800caa8 <_dtoa_r+0x818>
 800cb74:	9a08      	ldr	r2, [sp, #32]
 800cb76:	331c      	adds	r3, #28
 800cb78:	441a      	add	r2, r3
 800cb7a:	4498      	add	r8, r3
 800cb7c:	441e      	add	r6, r3
 800cb7e:	9208      	str	r2, [sp, #32]
 800cb80:	e792      	b.n	800caa8 <_dtoa_r+0x818>
 800cb82:	4603      	mov	r3, r0
 800cb84:	e7f6      	b.n	800cb74 <_dtoa_r+0x8e4>
 800cb86:	9b07      	ldr	r3, [sp, #28]
 800cb88:	9704      	str	r7, [sp, #16]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	dc20      	bgt.n	800cbd0 <_dtoa_r+0x940>
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb92:	2b02      	cmp	r3, #2
 800cb94:	dd1e      	ble.n	800cbd4 <_dtoa_r+0x944>
 800cb96:	9b00      	ldr	r3, [sp, #0]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	f47f aec0 	bne.w	800c91e <_dtoa_r+0x68e>
 800cb9e:	4621      	mov	r1, r4
 800cba0:	2205      	movs	r2, #5
 800cba2:	4658      	mov	r0, fp
 800cba4:	f000 fde6 	bl	800d774 <__multadd>
 800cba8:	4601      	mov	r1, r0
 800cbaa:	4604      	mov	r4, r0
 800cbac:	4648      	mov	r0, r9
 800cbae:	f001 f843 	bl	800dc38 <__mcmp>
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	f77f aeb3 	ble.w	800c91e <_dtoa_r+0x68e>
 800cbb8:	4656      	mov	r6, sl
 800cbba:	2331      	movs	r3, #49	@ 0x31
 800cbbc:	f806 3b01 	strb.w	r3, [r6], #1
 800cbc0:	9b04      	ldr	r3, [sp, #16]
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	9304      	str	r3, [sp, #16]
 800cbc6:	e6ae      	b.n	800c926 <_dtoa_r+0x696>
 800cbc8:	9c07      	ldr	r4, [sp, #28]
 800cbca:	9704      	str	r7, [sp, #16]
 800cbcc:	4625      	mov	r5, r4
 800cbce:	e7f3      	b.n	800cbb8 <_dtoa_r+0x928>
 800cbd0:	9b07      	ldr	r3, [sp, #28]
 800cbd2:	9300      	str	r3, [sp, #0]
 800cbd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	f000 8104 	beq.w	800cde4 <_dtoa_r+0xb54>
 800cbdc:	2e00      	cmp	r6, #0
 800cbde:	dd05      	ble.n	800cbec <_dtoa_r+0x95c>
 800cbe0:	4629      	mov	r1, r5
 800cbe2:	4632      	mov	r2, r6
 800cbe4:	4658      	mov	r0, fp
 800cbe6:	f000 ffbb 	bl	800db60 <__lshift>
 800cbea:	4605      	mov	r5, r0
 800cbec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d05a      	beq.n	800cca8 <_dtoa_r+0xa18>
 800cbf2:	6869      	ldr	r1, [r5, #4]
 800cbf4:	4658      	mov	r0, fp
 800cbf6:	f000 fd5b 	bl	800d6b0 <_Balloc>
 800cbfa:	4606      	mov	r6, r0
 800cbfc:	b928      	cbnz	r0, 800cc0a <_dtoa_r+0x97a>
 800cbfe:	4b84      	ldr	r3, [pc, #528]	@ (800ce10 <_dtoa_r+0xb80>)
 800cc00:	4602      	mov	r2, r0
 800cc02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cc06:	f7ff bb5a 	b.w	800c2be <_dtoa_r+0x2e>
 800cc0a:	692a      	ldr	r2, [r5, #16]
 800cc0c:	3202      	adds	r2, #2
 800cc0e:	0092      	lsls	r2, r2, #2
 800cc10:	f105 010c 	add.w	r1, r5, #12
 800cc14:	300c      	adds	r0, #12
 800cc16:	f7ff fa78 	bl	800c10a <memcpy>
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	4631      	mov	r1, r6
 800cc1e:	4658      	mov	r0, fp
 800cc20:	f000 ff9e 	bl	800db60 <__lshift>
 800cc24:	f10a 0301 	add.w	r3, sl, #1
 800cc28:	9307      	str	r3, [sp, #28]
 800cc2a:	9b00      	ldr	r3, [sp, #0]
 800cc2c:	4453      	add	r3, sl
 800cc2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc30:	9b02      	ldr	r3, [sp, #8]
 800cc32:	f003 0301 	and.w	r3, r3, #1
 800cc36:	462f      	mov	r7, r5
 800cc38:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc3a:	4605      	mov	r5, r0
 800cc3c:	9b07      	ldr	r3, [sp, #28]
 800cc3e:	4621      	mov	r1, r4
 800cc40:	3b01      	subs	r3, #1
 800cc42:	4648      	mov	r0, r9
 800cc44:	9300      	str	r3, [sp, #0]
 800cc46:	f7ff fa9b 	bl	800c180 <quorem>
 800cc4a:	4639      	mov	r1, r7
 800cc4c:	9002      	str	r0, [sp, #8]
 800cc4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cc52:	4648      	mov	r0, r9
 800cc54:	f000 fff0 	bl	800dc38 <__mcmp>
 800cc58:	462a      	mov	r2, r5
 800cc5a:	9008      	str	r0, [sp, #32]
 800cc5c:	4621      	mov	r1, r4
 800cc5e:	4658      	mov	r0, fp
 800cc60:	f001 f806 	bl	800dc70 <__mdiff>
 800cc64:	68c2      	ldr	r2, [r0, #12]
 800cc66:	4606      	mov	r6, r0
 800cc68:	bb02      	cbnz	r2, 800ccac <_dtoa_r+0xa1c>
 800cc6a:	4601      	mov	r1, r0
 800cc6c:	4648      	mov	r0, r9
 800cc6e:	f000 ffe3 	bl	800dc38 <__mcmp>
 800cc72:	4602      	mov	r2, r0
 800cc74:	4631      	mov	r1, r6
 800cc76:	4658      	mov	r0, fp
 800cc78:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc7a:	f000 fd59 	bl	800d730 <_Bfree>
 800cc7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cc82:	9e07      	ldr	r6, [sp, #28]
 800cc84:	ea43 0102 	orr.w	r1, r3, r2
 800cc88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc8a:	4319      	orrs	r1, r3
 800cc8c:	d110      	bne.n	800ccb0 <_dtoa_r+0xa20>
 800cc8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cc92:	d029      	beq.n	800cce8 <_dtoa_r+0xa58>
 800cc94:	9b08      	ldr	r3, [sp, #32]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	dd02      	ble.n	800cca0 <_dtoa_r+0xa10>
 800cc9a:	9b02      	ldr	r3, [sp, #8]
 800cc9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cca0:	9b00      	ldr	r3, [sp, #0]
 800cca2:	f883 8000 	strb.w	r8, [r3]
 800cca6:	e63f      	b.n	800c928 <_dtoa_r+0x698>
 800cca8:	4628      	mov	r0, r5
 800ccaa:	e7bb      	b.n	800cc24 <_dtoa_r+0x994>
 800ccac:	2201      	movs	r2, #1
 800ccae:	e7e1      	b.n	800cc74 <_dtoa_r+0x9e4>
 800ccb0:	9b08      	ldr	r3, [sp, #32]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	db04      	blt.n	800ccc0 <_dtoa_r+0xa30>
 800ccb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ccb8:	430b      	orrs	r3, r1
 800ccba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ccbc:	430b      	orrs	r3, r1
 800ccbe:	d120      	bne.n	800cd02 <_dtoa_r+0xa72>
 800ccc0:	2a00      	cmp	r2, #0
 800ccc2:	dded      	ble.n	800cca0 <_dtoa_r+0xa10>
 800ccc4:	4649      	mov	r1, r9
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	4658      	mov	r0, fp
 800ccca:	f000 ff49 	bl	800db60 <__lshift>
 800ccce:	4621      	mov	r1, r4
 800ccd0:	4681      	mov	r9, r0
 800ccd2:	f000 ffb1 	bl	800dc38 <__mcmp>
 800ccd6:	2800      	cmp	r0, #0
 800ccd8:	dc03      	bgt.n	800cce2 <_dtoa_r+0xa52>
 800ccda:	d1e1      	bne.n	800cca0 <_dtoa_r+0xa10>
 800ccdc:	f018 0f01 	tst.w	r8, #1
 800cce0:	d0de      	beq.n	800cca0 <_dtoa_r+0xa10>
 800cce2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cce6:	d1d8      	bne.n	800cc9a <_dtoa_r+0xa0a>
 800cce8:	9a00      	ldr	r2, [sp, #0]
 800ccea:	2339      	movs	r3, #57	@ 0x39
 800ccec:	7013      	strb	r3, [r2, #0]
 800ccee:	4633      	mov	r3, r6
 800ccf0:	461e      	mov	r6, r3
 800ccf2:	3b01      	subs	r3, #1
 800ccf4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ccf8:	2a39      	cmp	r2, #57	@ 0x39
 800ccfa:	d052      	beq.n	800cda2 <_dtoa_r+0xb12>
 800ccfc:	3201      	adds	r2, #1
 800ccfe:	701a      	strb	r2, [r3, #0]
 800cd00:	e612      	b.n	800c928 <_dtoa_r+0x698>
 800cd02:	2a00      	cmp	r2, #0
 800cd04:	dd07      	ble.n	800cd16 <_dtoa_r+0xa86>
 800cd06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cd0a:	d0ed      	beq.n	800cce8 <_dtoa_r+0xa58>
 800cd0c:	9a00      	ldr	r2, [sp, #0]
 800cd0e:	f108 0301 	add.w	r3, r8, #1
 800cd12:	7013      	strb	r3, [r2, #0]
 800cd14:	e608      	b.n	800c928 <_dtoa_r+0x698>
 800cd16:	9b07      	ldr	r3, [sp, #28]
 800cd18:	9a07      	ldr	r2, [sp, #28]
 800cd1a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cd1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d028      	beq.n	800cd76 <_dtoa_r+0xae6>
 800cd24:	4649      	mov	r1, r9
 800cd26:	2300      	movs	r3, #0
 800cd28:	220a      	movs	r2, #10
 800cd2a:	4658      	mov	r0, fp
 800cd2c:	f000 fd22 	bl	800d774 <__multadd>
 800cd30:	42af      	cmp	r7, r5
 800cd32:	4681      	mov	r9, r0
 800cd34:	f04f 0300 	mov.w	r3, #0
 800cd38:	f04f 020a 	mov.w	r2, #10
 800cd3c:	4639      	mov	r1, r7
 800cd3e:	4658      	mov	r0, fp
 800cd40:	d107      	bne.n	800cd52 <_dtoa_r+0xac2>
 800cd42:	f000 fd17 	bl	800d774 <__multadd>
 800cd46:	4607      	mov	r7, r0
 800cd48:	4605      	mov	r5, r0
 800cd4a:	9b07      	ldr	r3, [sp, #28]
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	9307      	str	r3, [sp, #28]
 800cd50:	e774      	b.n	800cc3c <_dtoa_r+0x9ac>
 800cd52:	f000 fd0f 	bl	800d774 <__multadd>
 800cd56:	4629      	mov	r1, r5
 800cd58:	4607      	mov	r7, r0
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	220a      	movs	r2, #10
 800cd5e:	4658      	mov	r0, fp
 800cd60:	f000 fd08 	bl	800d774 <__multadd>
 800cd64:	4605      	mov	r5, r0
 800cd66:	e7f0      	b.n	800cd4a <_dtoa_r+0xaba>
 800cd68:	9b00      	ldr	r3, [sp, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	bfcc      	ite	gt
 800cd6e:	461e      	movgt	r6, r3
 800cd70:	2601      	movle	r6, #1
 800cd72:	4456      	add	r6, sl
 800cd74:	2700      	movs	r7, #0
 800cd76:	4649      	mov	r1, r9
 800cd78:	2201      	movs	r2, #1
 800cd7a:	4658      	mov	r0, fp
 800cd7c:	f000 fef0 	bl	800db60 <__lshift>
 800cd80:	4621      	mov	r1, r4
 800cd82:	4681      	mov	r9, r0
 800cd84:	f000 ff58 	bl	800dc38 <__mcmp>
 800cd88:	2800      	cmp	r0, #0
 800cd8a:	dcb0      	bgt.n	800ccee <_dtoa_r+0xa5e>
 800cd8c:	d102      	bne.n	800cd94 <_dtoa_r+0xb04>
 800cd8e:	f018 0f01 	tst.w	r8, #1
 800cd92:	d1ac      	bne.n	800ccee <_dtoa_r+0xa5e>
 800cd94:	4633      	mov	r3, r6
 800cd96:	461e      	mov	r6, r3
 800cd98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd9c:	2a30      	cmp	r2, #48	@ 0x30
 800cd9e:	d0fa      	beq.n	800cd96 <_dtoa_r+0xb06>
 800cda0:	e5c2      	b.n	800c928 <_dtoa_r+0x698>
 800cda2:	459a      	cmp	sl, r3
 800cda4:	d1a4      	bne.n	800ccf0 <_dtoa_r+0xa60>
 800cda6:	9b04      	ldr	r3, [sp, #16]
 800cda8:	3301      	adds	r3, #1
 800cdaa:	9304      	str	r3, [sp, #16]
 800cdac:	2331      	movs	r3, #49	@ 0x31
 800cdae:	f88a 3000 	strb.w	r3, [sl]
 800cdb2:	e5b9      	b.n	800c928 <_dtoa_r+0x698>
 800cdb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cdb6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ce14 <_dtoa_r+0xb84>
 800cdba:	b11b      	cbz	r3, 800cdc4 <_dtoa_r+0xb34>
 800cdbc:	f10a 0308 	add.w	r3, sl, #8
 800cdc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cdc2:	6013      	str	r3, [r2, #0]
 800cdc4:	4650      	mov	r0, sl
 800cdc6:	b019      	add	sp, #100	@ 0x64
 800cdc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	f77f ae37 	ble.w	800ca42 <_dtoa_r+0x7b2>
 800cdd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cdd8:	2001      	movs	r0, #1
 800cdda:	e655      	b.n	800ca88 <_dtoa_r+0x7f8>
 800cddc:	9b00      	ldr	r3, [sp, #0]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	f77f aed6 	ble.w	800cb90 <_dtoa_r+0x900>
 800cde4:	4656      	mov	r6, sl
 800cde6:	4621      	mov	r1, r4
 800cde8:	4648      	mov	r0, r9
 800cdea:	f7ff f9c9 	bl	800c180 <quorem>
 800cdee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cdf2:	f806 8b01 	strb.w	r8, [r6], #1
 800cdf6:	9b00      	ldr	r3, [sp, #0]
 800cdf8:	eba6 020a 	sub.w	r2, r6, sl
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	ddb3      	ble.n	800cd68 <_dtoa_r+0xad8>
 800ce00:	4649      	mov	r1, r9
 800ce02:	2300      	movs	r3, #0
 800ce04:	220a      	movs	r2, #10
 800ce06:	4658      	mov	r0, fp
 800ce08:	f000 fcb4 	bl	800d774 <__multadd>
 800ce0c:	4681      	mov	r9, r0
 800ce0e:	e7ea      	b.n	800cde6 <_dtoa_r+0xb56>
 800ce10:	0800ee2c 	.word	0x0800ee2c
 800ce14:	0800edc7 	.word	0x0800edc7

0800ce18 <_free_r>:
 800ce18:	b538      	push	{r3, r4, r5, lr}
 800ce1a:	4605      	mov	r5, r0
 800ce1c:	2900      	cmp	r1, #0
 800ce1e:	d041      	beq.n	800cea4 <_free_r+0x8c>
 800ce20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce24:	1f0c      	subs	r4, r1, #4
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	bfb8      	it	lt
 800ce2a:	18e4      	addlt	r4, r4, r3
 800ce2c:	f000 fc34 	bl	800d698 <__malloc_lock>
 800ce30:	4a1d      	ldr	r2, [pc, #116]	@ (800cea8 <_free_r+0x90>)
 800ce32:	6813      	ldr	r3, [r2, #0]
 800ce34:	b933      	cbnz	r3, 800ce44 <_free_r+0x2c>
 800ce36:	6063      	str	r3, [r4, #4]
 800ce38:	6014      	str	r4, [r2, #0]
 800ce3a:	4628      	mov	r0, r5
 800ce3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce40:	f000 bc30 	b.w	800d6a4 <__malloc_unlock>
 800ce44:	42a3      	cmp	r3, r4
 800ce46:	d908      	bls.n	800ce5a <_free_r+0x42>
 800ce48:	6820      	ldr	r0, [r4, #0]
 800ce4a:	1821      	adds	r1, r4, r0
 800ce4c:	428b      	cmp	r3, r1
 800ce4e:	bf01      	itttt	eq
 800ce50:	6819      	ldreq	r1, [r3, #0]
 800ce52:	685b      	ldreq	r3, [r3, #4]
 800ce54:	1809      	addeq	r1, r1, r0
 800ce56:	6021      	streq	r1, [r4, #0]
 800ce58:	e7ed      	b.n	800ce36 <_free_r+0x1e>
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	b10b      	cbz	r3, 800ce64 <_free_r+0x4c>
 800ce60:	42a3      	cmp	r3, r4
 800ce62:	d9fa      	bls.n	800ce5a <_free_r+0x42>
 800ce64:	6811      	ldr	r1, [r2, #0]
 800ce66:	1850      	adds	r0, r2, r1
 800ce68:	42a0      	cmp	r0, r4
 800ce6a:	d10b      	bne.n	800ce84 <_free_r+0x6c>
 800ce6c:	6820      	ldr	r0, [r4, #0]
 800ce6e:	4401      	add	r1, r0
 800ce70:	1850      	adds	r0, r2, r1
 800ce72:	4283      	cmp	r3, r0
 800ce74:	6011      	str	r1, [r2, #0]
 800ce76:	d1e0      	bne.n	800ce3a <_free_r+0x22>
 800ce78:	6818      	ldr	r0, [r3, #0]
 800ce7a:	685b      	ldr	r3, [r3, #4]
 800ce7c:	6053      	str	r3, [r2, #4]
 800ce7e:	4408      	add	r0, r1
 800ce80:	6010      	str	r0, [r2, #0]
 800ce82:	e7da      	b.n	800ce3a <_free_r+0x22>
 800ce84:	d902      	bls.n	800ce8c <_free_r+0x74>
 800ce86:	230c      	movs	r3, #12
 800ce88:	602b      	str	r3, [r5, #0]
 800ce8a:	e7d6      	b.n	800ce3a <_free_r+0x22>
 800ce8c:	6820      	ldr	r0, [r4, #0]
 800ce8e:	1821      	adds	r1, r4, r0
 800ce90:	428b      	cmp	r3, r1
 800ce92:	bf04      	itt	eq
 800ce94:	6819      	ldreq	r1, [r3, #0]
 800ce96:	685b      	ldreq	r3, [r3, #4]
 800ce98:	6063      	str	r3, [r4, #4]
 800ce9a:	bf04      	itt	eq
 800ce9c:	1809      	addeq	r1, r1, r0
 800ce9e:	6021      	streq	r1, [r4, #0]
 800cea0:	6054      	str	r4, [r2, #4]
 800cea2:	e7ca      	b.n	800ce3a <_free_r+0x22>
 800cea4:	bd38      	pop	{r3, r4, r5, pc}
 800cea6:	bf00      	nop
 800cea8:	2000097c 	.word	0x2000097c

0800ceac <rshift>:
 800ceac:	6903      	ldr	r3, [r0, #16]
 800ceae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ceb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ceb6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ceba:	f100 0414 	add.w	r4, r0, #20
 800cebe:	dd45      	ble.n	800cf4c <rshift+0xa0>
 800cec0:	f011 011f 	ands.w	r1, r1, #31
 800cec4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cec8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cecc:	d10c      	bne.n	800cee8 <rshift+0x3c>
 800cece:	f100 0710 	add.w	r7, r0, #16
 800ced2:	4629      	mov	r1, r5
 800ced4:	42b1      	cmp	r1, r6
 800ced6:	d334      	bcc.n	800cf42 <rshift+0x96>
 800ced8:	1a9b      	subs	r3, r3, r2
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	1eea      	subs	r2, r5, #3
 800cede:	4296      	cmp	r6, r2
 800cee0:	bf38      	it	cc
 800cee2:	2300      	movcc	r3, #0
 800cee4:	4423      	add	r3, r4
 800cee6:	e015      	b.n	800cf14 <rshift+0x68>
 800cee8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ceec:	f1c1 0820 	rsb	r8, r1, #32
 800cef0:	40cf      	lsrs	r7, r1
 800cef2:	f105 0e04 	add.w	lr, r5, #4
 800cef6:	46a1      	mov	r9, r4
 800cef8:	4576      	cmp	r6, lr
 800cefa:	46f4      	mov	ip, lr
 800cefc:	d815      	bhi.n	800cf2a <rshift+0x7e>
 800cefe:	1a9a      	subs	r2, r3, r2
 800cf00:	0092      	lsls	r2, r2, #2
 800cf02:	3a04      	subs	r2, #4
 800cf04:	3501      	adds	r5, #1
 800cf06:	42ae      	cmp	r6, r5
 800cf08:	bf38      	it	cc
 800cf0a:	2200      	movcc	r2, #0
 800cf0c:	18a3      	adds	r3, r4, r2
 800cf0e:	50a7      	str	r7, [r4, r2]
 800cf10:	b107      	cbz	r7, 800cf14 <rshift+0x68>
 800cf12:	3304      	adds	r3, #4
 800cf14:	1b1a      	subs	r2, r3, r4
 800cf16:	42a3      	cmp	r3, r4
 800cf18:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cf1c:	bf08      	it	eq
 800cf1e:	2300      	moveq	r3, #0
 800cf20:	6102      	str	r2, [r0, #16]
 800cf22:	bf08      	it	eq
 800cf24:	6143      	streq	r3, [r0, #20]
 800cf26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf2a:	f8dc c000 	ldr.w	ip, [ip]
 800cf2e:	fa0c fc08 	lsl.w	ip, ip, r8
 800cf32:	ea4c 0707 	orr.w	r7, ip, r7
 800cf36:	f849 7b04 	str.w	r7, [r9], #4
 800cf3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cf3e:	40cf      	lsrs	r7, r1
 800cf40:	e7da      	b.n	800cef8 <rshift+0x4c>
 800cf42:	f851 cb04 	ldr.w	ip, [r1], #4
 800cf46:	f847 cf04 	str.w	ip, [r7, #4]!
 800cf4a:	e7c3      	b.n	800ced4 <rshift+0x28>
 800cf4c:	4623      	mov	r3, r4
 800cf4e:	e7e1      	b.n	800cf14 <rshift+0x68>

0800cf50 <__hexdig_fun>:
 800cf50:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800cf54:	2b09      	cmp	r3, #9
 800cf56:	d802      	bhi.n	800cf5e <__hexdig_fun+0xe>
 800cf58:	3820      	subs	r0, #32
 800cf5a:	b2c0      	uxtb	r0, r0
 800cf5c:	4770      	bx	lr
 800cf5e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800cf62:	2b05      	cmp	r3, #5
 800cf64:	d801      	bhi.n	800cf6a <__hexdig_fun+0x1a>
 800cf66:	3847      	subs	r0, #71	@ 0x47
 800cf68:	e7f7      	b.n	800cf5a <__hexdig_fun+0xa>
 800cf6a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800cf6e:	2b05      	cmp	r3, #5
 800cf70:	d801      	bhi.n	800cf76 <__hexdig_fun+0x26>
 800cf72:	3827      	subs	r0, #39	@ 0x27
 800cf74:	e7f1      	b.n	800cf5a <__hexdig_fun+0xa>
 800cf76:	2000      	movs	r0, #0
 800cf78:	4770      	bx	lr
	...

0800cf7c <__gethex>:
 800cf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf80:	b085      	sub	sp, #20
 800cf82:	468a      	mov	sl, r1
 800cf84:	9302      	str	r3, [sp, #8]
 800cf86:	680b      	ldr	r3, [r1, #0]
 800cf88:	9001      	str	r0, [sp, #4]
 800cf8a:	4690      	mov	r8, r2
 800cf8c:	1c9c      	adds	r4, r3, #2
 800cf8e:	46a1      	mov	r9, r4
 800cf90:	f814 0b01 	ldrb.w	r0, [r4], #1
 800cf94:	2830      	cmp	r0, #48	@ 0x30
 800cf96:	d0fa      	beq.n	800cf8e <__gethex+0x12>
 800cf98:	eba9 0303 	sub.w	r3, r9, r3
 800cf9c:	f1a3 0b02 	sub.w	fp, r3, #2
 800cfa0:	f7ff ffd6 	bl	800cf50 <__hexdig_fun>
 800cfa4:	4605      	mov	r5, r0
 800cfa6:	2800      	cmp	r0, #0
 800cfa8:	d168      	bne.n	800d07c <__gethex+0x100>
 800cfaa:	49a0      	ldr	r1, [pc, #640]	@ (800d22c <__gethex+0x2b0>)
 800cfac:	2201      	movs	r2, #1
 800cfae:	4648      	mov	r0, r9
 800cfb0:	f7fe ffc5 	bl	800bf3e <strncmp>
 800cfb4:	4607      	mov	r7, r0
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	d167      	bne.n	800d08a <__gethex+0x10e>
 800cfba:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cfbe:	4626      	mov	r6, r4
 800cfc0:	f7ff ffc6 	bl	800cf50 <__hexdig_fun>
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	d062      	beq.n	800d08e <__gethex+0x112>
 800cfc8:	4623      	mov	r3, r4
 800cfca:	7818      	ldrb	r0, [r3, #0]
 800cfcc:	2830      	cmp	r0, #48	@ 0x30
 800cfce:	4699      	mov	r9, r3
 800cfd0:	f103 0301 	add.w	r3, r3, #1
 800cfd4:	d0f9      	beq.n	800cfca <__gethex+0x4e>
 800cfd6:	f7ff ffbb 	bl	800cf50 <__hexdig_fun>
 800cfda:	fab0 f580 	clz	r5, r0
 800cfde:	096d      	lsrs	r5, r5, #5
 800cfe0:	f04f 0b01 	mov.w	fp, #1
 800cfe4:	464a      	mov	r2, r9
 800cfe6:	4616      	mov	r6, r2
 800cfe8:	3201      	adds	r2, #1
 800cfea:	7830      	ldrb	r0, [r6, #0]
 800cfec:	f7ff ffb0 	bl	800cf50 <__hexdig_fun>
 800cff0:	2800      	cmp	r0, #0
 800cff2:	d1f8      	bne.n	800cfe6 <__gethex+0x6a>
 800cff4:	498d      	ldr	r1, [pc, #564]	@ (800d22c <__gethex+0x2b0>)
 800cff6:	2201      	movs	r2, #1
 800cff8:	4630      	mov	r0, r6
 800cffa:	f7fe ffa0 	bl	800bf3e <strncmp>
 800cffe:	2800      	cmp	r0, #0
 800d000:	d13f      	bne.n	800d082 <__gethex+0x106>
 800d002:	b944      	cbnz	r4, 800d016 <__gethex+0x9a>
 800d004:	1c74      	adds	r4, r6, #1
 800d006:	4622      	mov	r2, r4
 800d008:	4616      	mov	r6, r2
 800d00a:	3201      	adds	r2, #1
 800d00c:	7830      	ldrb	r0, [r6, #0]
 800d00e:	f7ff ff9f 	bl	800cf50 <__hexdig_fun>
 800d012:	2800      	cmp	r0, #0
 800d014:	d1f8      	bne.n	800d008 <__gethex+0x8c>
 800d016:	1ba4      	subs	r4, r4, r6
 800d018:	00a7      	lsls	r7, r4, #2
 800d01a:	7833      	ldrb	r3, [r6, #0]
 800d01c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d020:	2b50      	cmp	r3, #80	@ 0x50
 800d022:	d13e      	bne.n	800d0a2 <__gethex+0x126>
 800d024:	7873      	ldrb	r3, [r6, #1]
 800d026:	2b2b      	cmp	r3, #43	@ 0x2b
 800d028:	d033      	beq.n	800d092 <__gethex+0x116>
 800d02a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d02c:	d034      	beq.n	800d098 <__gethex+0x11c>
 800d02e:	1c71      	adds	r1, r6, #1
 800d030:	2400      	movs	r4, #0
 800d032:	7808      	ldrb	r0, [r1, #0]
 800d034:	f7ff ff8c 	bl	800cf50 <__hexdig_fun>
 800d038:	1e43      	subs	r3, r0, #1
 800d03a:	b2db      	uxtb	r3, r3
 800d03c:	2b18      	cmp	r3, #24
 800d03e:	d830      	bhi.n	800d0a2 <__gethex+0x126>
 800d040:	f1a0 0210 	sub.w	r2, r0, #16
 800d044:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d048:	f7ff ff82 	bl	800cf50 <__hexdig_fun>
 800d04c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800d050:	fa5f fc8c 	uxtb.w	ip, ip
 800d054:	f1bc 0f18 	cmp.w	ip, #24
 800d058:	f04f 030a 	mov.w	r3, #10
 800d05c:	d91e      	bls.n	800d09c <__gethex+0x120>
 800d05e:	b104      	cbz	r4, 800d062 <__gethex+0xe6>
 800d060:	4252      	negs	r2, r2
 800d062:	4417      	add	r7, r2
 800d064:	f8ca 1000 	str.w	r1, [sl]
 800d068:	b1ed      	cbz	r5, 800d0a6 <__gethex+0x12a>
 800d06a:	f1bb 0f00 	cmp.w	fp, #0
 800d06e:	bf0c      	ite	eq
 800d070:	2506      	moveq	r5, #6
 800d072:	2500      	movne	r5, #0
 800d074:	4628      	mov	r0, r5
 800d076:	b005      	add	sp, #20
 800d078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d07c:	2500      	movs	r5, #0
 800d07e:	462c      	mov	r4, r5
 800d080:	e7b0      	b.n	800cfe4 <__gethex+0x68>
 800d082:	2c00      	cmp	r4, #0
 800d084:	d1c7      	bne.n	800d016 <__gethex+0x9a>
 800d086:	4627      	mov	r7, r4
 800d088:	e7c7      	b.n	800d01a <__gethex+0x9e>
 800d08a:	464e      	mov	r6, r9
 800d08c:	462f      	mov	r7, r5
 800d08e:	2501      	movs	r5, #1
 800d090:	e7c3      	b.n	800d01a <__gethex+0x9e>
 800d092:	2400      	movs	r4, #0
 800d094:	1cb1      	adds	r1, r6, #2
 800d096:	e7cc      	b.n	800d032 <__gethex+0xb6>
 800d098:	2401      	movs	r4, #1
 800d09a:	e7fb      	b.n	800d094 <__gethex+0x118>
 800d09c:	fb03 0002 	mla	r0, r3, r2, r0
 800d0a0:	e7ce      	b.n	800d040 <__gethex+0xc4>
 800d0a2:	4631      	mov	r1, r6
 800d0a4:	e7de      	b.n	800d064 <__gethex+0xe8>
 800d0a6:	eba6 0309 	sub.w	r3, r6, r9
 800d0aa:	3b01      	subs	r3, #1
 800d0ac:	4629      	mov	r1, r5
 800d0ae:	2b07      	cmp	r3, #7
 800d0b0:	dc0a      	bgt.n	800d0c8 <__gethex+0x14c>
 800d0b2:	9801      	ldr	r0, [sp, #4]
 800d0b4:	f000 fafc 	bl	800d6b0 <_Balloc>
 800d0b8:	4604      	mov	r4, r0
 800d0ba:	b940      	cbnz	r0, 800d0ce <__gethex+0x152>
 800d0bc:	4b5c      	ldr	r3, [pc, #368]	@ (800d230 <__gethex+0x2b4>)
 800d0be:	4602      	mov	r2, r0
 800d0c0:	21e4      	movs	r1, #228	@ 0xe4
 800d0c2:	485c      	ldr	r0, [pc, #368]	@ (800d234 <__gethex+0x2b8>)
 800d0c4:	f7ff f83e 	bl	800c144 <__assert_func>
 800d0c8:	3101      	adds	r1, #1
 800d0ca:	105b      	asrs	r3, r3, #1
 800d0cc:	e7ef      	b.n	800d0ae <__gethex+0x132>
 800d0ce:	f100 0a14 	add.w	sl, r0, #20
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	4655      	mov	r5, sl
 800d0d6:	469b      	mov	fp, r3
 800d0d8:	45b1      	cmp	r9, r6
 800d0da:	d337      	bcc.n	800d14c <__gethex+0x1d0>
 800d0dc:	f845 bb04 	str.w	fp, [r5], #4
 800d0e0:	eba5 050a 	sub.w	r5, r5, sl
 800d0e4:	10ad      	asrs	r5, r5, #2
 800d0e6:	6125      	str	r5, [r4, #16]
 800d0e8:	4658      	mov	r0, fp
 800d0ea:	f000 fbd3 	bl	800d894 <__hi0bits>
 800d0ee:	016d      	lsls	r5, r5, #5
 800d0f0:	f8d8 6000 	ldr.w	r6, [r8]
 800d0f4:	1a2d      	subs	r5, r5, r0
 800d0f6:	42b5      	cmp	r5, r6
 800d0f8:	dd54      	ble.n	800d1a4 <__gethex+0x228>
 800d0fa:	1bad      	subs	r5, r5, r6
 800d0fc:	4629      	mov	r1, r5
 800d0fe:	4620      	mov	r0, r4
 800d100:	f000 ff67 	bl	800dfd2 <__any_on>
 800d104:	4681      	mov	r9, r0
 800d106:	b178      	cbz	r0, 800d128 <__gethex+0x1ac>
 800d108:	1e6b      	subs	r3, r5, #1
 800d10a:	1159      	asrs	r1, r3, #5
 800d10c:	f003 021f 	and.w	r2, r3, #31
 800d110:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d114:	f04f 0901 	mov.w	r9, #1
 800d118:	fa09 f202 	lsl.w	r2, r9, r2
 800d11c:	420a      	tst	r2, r1
 800d11e:	d003      	beq.n	800d128 <__gethex+0x1ac>
 800d120:	454b      	cmp	r3, r9
 800d122:	dc36      	bgt.n	800d192 <__gethex+0x216>
 800d124:	f04f 0902 	mov.w	r9, #2
 800d128:	4629      	mov	r1, r5
 800d12a:	4620      	mov	r0, r4
 800d12c:	f7ff febe 	bl	800ceac <rshift>
 800d130:	442f      	add	r7, r5
 800d132:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d136:	42bb      	cmp	r3, r7
 800d138:	da42      	bge.n	800d1c0 <__gethex+0x244>
 800d13a:	9801      	ldr	r0, [sp, #4]
 800d13c:	4621      	mov	r1, r4
 800d13e:	f000 faf7 	bl	800d730 <_Bfree>
 800d142:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d144:	2300      	movs	r3, #0
 800d146:	6013      	str	r3, [r2, #0]
 800d148:	25a3      	movs	r5, #163	@ 0xa3
 800d14a:	e793      	b.n	800d074 <__gethex+0xf8>
 800d14c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d150:	2a2e      	cmp	r2, #46	@ 0x2e
 800d152:	d012      	beq.n	800d17a <__gethex+0x1fe>
 800d154:	2b20      	cmp	r3, #32
 800d156:	d104      	bne.n	800d162 <__gethex+0x1e6>
 800d158:	f845 bb04 	str.w	fp, [r5], #4
 800d15c:	f04f 0b00 	mov.w	fp, #0
 800d160:	465b      	mov	r3, fp
 800d162:	7830      	ldrb	r0, [r6, #0]
 800d164:	9303      	str	r3, [sp, #12]
 800d166:	f7ff fef3 	bl	800cf50 <__hexdig_fun>
 800d16a:	9b03      	ldr	r3, [sp, #12]
 800d16c:	f000 000f 	and.w	r0, r0, #15
 800d170:	4098      	lsls	r0, r3
 800d172:	ea4b 0b00 	orr.w	fp, fp, r0
 800d176:	3304      	adds	r3, #4
 800d178:	e7ae      	b.n	800d0d8 <__gethex+0x15c>
 800d17a:	45b1      	cmp	r9, r6
 800d17c:	d8ea      	bhi.n	800d154 <__gethex+0x1d8>
 800d17e:	492b      	ldr	r1, [pc, #172]	@ (800d22c <__gethex+0x2b0>)
 800d180:	9303      	str	r3, [sp, #12]
 800d182:	2201      	movs	r2, #1
 800d184:	4630      	mov	r0, r6
 800d186:	f7fe feda 	bl	800bf3e <strncmp>
 800d18a:	9b03      	ldr	r3, [sp, #12]
 800d18c:	2800      	cmp	r0, #0
 800d18e:	d1e1      	bne.n	800d154 <__gethex+0x1d8>
 800d190:	e7a2      	b.n	800d0d8 <__gethex+0x15c>
 800d192:	1ea9      	subs	r1, r5, #2
 800d194:	4620      	mov	r0, r4
 800d196:	f000 ff1c 	bl	800dfd2 <__any_on>
 800d19a:	2800      	cmp	r0, #0
 800d19c:	d0c2      	beq.n	800d124 <__gethex+0x1a8>
 800d19e:	f04f 0903 	mov.w	r9, #3
 800d1a2:	e7c1      	b.n	800d128 <__gethex+0x1ac>
 800d1a4:	da09      	bge.n	800d1ba <__gethex+0x23e>
 800d1a6:	1b75      	subs	r5, r6, r5
 800d1a8:	4621      	mov	r1, r4
 800d1aa:	9801      	ldr	r0, [sp, #4]
 800d1ac:	462a      	mov	r2, r5
 800d1ae:	f000 fcd7 	bl	800db60 <__lshift>
 800d1b2:	1b7f      	subs	r7, r7, r5
 800d1b4:	4604      	mov	r4, r0
 800d1b6:	f100 0a14 	add.w	sl, r0, #20
 800d1ba:	f04f 0900 	mov.w	r9, #0
 800d1be:	e7b8      	b.n	800d132 <__gethex+0x1b6>
 800d1c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d1c4:	42bd      	cmp	r5, r7
 800d1c6:	dd6f      	ble.n	800d2a8 <__gethex+0x32c>
 800d1c8:	1bed      	subs	r5, r5, r7
 800d1ca:	42ae      	cmp	r6, r5
 800d1cc:	dc34      	bgt.n	800d238 <__gethex+0x2bc>
 800d1ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d1d2:	2b02      	cmp	r3, #2
 800d1d4:	d022      	beq.n	800d21c <__gethex+0x2a0>
 800d1d6:	2b03      	cmp	r3, #3
 800d1d8:	d024      	beq.n	800d224 <__gethex+0x2a8>
 800d1da:	2b01      	cmp	r3, #1
 800d1dc:	d115      	bne.n	800d20a <__gethex+0x28e>
 800d1de:	42ae      	cmp	r6, r5
 800d1e0:	d113      	bne.n	800d20a <__gethex+0x28e>
 800d1e2:	2e01      	cmp	r6, #1
 800d1e4:	d10b      	bne.n	800d1fe <__gethex+0x282>
 800d1e6:	9a02      	ldr	r2, [sp, #8]
 800d1e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d1ec:	6013      	str	r3, [r2, #0]
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	6123      	str	r3, [r4, #16]
 800d1f2:	f8ca 3000 	str.w	r3, [sl]
 800d1f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1f8:	2562      	movs	r5, #98	@ 0x62
 800d1fa:	601c      	str	r4, [r3, #0]
 800d1fc:	e73a      	b.n	800d074 <__gethex+0xf8>
 800d1fe:	1e71      	subs	r1, r6, #1
 800d200:	4620      	mov	r0, r4
 800d202:	f000 fee6 	bl	800dfd2 <__any_on>
 800d206:	2800      	cmp	r0, #0
 800d208:	d1ed      	bne.n	800d1e6 <__gethex+0x26a>
 800d20a:	9801      	ldr	r0, [sp, #4]
 800d20c:	4621      	mov	r1, r4
 800d20e:	f000 fa8f 	bl	800d730 <_Bfree>
 800d212:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d214:	2300      	movs	r3, #0
 800d216:	6013      	str	r3, [r2, #0]
 800d218:	2550      	movs	r5, #80	@ 0x50
 800d21a:	e72b      	b.n	800d074 <__gethex+0xf8>
 800d21c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d1f3      	bne.n	800d20a <__gethex+0x28e>
 800d222:	e7e0      	b.n	800d1e6 <__gethex+0x26a>
 800d224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d226:	2b00      	cmp	r3, #0
 800d228:	d1dd      	bne.n	800d1e6 <__gethex+0x26a>
 800d22a:	e7ee      	b.n	800d20a <__gethex+0x28e>
 800d22c:	0800eb84 	.word	0x0800eb84
 800d230:	0800ee2c 	.word	0x0800ee2c
 800d234:	0800ee3d 	.word	0x0800ee3d
 800d238:	1e6f      	subs	r7, r5, #1
 800d23a:	f1b9 0f00 	cmp.w	r9, #0
 800d23e:	d130      	bne.n	800d2a2 <__gethex+0x326>
 800d240:	b127      	cbz	r7, 800d24c <__gethex+0x2d0>
 800d242:	4639      	mov	r1, r7
 800d244:	4620      	mov	r0, r4
 800d246:	f000 fec4 	bl	800dfd2 <__any_on>
 800d24a:	4681      	mov	r9, r0
 800d24c:	117a      	asrs	r2, r7, #5
 800d24e:	2301      	movs	r3, #1
 800d250:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d254:	f007 071f 	and.w	r7, r7, #31
 800d258:	40bb      	lsls	r3, r7
 800d25a:	4213      	tst	r3, r2
 800d25c:	4629      	mov	r1, r5
 800d25e:	4620      	mov	r0, r4
 800d260:	bf18      	it	ne
 800d262:	f049 0902 	orrne.w	r9, r9, #2
 800d266:	f7ff fe21 	bl	800ceac <rshift>
 800d26a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d26e:	1b76      	subs	r6, r6, r5
 800d270:	2502      	movs	r5, #2
 800d272:	f1b9 0f00 	cmp.w	r9, #0
 800d276:	d047      	beq.n	800d308 <__gethex+0x38c>
 800d278:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d27c:	2b02      	cmp	r3, #2
 800d27e:	d015      	beq.n	800d2ac <__gethex+0x330>
 800d280:	2b03      	cmp	r3, #3
 800d282:	d017      	beq.n	800d2b4 <__gethex+0x338>
 800d284:	2b01      	cmp	r3, #1
 800d286:	d109      	bne.n	800d29c <__gethex+0x320>
 800d288:	f019 0f02 	tst.w	r9, #2
 800d28c:	d006      	beq.n	800d29c <__gethex+0x320>
 800d28e:	f8da 3000 	ldr.w	r3, [sl]
 800d292:	ea49 0903 	orr.w	r9, r9, r3
 800d296:	f019 0f01 	tst.w	r9, #1
 800d29a:	d10e      	bne.n	800d2ba <__gethex+0x33e>
 800d29c:	f045 0510 	orr.w	r5, r5, #16
 800d2a0:	e032      	b.n	800d308 <__gethex+0x38c>
 800d2a2:	f04f 0901 	mov.w	r9, #1
 800d2a6:	e7d1      	b.n	800d24c <__gethex+0x2d0>
 800d2a8:	2501      	movs	r5, #1
 800d2aa:	e7e2      	b.n	800d272 <__gethex+0x2f6>
 800d2ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2ae:	f1c3 0301 	rsb	r3, r3, #1
 800d2b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d2b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d0f0      	beq.n	800d29c <__gethex+0x320>
 800d2ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d2be:	f104 0314 	add.w	r3, r4, #20
 800d2c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d2c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d2ca:	f04f 0c00 	mov.w	ip, #0
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2d4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800d2d8:	d01b      	beq.n	800d312 <__gethex+0x396>
 800d2da:	3201      	adds	r2, #1
 800d2dc:	6002      	str	r2, [r0, #0]
 800d2de:	2d02      	cmp	r5, #2
 800d2e0:	f104 0314 	add.w	r3, r4, #20
 800d2e4:	d13c      	bne.n	800d360 <__gethex+0x3e4>
 800d2e6:	f8d8 2000 	ldr.w	r2, [r8]
 800d2ea:	3a01      	subs	r2, #1
 800d2ec:	42b2      	cmp	r2, r6
 800d2ee:	d109      	bne.n	800d304 <__gethex+0x388>
 800d2f0:	1171      	asrs	r1, r6, #5
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d2f8:	f006 061f 	and.w	r6, r6, #31
 800d2fc:	fa02 f606 	lsl.w	r6, r2, r6
 800d300:	421e      	tst	r6, r3
 800d302:	d13a      	bne.n	800d37a <__gethex+0x3fe>
 800d304:	f045 0520 	orr.w	r5, r5, #32
 800d308:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d30a:	601c      	str	r4, [r3, #0]
 800d30c:	9b02      	ldr	r3, [sp, #8]
 800d30e:	601f      	str	r7, [r3, #0]
 800d310:	e6b0      	b.n	800d074 <__gethex+0xf8>
 800d312:	4299      	cmp	r1, r3
 800d314:	f843 cc04 	str.w	ip, [r3, #-4]
 800d318:	d8d9      	bhi.n	800d2ce <__gethex+0x352>
 800d31a:	68a3      	ldr	r3, [r4, #8]
 800d31c:	459b      	cmp	fp, r3
 800d31e:	db17      	blt.n	800d350 <__gethex+0x3d4>
 800d320:	6861      	ldr	r1, [r4, #4]
 800d322:	9801      	ldr	r0, [sp, #4]
 800d324:	3101      	adds	r1, #1
 800d326:	f000 f9c3 	bl	800d6b0 <_Balloc>
 800d32a:	4681      	mov	r9, r0
 800d32c:	b918      	cbnz	r0, 800d336 <__gethex+0x3ba>
 800d32e:	4b1a      	ldr	r3, [pc, #104]	@ (800d398 <__gethex+0x41c>)
 800d330:	4602      	mov	r2, r0
 800d332:	2184      	movs	r1, #132	@ 0x84
 800d334:	e6c5      	b.n	800d0c2 <__gethex+0x146>
 800d336:	6922      	ldr	r2, [r4, #16]
 800d338:	3202      	adds	r2, #2
 800d33a:	f104 010c 	add.w	r1, r4, #12
 800d33e:	0092      	lsls	r2, r2, #2
 800d340:	300c      	adds	r0, #12
 800d342:	f7fe fee2 	bl	800c10a <memcpy>
 800d346:	4621      	mov	r1, r4
 800d348:	9801      	ldr	r0, [sp, #4]
 800d34a:	f000 f9f1 	bl	800d730 <_Bfree>
 800d34e:	464c      	mov	r4, r9
 800d350:	6923      	ldr	r3, [r4, #16]
 800d352:	1c5a      	adds	r2, r3, #1
 800d354:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d358:	6122      	str	r2, [r4, #16]
 800d35a:	2201      	movs	r2, #1
 800d35c:	615a      	str	r2, [r3, #20]
 800d35e:	e7be      	b.n	800d2de <__gethex+0x362>
 800d360:	6922      	ldr	r2, [r4, #16]
 800d362:	455a      	cmp	r2, fp
 800d364:	dd0b      	ble.n	800d37e <__gethex+0x402>
 800d366:	2101      	movs	r1, #1
 800d368:	4620      	mov	r0, r4
 800d36a:	f7ff fd9f 	bl	800ceac <rshift>
 800d36e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d372:	3701      	adds	r7, #1
 800d374:	42bb      	cmp	r3, r7
 800d376:	f6ff aee0 	blt.w	800d13a <__gethex+0x1be>
 800d37a:	2501      	movs	r5, #1
 800d37c:	e7c2      	b.n	800d304 <__gethex+0x388>
 800d37e:	f016 061f 	ands.w	r6, r6, #31
 800d382:	d0fa      	beq.n	800d37a <__gethex+0x3fe>
 800d384:	4453      	add	r3, sl
 800d386:	f1c6 0620 	rsb	r6, r6, #32
 800d38a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d38e:	f000 fa81 	bl	800d894 <__hi0bits>
 800d392:	42b0      	cmp	r0, r6
 800d394:	dbe7      	blt.n	800d366 <__gethex+0x3ea>
 800d396:	e7f0      	b.n	800d37a <__gethex+0x3fe>
 800d398:	0800ee2c 	.word	0x0800ee2c

0800d39c <L_shift>:
 800d39c:	f1c2 0208 	rsb	r2, r2, #8
 800d3a0:	0092      	lsls	r2, r2, #2
 800d3a2:	b570      	push	{r4, r5, r6, lr}
 800d3a4:	f1c2 0620 	rsb	r6, r2, #32
 800d3a8:	6843      	ldr	r3, [r0, #4]
 800d3aa:	6804      	ldr	r4, [r0, #0]
 800d3ac:	fa03 f506 	lsl.w	r5, r3, r6
 800d3b0:	432c      	orrs	r4, r5
 800d3b2:	40d3      	lsrs	r3, r2
 800d3b4:	6004      	str	r4, [r0, #0]
 800d3b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800d3ba:	4288      	cmp	r0, r1
 800d3bc:	d3f4      	bcc.n	800d3a8 <L_shift+0xc>
 800d3be:	bd70      	pop	{r4, r5, r6, pc}

0800d3c0 <__match>:
 800d3c0:	b530      	push	{r4, r5, lr}
 800d3c2:	6803      	ldr	r3, [r0, #0]
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3ca:	b914      	cbnz	r4, 800d3d2 <__match+0x12>
 800d3cc:	6003      	str	r3, [r0, #0]
 800d3ce:	2001      	movs	r0, #1
 800d3d0:	bd30      	pop	{r4, r5, pc}
 800d3d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d3da:	2d19      	cmp	r5, #25
 800d3dc:	bf98      	it	ls
 800d3de:	3220      	addls	r2, #32
 800d3e0:	42a2      	cmp	r2, r4
 800d3e2:	d0f0      	beq.n	800d3c6 <__match+0x6>
 800d3e4:	2000      	movs	r0, #0
 800d3e6:	e7f3      	b.n	800d3d0 <__match+0x10>

0800d3e8 <__hexnan>:
 800d3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ec:	680b      	ldr	r3, [r1, #0]
 800d3ee:	6801      	ldr	r1, [r0, #0]
 800d3f0:	115e      	asrs	r6, r3, #5
 800d3f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d3f6:	f013 031f 	ands.w	r3, r3, #31
 800d3fa:	b087      	sub	sp, #28
 800d3fc:	bf18      	it	ne
 800d3fe:	3604      	addne	r6, #4
 800d400:	2500      	movs	r5, #0
 800d402:	1f37      	subs	r7, r6, #4
 800d404:	4682      	mov	sl, r0
 800d406:	4690      	mov	r8, r2
 800d408:	9301      	str	r3, [sp, #4]
 800d40a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d40e:	46b9      	mov	r9, r7
 800d410:	463c      	mov	r4, r7
 800d412:	9502      	str	r5, [sp, #8]
 800d414:	46ab      	mov	fp, r5
 800d416:	784a      	ldrb	r2, [r1, #1]
 800d418:	1c4b      	adds	r3, r1, #1
 800d41a:	9303      	str	r3, [sp, #12]
 800d41c:	b342      	cbz	r2, 800d470 <__hexnan+0x88>
 800d41e:	4610      	mov	r0, r2
 800d420:	9105      	str	r1, [sp, #20]
 800d422:	9204      	str	r2, [sp, #16]
 800d424:	f7ff fd94 	bl	800cf50 <__hexdig_fun>
 800d428:	2800      	cmp	r0, #0
 800d42a:	d151      	bne.n	800d4d0 <__hexnan+0xe8>
 800d42c:	9a04      	ldr	r2, [sp, #16]
 800d42e:	9905      	ldr	r1, [sp, #20]
 800d430:	2a20      	cmp	r2, #32
 800d432:	d818      	bhi.n	800d466 <__hexnan+0x7e>
 800d434:	9b02      	ldr	r3, [sp, #8]
 800d436:	459b      	cmp	fp, r3
 800d438:	dd13      	ble.n	800d462 <__hexnan+0x7a>
 800d43a:	454c      	cmp	r4, r9
 800d43c:	d206      	bcs.n	800d44c <__hexnan+0x64>
 800d43e:	2d07      	cmp	r5, #7
 800d440:	dc04      	bgt.n	800d44c <__hexnan+0x64>
 800d442:	462a      	mov	r2, r5
 800d444:	4649      	mov	r1, r9
 800d446:	4620      	mov	r0, r4
 800d448:	f7ff ffa8 	bl	800d39c <L_shift>
 800d44c:	4544      	cmp	r4, r8
 800d44e:	d952      	bls.n	800d4f6 <__hexnan+0x10e>
 800d450:	2300      	movs	r3, #0
 800d452:	f1a4 0904 	sub.w	r9, r4, #4
 800d456:	f844 3c04 	str.w	r3, [r4, #-4]
 800d45a:	f8cd b008 	str.w	fp, [sp, #8]
 800d45e:	464c      	mov	r4, r9
 800d460:	461d      	mov	r5, r3
 800d462:	9903      	ldr	r1, [sp, #12]
 800d464:	e7d7      	b.n	800d416 <__hexnan+0x2e>
 800d466:	2a29      	cmp	r2, #41	@ 0x29
 800d468:	d157      	bne.n	800d51a <__hexnan+0x132>
 800d46a:	3102      	adds	r1, #2
 800d46c:	f8ca 1000 	str.w	r1, [sl]
 800d470:	f1bb 0f00 	cmp.w	fp, #0
 800d474:	d051      	beq.n	800d51a <__hexnan+0x132>
 800d476:	454c      	cmp	r4, r9
 800d478:	d206      	bcs.n	800d488 <__hexnan+0xa0>
 800d47a:	2d07      	cmp	r5, #7
 800d47c:	dc04      	bgt.n	800d488 <__hexnan+0xa0>
 800d47e:	462a      	mov	r2, r5
 800d480:	4649      	mov	r1, r9
 800d482:	4620      	mov	r0, r4
 800d484:	f7ff ff8a 	bl	800d39c <L_shift>
 800d488:	4544      	cmp	r4, r8
 800d48a:	d936      	bls.n	800d4fa <__hexnan+0x112>
 800d48c:	f1a8 0204 	sub.w	r2, r8, #4
 800d490:	4623      	mov	r3, r4
 800d492:	f853 1b04 	ldr.w	r1, [r3], #4
 800d496:	f842 1f04 	str.w	r1, [r2, #4]!
 800d49a:	429f      	cmp	r7, r3
 800d49c:	d2f9      	bcs.n	800d492 <__hexnan+0xaa>
 800d49e:	1b3b      	subs	r3, r7, r4
 800d4a0:	f023 0303 	bic.w	r3, r3, #3
 800d4a4:	3304      	adds	r3, #4
 800d4a6:	3401      	adds	r4, #1
 800d4a8:	3e03      	subs	r6, #3
 800d4aa:	42b4      	cmp	r4, r6
 800d4ac:	bf88      	it	hi
 800d4ae:	2304      	movhi	r3, #4
 800d4b0:	4443      	add	r3, r8
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f843 2b04 	str.w	r2, [r3], #4
 800d4b8:	429f      	cmp	r7, r3
 800d4ba:	d2fb      	bcs.n	800d4b4 <__hexnan+0xcc>
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	b91b      	cbnz	r3, 800d4c8 <__hexnan+0xe0>
 800d4c0:	4547      	cmp	r7, r8
 800d4c2:	d128      	bne.n	800d516 <__hexnan+0x12e>
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	603b      	str	r3, [r7, #0]
 800d4c8:	2005      	movs	r0, #5
 800d4ca:	b007      	add	sp, #28
 800d4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4d0:	3501      	adds	r5, #1
 800d4d2:	2d08      	cmp	r5, #8
 800d4d4:	f10b 0b01 	add.w	fp, fp, #1
 800d4d8:	dd06      	ble.n	800d4e8 <__hexnan+0x100>
 800d4da:	4544      	cmp	r4, r8
 800d4dc:	d9c1      	bls.n	800d462 <__hexnan+0x7a>
 800d4de:	2300      	movs	r3, #0
 800d4e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800d4e4:	2501      	movs	r5, #1
 800d4e6:	3c04      	subs	r4, #4
 800d4e8:	6822      	ldr	r2, [r4, #0]
 800d4ea:	f000 000f 	and.w	r0, r0, #15
 800d4ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d4f2:	6020      	str	r0, [r4, #0]
 800d4f4:	e7b5      	b.n	800d462 <__hexnan+0x7a>
 800d4f6:	2508      	movs	r5, #8
 800d4f8:	e7b3      	b.n	800d462 <__hexnan+0x7a>
 800d4fa:	9b01      	ldr	r3, [sp, #4]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d0dd      	beq.n	800d4bc <__hexnan+0xd4>
 800d500:	f1c3 0320 	rsb	r3, r3, #32
 800d504:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d508:	40da      	lsrs	r2, r3
 800d50a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d50e:	4013      	ands	r3, r2
 800d510:	f846 3c04 	str.w	r3, [r6, #-4]
 800d514:	e7d2      	b.n	800d4bc <__hexnan+0xd4>
 800d516:	3f04      	subs	r7, #4
 800d518:	e7d0      	b.n	800d4bc <__hexnan+0xd4>
 800d51a:	2004      	movs	r0, #4
 800d51c:	e7d5      	b.n	800d4ca <__hexnan+0xe2>
	...

0800d520 <malloc>:
 800d520:	4b02      	ldr	r3, [pc, #8]	@ (800d52c <malloc+0xc>)
 800d522:	4601      	mov	r1, r0
 800d524:	6818      	ldr	r0, [r3, #0]
 800d526:	f000 b825 	b.w	800d574 <_malloc_r>
 800d52a:	bf00      	nop
 800d52c:	20000358 	.word	0x20000358

0800d530 <sbrk_aligned>:
 800d530:	b570      	push	{r4, r5, r6, lr}
 800d532:	4e0f      	ldr	r6, [pc, #60]	@ (800d570 <sbrk_aligned+0x40>)
 800d534:	460c      	mov	r4, r1
 800d536:	6831      	ldr	r1, [r6, #0]
 800d538:	4605      	mov	r5, r0
 800d53a:	b911      	cbnz	r1, 800d542 <sbrk_aligned+0x12>
 800d53c:	f001 f97c 	bl	800e838 <_sbrk_r>
 800d540:	6030      	str	r0, [r6, #0]
 800d542:	4621      	mov	r1, r4
 800d544:	4628      	mov	r0, r5
 800d546:	f001 f977 	bl	800e838 <_sbrk_r>
 800d54a:	1c43      	adds	r3, r0, #1
 800d54c:	d103      	bne.n	800d556 <sbrk_aligned+0x26>
 800d54e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d552:	4620      	mov	r0, r4
 800d554:	bd70      	pop	{r4, r5, r6, pc}
 800d556:	1cc4      	adds	r4, r0, #3
 800d558:	f024 0403 	bic.w	r4, r4, #3
 800d55c:	42a0      	cmp	r0, r4
 800d55e:	d0f8      	beq.n	800d552 <sbrk_aligned+0x22>
 800d560:	1a21      	subs	r1, r4, r0
 800d562:	4628      	mov	r0, r5
 800d564:	f001 f968 	bl	800e838 <_sbrk_r>
 800d568:	3001      	adds	r0, #1
 800d56a:	d1f2      	bne.n	800d552 <sbrk_aligned+0x22>
 800d56c:	e7ef      	b.n	800d54e <sbrk_aligned+0x1e>
 800d56e:	bf00      	nop
 800d570:	20000978 	.word	0x20000978

0800d574 <_malloc_r>:
 800d574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d578:	1ccd      	adds	r5, r1, #3
 800d57a:	f025 0503 	bic.w	r5, r5, #3
 800d57e:	3508      	adds	r5, #8
 800d580:	2d0c      	cmp	r5, #12
 800d582:	bf38      	it	cc
 800d584:	250c      	movcc	r5, #12
 800d586:	2d00      	cmp	r5, #0
 800d588:	4606      	mov	r6, r0
 800d58a:	db01      	blt.n	800d590 <_malloc_r+0x1c>
 800d58c:	42a9      	cmp	r1, r5
 800d58e:	d904      	bls.n	800d59a <_malloc_r+0x26>
 800d590:	230c      	movs	r3, #12
 800d592:	6033      	str	r3, [r6, #0]
 800d594:	2000      	movs	r0, #0
 800d596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d59a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d670 <_malloc_r+0xfc>
 800d59e:	f000 f87b 	bl	800d698 <__malloc_lock>
 800d5a2:	f8d8 3000 	ldr.w	r3, [r8]
 800d5a6:	461c      	mov	r4, r3
 800d5a8:	bb44      	cbnz	r4, 800d5fc <_malloc_r+0x88>
 800d5aa:	4629      	mov	r1, r5
 800d5ac:	4630      	mov	r0, r6
 800d5ae:	f7ff ffbf 	bl	800d530 <sbrk_aligned>
 800d5b2:	1c43      	adds	r3, r0, #1
 800d5b4:	4604      	mov	r4, r0
 800d5b6:	d158      	bne.n	800d66a <_malloc_r+0xf6>
 800d5b8:	f8d8 4000 	ldr.w	r4, [r8]
 800d5bc:	4627      	mov	r7, r4
 800d5be:	2f00      	cmp	r7, #0
 800d5c0:	d143      	bne.n	800d64a <_malloc_r+0xd6>
 800d5c2:	2c00      	cmp	r4, #0
 800d5c4:	d04b      	beq.n	800d65e <_malloc_r+0xea>
 800d5c6:	6823      	ldr	r3, [r4, #0]
 800d5c8:	4639      	mov	r1, r7
 800d5ca:	4630      	mov	r0, r6
 800d5cc:	eb04 0903 	add.w	r9, r4, r3
 800d5d0:	f001 f932 	bl	800e838 <_sbrk_r>
 800d5d4:	4581      	cmp	r9, r0
 800d5d6:	d142      	bne.n	800d65e <_malloc_r+0xea>
 800d5d8:	6821      	ldr	r1, [r4, #0]
 800d5da:	1a6d      	subs	r5, r5, r1
 800d5dc:	4629      	mov	r1, r5
 800d5de:	4630      	mov	r0, r6
 800d5e0:	f7ff ffa6 	bl	800d530 <sbrk_aligned>
 800d5e4:	3001      	adds	r0, #1
 800d5e6:	d03a      	beq.n	800d65e <_malloc_r+0xea>
 800d5e8:	6823      	ldr	r3, [r4, #0]
 800d5ea:	442b      	add	r3, r5
 800d5ec:	6023      	str	r3, [r4, #0]
 800d5ee:	f8d8 3000 	ldr.w	r3, [r8]
 800d5f2:	685a      	ldr	r2, [r3, #4]
 800d5f4:	bb62      	cbnz	r2, 800d650 <_malloc_r+0xdc>
 800d5f6:	f8c8 7000 	str.w	r7, [r8]
 800d5fa:	e00f      	b.n	800d61c <_malloc_r+0xa8>
 800d5fc:	6822      	ldr	r2, [r4, #0]
 800d5fe:	1b52      	subs	r2, r2, r5
 800d600:	d420      	bmi.n	800d644 <_malloc_r+0xd0>
 800d602:	2a0b      	cmp	r2, #11
 800d604:	d917      	bls.n	800d636 <_malloc_r+0xc2>
 800d606:	1961      	adds	r1, r4, r5
 800d608:	42a3      	cmp	r3, r4
 800d60a:	6025      	str	r5, [r4, #0]
 800d60c:	bf18      	it	ne
 800d60e:	6059      	strne	r1, [r3, #4]
 800d610:	6863      	ldr	r3, [r4, #4]
 800d612:	bf08      	it	eq
 800d614:	f8c8 1000 	streq.w	r1, [r8]
 800d618:	5162      	str	r2, [r4, r5]
 800d61a:	604b      	str	r3, [r1, #4]
 800d61c:	4630      	mov	r0, r6
 800d61e:	f000 f841 	bl	800d6a4 <__malloc_unlock>
 800d622:	f104 000b 	add.w	r0, r4, #11
 800d626:	1d23      	adds	r3, r4, #4
 800d628:	f020 0007 	bic.w	r0, r0, #7
 800d62c:	1ac2      	subs	r2, r0, r3
 800d62e:	bf1c      	itt	ne
 800d630:	1a1b      	subne	r3, r3, r0
 800d632:	50a3      	strne	r3, [r4, r2]
 800d634:	e7af      	b.n	800d596 <_malloc_r+0x22>
 800d636:	6862      	ldr	r2, [r4, #4]
 800d638:	42a3      	cmp	r3, r4
 800d63a:	bf0c      	ite	eq
 800d63c:	f8c8 2000 	streq.w	r2, [r8]
 800d640:	605a      	strne	r2, [r3, #4]
 800d642:	e7eb      	b.n	800d61c <_malloc_r+0xa8>
 800d644:	4623      	mov	r3, r4
 800d646:	6864      	ldr	r4, [r4, #4]
 800d648:	e7ae      	b.n	800d5a8 <_malloc_r+0x34>
 800d64a:	463c      	mov	r4, r7
 800d64c:	687f      	ldr	r7, [r7, #4]
 800d64e:	e7b6      	b.n	800d5be <_malloc_r+0x4a>
 800d650:	461a      	mov	r2, r3
 800d652:	685b      	ldr	r3, [r3, #4]
 800d654:	42a3      	cmp	r3, r4
 800d656:	d1fb      	bne.n	800d650 <_malloc_r+0xdc>
 800d658:	2300      	movs	r3, #0
 800d65a:	6053      	str	r3, [r2, #4]
 800d65c:	e7de      	b.n	800d61c <_malloc_r+0xa8>
 800d65e:	230c      	movs	r3, #12
 800d660:	6033      	str	r3, [r6, #0]
 800d662:	4630      	mov	r0, r6
 800d664:	f000 f81e 	bl	800d6a4 <__malloc_unlock>
 800d668:	e794      	b.n	800d594 <_malloc_r+0x20>
 800d66a:	6005      	str	r5, [r0, #0]
 800d66c:	e7d6      	b.n	800d61c <_malloc_r+0xa8>
 800d66e:	bf00      	nop
 800d670:	2000097c 	.word	0x2000097c

0800d674 <__ascii_mbtowc>:
 800d674:	b082      	sub	sp, #8
 800d676:	b901      	cbnz	r1, 800d67a <__ascii_mbtowc+0x6>
 800d678:	a901      	add	r1, sp, #4
 800d67a:	b142      	cbz	r2, 800d68e <__ascii_mbtowc+0x1a>
 800d67c:	b14b      	cbz	r3, 800d692 <__ascii_mbtowc+0x1e>
 800d67e:	7813      	ldrb	r3, [r2, #0]
 800d680:	600b      	str	r3, [r1, #0]
 800d682:	7812      	ldrb	r2, [r2, #0]
 800d684:	1e10      	subs	r0, r2, #0
 800d686:	bf18      	it	ne
 800d688:	2001      	movne	r0, #1
 800d68a:	b002      	add	sp, #8
 800d68c:	4770      	bx	lr
 800d68e:	4610      	mov	r0, r2
 800d690:	e7fb      	b.n	800d68a <__ascii_mbtowc+0x16>
 800d692:	f06f 0001 	mvn.w	r0, #1
 800d696:	e7f8      	b.n	800d68a <__ascii_mbtowc+0x16>

0800d698 <__malloc_lock>:
 800d698:	4801      	ldr	r0, [pc, #4]	@ (800d6a0 <__malloc_lock+0x8>)
 800d69a:	f7fe bd34 	b.w	800c106 <__retarget_lock_acquire_recursive>
 800d69e:	bf00      	nop
 800d6a0:	20000974 	.word	0x20000974

0800d6a4 <__malloc_unlock>:
 800d6a4:	4801      	ldr	r0, [pc, #4]	@ (800d6ac <__malloc_unlock+0x8>)
 800d6a6:	f7fe bd2f 	b.w	800c108 <__retarget_lock_release_recursive>
 800d6aa:	bf00      	nop
 800d6ac:	20000974 	.word	0x20000974

0800d6b0 <_Balloc>:
 800d6b0:	b570      	push	{r4, r5, r6, lr}
 800d6b2:	69c6      	ldr	r6, [r0, #28]
 800d6b4:	4604      	mov	r4, r0
 800d6b6:	460d      	mov	r5, r1
 800d6b8:	b976      	cbnz	r6, 800d6d8 <_Balloc+0x28>
 800d6ba:	2010      	movs	r0, #16
 800d6bc:	f7ff ff30 	bl	800d520 <malloc>
 800d6c0:	4602      	mov	r2, r0
 800d6c2:	61e0      	str	r0, [r4, #28]
 800d6c4:	b920      	cbnz	r0, 800d6d0 <_Balloc+0x20>
 800d6c6:	4b18      	ldr	r3, [pc, #96]	@ (800d728 <_Balloc+0x78>)
 800d6c8:	4818      	ldr	r0, [pc, #96]	@ (800d72c <_Balloc+0x7c>)
 800d6ca:	216b      	movs	r1, #107	@ 0x6b
 800d6cc:	f7fe fd3a 	bl	800c144 <__assert_func>
 800d6d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6d4:	6006      	str	r6, [r0, #0]
 800d6d6:	60c6      	str	r6, [r0, #12]
 800d6d8:	69e6      	ldr	r6, [r4, #28]
 800d6da:	68f3      	ldr	r3, [r6, #12]
 800d6dc:	b183      	cbz	r3, 800d700 <_Balloc+0x50>
 800d6de:	69e3      	ldr	r3, [r4, #28]
 800d6e0:	68db      	ldr	r3, [r3, #12]
 800d6e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d6e6:	b9b8      	cbnz	r0, 800d718 <_Balloc+0x68>
 800d6e8:	2101      	movs	r1, #1
 800d6ea:	fa01 f605 	lsl.w	r6, r1, r5
 800d6ee:	1d72      	adds	r2, r6, #5
 800d6f0:	0092      	lsls	r2, r2, #2
 800d6f2:	4620      	mov	r0, r4
 800d6f4:	f001 f8b7 	bl	800e866 <_calloc_r>
 800d6f8:	b160      	cbz	r0, 800d714 <_Balloc+0x64>
 800d6fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d6fe:	e00e      	b.n	800d71e <_Balloc+0x6e>
 800d700:	2221      	movs	r2, #33	@ 0x21
 800d702:	2104      	movs	r1, #4
 800d704:	4620      	mov	r0, r4
 800d706:	f001 f8ae 	bl	800e866 <_calloc_r>
 800d70a:	69e3      	ldr	r3, [r4, #28]
 800d70c:	60f0      	str	r0, [r6, #12]
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d1e4      	bne.n	800d6de <_Balloc+0x2e>
 800d714:	2000      	movs	r0, #0
 800d716:	bd70      	pop	{r4, r5, r6, pc}
 800d718:	6802      	ldr	r2, [r0, #0]
 800d71a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d71e:	2300      	movs	r3, #0
 800d720:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d724:	e7f7      	b.n	800d716 <_Balloc+0x66>
 800d726:	bf00      	nop
 800d728:	0800ed12 	.word	0x0800ed12
 800d72c:	0800ee9d 	.word	0x0800ee9d

0800d730 <_Bfree>:
 800d730:	b570      	push	{r4, r5, r6, lr}
 800d732:	69c6      	ldr	r6, [r0, #28]
 800d734:	4605      	mov	r5, r0
 800d736:	460c      	mov	r4, r1
 800d738:	b976      	cbnz	r6, 800d758 <_Bfree+0x28>
 800d73a:	2010      	movs	r0, #16
 800d73c:	f7ff fef0 	bl	800d520 <malloc>
 800d740:	4602      	mov	r2, r0
 800d742:	61e8      	str	r0, [r5, #28]
 800d744:	b920      	cbnz	r0, 800d750 <_Bfree+0x20>
 800d746:	4b09      	ldr	r3, [pc, #36]	@ (800d76c <_Bfree+0x3c>)
 800d748:	4809      	ldr	r0, [pc, #36]	@ (800d770 <_Bfree+0x40>)
 800d74a:	218f      	movs	r1, #143	@ 0x8f
 800d74c:	f7fe fcfa 	bl	800c144 <__assert_func>
 800d750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d754:	6006      	str	r6, [r0, #0]
 800d756:	60c6      	str	r6, [r0, #12]
 800d758:	b13c      	cbz	r4, 800d76a <_Bfree+0x3a>
 800d75a:	69eb      	ldr	r3, [r5, #28]
 800d75c:	6862      	ldr	r2, [r4, #4]
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d764:	6021      	str	r1, [r4, #0]
 800d766:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d76a:	bd70      	pop	{r4, r5, r6, pc}
 800d76c:	0800ed12 	.word	0x0800ed12
 800d770:	0800ee9d 	.word	0x0800ee9d

0800d774 <__multadd>:
 800d774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d778:	690d      	ldr	r5, [r1, #16]
 800d77a:	4607      	mov	r7, r0
 800d77c:	460c      	mov	r4, r1
 800d77e:	461e      	mov	r6, r3
 800d780:	f101 0c14 	add.w	ip, r1, #20
 800d784:	2000      	movs	r0, #0
 800d786:	f8dc 3000 	ldr.w	r3, [ip]
 800d78a:	b299      	uxth	r1, r3
 800d78c:	fb02 6101 	mla	r1, r2, r1, r6
 800d790:	0c1e      	lsrs	r6, r3, #16
 800d792:	0c0b      	lsrs	r3, r1, #16
 800d794:	fb02 3306 	mla	r3, r2, r6, r3
 800d798:	b289      	uxth	r1, r1
 800d79a:	3001      	adds	r0, #1
 800d79c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7a0:	4285      	cmp	r5, r0
 800d7a2:	f84c 1b04 	str.w	r1, [ip], #4
 800d7a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7aa:	dcec      	bgt.n	800d786 <__multadd+0x12>
 800d7ac:	b30e      	cbz	r6, 800d7f2 <__multadd+0x7e>
 800d7ae:	68a3      	ldr	r3, [r4, #8]
 800d7b0:	42ab      	cmp	r3, r5
 800d7b2:	dc19      	bgt.n	800d7e8 <__multadd+0x74>
 800d7b4:	6861      	ldr	r1, [r4, #4]
 800d7b6:	4638      	mov	r0, r7
 800d7b8:	3101      	adds	r1, #1
 800d7ba:	f7ff ff79 	bl	800d6b0 <_Balloc>
 800d7be:	4680      	mov	r8, r0
 800d7c0:	b928      	cbnz	r0, 800d7ce <__multadd+0x5a>
 800d7c2:	4602      	mov	r2, r0
 800d7c4:	4b0c      	ldr	r3, [pc, #48]	@ (800d7f8 <__multadd+0x84>)
 800d7c6:	480d      	ldr	r0, [pc, #52]	@ (800d7fc <__multadd+0x88>)
 800d7c8:	21ba      	movs	r1, #186	@ 0xba
 800d7ca:	f7fe fcbb 	bl	800c144 <__assert_func>
 800d7ce:	6922      	ldr	r2, [r4, #16]
 800d7d0:	3202      	adds	r2, #2
 800d7d2:	f104 010c 	add.w	r1, r4, #12
 800d7d6:	0092      	lsls	r2, r2, #2
 800d7d8:	300c      	adds	r0, #12
 800d7da:	f7fe fc96 	bl	800c10a <memcpy>
 800d7de:	4621      	mov	r1, r4
 800d7e0:	4638      	mov	r0, r7
 800d7e2:	f7ff ffa5 	bl	800d730 <_Bfree>
 800d7e6:	4644      	mov	r4, r8
 800d7e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d7ec:	3501      	adds	r5, #1
 800d7ee:	615e      	str	r6, [r3, #20]
 800d7f0:	6125      	str	r5, [r4, #16]
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7f8:	0800ee2c 	.word	0x0800ee2c
 800d7fc:	0800ee9d 	.word	0x0800ee9d

0800d800 <__s2b>:
 800d800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d804:	460c      	mov	r4, r1
 800d806:	4615      	mov	r5, r2
 800d808:	461f      	mov	r7, r3
 800d80a:	2209      	movs	r2, #9
 800d80c:	3308      	adds	r3, #8
 800d80e:	4606      	mov	r6, r0
 800d810:	fb93 f3f2 	sdiv	r3, r3, r2
 800d814:	2100      	movs	r1, #0
 800d816:	2201      	movs	r2, #1
 800d818:	429a      	cmp	r2, r3
 800d81a:	db09      	blt.n	800d830 <__s2b+0x30>
 800d81c:	4630      	mov	r0, r6
 800d81e:	f7ff ff47 	bl	800d6b0 <_Balloc>
 800d822:	b940      	cbnz	r0, 800d836 <__s2b+0x36>
 800d824:	4602      	mov	r2, r0
 800d826:	4b19      	ldr	r3, [pc, #100]	@ (800d88c <__s2b+0x8c>)
 800d828:	4819      	ldr	r0, [pc, #100]	@ (800d890 <__s2b+0x90>)
 800d82a:	21d3      	movs	r1, #211	@ 0xd3
 800d82c:	f7fe fc8a 	bl	800c144 <__assert_func>
 800d830:	0052      	lsls	r2, r2, #1
 800d832:	3101      	adds	r1, #1
 800d834:	e7f0      	b.n	800d818 <__s2b+0x18>
 800d836:	9b08      	ldr	r3, [sp, #32]
 800d838:	6143      	str	r3, [r0, #20]
 800d83a:	2d09      	cmp	r5, #9
 800d83c:	f04f 0301 	mov.w	r3, #1
 800d840:	6103      	str	r3, [r0, #16]
 800d842:	dd16      	ble.n	800d872 <__s2b+0x72>
 800d844:	f104 0909 	add.w	r9, r4, #9
 800d848:	46c8      	mov	r8, r9
 800d84a:	442c      	add	r4, r5
 800d84c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d850:	4601      	mov	r1, r0
 800d852:	3b30      	subs	r3, #48	@ 0x30
 800d854:	220a      	movs	r2, #10
 800d856:	4630      	mov	r0, r6
 800d858:	f7ff ff8c 	bl	800d774 <__multadd>
 800d85c:	45a0      	cmp	r8, r4
 800d85e:	d1f5      	bne.n	800d84c <__s2b+0x4c>
 800d860:	f1a5 0408 	sub.w	r4, r5, #8
 800d864:	444c      	add	r4, r9
 800d866:	1b2d      	subs	r5, r5, r4
 800d868:	1963      	adds	r3, r4, r5
 800d86a:	42bb      	cmp	r3, r7
 800d86c:	db04      	blt.n	800d878 <__s2b+0x78>
 800d86e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d872:	340a      	adds	r4, #10
 800d874:	2509      	movs	r5, #9
 800d876:	e7f6      	b.n	800d866 <__s2b+0x66>
 800d878:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d87c:	4601      	mov	r1, r0
 800d87e:	3b30      	subs	r3, #48	@ 0x30
 800d880:	220a      	movs	r2, #10
 800d882:	4630      	mov	r0, r6
 800d884:	f7ff ff76 	bl	800d774 <__multadd>
 800d888:	e7ee      	b.n	800d868 <__s2b+0x68>
 800d88a:	bf00      	nop
 800d88c:	0800ee2c 	.word	0x0800ee2c
 800d890:	0800ee9d 	.word	0x0800ee9d

0800d894 <__hi0bits>:
 800d894:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d898:	4603      	mov	r3, r0
 800d89a:	bf36      	itet	cc
 800d89c:	0403      	lslcc	r3, r0, #16
 800d89e:	2000      	movcs	r0, #0
 800d8a0:	2010      	movcc	r0, #16
 800d8a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d8a6:	bf3c      	itt	cc
 800d8a8:	021b      	lslcc	r3, r3, #8
 800d8aa:	3008      	addcc	r0, #8
 800d8ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d8b0:	bf3c      	itt	cc
 800d8b2:	011b      	lslcc	r3, r3, #4
 800d8b4:	3004      	addcc	r0, #4
 800d8b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8ba:	bf3c      	itt	cc
 800d8bc:	009b      	lslcc	r3, r3, #2
 800d8be:	3002      	addcc	r0, #2
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	db05      	blt.n	800d8d0 <__hi0bits+0x3c>
 800d8c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d8c8:	f100 0001 	add.w	r0, r0, #1
 800d8cc:	bf08      	it	eq
 800d8ce:	2020      	moveq	r0, #32
 800d8d0:	4770      	bx	lr

0800d8d2 <__lo0bits>:
 800d8d2:	6803      	ldr	r3, [r0, #0]
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	f013 0007 	ands.w	r0, r3, #7
 800d8da:	d00b      	beq.n	800d8f4 <__lo0bits+0x22>
 800d8dc:	07d9      	lsls	r1, r3, #31
 800d8de:	d421      	bmi.n	800d924 <__lo0bits+0x52>
 800d8e0:	0798      	lsls	r0, r3, #30
 800d8e2:	bf49      	itett	mi
 800d8e4:	085b      	lsrmi	r3, r3, #1
 800d8e6:	089b      	lsrpl	r3, r3, #2
 800d8e8:	2001      	movmi	r0, #1
 800d8ea:	6013      	strmi	r3, [r2, #0]
 800d8ec:	bf5c      	itt	pl
 800d8ee:	6013      	strpl	r3, [r2, #0]
 800d8f0:	2002      	movpl	r0, #2
 800d8f2:	4770      	bx	lr
 800d8f4:	b299      	uxth	r1, r3
 800d8f6:	b909      	cbnz	r1, 800d8fc <__lo0bits+0x2a>
 800d8f8:	0c1b      	lsrs	r3, r3, #16
 800d8fa:	2010      	movs	r0, #16
 800d8fc:	b2d9      	uxtb	r1, r3
 800d8fe:	b909      	cbnz	r1, 800d904 <__lo0bits+0x32>
 800d900:	3008      	adds	r0, #8
 800d902:	0a1b      	lsrs	r3, r3, #8
 800d904:	0719      	lsls	r1, r3, #28
 800d906:	bf04      	itt	eq
 800d908:	091b      	lsreq	r3, r3, #4
 800d90a:	3004      	addeq	r0, #4
 800d90c:	0799      	lsls	r1, r3, #30
 800d90e:	bf04      	itt	eq
 800d910:	089b      	lsreq	r3, r3, #2
 800d912:	3002      	addeq	r0, #2
 800d914:	07d9      	lsls	r1, r3, #31
 800d916:	d403      	bmi.n	800d920 <__lo0bits+0x4e>
 800d918:	085b      	lsrs	r3, r3, #1
 800d91a:	f100 0001 	add.w	r0, r0, #1
 800d91e:	d003      	beq.n	800d928 <__lo0bits+0x56>
 800d920:	6013      	str	r3, [r2, #0]
 800d922:	4770      	bx	lr
 800d924:	2000      	movs	r0, #0
 800d926:	4770      	bx	lr
 800d928:	2020      	movs	r0, #32
 800d92a:	4770      	bx	lr

0800d92c <__i2b>:
 800d92c:	b510      	push	{r4, lr}
 800d92e:	460c      	mov	r4, r1
 800d930:	2101      	movs	r1, #1
 800d932:	f7ff febd 	bl	800d6b0 <_Balloc>
 800d936:	4602      	mov	r2, r0
 800d938:	b928      	cbnz	r0, 800d946 <__i2b+0x1a>
 800d93a:	4b05      	ldr	r3, [pc, #20]	@ (800d950 <__i2b+0x24>)
 800d93c:	4805      	ldr	r0, [pc, #20]	@ (800d954 <__i2b+0x28>)
 800d93e:	f240 1145 	movw	r1, #325	@ 0x145
 800d942:	f7fe fbff 	bl	800c144 <__assert_func>
 800d946:	2301      	movs	r3, #1
 800d948:	6144      	str	r4, [r0, #20]
 800d94a:	6103      	str	r3, [r0, #16]
 800d94c:	bd10      	pop	{r4, pc}
 800d94e:	bf00      	nop
 800d950:	0800ee2c 	.word	0x0800ee2c
 800d954:	0800ee9d 	.word	0x0800ee9d

0800d958 <__multiply>:
 800d958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d95c:	4614      	mov	r4, r2
 800d95e:	690a      	ldr	r2, [r1, #16]
 800d960:	6923      	ldr	r3, [r4, #16]
 800d962:	429a      	cmp	r2, r3
 800d964:	bfa8      	it	ge
 800d966:	4623      	movge	r3, r4
 800d968:	460f      	mov	r7, r1
 800d96a:	bfa4      	itt	ge
 800d96c:	460c      	movge	r4, r1
 800d96e:	461f      	movge	r7, r3
 800d970:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d974:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d978:	68a3      	ldr	r3, [r4, #8]
 800d97a:	6861      	ldr	r1, [r4, #4]
 800d97c:	eb0a 0609 	add.w	r6, sl, r9
 800d980:	42b3      	cmp	r3, r6
 800d982:	b085      	sub	sp, #20
 800d984:	bfb8      	it	lt
 800d986:	3101      	addlt	r1, #1
 800d988:	f7ff fe92 	bl	800d6b0 <_Balloc>
 800d98c:	b930      	cbnz	r0, 800d99c <__multiply+0x44>
 800d98e:	4602      	mov	r2, r0
 800d990:	4b44      	ldr	r3, [pc, #272]	@ (800daa4 <__multiply+0x14c>)
 800d992:	4845      	ldr	r0, [pc, #276]	@ (800daa8 <__multiply+0x150>)
 800d994:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d998:	f7fe fbd4 	bl	800c144 <__assert_func>
 800d99c:	f100 0514 	add.w	r5, r0, #20
 800d9a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d9a4:	462b      	mov	r3, r5
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	4543      	cmp	r3, r8
 800d9aa:	d321      	bcc.n	800d9f0 <__multiply+0x98>
 800d9ac:	f107 0114 	add.w	r1, r7, #20
 800d9b0:	f104 0214 	add.w	r2, r4, #20
 800d9b4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d9b8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d9bc:	9302      	str	r3, [sp, #8]
 800d9be:	1b13      	subs	r3, r2, r4
 800d9c0:	3b15      	subs	r3, #21
 800d9c2:	f023 0303 	bic.w	r3, r3, #3
 800d9c6:	3304      	adds	r3, #4
 800d9c8:	f104 0715 	add.w	r7, r4, #21
 800d9cc:	42ba      	cmp	r2, r7
 800d9ce:	bf38      	it	cc
 800d9d0:	2304      	movcc	r3, #4
 800d9d2:	9301      	str	r3, [sp, #4]
 800d9d4:	9b02      	ldr	r3, [sp, #8]
 800d9d6:	9103      	str	r1, [sp, #12]
 800d9d8:	428b      	cmp	r3, r1
 800d9da:	d80c      	bhi.n	800d9f6 <__multiply+0x9e>
 800d9dc:	2e00      	cmp	r6, #0
 800d9de:	dd03      	ble.n	800d9e8 <__multiply+0x90>
 800d9e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d05b      	beq.n	800daa0 <__multiply+0x148>
 800d9e8:	6106      	str	r6, [r0, #16]
 800d9ea:	b005      	add	sp, #20
 800d9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9f0:	f843 2b04 	str.w	r2, [r3], #4
 800d9f4:	e7d8      	b.n	800d9a8 <__multiply+0x50>
 800d9f6:	f8b1 a000 	ldrh.w	sl, [r1]
 800d9fa:	f1ba 0f00 	cmp.w	sl, #0
 800d9fe:	d024      	beq.n	800da4a <__multiply+0xf2>
 800da00:	f104 0e14 	add.w	lr, r4, #20
 800da04:	46a9      	mov	r9, r5
 800da06:	f04f 0c00 	mov.w	ip, #0
 800da0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800da0e:	f8d9 3000 	ldr.w	r3, [r9]
 800da12:	fa1f fb87 	uxth.w	fp, r7
 800da16:	b29b      	uxth	r3, r3
 800da18:	fb0a 330b 	mla	r3, sl, fp, r3
 800da1c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800da20:	f8d9 7000 	ldr.w	r7, [r9]
 800da24:	4463      	add	r3, ip
 800da26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800da2a:	fb0a c70b 	mla	r7, sl, fp, ip
 800da2e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800da32:	b29b      	uxth	r3, r3
 800da34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800da38:	4572      	cmp	r2, lr
 800da3a:	f849 3b04 	str.w	r3, [r9], #4
 800da3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800da42:	d8e2      	bhi.n	800da0a <__multiply+0xb2>
 800da44:	9b01      	ldr	r3, [sp, #4]
 800da46:	f845 c003 	str.w	ip, [r5, r3]
 800da4a:	9b03      	ldr	r3, [sp, #12]
 800da4c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800da50:	3104      	adds	r1, #4
 800da52:	f1b9 0f00 	cmp.w	r9, #0
 800da56:	d021      	beq.n	800da9c <__multiply+0x144>
 800da58:	682b      	ldr	r3, [r5, #0]
 800da5a:	f104 0c14 	add.w	ip, r4, #20
 800da5e:	46ae      	mov	lr, r5
 800da60:	f04f 0a00 	mov.w	sl, #0
 800da64:	f8bc b000 	ldrh.w	fp, [ip]
 800da68:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800da6c:	fb09 770b 	mla	r7, r9, fp, r7
 800da70:	4457      	add	r7, sl
 800da72:	b29b      	uxth	r3, r3
 800da74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800da78:	f84e 3b04 	str.w	r3, [lr], #4
 800da7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800da80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da84:	f8be 3000 	ldrh.w	r3, [lr]
 800da88:	fb09 330a 	mla	r3, r9, sl, r3
 800da8c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800da90:	4562      	cmp	r2, ip
 800da92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da96:	d8e5      	bhi.n	800da64 <__multiply+0x10c>
 800da98:	9f01      	ldr	r7, [sp, #4]
 800da9a:	51eb      	str	r3, [r5, r7]
 800da9c:	3504      	adds	r5, #4
 800da9e:	e799      	b.n	800d9d4 <__multiply+0x7c>
 800daa0:	3e01      	subs	r6, #1
 800daa2:	e79b      	b.n	800d9dc <__multiply+0x84>
 800daa4:	0800ee2c 	.word	0x0800ee2c
 800daa8:	0800ee9d 	.word	0x0800ee9d

0800daac <__pow5mult>:
 800daac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dab0:	4615      	mov	r5, r2
 800dab2:	f012 0203 	ands.w	r2, r2, #3
 800dab6:	4607      	mov	r7, r0
 800dab8:	460e      	mov	r6, r1
 800daba:	d007      	beq.n	800dacc <__pow5mult+0x20>
 800dabc:	4c25      	ldr	r4, [pc, #148]	@ (800db54 <__pow5mult+0xa8>)
 800dabe:	3a01      	subs	r2, #1
 800dac0:	2300      	movs	r3, #0
 800dac2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dac6:	f7ff fe55 	bl	800d774 <__multadd>
 800daca:	4606      	mov	r6, r0
 800dacc:	10ad      	asrs	r5, r5, #2
 800dace:	d03d      	beq.n	800db4c <__pow5mult+0xa0>
 800dad0:	69fc      	ldr	r4, [r7, #28]
 800dad2:	b97c      	cbnz	r4, 800daf4 <__pow5mult+0x48>
 800dad4:	2010      	movs	r0, #16
 800dad6:	f7ff fd23 	bl	800d520 <malloc>
 800dada:	4602      	mov	r2, r0
 800dadc:	61f8      	str	r0, [r7, #28]
 800dade:	b928      	cbnz	r0, 800daec <__pow5mult+0x40>
 800dae0:	4b1d      	ldr	r3, [pc, #116]	@ (800db58 <__pow5mult+0xac>)
 800dae2:	481e      	ldr	r0, [pc, #120]	@ (800db5c <__pow5mult+0xb0>)
 800dae4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dae8:	f7fe fb2c 	bl	800c144 <__assert_func>
 800daec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800daf0:	6004      	str	r4, [r0, #0]
 800daf2:	60c4      	str	r4, [r0, #12]
 800daf4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800daf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dafc:	b94c      	cbnz	r4, 800db12 <__pow5mult+0x66>
 800dafe:	f240 2171 	movw	r1, #625	@ 0x271
 800db02:	4638      	mov	r0, r7
 800db04:	f7ff ff12 	bl	800d92c <__i2b>
 800db08:	2300      	movs	r3, #0
 800db0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800db0e:	4604      	mov	r4, r0
 800db10:	6003      	str	r3, [r0, #0]
 800db12:	f04f 0900 	mov.w	r9, #0
 800db16:	07eb      	lsls	r3, r5, #31
 800db18:	d50a      	bpl.n	800db30 <__pow5mult+0x84>
 800db1a:	4631      	mov	r1, r6
 800db1c:	4622      	mov	r2, r4
 800db1e:	4638      	mov	r0, r7
 800db20:	f7ff ff1a 	bl	800d958 <__multiply>
 800db24:	4631      	mov	r1, r6
 800db26:	4680      	mov	r8, r0
 800db28:	4638      	mov	r0, r7
 800db2a:	f7ff fe01 	bl	800d730 <_Bfree>
 800db2e:	4646      	mov	r6, r8
 800db30:	106d      	asrs	r5, r5, #1
 800db32:	d00b      	beq.n	800db4c <__pow5mult+0xa0>
 800db34:	6820      	ldr	r0, [r4, #0]
 800db36:	b938      	cbnz	r0, 800db48 <__pow5mult+0x9c>
 800db38:	4622      	mov	r2, r4
 800db3a:	4621      	mov	r1, r4
 800db3c:	4638      	mov	r0, r7
 800db3e:	f7ff ff0b 	bl	800d958 <__multiply>
 800db42:	6020      	str	r0, [r4, #0]
 800db44:	f8c0 9000 	str.w	r9, [r0]
 800db48:	4604      	mov	r4, r0
 800db4a:	e7e4      	b.n	800db16 <__pow5mult+0x6a>
 800db4c:	4630      	mov	r0, r6
 800db4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db52:	bf00      	nop
 800db54:	0800eef8 	.word	0x0800eef8
 800db58:	0800ed12 	.word	0x0800ed12
 800db5c:	0800ee9d 	.word	0x0800ee9d

0800db60 <__lshift>:
 800db60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db64:	460c      	mov	r4, r1
 800db66:	6849      	ldr	r1, [r1, #4]
 800db68:	6923      	ldr	r3, [r4, #16]
 800db6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db6e:	68a3      	ldr	r3, [r4, #8]
 800db70:	4607      	mov	r7, r0
 800db72:	4691      	mov	r9, r2
 800db74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db78:	f108 0601 	add.w	r6, r8, #1
 800db7c:	42b3      	cmp	r3, r6
 800db7e:	db0b      	blt.n	800db98 <__lshift+0x38>
 800db80:	4638      	mov	r0, r7
 800db82:	f7ff fd95 	bl	800d6b0 <_Balloc>
 800db86:	4605      	mov	r5, r0
 800db88:	b948      	cbnz	r0, 800db9e <__lshift+0x3e>
 800db8a:	4602      	mov	r2, r0
 800db8c:	4b28      	ldr	r3, [pc, #160]	@ (800dc30 <__lshift+0xd0>)
 800db8e:	4829      	ldr	r0, [pc, #164]	@ (800dc34 <__lshift+0xd4>)
 800db90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800db94:	f7fe fad6 	bl	800c144 <__assert_func>
 800db98:	3101      	adds	r1, #1
 800db9a:	005b      	lsls	r3, r3, #1
 800db9c:	e7ee      	b.n	800db7c <__lshift+0x1c>
 800db9e:	2300      	movs	r3, #0
 800dba0:	f100 0114 	add.w	r1, r0, #20
 800dba4:	f100 0210 	add.w	r2, r0, #16
 800dba8:	4618      	mov	r0, r3
 800dbaa:	4553      	cmp	r3, sl
 800dbac:	db33      	blt.n	800dc16 <__lshift+0xb6>
 800dbae:	6920      	ldr	r0, [r4, #16]
 800dbb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dbb4:	f104 0314 	add.w	r3, r4, #20
 800dbb8:	f019 091f 	ands.w	r9, r9, #31
 800dbbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dbc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dbc4:	d02b      	beq.n	800dc1e <__lshift+0xbe>
 800dbc6:	f1c9 0e20 	rsb	lr, r9, #32
 800dbca:	468a      	mov	sl, r1
 800dbcc:	2200      	movs	r2, #0
 800dbce:	6818      	ldr	r0, [r3, #0]
 800dbd0:	fa00 f009 	lsl.w	r0, r0, r9
 800dbd4:	4310      	orrs	r0, r2
 800dbd6:	f84a 0b04 	str.w	r0, [sl], #4
 800dbda:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbde:	459c      	cmp	ip, r3
 800dbe0:	fa22 f20e 	lsr.w	r2, r2, lr
 800dbe4:	d8f3      	bhi.n	800dbce <__lshift+0x6e>
 800dbe6:	ebac 0304 	sub.w	r3, ip, r4
 800dbea:	3b15      	subs	r3, #21
 800dbec:	f023 0303 	bic.w	r3, r3, #3
 800dbf0:	3304      	adds	r3, #4
 800dbf2:	f104 0015 	add.w	r0, r4, #21
 800dbf6:	4584      	cmp	ip, r0
 800dbf8:	bf38      	it	cc
 800dbfa:	2304      	movcc	r3, #4
 800dbfc:	50ca      	str	r2, [r1, r3]
 800dbfe:	b10a      	cbz	r2, 800dc04 <__lshift+0xa4>
 800dc00:	f108 0602 	add.w	r6, r8, #2
 800dc04:	3e01      	subs	r6, #1
 800dc06:	4638      	mov	r0, r7
 800dc08:	612e      	str	r6, [r5, #16]
 800dc0a:	4621      	mov	r1, r4
 800dc0c:	f7ff fd90 	bl	800d730 <_Bfree>
 800dc10:	4628      	mov	r0, r5
 800dc12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc16:	f842 0f04 	str.w	r0, [r2, #4]!
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	e7c5      	b.n	800dbaa <__lshift+0x4a>
 800dc1e:	3904      	subs	r1, #4
 800dc20:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc24:	f841 2f04 	str.w	r2, [r1, #4]!
 800dc28:	459c      	cmp	ip, r3
 800dc2a:	d8f9      	bhi.n	800dc20 <__lshift+0xc0>
 800dc2c:	e7ea      	b.n	800dc04 <__lshift+0xa4>
 800dc2e:	bf00      	nop
 800dc30:	0800ee2c 	.word	0x0800ee2c
 800dc34:	0800ee9d 	.word	0x0800ee9d

0800dc38 <__mcmp>:
 800dc38:	690a      	ldr	r2, [r1, #16]
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	6900      	ldr	r0, [r0, #16]
 800dc3e:	1a80      	subs	r0, r0, r2
 800dc40:	b530      	push	{r4, r5, lr}
 800dc42:	d10e      	bne.n	800dc62 <__mcmp+0x2a>
 800dc44:	3314      	adds	r3, #20
 800dc46:	3114      	adds	r1, #20
 800dc48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dc4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dc50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dc54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dc58:	4295      	cmp	r5, r2
 800dc5a:	d003      	beq.n	800dc64 <__mcmp+0x2c>
 800dc5c:	d205      	bcs.n	800dc6a <__mcmp+0x32>
 800dc5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc62:	bd30      	pop	{r4, r5, pc}
 800dc64:	42a3      	cmp	r3, r4
 800dc66:	d3f3      	bcc.n	800dc50 <__mcmp+0x18>
 800dc68:	e7fb      	b.n	800dc62 <__mcmp+0x2a>
 800dc6a:	2001      	movs	r0, #1
 800dc6c:	e7f9      	b.n	800dc62 <__mcmp+0x2a>
	...

0800dc70 <__mdiff>:
 800dc70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc74:	4689      	mov	r9, r1
 800dc76:	4606      	mov	r6, r0
 800dc78:	4611      	mov	r1, r2
 800dc7a:	4648      	mov	r0, r9
 800dc7c:	4614      	mov	r4, r2
 800dc7e:	f7ff ffdb 	bl	800dc38 <__mcmp>
 800dc82:	1e05      	subs	r5, r0, #0
 800dc84:	d112      	bne.n	800dcac <__mdiff+0x3c>
 800dc86:	4629      	mov	r1, r5
 800dc88:	4630      	mov	r0, r6
 800dc8a:	f7ff fd11 	bl	800d6b0 <_Balloc>
 800dc8e:	4602      	mov	r2, r0
 800dc90:	b928      	cbnz	r0, 800dc9e <__mdiff+0x2e>
 800dc92:	4b3f      	ldr	r3, [pc, #252]	@ (800dd90 <__mdiff+0x120>)
 800dc94:	f240 2137 	movw	r1, #567	@ 0x237
 800dc98:	483e      	ldr	r0, [pc, #248]	@ (800dd94 <__mdiff+0x124>)
 800dc9a:	f7fe fa53 	bl	800c144 <__assert_func>
 800dc9e:	2301      	movs	r3, #1
 800dca0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dca4:	4610      	mov	r0, r2
 800dca6:	b003      	add	sp, #12
 800dca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcac:	bfbc      	itt	lt
 800dcae:	464b      	movlt	r3, r9
 800dcb0:	46a1      	movlt	r9, r4
 800dcb2:	4630      	mov	r0, r6
 800dcb4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dcb8:	bfba      	itte	lt
 800dcba:	461c      	movlt	r4, r3
 800dcbc:	2501      	movlt	r5, #1
 800dcbe:	2500      	movge	r5, #0
 800dcc0:	f7ff fcf6 	bl	800d6b0 <_Balloc>
 800dcc4:	4602      	mov	r2, r0
 800dcc6:	b918      	cbnz	r0, 800dcd0 <__mdiff+0x60>
 800dcc8:	4b31      	ldr	r3, [pc, #196]	@ (800dd90 <__mdiff+0x120>)
 800dcca:	f240 2145 	movw	r1, #581	@ 0x245
 800dcce:	e7e3      	b.n	800dc98 <__mdiff+0x28>
 800dcd0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dcd4:	6926      	ldr	r6, [r4, #16]
 800dcd6:	60c5      	str	r5, [r0, #12]
 800dcd8:	f109 0310 	add.w	r3, r9, #16
 800dcdc:	f109 0514 	add.w	r5, r9, #20
 800dce0:	f104 0e14 	add.w	lr, r4, #20
 800dce4:	f100 0b14 	add.w	fp, r0, #20
 800dce8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dcec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dcf0:	9301      	str	r3, [sp, #4]
 800dcf2:	46d9      	mov	r9, fp
 800dcf4:	f04f 0c00 	mov.w	ip, #0
 800dcf8:	9b01      	ldr	r3, [sp, #4]
 800dcfa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dcfe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dd02:	9301      	str	r3, [sp, #4]
 800dd04:	fa1f f38a 	uxth.w	r3, sl
 800dd08:	4619      	mov	r1, r3
 800dd0a:	b283      	uxth	r3, r0
 800dd0c:	1acb      	subs	r3, r1, r3
 800dd0e:	0c00      	lsrs	r0, r0, #16
 800dd10:	4463      	add	r3, ip
 800dd12:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dd16:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dd20:	4576      	cmp	r6, lr
 800dd22:	f849 3b04 	str.w	r3, [r9], #4
 800dd26:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dd2a:	d8e5      	bhi.n	800dcf8 <__mdiff+0x88>
 800dd2c:	1b33      	subs	r3, r6, r4
 800dd2e:	3b15      	subs	r3, #21
 800dd30:	f023 0303 	bic.w	r3, r3, #3
 800dd34:	3415      	adds	r4, #21
 800dd36:	3304      	adds	r3, #4
 800dd38:	42a6      	cmp	r6, r4
 800dd3a:	bf38      	it	cc
 800dd3c:	2304      	movcc	r3, #4
 800dd3e:	441d      	add	r5, r3
 800dd40:	445b      	add	r3, fp
 800dd42:	461e      	mov	r6, r3
 800dd44:	462c      	mov	r4, r5
 800dd46:	4544      	cmp	r4, r8
 800dd48:	d30e      	bcc.n	800dd68 <__mdiff+0xf8>
 800dd4a:	f108 0103 	add.w	r1, r8, #3
 800dd4e:	1b49      	subs	r1, r1, r5
 800dd50:	f021 0103 	bic.w	r1, r1, #3
 800dd54:	3d03      	subs	r5, #3
 800dd56:	45a8      	cmp	r8, r5
 800dd58:	bf38      	it	cc
 800dd5a:	2100      	movcc	r1, #0
 800dd5c:	440b      	add	r3, r1
 800dd5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dd62:	b191      	cbz	r1, 800dd8a <__mdiff+0x11a>
 800dd64:	6117      	str	r7, [r2, #16]
 800dd66:	e79d      	b.n	800dca4 <__mdiff+0x34>
 800dd68:	f854 1b04 	ldr.w	r1, [r4], #4
 800dd6c:	46e6      	mov	lr, ip
 800dd6e:	0c08      	lsrs	r0, r1, #16
 800dd70:	fa1c fc81 	uxtah	ip, ip, r1
 800dd74:	4471      	add	r1, lr
 800dd76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dd7a:	b289      	uxth	r1, r1
 800dd7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dd80:	f846 1b04 	str.w	r1, [r6], #4
 800dd84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dd88:	e7dd      	b.n	800dd46 <__mdiff+0xd6>
 800dd8a:	3f01      	subs	r7, #1
 800dd8c:	e7e7      	b.n	800dd5e <__mdiff+0xee>
 800dd8e:	bf00      	nop
 800dd90:	0800ee2c 	.word	0x0800ee2c
 800dd94:	0800ee9d 	.word	0x0800ee9d

0800dd98 <__ulp>:
 800dd98:	b082      	sub	sp, #8
 800dd9a:	ed8d 0b00 	vstr	d0, [sp]
 800dd9e:	9a01      	ldr	r2, [sp, #4]
 800dda0:	4b0f      	ldr	r3, [pc, #60]	@ (800dde0 <__ulp+0x48>)
 800dda2:	4013      	ands	r3, r2
 800dda4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	dc08      	bgt.n	800ddbe <__ulp+0x26>
 800ddac:	425b      	negs	r3, r3
 800ddae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ddb2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ddb6:	da04      	bge.n	800ddc2 <__ulp+0x2a>
 800ddb8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ddbc:	4113      	asrs	r3, r2
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	e008      	b.n	800ddd4 <__ulp+0x3c>
 800ddc2:	f1a2 0314 	sub.w	r3, r2, #20
 800ddc6:	2b1e      	cmp	r3, #30
 800ddc8:	bfda      	itte	le
 800ddca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ddce:	40da      	lsrle	r2, r3
 800ddd0:	2201      	movgt	r2, #1
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	4610      	mov	r0, r2
 800ddd8:	ec41 0b10 	vmov	d0, r0, r1
 800dddc:	b002      	add	sp, #8
 800ddde:	4770      	bx	lr
 800dde0:	7ff00000 	.word	0x7ff00000

0800dde4 <__b2d>:
 800dde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dde8:	6906      	ldr	r6, [r0, #16]
 800ddea:	f100 0814 	add.w	r8, r0, #20
 800ddee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ddf2:	1f37      	subs	r7, r6, #4
 800ddf4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ddf8:	4610      	mov	r0, r2
 800ddfa:	f7ff fd4b 	bl	800d894 <__hi0bits>
 800ddfe:	f1c0 0320 	rsb	r3, r0, #32
 800de02:	280a      	cmp	r0, #10
 800de04:	600b      	str	r3, [r1, #0]
 800de06:	491b      	ldr	r1, [pc, #108]	@ (800de74 <__b2d+0x90>)
 800de08:	dc15      	bgt.n	800de36 <__b2d+0x52>
 800de0a:	f1c0 0c0b 	rsb	ip, r0, #11
 800de0e:	fa22 f30c 	lsr.w	r3, r2, ip
 800de12:	45b8      	cmp	r8, r7
 800de14:	ea43 0501 	orr.w	r5, r3, r1
 800de18:	bf34      	ite	cc
 800de1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800de1e:	2300      	movcs	r3, #0
 800de20:	3015      	adds	r0, #21
 800de22:	fa02 f000 	lsl.w	r0, r2, r0
 800de26:	fa23 f30c 	lsr.w	r3, r3, ip
 800de2a:	4303      	orrs	r3, r0
 800de2c:	461c      	mov	r4, r3
 800de2e:	ec45 4b10 	vmov	d0, r4, r5
 800de32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de36:	45b8      	cmp	r8, r7
 800de38:	bf3a      	itte	cc
 800de3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800de3e:	f1a6 0708 	subcc.w	r7, r6, #8
 800de42:	2300      	movcs	r3, #0
 800de44:	380b      	subs	r0, #11
 800de46:	d012      	beq.n	800de6e <__b2d+0x8a>
 800de48:	f1c0 0120 	rsb	r1, r0, #32
 800de4c:	fa23 f401 	lsr.w	r4, r3, r1
 800de50:	4082      	lsls	r2, r0
 800de52:	4322      	orrs	r2, r4
 800de54:	4547      	cmp	r7, r8
 800de56:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800de5a:	bf8c      	ite	hi
 800de5c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800de60:	2200      	movls	r2, #0
 800de62:	4083      	lsls	r3, r0
 800de64:	40ca      	lsrs	r2, r1
 800de66:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800de6a:	4313      	orrs	r3, r2
 800de6c:	e7de      	b.n	800de2c <__b2d+0x48>
 800de6e:	ea42 0501 	orr.w	r5, r2, r1
 800de72:	e7db      	b.n	800de2c <__b2d+0x48>
 800de74:	3ff00000 	.word	0x3ff00000

0800de78 <__d2b>:
 800de78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de7c:	460f      	mov	r7, r1
 800de7e:	2101      	movs	r1, #1
 800de80:	ec59 8b10 	vmov	r8, r9, d0
 800de84:	4616      	mov	r6, r2
 800de86:	f7ff fc13 	bl	800d6b0 <_Balloc>
 800de8a:	4604      	mov	r4, r0
 800de8c:	b930      	cbnz	r0, 800de9c <__d2b+0x24>
 800de8e:	4602      	mov	r2, r0
 800de90:	4b23      	ldr	r3, [pc, #140]	@ (800df20 <__d2b+0xa8>)
 800de92:	4824      	ldr	r0, [pc, #144]	@ (800df24 <__d2b+0xac>)
 800de94:	f240 310f 	movw	r1, #783	@ 0x30f
 800de98:	f7fe f954 	bl	800c144 <__assert_func>
 800de9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dea0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dea4:	b10d      	cbz	r5, 800deaa <__d2b+0x32>
 800dea6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800deaa:	9301      	str	r3, [sp, #4]
 800deac:	f1b8 0300 	subs.w	r3, r8, #0
 800deb0:	d023      	beq.n	800defa <__d2b+0x82>
 800deb2:	4668      	mov	r0, sp
 800deb4:	9300      	str	r3, [sp, #0]
 800deb6:	f7ff fd0c 	bl	800d8d2 <__lo0bits>
 800deba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800debe:	b1d0      	cbz	r0, 800def6 <__d2b+0x7e>
 800dec0:	f1c0 0320 	rsb	r3, r0, #32
 800dec4:	fa02 f303 	lsl.w	r3, r2, r3
 800dec8:	430b      	orrs	r3, r1
 800deca:	40c2      	lsrs	r2, r0
 800decc:	6163      	str	r3, [r4, #20]
 800dece:	9201      	str	r2, [sp, #4]
 800ded0:	9b01      	ldr	r3, [sp, #4]
 800ded2:	61a3      	str	r3, [r4, #24]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	bf0c      	ite	eq
 800ded8:	2201      	moveq	r2, #1
 800deda:	2202      	movne	r2, #2
 800dedc:	6122      	str	r2, [r4, #16]
 800dede:	b1a5      	cbz	r5, 800df0a <__d2b+0x92>
 800dee0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dee4:	4405      	add	r5, r0
 800dee6:	603d      	str	r5, [r7, #0]
 800dee8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800deec:	6030      	str	r0, [r6, #0]
 800deee:	4620      	mov	r0, r4
 800def0:	b003      	add	sp, #12
 800def2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800def6:	6161      	str	r1, [r4, #20]
 800def8:	e7ea      	b.n	800ded0 <__d2b+0x58>
 800defa:	a801      	add	r0, sp, #4
 800defc:	f7ff fce9 	bl	800d8d2 <__lo0bits>
 800df00:	9b01      	ldr	r3, [sp, #4]
 800df02:	6163      	str	r3, [r4, #20]
 800df04:	3020      	adds	r0, #32
 800df06:	2201      	movs	r2, #1
 800df08:	e7e8      	b.n	800dedc <__d2b+0x64>
 800df0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800df0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800df12:	6038      	str	r0, [r7, #0]
 800df14:	6918      	ldr	r0, [r3, #16]
 800df16:	f7ff fcbd 	bl	800d894 <__hi0bits>
 800df1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df1e:	e7e5      	b.n	800deec <__d2b+0x74>
 800df20:	0800ee2c 	.word	0x0800ee2c
 800df24:	0800ee9d 	.word	0x0800ee9d

0800df28 <__ratio>:
 800df28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df2c:	b085      	sub	sp, #20
 800df2e:	e9cd 1000 	strd	r1, r0, [sp]
 800df32:	a902      	add	r1, sp, #8
 800df34:	f7ff ff56 	bl	800dde4 <__b2d>
 800df38:	9800      	ldr	r0, [sp, #0]
 800df3a:	a903      	add	r1, sp, #12
 800df3c:	ec55 4b10 	vmov	r4, r5, d0
 800df40:	f7ff ff50 	bl	800dde4 <__b2d>
 800df44:	9b01      	ldr	r3, [sp, #4]
 800df46:	6919      	ldr	r1, [r3, #16]
 800df48:	9b00      	ldr	r3, [sp, #0]
 800df4a:	691b      	ldr	r3, [r3, #16]
 800df4c:	1ac9      	subs	r1, r1, r3
 800df4e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800df52:	1a9b      	subs	r3, r3, r2
 800df54:	ec5b ab10 	vmov	sl, fp, d0
 800df58:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	bfce      	itee	gt
 800df60:	462a      	movgt	r2, r5
 800df62:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800df66:	465a      	movle	r2, fp
 800df68:	462f      	mov	r7, r5
 800df6a:	46d9      	mov	r9, fp
 800df6c:	bfcc      	ite	gt
 800df6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800df72:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800df76:	464b      	mov	r3, r9
 800df78:	4652      	mov	r2, sl
 800df7a:	4620      	mov	r0, r4
 800df7c:	4639      	mov	r1, r7
 800df7e:	f7f2 fc9d 	bl	80008bc <__aeabi_ddiv>
 800df82:	ec41 0b10 	vmov	d0, r0, r1
 800df86:	b005      	add	sp, #20
 800df88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800df8c <__copybits>:
 800df8c:	3901      	subs	r1, #1
 800df8e:	b570      	push	{r4, r5, r6, lr}
 800df90:	1149      	asrs	r1, r1, #5
 800df92:	6914      	ldr	r4, [r2, #16]
 800df94:	3101      	adds	r1, #1
 800df96:	f102 0314 	add.w	r3, r2, #20
 800df9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800df9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dfa2:	1f05      	subs	r5, r0, #4
 800dfa4:	42a3      	cmp	r3, r4
 800dfa6:	d30c      	bcc.n	800dfc2 <__copybits+0x36>
 800dfa8:	1aa3      	subs	r3, r4, r2
 800dfaa:	3b11      	subs	r3, #17
 800dfac:	f023 0303 	bic.w	r3, r3, #3
 800dfb0:	3211      	adds	r2, #17
 800dfb2:	42a2      	cmp	r2, r4
 800dfb4:	bf88      	it	hi
 800dfb6:	2300      	movhi	r3, #0
 800dfb8:	4418      	add	r0, r3
 800dfba:	2300      	movs	r3, #0
 800dfbc:	4288      	cmp	r0, r1
 800dfbe:	d305      	bcc.n	800dfcc <__copybits+0x40>
 800dfc0:	bd70      	pop	{r4, r5, r6, pc}
 800dfc2:	f853 6b04 	ldr.w	r6, [r3], #4
 800dfc6:	f845 6f04 	str.w	r6, [r5, #4]!
 800dfca:	e7eb      	b.n	800dfa4 <__copybits+0x18>
 800dfcc:	f840 3b04 	str.w	r3, [r0], #4
 800dfd0:	e7f4      	b.n	800dfbc <__copybits+0x30>

0800dfd2 <__any_on>:
 800dfd2:	f100 0214 	add.w	r2, r0, #20
 800dfd6:	6900      	ldr	r0, [r0, #16]
 800dfd8:	114b      	asrs	r3, r1, #5
 800dfda:	4298      	cmp	r0, r3
 800dfdc:	b510      	push	{r4, lr}
 800dfde:	db11      	blt.n	800e004 <__any_on+0x32>
 800dfe0:	dd0a      	ble.n	800dff8 <__any_on+0x26>
 800dfe2:	f011 011f 	ands.w	r1, r1, #31
 800dfe6:	d007      	beq.n	800dff8 <__any_on+0x26>
 800dfe8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dfec:	fa24 f001 	lsr.w	r0, r4, r1
 800dff0:	fa00 f101 	lsl.w	r1, r0, r1
 800dff4:	428c      	cmp	r4, r1
 800dff6:	d10b      	bne.n	800e010 <__any_on+0x3e>
 800dff8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dffc:	4293      	cmp	r3, r2
 800dffe:	d803      	bhi.n	800e008 <__any_on+0x36>
 800e000:	2000      	movs	r0, #0
 800e002:	bd10      	pop	{r4, pc}
 800e004:	4603      	mov	r3, r0
 800e006:	e7f7      	b.n	800dff8 <__any_on+0x26>
 800e008:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e00c:	2900      	cmp	r1, #0
 800e00e:	d0f5      	beq.n	800dffc <__any_on+0x2a>
 800e010:	2001      	movs	r0, #1
 800e012:	e7f6      	b.n	800e002 <__any_on+0x30>

0800e014 <__ascii_wctomb>:
 800e014:	4603      	mov	r3, r0
 800e016:	4608      	mov	r0, r1
 800e018:	b141      	cbz	r1, 800e02c <__ascii_wctomb+0x18>
 800e01a:	2aff      	cmp	r2, #255	@ 0xff
 800e01c:	d904      	bls.n	800e028 <__ascii_wctomb+0x14>
 800e01e:	228a      	movs	r2, #138	@ 0x8a
 800e020:	601a      	str	r2, [r3, #0]
 800e022:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e026:	4770      	bx	lr
 800e028:	700a      	strb	r2, [r1, #0]
 800e02a:	2001      	movs	r0, #1
 800e02c:	4770      	bx	lr

0800e02e <__ssputs_r>:
 800e02e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e032:	688e      	ldr	r6, [r1, #8]
 800e034:	461f      	mov	r7, r3
 800e036:	42be      	cmp	r6, r7
 800e038:	680b      	ldr	r3, [r1, #0]
 800e03a:	4682      	mov	sl, r0
 800e03c:	460c      	mov	r4, r1
 800e03e:	4690      	mov	r8, r2
 800e040:	d82d      	bhi.n	800e09e <__ssputs_r+0x70>
 800e042:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e046:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e04a:	d026      	beq.n	800e09a <__ssputs_r+0x6c>
 800e04c:	6965      	ldr	r5, [r4, #20]
 800e04e:	6909      	ldr	r1, [r1, #16]
 800e050:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e054:	eba3 0901 	sub.w	r9, r3, r1
 800e058:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e05c:	1c7b      	adds	r3, r7, #1
 800e05e:	444b      	add	r3, r9
 800e060:	106d      	asrs	r5, r5, #1
 800e062:	429d      	cmp	r5, r3
 800e064:	bf38      	it	cc
 800e066:	461d      	movcc	r5, r3
 800e068:	0553      	lsls	r3, r2, #21
 800e06a:	d527      	bpl.n	800e0bc <__ssputs_r+0x8e>
 800e06c:	4629      	mov	r1, r5
 800e06e:	f7ff fa81 	bl	800d574 <_malloc_r>
 800e072:	4606      	mov	r6, r0
 800e074:	b360      	cbz	r0, 800e0d0 <__ssputs_r+0xa2>
 800e076:	6921      	ldr	r1, [r4, #16]
 800e078:	464a      	mov	r2, r9
 800e07a:	f7fe f846 	bl	800c10a <memcpy>
 800e07e:	89a3      	ldrh	r3, [r4, #12]
 800e080:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e084:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e088:	81a3      	strh	r3, [r4, #12]
 800e08a:	6126      	str	r6, [r4, #16]
 800e08c:	6165      	str	r5, [r4, #20]
 800e08e:	444e      	add	r6, r9
 800e090:	eba5 0509 	sub.w	r5, r5, r9
 800e094:	6026      	str	r6, [r4, #0]
 800e096:	60a5      	str	r5, [r4, #8]
 800e098:	463e      	mov	r6, r7
 800e09a:	42be      	cmp	r6, r7
 800e09c:	d900      	bls.n	800e0a0 <__ssputs_r+0x72>
 800e09e:	463e      	mov	r6, r7
 800e0a0:	6820      	ldr	r0, [r4, #0]
 800e0a2:	4632      	mov	r2, r6
 800e0a4:	4641      	mov	r1, r8
 800e0a6:	f000 fbad 	bl	800e804 <memmove>
 800e0aa:	68a3      	ldr	r3, [r4, #8]
 800e0ac:	1b9b      	subs	r3, r3, r6
 800e0ae:	60a3      	str	r3, [r4, #8]
 800e0b0:	6823      	ldr	r3, [r4, #0]
 800e0b2:	4433      	add	r3, r6
 800e0b4:	6023      	str	r3, [r4, #0]
 800e0b6:	2000      	movs	r0, #0
 800e0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0bc:	462a      	mov	r2, r5
 800e0be:	f000 fbe6 	bl	800e88e <_realloc_r>
 800e0c2:	4606      	mov	r6, r0
 800e0c4:	2800      	cmp	r0, #0
 800e0c6:	d1e0      	bne.n	800e08a <__ssputs_r+0x5c>
 800e0c8:	6921      	ldr	r1, [r4, #16]
 800e0ca:	4650      	mov	r0, sl
 800e0cc:	f7fe fea4 	bl	800ce18 <_free_r>
 800e0d0:	230c      	movs	r3, #12
 800e0d2:	f8ca 3000 	str.w	r3, [sl]
 800e0d6:	89a3      	ldrh	r3, [r4, #12]
 800e0d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0dc:	81a3      	strh	r3, [r4, #12]
 800e0de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e0e2:	e7e9      	b.n	800e0b8 <__ssputs_r+0x8a>

0800e0e4 <_svfiprintf_r>:
 800e0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e8:	4698      	mov	r8, r3
 800e0ea:	898b      	ldrh	r3, [r1, #12]
 800e0ec:	061b      	lsls	r3, r3, #24
 800e0ee:	b09d      	sub	sp, #116	@ 0x74
 800e0f0:	4607      	mov	r7, r0
 800e0f2:	460d      	mov	r5, r1
 800e0f4:	4614      	mov	r4, r2
 800e0f6:	d510      	bpl.n	800e11a <_svfiprintf_r+0x36>
 800e0f8:	690b      	ldr	r3, [r1, #16]
 800e0fa:	b973      	cbnz	r3, 800e11a <_svfiprintf_r+0x36>
 800e0fc:	2140      	movs	r1, #64	@ 0x40
 800e0fe:	f7ff fa39 	bl	800d574 <_malloc_r>
 800e102:	6028      	str	r0, [r5, #0]
 800e104:	6128      	str	r0, [r5, #16]
 800e106:	b930      	cbnz	r0, 800e116 <_svfiprintf_r+0x32>
 800e108:	230c      	movs	r3, #12
 800e10a:	603b      	str	r3, [r7, #0]
 800e10c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e110:	b01d      	add	sp, #116	@ 0x74
 800e112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e116:	2340      	movs	r3, #64	@ 0x40
 800e118:	616b      	str	r3, [r5, #20]
 800e11a:	2300      	movs	r3, #0
 800e11c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e11e:	2320      	movs	r3, #32
 800e120:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e124:	f8cd 800c 	str.w	r8, [sp, #12]
 800e128:	2330      	movs	r3, #48	@ 0x30
 800e12a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e2c8 <_svfiprintf_r+0x1e4>
 800e12e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e132:	f04f 0901 	mov.w	r9, #1
 800e136:	4623      	mov	r3, r4
 800e138:	469a      	mov	sl, r3
 800e13a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e13e:	b10a      	cbz	r2, 800e144 <_svfiprintf_r+0x60>
 800e140:	2a25      	cmp	r2, #37	@ 0x25
 800e142:	d1f9      	bne.n	800e138 <_svfiprintf_r+0x54>
 800e144:	ebba 0b04 	subs.w	fp, sl, r4
 800e148:	d00b      	beq.n	800e162 <_svfiprintf_r+0x7e>
 800e14a:	465b      	mov	r3, fp
 800e14c:	4622      	mov	r2, r4
 800e14e:	4629      	mov	r1, r5
 800e150:	4638      	mov	r0, r7
 800e152:	f7ff ff6c 	bl	800e02e <__ssputs_r>
 800e156:	3001      	adds	r0, #1
 800e158:	f000 80a7 	beq.w	800e2aa <_svfiprintf_r+0x1c6>
 800e15c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e15e:	445a      	add	r2, fp
 800e160:	9209      	str	r2, [sp, #36]	@ 0x24
 800e162:	f89a 3000 	ldrb.w	r3, [sl]
 800e166:	2b00      	cmp	r3, #0
 800e168:	f000 809f 	beq.w	800e2aa <_svfiprintf_r+0x1c6>
 800e16c:	2300      	movs	r3, #0
 800e16e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e176:	f10a 0a01 	add.w	sl, sl, #1
 800e17a:	9304      	str	r3, [sp, #16]
 800e17c:	9307      	str	r3, [sp, #28]
 800e17e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e182:	931a      	str	r3, [sp, #104]	@ 0x68
 800e184:	4654      	mov	r4, sl
 800e186:	2205      	movs	r2, #5
 800e188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e18c:	484e      	ldr	r0, [pc, #312]	@ (800e2c8 <_svfiprintf_r+0x1e4>)
 800e18e:	f7f2 f857 	bl	8000240 <memchr>
 800e192:	9a04      	ldr	r2, [sp, #16]
 800e194:	b9d8      	cbnz	r0, 800e1ce <_svfiprintf_r+0xea>
 800e196:	06d0      	lsls	r0, r2, #27
 800e198:	bf44      	itt	mi
 800e19a:	2320      	movmi	r3, #32
 800e19c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1a0:	0711      	lsls	r1, r2, #28
 800e1a2:	bf44      	itt	mi
 800e1a4:	232b      	movmi	r3, #43	@ 0x2b
 800e1a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1aa:	f89a 3000 	ldrb.w	r3, [sl]
 800e1ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1b0:	d015      	beq.n	800e1de <_svfiprintf_r+0xfa>
 800e1b2:	9a07      	ldr	r2, [sp, #28]
 800e1b4:	4654      	mov	r4, sl
 800e1b6:	2000      	movs	r0, #0
 800e1b8:	f04f 0c0a 	mov.w	ip, #10
 800e1bc:	4621      	mov	r1, r4
 800e1be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1c2:	3b30      	subs	r3, #48	@ 0x30
 800e1c4:	2b09      	cmp	r3, #9
 800e1c6:	d94b      	bls.n	800e260 <_svfiprintf_r+0x17c>
 800e1c8:	b1b0      	cbz	r0, 800e1f8 <_svfiprintf_r+0x114>
 800e1ca:	9207      	str	r2, [sp, #28]
 800e1cc:	e014      	b.n	800e1f8 <_svfiprintf_r+0x114>
 800e1ce:	eba0 0308 	sub.w	r3, r0, r8
 800e1d2:	fa09 f303 	lsl.w	r3, r9, r3
 800e1d6:	4313      	orrs	r3, r2
 800e1d8:	9304      	str	r3, [sp, #16]
 800e1da:	46a2      	mov	sl, r4
 800e1dc:	e7d2      	b.n	800e184 <_svfiprintf_r+0xa0>
 800e1de:	9b03      	ldr	r3, [sp, #12]
 800e1e0:	1d19      	adds	r1, r3, #4
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	9103      	str	r1, [sp, #12]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	bfbb      	ittet	lt
 800e1ea:	425b      	neglt	r3, r3
 800e1ec:	f042 0202 	orrlt.w	r2, r2, #2
 800e1f0:	9307      	strge	r3, [sp, #28]
 800e1f2:	9307      	strlt	r3, [sp, #28]
 800e1f4:	bfb8      	it	lt
 800e1f6:	9204      	strlt	r2, [sp, #16]
 800e1f8:	7823      	ldrb	r3, [r4, #0]
 800e1fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1fc:	d10a      	bne.n	800e214 <_svfiprintf_r+0x130>
 800e1fe:	7863      	ldrb	r3, [r4, #1]
 800e200:	2b2a      	cmp	r3, #42	@ 0x2a
 800e202:	d132      	bne.n	800e26a <_svfiprintf_r+0x186>
 800e204:	9b03      	ldr	r3, [sp, #12]
 800e206:	1d1a      	adds	r2, r3, #4
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	9203      	str	r2, [sp, #12]
 800e20c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e210:	3402      	adds	r4, #2
 800e212:	9305      	str	r3, [sp, #20]
 800e214:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e2d8 <_svfiprintf_r+0x1f4>
 800e218:	7821      	ldrb	r1, [r4, #0]
 800e21a:	2203      	movs	r2, #3
 800e21c:	4650      	mov	r0, sl
 800e21e:	f7f2 f80f 	bl	8000240 <memchr>
 800e222:	b138      	cbz	r0, 800e234 <_svfiprintf_r+0x150>
 800e224:	9b04      	ldr	r3, [sp, #16]
 800e226:	eba0 000a 	sub.w	r0, r0, sl
 800e22a:	2240      	movs	r2, #64	@ 0x40
 800e22c:	4082      	lsls	r2, r0
 800e22e:	4313      	orrs	r3, r2
 800e230:	3401      	adds	r4, #1
 800e232:	9304      	str	r3, [sp, #16]
 800e234:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e238:	4824      	ldr	r0, [pc, #144]	@ (800e2cc <_svfiprintf_r+0x1e8>)
 800e23a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e23e:	2206      	movs	r2, #6
 800e240:	f7f1 fffe 	bl	8000240 <memchr>
 800e244:	2800      	cmp	r0, #0
 800e246:	d036      	beq.n	800e2b6 <_svfiprintf_r+0x1d2>
 800e248:	4b21      	ldr	r3, [pc, #132]	@ (800e2d0 <_svfiprintf_r+0x1ec>)
 800e24a:	bb1b      	cbnz	r3, 800e294 <_svfiprintf_r+0x1b0>
 800e24c:	9b03      	ldr	r3, [sp, #12]
 800e24e:	3307      	adds	r3, #7
 800e250:	f023 0307 	bic.w	r3, r3, #7
 800e254:	3308      	adds	r3, #8
 800e256:	9303      	str	r3, [sp, #12]
 800e258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e25a:	4433      	add	r3, r6
 800e25c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e25e:	e76a      	b.n	800e136 <_svfiprintf_r+0x52>
 800e260:	fb0c 3202 	mla	r2, ip, r2, r3
 800e264:	460c      	mov	r4, r1
 800e266:	2001      	movs	r0, #1
 800e268:	e7a8      	b.n	800e1bc <_svfiprintf_r+0xd8>
 800e26a:	2300      	movs	r3, #0
 800e26c:	3401      	adds	r4, #1
 800e26e:	9305      	str	r3, [sp, #20]
 800e270:	4619      	mov	r1, r3
 800e272:	f04f 0c0a 	mov.w	ip, #10
 800e276:	4620      	mov	r0, r4
 800e278:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e27c:	3a30      	subs	r2, #48	@ 0x30
 800e27e:	2a09      	cmp	r2, #9
 800e280:	d903      	bls.n	800e28a <_svfiprintf_r+0x1a6>
 800e282:	2b00      	cmp	r3, #0
 800e284:	d0c6      	beq.n	800e214 <_svfiprintf_r+0x130>
 800e286:	9105      	str	r1, [sp, #20]
 800e288:	e7c4      	b.n	800e214 <_svfiprintf_r+0x130>
 800e28a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e28e:	4604      	mov	r4, r0
 800e290:	2301      	movs	r3, #1
 800e292:	e7f0      	b.n	800e276 <_svfiprintf_r+0x192>
 800e294:	ab03      	add	r3, sp, #12
 800e296:	9300      	str	r3, [sp, #0]
 800e298:	462a      	mov	r2, r5
 800e29a:	4b0e      	ldr	r3, [pc, #56]	@ (800e2d4 <_svfiprintf_r+0x1f0>)
 800e29c:	a904      	add	r1, sp, #16
 800e29e:	4638      	mov	r0, r7
 800e2a0:	f7fc ff42 	bl	800b128 <_printf_float>
 800e2a4:	1c42      	adds	r2, r0, #1
 800e2a6:	4606      	mov	r6, r0
 800e2a8:	d1d6      	bne.n	800e258 <_svfiprintf_r+0x174>
 800e2aa:	89ab      	ldrh	r3, [r5, #12]
 800e2ac:	065b      	lsls	r3, r3, #25
 800e2ae:	f53f af2d 	bmi.w	800e10c <_svfiprintf_r+0x28>
 800e2b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e2b4:	e72c      	b.n	800e110 <_svfiprintf_r+0x2c>
 800e2b6:	ab03      	add	r3, sp, #12
 800e2b8:	9300      	str	r3, [sp, #0]
 800e2ba:	462a      	mov	r2, r5
 800e2bc:	4b05      	ldr	r3, [pc, #20]	@ (800e2d4 <_svfiprintf_r+0x1f0>)
 800e2be:	a904      	add	r1, sp, #16
 800e2c0:	4638      	mov	r0, r7
 800e2c2:	f7fd f9c9 	bl	800b658 <_printf_i>
 800e2c6:	e7ed      	b.n	800e2a4 <_svfiprintf_r+0x1c0>
 800e2c8:	0800eff8 	.word	0x0800eff8
 800e2cc:	0800f002 	.word	0x0800f002
 800e2d0:	0800b129 	.word	0x0800b129
 800e2d4:	0800e02f 	.word	0x0800e02f
 800e2d8:	0800effe 	.word	0x0800effe

0800e2dc <__sfputc_r>:
 800e2dc:	6893      	ldr	r3, [r2, #8]
 800e2de:	3b01      	subs	r3, #1
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	b410      	push	{r4}
 800e2e4:	6093      	str	r3, [r2, #8]
 800e2e6:	da08      	bge.n	800e2fa <__sfputc_r+0x1e>
 800e2e8:	6994      	ldr	r4, [r2, #24]
 800e2ea:	42a3      	cmp	r3, r4
 800e2ec:	db01      	blt.n	800e2f2 <__sfputc_r+0x16>
 800e2ee:	290a      	cmp	r1, #10
 800e2f0:	d103      	bne.n	800e2fa <__sfputc_r+0x1e>
 800e2f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2f6:	f000 b9f1 	b.w	800e6dc <__swbuf_r>
 800e2fa:	6813      	ldr	r3, [r2, #0]
 800e2fc:	1c58      	adds	r0, r3, #1
 800e2fe:	6010      	str	r0, [r2, #0]
 800e300:	7019      	strb	r1, [r3, #0]
 800e302:	4608      	mov	r0, r1
 800e304:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e308:	4770      	bx	lr

0800e30a <__sfputs_r>:
 800e30a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e30c:	4606      	mov	r6, r0
 800e30e:	460f      	mov	r7, r1
 800e310:	4614      	mov	r4, r2
 800e312:	18d5      	adds	r5, r2, r3
 800e314:	42ac      	cmp	r4, r5
 800e316:	d101      	bne.n	800e31c <__sfputs_r+0x12>
 800e318:	2000      	movs	r0, #0
 800e31a:	e007      	b.n	800e32c <__sfputs_r+0x22>
 800e31c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e320:	463a      	mov	r2, r7
 800e322:	4630      	mov	r0, r6
 800e324:	f7ff ffda 	bl	800e2dc <__sfputc_r>
 800e328:	1c43      	adds	r3, r0, #1
 800e32a:	d1f3      	bne.n	800e314 <__sfputs_r+0xa>
 800e32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e330 <_vfiprintf_r>:
 800e330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e334:	460d      	mov	r5, r1
 800e336:	b09d      	sub	sp, #116	@ 0x74
 800e338:	4614      	mov	r4, r2
 800e33a:	4698      	mov	r8, r3
 800e33c:	4606      	mov	r6, r0
 800e33e:	b118      	cbz	r0, 800e348 <_vfiprintf_r+0x18>
 800e340:	6a03      	ldr	r3, [r0, #32]
 800e342:	b90b      	cbnz	r3, 800e348 <_vfiprintf_r+0x18>
 800e344:	f7fd fd48 	bl	800bdd8 <__sinit>
 800e348:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e34a:	07d9      	lsls	r1, r3, #31
 800e34c:	d405      	bmi.n	800e35a <_vfiprintf_r+0x2a>
 800e34e:	89ab      	ldrh	r3, [r5, #12]
 800e350:	059a      	lsls	r2, r3, #22
 800e352:	d402      	bmi.n	800e35a <_vfiprintf_r+0x2a>
 800e354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e356:	f7fd fed6 	bl	800c106 <__retarget_lock_acquire_recursive>
 800e35a:	89ab      	ldrh	r3, [r5, #12]
 800e35c:	071b      	lsls	r3, r3, #28
 800e35e:	d501      	bpl.n	800e364 <_vfiprintf_r+0x34>
 800e360:	692b      	ldr	r3, [r5, #16]
 800e362:	b99b      	cbnz	r3, 800e38c <_vfiprintf_r+0x5c>
 800e364:	4629      	mov	r1, r5
 800e366:	4630      	mov	r0, r6
 800e368:	f000 f9f6 	bl	800e758 <__swsetup_r>
 800e36c:	b170      	cbz	r0, 800e38c <_vfiprintf_r+0x5c>
 800e36e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e370:	07dc      	lsls	r4, r3, #31
 800e372:	d504      	bpl.n	800e37e <_vfiprintf_r+0x4e>
 800e374:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e378:	b01d      	add	sp, #116	@ 0x74
 800e37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e37e:	89ab      	ldrh	r3, [r5, #12]
 800e380:	0598      	lsls	r0, r3, #22
 800e382:	d4f7      	bmi.n	800e374 <_vfiprintf_r+0x44>
 800e384:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e386:	f7fd febf 	bl	800c108 <__retarget_lock_release_recursive>
 800e38a:	e7f3      	b.n	800e374 <_vfiprintf_r+0x44>
 800e38c:	2300      	movs	r3, #0
 800e38e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e390:	2320      	movs	r3, #32
 800e392:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e396:	f8cd 800c 	str.w	r8, [sp, #12]
 800e39a:	2330      	movs	r3, #48	@ 0x30
 800e39c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e54c <_vfiprintf_r+0x21c>
 800e3a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e3a4:	f04f 0901 	mov.w	r9, #1
 800e3a8:	4623      	mov	r3, r4
 800e3aa:	469a      	mov	sl, r3
 800e3ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3b0:	b10a      	cbz	r2, 800e3b6 <_vfiprintf_r+0x86>
 800e3b2:	2a25      	cmp	r2, #37	@ 0x25
 800e3b4:	d1f9      	bne.n	800e3aa <_vfiprintf_r+0x7a>
 800e3b6:	ebba 0b04 	subs.w	fp, sl, r4
 800e3ba:	d00b      	beq.n	800e3d4 <_vfiprintf_r+0xa4>
 800e3bc:	465b      	mov	r3, fp
 800e3be:	4622      	mov	r2, r4
 800e3c0:	4629      	mov	r1, r5
 800e3c2:	4630      	mov	r0, r6
 800e3c4:	f7ff ffa1 	bl	800e30a <__sfputs_r>
 800e3c8:	3001      	adds	r0, #1
 800e3ca:	f000 80a7 	beq.w	800e51c <_vfiprintf_r+0x1ec>
 800e3ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3d0:	445a      	add	r2, fp
 800e3d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800e3d4:	f89a 3000 	ldrb.w	r3, [sl]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	f000 809f 	beq.w	800e51c <_vfiprintf_r+0x1ec>
 800e3de:	2300      	movs	r3, #0
 800e3e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e3e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3e8:	f10a 0a01 	add.w	sl, sl, #1
 800e3ec:	9304      	str	r3, [sp, #16]
 800e3ee:	9307      	str	r3, [sp, #28]
 800e3f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e3f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800e3f6:	4654      	mov	r4, sl
 800e3f8:	2205      	movs	r2, #5
 800e3fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3fe:	4853      	ldr	r0, [pc, #332]	@ (800e54c <_vfiprintf_r+0x21c>)
 800e400:	f7f1 ff1e 	bl	8000240 <memchr>
 800e404:	9a04      	ldr	r2, [sp, #16]
 800e406:	b9d8      	cbnz	r0, 800e440 <_vfiprintf_r+0x110>
 800e408:	06d1      	lsls	r1, r2, #27
 800e40a:	bf44      	itt	mi
 800e40c:	2320      	movmi	r3, #32
 800e40e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e412:	0713      	lsls	r3, r2, #28
 800e414:	bf44      	itt	mi
 800e416:	232b      	movmi	r3, #43	@ 0x2b
 800e418:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e41c:	f89a 3000 	ldrb.w	r3, [sl]
 800e420:	2b2a      	cmp	r3, #42	@ 0x2a
 800e422:	d015      	beq.n	800e450 <_vfiprintf_r+0x120>
 800e424:	9a07      	ldr	r2, [sp, #28]
 800e426:	4654      	mov	r4, sl
 800e428:	2000      	movs	r0, #0
 800e42a:	f04f 0c0a 	mov.w	ip, #10
 800e42e:	4621      	mov	r1, r4
 800e430:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e434:	3b30      	subs	r3, #48	@ 0x30
 800e436:	2b09      	cmp	r3, #9
 800e438:	d94b      	bls.n	800e4d2 <_vfiprintf_r+0x1a2>
 800e43a:	b1b0      	cbz	r0, 800e46a <_vfiprintf_r+0x13a>
 800e43c:	9207      	str	r2, [sp, #28]
 800e43e:	e014      	b.n	800e46a <_vfiprintf_r+0x13a>
 800e440:	eba0 0308 	sub.w	r3, r0, r8
 800e444:	fa09 f303 	lsl.w	r3, r9, r3
 800e448:	4313      	orrs	r3, r2
 800e44a:	9304      	str	r3, [sp, #16]
 800e44c:	46a2      	mov	sl, r4
 800e44e:	e7d2      	b.n	800e3f6 <_vfiprintf_r+0xc6>
 800e450:	9b03      	ldr	r3, [sp, #12]
 800e452:	1d19      	adds	r1, r3, #4
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	9103      	str	r1, [sp, #12]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	bfbb      	ittet	lt
 800e45c:	425b      	neglt	r3, r3
 800e45e:	f042 0202 	orrlt.w	r2, r2, #2
 800e462:	9307      	strge	r3, [sp, #28]
 800e464:	9307      	strlt	r3, [sp, #28]
 800e466:	bfb8      	it	lt
 800e468:	9204      	strlt	r2, [sp, #16]
 800e46a:	7823      	ldrb	r3, [r4, #0]
 800e46c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e46e:	d10a      	bne.n	800e486 <_vfiprintf_r+0x156>
 800e470:	7863      	ldrb	r3, [r4, #1]
 800e472:	2b2a      	cmp	r3, #42	@ 0x2a
 800e474:	d132      	bne.n	800e4dc <_vfiprintf_r+0x1ac>
 800e476:	9b03      	ldr	r3, [sp, #12]
 800e478:	1d1a      	adds	r2, r3, #4
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	9203      	str	r2, [sp, #12]
 800e47e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e482:	3402      	adds	r4, #2
 800e484:	9305      	str	r3, [sp, #20]
 800e486:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e55c <_vfiprintf_r+0x22c>
 800e48a:	7821      	ldrb	r1, [r4, #0]
 800e48c:	2203      	movs	r2, #3
 800e48e:	4650      	mov	r0, sl
 800e490:	f7f1 fed6 	bl	8000240 <memchr>
 800e494:	b138      	cbz	r0, 800e4a6 <_vfiprintf_r+0x176>
 800e496:	9b04      	ldr	r3, [sp, #16]
 800e498:	eba0 000a 	sub.w	r0, r0, sl
 800e49c:	2240      	movs	r2, #64	@ 0x40
 800e49e:	4082      	lsls	r2, r0
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	3401      	adds	r4, #1
 800e4a4:	9304      	str	r3, [sp, #16]
 800e4a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4aa:	4829      	ldr	r0, [pc, #164]	@ (800e550 <_vfiprintf_r+0x220>)
 800e4ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e4b0:	2206      	movs	r2, #6
 800e4b2:	f7f1 fec5 	bl	8000240 <memchr>
 800e4b6:	2800      	cmp	r0, #0
 800e4b8:	d03f      	beq.n	800e53a <_vfiprintf_r+0x20a>
 800e4ba:	4b26      	ldr	r3, [pc, #152]	@ (800e554 <_vfiprintf_r+0x224>)
 800e4bc:	bb1b      	cbnz	r3, 800e506 <_vfiprintf_r+0x1d6>
 800e4be:	9b03      	ldr	r3, [sp, #12]
 800e4c0:	3307      	adds	r3, #7
 800e4c2:	f023 0307 	bic.w	r3, r3, #7
 800e4c6:	3308      	adds	r3, #8
 800e4c8:	9303      	str	r3, [sp, #12]
 800e4ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4cc:	443b      	add	r3, r7
 800e4ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4d0:	e76a      	b.n	800e3a8 <_vfiprintf_r+0x78>
 800e4d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4d6:	460c      	mov	r4, r1
 800e4d8:	2001      	movs	r0, #1
 800e4da:	e7a8      	b.n	800e42e <_vfiprintf_r+0xfe>
 800e4dc:	2300      	movs	r3, #0
 800e4de:	3401      	adds	r4, #1
 800e4e0:	9305      	str	r3, [sp, #20]
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	f04f 0c0a 	mov.w	ip, #10
 800e4e8:	4620      	mov	r0, r4
 800e4ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4ee:	3a30      	subs	r2, #48	@ 0x30
 800e4f0:	2a09      	cmp	r2, #9
 800e4f2:	d903      	bls.n	800e4fc <_vfiprintf_r+0x1cc>
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d0c6      	beq.n	800e486 <_vfiprintf_r+0x156>
 800e4f8:	9105      	str	r1, [sp, #20]
 800e4fa:	e7c4      	b.n	800e486 <_vfiprintf_r+0x156>
 800e4fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800e500:	4604      	mov	r4, r0
 800e502:	2301      	movs	r3, #1
 800e504:	e7f0      	b.n	800e4e8 <_vfiprintf_r+0x1b8>
 800e506:	ab03      	add	r3, sp, #12
 800e508:	9300      	str	r3, [sp, #0]
 800e50a:	462a      	mov	r2, r5
 800e50c:	4b12      	ldr	r3, [pc, #72]	@ (800e558 <_vfiprintf_r+0x228>)
 800e50e:	a904      	add	r1, sp, #16
 800e510:	4630      	mov	r0, r6
 800e512:	f7fc fe09 	bl	800b128 <_printf_float>
 800e516:	4607      	mov	r7, r0
 800e518:	1c78      	adds	r0, r7, #1
 800e51a:	d1d6      	bne.n	800e4ca <_vfiprintf_r+0x19a>
 800e51c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e51e:	07d9      	lsls	r1, r3, #31
 800e520:	d405      	bmi.n	800e52e <_vfiprintf_r+0x1fe>
 800e522:	89ab      	ldrh	r3, [r5, #12]
 800e524:	059a      	lsls	r2, r3, #22
 800e526:	d402      	bmi.n	800e52e <_vfiprintf_r+0x1fe>
 800e528:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e52a:	f7fd fded 	bl	800c108 <__retarget_lock_release_recursive>
 800e52e:	89ab      	ldrh	r3, [r5, #12]
 800e530:	065b      	lsls	r3, r3, #25
 800e532:	f53f af1f 	bmi.w	800e374 <_vfiprintf_r+0x44>
 800e536:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e538:	e71e      	b.n	800e378 <_vfiprintf_r+0x48>
 800e53a:	ab03      	add	r3, sp, #12
 800e53c:	9300      	str	r3, [sp, #0]
 800e53e:	462a      	mov	r2, r5
 800e540:	4b05      	ldr	r3, [pc, #20]	@ (800e558 <_vfiprintf_r+0x228>)
 800e542:	a904      	add	r1, sp, #16
 800e544:	4630      	mov	r0, r6
 800e546:	f7fd f887 	bl	800b658 <_printf_i>
 800e54a:	e7e4      	b.n	800e516 <_vfiprintf_r+0x1e6>
 800e54c:	0800eff8 	.word	0x0800eff8
 800e550:	0800f002 	.word	0x0800f002
 800e554:	0800b129 	.word	0x0800b129
 800e558:	0800e30b 	.word	0x0800e30b
 800e55c:	0800effe 	.word	0x0800effe

0800e560 <__sflush_r>:
 800e560:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e568:	0716      	lsls	r6, r2, #28
 800e56a:	4605      	mov	r5, r0
 800e56c:	460c      	mov	r4, r1
 800e56e:	d454      	bmi.n	800e61a <__sflush_r+0xba>
 800e570:	684b      	ldr	r3, [r1, #4]
 800e572:	2b00      	cmp	r3, #0
 800e574:	dc02      	bgt.n	800e57c <__sflush_r+0x1c>
 800e576:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e578:	2b00      	cmp	r3, #0
 800e57a:	dd48      	ble.n	800e60e <__sflush_r+0xae>
 800e57c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e57e:	2e00      	cmp	r6, #0
 800e580:	d045      	beq.n	800e60e <__sflush_r+0xae>
 800e582:	2300      	movs	r3, #0
 800e584:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e588:	682f      	ldr	r7, [r5, #0]
 800e58a:	6a21      	ldr	r1, [r4, #32]
 800e58c:	602b      	str	r3, [r5, #0]
 800e58e:	d030      	beq.n	800e5f2 <__sflush_r+0x92>
 800e590:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e592:	89a3      	ldrh	r3, [r4, #12]
 800e594:	0759      	lsls	r1, r3, #29
 800e596:	d505      	bpl.n	800e5a4 <__sflush_r+0x44>
 800e598:	6863      	ldr	r3, [r4, #4]
 800e59a:	1ad2      	subs	r2, r2, r3
 800e59c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e59e:	b10b      	cbz	r3, 800e5a4 <__sflush_r+0x44>
 800e5a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e5a2:	1ad2      	subs	r2, r2, r3
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e5a8:	6a21      	ldr	r1, [r4, #32]
 800e5aa:	4628      	mov	r0, r5
 800e5ac:	47b0      	blx	r6
 800e5ae:	1c43      	adds	r3, r0, #1
 800e5b0:	89a3      	ldrh	r3, [r4, #12]
 800e5b2:	d106      	bne.n	800e5c2 <__sflush_r+0x62>
 800e5b4:	6829      	ldr	r1, [r5, #0]
 800e5b6:	291d      	cmp	r1, #29
 800e5b8:	d82b      	bhi.n	800e612 <__sflush_r+0xb2>
 800e5ba:	4a2a      	ldr	r2, [pc, #168]	@ (800e664 <__sflush_r+0x104>)
 800e5bc:	410a      	asrs	r2, r1
 800e5be:	07d6      	lsls	r6, r2, #31
 800e5c0:	d427      	bmi.n	800e612 <__sflush_r+0xb2>
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	6062      	str	r2, [r4, #4]
 800e5c6:	04d9      	lsls	r1, r3, #19
 800e5c8:	6922      	ldr	r2, [r4, #16]
 800e5ca:	6022      	str	r2, [r4, #0]
 800e5cc:	d504      	bpl.n	800e5d8 <__sflush_r+0x78>
 800e5ce:	1c42      	adds	r2, r0, #1
 800e5d0:	d101      	bne.n	800e5d6 <__sflush_r+0x76>
 800e5d2:	682b      	ldr	r3, [r5, #0]
 800e5d4:	b903      	cbnz	r3, 800e5d8 <__sflush_r+0x78>
 800e5d6:	6560      	str	r0, [r4, #84]	@ 0x54
 800e5d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e5da:	602f      	str	r7, [r5, #0]
 800e5dc:	b1b9      	cbz	r1, 800e60e <__sflush_r+0xae>
 800e5de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e5e2:	4299      	cmp	r1, r3
 800e5e4:	d002      	beq.n	800e5ec <__sflush_r+0x8c>
 800e5e6:	4628      	mov	r0, r5
 800e5e8:	f7fe fc16 	bl	800ce18 <_free_r>
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	6363      	str	r3, [r4, #52]	@ 0x34
 800e5f0:	e00d      	b.n	800e60e <__sflush_r+0xae>
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	47b0      	blx	r6
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	1c50      	adds	r0, r2, #1
 800e5fc:	d1c9      	bne.n	800e592 <__sflush_r+0x32>
 800e5fe:	682b      	ldr	r3, [r5, #0]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d0c6      	beq.n	800e592 <__sflush_r+0x32>
 800e604:	2b1d      	cmp	r3, #29
 800e606:	d001      	beq.n	800e60c <__sflush_r+0xac>
 800e608:	2b16      	cmp	r3, #22
 800e60a:	d11e      	bne.n	800e64a <__sflush_r+0xea>
 800e60c:	602f      	str	r7, [r5, #0]
 800e60e:	2000      	movs	r0, #0
 800e610:	e022      	b.n	800e658 <__sflush_r+0xf8>
 800e612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e616:	b21b      	sxth	r3, r3
 800e618:	e01b      	b.n	800e652 <__sflush_r+0xf2>
 800e61a:	690f      	ldr	r7, [r1, #16]
 800e61c:	2f00      	cmp	r7, #0
 800e61e:	d0f6      	beq.n	800e60e <__sflush_r+0xae>
 800e620:	0793      	lsls	r3, r2, #30
 800e622:	680e      	ldr	r6, [r1, #0]
 800e624:	bf08      	it	eq
 800e626:	694b      	ldreq	r3, [r1, #20]
 800e628:	600f      	str	r7, [r1, #0]
 800e62a:	bf18      	it	ne
 800e62c:	2300      	movne	r3, #0
 800e62e:	eba6 0807 	sub.w	r8, r6, r7
 800e632:	608b      	str	r3, [r1, #8]
 800e634:	f1b8 0f00 	cmp.w	r8, #0
 800e638:	dde9      	ble.n	800e60e <__sflush_r+0xae>
 800e63a:	6a21      	ldr	r1, [r4, #32]
 800e63c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e63e:	4643      	mov	r3, r8
 800e640:	463a      	mov	r2, r7
 800e642:	4628      	mov	r0, r5
 800e644:	47b0      	blx	r6
 800e646:	2800      	cmp	r0, #0
 800e648:	dc08      	bgt.n	800e65c <__sflush_r+0xfc>
 800e64a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e64e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e652:	81a3      	strh	r3, [r4, #12]
 800e654:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e65c:	4407      	add	r7, r0
 800e65e:	eba8 0800 	sub.w	r8, r8, r0
 800e662:	e7e7      	b.n	800e634 <__sflush_r+0xd4>
 800e664:	dfbffffe 	.word	0xdfbffffe

0800e668 <_fflush_r>:
 800e668:	b538      	push	{r3, r4, r5, lr}
 800e66a:	690b      	ldr	r3, [r1, #16]
 800e66c:	4605      	mov	r5, r0
 800e66e:	460c      	mov	r4, r1
 800e670:	b913      	cbnz	r3, 800e678 <_fflush_r+0x10>
 800e672:	2500      	movs	r5, #0
 800e674:	4628      	mov	r0, r5
 800e676:	bd38      	pop	{r3, r4, r5, pc}
 800e678:	b118      	cbz	r0, 800e682 <_fflush_r+0x1a>
 800e67a:	6a03      	ldr	r3, [r0, #32]
 800e67c:	b90b      	cbnz	r3, 800e682 <_fflush_r+0x1a>
 800e67e:	f7fd fbab 	bl	800bdd8 <__sinit>
 800e682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d0f3      	beq.n	800e672 <_fflush_r+0xa>
 800e68a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e68c:	07d0      	lsls	r0, r2, #31
 800e68e:	d404      	bmi.n	800e69a <_fflush_r+0x32>
 800e690:	0599      	lsls	r1, r3, #22
 800e692:	d402      	bmi.n	800e69a <_fflush_r+0x32>
 800e694:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e696:	f7fd fd36 	bl	800c106 <__retarget_lock_acquire_recursive>
 800e69a:	4628      	mov	r0, r5
 800e69c:	4621      	mov	r1, r4
 800e69e:	f7ff ff5f 	bl	800e560 <__sflush_r>
 800e6a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e6a4:	07da      	lsls	r2, r3, #31
 800e6a6:	4605      	mov	r5, r0
 800e6a8:	d4e4      	bmi.n	800e674 <_fflush_r+0xc>
 800e6aa:	89a3      	ldrh	r3, [r4, #12]
 800e6ac:	059b      	lsls	r3, r3, #22
 800e6ae:	d4e1      	bmi.n	800e674 <_fflush_r+0xc>
 800e6b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e6b2:	f7fd fd29 	bl	800c108 <__retarget_lock_release_recursive>
 800e6b6:	e7dd      	b.n	800e674 <_fflush_r+0xc>

0800e6b8 <fiprintf>:
 800e6b8:	b40e      	push	{r1, r2, r3}
 800e6ba:	b503      	push	{r0, r1, lr}
 800e6bc:	4601      	mov	r1, r0
 800e6be:	ab03      	add	r3, sp, #12
 800e6c0:	4805      	ldr	r0, [pc, #20]	@ (800e6d8 <fiprintf+0x20>)
 800e6c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6c6:	6800      	ldr	r0, [r0, #0]
 800e6c8:	9301      	str	r3, [sp, #4]
 800e6ca:	f7ff fe31 	bl	800e330 <_vfiprintf_r>
 800e6ce:	b002      	add	sp, #8
 800e6d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6d4:	b003      	add	sp, #12
 800e6d6:	4770      	bx	lr
 800e6d8:	20000358 	.word	0x20000358

0800e6dc <__swbuf_r>:
 800e6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6de:	460e      	mov	r6, r1
 800e6e0:	4614      	mov	r4, r2
 800e6e2:	4605      	mov	r5, r0
 800e6e4:	b118      	cbz	r0, 800e6ee <__swbuf_r+0x12>
 800e6e6:	6a03      	ldr	r3, [r0, #32]
 800e6e8:	b90b      	cbnz	r3, 800e6ee <__swbuf_r+0x12>
 800e6ea:	f7fd fb75 	bl	800bdd8 <__sinit>
 800e6ee:	69a3      	ldr	r3, [r4, #24]
 800e6f0:	60a3      	str	r3, [r4, #8]
 800e6f2:	89a3      	ldrh	r3, [r4, #12]
 800e6f4:	071a      	lsls	r2, r3, #28
 800e6f6:	d501      	bpl.n	800e6fc <__swbuf_r+0x20>
 800e6f8:	6923      	ldr	r3, [r4, #16]
 800e6fa:	b943      	cbnz	r3, 800e70e <__swbuf_r+0x32>
 800e6fc:	4621      	mov	r1, r4
 800e6fe:	4628      	mov	r0, r5
 800e700:	f000 f82a 	bl	800e758 <__swsetup_r>
 800e704:	b118      	cbz	r0, 800e70e <__swbuf_r+0x32>
 800e706:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800e70a:	4638      	mov	r0, r7
 800e70c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e70e:	6823      	ldr	r3, [r4, #0]
 800e710:	6922      	ldr	r2, [r4, #16]
 800e712:	1a98      	subs	r0, r3, r2
 800e714:	6963      	ldr	r3, [r4, #20]
 800e716:	b2f6      	uxtb	r6, r6
 800e718:	4283      	cmp	r3, r0
 800e71a:	4637      	mov	r7, r6
 800e71c:	dc05      	bgt.n	800e72a <__swbuf_r+0x4e>
 800e71e:	4621      	mov	r1, r4
 800e720:	4628      	mov	r0, r5
 800e722:	f7ff ffa1 	bl	800e668 <_fflush_r>
 800e726:	2800      	cmp	r0, #0
 800e728:	d1ed      	bne.n	800e706 <__swbuf_r+0x2a>
 800e72a:	68a3      	ldr	r3, [r4, #8]
 800e72c:	3b01      	subs	r3, #1
 800e72e:	60a3      	str	r3, [r4, #8]
 800e730:	6823      	ldr	r3, [r4, #0]
 800e732:	1c5a      	adds	r2, r3, #1
 800e734:	6022      	str	r2, [r4, #0]
 800e736:	701e      	strb	r6, [r3, #0]
 800e738:	6962      	ldr	r2, [r4, #20]
 800e73a:	1c43      	adds	r3, r0, #1
 800e73c:	429a      	cmp	r2, r3
 800e73e:	d004      	beq.n	800e74a <__swbuf_r+0x6e>
 800e740:	89a3      	ldrh	r3, [r4, #12]
 800e742:	07db      	lsls	r3, r3, #31
 800e744:	d5e1      	bpl.n	800e70a <__swbuf_r+0x2e>
 800e746:	2e0a      	cmp	r6, #10
 800e748:	d1df      	bne.n	800e70a <__swbuf_r+0x2e>
 800e74a:	4621      	mov	r1, r4
 800e74c:	4628      	mov	r0, r5
 800e74e:	f7ff ff8b 	bl	800e668 <_fflush_r>
 800e752:	2800      	cmp	r0, #0
 800e754:	d0d9      	beq.n	800e70a <__swbuf_r+0x2e>
 800e756:	e7d6      	b.n	800e706 <__swbuf_r+0x2a>

0800e758 <__swsetup_r>:
 800e758:	b538      	push	{r3, r4, r5, lr}
 800e75a:	4b29      	ldr	r3, [pc, #164]	@ (800e800 <__swsetup_r+0xa8>)
 800e75c:	4605      	mov	r5, r0
 800e75e:	6818      	ldr	r0, [r3, #0]
 800e760:	460c      	mov	r4, r1
 800e762:	b118      	cbz	r0, 800e76c <__swsetup_r+0x14>
 800e764:	6a03      	ldr	r3, [r0, #32]
 800e766:	b90b      	cbnz	r3, 800e76c <__swsetup_r+0x14>
 800e768:	f7fd fb36 	bl	800bdd8 <__sinit>
 800e76c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e770:	0719      	lsls	r1, r3, #28
 800e772:	d422      	bmi.n	800e7ba <__swsetup_r+0x62>
 800e774:	06da      	lsls	r2, r3, #27
 800e776:	d407      	bmi.n	800e788 <__swsetup_r+0x30>
 800e778:	2209      	movs	r2, #9
 800e77a:	602a      	str	r2, [r5, #0]
 800e77c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e780:	81a3      	strh	r3, [r4, #12]
 800e782:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e786:	e033      	b.n	800e7f0 <__swsetup_r+0x98>
 800e788:	0758      	lsls	r0, r3, #29
 800e78a:	d512      	bpl.n	800e7b2 <__swsetup_r+0x5a>
 800e78c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e78e:	b141      	cbz	r1, 800e7a2 <__swsetup_r+0x4a>
 800e790:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e794:	4299      	cmp	r1, r3
 800e796:	d002      	beq.n	800e79e <__swsetup_r+0x46>
 800e798:	4628      	mov	r0, r5
 800e79a:	f7fe fb3d 	bl	800ce18 <_free_r>
 800e79e:	2300      	movs	r3, #0
 800e7a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e7a2:	89a3      	ldrh	r3, [r4, #12]
 800e7a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e7a8:	81a3      	strh	r3, [r4, #12]
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	6063      	str	r3, [r4, #4]
 800e7ae:	6923      	ldr	r3, [r4, #16]
 800e7b0:	6023      	str	r3, [r4, #0]
 800e7b2:	89a3      	ldrh	r3, [r4, #12]
 800e7b4:	f043 0308 	orr.w	r3, r3, #8
 800e7b8:	81a3      	strh	r3, [r4, #12]
 800e7ba:	6923      	ldr	r3, [r4, #16]
 800e7bc:	b94b      	cbnz	r3, 800e7d2 <__swsetup_r+0x7a>
 800e7be:	89a3      	ldrh	r3, [r4, #12]
 800e7c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e7c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e7c8:	d003      	beq.n	800e7d2 <__swsetup_r+0x7a>
 800e7ca:	4621      	mov	r1, r4
 800e7cc:	4628      	mov	r0, r5
 800e7ce:	f000 f8b2 	bl	800e936 <__smakebuf_r>
 800e7d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7d6:	f013 0201 	ands.w	r2, r3, #1
 800e7da:	d00a      	beq.n	800e7f2 <__swsetup_r+0x9a>
 800e7dc:	2200      	movs	r2, #0
 800e7de:	60a2      	str	r2, [r4, #8]
 800e7e0:	6962      	ldr	r2, [r4, #20]
 800e7e2:	4252      	negs	r2, r2
 800e7e4:	61a2      	str	r2, [r4, #24]
 800e7e6:	6922      	ldr	r2, [r4, #16]
 800e7e8:	b942      	cbnz	r2, 800e7fc <__swsetup_r+0xa4>
 800e7ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e7ee:	d1c5      	bne.n	800e77c <__swsetup_r+0x24>
 800e7f0:	bd38      	pop	{r3, r4, r5, pc}
 800e7f2:	0799      	lsls	r1, r3, #30
 800e7f4:	bf58      	it	pl
 800e7f6:	6962      	ldrpl	r2, [r4, #20]
 800e7f8:	60a2      	str	r2, [r4, #8]
 800e7fa:	e7f4      	b.n	800e7e6 <__swsetup_r+0x8e>
 800e7fc:	2000      	movs	r0, #0
 800e7fe:	e7f7      	b.n	800e7f0 <__swsetup_r+0x98>
 800e800:	20000358 	.word	0x20000358

0800e804 <memmove>:
 800e804:	4288      	cmp	r0, r1
 800e806:	b510      	push	{r4, lr}
 800e808:	eb01 0402 	add.w	r4, r1, r2
 800e80c:	d902      	bls.n	800e814 <memmove+0x10>
 800e80e:	4284      	cmp	r4, r0
 800e810:	4623      	mov	r3, r4
 800e812:	d807      	bhi.n	800e824 <memmove+0x20>
 800e814:	1e43      	subs	r3, r0, #1
 800e816:	42a1      	cmp	r1, r4
 800e818:	d008      	beq.n	800e82c <memmove+0x28>
 800e81a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e81e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e822:	e7f8      	b.n	800e816 <memmove+0x12>
 800e824:	4402      	add	r2, r0
 800e826:	4601      	mov	r1, r0
 800e828:	428a      	cmp	r2, r1
 800e82a:	d100      	bne.n	800e82e <memmove+0x2a>
 800e82c:	bd10      	pop	{r4, pc}
 800e82e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e832:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e836:	e7f7      	b.n	800e828 <memmove+0x24>

0800e838 <_sbrk_r>:
 800e838:	b538      	push	{r3, r4, r5, lr}
 800e83a:	4d06      	ldr	r5, [pc, #24]	@ (800e854 <_sbrk_r+0x1c>)
 800e83c:	2300      	movs	r3, #0
 800e83e:	4604      	mov	r4, r0
 800e840:	4608      	mov	r0, r1
 800e842:	602b      	str	r3, [r5, #0]
 800e844:	f7f3 fa7a 	bl	8001d3c <_sbrk>
 800e848:	1c43      	adds	r3, r0, #1
 800e84a:	d102      	bne.n	800e852 <_sbrk_r+0x1a>
 800e84c:	682b      	ldr	r3, [r5, #0]
 800e84e:	b103      	cbz	r3, 800e852 <_sbrk_r+0x1a>
 800e850:	6023      	str	r3, [r4, #0]
 800e852:	bd38      	pop	{r3, r4, r5, pc}
 800e854:	20000970 	.word	0x20000970

0800e858 <abort>:
 800e858:	b508      	push	{r3, lr}
 800e85a:	2006      	movs	r0, #6
 800e85c:	f000 f8d0 	bl	800ea00 <raise>
 800e860:	2001      	movs	r0, #1
 800e862:	f7f3 f9f3 	bl	8001c4c <_exit>

0800e866 <_calloc_r>:
 800e866:	b570      	push	{r4, r5, r6, lr}
 800e868:	fba1 5402 	umull	r5, r4, r1, r2
 800e86c:	b93c      	cbnz	r4, 800e87e <_calloc_r+0x18>
 800e86e:	4629      	mov	r1, r5
 800e870:	f7fe fe80 	bl	800d574 <_malloc_r>
 800e874:	4606      	mov	r6, r0
 800e876:	b928      	cbnz	r0, 800e884 <_calloc_r+0x1e>
 800e878:	2600      	movs	r6, #0
 800e87a:	4630      	mov	r0, r6
 800e87c:	bd70      	pop	{r4, r5, r6, pc}
 800e87e:	220c      	movs	r2, #12
 800e880:	6002      	str	r2, [r0, #0]
 800e882:	e7f9      	b.n	800e878 <_calloc_r+0x12>
 800e884:	462a      	mov	r2, r5
 800e886:	4621      	mov	r1, r4
 800e888:	f7fd fb51 	bl	800bf2e <memset>
 800e88c:	e7f5      	b.n	800e87a <_calloc_r+0x14>

0800e88e <_realloc_r>:
 800e88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e892:	4680      	mov	r8, r0
 800e894:	4615      	mov	r5, r2
 800e896:	460c      	mov	r4, r1
 800e898:	b921      	cbnz	r1, 800e8a4 <_realloc_r+0x16>
 800e89a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e89e:	4611      	mov	r1, r2
 800e8a0:	f7fe be68 	b.w	800d574 <_malloc_r>
 800e8a4:	b92a      	cbnz	r2, 800e8b2 <_realloc_r+0x24>
 800e8a6:	f7fe fab7 	bl	800ce18 <_free_r>
 800e8aa:	2400      	movs	r4, #0
 800e8ac:	4620      	mov	r0, r4
 800e8ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8b2:	f000 f8e3 	bl	800ea7c <_malloc_usable_size_r>
 800e8b6:	4285      	cmp	r5, r0
 800e8b8:	4606      	mov	r6, r0
 800e8ba:	d802      	bhi.n	800e8c2 <_realloc_r+0x34>
 800e8bc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e8c0:	d8f4      	bhi.n	800e8ac <_realloc_r+0x1e>
 800e8c2:	4629      	mov	r1, r5
 800e8c4:	4640      	mov	r0, r8
 800e8c6:	f7fe fe55 	bl	800d574 <_malloc_r>
 800e8ca:	4607      	mov	r7, r0
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	d0ec      	beq.n	800e8aa <_realloc_r+0x1c>
 800e8d0:	42b5      	cmp	r5, r6
 800e8d2:	462a      	mov	r2, r5
 800e8d4:	4621      	mov	r1, r4
 800e8d6:	bf28      	it	cs
 800e8d8:	4632      	movcs	r2, r6
 800e8da:	f7fd fc16 	bl	800c10a <memcpy>
 800e8de:	4621      	mov	r1, r4
 800e8e0:	4640      	mov	r0, r8
 800e8e2:	f7fe fa99 	bl	800ce18 <_free_r>
 800e8e6:	463c      	mov	r4, r7
 800e8e8:	e7e0      	b.n	800e8ac <_realloc_r+0x1e>

0800e8ea <__swhatbuf_r>:
 800e8ea:	b570      	push	{r4, r5, r6, lr}
 800e8ec:	460c      	mov	r4, r1
 800e8ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8f2:	2900      	cmp	r1, #0
 800e8f4:	b096      	sub	sp, #88	@ 0x58
 800e8f6:	4615      	mov	r5, r2
 800e8f8:	461e      	mov	r6, r3
 800e8fa:	da0d      	bge.n	800e918 <__swhatbuf_r+0x2e>
 800e8fc:	89a3      	ldrh	r3, [r4, #12]
 800e8fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e902:	f04f 0100 	mov.w	r1, #0
 800e906:	bf14      	ite	ne
 800e908:	2340      	movne	r3, #64	@ 0x40
 800e90a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e90e:	2000      	movs	r0, #0
 800e910:	6031      	str	r1, [r6, #0]
 800e912:	602b      	str	r3, [r5, #0]
 800e914:	b016      	add	sp, #88	@ 0x58
 800e916:	bd70      	pop	{r4, r5, r6, pc}
 800e918:	466a      	mov	r2, sp
 800e91a:	f000 f879 	bl	800ea10 <_fstat_r>
 800e91e:	2800      	cmp	r0, #0
 800e920:	dbec      	blt.n	800e8fc <__swhatbuf_r+0x12>
 800e922:	9901      	ldr	r1, [sp, #4]
 800e924:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e928:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e92c:	4259      	negs	r1, r3
 800e92e:	4159      	adcs	r1, r3
 800e930:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e934:	e7eb      	b.n	800e90e <__swhatbuf_r+0x24>

0800e936 <__smakebuf_r>:
 800e936:	898b      	ldrh	r3, [r1, #12]
 800e938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e93a:	079d      	lsls	r5, r3, #30
 800e93c:	4606      	mov	r6, r0
 800e93e:	460c      	mov	r4, r1
 800e940:	d507      	bpl.n	800e952 <__smakebuf_r+0x1c>
 800e942:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e946:	6023      	str	r3, [r4, #0]
 800e948:	6123      	str	r3, [r4, #16]
 800e94a:	2301      	movs	r3, #1
 800e94c:	6163      	str	r3, [r4, #20]
 800e94e:	b003      	add	sp, #12
 800e950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e952:	ab01      	add	r3, sp, #4
 800e954:	466a      	mov	r2, sp
 800e956:	f7ff ffc8 	bl	800e8ea <__swhatbuf_r>
 800e95a:	9f00      	ldr	r7, [sp, #0]
 800e95c:	4605      	mov	r5, r0
 800e95e:	4639      	mov	r1, r7
 800e960:	4630      	mov	r0, r6
 800e962:	f7fe fe07 	bl	800d574 <_malloc_r>
 800e966:	b948      	cbnz	r0, 800e97c <__smakebuf_r+0x46>
 800e968:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e96c:	059a      	lsls	r2, r3, #22
 800e96e:	d4ee      	bmi.n	800e94e <__smakebuf_r+0x18>
 800e970:	f023 0303 	bic.w	r3, r3, #3
 800e974:	f043 0302 	orr.w	r3, r3, #2
 800e978:	81a3      	strh	r3, [r4, #12]
 800e97a:	e7e2      	b.n	800e942 <__smakebuf_r+0xc>
 800e97c:	89a3      	ldrh	r3, [r4, #12]
 800e97e:	6020      	str	r0, [r4, #0]
 800e980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e984:	81a3      	strh	r3, [r4, #12]
 800e986:	9b01      	ldr	r3, [sp, #4]
 800e988:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e98c:	b15b      	cbz	r3, 800e9a6 <__smakebuf_r+0x70>
 800e98e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e992:	4630      	mov	r0, r6
 800e994:	f000 f84e 	bl	800ea34 <_isatty_r>
 800e998:	b128      	cbz	r0, 800e9a6 <__smakebuf_r+0x70>
 800e99a:	89a3      	ldrh	r3, [r4, #12]
 800e99c:	f023 0303 	bic.w	r3, r3, #3
 800e9a0:	f043 0301 	orr.w	r3, r3, #1
 800e9a4:	81a3      	strh	r3, [r4, #12]
 800e9a6:	89a3      	ldrh	r3, [r4, #12]
 800e9a8:	431d      	orrs	r5, r3
 800e9aa:	81a5      	strh	r5, [r4, #12]
 800e9ac:	e7cf      	b.n	800e94e <__smakebuf_r+0x18>

0800e9ae <_raise_r>:
 800e9ae:	291f      	cmp	r1, #31
 800e9b0:	b538      	push	{r3, r4, r5, lr}
 800e9b2:	4605      	mov	r5, r0
 800e9b4:	460c      	mov	r4, r1
 800e9b6:	d904      	bls.n	800e9c2 <_raise_r+0x14>
 800e9b8:	2316      	movs	r3, #22
 800e9ba:	6003      	str	r3, [r0, #0]
 800e9bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e9c0:	bd38      	pop	{r3, r4, r5, pc}
 800e9c2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e9c4:	b112      	cbz	r2, 800e9cc <_raise_r+0x1e>
 800e9c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e9ca:	b94b      	cbnz	r3, 800e9e0 <_raise_r+0x32>
 800e9cc:	4628      	mov	r0, r5
 800e9ce:	f000 f853 	bl	800ea78 <_getpid_r>
 800e9d2:	4622      	mov	r2, r4
 800e9d4:	4601      	mov	r1, r0
 800e9d6:	4628      	mov	r0, r5
 800e9d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9dc:	f000 b83a 	b.w	800ea54 <_kill_r>
 800e9e0:	2b01      	cmp	r3, #1
 800e9e2:	d00a      	beq.n	800e9fa <_raise_r+0x4c>
 800e9e4:	1c59      	adds	r1, r3, #1
 800e9e6:	d103      	bne.n	800e9f0 <_raise_r+0x42>
 800e9e8:	2316      	movs	r3, #22
 800e9ea:	6003      	str	r3, [r0, #0]
 800e9ec:	2001      	movs	r0, #1
 800e9ee:	e7e7      	b.n	800e9c0 <_raise_r+0x12>
 800e9f0:	2100      	movs	r1, #0
 800e9f2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e9f6:	4620      	mov	r0, r4
 800e9f8:	4798      	blx	r3
 800e9fa:	2000      	movs	r0, #0
 800e9fc:	e7e0      	b.n	800e9c0 <_raise_r+0x12>
	...

0800ea00 <raise>:
 800ea00:	4b02      	ldr	r3, [pc, #8]	@ (800ea0c <raise+0xc>)
 800ea02:	4601      	mov	r1, r0
 800ea04:	6818      	ldr	r0, [r3, #0]
 800ea06:	f7ff bfd2 	b.w	800e9ae <_raise_r>
 800ea0a:	bf00      	nop
 800ea0c:	20000358 	.word	0x20000358

0800ea10 <_fstat_r>:
 800ea10:	b538      	push	{r3, r4, r5, lr}
 800ea12:	4d07      	ldr	r5, [pc, #28]	@ (800ea30 <_fstat_r+0x20>)
 800ea14:	2300      	movs	r3, #0
 800ea16:	4604      	mov	r4, r0
 800ea18:	4608      	mov	r0, r1
 800ea1a:	4611      	mov	r1, r2
 800ea1c:	602b      	str	r3, [r5, #0]
 800ea1e:	f7f3 f965 	bl	8001cec <_fstat>
 800ea22:	1c43      	adds	r3, r0, #1
 800ea24:	d102      	bne.n	800ea2c <_fstat_r+0x1c>
 800ea26:	682b      	ldr	r3, [r5, #0]
 800ea28:	b103      	cbz	r3, 800ea2c <_fstat_r+0x1c>
 800ea2a:	6023      	str	r3, [r4, #0]
 800ea2c:	bd38      	pop	{r3, r4, r5, pc}
 800ea2e:	bf00      	nop
 800ea30:	20000970 	.word	0x20000970

0800ea34 <_isatty_r>:
 800ea34:	b538      	push	{r3, r4, r5, lr}
 800ea36:	4d06      	ldr	r5, [pc, #24]	@ (800ea50 <_isatty_r+0x1c>)
 800ea38:	2300      	movs	r3, #0
 800ea3a:	4604      	mov	r4, r0
 800ea3c:	4608      	mov	r0, r1
 800ea3e:	602b      	str	r3, [r5, #0]
 800ea40:	f7f3 f964 	bl	8001d0c <_isatty>
 800ea44:	1c43      	adds	r3, r0, #1
 800ea46:	d102      	bne.n	800ea4e <_isatty_r+0x1a>
 800ea48:	682b      	ldr	r3, [r5, #0]
 800ea4a:	b103      	cbz	r3, 800ea4e <_isatty_r+0x1a>
 800ea4c:	6023      	str	r3, [r4, #0]
 800ea4e:	bd38      	pop	{r3, r4, r5, pc}
 800ea50:	20000970 	.word	0x20000970

0800ea54 <_kill_r>:
 800ea54:	b538      	push	{r3, r4, r5, lr}
 800ea56:	4d07      	ldr	r5, [pc, #28]	@ (800ea74 <_kill_r+0x20>)
 800ea58:	2300      	movs	r3, #0
 800ea5a:	4604      	mov	r4, r0
 800ea5c:	4608      	mov	r0, r1
 800ea5e:	4611      	mov	r1, r2
 800ea60:	602b      	str	r3, [r5, #0]
 800ea62:	f7f3 f8e3 	bl	8001c2c <_kill>
 800ea66:	1c43      	adds	r3, r0, #1
 800ea68:	d102      	bne.n	800ea70 <_kill_r+0x1c>
 800ea6a:	682b      	ldr	r3, [r5, #0]
 800ea6c:	b103      	cbz	r3, 800ea70 <_kill_r+0x1c>
 800ea6e:	6023      	str	r3, [r4, #0]
 800ea70:	bd38      	pop	{r3, r4, r5, pc}
 800ea72:	bf00      	nop
 800ea74:	20000970 	.word	0x20000970

0800ea78 <_getpid_r>:
 800ea78:	f7f3 b8d0 	b.w	8001c1c <_getpid>

0800ea7c <_malloc_usable_size_r>:
 800ea7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea80:	1f18      	subs	r0, r3, #4
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	bfbc      	itt	lt
 800ea86:	580b      	ldrlt	r3, [r1, r0]
 800ea88:	18c0      	addlt	r0, r0, r3
 800ea8a:	4770      	bx	lr

0800ea8c <_init>:
 800ea8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea8e:	bf00      	nop
 800ea90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea92:	bc08      	pop	{r3}
 800ea94:	469e      	mov	lr, r3
 800ea96:	4770      	bx	lr

0800ea98 <_fini>:
 800ea98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea9a:	bf00      	nop
 800ea9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea9e:	bc08      	pop	{r3}
 800eaa0:	469e      	mov	lr, r3
 800eaa2:	4770      	bx	lr
